/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./assets/js/dashboard.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./assets/js/dashboard.js":
/*!********************************!*\
  !*** ./assets/js/dashboard.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _jquery = __webpack_require__(/*! jquery */ "jquery");

var _jquery2 = _interopRequireDefault(_jquery);

var _window = __webpack_require__(/*! window */ "window");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-disable camelcase */
var $features = (0, _jquery2.default)(document.getElementsByClassName('ep-features'));
var $errorOverlay = (0, _jquery2.default)(document.getElementsByClassName('error-overlay'));
var $progressBar = (0, _jquery2.default)(document.getElementsByClassName('progress-bar'));
var $syncStatusText = (0, _jquery2.default)(document.getElementsByClassName('sync-status'));
var $startSyncButton = (0, _jquery2.default)(document.getElementsByClassName('start-sync'));
var $resumeSyncButton = (0, _jquery2.default)(document.getElementsByClassName('resume-sync'));
var $pauseSyncButton = (0, _jquery2.default)(document.getElementsByClassName('pause-sync'));
var $cancelSyncButton = (0, _jquery2.default)(document.getElementsByClassName('cancel-sync'));
var $epCredentialsTab = (0, _jquery2.default)(document.getElementsByClassName('ep-credentials-tab'));
var $epCredentialsHostLabel = (0, _jquery2.default)('.ep-host-row label');
var $epCredentialsHostLegend = (0, _jquery2.default)(document.getElementsByClassName('ep-host-legend'));
var $epCredentialsAdditionalFields = (0, _jquery2.default)(document.getElementsByClassName('ep-additional-fields'));
var epHostField = document.getElementById('ep_host');
var epHost = epHostField ? epHostField.value : null;
var epHostNewValue = '';

var syncStatus = 'sync',
    featureSync = false,
    currentSyncItem = void 0,
    syncStack = void 0,
    processed = 0,
    toProcess = 0;

$features.on('click', '.learn-more, .collapse', function () {
	(0, _jquery2.default)(this).parents('.ep-feature').toggleClass('show-full');
});

$features.on('click', '.settings-button', function () {
	(0, _jquery2.default)(this).parents('.ep-feature').toggleClass('show-settings');
});

$features.on('click', '.save-settings', function (event) {
	event.preventDefault();

	if ((0, _jquery2.default)(this).hasClass('disabled')) {
		return;
	}

	var feature = event.target.getAttribute('data-feature');
	var $feature = $features.find('.ep-feature-' + feature);
	var settings = {};
	var $settings = $feature.find('.setting-field');

	$settings.each(function () {
		var type = (0, _jquery2.default)(this).attr('type');
		var name = (0, _jquery2.default)(this).attr('data-field-name');
		var value = (0, _jquery2.default)(this).attr('value');

		if ('radio' === type) {
			if ((0, _jquery2.default)(this).attr('checked')) {
				settings[name] = value;
			}
		} else {
			settings[name] = value;
		}
	});

	$feature.addClass('saving');

	_jquery2.default.ajax({
		method: 'post',
		url: _window.ajaxurl,
		data: {
			action: 'ep_save_feature',
			feature: feature,
			nonce: _window.epDash.nonce,
			settings: settings
		}
	}).done(function (response) {
		setTimeout(function () {
			$feature.removeClass('saving');

			if ('1' === settings.active) {
				$feature.addClass('feature-active');
			} else {
				$feature.removeClass('feature-active');
			}

			if (response.data.reindex) {
				syncStatus = 'initialsync';

				updateSyncDash();

				// On initial sync, remove dashboard warnings that dont make sense
				(0, _jquery2.default)('[data-ep-notice="no-sync"], [data-ep-notice="auto-activate-sync"], [data-ep-notice="upgrade-sync"]').remove();

				syncStatus = 'sync';

				$feature.addClass('feature-syncing');

				featureSync = feature;

				sync();
			}
		}, 700);
	}).error(function () {
		setTimeout(function () {
			$feature.removeClass('saving');
			$feature.removeClass('feature-active');
			$feature.removeClass('feature-syncing');
		}, 700);
	});
});

if (_window.epDash.index_meta) {
	if (_window.epDash.index_meta.wpcli_sync) {
		syncStatus = 'wpcli';
		updateSyncDash();
	} else {
		processed = _window.epDash.index_meta.offset;
		toProcess = _window.epDash.index_meta['found_items'];

		if (_window.epDash.index_meta.feature_sync) {
			featureSync = _window.epDash.index_meta.feature_sync;
		}

		if (_window.epDash.index_meta.current_sync_item) {
			currentSyncItem = _window.epDash.index_meta.current_sync_item;
		}

		if (_window.epDash.index_meta.site_stack) {
			syncStack = _window.epDash.index_meta.sync_stack;
		}

		if (syncStack && syncStack.length) {
			// We are mid sync
			if (_window.epDash.auto_start_index) {
				syncStatus = 'sync';

				history.pushState({}, document.title, document.location.pathname + document.location.search.replace(/&do_sync/, ''));

				updateSyncDash();
				sync();
			} else {
				syncStatus = 'pause';
				updateSyncDash();
			}
		} else {
			if (0 === toProcess && !_window.epDash.index_meta.start) {
				// Sync finished
				syncStatus = 'finished';
				updateSyncDash();
			} else {
				// We are mid sync
				if (_window.epDash.auto_start_index) {
					syncStatus = 'sync';

					history.pushState({}, document.title, document.location.pathname + document.location.search.replace(/&do_sync/, ''));

					updateSyncDash();
					sync();
				} else {
					syncStatus = 'pause';
					updateSyncDash();
				}
			}
		}
	}
} else {
	// Start a new sync automatically
	if (_window.epDash.auto_start_index) {
		syncStatus = 'initialsync';

		updateSyncDash();

		syncStatus = 'sync';

		history.pushState({}, document.title, document.location.pathname + document.location.search.replace(/&do_sync/, ''));

		sync();
	}
}

/**
 * Update dashboard with syncing information
 */
function updateSyncDash() {
	var text = void 0;

	if (0 === processed) {
		$progressBar.css({ width: '1%' });
	} else {
		var width = parseInt(processed) / parseInt(toProcess) * 100;
		$progressBar.css({ width: width + '%' });
	}

	if ('initialsync' === syncStatus) {
		text = _window.epDash.sync_initial;

		$syncStatusText.text(text);

		$syncStatusText.show();
		$progressBar.show();
		$pauseSyncButton.show();
		$errorOverlay.addClass('syncing');

		$cancelSyncButton.hide();
		$resumeSyncButton.hide();
		$startSyncButton.hide();
	} else if ('sync' === syncStatus) {
		text = _window.epDash.sync_syncing;

		if (currentSyncItem) {
			if (currentSyncItem.indexable) {
				text += ' ' + _window.epDash.sync_indexable_labels[currentSyncItem.indexable].plural.toLowerCase() + ' ' + parseInt(processed) + '/' + parseInt(toProcess);
			}

			if (currentSyncItem.url) {
				text += ' (' + currentSyncItem.url + ')';
			}
		}

		$syncStatusText.text(text);

		$syncStatusText.show();
		$progressBar.show();
		$pauseSyncButton.show();
		$errorOverlay.addClass('syncing');

		$cancelSyncButton.hide();
		$resumeSyncButton.hide();
		$startSyncButton.hide();
	} else if ('pause' === syncStatus) {
		text = _window.epDash.sync_paused;

		if (toProcess && 0 !== toProcess) {
			text += ', ' + parseInt(processed) + '/' + parseInt(toProcess) + ' ' + _window.epDash.sync_indexable_labels[currentSyncItem.indexable].plural.toLowerCase();
		}

		if (currentSyncItem && currentSyncItem.url) {
			text += ' (' + currentSyncItem.url + ')';
		}

		$syncStatusText.text(text);

		$syncStatusText.show();
		$progressBar.show();
		$pauseSyncButton.hide();
		$errorOverlay.addClass('syncing');

		$cancelSyncButton.show();
		$resumeSyncButton.show();
		$startSyncButton.hide();
	} else if ('wpcli' === syncStatus) {
		text = _window.epDash.sync_wpcli;

		$syncStatusText.text(text);

		$syncStatusText.show();
		$progressBar.hide();
		$pauseSyncButton.hide();
		$errorOverlay.addClass('syncing');

		$cancelSyncButton.hide();
		$resumeSyncButton.hide();
		$startSyncButton.hide();
	} else if ('error' === syncStatus) {
		$syncStatusText.text(_window.epDash.sync_error);
		$syncStatusText.show();
		$startSyncButton.show();
		$cancelSyncButton.hide();
		$resumeSyncButton.hide();
		$pauseSyncButton.hide();
		$errorOverlay.removeClass('syncing');
		$progressBar.hide();

		if (featureSync) {
			$features.find('.ep-feature-' + featureSync).removeClass('feature-syncing');
		}

		featureSync = null;

		setTimeout(function () {
			$syncStatusText.hide();
		}, 7000);
	} else if ('cancel' === syncStatus) {
		$syncStatusText.hide();
		$progressBar.hide();
		$pauseSyncButton.hide();
		$errorOverlay.removeClass('syncing');

		$cancelSyncButton.hide();
		$resumeSyncButton.hide();
		$startSyncButton.show();

		if (featureSync) {
			$features.find('.ep-feature-' + featureSync).removeClass('feature-syncing');
		}

		featureSync = null;
	} else if ('finished' === syncStatus) {
		$syncStatusText.text(_window.epDash.sync_complete);

		$syncStatusText.show();
		$progressBar.hide();
		$pauseSyncButton.hide();
		$cancelSyncButton.hide();
		$resumeSyncButton.hide();
		$startSyncButton.show();
		$errorOverlay.removeClass('syncing');

		if (featureSync) {
			$features.find('.ep-feature-' + featureSync).removeClass('feature-syncing');
		}

		featureSync = null;

		setTimeout(function () {
			$syncStatusText.hide();
		}, 7000);
	}
}

/**
 * Cancel a sync
 */
function cancelSync() {
	_jquery2.default.ajax({
		method: 'post',
		url: _window.ajaxurl,
		data: {
			action: 'ep_cancel_index',
			nonce: _window.epDash.nonce
		}
	});
}

/**
 * Perform an elasticpress sync
 */
function sync() {
	_jquery2.default.ajax({
		method: 'post',
		url: _window.ajaxurl,
		data: {
			action: 'ep_index',
			feature_sync: featureSync,
			nonce: _window.epDash.nonce
		}
	}).done(function (response) {
		if ('sync' !== syncStatus) {
			return;
		}

		toProcess = response.data.found_items;
		processed = response.data.offset;

		if (response.data.sync_stack) {
			syncStack = response.data.sync_stack;
		}

		if (response.data.current_sync_item) {
			currentSyncItem = response.data.current_sync_item;
		}

		if (syncStack && syncStack.length) {
			// We are mid multisite sync
			syncStatus = 'sync';
			updateSyncDash();

			sync();
			return;
		}

		if (0 === response.data.found_items && !response.data.start) {
			// Sync finished
			syncStatus = 'finished';
			updateSyncDash();

			if (_window.epDash.install_sync) {
				document.location.replace(_window.epDash.install_complete_url);
			}
		} else {
			// We are starting a sync
			syncStatus = 'sync';
			updateSyncDash();

			sync();
		}
	}).error(function (response) {
		if (response && response.status && 400 <= parseInt(response.status) && 600 > parseInt(response.status)) {
			syncStatus = 'error';
			updateSyncDash();

			cancelSync();
		}
	});
}

$startSyncButton.on('click', function () {
	syncStatus = 'initialsync';

	updateSyncDash();

	// On initial sync, remove dashboard warnings that dont make sense
	(0, _jquery2.default)('[data-ep-notice="no-sync"], [data-ep-notice="auto-activate-sync"], [data-ep-notice="upgrade-sync"]').remove();

	syncStatus = 'sync';
	sync();
});

$pauseSyncButton.on('click', function () {
	syncStatus = 'pause';

	updateSyncDash();
});

$resumeSyncButton.on('click', function () {
	syncStatus = 'sync';

	updateSyncDash();

	sync();
});

$cancelSyncButton.on('click', function () {
	syncStatus = 'cancel';

	updateSyncDash();

	cancelSync();
});

if (epHostField) {
	epHostField.addEventListener('input', function (e) {
		epHostNewValue = e.target.value;
	});
}

$epCredentialsTab.on('click', function (e) {
	var epio = null !== e.currentTarget.getAttribute('data-epio');
	var $target = (0, _jquery2.default)(e.currentTarget);
	var initial = $target.hasClass('initial');

	e.preventDefault();

	if (initial && !epHostField.disabled) {
		epHostField.value = epHost;
	} else {
		epHostField.value = epHostNewValue;
	}

	$epCredentialsTab.removeClass('nav-tab-active');
	$target.addClass('nav-tab-active');

	if (epio) {
		$epCredentialsHostLabel.text('ElasticPress.io Host URL');
		$epCredentialsHostLegend.text('Plug in your ElasticPress.io server here!');
		$epCredentialsAdditionalFields.show();
		$epCredentialsAdditionalFields.attr('aria-hidden', 'false');
	} else {
		$epCredentialsHostLabel.text('Elasticsearch Host URL');
		$epCredentialsHostLegend.text('Plug in your Elasticsearch server here!');
		$epCredentialsAdditionalFields.hide();
		$epCredentialsAdditionalFields.attr('aria-hidden', 'true');
	}
});

/***/ }),

/***/ "jquery":
/*!*************************!*\
  !*** external "jQuery" ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = jQuery;

/***/ }),

/***/ "window":
/*!*************************!*\
  !*** external "window" ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = window;

/***/ })

/******/ });
//# sourceMappingURL=dashboard.min.js.map