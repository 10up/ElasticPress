!function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!==typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"===typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=293)}([,,,function(t,e,n){(function(e){var n="object",r=function(t){return t&&t.Math==Math&&t};t.exports=r(typeof globalThis==n&&globalThis)||r(typeof window==n&&window)||r(typeof self==n&&self)||r(typeof e==n&&e)||Function("return this")()}).call(this,n(50))},,function(t,e){t.exports=function(t){try{return!!t()}catch(t){return!0}}},function(t,e){t.exports=window},function(t,e){t.exports=jQuery},function(t,e){t.exports=function(t){return"object"===typeof t?null!==t:"function"===typeof t}},function(t,e,n){var r=n(5);t.exports=!r((function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a}))},,function(t,e,n){var r=n(9),o=n(19),a=n(26);t.exports=r?function(t,e,n){return o.f(t,e,a(1,n))}:function(t,e,n){return t[e]=n,t}},,function(t,e){var n={}.hasOwnProperty;t.exports=function(t,e){return n.call(t,e)}},function(t,e,n){var r=n(3),o=n(32).f,a=n(11),i=n(37),c=n(23),u=n(58),s=n(53);t.exports=function(t,e){var n,f,l,p,d,v=t.target,h=t.global,y=t.stat;if(n=h?r:y?r[v]||c(v,{}):(r[v]||{}).prototype)for(f in e){if(p=e[f],l=t.noTargetGet?(d=o(n,f))&&d.value:n[f],!s(h?f:v+(y?".":"#")+f,t.forced)&&void 0!==l){if(typeof p===typeof l)continue;u(p,l)}(t.sham||l&&l.sham)&&a(p,"sham",!0),i(n,f,p,t)}}},function(t,e,n){var r=n(8);t.exports=function(t){if(!r(t))throw TypeError(String(t)+" is not an object");return t}},function(t,e,n){var r=n(3),o=n(23),a=n(55),i=r["__core-js_shared__"]||o("__core-js_shared__",{});(t.exports=function(t,e){return i[t]||(i[t]=void 0!==e?e:{})})("versions",[]).push({version:"3.2.1",mode:a?"pure":"global",copyright:"Â© 2019 Denis Pushkarev (zloirock.ru)"})},function(t,e){t.exports=function(t){if(void 0==t)throw TypeError("Can't call method on "+t);return t}},function(t,e,n){var r=n(3),o=n(16),a=n(35),i=n(62),c=r.Symbol,u=o("wks");t.exports=function(t){return u[t]||(u[t]=i&&c[t]||(i?c:a)("Symbol."+t))}},function(t,e,n){var r=n(9),o=n(33),a=n(15),i=n(27),c=Object.defineProperty;e.f=r?c:function(t,e,n){if(a(t),e=i(e,!0),a(n),o)try{return c(t,e,n)}catch(t){}if("get"in n||"set"in n)throw TypeError("Accessors not supported");return"value"in n&&(t[e]=n.value),t}},function(t,e,n){var r=n(31),o=n(17);t.exports=function(t){return r(o(t))}},function(t,e,n){var r=n(22),o=Math.min;t.exports=function(t){return t>0?o(r(t),9007199254740991):0}},function(t,e){var n=Math.ceil,r=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?r:n)(t)}},function(t,e,n){var r=n(3),o=n(11);t.exports=function(t,e){try{o(r,t,e)}catch(n){r[t]=e}return e}},function(t,e){var n={}.toString;t.exports=function(t){return n.call(t).slice(8,-1)}},function(t,e,n){var r=n(17);t.exports=function(t){return Object(r(t))}},function(t,e){t.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},function(t,e,n){var r=n(8);t.exports=function(t,e){if(!r(t))return t;var n,o;if(e&&"function"==typeof(n=t.toString)&&!r(o=n.call(t)))return o;if("function"==typeof(n=t.valueOf)&&!r(o=n.call(t)))return o;if(!e&&"function"==typeof(n=t.toString)&&!r(o=n.call(t)))return o;throw TypeError("Can't convert object to primitive value")}},function(t,e){t.exports={}},,function(t,e){t.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},function(t,e,n){var r=n(5),o=n(24),a="".split;t.exports=r((function(){return!Object("z").propertyIsEnumerable(0)}))?function(t){return"String"==o(t)?a.call(t,""):Object(t)}:Object},function(t,e,n){var r=n(9),o=n(46),a=n(26),i=n(20),c=n(27),u=n(13),s=n(33),f=Object.getOwnPropertyDescriptor;e.f=r?f:function(t,e){if(t=i(t),e=c(e,!0),s)try{return f(t,e)}catch(t){}if(u(t,e))return a(!o.f.call(t,e),t[e])}},function(t,e,n){var r=n(9),o=n(5),a=n(39);t.exports=!r&&!o((function(){return 7!=Object.defineProperty(a("div"),"a",{get:function(){return 7}}).a}))},function(t,e,n){var r=n(16);t.exports=r("native-function-to-string",Function.toString)},function(t,e){var n=0,r=Math.random();t.exports=function(t){return"Symbol("+String(void 0===t?"":t)+")_"+(++n+r).toString(36)}},function(t,e,n){var r=n(13),o=n(20),a=n(47).indexOf,i=n(28);t.exports=function(t,e){var n,c=o(t),u=0,s=[];for(n in c)!r(i,n)&&r(c,n)&&s.push(n);for(;e.length>u;)r(c,n=e[u++])&&(~a(s,n)||s.push(n));return s}},function(t,e,n){var r=n(3),o=n(16),a=n(11),i=n(13),c=n(23),u=n(34),s=n(56),f=s.get,l=s.enforce,p=String(u).split("toString");o("inspectSource",(function(t){return u.call(t)})),(t.exports=function(t,e,n,o){var u=!!o&&!!o.unsafe,s=!!o&&!!o.enumerable,f=!!o&&!!o.noTargetGet;"function"==typeof n&&("string"!=typeof e||i(n,"name")||a(n,"name",e),l(n).source=p.join("string"==typeof e?e:"")),t!==r?(u?!f&&t[e]&&(s=!0):delete t[e],s?t[e]=n:a(t,e,n)):s?t[e]=n:c(e,n)})(Function.prototype,"toString",(function(){return"function"==typeof this&&f(this).source||u.call(this)}))},function(t,e,n){var r=n(60),o=n(3),a=function(t){return"function"==typeof t?t:void 0};t.exports=function(t,e){return arguments.length<2?a(r[t])||a(o[t]):r[t]&&r[t][e]||o[t]&&o[t][e]}},function(t,e,n){var r=n(3),o=n(8),a=r.document,i=o(a)&&o(a.createElement);t.exports=function(t){return i?a.createElement(t):{}}},function(t,e,n){var r=n(16),o=n(35),a=r("keys");t.exports=function(t){return a[t]||(a[t]=o(t))}},function(t,e,n){var r=n(22),o=Math.max,a=Math.min;t.exports=function(t,e){var n=r(t);return n<0?o(n+e,0):a(n,e)}},function(t,e,n){var r=n(8),o=n(43),a=n(18)("species");t.exports=function(t,e){var n;return o(t)&&("function"!=typeof(n=t.constructor)||n!==Array&&!o(n.prototype)?r(n)&&null===(n=n[a])&&(n=void 0):n=void 0),new(void 0===n?Array:n)(0===e?0:e)}},function(t,e,n){var r=n(24);t.exports=Array.isArray||function(t){return"Array"==r(t)}},,function(t,e,n){var r=n(61),o=n(31),a=n(25),i=n(21),c=n(42),u=[].push,s=function(t){var e=1==t,n=2==t,s=3==t,f=4==t,l=6==t,p=5==t||l;return function(d,v,h,y){for(var g,x,m=a(d),b=o(m),_=r(v,h,3),w=i(b.length),E=0,S=y||c,C=e?S(d,w):n?S(d,0):void 0;w>E;E++)if((p||E in b)&&(x=_(g=b[E],E,m),t))if(e)C[E]=x;else if(x)switch(t){case 3:return!0;case 5:return g;case 6:return E;case 2:u.call(C,g)}else if(f)return!1;return l?-1:s||f?f:C}};t.exports={forEach:s(0),map:s(1),filter:s(2),some:s(3),every:s(4),find:s(5),findIndex:s(6)}},function(t,e,n){"use strict";var r={}.propertyIsEnumerable,o=Object.getOwnPropertyDescriptor,a=o&&!r.call({1:2},1);e.f=a?function(t){var e=o(this,t);return!!e&&e.enumerable}:r},function(t,e,n){var r=n(20),o=n(21),a=n(41),i=function(t){return function(e,n,i){var c,u=r(e),s=o(u.length),f=a(i,s);if(t&&n!=n){for(;s>f;)if((c=u[f++])!=c)return!0}else for(;s>f;f++)if((t||f in u)&&u[f]===n)return t||f||0;return!t&&-1}};t.exports={includes:i(!0),indexOf:i(!1)}},function(t,e){t.exports=function(t){if("function"!=typeof t)throw TypeError(String(t)+" is not a function");return t}},,function(t,e){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(t){"object"===typeof window&&(n=window)}t.exports=n},function(t,e,n){var r=n(36),o=n(30).concat("length","prototype");e.f=Object.getOwnPropertyNames||function(t){return r(t,o)}},function(t,e){e.f=Object.getOwnPropertySymbols},function(t,e,n){var r=n(5),o=/#|\.prototype\./,a=function(t,e){var n=c[i(t)];return n==s||n!=u&&("function"==typeof e?r(e):!!e)},i=a.normalize=function(t){return String(t).replace(o,".").toLowerCase()},c=a.data={},u=a.NATIVE="N",s=a.POLYFILL="P";t.exports=a},function(t,e,n){var r=n(5),o=n(18)("species");t.exports=function(t){return!r((function(){var e=[];return(e.constructor={})[o]=function(){return{foo:1}},1!==e[t](Boolean).foo}))}},function(t,e){t.exports=!1},function(t,e,n){var r,o,a,i=n(57),c=n(3),u=n(8),s=n(11),f=n(13),l=n(40),p=n(28),d=c.WeakMap;if(i){var v=new d,h=v.get,y=v.has,g=v.set;r=function(t,e){return g.call(v,t,e),e},o=function(t){return h.call(v,t)||{}},a=function(t){return y.call(v,t)}}else{var x=l("state");p[x]=!0,r=function(t,e){return s(t,x,e),e},o=function(t){return f(t,x)?t[x]:{}},a=function(t){return f(t,x)}}t.exports={set:r,get:o,has:a,enforce:function(t){return a(t)?o(t):r(t,{})},getterFor:function(t){return function(e){var n;if(!u(e)||(n=o(e)).type!==t)throw TypeError("Incompatible receiver, "+t+" required");return n}}}},function(t,e,n){var r=n(3),o=n(34),a=r.WeakMap;t.exports="function"===typeof a&&/native code/.test(o.call(a))},function(t,e,n){var r=n(13),o=n(59),a=n(32),i=n(19);t.exports=function(t,e){for(var n=o(e),c=i.f,u=a.f,s=0;s<n.length;s++){var f=n[s];r(t,f)||c(t,f,u(e,f))}}},function(t,e,n){var r=n(38),o=n(51),a=n(52),i=n(15);t.exports=r("Reflect","ownKeys")||function(t){var e=o.f(i(t)),n=a.f;return n?e.concat(n(t)):e}},function(t,e,n){t.exports=n(3)},function(t,e,n){var r=n(48);t.exports=function(t,e,n){if(r(t),void 0===e)return t;switch(n){case 0:return function(){return t.call(e)};case 1:return function(n){return t.call(e,n)};case 2:return function(n,r){return t.call(e,n,r)};case 3:return function(n,r,o){return t.call(e,n,r,o)}}return function(){return t.apply(e,arguments)}}},function(t,e,n){var r=n(5);t.exports=!!Object.getOwnPropertySymbols&&!r((function(){return!String(Symbol())}))},function(t,e,n){var r=n(36),o=n(30);t.exports=Object.keys||function(t){return r(t,o)}},,,function(t,e){t.exports="\t\n\v\f\r Â áââââââââââââ¯âã\u2028\u2029\ufeff"},function(t,e,n){"use strict";var r=n(77),o=RegExp.prototype.exec,a=String.prototype.replace,i=o,c=function(){var t=/a/,e=/b*/g;return o.call(t,"a"),o.call(e,"a"),0!==t.lastIndex||0!==e.lastIndex}(),u=void 0!==/()??/.exec("")[1];(c||u)&&(i=function(t){var e,n,i,s,f=this;return u&&(n=new RegExp("^"+f.source+"$(?!\\s)",r.call(f))),c&&(e=f.lastIndex),i=o.call(f,t),c&&i&&(f.lastIndex=f.global?i.index+i[0].length:e),u&&i&&i.length>1&&a.call(i[0],n,(function(){for(s=1;s<arguments.length-2;s++)void 0===arguments[s]&&(i[s]=void 0)})),i}),t.exports=i},function(t,e,n){"use strict";var r=n(27),o=n(19),a=n(26);t.exports=function(t,e,n){var i=r(e);i in t?o.f(t,i,a(0,n)):t[i]=n}},,,,function(t,e,n){var r=n(18),o=n(73),a=n(11),i=r("unscopables"),c=Array.prototype;void 0==c[i]&&a(c,i,o(null)),t.exports=function(t){c[i][t]=!0}},function(t,e,n){var r=n(15),o=n(74),a=n(30),i=n(28),c=n(75),u=n(39),s=n(40)("IE_PROTO"),f=function(){},l=function(){var t,e=u("iframe"),n=a.length;for(e.style.display="none",c.appendChild(e),e.src=String("javascript:"),(t=e.contentWindow.document).open(),t.write("<script>document.F=Object<\/script>"),t.close(),l=t.F;n--;)delete l.prototype[a[n]];return l()};t.exports=Object.create||function(t,e){var n;return null!==t?(f.prototype=r(t),n=new f,f.prototype=null,n[s]=t):n=l(),void 0===e?n:o(n,e)},i[s]=!0},function(t,e,n){var r=n(9),o=n(19),a=n(15),i=n(63);t.exports=r?Object.defineProperties:function(t,e){a(t);for(var n,r=i(e),c=r.length,u=0;c>u;)o.f(t,n=r[u++],e[n]);return t}},function(t,e,n){var r=n(38);t.exports=r("document","documentElement")},function(t,e,n){var r=n(17),o="["+n(66)+"]",a=RegExp("^"+o+o+"*"),i=RegExp(o+o+"*$"),c=function(t){return function(e){var n=String(r(e));return 1&t&&(n=n.replace(a,"")),2&t&&(n=n.replace(i,"")),n}};t.exports={start:c(1),end:c(2),trim:c(3)}},function(t,e,n){"use strict";var r=n(15);t.exports=function(){var t=r(this),e="";return t.global&&(e+="g"),t.ignoreCase&&(e+="i"),t.multiline&&(e+="m"),t.dotAll&&(e+="s"),t.unicode&&(e+="u"),t.sticky&&(e+="y"),e}},,,,function(t,e,n){"use strict";var r=n(11),o=n(37),a=n(5),i=n(18),c=n(67),u=i("species"),s=!a((function(){var t=/./;return t.exec=function(){var t=[];return t.groups={a:"7"},t},"7"!=="".replace(t,"$<a>")})),f=!a((function(){var t=/(?:)/,e=t.exec;t.exec=function(){return e.apply(this,arguments)};var n="ab".split(t);return 2!==n.length||"a"!==n[0]||"b"!==n[1]}));t.exports=function(t,e,n,l){var p=i(t),d=!a((function(){var e={};return e[p]=function(){return 7},7!=""[t](e)})),v=d&&!a((function(){var e=!1,n=/a/;return n.exec=function(){return e=!0,null},"split"===t&&(n.constructor={},n.constructor[u]=function(){return n}),n[p](""),!e}));if(!d||!v||"replace"===t&&!s||"split"===t&&!f){var h=/./[p],y=n(p,""[t],(function(t,e,n,r,o){return e.exec===c?d&&!o?{done:!0,value:h.call(e,n,r)}:{done:!0,value:t.call(n,e,r)}:{done:!1}})),g=y[0],x=y[1];o(String.prototype,t,g),o(RegExp.prototype,p,2==e?function(t,e){return x.call(t,this,e)}:function(t){return x.call(t,this)}),l&&r(RegExp.prototype[p],"sham",!0)}}},function(t,e,n){var r=n(24),o=n(67);t.exports=function(t,e){var n=t.exec;if("function"===typeof n){var a=n.call(t,e);if("object"!==typeof a)throw TypeError("RegExp exec method returned something other than an Object or null");return a}if("RegExp"!==r(t))throw TypeError("RegExp#exec called on incompatible receiver");return o.call(t,e)}},,,,function(t,e,n){"use strict";var r=n(14),o=n(45).find,a=n(72),i=!0;"find"in[]&&Array(1).find((function(){i=!1})),r({target:"Array",proto:!0,forced:i},{find:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}}),a("find")},function(t,e,n){var r=n(14),o=n(88);r({global:!0,forced:parseInt!=o},{parseInt:o})},function(t,e,n){var r=n(3),o=n(76).trim,a=n(66),i=r.parseInt,c=/^[+-]?0[Xx]/,u=8!==i(a+"08")||22!==i(a+"0x16");t.exports=u?function(t,e){var n=o(String(t));return i(n,e>>>0||(c.test(n)?16:10))}:i},function(t,e,n){"use strict";var r=n(14),o=n(67);r({target:"RegExp",proto:!0,forced:/./.exec!==o},{exec:o})},function(t,e,n){"use strict";var r=n(81),o=n(15),a=n(25),i=n(21),c=n(22),u=n(17),s=n(91),f=n(82),l=Math.max,p=Math.min,d=Math.floor,v=/\$([$&'`]|\d\d?|<[^>]*>)/g,h=/\$([$&'`]|\d\d?)/g;r("replace",2,(function(t,e,n){return[function(n,r){var o=u(this),a=void 0==n?void 0:n[t];return void 0!==a?a.call(n,o,r):e.call(String(o),n,r)},function(t,a){var u=n(e,t,this,a);if(u.done)return u.value;var d=o(t),v=String(this),h="function"===typeof a;h||(a=String(a));var y=d.global;if(y){var g=d.unicode;d.lastIndex=0}for(var x=[];;){var m=f(d,v);if(null===m)break;if(x.push(m),!y)break;""===String(m[0])&&(d.lastIndex=s(v,i(d.lastIndex),g))}for(var b,_="",w=0,E=0;E<x.length;E++){m=x[E];for(var S=String(m[0]),C=l(p(c(m.index),v.length),0),j=[],O=1;O<m.length;O++)j.push(void 0===(b=m[O])?b:String(b));var D=m.groups;if(h){var I=[S].concat(j,C,v);void 0!==D&&I.push(D);var P=String(a.apply(void 0,I))}else P=r(S,v,C,j,D,a);C>=w&&(_+=v.slice(w,C)+P,w=C+S.length)}return _+v.slice(w)}];function r(t,n,r,o,i,c){var u=r+t.length,s=o.length,f=h;return void 0!==i&&(i=a(i),f=v),e.call(c,f,(function(e,a){var c;switch(a.charAt(0)){case"$":return"$";case"&":return t;case"`":return n.slice(0,r);case"'":return n.slice(u);case"<":c=i[a.slice(1,-1)];break;default:var f=+a;if(0===f)return e;if(f>s){var l=d(f/10);return 0===l?e:l<=s?void 0===o[l-1]?a.charAt(1):o[l-1]+a.charAt(1):e}c=o[f-1]}return void 0===c?"":c}))}}))},function(t,e,n){"use strict";var r=n(92).charAt;t.exports=function(t,e,n){return e+(n?r(t,e).length:1)}},function(t,e,n){var r=n(22),o=n(17),a=function(t){return function(e,n){var a,i,c=String(o(e)),u=r(n),s=c.length;return u<0||u>=s?t?"":void 0:(a=c.charCodeAt(u))<55296||a>56319||u+1===s||(i=c.charCodeAt(u+1))<56320||i>57343?t?c.charAt(u):a:t?c.slice(u,u+2):i-56320+(a-55296<<10)+65536}};t.exports={codeAt:a(!1),charAt:a(!0)}},,,,,,,,,,,,,,,,,,,,function(t,e,n){"use strict";var r=n(14),o=n(5),a=n(43),i=n(8),c=n(25),u=n(21),s=n(68),f=n(42),l=n(54),p=n(18)("isConcatSpreadable"),d=!o((function(){var t=[];return t[p]=!1,t.concat()[0]!==t})),v=l("concat"),h=function(t){if(!i(t))return!1;var e=t[p];return void 0!==e?!!e:a(t)};r({target:"Array",proto:!0,forced:!d||!v},{concat:function(t){var e,n,r,o,a,i=c(this),l=f(i,0),p=0;for(e=-1,r=arguments.length;e<r;e++)if(a=-1===e?i:arguments[e],h(a)){if(p+(o=u(a.length))>9007199254740991)throw TypeError("Maximum allowed index exceeded");for(n=0;n<o;n++,p++)n in a&&s(l,p,a[n])}else{if(p>=9007199254740991)throw TypeError("Maximum allowed index exceeded");s(l,p++,a)}return l.length=p,l}})},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(t,e,n){"use strict";n.r(e);n(112),n(86),n(87),n(89),n(90),n(294);var r,o,a=n(7),i=n.n(a),c=n(6),u=i()(document.getElementsByClassName("ep-features")),s=i()(document.getElementsByClassName("error-overlay")),f=i()(document.getElementsByClassName("progress-bar")),l=i()(document.getElementsByClassName("sync-status")),p=i()(document.getElementsByClassName("start-sync")),d=i()(document.getElementsByClassName("resume-sync")),v=i()(document.getElementsByClassName("pause-sync")),h=i()(document.getElementsByClassName("cancel-sync")),y=i()(document.getElementsByClassName("ep-credentials-tab")),g=i()(".ep-host-row label"),x=i()(document.getElementsByClassName("ep-host-legend")),m=i()(document.getElementsByClassName("ep-additional-fields")),b=document.getElementById("ep_host"),_=b?b.value:null,w="",E="sync",S=!1,C=0,j=0;function O(){var t;if(0===C)f.css({width:"1%"});else{var e=parseInt(C)/parseInt(j)*100;f.css({width:"".concat(e,"%")})}"initialsync"===E?(t=c.epDash.sync_initial,l.text(t),l.show(),f.show(),v.show(),s.addClass("syncing"),h.hide(),d.hide(),p.hide()):"sync"===E?(t=c.epDash.sync_syncing,r&&(r.indexable&&(t+=" ".concat(c.epDash.sync_indexable_labels[r.indexable].plural.toLowerCase()," ").concat(parseInt(C),"/").concat(parseInt(j))),r.url&&(t+=" (".concat(r.url,")"))),l.text(t),l.show(),f.show(),v.show(),s.addClass("syncing"),h.hide(),d.hide(),p.hide()):"pause"===E?(t=c.epDash.sync_paused,j&&0!==j&&(t+=", ".concat(parseInt(C),"/").concat(parseInt(j)," ").concat(c.epDash.sync_indexable_labels[r.indexable].plural.toLowerCase())),r&&r.url&&(t+=" (".concat(r.url,")")),l.text(t),l.show(),f.show(),v.hide(),s.addClass("syncing"),h.show(),d.show(),p.hide()):"wpcli"===E?(t=c.epDash.sync_wpcli,l.text(t),l.show(),f.hide(),v.hide(),s.addClass("syncing"),h.hide(),d.hide(),p.hide()):"error"===E?(l.text(c.epDash.sync_error),l.show(),p.show(),h.hide(),d.hide(),v.hide(),s.removeClass("syncing"),f.hide(),S&&u.find(".ep-feature-".concat(S)).removeClass("feature-syncing"),S=null,setTimeout((function(){l.hide()}),7e3)):"cancel"===E?(l.hide(),f.hide(),v.hide(),s.removeClass("syncing"),h.hide(),d.hide(),p.show(),S&&u.find(".ep-feature-".concat(S)).removeClass("feature-syncing"),S=null):"finished"===E&&(l.text(c.epDash.sync_complete),l.show(),f.hide(),v.hide(),h.hide(),d.hide(),p.show(),s.removeClass("syncing"),S&&u.find(".ep-feature-".concat(S)).removeClass("feature-syncing"),S=null,setTimeout((function(){l.hide()}),7e3))}function D(){i.a.ajax({method:"post",url:c.ajaxurl,data:{action:"ep_cancel_index",nonce:c.epDash.nonce}})}function I(){i.a.ajax({method:"post",url:c.ajaxurl,data:{action:"ep_index",feature_sync:S,nonce:c.epDash.nonce}}).done((function(t){if("sync"===E){if(j=t.data.found_items,C=t.data.offset,t.data.sync_stack&&(o=t.data.sync_stack),t.data.current_sync_item&&(r=t.data.current_sync_item),o&&o.length)return E="sync",O(),void I();0!==t.data.found_items||t.data.start?(E="sync",O(),I()):(E="finished",O(),c.epDash.install_sync&&document.location.replace(c.epDash.install_complete_url))}})).error((function(t){t&&t.status&&400<=parseInt(t.status)&&600>parseInt(t.status)&&(E="error",O(),D())}))}u.on("click",".learn-more, .collapse",(function(){i()(this).parents(".ep-feature").toggleClass("show-full")})),u.on("click",".settings-button",(function(){i()(this).parents(".ep-feature").toggleClass("show-settings")})),u.on("click",".save-settings",(function(t){if(t.preventDefault(),!i()(this).hasClass("disabled")){var e=t.target.getAttribute("data-feature"),n=u.find(".ep-feature-".concat(e)),r={};n.find(".setting-field").each((function(){var t=i()(this),e=t.attr("type"),n=t.attr("data-field-name"),o=t.val();"radio"===e?t.is(":checked")&&(r[n]=o):r[n]=o})),n.addClass("saving"),i.a.ajax({method:"post",url:c.ajaxurl,data:{action:"ep_save_feature",feature:e,nonce:c.epDash.nonce,settings:r}}).done((function(t){setTimeout((function(){n.removeClass("saving"),"1"===r.active?n.addClass("feature-active"):n.removeClass("feature-active"),t.data.reindex&&(E="initialsync",O(),i()('[data-ep-notice="no-sync"], [data-ep-notice="auto-activate-sync"], [data-ep-notice="upgrade-sync"]').remove(),E="sync",n.addClass("feature-syncing"),S=e,I())}),700)})).error((function(){setTimeout((function(){n.removeClass("saving"),n.removeClass("feature-active"),n.removeClass("feature-syncing")}),700)}))}})),c.epDash.index_meta?c.epDash.index_meta.wpcli_sync?(E="wpcli",O()):(C=c.epDash.index_meta.offset,j=c.epDash.index_meta.found_items,c.epDash.index_meta.feature_sync&&(S=c.epDash.index_meta.feature_sync),c.epDash.index_meta.current_sync_item&&(r=c.epDash.index_meta.current_sync_item),c.epDash.index_meta.site_stack&&(o=c.epDash.index_meta.sync_stack),o&&o.length?c.epDash.auto_start_index?(E="sync",history.pushState({},document.title,document.location.pathname+document.location.search.replace(/&do_sync/,"")),O(),I()):(E="pause",O()):0!==j||c.epDash.index_meta.start?c.epDash.auto_start_index?(E="sync",history.pushState({},document.title,document.location.pathname+document.location.search.replace(/&do_sync/,"")),O(),I()):(E="pause",O()):(E="finished",O())):c.epDash.auto_start_index&&(E="initialsync",O(),E="sync",history.pushState({},document.title,document.location.pathname+document.location.search.replace(/&do_sync/,"")),I()),p.on("click",(function(){E="initialsync",O(),i()('[data-ep-notice="no-sync"], [data-ep-notice="auto-activate-sync"], [data-ep-notice="upgrade-sync"]').remove(),E="sync",I()})),v.on("click",(function(){E="pause",O()})),d.on("click",(function(){E="sync",O(),I()})),h.on("click",(function(){E="cancel",O(),D()})),b&&b.addEventListener("input",(function(t){w=t.target.value})),y.on("click",(function(t){var e=null!==t.currentTarget.getAttribute("data-epio"),n=i()(t.currentTarget),r=n.hasClass("initial");t.preventDefault(),r&&!b.disabled?b.value=_:b.value=w,y.removeClass("nav-tab-active"),n.addClass("nav-tab-active"),e?(g.text("ElasticPress.io Host URL"),x.text("Plug in your ElasticPress.io server here!"),m.show(),m.attr("aria-hidden","false")):(g.text("Elasticsearch Host URL"),x.text("Plug in your Elasticsearch server here!"),m.hide(),m.attr("aria-hidden","true"))}))},function(t,e,n){"use strict";var r=n(81),o=n(15),a=n(17),i=n(295),c=n(82);r("search",1,(function(t,e,n){return[function(e){var n=a(this),r=void 0==e?void 0:e[t];return void 0!==r?r.call(e,n):new RegExp(e)[t](String(n))},function(t){var r=n(e,t,this);if(r.done)return r.value;var a=o(t),u=String(this),s=a.lastIndex;i(s,0)||(a.lastIndex=0);var f=c(a,u);return i(a.lastIndex,s)||(a.lastIndex=s),null===f?-1:f.index}]}))},function(t,e){t.exports=Object.is||function(t,e){return t===e?0!==t||1/t===1/e:t!=t&&e!=e}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,