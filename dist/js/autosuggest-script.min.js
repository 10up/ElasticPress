!function(t){var e={};function r(n){if(e[n])return e[n].exports;var o=e[n]={i:n,l:!1,exports:{}};return t[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},r.r=function(t){"undefined"!==typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"===typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)r.d(n,o,function(e){return t[e]}.bind(null,o));return n},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=349)}([,function(t,e,r){(function(e){var r="object",n=function(t){return t&&t.Math==Math&&t};t.exports=n(typeof globalThis==r&&globalThis)||n(typeof window==r&&window)||n(typeof self==r&&self)||n(typeof e==r&&e)||Function("return this")()}).call(this,r(44))},function(t,e,r){var n=r(1),o=r(21),i=r(41),a=r(70),c=n.Symbol,u=o("wks");t.exports=function(t){return u[t]||(u[t]=a&&c[t]||(a?c:i)("Symbol."+t))}},,function(t,e){t.exports=function(t){try{return!!t()}catch(t){return!0}}},function(t,e){t.exports=function(t){return"object"===typeof t?null!==t:"function"===typeof t}},function(t,e,r){var n=r(5);t.exports=function(t){if(!n(t))throw TypeError(String(t)+" is not an object");return t}},function(t,e,r){var n=r(1),o=r(35).f,i=r(9),a=r(14),c=r(24),u=r(68),s=r(42);t.exports=function(t,e){var r,f,l,p,h,d=t.target,v=t.global,y=t.stat;if(r=v?n:y?n[d]||c(d,{}):(n[d]||{}).prototype)for(f in e){if(p=e[f],l=t.noTargetGet?(h=o(r,f))&&h.value:r[f],!s(v?f:d+(y?".":"#")+f,t.forced)&&void 0!==l){if(typeof p===typeof l)continue;u(p,l)}(t.sham||l&&l.sham)&&i(p,"sham",!0),a(r,f,p,t)}}},function(t,e){var r={}.hasOwnProperty;t.exports=function(t,e){return r.call(t,e)}},function(t,e,r){var n=r(11),o=r(13),i=r(22);t.exports=n?function(t,e,r){return o.f(t,e,i(1,r))}:function(t,e,r){return t[e]=r,t}},,function(t,e,r){var n=r(4);t.exports=!n((function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a}))},,function(t,e,r){var n=r(11),o=r(39),i=r(6),a=r(28),c=Object.defineProperty;e.f=n?c:function(t,e,r){if(i(t),e=a(e,!0),i(r),o)try{return c(t,e,r)}catch(t){}if("get"in r||"set"in r)throw TypeError("Accessors not supported");return"value"in r&&(t[e]=r.value),t}},function(t,e,r){var n=r(1),o=r(21),i=r(9),a=r(8),c=r(24),u=r(40),s=r(27),f=s.get,l=s.enforce,p=String(u).split("toString");o("inspectSource",(function(t){return u.call(t)})),(t.exports=function(t,e,r,o){var u=!!o&&!!o.unsafe,s=!!o&&!!o.enumerable,f=!!o&&!!o.noTargetGet;"function"==typeof r&&("string"!=typeof e||a(r,"name")||i(r,"name",e),l(r).source=p.join("string"==typeof e?e:"")),t!==n?(u?!f&&t[e]&&(s=!0):delete t[e],s?t[e]=r:i(t,e,r)):s?t[e]=r:c(e,r)})(Function.prototype,"toString",(function(){return"function"==typeof this&&f(this).source||u.call(this)}))},function(t,e){var r={}.toString;t.exports=function(t){return r.call(t).slice(8,-1)}},function(t,e,r){var n=r(23),o=Math.min;t.exports=function(t){return t>0?o(n(t),9007199254740991):0}},function(t,e,r){var n=r(19);t.exports=function(t){return Object(n(t))}},function(t,e,r){"use strict";r.d(e,"a",(function(){return i})),r.d(e,"f",(function(){return a})),r.d(e,"b",(function(){return c})),r.d(e,"c",(function(){return u})),r.d(e,"e",(function(){return s})),r.d(e,"g",(function(){return l})),r.d(e,"d",(function(){return p}));r(86),r(58),r(118),r(122),r(87),r(103),r(120),r(96),r(89),r(79),r(99),r(61);var n=r(73),o=r.n(n),i=function(t,e){var r=null;return function(){for(var n=arguments.length,o=new Array(n),i=0;i<n;i++)o[i]=arguments[i];var a=this;window.clearTimeout(r),r=window.setTimeout((function(){t.apply(a,o)}),e)}},a=function(t,e,r){return t.replace(new RegExp(function(t){return t.replace(/[.*+?^${}()|[\]\\]/g,"\\$&")}(e),"g"),r)},c=function(t){return t.replace(/\\([\s\S])|(")/g,"&quot;")},u=function(t,e){for(;(t=t.parentElement)&&!t.classList.contains(e););return t},s=function(t,e){return t.map((function(t){return t[e]}))},f=function(t,e){var r=[];NodeList.prototype.isPrototypeOf(t)&&(r=Array.from(t)),r.length||(Array.isArray(t)?r=[].concat(o()(t),o()(r)):r.push(t)),r.forEach((function(t){t.style.display=e}))},l=function(t){return f(t,"inline-block")},p=function(t){return f(t,"none")}},function(t,e){t.exports=function(t){if(void 0==t)throw TypeError("Can't call method on "+t);return t}},function(t,e,r){var n=r(33),o=r(19);t.exports=function(t){return n(o(t))}},function(t,e,r){var n=r(1),o=r(24),i=r(25),a=n["__core-js_shared__"]||o("__core-js_shared__",{});(t.exports=function(t,e){return a[t]||(a[t]=void 0!==e?e:{})})("versions",[]).push({version:"3.2.1",mode:i?"pure":"global",copyright:"Â© 2019 Denis Pushkarev (zloirock.ru)"})},function(t,e){t.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},function(t,e){var r=Math.ceil,n=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?n:r)(t)}},function(t,e,r){var n=r(1),o=r(9);t.exports=function(t,e){try{o(n,t,e)}catch(r){n[t]=e}return e}},function(t,e){t.exports=!1},function(t,e,r){var n=r(50),o=r(1),i=function(t){return"function"==typeof t?t:void 0};t.exports=function(t,e){return arguments.length<2?i(n[t])||i(o[t]):n[t]&&n[t][e]||o[t]&&o[t][e]}},function(t,e,r){var n,o,i,a=r(67),c=r(1),u=r(5),s=r(9),f=r(8),l=r(37),p=r(34),h=c.WeakMap;if(a){var d=new h,v=d.get,y=d.has,g=d.set;n=function(t,e){return g.call(d,t,e),e},o=function(t){return v.call(d,t)||{}},i=function(t){return y.call(d,t)}}else{var m=l("state");p[m]=!0,n=function(t,e){return s(t,m,e),e},o=function(t){return f(t,m)?t[m]:{}},i=function(t){return f(t,m)}}t.exports={set:n,get:o,has:i,enforce:function(t){return i(t)?o(t):n(t,{})},getterFor:function(t){return function(e){var r;if(!u(e)||(r=o(e)).type!==t)throw TypeError("Incompatible receiver, "+t+" required");return r}}}},function(t,e,r){var n=r(5);t.exports=function(t,e){if(!n(t))return t;var r,o;if(e&&"function"==typeof(r=t.toString)&&!n(o=r.call(t)))return o;if("function"==typeof(r=t.valueOf)&&!n(o=r.call(t)))return o;if(!e&&"function"==typeof(r=t.toString)&&!n(o=r.call(t)))return o;throw TypeError("Can't convert object to primitive value")}},function(t,e,r){var n=r(30);t.exports=function(t,e,r){if(n(t),void 0===e)return t;switch(r){case 0:return function(){return t.call(e)};case 1:return function(r){return t.call(e,r)};case 2:return function(r,n){return t.call(e,r,n)};case 3:return function(r,n,o){return t.call(e,r,n,o)}}return function(){return t.apply(e,arguments)}}},function(t,e){t.exports=function(t){if("function"!=typeof t)throw TypeError(String(t)+" is not a function");return t}},function(t,e){t.exports={}},,function(t,e,r){var n=r(4),o=r(15),i="".split;t.exports=n((function(){return!Object("z").propertyIsEnumerable(0)}))?function(t){return"String"==o(t)?i.call(t,""):Object(t)}:Object},function(t,e){t.exports={}},function(t,e,r){var n=r(11),o=r(54),i=r(22),a=r(20),c=r(28),u=r(8),s=r(39),f=Object.getOwnPropertyDescriptor;e.f=n?f:function(t,e){if(t=a(t),e=c(e,!0),s)try{return f(t,e)}catch(t){}if(u(t,e))return i(!o.f.call(t,e),t[e])}},function(t,e){t.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},function(t,e,r){var n=r(21),o=r(41),i=n("keys");t.exports=function(t){return i[t]||(i[t]=o(t))}},function(t,e,r){var n=r(1),o=r(5),i=n.document,a=o(i)&&o(i.createElement);t.exports=function(t){return a?i.createElement(t):{}}},function(t,e,r){var n=r(11),o=r(4),i=r(38);t.exports=!n&&!o((function(){return 7!=Object.defineProperty(i("div"),"a",{get:function(){return 7}}).a}))},function(t,e,r){var n=r(21);t.exports=n("native-function-to-string",Function.toString)},function(t,e){var r=0,n=Math.random();t.exports=function(t){return"Symbol("+String(void 0===t?"":t)+")_"+(++r+n).toString(36)}},function(t,e,r){var n=r(4),o=/#|\.prototype\./,i=function(t,e){var r=c[a(t)];return r==s||r!=u&&("function"==typeof e?n(e):!!e)},a=i.normalize=function(t){return String(t).replace(o,".").toLowerCase()},c=i.data={},u=i.NATIVE="N",s=i.POLYFILL="P";t.exports=i},function(t,e,r){var n=r(13).f,o=r(8),i=r(2)("toStringTag");t.exports=function(t,e,r){t&&!o(t=r?t:t.prototype,i)&&n(t,i,{configurable:!0,value:e})}},function(t,e){var r;r=function(){return this}();try{r=r||new Function("return this")()}catch(t){"object"===typeof window&&(r=window)}t.exports=r},function(t,e,r){var n=r(15);t.exports=Array.isArray||function(t){return"Array"==n(t)}},function(t,e,r){var n=r(8),o=r(20),i=r(55).indexOf,a=r(34);t.exports=function(t,e){var r,c=o(t),u=0,s=[];for(r in c)!n(a,r)&&n(c,r)&&s.push(r);for(;e.length>u;)n(c,r=e[u++])&&(~i(s,r)||s.push(r));return s}},function(t,e,r){var n=r(5),o=r(45),i=r(2)("species");t.exports=function(t,e){var r;return o(t)&&("function"!=typeof(r=t.constructor)||r!==Array&&!o(r.prototype)?n(r)&&null===(r=r[i])&&(r=void 0):r=void 0),new(void 0===r?Array:r)(0===e?0:e)}},function(t,e,r){var n=r(4),o=r(2)("species");t.exports=function(t){return!n((function(){var e=[];return(e.constructor={})[o]=function(){return{foo:1}},1!==e[t](Boolean).foo}))}},function(t,e,r){var n=r(29),o=r(33),i=r(17),a=r(16),c=r(47),u=[].push,s=function(t){var e=1==t,r=2==t,s=3==t,f=4==t,l=6==t,p=5==t||l;return function(h,d,v,y){for(var g,m,b=i(h),x=o(b),w=n(d,v,3),E=a(x.length),_=0,T=y||c,S=e?T(h,E):r?T(h,0):void 0;E>_;_++)if((p||_ in x)&&(m=w(g=x[_],_,b),t))if(e)S[_]=m;else if(m)switch(t){case 3:return!0;case 5:return g;case 6:return _;case 2:u.call(S,g)}else if(f)return!1;return l?-1:s||f?f:S}};t.exports={forEach:s(0),map:s(1),filter:s(2),some:s(3),every:s(4),find:s(5),findIndex:s(6)}},function(t,e,r){t.exports=r(1)},function(t,e,r){var n=r(46),o=r(36).concat("length","prototype");e.f=Object.getOwnPropertyNames||function(t){return n(t,o)}},function(t,e,r){var n=r(23),o=Math.max,i=Math.min;t.exports=function(t,e){var r=n(t);return r<0?o(r+e,0):i(r,e)}},function(t,e,r){"use strict";var n=r(28),o=r(13),i=r(22);t.exports=function(t,e,r){var a=n(e);a in t?o.f(t,a,i(0,r)):t[a]=r}},function(t,e,r){"use strict";var n={}.propertyIsEnumerable,o=Object.getOwnPropertyDescriptor,i=o&&!n.call({1:2},1);e.f=i?function(t){var e=o(this,t);return!!e&&e.enumerable}:n},function(t,e,r){var n=r(20),o=r(16),i=r(52),a=function(t){return function(e,r,a){var c,u=n(e),s=o(u.length),f=i(a,s);if(t&&r!=r){for(;s>f;)if((c=u[f++])!=c)return!0}else for(;s>f;f++)if((t||f in u)&&u[f]===r)return t||f||0;return!t&&-1}};t.exports={includes:a(!0),indexOf:a(!1)}},function(t,e,r){"use strict";var n=r(4);t.exports=function(t,e){var r=[][t];return!r||!n((function(){r.call(null,e||function(){throw 1},1)}))}},function(t,e,r){var n=r(71),o=r(31),i=r(2)("iterator");t.exports=function(t){if(void 0!=t)return t[i]||t["@@iterator"]||o[n(t)]}},function(t,e,r){"use strict";var n=r(7),o=r(60);n({target:"Array",proto:!0,forced:[].forEach!=o},{forEach:o})},function(t,e){e.f=Object.getOwnPropertySymbols},function(t,e,r){"use strict";var n=r(49).forEach,o=r(56);t.exports=o("forEach")?function(t){return n(this,t,arguments.length>1?arguments[1]:void 0)}:[].forEach},function(t,e,r){var n=r(1),o=r(78),i=r(60),a=r(9);for(var c in o){var u=n[c],s=u&&u.prototype;if(s&&s.forEach!==i)try{a(s,"forEach",i)}catch(t){s.forEach=i}}},function(t,e,r){var n=r(46),o=r(36);t.exports=Object.keys||function(t){return n(t,o)}},function(t,e,r){"use strict";var n=r(6);t.exports=function(){var t=n(this),e="";return t.global&&(e+="g"),t.ignoreCase&&(e+="i"),t.multiline&&(e+="m"),t.dotAll&&(e+="s"),t.unicode&&(e+="u"),t.sticky&&(e+="y"),e}},function(t,e,r){"use strict";var n=r(63),o=RegExp.prototype.exec,i=String.prototype.replace,a=o,c=function(){var t=/a/,e=/b*/g;return o.call(t,"a"),o.call(e,"a"),0!==t.lastIndex||0!==e.lastIndex}(),u=void 0!==/()??/.exec("")[1];(c||u)&&(a=function(t){var e,r,a,s,f=this;return u&&(r=new RegExp("^"+f.source+"$(?!\\s)",n.call(f))),c&&(e=f.lastIndex),a=o.call(f,t),c&&a&&(f.lastIndex=f.global?a.index+a[0].length:e),u&&a&&a.length>1&&i.call(a[0],r,(function(){for(s=1;s<arguments.length-2;s++)void 0===arguments[s]&&(a[s]=void 0)})),a}),t.exports=a},,function(t,e,r){t.exports=r(142)},function(t,e,r){var n=r(1),o=r(40),i=n.WeakMap;t.exports="function"===typeof i&&/native code/.test(o.call(i))},function(t,e,r){var n=r(8),o=r(69),i=r(35),a=r(13);t.exports=function(t,e){for(var r=o(e),c=a.f,u=i.f,s=0;s<r.length;s++){var f=r[s];n(t,f)||c(t,f,u(e,f))}}},function(t,e,r){var n=r(26),o=r(51),i=r(59),a=r(6);t.exports=n("Reflect","ownKeys")||function(t){var e=o.f(a(t)),r=i.f;return r?e.concat(r(t)):e}},function(t,e,r){var n=r(4);t.exports=!!Object.getOwnPropertySymbols&&!n((function(){return!String(Symbol())}))},function(t,e,r){var n=r(15),o=r(2)("toStringTag"),i="Arguments"==n(function(){return arguments}());t.exports=function(t){var e,r,a;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(r=function(t,e){try{return t[e]}catch(t){}}(e=Object(t),o))?r:i?n(e):"Object"==(a=n(e))&&"function"==typeof e.callee?"Arguments":a}},function(t,e,r){var n=r(23),o=r(19),i=function(t){return function(e,r){var i,a,c=String(o(e)),u=n(r),s=c.length;return u<0||u>=s?t?"":void 0:(i=c.charCodeAt(u))<55296||i>56319||u+1===s||(a=c.charCodeAt(u+1))<56320||a>57343?t?c.charAt(u):i:t?c.slice(u,u+2):a-56320+(i-55296<<10)+65536}};t.exports={codeAt:i(!1),charAt:i(!0)}},function(t,e,r){var n=r(132),o=r(133),i=r(134);t.exports=function(t){return n(t)||o(t)||i()}},,function(t,e,r){var n=r(2),o=r(31),i=n("iterator"),a=Array.prototype;t.exports=function(t){return void 0!==t&&(o.Array===t||a[i]===t)}},function(t,e,r){var n=r(6);t.exports=function(t,e,r,o){try{return o?e(n(r)[0],r[1]):e(r)}catch(e){var i=t.return;throw void 0!==i&&n(i.call(t)),e}}},function(t,e,r){var n=r(26);t.exports=n("document","documentElement")},function(t,e){t.exports={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0}},function(t,e,r){"use strict";var n=r(72).charAt,o=r(27),i=r(97),a=o.set,c=o.getterFor("String Iterator");i(String,"String",(function(t){a(this,{type:"String Iterator",string:String(t),index:0})}),(function(){var t,e=c(this),r=e.string,o=e.index;return o>=r.length?{value:void 0,done:!0}:(t=n(r,o),e.index+=t.length,{value:t,done:!1})}))},function(t,e,r){"use strict";var n,o,i,a=r(81),c=r(9),u=r(8),s=r(2),f=r(25),l=s("iterator"),p=!1;[].keys&&("next"in(i=[].keys())?(o=a(a(i)))!==Object.prototype&&(n=o):p=!0),void 0==n&&(n={}),f||u(n,l)||c(n,l,(function(){return this})),t.exports={IteratorPrototype:n,BUGGY_SAFARI_ITERATORS:p}},function(t,e,r){var n=r(8),o=r(17),i=r(37),a=r(107),c=i("IE_PROTO"),u=Object.prototype;t.exports=a?Object.getPrototypeOf:function(t){return t=o(t),n(t,c)?t[c]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?u:null}},function(t,e,r){"use strict";var n=r(26),o=r(13),i=r(2),a=r(11),c=i("species");t.exports=function(t){var e=n(t),r=o.f;a&&e&&!e[c]&&r(e,c,{configurable:!0,get:function(){return this}})}},function(t,e,r){var n=r(2)("iterator"),o=!1;try{var i=0,a={next:function(){return{done:!!i++}},return:function(){o=!0}};a[n]=function(){return this},Array.from(a,(function(){throw 2}))}catch(t){}t.exports=function(t,e){if(!e&&!o)return!1;var r=!1;try{var i={};i[n]=function(){return{next:function(){return{done:r=!0}}}},t(i)}catch(t){}return r}},function(t,e,r){var n=r(6),o=r(95),i=r(36),a=r(34),c=r(77),u=r(38),s=r(37)("IE_PROTO"),f=function(){},l=function(){var t,e=u("iframe"),r=i.length;for(e.style.display="none",c.appendChild(e),e.src=String("javascript:"),(t=e.contentWindow.document).open(),t.write("<script>document.F=Object<\/script>"),t.close(),l=t.F;r--;)delete l.prototype[i[r]];return l()};t.exports=Object.create||function(t,e){var r;return null!==t?(f.prototype=n(t),r=new f,f.prototype=null,r[s]=t):r=l(),void 0===e?r:o(r,e)},a[s]=!0},function(t,e,r){var n=r(6),o=r(106);t.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var t,e=!1,r={};try{(t=Object.getOwnPropertyDescriptor(Object.prototype,"__proto__").set).call(r,[]),e=r instanceof Array}catch(t){}return function(r,i){return n(r),o(i),e?t.call(r,i):r.__proto__=i,r}}():void 0)},function(t,e,r){"use strict";var n=r(7),o=r(4),i=r(45),a=r(5),c=r(17),u=r(16),s=r(53),f=r(47),l=r(48),p=r(2)("isConcatSpreadable"),h=!o((function(){var t=[];return t[p]=!1,t.concat()[0]!==t})),d=l("concat"),v=function(t){if(!a(t))return!1;var e=t[p];return void 0!==e?!!e:i(t)};n({target:"Array",proto:!0,forced:!h||!d},{concat:function(t){var e,r,n,o,i,a=c(this),l=f(a,0),p=0;for(e=-1,n=arguments.length;e<n;e++)if(i=-1===e?a:arguments[e],v(i)){if(p+(o=u(i.length))>9007199254740991)throw TypeError("Maximum allowed index exceeded");for(r=0;r<o;r++,p++)r in i&&s(l,p,i[r])}else{if(p>=9007199254740991)throw TypeError("Maximum allowed index exceeded");s(l,p++,i)}return l.length=p,l}})},function(t,e,r){"use strict";var n=r(7),o=r(49).map;n({target:"Array",proto:!0,forced:!r(48)("map")},{map:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}})},function(t,e){t.exports="\t\n\v\f\r Â áââââââââââââ¯âã\u2028\u2029\ufeff"},function(t,e,r){"use strict";var n=r(14),o=r(6),i=r(4),a=r(63),c=RegExp.prototype,u=c.toString,s=i((function(){return"/a/b"!=u.call({source:"a",flags:"b"})})),f="toString"!=u.name;(s||f)&&n(RegExp.prototype,"toString",(function(){var t=o(this),e=String(t.source),r=t.flags;return"/"+e+"/"+String(void 0===r&&t instanceof RegExp&&!("flags"in c)?a.call(t):r)}),{unsafe:!0})},,function(t,e){t.exports=function(t,e,r){if(!(t instanceof e))throw TypeError("Incorrect "+(r?r+" ":"")+"invocation");return t}},function(t,e,r){var n,o,i,a=r(1),c=r(4),u=r(15),s=r(29),f=r(77),l=r(38),p=a.location,h=a.setImmediate,d=a.clearImmediate,v=a.process,y=a.MessageChannel,g=a.Dispatch,m=0,b={},x=function(t){if(b.hasOwnProperty(t)){var e=b[t];delete b[t],e()}},w=function(t){return function(){x(t)}},E=function(t){x(t.data)},_=function(t){a.postMessage(t+"",p.protocol+"//"+p.host)};h&&d||(h=function(t){for(var e=[],r=1;arguments.length>r;)e.push(arguments[r++]);return b[++m]=function(){("function"==typeof t?t:Function(t)).apply(void 0,e)},n(m),m},d=function(t){delete b[t]},"process"==u(v)?n=function(t){v.nextTick(w(t))}:g&&g.now?n=function(t){g.now(w(t))}:y?(i=(o=new y).port2,o.port1.onmessage=E,n=s(i.postMessage,i,1)):!a.addEventListener||"function"!=typeof postMessage||a.importScripts||c(_)?n="onreadystatechange"in l("script")?function(t){f.appendChild(l("script")).onreadystatechange=function(){f.removeChild(this),x(t)}}:function(t){setTimeout(w(t),0)}:(n=_,a.addEventListener("message",E,!1))),t.exports={set:h,clear:d}},function(t,e,r){var n=r(26);t.exports=n("navigator","userAgent")||""},function(t,e,r){"use strict";var n=r(30),o=function(t){var e,r;this.promise=new t((function(t,n){if(void 0!==e||void 0!==r)throw TypeError("Bad Promise constructor");e=t,r=n})),this.resolve=n(e),this.reject=n(r)};t.exports.f=function(t){return new o(t)}},function(t,e,r){var n=r(11),o=r(13),i=r(6),a=r(62);t.exports=n?Object.defineProperties:function(t,e){i(t);for(var r,n=a(e),c=n.length,u=0;c>u;)o.f(t,r=n[u++],e[r]);return t}},function(t,e,r){"use strict";var n=r(7),o=r(64);n({target:"RegExp",proto:!0,forced:/./.exec!==o},{exec:o})},function(t,e,r){"use strict";var n=r(7),o=r(98),i=r(81),a=r(85),c=r(43),u=r(9),s=r(14),f=r(2),l=r(25),p=r(31),h=r(80),d=h.IteratorPrototype,v=h.BUGGY_SAFARI_ITERATORS,y=f("iterator"),g=function(){return this};t.exports=function(t,e,r,f,h,m,b){o(r,e,f);var x,w,E,_=function(t){if(t===h&&A)return A;if(!v&&t in j)return j[t];switch(t){case"keys":case"values":case"entries":return function(){return new r(this,t)}}return function(){return new r(this)}},T=e+" Iterator",S=!1,j=t.prototype,O=j[y]||j["@@iterator"]||h&&j[h],A=!v&&O||_(h),L="Array"==e&&j.entries||O;if(L&&(x=i(L.call(new t)),d!==Object.prototype&&x.next&&(l||i(x)===d||(a?a(x,d):"function"!=typeof x[y]&&u(x,y,g)),c(x,T,!0,!0),l&&(p[T]=g))),"values"==h&&O&&"values"!==O.name&&(S=!0,A=function(){return O.call(this)}),l&&!b||j[y]===A||u(j,y,A),p[e]=A,h)if(w={values:_("values"),keys:m?A:_("keys"),entries:_("entries")},b)for(E in w)!v&&!S&&E in j||s(j,E,w[E]);else n({target:e,proto:!0,forced:v||S},w);return w}},function(t,e,r){"use strict";var n=r(80).IteratorPrototype,o=r(84),i=r(22),a=r(43),c=r(31),u=function(){return this};t.exports=function(t,e,r){var s=e+" Iterator";return t.prototype=o(n,{next:i(1,r)}),a(t,s,!1,!0),c[s]=u,t}},function(t,e,r){"use strict";var n=r(108),o=r(6),i=r(17),a=r(16),c=r(23),u=r(19),s=r(121),f=r(109),l=Math.max,p=Math.min,h=Math.floor,d=/\$([$&'`]|\d\d?|<[^>]*>)/g,v=/\$([$&'`]|\d\d?)/g;n("replace",2,(function(t,e,r){return[function(r,n){var o=u(this),i=void 0==r?void 0:r[t];return void 0!==i?i.call(r,o,n):e.call(String(o),r,n)},function(t,i){var u=r(e,t,this,i);if(u.done)return u.value;var h=o(t),d=String(this),v="function"===typeof i;v||(i=String(i));var y=h.global;if(y){var g=h.unicode;h.lastIndex=0}for(var m=[];;){var b=f(h,d);if(null===b)break;if(m.push(b),!y)break;""===String(b[0])&&(h.lastIndex=s(d,a(h.lastIndex),g))}for(var x,w="",E=0,_=0;_<m.length;_++){b=m[_];for(var T=String(b[0]),S=l(p(c(b.index),d.length),0),j=[],O=1;O<b.length;O++)j.push(void 0===(x=b[O])?x:String(x));var A=b.groups;if(v){var L=[T].concat(j,S,d);void 0!==A&&L.push(A);var P=String(i.apply(void 0,L))}else P=n(T,d,S,j,A,i);S>=E&&(w+=d.slice(E,S)+P,E=S+T.length)}return w+d.slice(E)}];function n(t,r,n,o,a,c){var u=n+t.length,s=o.length,f=v;return void 0!==a&&(a=i(a),f=d),e.call(c,f,(function(e,i){var c;switch(i.charAt(0)){case"$":return"$";case"&":return t;case"`":return r.slice(0,n);case"'":return r.slice(u);case"<":c=a[i.slice(1,-1)];break;default:var f=+i;if(0===f)return e;if(f>s){var l=h(f/10);return 0===l?e:l<=s?void 0===o[l-1]?i.charAt(1):o[l-1]+i.charAt(1):e}c=o[f-1]}return void 0===c?"":c}))}}))},,function(t,e){function r(t,e,r,n,o,i,a){try{var c=t[i](a),u=c.value}catch(t){return void r(t)}c.done?e(u):Promise.resolve(u).then(n,o)}t.exports=function(t){return function(){var e=this,n=arguments;return new Promise((function(o,i){var a=t.apply(e,n);function c(t){r(a,o,i,c,u,"next",t)}function u(t){r(a,o,i,c,u,"throw",t)}c(void 0)}))}}},function(t,e,r){"use strict";var n=r(29),o=r(17),i=r(76),a=r(75),c=r(16),u=r(53),s=r(57);t.exports=function(t){var e,r,f,l,p=o(t),h="function"==typeof this?this:Array,d=arguments.length,v=d>1?arguments[1]:void 0,y=void 0!==v,g=0,m=s(p);if(y&&(v=n(v,d>2?arguments[2]:void 0,2)),void 0==m||h==Array&&a(m))for(r=new h(e=c(p.length));e>g;g++)u(r,g,y?v(p[g],g):p[g]);else for(l=m.call(p),r=new h;!(f=l.next()).done;g++)u(r,g,y?i(l,v,[f.value,g],!0):f.value);return r.length=g,r}},function(t,e,r){var n=r(7),o=r(17),i=r(62);n({target:"Object",stat:!0,forced:r(4)((function(){i(1)}))},{keys:function(t){return i(o(t))}})},function(t,e,r){var n=r(5),o=r(15),i=r(2)("match");t.exports=function(t){var e;return n(t)&&(void 0!==(e=t[i])?!!e:"RegExp"==o(t))}},function(t,e,r){var n=r(14);t.exports=function(t,e,r){for(var o in e)n(t,o,e[o],r);return t}},function(t,e,r){var n=r(5);t.exports=function(t){if(!n(t)&&null!==t)throw TypeError("Can't set "+String(t)+" as a prototype");return t}},function(t,e,r){var n=r(4);t.exports=!n((function(){function t(){}return t.prototype.constructor=null,Object.getPrototypeOf(new t)!==t.prototype}))},function(t,e,r){"use strict";var n=r(9),o=r(14),i=r(4),a=r(2),c=r(64),u=a("species"),s=!i((function(){var t=/./;return t.exec=function(){var t=[];return t.groups={a:"7"},t},"7"!=="".replace(t,"$<a>")})),f=!i((function(){var t=/(?:)/,e=t.exec;t.exec=function(){return e.apply(this,arguments)};var r="ab".split(t);return 2!==r.length||"a"!==r[0]||"b"!==r[1]}));t.exports=function(t,e,r,l){var p=a(t),h=!i((function(){var e={};return e[p]=function(){return 7},7!=""[t](e)})),d=h&&!i((function(){var e=!1,r=/a/;return r.exec=function(){return e=!0,null},"split"===t&&(r.constructor={},r.constructor[u]=function(){return r}),r[p](""),!e}));if(!h||!d||"replace"===t&&!s||"split"===t&&!f){var v=/./[p],y=r(p,""[t],(function(t,e,r,n,o){return e.exec===c?h&&!o?{done:!0,value:v.call(e,r,n)}:{done:!0,value:t.call(r,e,n)}:{done:!1}})),g=y[0],m=y[1];o(String.prototype,t,g),o(RegExp.prototype,p,2==e?function(t,e){return m.call(t,this,e)}:function(t){return m.call(t,this)}),l&&n(RegExp.prototype[p],"sham",!0)}}},function(t,e,r){var n=r(15),o=r(64);t.exports=function(t,e){var r=t.exec;if("function"===typeof r){var i=r.call(t,e);if("object"!==typeof i)throw TypeError("RegExp exec method returned something other than an Object or null");return i}if("RegExp"!==n(t))throw TypeError("RegExp#exec called on incompatible receiver");return o.call(t,e)}},,function(t,e,r){"use strict";e.a=function(t){var e=this.constructor;return this.then((function(r){return e.resolve(t()).then((function(){return r}))}),(function(r){return e.resolve(t()).then((function(){return e.reject(r)}))}))}},,function(t,e,r){var n=r(14),o=r(124),i=Object.prototype;o!==i.toString&&n(i,"toString",o,{unsafe:!0})},function(t,e,r){"use strict";var n,o,i,a,c=r(7),u=r(25),s=r(1),f=r(50),l=r(125),p=r(14),h=r(105),d=r(43),v=r(82),y=r(5),g=r(30),m=r(91),b=r(15),x=r(126),w=r(83),E=r(115),_=r(92).set,T=r(127),S=r(128),j=r(129),O=r(94),A=r(130),L=r(93),P=r(27),I=r(42),k=r(2)("species"),R="Promise",F=P.get,C=P.set,M=P.getterFor(R),B=l,N=s.TypeError,D=s.document,G=s.process,U=s.fetch,q=G&&G.versions,H=q&&q.v8||"",$=O.f,V=$,Y="process"==b(G),z=!!(D&&D.createEvent&&s.dispatchEvent),W=I(R,(function(){var t=B.resolve(1),e=function(){},r=(t.constructor={})[k]=function(t){t(e,e)};return!((Y||"function"==typeof PromiseRejectionEvent)&&(!u||t.finally)&&t.then(e)instanceof r&&0!==H.indexOf("6.6")&&-1===L.indexOf("Chrome/66"))})),K=W||!w((function(t){B.all(t).catch((function(){}))})),X=function(t){var e;return!(!y(t)||"function"!=typeof(e=t.then))&&e},J=function(t,e,r){if(!e.notified){e.notified=!0;var n=e.reactions;T((function(){for(var o=e.value,i=1==e.state,a=0;n.length>a;){var c,u,s,f=n[a++],l=i?f.ok:f.fail,p=f.resolve,h=f.reject,d=f.domain;try{l?(i||(2===e.rejection&&et(t,e),e.rejection=1),!0===l?c=o:(d&&d.enter(),c=l(o),d&&(d.exit(),s=!0)),c===f.promise?h(N("Promise-chain cycle")):(u=X(c))?u.call(c,p,h):p(c)):h(o)}catch(t){d&&!s&&d.exit(),h(t)}}e.reactions=[],e.notified=!1,r&&!e.rejection&&Z(t,e)}))}},Q=function(t,e,r){var n,o;z?((n=D.createEvent("Event")).promise=e,n.reason=r,n.initEvent(t,!1,!0),s.dispatchEvent(n)):n={promise:e,reason:r},(o=s["on"+t])?o(n):"unhandledrejection"===t&&j("Unhandled promise rejection",r)},Z=function(t,e){_.call(s,(function(){var r,n=e.value;if(tt(e)&&(r=A((function(){Y?G.emit("unhandledRejection",n,t):Q("unhandledrejection",t,n)})),e.rejection=Y||tt(e)?2:1,r.error))throw r.value}))},tt=function(t){return 1!==t.rejection&&!t.parent},et=function(t,e){_.call(s,(function(){Y?G.emit("rejectionHandled",t):Q("rejectionhandled",t,e.value)}))},rt=function(t,e,r,n){return function(o){t(e,r,o,n)}},nt=function(t,e,r,n){e.done||(e.done=!0,n&&(e=n),e.value=r,e.state=2,J(t,e,!0))},ot=function(t,e,r,n){if(!e.done){e.done=!0,n&&(e=n);try{if(t===r)throw N("Promise can't be resolved itself");var o=X(r);o?T((function(){var n={done:!1};try{o.call(r,rt(ot,t,n,e),rt(nt,t,n,e))}catch(r){nt(t,n,r,e)}})):(e.value=r,e.state=1,J(t,e,!1))}catch(r){nt(t,{done:!1},r,e)}}};W&&(B=function(t){m(this,B,R),g(t),n.call(this);var e=F(this);try{t(rt(ot,this,e),rt(nt,this,e))}catch(t){nt(this,e,t)}},(n=function(t){C(this,{type:R,done:!1,notified:!1,parent:!1,reactions:[],rejection:!1,state:0,value:void 0})}).prototype=h(B.prototype,{then:function(t,e){var r=M(this),n=$(E(this,B));return n.ok="function"!=typeof t||t,n.fail="function"==typeof e&&e,n.domain=Y?G.domain:void 0,r.parent=!0,r.reactions.push(n),0!=r.state&&J(this,r,!1),n.promise},catch:function(t){return this.then(void 0,t)}}),o=function(){var t=new n,e=F(t);this.promise=t,this.resolve=rt(ot,t,e),this.reject=rt(nt,t,e)},O.f=$=function(t){return t===B||t===i?new o(t):V(t)},u||"function"!=typeof l||(a=l.prototype.then,p(l.prototype,"then",(function(t,e){var r=this;return new B((function(t,e){a.call(r,t,e)})).then(t,e)})),"function"==typeof U&&c({global:!0,enumerable:!0,forced:!0},{fetch:function(t){return S(B,U.apply(s,arguments))}}))),c({global:!0,wrap:!0,forced:W},{Promise:B}),d(B,R,!1,!0),v(R),i=f.Promise,c({target:R,stat:!0,forced:W},{reject:function(t){var e=$(this);return e.reject.call(void 0,t),e.promise}}),c({target:R,stat:!0,forced:u||W},{resolve:function(t){return S(u&&this===i?B:this,t)}}),c({target:R,stat:!0,forced:K},{all:function(t){var e=this,r=$(e),n=r.resolve,o=r.reject,i=A((function(){var r=g(e.resolve),i=[],a=0,c=1;x(t,(function(t){var u=a++,s=!1;i.push(void 0),c++,r.call(e,t).then((function(t){s||(s=!0,i[u]=t,--c||n(i))}),o)})),--c||n(i)}));return i.error&&o(i.value),r.promise},race:function(t){var e=this,r=$(e),n=r.reject,o=A((function(){var o=g(e.resolve);x(t,(function(t){o.call(e,t).then(r.resolve,n)}))}));return o.error&&n(o.value),r.promise}})},function(t,e,r){var n=r(6),o=r(30),i=r(2)("species");t.exports=function(t,e){var r,a=n(t).constructor;return void 0===a||void 0==(r=n(a)[i])?e:o(r)}},function(t,e,r){"use strict";var n={searchParams:"URLSearchParams"in self,iterable:"Symbol"in self&&"iterator"in Symbol,blob:"FileReader"in self&&"Blob"in self&&function(){try{return new Blob,!0}catch(t){return!1}}(),formData:"FormData"in self,arrayBuffer:"ArrayBuffer"in self};if(n.arrayBuffer)var o=["[object Int8Array]","[object Uint8Array]","[object Uint8ClampedArray]","[object Int16Array]","[object Uint16Array]","[object Int32Array]","[object Uint32Array]","[object Float32Array]","[object Float64Array]"],i=ArrayBuffer.isView||function(t){return t&&o.indexOf(Object.prototype.toString.call(t))>-1};function a(t){if("string"!==typeof t&&(t=String(t)),/[^a-z0-9\-#$%&'*+.^_`|~]/i.test(t))throw new TypeError("Invalid character in header field name");return t.toLowerCase()}function c(t){return"string"!==typeof t&&(t=String(t)),t}function u(t){var e={next:function(){var e=t.shift();return{done:void 0===e,value:e}}};return n.iterable&&(e[Symbol.iterator]=function(){return e}),e}function s(t){this.map={},t instanceof s?t.forEach((function(t,e){this.append(e,t)}),this):Array.isArray(t)?t.forEach((function(t){this.append(t[0],t[1])}),this):t&&Object.getOwnPropertyNames(t).forEach((function(e){this.append(e,t[e])}),this)}function f(t){if(t.bodyUsed)return Promise.reject(new TypeError("Already read"));t.bodyUsed=!0}function l(t){return new Promise((function(e,r){t.onload=function(){e(t.result)},t.onerror=function(){r(t.error)}}))}function p(t){var e=new FileReader,r=l(e);return e.readAsArrayBuffer(t),r}function h(t){if(t.slice)return t.slice(0);var e=new Uint8Array(t.byteLength);return e.set(new Uint8Array(t)),e.buffer}function d(){return this.bodyUsed=!1,this._initBody=function(t){var e;this._bodyInit=t,t?"string"===typeof t?this._bodyText=t:n.blob&&Blob.prototype.isPrototypeOf(t)?this._bodyBlob=t:n.formData&&FormData.prototype.isPrototypeOf(t)?this._bodyFormData=t:n.searchParams&&URLSearchParams.prototype.isPrototypeOf(t)?this._bodyText=t.toString():n.arrayBuffer&&n.blob&&((e=t)&&DataView.prototype.isPrototypeOf(e))?(this._bodyArrayBuffer=h(t.buffer),this._bodyInit=new Blob([this._bodyArrayBuffer])):n.arrayBuffer&&(ArrayBuffer.prototype.isPrototypeOf(t)||i(t))?this._bodyArrayBuffer=h(t):this._bodyText=t=Object.prototype.toString.call(t):this._bodyText="",this.headers.get("content-type")||("string"===typeof t?this.headers.set("content-type","text/plain;charset=UTF-8"):this._bodyBlob&&this._bodyBlob.type?this.headers.set("content-type",this._bodyBlob.type):n.searchParams&&URLSearchParams.prototype.isPrototypeOf(t)&&this.headers.set("content-type","application/x-www-form-urlencoded;charset=UTF-8"))},n.blob&&(this.blob=function(){var t=f(this);if(t)return t;if(this._bodyBlob)return Promise.resolve(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(new Blob([this._bodyArrayBuffer]));if(this._bodyFormData)throw new Error("could not read FormData body as blob");return Promise.resolve(new Blob([this._bodyText]))},this.arrayBuffer=function(){return this._bodyArrayBuffer?f(this)||Promise.resolve(this._bodyArrayBuffer):this.blob().then(p)}),this.text=function(){var t=f(this);if(t)return t;if(this._bodyBlob)return function(t){var e=new FileReader,r=l(e);return e.readAsText(t),r}(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(function(t){for(var e=new Uint8Array(t),r=new Array(e.length),n=0;n<e.length;n++)r[n]=String.fromCharCode(e[n]);return r.join("")}(this._bodyArrayBuffer));if(this._bodyFormData)throw new Error("could not read FormData body as text");return Promise.resolve(this._bodyText)},n.formData&&(this.formData=function(){return this.text().then(g)}),this.json=function(){return this.text().then(JSON.parse)},this}s.prototype.append=function(t,e){t=a(t),e=c(e);var r=this.map[t];this.map[t]=r?r+", "+e:e},s.prototype.delete=function(t){delete this.map[a(t)]},s.prototype.get=function(t){return t=a(t),this.has(t)?this.map[t]:null},s.prototype.has=function(t){return this.map.hasOwnProperty(a(t))},s.prototype.set=function(t,e){this.map[a(t)]=c(e)},s.prototype.forEach=function(t,e){for(var r in this.map)this.map.hasOwnProperty(r)&&t.call(e,this.map[r],r,this)},s.prototype.keys=function(){var t=[];return this.forEach((function(e,r){t.push(r)})),u(t)},s.prototype.values=function(){var t=[];return this.forEach((function(e){t.push(e)})),u(t)},s.prototype.entries=function(){var t=[];return this.forEach((function(e,r){t.push([r,e])})),u(t)},n.iterable&&(s.prototype[Symbol.iterator]=s.prototype.entries);var v=["DELETE","GET","HEAD","OPTIONS","POST","PUT"];function y(t,e){var r=(e=e||{}).body;if(t instanceof y){if(t.bodyUsed)throw new TypeError("Already read");this.url=t.url,this.credentials=t.credentials,e.headers||(this.headers=new s(t.headers)),this.method=t.method,this.mode=t.mode,this.signal=t.signal,r||null==t._bodyInit||(r=t._bodyInit,t.bodyUsed=!0)}else this.url=String(t);if(this.credentials=e.credentials||this.credentials||"same-origin",!e.headers&&this.headers||(this.headers=new s(e.headers)),this.method=function(t){var e=t.toUpperCase();return v.indexOf(e)>-1?e:t}(e.method||this.method||"GET"),this.mode=e.mode||this.mode||null,this.signal=e.signal||this.signal,this.referrer=null,("GET"===this.method||"HEAD"===this.method)&&r)throw new TypeError("Body not allowed for GET or HEAD requests");this._initBody(r)}function g(t){var e=new FormData;return t.trim().split("&").forEach((function(t){if(t){var r=t.split("="),n=r.shift().replace(/\+/g," "),o=r.join("=").replace(/\+/g," ");e.append(decodeURIComponent(n),decodeURIComponent(o))}})),e}function m(t){var e=new s;return t.replace(/\r?\n[\t ]+/g," ").split(/\r?\n/).forEach((function(t){var r=t.split(":"),n=r.shift().trim();if(n){var o=r.join(":").trim();e.append(n,o)}})),e}function b(t,e){e||(e={}),this.type="default",this.status=void 0===e.status?200:e.status,this.ok=this.status>=200&&this.status<300,this.statusText="statusText"in e?e.statusText:"OK",this.headers=new s(e.headers),this.url=e.url||"",this._initBody(t)}y.prototype.clone=function(){return new y(this,{body:this._bodyInit})},d.call(y.prototype),d.call(b.prototype),b.prototype.clone=function(){return new b(this._bodyInit,{status:this.status,statusText:this.statusText,headers:new s(this.headers),url:this.url})},b.error=function(){var t=new b(null,{status:0,statusText:""});return t.type="error",t};var x=[301,302,303,307,308];b.redirect=function(t,e){if(-1===x.indexOf(e))throw new RangeError("Invalid status code");return new b(null,{status:e,headers:{location:t}})};var w=self.DOMException;try{new w}catch(t){(w=function(t,e){this.message=t,this.name=e;var r=Error(t);this.stack=r.stack}).prototype=Object.create(Error.prototype),w.prototype.constructor=w}function E(t,e){return new Promise((function(r,o){var i=new y(t,e);if(i.signal&&i.signal.aborted)return o(new w("Aborted","AbortError"));var a=new XMLHttpRequest;function c(){a.abort()}a.onload=function(){var t={status:a.status,statusText:a.statusText,headers:m(a.getAllResponseHeaders()||"")};t.url="responseURL"in a?a.responseURL:t.headers.get("X-Request-URL");var e="response"in a?a.response:a.responseText;r(new b(e,t))},a.onerror=function(){o(new TypeError("Network request failed"))},a.ontimeout=function(){o(new TypeError("Network request failed"))},a.onabort=function(){o(new w("Aborted","AbortError"))},a.open(i.method,i.url,!0),"include"===i.credentials?a.withCredentials=!0:"omit"===i.credentials&&(a.withCredentials=!1),"responseType"in a&&n.blob&&(a.responseType="blob"),i.headers.forEach((function(t,e){a.setRequestHeader(e,t)})),i.signal&&(i.signal.addEventListener("abort",c),a.onreadystatechange=function(){4===a.readyState&&i.signal.removeEventListener("abort",c)}),a.send("undefined"===typeof i._bodyInit?null:i._bodyInit)}))}E.polyfill=!0,self.fetch||(self.fetch=E,self.Headers=s,self.Request=y,self.Response=b)},function(t,e,r){var n=r(2),o=r(84),i=r(9),a=n("unscopables"),c=Array.prototype;void 0==c[a]&&i(c,a,o(null)),t.exports=function(t){c[a][t]=!0}},function(t,e,r){var n=r(7),o=r(102);n({target:"Array",stat:!0,forced:!r(83)((function(t){Array.from(t)}))},{from:o})},function(t,e,r){var n=r(19),o="["+r(88)+"]",i=RegExp("^"+o+o+"*"),a=RegExp(o+o+"*$"),c=function(t){return function(e){var r=String(n(e));return 1&t&&(r=r.replace(i,"")),2&t&&(r=r.replace(a,"")),r}};t.exports={start:c(1),end:c(2),trim:c(3)}},function(t,e,r){var n=r(11),o=r(1),i=r(42),a=r(131),c=r(13).f,u=r(51).f,s=r(104),f=r(63),l=r(14),p=r(4),h=r(82),d=r(2)("match"),v=o.RegExp,y=v.prototype,g=/a/g,m=/a/g,b=new v(g)!==g;if(n&&i("RegExp",!b||p((function(){return m[d]=!1,v(g)!=g||v(m)==m||"/a/i"!=v(g,"i")})))){for(var x=function(t,e){var r=this instanceof x,n=s(t),o=void 0===e;return!r&&n&&t.constructor===x&&o?t:a(b?new v(n&&!o?t.source:t,e):v((n=t instanceof x)?t.source:t,n&&o?f.call(t):e),r?this:y,x)},w=function(t){t in x||c(x,t,{configurable:!0,get:function(){return v[t]},set:function(e){v[t]=e}})},E=u(v),_=0;E.length>_;)w(E[_++]);y.constructor=x,x.prototype=y,l(o,"RegExp",x)}h("RegExp")},function(t,e,r){"use strict";var n=r(72).charAt;t.exports=function(t,e,r){return e+(r?n(t,e).length:1)}},function(t,e,r){"use strict";var n=r(7),o=r(33),i=r(20),a=r(56),c=[].join,u=o!=Object,s=a("join",",");n({target:"Array",proto:!0,forced:u||s},{join:function(t){return c.call(i(this),void 0===t?",":t)}})},,function(t,e,r){"use strict";var n=r(71),o={};o[r(2)("toStringTag")]="z",t.exports="[object z]"!==String(o)?function(){return"[object "+n(this)+"]"}:o.toString},function(t,e,r){var n=r(1);t.exports=n.Promise},function(t,e,r){var n=r(6),o=r(75),i=r(16),a=r(29),c=r(57),u=r(76),s=function(t,e){this.stopped=t,this.result=e};(t.exports=function(t,e,r,f,l){var p,h,d,v,y,g,m=a(e,r,f?2:1);if(l)p=t;else{if("function"!=typeof(h=c(t)))throw TypeError("Target is not iterable");if(o(h)){for(d=0,v=i(t.length);v>d;d++)if((y=f?m(n(g=t[d])[0],g[1]):m(t[d]))&&y instanceof s)return y;return new s(!1)}p=h.call(t)}for(;!(g=p.next()).done;)if((y=u(p,m,g.value,f))&&y instanceof s)return y;return new s(!1)}).stop=function(t){return new s(!0,t)}},function(t,e,r){var n,o,i,a,c,u,s,f,l=r(1),p=r(35).f,h=r(15),d=r(92).set,v=r(93),y=l.MutationObserver||l.WebKitMutationObserver,g=l.process,m=l.Promise,b="process"==h(g),x=p(l,"queueMicrotask"),w=x&&x.value;w||(n=function(){var t,e;for(b&&(t=g.domain)&&t.exit();o;){e=o.fn,o=o.next;try{e()}catch(t){throw o?a():i=void 0,t}}i=void 0,t&&t.enter()},b?a=function(){g.nextTick(n)}:y&&!/(iphone|ipod|ipad).*applewebkit/i.test(v)?(c=!0,u=document.createTextNode(""),new y(n).observe(u,{characterData:!0}),a=function(){u.data=c=!c}):m&&m.resolve?(s=m.resolve(void 0),f=s.then,a=function(){f.call(s,n)}):a=function(){d.call(l,n)}),t.exports=w||function(t){var e={fn:t,next:void 0};i&&(i.next=e),o||(o=e,a()),i=e}},function(t,e,r){var n=r(6),o=r(5),i=r(94);t.exports=function(t,e){if(n(t),o(e)&&e.constructor===t)return e;var r=i.f(t);return(0,r.resolve)(e),r.promise}},function(t,e,r){var n=r(1);t.exports=function(t,e){var r=n.console;r&&r.error&&(1===arguments.length?r.error(t):r.error(t,e))}},function(t,e){t.exports=function(t){try{return{error:!1,value:t()}}catch(t){return{error:!0,value:t}}}},function(t,e,r){var n=r(5),o=r(85);t.exports=function(t,e,r){var i,a;return o&&"function"==typeof(i=e.constructor)&&i!==r&&n(a=i.prototype)&&a!==r.prototype&&o(t,a),t}},function(t,e){t.exports=function(t){if(Array.isArray(t)){for(var e=0,r=new Array(t.length);e<t.length;e++)r[e]=t[e];return r}}},function(t,e){t.exports=function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}},function(t,e){t.exports=function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}},,,function(t,e,r){var n=function(t){"use strict";var e,r=Object.prototype,n=r.hasOwnProperty,o="function"===typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",a=o.asyncIterator||"@@asyncIterator",c=o.toStringTag||"@@toStringTag";function u(t,e,r,n){var o=e&&e.prototype instanceof v?e:v,i=Object.create(o.prototype),a=new O(n||[]);return i._invoke=function(t,e,r){var n=f;return function(o,i){if(n===p)throw new Error("Generator is already running");if(n===h){if("throw"===o)throw i;return L()}for(r.method=o,r.arg=i;;){var a=r.delegate;if(a){var c=T(a,r);if(c){if(c===d)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(n===f)throw n=h,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);n=p;var u=s(t,e,r);if("normal"===u.type){if(n=r.done?h:l,u.arg===d)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(n=h,r.method="throw",r.arg=u.arg)}}}(t,r,a),i}function s(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}t.wrap=u;var f="suspendedStart",l="suspendedYield",p="executing",h="completed",d={};function v(){}function y(){}function g(){}var m={};m[i]=function(){return this};var b=Object.getPrototypeOf,x=b&&b(b(A([])));x&&x!==r&&n.call(x,i)&&(m=x);var w=g.prototype=v.prototype=Object.create(m);function E(t){["next","throw","return"].forEach((function(e){t[e]=function(t){return this._invoke(e,t)}}))}function _(t){var e;this._invoke=function(r,o){function i(){return new Promise((function(e,i){!function e(r,o,i,a){var c=s(t[r],t,o);if("throw"!==c.type){var u=c.arg,f=u.value;return f&&"object"===typeof f&&n.call(f,"__await")?Promise.resolve(f.__await).then((function(t){e("next",t,i,a)}),(function(t){e("throw",t,i,a)})):Promise.resolve(f).then((function(t){u.value=t,i(u)}),(function(t){return e("throw",t,i,a)}))}a(c.arg)}(r,o,e,i)}))}return e=e?e.then(i,i):i()}}function T(t,r){var n=t.iterator[r.method];if(n===e){if(r.delegate=null,"throw"===r.method){if(t.iterator.return&&(r.method="return",r.arg=e,T(t,r),"throw"===r.method))return d;r.method="throw",r.arg=new TypeError("The iterator does not provide a 'throw' method")}return d}var o=s(n,t.iterator,r.arg);if("throw"===o.type)return r.method="throw",r.arg=o.arg,r.delegate=null,d;var i=o.arg;return i?i.done?(r[t.resultName]=i.value,r.next=t.nextLoc,"return"!==r.method&&(r.method="next",r.arg=e),r.delegate=null,d):i:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,d)}function S(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function j(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function O(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(S,this),this.reset(!0)}function A(t){if(t){var r=t[i];if(r)return r.call(t);if("function"===typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function r(){for(;++o<t.length;)if(n.call(t,o))return r.value=t[o],r.done=!1,r;return r.value=e,r.done=!0,r};return a.next=a}}return{next:L}}function L(){return{value:e,done:!0}}return y.prototype=w.constructor=g,g.constructor=y,g[c]=y.displayName="GeneratorFunction",t.isGeneratorFunction=function(t){var e="function"===typeof t&&t.constructor;return!!e&&(e===y||"GeneratorFunction"===(e.displayName||e.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,g):(t.__proto__=g,c in t||(t[c]="GeneratorFunction")),t.prototype=Object.create(w),t},t.awrap=function(t){return{__await:t}},E(_.prototype),_.prototype[a]=function(){return this},t.AsyncIterator=_,t.async=function(e,r,n,o){var i=new _(u(e,r,n,o));return t.isGeneratorFunction(r)?i:i.next().then((function(t){return t.done?t.value:i.next()}))},E(w),w[c]="Generator",w[i]=function(){return this},w.toString=function(){return"[object Generator]"},t.keys=function(t){var e=[];for(var r in t)e.push(r);return e.reverse(),function r(){for(;e.length;){var n=e.pop();if(n in t)return r.value=n,r.done=!1,r}return r.done=!0,r}},t.values=A,O.prototype={constructor:O,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(j),!t)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=e)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var r=this;function o(n,o){return c.type="throw",c.arg=t,r.next=n,o&&(r.method="next",r.arg=e),!!o}for(var i=this.tryEntries.length-1;i>=0;--i){var a=this.tryEntries[i],c=a.completion;if("root"===a.tryLoc)return o("end");if(a.tryLoc<=this.prev){var u=n.call(a,"catchLoc"),s=n.call(a,"finallyLoc");if(u&&s){if(this.prev<a.catchLoc)return o(a.catchLoc,!0);if(this.prev<a.finallyLoc)return o(a.finallyLoc)}else if(u){if(this.prev<a.catchLoc)return o(a.catchLoc,!0)}else{if(!s)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return o(a.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&n.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=e&&e<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=t,a.arg=e,i?(this.method="next",this.next=i.finallyLoc,d):this.complete(a)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),d},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),j(r),d}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var o=n.arg;j(r)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,r,n){return this.delegate={iterator:A(t),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=e),d}},t}(t.exports);try{regeneratorRuntime=n}catch(t){Function("r","regeneratorRuntime = r")(n)}},,,function(t,e,r){var n=r(7),o=r(141);n({global:!0,forced:parseInt!=o},{parseInt:o})},function(t,e,r){var n=r(1),o=r(119).trim,i=r(88),a=n.parseInt,c=/^[+-]?0[Xx]/,u=8!==a(i+"08")||22!==a(i+"0x16");t.exports=u?function(t,e){var r=o(String(t));return a(r,e>>>0||(c.test(r)?16:10))}:a},function(t,e,r){var n=function(t){"use strict";var e,r=Object.prototype,n=r.hasOwnProperty,o="function"===typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",a=o.asyncIterator||"@@asyncIterator",c=o.toStringTag||"@@toStringTag";function u(t,e,r,n){var o=e&&e.prototype instanceof v?e:v,i=Object.create(o.prototype),a=new O(n||[]);return i._invoke=function(t,e,r){var n=f;return function(o,i){if(n===p)throw new Error("Generator is already running");if(n===h){if("throw"===o)throw i;return L()}for(r.method=o,r.arg=i;;){var a=r.delegate;if(a){var c=T(a,r);if(c){if(c===d)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(n===f)throw n=h,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);n=p;var u=s(t,e,r);if("normal"===u.type){if(n=r.done?h:l,u.arg===d)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(n=h,r.method="throw",r.arg=u.arg)}}}(t,r,a),i}function s(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}t.wrap=u;var f="suspendedStart",l="suspendedYield",p="executing",h="completed",d={};function v(){}function y(){}function g(){}var m={};m[i]=function(){return this};var b=Object.getPrototypeOf,x=b&&b(b(A([])));x&&x!==r&&n.call(x,i)&&(m=x);var w=g.prototype=v.prototype=Object.create(m);function E(t){["next","throw","return"].forEach((function(e){t[e]=function(t){return this._invoke(e,t)}}))}function _(t){var e;this._invoke=function(r,o){function i(){return new Promise((function(e,i){!function e(r,o,i,a){var c=s(t[r],t,o);if("throw"!==c.type){var u=c.arg,f=u.value;return f&&"object"===typeof f&&n.call(f,"__await")?Promise.resolve(f.__await).then((function(t){e("next",t,i,a)}),(function(t){e("throw",t,i,a)})):Promise.resolve(f).then((function(t){u.value=t,i(u)}),(function(t){return e("throw",t,i,a)}))}a(c.arg)}(r,o,e,i)}))}return e=e?e.then(i,i):i()}}function T(t,r){var n=t.iterator[r.method];if(n===e){if(r.delegate=null,"throw"===r.method){if(t.iterator.return&&(r.method="return",r.arg=e,T(t,r),"throw"===r.method))return d;r.method="throw",r.arg=new TypeError("The iterator does not provide a 'throw' method")}return d}var o=s(n,t.iterator,r.arg);if("throw"===o.type)return r.method="throw",r.arg=o.arg,r.delegate=null,d;var i=o.arg;return i?i.done?(r[t.resultName]=i.value,r.next=t.nextLoc,"return"!==r.method&&(r.method="next",r.arg=e),r.delegate=null,d):i:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,d)}function S(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function j(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function O(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(S,this),this.reset(!0)}function A(t){if(t){var r=t[i];if(r)return r.call(t);if("function"===typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function r(){for(;++o<t.length;)if(n.call(t,o))return r.value=t[o],r.done=!1,r;return r.value=e,r.done=!0,r};return a.next=a}}return{next:L}}function L(){return{value:e,done:!0}}return y.prototype=w.constructor=g,g.constructor=y,g[c]=y.displayName="GeneratorFunction",t.isGeneratorFunction=function(t){var e="function"===typeof t&&t.constructor;return!!e&&(e===y||"GeneratorFunction"===(e.displayName||e.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,g):(t.__proto__=g,c in t||(t[c]="GeneratorFunction")),t.prototype=Object.create(w),t},t.awrap=function(t){return{__await:t}},E(_.prototype),_.prototype[a]=function(){return this},t.AsyncIterator=_,t.async=function(e,r,n,o){var i=new _(u(e,r,n,o));return t.isGeneratorFunction(r)?i:i.next().then((function(t){return t.done?t.value:i.next()}))},E(w),w[c]="Generator",w[i]=function(){return this},w.toString=function(){return"[object Generator]"},t.keys=function(t){var e=[];for(var r in t)e.push(r);return e.reverse(),function r(){for(;e.length;){var n=e.pop();if(n in t)return r.value=n,r.done=!1,r}return r.done=!0,r}},t.values=A,O.prototype={constructor:O,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(j),!t)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=e)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var r=this;function o(n,o){return c.type="throw",c.arg=t,r.next=n,o&&(r.method="next",r.arg=e),!!o}for(var i=this.tryEntries.length-1;i>=0;--i){var a=this.tryEntries[i],c=a.completion;if("root"===a.tryLoc)return o("end");if(a.tryLoc<=this.prev){var u=n.call(a,"catchLoc"),s=n.call(a,"finallyLoc");if(u&&s){if(this.prev<a.catchLoc)return o(a.catchLoc,!0);if(this.prev<a.finallyLoc)return o(a.finallyLoc)}else if(u){if(this.prev<a.catchLoc)return o(a.catchLoc,!0)}else{if(!s)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return o(a.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&n.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=e&&e<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=t,a.arg=e,i?(this.method="next",this.next=i.finallyLoc,d):this.complete(a)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),d},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),j(r),d}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var o=n.arg;j(r)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,r,n){return this.delegate={iterator:A(t),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=e),d}},t}(t.exports);try{regeneratorRuntime=n}catch(t){Function("r","regeneratorRuntime = r")(n)}},,function(t,e,r){"use strict";(function(t){var n=r(111),o=setTimeout;function i(t){return Boolean(t&&"undefined"!==typeof t.length)}function a(){}function c(t){if(!(this instanceof c))throw new TypeError("Promises must be constructed via new");if("function"!==typeof t)throw new TypeError("not a function");this._state=0,this._handled=!1,this._value=void 0,this._deferreds=[],h(t,this)}function u(t,e){for(;3===t._state;)t=t._value;0!==t._state?(t._handled=!0,c._immediateFn((function(){var r=1===t._state?e.onFulfilled:e.onRejected;if(null!==r){var n;try{n=r(t._value)}catch(t){return void f(e.promise,t)}s(e.promise,n)}else(1===t._state?s:f)(e.promise,t._value)}))):t._deferreds.push(e)}function s(t,e){try{if(e===t)throw new TypeError("A promise cannot be resolved with itself.");if(e&&("object"===typeof e||"function"===typeof e)){var r=e.then;if(e instanceof c)return t._state=3,t._value=e,void l(t);if("function"===typeof r)return void h((n=r,o=e,function(){n.apply(o,arguments)}),t)}t._state=1,t._value=e,l(t)}catch(e){f(t,e)}var n,o}function f(t,e){t._state=2,t._value=e,l(t)}function l(t){2===t._state&&0===t._deferreds.length&&c._immediateFn((function(){t._handled||c._unhandledRejectionFn(t._value)}));for(var e=0,r=t._deferreds.length;e<r;e++)u(t,t._deferreds[e]);t._deferreds=null}function p(t,e,r){this.onFulfilled="function"===typeof t?t:null,this.onRejected="function"===typeof e?e:null,this.promise=r}function h(t,e){var r=!1;try{t((function(t){r||(r=!0,s(e,t))}),(function(t){r||(r=!0,f(e,t))}))}catch(t){if(r)return;r=!0,f(e,t)}}c.prototype.catch=function(t){return this.then(null,t)},c.prototype.then=function(t,e){var r=new this.constructor(a);return u(this,new p(t,e,r)),r},c.prototype.finally=n.a,c.all=function(t){return new c((function(e,r){if(!i(t))return r(new TypeError("Promise.all accepts an array"));var n=Array.prototype.slice.call(t);if(0===n.length)return e([]);var o=n.length;function a(t,i){try{if(i&&("object"===typeof i||"function"===typeof i)){var c=i.then;if("function"===typeof c)return void c.call(i,(function(e){a(t,e)}),r)}n[t]=i,0===--o&&e(n)}catch(t){r(t)}}for(var c=0;c<n.length;c++)a(c,n[c])}))},c.resolve=function(t){return t&&"object"===typeof t&&t.constructor===c?t:new c((function(e){e(t)}))},c.reject=function(t){return new c((function(e,r){r(t)}))},c.race=function(t){return new c((function(e,r){if(!i(t))return r(new TypeError("Promise.race accepts an array"));for(var n=0,o=t.length;n<o;n++)c.resolve(t[n]).then(e,r)}))},c._immediateFn="function"===typeof t&&function(e){t(e)}||function(t){o(t,0)},c._unhandledRejectionFn=function(t){"undefined"!==typeof console&&console&&console.warn("Possible Unhandled Promise Rejection:",t)},e.a=c}).call(this,r(175).setImmediate)},,,,,,,,,,,,,,,,,,,function(t,e,r){"use strict"},function(t,e,r){"use strict";var n=r(7),o=r(49).filter;n({target:"Array",proto:!0,forced:!r(48)("filter")},{filter:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}})},function(t,e,r){"use strict";var n=r(7),o=r(55).includes,i=r(117);n({target:"Array",proto:!0},{includes:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}}),i("includes")},function(t,e,r){"use strict";var n=r(7),o=r(30),i=r(17),a=r(4),c=r(56),u=[].sort,s=[1,2,3],f=a((function(){s.sort(void 0)})),l=a((function(){s.sort(null)})),p=c("sort");n({target:"Array",proto:!0,forced:f||!l||p},{sort:function(t){return void 0===t?u.call(i(this)):u.call(i(this),o(t))}})},function(t,e,r){"use strict";var n=r(7),o=r(52),i=r(23),a=r(16),c=r(17),u=r(47),s=r(53),f=r(48),l=Math.max,p=Math.min;n({target:"Array",proto:!0,forced:!f("splice")},{splice:function(t,e){var r,n,f,h,d,v,y=c(this),g=a(y.length),m=o(t,g),b=arguments.length;if(0===b?r=n=0:1===b?(r=0,n=g-m):(r=b-2,n=p(l(i(e),0),g-m)),g+r-n>9007199254740991)throw TypeError("Maximum allowed length exceeded");for(f=u(y,n),h=0;h<n;h++)(d=m+h)in y&&s(f,h,y[d]);if(f.length=n,r<n){for(h=m;h<g-n;h++)v=h+r,(d=h+n)in y?y[v]=y[d]:delete y[v];for(h=g;h>g-n+r;h--)delete y[h-1]}else if(r>n)for(h=g-n;h>m;h--)v=h+r-1,(d=h+n-1)in y?y[v]=y[d]:delete y[v];for(h=0;h<r;h++)y[h+m]=arguments[h+2];return y.length=g-n+r,f}})},function(t,e,r){var n=r(11),o=r(13).f,i=Function.prototype,a=i.toString,c=/^\s*function ([^ (]*)/;!n||"name"in i||o(i,"name",{configurable:!0,get:function(){try{return a.call(this).match(c)[1]}catch(t){return""}}})},function(t,e,r){"use strict";var n=r(7),o=r(170),i=r(19);n({target:"String",proto:!0,forced:!r(171)("includes")},{includes:function(t){return!!~String(i(this)).indexOf(o(t),arguments.length>1?arguments[1]:void 0)}})},function(t,e,r){var n=r(104);t.exports=function(t){if(n(t))throw TypeError("The method doesn't accept regular expressions");return t}},function(t,e,r){var n=r(2)("match");t.exports=function(t){var e=/./;try{"/./"[t](e)}catch(r){try{return e[n]=!1,"/./"[t](e)}catch(t){}}return!1}},function(t,e,r){"use strict";var n=r(7),o=r(119).trim;n({target:"String",proto:!0,forced:r(173)("trim")},{trim:function(){return o(this)}})},function(t,e,r){var n=r(4),o=r(88);t.exports=function(t){return n((function(){return!!o[t]()||"âÂá "!="âÂá "[t]()||o[t].name!==t}))}},function(t,e,r){"use strict";(function(t){var e=r(144),n=r(111),o=function(){if("undefined"!==typeof self)return self;if("undefined"!==typeof window)return window;if("undefined"!==typeof t)return t;throw new Error("unable to locate global object")}();"Promise"in o?o.Promise.prototype.finally||(o.Promise.prototype.finally=n.a):o.Promise=e.a}).call(this,r(44))},function(t,e,r){(function(t){var n="undefined"!==typeof t&&t||"undefined"!==typeof self&&self||window,o=Function.prototype.apply;function i(t,e){this._id=t,this._clearFn=e}e.setTimeout=function(){return new i(o.call(setTimeout,n,arguments),clearTimeout)},e.setInterval=function(){return new i(o.call(setInterval,n,arguments),clearInterval)},e.clearTimeout=e.clearInterval=function(t){t&&t.close()},i.prototype.unref=i.prototype.ref=function(){},i.prototype.close=function(){this._clearFn.call(n,this._id)},e.enroll=function(t,e){clearTimeout(t._idleTimeoutId),t._idleTimeout=e},e.unenroll=function(t){clearTimeout(t._idleTimeoutId),t._idleTimeout=-1},e._unrefActive=e.active=function(t){clearTimeout(t._idleTimeoutId);var e=t._idleTimeout;e>=0&&(t._idleTimeoutId=setTimeout((function(){t._onTimeout&&t._onTimeout()}),e))},r(176),e.setImmediate="undefined"!==typeof self&&self.setImmediate||"undefined"!==typeof t&&t.setImmediate||this&&this.setImmediate,e.clearImmediate="undefined"!==typeof self&&self.clearImmediate||"undefined"!==typeof t&&t.clearImmediate||this&&this.clearImmediate}).call(this,r(44))},function(t,e,r){(function(t,e){!function(t,r){"use strict";if(!t.setImmediate){var n,o=1,i={},a=!1,c=t.document,u=Object.getPrototypeOf&&Object.getPrototypeOf(t);u=u&&u.setTimeout?u:t,"[object process]"==={}.toString.call(t.process)?n=function(t){e.nextTick((function(){f(t)}))}:function(){if(t.postMessage&&!t.importScripts){var e=!0,r=t.onmessage;return t.onmessage=function(){e=!1},t.postMessage("","*"),t.onmessage=r,e}}()?function(){var e="setImmediate$"+Math.random()+"$",r=function(r){r.source===t&&"string"===typeof r.data&&0===r.data.indexOf(e)&&f(+r.data.slice(e.length))};t.addEventListener?t.addEventListener("message",r,!1):t.attachEvent("onmessage",r),n=function(r){t.postMessage(e+r,"*")}}():t.MessageChannel?function(){var t=new MessageChannel;t.port1.onmessage=function(t){f(t.data)},n=function(e){t.port2.postMessage(e)}}():c&&"onreadystatechange"in c.createElement("script")?function(){var t=c.documentElement;n=function(e){var r=c.createElement("script");r.onreadystatechange=function(){f(e),r.onreadystatechange=null,t.removeChild(r),r=null},t.appendChild(r)}}():n=function(t){setTimeout(f,0,t)},u.setImmediate=function(t){"function"!==typeof t&&(t=new Function(""+t));for(var e=new Array(arguments.length-1),r=0;r<e.length;r++)e[r]=arguments[r+1];var a={callback:t,args:e};return i[o]=a,n(o),o++},u.clearImmediate=s}function s(t){delete i[t]}function f(t){if(a)setTimeout(f,0,t);else{var e=i[t];if(e){a=!0;try{!function(t){var e=t.callback,n=t.args;switch(n.length){case 0:e();break;case 1:e(n[0]);break;case 2:e(n[0],n[1]);break;case 3:e(n[0],n[1],n[2]);break;default:e.apply(r,n)}}(e)}finally{s(t),a=!1}}}}}("undefined"===typeof self?"undefined"===typeof t?this:t:self)}).call(this,r(44),r(177))},function(t,e){var r,n,o=t.exports={};function i(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function c(t){if(r===setTimeout)return setTimeout(t,0);if((r===i||!r)&&setTimeout)return r=setTimeout,setTimeout(t,0);try{return r(t,0)}catch(e){try{return r.call(null,t,0)}catch(e){return r.call(this,t,0)}}}!function(){try{r="function"===typeof setTimeout?setTimeout:i}catch(t){r=i}try{n="function"===typeof clearTimeout?clearTimeout:a}catch(t){n=a}}();var u,s=[],f=!1,l=-1;function p(){f&&u&&(f=!1,u.length?s=u.concat(s):l=-1,s.length&&h())}function h(){if(!f){var t=c(p);f=!0;for(var e=s.length;e;){for(u=s,s=[];++l<e;)u&&u[l].run();l=-1,e=s.length}u=null,f=!1,function(t){if(n===clearTimeout)return clearTimeout(t);if((n===a||!n)&&clearTimeout)return n=clearTimeout,clearTimeout(t);try{n(t)}catch(e){try{return n.call(null,t)}catch(e){return n.call(this,t)}}}(t)}}function d(t,e){this.fun=t,this.array=e}function v(){}o.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)e[r-1]=arguments[r];s.push(new d(t,e)),1!==s.length||f||c(h)},d.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=v,o.addListener=v,o.once=v,o.off=v,o.removeListener=v,o.removeAllListeners=v,o.emit=v,o.prependListener=v,o.prependOnceListener=v,o.listeners=function(t){return[]},o.binding=function(t){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(t){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(t,e,r){"use strict";r.r(e);r(86),r(164),r(350),r(58),r(118),r(165),r(87),r(166),r(167),r(168),r(103),r(113),r(140),r(114),r(120),r(96),r(89),r(169),r(79),r(99),r(351),r(172),r(61);var n=r(66),o=r.n(n),i=(r(137),r(101)),a=r.n(i),c=r(18),u=(r(163),r(174),r(116),window.epas);function s(t,e){e.setAttribute("aria-activedescendant",t)}function f(t,e){!function(t){var e=new CustomEvent("ep-autosuggest-click",{detail:t});if(window.dispatchEvent(e),t.searchTerm&&1===parseInt(u.triggerAnalytics,10)&&"function"===typeof gtag){var r="click - ".concat(t.searchTerm);gtag("event",r,{event_category:"EP :: Autosuggest",event_label:t.url,transport_type:"beacon"})}}({searchTerm:t,url:e}),window.location.href=e}function l(t,e){return"navigate"===u.action?f(t.value,e.dataset.url):(function(t,e){t.value=e}(t,e.innerText),function(t){t.closest("form").submit()}(t))}function p(){if("undefined"===typeof window.epas){var t="No epas object defined";return console.warn(t),{error:t}}return window.epas}function h(t,e,r){var n=r.query;return Object(c.f)(n,e,t)}function d(t,e){return v.apply(this,arguments)}function v(){return(v=a()(o.a.mark((function t(e,r){var n,i,a;return o.a.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return n={body:e,method:"POST",mode:"cors",headers:{"Content-Type":"application/json; charset=utf-8"}},u.addSearchTermHeader&&(n.headers["EP-Search-Term"]=r),t.prev=2,t.next=5,window.fetch(u.endpointUrl,n);case 5:if((i=t.sent).ok){t.next=8;break}throw Error(i.statusText);case 8:return t.next=10,i.json();case 10:if(a=t.sent,"undefined"===typeof window.epDataFilter){t.next=13;break}return t.abrupt("return",window.epDataFilter(a,r));case 13:return t.abrupt("return",a);case 16:return t.prev=16,t.t0=t.catch(2),console.error(t.t0),t.abrupt("return",t.t0);case 20:case"end":return t.stop()}}),t,null,[[2,16]])})))).apply(this,arguments)}function y(t,e){for(var r,n="",o=e.value,i=Object(c.c)(e,"ep-autosuggest-container").querySelector(".ep-autosuggest"),a=i.querySelector(".autosuggest-list");a.firstChild;)a.removeChild(a.firstChild);t.length>0?i.style="display: block;":i.style="display: none;";var u=t.length,s=function(){var e=t[r],i=e.text,a=e.url,u=Object(c.b)(i),s=o.trim().split(" "),f=u;s.forEach((function(t){var e=new RegExp("(".concat(t.trim(),")"),"gi");t.length>1&&(f=f.replace(e,'<span class="ep-autosuggest-highlight">$1</span>'))})),n+='<li class="autosuggest-item" role="option" aria-selected="false" id="autosuggest-option-'.concat(r,'">\n\t\t\t\t<a href="').concat(a,'" class="autosuggest-link" data-search="').concat(u,'" data-url="').concat(a,'">\n\t\t\t\t\t').concat(f,"\n\t\t\t\t</a>\n\t\t\t</li>")};for(r=0;u>r;++r)s();a.innerHTML=n;var f=Array.from(document.querySelectorAll(".autosuggest-link"));return a.addEventListener("click",(function(t){t.preventDefault();var r=t.srcElement;f.includes(r)&&l(e,r)})),!0}function g(){var t=document.querySelectorAll(".autosuggest-list"),e=document.querySelectorAll(".ep-autosuggest");return t.forEach((function(t){for(;t.firstChild;)t.removeChild(t.firstChild)})),e.forEach((function(t){t.style="display: none;"})),!0}function m(t,e){var r={},n=e.toLowerCase(),o=t.filter((function(t){var e=!0;return void 0!==t._source.terms&&void 0!==t._source.terms.ep_custom_result&&t._source.terms.ep_custom_result.forEach((function(o){o.name.toLowerCase()===n&&(r[o.term_order]=t,e=!1)})),e})),i={};return Object.keys(r).sort().forEach((function(t){i[t]=r[t]})),Object.keys(i).length>0&&Object.keys(i).forEach((function(t){var e=i[t];o.splice(t-1,0,e)})),t}u.endpointUrl&&""!==u.endpointUrl&&(!function(){var t=document.querySelectorAll('.ep-autosuggest, input[type="search"], .search-field, '.concat(u.selector)),e=document.createElement("div");e.classList.add("ep-autosuggest");var r=document.createElement("ul");r.classList.add("autosuggest-list"),r.setAttribute("role","listbox"),e.appendChild(r);var n=Array.from(t).filter((function(t){return!t.classList.contains("facet-search")}));n.forEach((function(t){var r=document.createElement("div");r.classList.add("ep-autosuggest-container"),t.setAttribute("autocomplete","off"),t.insertAdjacentElement("afterend",r),t.closest("form").querySelector(".ep-autosuggest-container").appendChild(t);var n=e.cloneNode(!0);t.insertAdjacentElement("afterend",n);var o=new CustomEvent("elasticpress.input.moved");t.dispatchEvent(o)})),n.length>0&&e.setAttribute("style","\n\t\t\ttop: ".concat(n[0].offsetHeight-1,";\n\t\t\tbackground-color: ").concat(getComputedStyle(n[0],"background-color"),"\n\t\t"));var i,f=function(t){return t.map((function(t){return{text:t._source.post_title,url:t._source.permalink}}))},v=[38,40,13],b=function(){var t=a()(o.a.mark((function t(e){var r,n,i,a,c,u,s;return o.a.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(r=e.value,n="ep_autosuggest_placeholder",!(i=p()).error){t.next=5;break}return t.abrupt("return");case 5:if(!(r.length>=2)){t.next=13;break}return a=h(r,n,i),t.next=9,d(a,r);case 9:(c=t.sent)&&c._shards.successful>0?(u=m(c.hits.hits,r),0===(s=f(u)).length?g():y(s,e)):g(),t.next=14;break;case 13:0===r.length&&g();case 14:case"end":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}(),x=function(t){if(t.preventDefault(),27===t.keyCode)return g(),function(t,e){e.setAttribute("aria-expanded",t)}(!1,t.target),void s("",t.target);if(v.includes(t.keyCode))!function(t){if(v.includes(t.keyCode)){var e=t.target,r=Object(c.c)(e,"ep-autosuggest-container").querySelector(".autosuggest-list").children,n=function(){r.forEach((function(t){t.classList.remove("selected"),t.setAttribute("aria-selected","false")}))};switch(t.keyCode){case 38:i=i-1>=0?i-1:0,n();break;case 40:if("undefined"===typeof i)i=0;else{var o=Array.from(r).findIndex((function(t){return t.classList.contains("selected")}));r[o+1]&&(i=o+1,n())}break;case 13:r[i].classList.contains("selected")&&l(e,r[i].querySelector(".autosuggest-link"))}r[i]&&r[i].classList.contains("autosuggest-item")?function(){if(i>=0){var t=r[i];t.classList.add("selected"),t.setAttribute("aria-selected","true"),s(t.id,e)}}():n(),38===t.keyCode&&t.preventDefault()}}(t);else{var e=t.target;Object(c.a)(b,200)(e)}};n.forEach((function(t){t.addEventListener("keyup",x)}))}(),window.epasAPI={hideAutosuggestBox:g,updateAutosuggestBox:y,esSearch:d,buildSearchQuery:h})},function(t,e,r){"use strict";var n=r(7),o=r(49).findIndex,i=r(117),a=!0;"findIndex"in[]&&Array(1).findIndex((function(){a=!1})),n({target:"Array",proto:!0,forced:a},{findIndex:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}}),i("findIndex")},function(t,e,r){"use strict";var n=r(108),o=r(104),i=r(6),a=r(19),c=r(115),u=r(121),s=r(16),f=r(109),l=r(64),p=r(4),h=[].push,d=Math.min,v=!p((function(){return!RegExp(4294967295,"y")}));n("split",2,(function(t,e,r){var n;return n="c"=="abbc".split(/(b)*/)[1]||4!="test".split(/(?:)/,-1).length||2!="ab".split(/(?:ab)*/).length||4!=".".split(/(.?)(.?)/).length||".".split(/()()/).length>1||"".split(/.?/).length?function(t,r){var n=String(a(this)),i=void 0===r?4294967295:r>>>0;if(0===i)return[];if(void 0===t)return[n];if(!o(t))return e.call(n,t,i);for(var c,u,s,f=[],p=(t.ignoreCase?"i":"")+(t.multiline?"m":"")+(t.unicode?"u":"")+(t.sticky?"y":""),d=0,v=new RegExp(t.source,p+"g");(c=l.call(v,n))&&!((u=v.lastIndex)>d&&(f.push(n.slice(d,c.index)),c.length>1&&c.index<n.length&&h.apply(f,c.slice(1)),s=c[0].length,d=u,f.length>=i));)v.lastIndex===c.index&&v.lastIndex++;return d===n.length?!s&&v.test("")||f.push(""):f.push(n.slice(d)),f.length>i?f.slice(0,i):f}:"0".split(void 0,0).length?function(t,r){return void 0===t&&0===r?[]:e.call(this,t,r)}:e,[function(e,r){var o=a(this),i=void 0==e?void 0:e[t];return void 0!==i?i.call(e,o,r):n.call(String(o),e,r)},function(t,o){var a=r(n,t,this,o,n!==e);if(a.done)return a.value;var l=i(t),p=String(this),h=c(l,RegExp),y=l.unicode,g=(l.ignoreCase?"i":"")+(l.multiline?"m":"")+(l.unicode?"u":"")+(v?"y":"g"),m=new h(v?l:"^(?:"+l.source+")",g),b=void 0===o?4294967295:o>>>0;if(0===b)return[];if(0===p.length)return null===f(m,p)?[p]:[];for(var x=0,w=0,E=[];w<p.length;){m.lastIndex=v?w:0;var _,T=f(m,v?p:p.slice(w));if(null===T||(_=d(s(m.lastIndex+(v?0:w)),p.length))===x)w=u(p,w,y);else{if(E.push(p.slice(x,w)),E.length===b)return E;for(var S=1;S<=T.length-1;S++)if(E.push(T[S]),E.length===b)return E;w=x=_}}return E.push(p.slice(x)),E}]}),!v)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2ZhaWxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pcy1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FuLW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZXhwb3J0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9oYXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2hpZGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2Rlc2NyaXB0b3JzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9yZWRlZmluZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY2xhc3NvZi1yYXcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLWxlbmd0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8tb2JqZWN0LmpzIiwid2VicGFjazovLy8uL2Fzc2V0cy9qcy91dGlscy9oZWxwZXJzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zaGFyZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS1kZXNjcmlwdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1pbnRlZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zZXQtZ2xvYmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pcy1wdXJlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9nZXQtYnVpbHQtaW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1wcmltaXRpdmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2JpbmQtY29udGV4dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYS1mdW5jdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXRlcmF0b3JzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pbmRleGVkLW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaGlkZGVuLWtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2VudW0tYnVnLWtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NoYXJlZC1rZXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2RvY3VtZW50LWNyZWF0ZS1lbGVtZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pZTgtZG9tLWRlZmluZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZnVuY3Rpb24tdG8tc3RyaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy91aWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLWZvcmNlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc2V0LXRvLXN0cmluZy10YWcuanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1rZXlzLWludGVybmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1zcGVjaWVzLWNyZWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLWhhcy1zcGVjaWVzLXN1cHBvcnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LWl0ZXJhdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcGF0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLWFic29sdXRlLWluZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1wcm9wZXJ0eS1pcy1lbnVtZXJhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1pbmNsdWRlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc2xvcHB5LWFycmF5LW1ldGhvZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZ2V0LWl0ZXJhdG9yLW1ldGhvZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZvci1lYWNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1zeW1ib2xzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1mb3ItZWFjaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL3dlYi5kb20tY29sbGVjdGlvbnMuZm9yLWVhY2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9yZWdleHAtZmxhZ3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3JlZ2V4cC1leGVjLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9yZWdlbmVyYXRvci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvbmF0aXZlLXdlYWstbWFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jb3B5LWNvbnN0cnVjdG9yLXByb3BlcnRpZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL293bi1rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9uYXRpdmUtc3ltYm9sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jbGFzc29mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zdHJpbmctbXVsdGlieXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL3RvQ29uc3VtYWJsZUFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pcy1hcnJheS1pdGVyYXRvci1tZXRob2QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NhbGwtd2l0aC1zYWZlLWl0ZXJhdGlvbi1jbG9zaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9odG1sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9kb20taXRlcmFibGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLml0ZXJhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pdGVyYXRvcnMtY29yZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWdldC1wcm90b3R5cGUtb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NldC1zcGVjaWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jaGVjay1jb3JyZWN0bmVzcy1vZi1pdGVyYXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1zZXQtcHJvdG90eXBlLW9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuY29uY2F0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkubWFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy93aGl0ZXNwYWNlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnJlZ2V4cC50by1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FuLWluc3RhbmNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90YXNrLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy91c2VyLWFnZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9uZXctcHJvbWlzZS1jYXBhYmlsaXR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnRpZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5yZWdleHAuZXhlYy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZGVmaW5lLWl0ZXJhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jcmVhdGUtaXRlcmF0b3ItY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcucmVwbGFjZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3luY1RvR2VuZXJhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1mcm9tLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLXJlZ2V4cC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcmVkZWZpbmUtYWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hLXBvc3NpYmxlLXByb3RvdHlwZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY29ycmVjdC1wcm90b3R5cGUtZ2V0dGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9maXgtcmVnZXhwLXdlbGwta25vd24tc3ltYm9sLWxvZ2ljLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9yZWdleHAtZXhlYy1hYnN0cmFjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvbWlzZS1wb2x5ZmlsbC9zcmMvZmluYWxseS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC50by1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5wcm9taXNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zcGVjaWVzLWNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy93aGF0d2ctZmV0Y2gvZmV0Y2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FkZC10by11bnNjb3BhYmxlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZyb20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3N0cmluZy10cmltLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMucmVnZXhwLmNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hZHZhbmNlLXN0cmluZy1pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmpvaW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC10by1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL25hdGl2ZS1wcm9taXNlLWNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pdGVyYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9taWNyb3Rhc2suanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3Byb21pc2UtcmVzb2x2ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaG9zdC1yZXBvcnQtZXJyb3JzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9wZXJmb3JtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pbmhlcml0LWlmLXJlcXVpcmVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2FycmF5V2l0aG91dEhvbGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2l0ZXJhYmxlVG9BcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9ub25JdGVyYWJsZVNwcmVhZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMucGFyc2UtaW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9wYXJzZS1pbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL25vZGVfbW9kdWxlcy9yZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb21pc2UtcG9seWZpbGwvc3JjL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmlsdGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuaW5jbHVkZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5zb3J0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuc3BsaWNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuZnVuY3Rpb24ubmFtZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5pbmNsdWRlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvbm90LWEtcmVnZXhwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jb3JyZWN0LWlzLXJlZ2V4cC1sb2dpYy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy50cmltLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9mb3JjZWQtc3RyaW5nLXRyaW0tbWV0aG9kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9taXNlLXBvbHlmaWxsL3NyYy9wb2x5ZmlsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdGltZXJzLWJyb3dzZXJpZnkvbWFpbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2V0aW1tZWRpYXRlL3NldEltbWVkaWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbm9kZS1saWJzLWJyb3dzZXIvbm9kZV9tb2R1bGVzL3Byb2Nlc3MvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9hc3NldHMvanMvYXV0b3N1Z2dlc3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5maW5kLWluZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnNwbGl0LmpzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiY2hlY2siLCJpdCIsIk1hdGgiLCJnbG9iYWxUaGlzIiwiTyIsIndpbmRvdyIsInNlbGYiLCJnbG9iYWwiLCJGdW5jdGlvbiIsInNoYXJlZCIsInVpZCIsIk5BVElWRV9TWU1CT0wiLCJzdG9yZSIsImV4ZWMiLCJlcnJvciIsImlzT2JqZWN0IiwiVHlwZUVycm9yIiwiU3RyaW5nIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZiIsImhpZGUiLCJyZWRlZmluZSIsInNldEdsb2JhbCIsImNvcHlDb25zdHJ1Y3RvclByb3BlcnRpZXMiLCJpc0ZvcmNlZCIsIm9wdGlvbnMiLCJzb3VyY2UiLCJ0YXJnZXQiLCJ0YXJnZXRQcm9wZXJ0eSIsInNvdXJjZVByb3BlcnR5IiwiZGVzY3JpcHRvciIsIlRBUkdFVCIsIkdMT0JBTCIsIlNUQVRJQyIsInN0YXQiLCJub1RhcmdldEdldCIsImZvcmNlZCIsInVuZGVmaW5lZCIsInNoYW0iLCJERVNDUklQVE9SUyIsImRlZmluZVByb3BlcnR5TW9kdWxlIiwiY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yIiwiZmFpbHMiLCJhIiwiSUU4X0RPTV9ERUZJTkUiLCJhbk9iamVjdCIsInRvUHJpbWl0aXZlIiwibmF0aXZlRGVmaW5lUHJvcGVydHkiLCJQIiwiQXR0cmlidXRlcyIsImhhcyIsIm5hdGl2ZUZ1bmN0aW9uVG9TdHJpbmciLCJJbnRlcm5hbFN0YXRlTW9kdWxlIiwiZ2V0SW50ZXJuYWxTdGF0ZSIsImVuZm9yY2VJbnRlcm5hbFN0YXRlIiwiZW5mb3JjZSIsIlRFTVBMQVRFIiwic3BsaXQiLCJ1bnNhZmUiLCJzaW1wbGUiLCJqb2luIiwidGhpcyIsInRvU3RyaW5nIiwic2xpY2UiLCJ0b0ludGVnZXIiLCJtaW4iLCJhcmd1bWVudCIsInJlcXVpcmVPYmplY3RDb2VyY2libGUiLCJkZWJvdW5jZSIsImZuIiwiZGVsYXkiLCJ0aW1lciIsImFyZ3MiLCJjb250ZXh0IiwiY2xlYXJUaW1lb3V0Iiwic2V0VGltZW91dCIsImFwcGx5IiwicmVwbGFjZUdsb2JhbGx5Iiwic3RyaW5nIiwidGVybSIsInJlcGxhY2VtZW50IiwicmVwbGFjZSIsIlJlZ0V4cCIsImVzY2FwZVJlZ0V4cCIsImVzY2FwZURvdWJsZVF1b3RlcyIsInN0ciIsImZpbmRBbmNlc3RvckJ5Q2xhc3MiLCJlbCIsImNsYXNzTmFtZSIsInBhcmVudEVsZW1lbnQiLCJjbGFzc0xpc3QiLCJjb250YWlucyIsInBsdWNrIiwiYXJyYXkiLCJtYXAiLCJzaG93T3JIaWRlTm9kZXMiLCJlbHMiLCJkaXNwbGF5Iiwibm9kZXMiLCJOb2RlTGlzdCIsImlzUHJvdG90eXBlT2YiLCJBcnJheSIsImZyb20iLCJsZW5ndGgiLCJpc0FycmF5IiwicHVzaCIsImZvckVhY2giLCJzdHlsZSIsInNob3dFbGVtZW50cyIsImhpZGVFbGVtZW50cyIsIkluZGV4ZWRPYmplY3QiLCJJU19QVVJFIiwidmVyc2lvbiIsImNvcHlyaWdodCIsImJpdG1hcCIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiY2VpbCIsImZsb29yIiwiaXNOYU4iLCJwYXRoIiwiYUZ1bmN0aW9uIiwidmFyaWFibGUiLCJuYW1lc3BhY2UiLCJtZXRob2QiLCJhcmd1bWVudHMiLCJzZXQiLCJOQVRJVkVfV0VBS19NQVAiLCJvYmplY3RIYXMiLCJzaGFyZWRLZXkiLCJoaWRkZW5LZXlzIiwiV2Vha01hcCIsIndtZ2V0Iiwid21oYXMiLCJ3bXNldCIsIm1ldGFkYXRhIiwiU1RBVEUiLCJnZXR0ZXJGb3IiLCJUWVBFIiwic3RhdGUiLCJ0eXBlIiwiaW5wdXQiLCJQUkVGRVJSRURfU1RSSU5HIiwidmFsIiwidmFsdWVPZiIsInRoYXQiLCJiIiwiY2xhc3NvZiIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwicHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUiLCJ0b0luZGV4ZWRPYmplY3QiLCJuYXRpdmVHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJrZXlzIiwiZG9jdW1lbnQiLCJFWElTVFMiLCJjcmVhdGVFbGVtZW50IiwiaWQiLCJwb3N0Zml4IiwicmFuZG9tIiwiZmVhdHVyZSIsImRldGVjdGlvbiIsImRhdGEiLCJub3JtYWxpemUiLCJQT0xZRklMTCIsIk5BVElWRSIsInRvTG93ZXJDYXNlIiwiVE9fU1RSSU5HX1RBRyIsIndlbGxLbm93blN5bWJvbCIsIlRBRyIsImciLCJlIiwiYXJnIiwiaW5kZXhPZiIsIm5hbWVzIiwicmVzdWx0IiwiU1BFQ0lFUyIsIm9yaWdpbmFsQXJyYXkiLCJDIiwiY29uc3RydWN0b3IiLCJNRVRIT0RfTkFNRSIsImZvbyIsIkJvb2xlYW4iLCJ0b09iamVjdCIsInRvTGVuZ3RoIiwiYXJyYXlTcGVjaWVzQ3JlYXRlIiwiY3JlYXRlTWV0aG9kIiwiSVNfTUFQIiwiSVNfRklMVEVSIiwiSVNfU09NRSIsIklTX0VWRVJZIiwiSVNfRklORF9JTkRFWCIsIk5PX0hPTEVTIiwiJHRoaXMiLCJjYWxsYmFja2ZuIiwic3BlY2lmaWNDcmVhdGUiLCJib3VuZEZ1bmN0aW9uIiwiaW5kZXgiLCJmaWx0ZXIiLCJzb21lIiwiZXZlcnkiLCJmaW5kIiwiZmluZEluZGV4IiwiaW50ZXJuYWxPYmplY3RLZXlzIiwiY29uY2F0IiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsIm1heCIsImludGVnZXIiLCJwcm9wZXJ0eUtleSIsIm5hdGl2ZVByb3BlcnR5SXNFbnVtZXJhYmxlIiwiTkFTSE9STl9CVUciLCIxIiwiViIsInRvQWJzb2x1dGVJbmRleCIsIklTX0lOQ0xVREVTIiwiZnJvbUluZGV4IiwiaW5jbHVkZXMiLCJJdGVyYXRvcnMiLCJJVEVSQVRPUiIsIiQiLCJwcm90byIsImdldE93blByb3BlcnR5U3ltYm9scyIsIiRmb3JFYWNoIiwic2xvcHB5QXJyYXlNZXRob2QiLCJET01JdGVyYWJsZXMiLCJDT0xMRUNUSU9OX05BTUUiLCJDb2xsZWN0aW9uIiwiQ29sbGVjdGlvblByb3RvdHlwZSIsImVudW1CdWdLZXlzIiwiaWdub3JlQ2FzZSIsIm11bHRpbGluZSIsImRvdEFsbCIsInVuaWNvZGUiLCJzdGlja3kiLCJyZWdleHBGbGFncyIsIm5hdGl2ZUV4ZWMiLCJuYXRpdmVSZXBsYWNlIiwicGF0Y2hlZEV4ZWMiLCJVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkciLCJyZTEiLCJyZTIiLCJsYXN0SW5kZXgiLCJOUENHX0lOQ0xVREVEIiwicmVDb3B5IiwibWF0Y2giLCJyZSIsInRlc3QiLCJvd25LZXlzIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlIiwiZ2V0QnVpbHRJbiIsImdldE93blByb3BlcnR5TmFtZXNNb2R1bGUiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUiLCJjbGFzc29mUmF3IiwiQ09SUkVDVF9BUkdVTUVOVFMiLCJ0YWciLCJ0cnlHZXQiLCJjYWxsZWUiLCJDT05WRVJUX1RPX1NUUklORyIsInBvcyIsImZpcnN0Iiwic2Vjb25kIiwiUyIsInBvc2l0aW9uIiwic2l6ZSIsImNoYXJDb2RlQXQiLCJjaGFyQXQiLCJjb2RlQXQiLCJhcnJheVdpdGhvdXRIb2xlcyIsIml0ZXJhYmxlVG9BcnJheSIsIm5vbkl0ZXJhYmxlU3ByZWFkIiwiYXJyIiwiQXJyYXlQcm90b3R5cGUiLCJpdGVyYXRvciIsIkVOVFJJRVMiLCJyZXR1cm5NZXRob2QiLCJDU1NSdWxlTGlzdCIsIkNTU1N0eWxlRGVjbGFyYXRpb24iLCJDU1NWYWx1ZUxpc3QiLCJDbGllbnRSZWN0TGlzdCIsIkRPTVJlY3RMaXN0IiwiRE9NU3RyaW5nTGlzdCIsIkRPTVRva2VuTGlzdCIsIkRhdGFUcmFuc2Zlckl0ZW1MaXN0IiwiRmlsZUxpc3QiLCJIVE1MQWxsQ29sbGVjdGlvbiIsIkhUTUxDb2xsZWN0aW9uIiwiSFRNTEZvcm1FbGVtZW50IiwiSFRNTFNlbGVjdEVsZW1lbnQiLCJNZWRpYUxpc3QiLCJNaW1lVHlwZUFycmF5IiwiTmFtZWROb2RlTWFwIiwiUGFpbnRSZXF1ZXN0TGlzdCIsIlBsdWdpbiIsIlBsdWdpbkFycmF5IiwiU1ZHTGVuZ3RoTGlzdCIsIlNWR051bWJlckxpc3QiLCJTVkdQYXRoU2VnTGlzdCIsIlNWR1BvaW50TGlzdCIsIlNWR1N0cmluZ0xpc3QiLCJTVkdUcmFuc2Zvcm1MaXN0IiwiU291cmNlQnVmZmVyTGlzdCIsIlN0eWxlU2hlZXRMaXN0IiwiVGV4dFRyYWNrQ3VlTGlzdCIsIlRleHRUcmFja0xpc3QiLCJUb3VjaExpc3QiLCJkZWZpbmVJdGVyYXRvciIsInNldEludGVybmFsU3RhdGUiLCJpdGVyYXRlZCIsInBvaW50IiwiZG9uZSIsIkl0ZXJhdG9yUHJvdG90eXBlIiwiUHJvdG90eXBlT2ZBcnJheUl0ZXJhdG9yUHJvdG90eXBlIiwiYXJyYXlJdGVyYXRvciIsImdldFByb3RvdHlwZU9mIiwiQlVHR1lfU0FGQVJJX0lURVJBVE9SUyIsIkNPUlJFQ1RfUFJPVE9UWVBFX0dFVFRFUiIsIklFX1BST1RPIiwiT2JqZWN0UHJvdG90eXBlIiwiQ09OU1RSVUNUT1JfTkFNRSIsIkNvbnN0cnVjdG9yIiwiU0FGRV9DTE9TSU5HIiwiY2FsbGVkIiwiaXRlcmF0b3JXaXRoUmV0dXJuIiwibmV4dCIsIlNLSVBfQ0xPU0lORyIsIklURVJBVElPTl9TVVBQT1JUIiwiZGVmaW5lUHJvcGVydGllcyIsImh0bWwiLCJkb2N1bWVudENyZWF0ZUVsZW1lbnQiLCJFbXB0eSIsImNyZWF0ZURpY3QiLCJpZnJhbWVEb2N1bWVudCIsImlmcmFtZSIsImFwcGVuZENoaWxkIiwic3JjIiwiY29udGVudFdpbmRvdyIsIm9wZW4iLCJ3cml0ZSIsImx0IiwiY2xvc2UiLCJGIiwiUHJvcGVydGllcyIsImFQb3NzaWJsZVByb3RvdHlwZSIsInNldFByb3RvdHlwZU9mIiwic2V0dGVyIiwiQ09SUkVDVF9TRVRURVIiLCJfX3Byb3RvX18iLCJjcmVhdGVQcm9wZXJ0eSIsImFycmF5TWV0aG9kSGFzU3BlY2llc1N1cHBvcnQiLCJJU19DT05DQVRfU1BSRUFEQUJMRSIsIklTX0NPTkNBVF9TUFJFQURBQkxFX1NVUFBPUlQiLCJTUEVDSUVTX1NVUFBPUlQiLCJpc0NvbmNhdFNwcmVhZGFibGUiLCJzcHJlYWRhYmxlIiwiayIsImxlbiIsIkUiLCJBIiwiJG1hcCIsImZsYWdzIiwiUmVnRXhwUHJvdG90eXBlIiwibmF0aXZlVG9TdHJpbmciLCJOT1RfR0VORVJJQyIsIklOQ09SUkVDVF9OQU1FIiwiUiIsInJmIiwiZGVmZXIiLCJjaGFubmVsIiwicG9ydCIsImxvY2F0aW9uIiwic2V0SW1tZWRpYXRlIiwiY2xlYXIiLCJjbGVhckltbWVkaWF0ZSIsInByb2Nlc3MiLCJNZXNzYWdlQ2hhbm5lbCIsIkRpc3BhdGNoIiwiY291bnRlciIsInF1ZXVlIiwicnVuIiwicnVubmVyIiwibGlzdGVuZXIiLCJldmVudCIsInBvc3QiLCJwb3N0TWVzc2FnZSIsInByb3RvY29sIiwiaG9zdCIsIm5leHRUaWNrIiwibm93IiwicG9ydDIiLCJwb3J0MSIsIm9ubWVzc2FnZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJpbXBvcnRTY3JpcHRzIiwicmVtb3ZlQ2hpbGQiLCJQcm9taXNlQ2FwYWJpbGl0eSIsInJlc29sdmUiLCJyZWplY3QiLCJwcm9taXNlIiwiJCRyZXNvbHZlIiwiJCRyZWplY3QiLCJvYmplY3RLZXlzIiwiY3JlYXRlSXRlcmF0b3JDb25zdHJ1Y3RvciIsInNldFRvU3RyaW5nVGFnIiwiSXRlcmF0b3JzQ29yZSIsInJldHVyblRoaXMiLCJJdGVyYWJsZSIsIk5BTUUiLCJJdGVyYXRvckNvbnN0cnVjdG9yIiwiREVGQVVMVCIsIklTX1NFVCIsIkZPUkNFRCIsIkN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSIsIm1ldGhvZHMiLCJLRVkiLCJnZXRJdGVyYXRpb25NZXRob2QiLCJLSU5EIiwiZGVmYXVsdEl0ZXJhdG9yIiwiSXRlcmFibGVQcm90b3R5cGUiLCJJTkNPUlJFQ1RfVkFMVUVTX05BTUUiLCJuYXRpdmVJdGVyYXRvciIsImFueU5hdGl2ZUl0ZXJhdG9yIiwiZW50cmllcyIsInZhbHVlcyIsImZpeFJlZ0V4cFdlbGxLbm93blN5bWJvbExvZ2ljIiwiYWR2YW5jZVN0cmluZ0luZGV4IiwicmVnRXhwRXhlYyIsIlNVQlNUSVRVVElPTl9TWU1CT0xTIiwiU1VCU1RJVFVUSU9OX1NZTUJPTFNfTk9fTkFNRUQiLCJSRVBMQUNFIiwibWF5YmVDYWxsTmF0aXZlIiwic2VhcmNoVmFsdWUiLCJyZXBsYWNlVmFsdWUiLCJyZXBsYWNlciIsInJlZ2V4cCIsInJlcyIsInJ4IiwiZnVuY3Rpb25hbFJlcGxhY2UiLCJmdWxsVW5pY29kZSIsInJlc3VsdHMiLCJhY2N1bXVsYXRlZFJlc3VsdCIsIm5leHRTb3VyY2VQb3NpdGlvbiIsIm1hdGNoZWQiLCJjYXB0dXJlcyIsImoiLCJuYW1lZENhcHR1cmVzIiwiZ3JvdXBzIiwicmVwbGFjZXJBcmdzIiwiZ2V0U3Vic3RpdHV0aW9uIiwidGFpbFBvcyIsInN5bWJvbHMiLCJjaCIsImNhcHR1cmUiLCJhc3luY0dlbmVyYXRvclN0ZXAiLCJnZW4iLCJfbmV4dCIsIl90aHJvdyIsImluZm8iLCJQcm9taXNlIiwidGhlbiIsImVyciIsImNhbGxXaXRoU2FmZUl0ZXJhdGlvbkNsb3NpbmciLCJpc0FycmF5SXRlcmF0b3JNZXRob2QiLCJnZXRJdGVyYXRvck1ldGhvZCIsImFycmF5TGlrZSIsInN0ZXAiLCJhcmd1bWVudHNMZW5ndGgiLCJtYXBmbiIsIm1hcHBpbmciLCJpdGVyYXRvck1ldGhvZCIsIm5hdGl2ZUtleXMiLCJNQVRDSCIsImlzUmVnRXhwIiwicmVnZXhwRXhlYyIsIlJFUExBQ0VfU1VQUE9SVFNfTkFNRURfR1JPVVBTIiwiU1BMSVRfV09SS1NfV0lUSF9PVkVSV1JJVFRFTl9FWEVDIiwib3JpZ2luYWxFeGVjIiwiU1lNQk9MIiwiREVMRUdBVEVTX1RPX1NZTUJPTCIsIkRFTEVHQVRFU19UT19FWEVDIiwiZXhlY0NhbGxlZCIsIm5hdGl2ZVJlZ0V4cE1ldGhvZCIsIm5hdGl2ZU1ldGhvZCIsImFyZzIiLCJmb3JjZVN0cmluZ01ldGhvZCIsInN0cmluZ01ldGhvZCIsInJlZ2V4TWV0aG9kIiwiY2FsbGJhY2siLCJyZWFzb24iLCJJbnRlcm5hbCIsIk93blByb21pc2VDYXBhYmlsaXR5IiwiUHJvbWlzZVdyYXBwZXIiLCJuYXRpdmVUaGVuIiwiTmF0aXZlUHJvbWlzZSIsInJlZGVmaW5lQWxsIiwic2V0U3BlY2llcyIsImFuSW5zdGFuY2UiLCJpdGVyYXRlIiwiY2hlY2tDb3JyZWN0bmVzc09mSXRlcmF0aW9uIiwic3BlY2llc0NvbnN0cnVjdG9yIiwidGFzayIsIm1pY3JvdGFzayIsInByb21pc2VSZXNvbHZlIiwiaG9zdFJlcG9ydEVycm9ycyIsIm5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlIiwicGVyZm9ybSIsInVzZXJBZ2VudCIsIlBST01JU0UiLCJnZXRJbnRlcm5hbFByb21pc2VTdGF0ZSIsIlByb21pc2VDb25zdHJ1Y3RvciIsIiRmZXRjaCIsImZldGNoIiwidmVyc2lvbnMiLCJ2OCIsIm5ld1Byb21pc2VDYXBhYmlsaXR5IiwibmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5IiwiSVNfTk9ERSIsIkRJU1BBVENIX0VWRU5UIiwiY3JlYXRlRXZlbnQiLCJkaXNwYXRjaEV2ZW50IiwiZW1wdHkiLCJGYWtlUHJvbWlzZSIsIlByb21pc2VSZWplY3Rpb25FdmVudCIsIklOQ09SUkVDVF9JVEVSQVRJT04iLCJpdGVyYWJsZSIsImFsbCIsImlzVGhlbmFibGUiLCJub3RpZnkiLCJpc1JlamVjdCIsIm5vdGlmaWVkIiwiY2hhaW4iLCJyZWFjdGlvbnMiLCJvayIsImV4aXRlZCIsInJlYWN0aW9uIiwiaGFuZGxlciIsImZhaWwiLCJkb21haW4iLCJyZWplY3Rpb24iLCJvbkhhbmRsZVVuaGFuZGxlZCIsImVudGVyIiwiZXhpdCIsIm9uVW5oYW5kbGVkIiwiaW5pdEV2ZW50IiwiaXNVbmhhbmRsZWQiLCJlbWl0IiwicGFyZW50IiwidW53cmFwIiwiaW50ZXJuYWxSZWplY3QiLCJpbnRlcm5hbFJlc29sdmUiLCJ3cmFwcGVyIiwiZXhlY3V0b3IiLCJvbkZ1bGZpbGxlZCIsIm9uUmVqZWN0ZWQiLCJ3cmFwIiwiY2FwYWJpbGl0eSIsIngiLCIkcHJvbWlzZVJlc29sdmUiLCJyZW1haW5pbmciLCJhbHJlYWR5Q2FsbGVkIiwicmFjZSIsImRlZmF1bHRDb25zdHJ1Y3RvciIsInN1cHBvcnQiLCJzZWFyY2hQYXJhbXMiLCJibG9iIiwiQmxvYiIsImZvcm1EYXRhIiwiYXJyYXlCdWZmZXIiLCJ2aWV3Q2xhc3NlcyIsImlzQXJyYXlCdWZmZXJWaWV3IiwiQXJyYXlCdWZmZXIiLCJpc1ZpZXciLCJvYmoiLCJub3JtYWxpemVOYW1lIiwibm9ybWFsaXplVmFsdWUiLCJpdGVyYXRvckZvciIsIml0ZW1zIiwic2hpZnQiLCJIZWFkZXJzIiwiaGVhZGVycyIsImFwcGVuZCIsImhlYWRlciIsImNvbnN1bWVkIiwiYm9keSIsImJvZHlVc2VkIiwiZmlsZVJlYWRlclJlYWR5IiwicmVhZGVyIiwib25sb2FkIiwib25lcnJvciIsInJlYWRCbG9iQXNBcnJheUJ1ZmZlciIsIkZpbGVSZWFkZXIiLCJyZWFkQXNBcnJheUJ1ZmZlciIsImJ1ZmZlckNsb25lIiwiYnVmIiwidmlldyIsIlVpbnQ4QXJyYXkiLCJieXRlTGVuZ3RoIiwiYnVmZmVyIiwiQm9keSIsIl9pbml0Qm9keSIsIl9ib2R5SW5pdCIsIl9ib2R5VGV4dCIsIl9ib2R5QmxvYiIsIkZvcm1EYXRhIiwiX2JvZHlGb3JtRGF0YSIsIlVSTFNlYXJjaFBhcmFtcyIsIkRhdGFWaWV3IiwiX2JvZHlBcnJheUJ1ZmZlciIsInJlamVjdGVkIiwiRXJyb3IiLCJ0ZXh0IiwicmVhZEFzVGV4dCIsInJlYWRCbG9iQXNUZXh0IiwiY2hhcnMiLCJmcm9tQ2hhckNvZGUiLCJyZWFkQXJyYXlCdWZmZXJBc1RleHQiLCJkZWNvZGUiLCJqc29uIiwiSlNPTiIsInBhcnNlIiwib2xkVmFsdWUiLCJ0aGlzQXJnIiwiUmVxdWVzdCIsInVybCIsImNyZWRlbnRpYWxzIiwic2lnbmFsIiwidXBjYXNlZCIsInRvVXBwZXJDYXNlIiwibm9ybWFsaXplTWV0aG9kIiwicmVmZXJyZXIiLCJmb3JtIiwidHJpbSIsImJ5dGVzIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwicGFyc2VIZWFkZXJzIiwicmF3SGVhZGVycyIsImxpbmUiLCJwYXJ0cyIsIlJlc3BvbnNlIiwiYm9keUluaXQiLCJzdGF0dXMiLCJzdGF0dXNUZXh0IiwiY2xvbmUiLCJyZXNwb25zZSIsInJlZGlyZWN0U3RhdHVzZXMiLCJyZWRpcmVjdCIsIlJhbmdlRXJyb3IiLCJET01FeGNlcHRpb24iLCJtZXNzYWdlIiwic3RhY2siLCJpbml0IiwicmVxdWVzdCIsImFib3J0ZWQiLCJ4aHIiLCJYTUxIdHRwUmVxdWVzdCIsImFib3J0WGhyIiwiYWJvcnQiLCJnZXRBbGxSZXNwb25zZUhlYWRlcnMiLCJyZXNwb25zZVVSTCIsInJlc3BvbnNlVGV4dCIsIm9udGltZW91dCIsIm9uYWJvcnQiLCJ3aXRoQ3JlZGVudGlhbHMiLCJyZXNwb25zZVR5cGUiLCJzZXRSZXF1ZXN0SGVhZGVyIiwib25yZWFkeXN0YXRlY2hhbmdlIiwicmVhZHlTdGF0ZSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJzZW5kIiwicG9seWZpbGwiLCJVTlNDT1BBQkxFUyIsIndoaXRlc3BhY2UiLCJsdHJpbSIsInJ0cmltIiwic3RhcnQiLCJlbmQiLCJpbmhlcml0SWZSZXF1aXJlZCIsImdldEZsYWdzIiwiTmF0aXZlUmVnRXhwIiwiQ09SUkVDVF9ORVciLCJSZWdFeHBXcmFwcGVyIiwicGF0dGVybiIsInRoaXNJc1JlZ0V4cCIsInBhdHRlcm5Jc1JlZ0V4cCIsImZsYWdzQXJlVW5kZWZpbmVkIiwicHJveHkiLCJuYXRpdmVKb2luIiwiRVMzX1NUUklOR1MiLCJTTE9QUFlfTUVUSE9EIiwic2VwYXJhdG9yIiwiUmVzdWx0Iiwic3RvcHBlZCIsIkFTX0VOVFJJRVMiLCJJU19JVEVSQVRPUiIsIml0ZXJGbiIsInN0b3AiLCJmbHVzaCIsImhlYWQiLCJsYXN0IiwidG9nZ2xlIiwibm9kZSIsIm1hY3JvdGFzayIsIk11dGF0aW9uT2JzZXJ2ZXIiLCJXZWJLaXRNdXRhdGlvbk9ic2VydmVyIiwicXVldWVNaWNyb3Rhc2tEZXNjcmlwdG9yIiwicXVldWVNaWNyb3Rhc2siLCJjcmVhdGVUZXh0Tm9kZSIsIm9ic2VydmUiLCJjaGFyYWN0ZXJEYXRhIiwicHJvbWlzZUNhcGFiaWxpdHkiLCJjb25zb2xlIiwiZHVtbXkiLCJXcmFwcGVyIiwiTmV3VGFyZ2V0IiwiTmV3VGFyZ2V0UHJvdG90eXBlIiwiYXJyMiIsIml0ZXIiLCJydW50aW1lIiwiT3AiLCJoYXNPd24iLCIkU3ltYm9sIiwiaXRlcmF0b3JTeW1ib2wiLCJhc3luY0l0ZXJhdG9yU3ltYm9sIiwiYXN5bmNJdGVyYXRvciIsInRvU3RyaW5nVGFnU3ltYm9sIiwiaW5uZXJGbiIsIm91dGVyRm4iLCJ0cnlMb2NzTGlzdCIsInByb3RvR2VuZXJhdG9yIiwiR2VuZXJhdG9yIiwiZ2VuZXJhdG9yIiwiQ29udGV4dCIsIl9pbnZva2UiLCJHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0IiwiR2VuU3RhdGVFeGVjdXRpbmciLCJHZW5TdGF0ZUNvbXBsZXRlZCIsImRvbmVSZXN1bHQiLCJkZWxlZ2F0ZSIsImRlbGVnYXRlUmVzdWx0IiwibWF5YmVJbnZva2VEZWxlZ2F0ZSIsIkNvbnRpbnVlU2VudGluZWwiLCJzZW50IiwiX3NlbnQiLCJkaXNwYXRjaEV4Y2VwdGlvbiIsImFicnVwdCIsInJlY29yZCIsInRyeUNhdGNoIiwiR2VuU3RhdGVTdXNwZW5kZWRZaWVsZCIsIm1ha2VJbnZva2VNZXRob2QiLCJHZW5lcmF0b3JGdW5jdGlvbiIsIkdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlIiwiZ2V0UHJvdG8iLCJOYXRpdmVJdGVyYXRvclByb3RvdHlwZSIsIkdwIiwiZGVmaW5lSXRlcmF0b3JNZXRob2RzIiwiQXN5bmNJdGVyYXRvciIsInByZXZpb3VzUHJvbWlzZSIsImNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnIiwiaW52b2tlIiwiX19hd2FpdCIsInVud3JhcHBlZCIsInJlc3VsdE5hbWUiLCJuZXh0TG9jIiwicHVzaFRyeUVudHJ5IiwibG9jcyIsImVudHJ5IiwidHJ5TG9jIiwiY2F0Y2hMb2MiLCJmaW5hbGx5TG9jIiwiYWZ0ZXJMb2MiLCJ0cnlFbnRyaWVzIiwicmVzZXRUcnlFbnRyeSIsImNvbXBsZXRpb24iLCJyZXNldCIsImRpc3BsYXlOYW1lIiwiaXNHZW5lcmF0b3JGdW5jdGlvbiIsImdlbkZ1biIsImN0b3IiLCJtYXJrIiwiYXdyYXAiLCJhc3luYyIsInJldmVyc2UiLCJwb3AiLCJza2lwVGVtcFJlc2V0IiwicHJldiIsInJvb3RSZWNvcmQiLCJydmFsIiwiZXhjZXB0aW9uIiwiaGFuZGxlIiwibG9jIiwiY2F1Z2h0IiwiaGFzQ2F0Y2giLCJoYXNGaW5hbGx5IiwiZmluYWxseUVudHJ5IiwiY29tcGxldGUiLCJmaW5pc2giLCJ0aHJvd24iLCJkZWxlZ2F0ZVlpZWxkIiwicmVnZW5lcmF0b3JSdW50aW1lIiwiYWNjaWRlbnRhbFN0cmljdE1vZGUiLCJwYXJzZUludEltcGxlbWVudGF0aW9uIiwicGFyc2VJbnQiLCJ3aGl0ZXNwYWNlcyIsIm5hdGl2ZVBhcnNlSW50IiwiaGV4IiwicmFkaXgiLCJzZXRUaW1lb3V0RnVuYyIsIm5vb3AiLCJfc3RhdGUiLCJfaGFuZGxlZCIsIl92YWx1ZSIsIl9kZWZlcnJlZHMiLCJkb1Jlc29sdmUiLCJkZWZlcnJlZCIsIl9pbW1lZGlhdGVGbiIsImNiIiwicmV0IiwibmV3VmFsdWUiLCJmaW5hbGUiLCJfdW5oYW5kbGVkUmVqZWN0aW9uRm4iLCJIYW5kbGVyIiwiZXgiLCJwcm9tIiwid2FybiIsIiRmaWx0ZXIiLCIkaW5jbHVkZXMiLCJhZGRUb1Vuc2NvcGFibGVzIiwibmF0aXZlU29ydCIsInNvcnQiLCJGQUlMU19PTl9VTkRFRklORUQiLCJGQUlMU19PTl9OVUxMIiwiY29tcGFyZWZuIiwic3BsaWNlIiwiZGVsZXRlQ291bnQiLCJpbnNlcnRDb3VudCIsImFjdHVhbERlbGV0ZUNvdW50IiwidG8iLCJhY3R1YWxTdGFydCIsIkZ1bmN0aW9uUHJvdG90eXBlIiwiRnVuY3Rpb25Qcm90b3R5cGVUb1N0cmluZyIsIm5hbWVSRSIsIm5vdEFSZWdFeHAiLCJjb3JyZWN0SXNSZWdFeHBMb2dpYyIsInNlYXJjaFN0cmluZyIsIiR0cmltIiwiZm9yY2VkU3RyaW5nVHJpbU1ldGhvZCIsImdsb2JhbE5TIiwiVGltZW91dCIsImNsZWFyRm4iLCJfaWQiLCJfY2xlYXJGbiIsInNjb3BlIiwic2V0SW50ZXJ2YWwiLCJjbGVhckludGVydmFsIiwidGltZW91dCIsInVucmVmIiwicmVmIiwiZW5yb2xsIiwiaXRlbSIsIm1zZWNzIiwiX2lkbGVUaW1lb3V0SWQiLCJfaWRsZVRpbWVvdXQiLCJ1bmVucm9sbCIsIl91bnJlZkFjdGl2ZSIsImFjdGl2ZSIsIl9vblRpbWVvdXQiLCJyZWdpc3RlckltbWVkaWF0ZSIsIm5leHRIYW5kbGUiLCJ0YXNrc0J5SGFuZGxlIiwiY3VycmVudGx5UnVubmluZ0FUYXNrIiwiZG9jIiwiYXR0YWNoVG8iLCJydW5JZlByZXNlbnQiLCJwb3N0TWVzc2FnZUlzQXN5bmNocm9ub3VzIiwib2xkT25NZXNzYWdlIiwiY2FuVXNlUG9zdE1lc3NhZ2UiLCJtZXNzYWdlUHJlZml4Iiwib25HbG9iYWxNZXNzYWdlIiwiYXR0YWNoRXZlbnQiLCJpbnN0YWxsUG9zdE1lc3NhZ2VJbXBsZW1lbnRhdGlvbiIsImluc3RhbGxNZXNzYWdlQ2hhbm5lbEltcGxlbWVudGF0aW9uIiwiZG9jdW1lbnRFbGVtZW50Iiwic2NyaXB0IiwiaW5zdGFsbFJlYWR5U3RhdGVDaGFuZ2VJbXBsZW1lbnRhdGlvbiIsImNhY2hlZFNldFRpbWVvdXQiLCJjYWNoZWRDbGVhclRpbWVvdXQiLCJkZWZhdWx0U2V0VGltb3V0IiwiZGVmYXVsdENsZWFyVGltZW91dCIsInJ1blRpbWVvdXQiLCJmdW4iLCJjdXJyZW50UXVldWUiLCJkcmFpbmluZyIsInF1ZXVlSW5kZXgiLCJjbGVhblVwTmV4dFRpY2siLCJkcmFpblF1ZXVlIiwibWFya2VyIiwicnVuQ2xlYXJUaW1lb3V0IiwiSXRlbSIsInRpdGxlIiwiYnJvd3NlciIsImVudiIsImFyZ3YiLCJvbiIsImFkZExpc3RlbmVyIiwib25jZSIsIm9mZiIsInJlbW92ZUxpc3RlbmVyIiwicmVtb3ZlQWxsTGlzdGVuZXJzIiwicHJlcGVuZExpc3RlbmVyIiwicHJlcGVuZE9uY2VMaXN0ZW5lciIsImxpc3RlbmVycyIsImJpbmRpbmciLCJjd2QiLCJjaGRpciIsImRpciIsInVtYXNrIiwiZXBhcyIsInNldElucHV0QWN0aXZlRGVzY2VuZGFudCIsInNldEF0dHJpYnV0ZSIsImdvVG9BdXRvc3VnZ2VzdEl0ZW0iLCJzZWFyY2hUZXJtIiwiZGV0YWlsIiwiQ3VzdG9tRXZlbnQiLCJ0cmlnZ2VyQW5hbHl0aWNzIiwiZ3RhZyIsImFjdGlvbiIsImV2ZW50X2NhdGVnb3J5IiwiZXZlbnRfbGFiZWwiLCJ0cmFuc3BvcnRfdHlwZSIsInRyaWdnZXJBdXRvc3VnZ2VzdEV2ZW50IiwiaHJlZiIsInNlbGVjdEl0ZW0iLCJlbGVtZW50IiwiZGF0YXNldCIsInNlbGVjdEF1dG9zdWdnZXN0SXRlbSIsImlubmVyVGV4dCIsImNsb3Nlc3QiLCJzdWJtaXQiLCJzdWJtaXRTZWFyY2hGb3JtIiwiZ2V0SnNvblF1ZXJ5IiwiYnVpbGRTZWFyY2hRdWVyeSIsInNlYXJjaFRleHQiLCJwbGFjZWhvbGRlciIsInF1ZXJ5IiwiZXNTZWFyY2giLCJmZXRjaENvbmZpZyIsImFkZFNlYXJjaFRlcm1IZWFkZXIiLCJlbmRwb2ludFVybCIsImVwRGF0YUZpbHRlciIsInVwZGF0ZUF1dG9zdWdnZXN0Qm94IiwiaXRlbVN0cmluZyIsInJlc3VsdHNDb250YWluZXIiLCJxdWVyeVNlbGVjdG9yIiwic3VnZ2VzdExpc3QiLCJmaXJzdENoaWxkIiwicmVzdWx0c0xpbWl0IiwiZXNjYXBlZFRleHQiLCJzZWFyY2hQYXJ0cyIsInJlc3VsdHNUZXh0Iiwid29yZCIsInJlZ2V4IiwiaW5uZXJIVE1MIiwiYXV0b3N1Z2dlc3RJdGVtcyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJwcmV2ZW50RGVmYXVsdCIsInNyY0VsZW1lbnQiLCJoaWRlQXV0b3N1Z2dlc3RCb3giLCJsaXN0cyIsImNvbnRhaW5lcnMiLCJsaXN0IiwiY29udGFpbmVyIiwiY2hlY2tGb3JPcmRlcmVkUG9zdHMiLCJoaXRzIiwidG9JbnNlcnQiLCJsb3dlckNhc2VTZWFyY2hUZXJtIiwiZmlsdGVyZWRIaXRzIiwiaGl0IiwicmV0YWluIiwiX3NvdXJjZSIsInRlcm1zIiwiY3VycmVudFRlcm0iLCJ0ZXJtX29yZGVyIiwib3JkZXJlZEluc2VydHMiLCJpbnNlcnRJdGVtIiwiZXBJbnB1dE5vZGVzIiwic2VsZWN0b3IiLCJlcEF1dG9zdWdnZXN0IiwiYWRkIiwiYXV0b3N1Z2dlc3RMaXN0IiwiZXBJbnB1dHMiLCJlcENvbnRhaW5lciIsImluc2VydEFkamFjZW50RWxlbWVudCIsImNsb25lZENvbnRhaW5lciIsImNsb25lTm9kZSIsIm9mZnNldEhlaWdodCIsImdldENvbXB1dGVkU3R5bGUiLCJjdXJyZW50SW5kZXgiLCJmb3JtYXRTZWFyY2hSZXN1bHRzIiwicG9zdF90aXRsZSIsInBlcm1hbGluayIsImtleUNvZGVzIiwiZmV0Y2hSZXN1bHRzIiwicXVlcnlKU09OIiwiX3NoYXJkcyIsInN1Y2Nlc3NmdWwiLCJmb3JtYXR0ZWRSZXN1bHRzIiwiaGFuZGxlS2V5dXAiLCJrZXlDb2RlIiwiaGF2ZU9wdGlvbnMiLCJ0b2dnbGVJbnB1dEFyaWEiLCJjaGlsZHJlbiIsImRlU2VsZWN0UmVzdWx0cyIsInJlbW92ZSIsImN1cnJlbnQiLCJzZWxlY3ROZXh0UmVzdWx0IiwiaGFuZGxlVXBEb3duIiwiZGVib3VuY2VGZXRjaFJlc3VsdHMiLCJlcGFzQVBJIiwiJGZpbmRJbmRleCIsIlNLSVBTX0hPTEVTIiwiY2FsbFJlZ0V4cEV4ZWMiLCJhcnJheVB1c2giLCJTVVBQT1JUU19ZIiwiU1BMSVQiLCJuYXRpdmVTcGxpdCIsImludGVybmFsU3BsaXQiLCJsaW1pdCIsImxpbSIsImxhc3RMZW5ndGgiLCJvdXRwdXQiLCJsYXN0TGFzdEluZGV4Iiwic2VwYXJhdG9yQ29weSIsInNwbGl0dGVyIiwidW5pY29kZU1hdGNoaW5nIiwicSIsInoiXSwibWFwcGluZ3MiOiJhQUNFLElBQUlBLEVBQW1CLEdBR3ZCLFNBQVNDLEVBQW9CQyxHQUc1QixHQUFHRixFQUFpQkUsR0FDbkIsT0FBT0YsRUFBaUJFLEdBQVVDLFFBR25DLElBQUlDLEVBQVNKLEVBQWlCRSxHQUFZLENBQ3pDRyxFQUFHSCxFQUNISSxHQUFHLEVBQ0hILFFBQVMsSUFVVixPQU5BSSxFQUFRTCxHQUFVTSxLQUFLSixFQUFPRCxRQUFTQyxFQUFRQSxFQUFPRCxRQUFTRixHQUcvREcsRUFBT0UsR0FB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MGdDLEVBQUksRUFDSnBxQixFQUFJLEdBQ0RvcUIsRUFBSXB3QixFQUFFN0osUUFBUSxDQUNuQis1QixFQUFTdHhCLFVBQVk0d0IsRUFBYVksRUFBSSxFQUN0QyxJQUNJOTFCLEVBREErMUIsRUFBSWYsRUFBZVksRUFBVVYsRUFBYXh2QixFQUFJQSxFQUFFck0sTUFBTXk4QixJQUUxRCxHQUNRLE9BQU5DLElBQ0MvMUIsRUFBSXpHLEVBQUlzSCxFQUFTKzBCLEVBQVN0eEIsV0FBYTR3QixFQUFhLEVBQUlZLElBQUtwd0IsRUFBRTdKLFdBQWF6RyxFQUU3RTBnQyxFQUFJam1CLEVBQW1CbkssRUFBR293QixFQUFHRCxPQUN4QixDQUVMLEdBREFucUIsRUFBRTNQLEtBQUsySixFQUFFck0sTUFBTWpFLEVBQUcwZ0MsSUFDZHBxQixFQUFFN1AsU0FBVzA1QixFQUFLLE9BQU83cEIsRUFDN0IsSUFBSyxJQUFJcFksRUFBSSxFQUFHQSxHQUFLeWlDLEVBQUVsNkIsT0FBUyxFQUFHdkksSUFFakMsR0FEQW9ZLEVBQUUzUCxLQUFLZzZCLEVBQUV6aUMsSUFDTG9ZLEVBQUU3UCxTQUFXMDVCLEVBQUssT0FBTzdwQixFQUUvQm9xQixFQUFJMWdDLEVBQUk0SyxHQUlaLE9BREEwTCxFQUFFM1AsS0FBSzJKLEVBQUVyTSxNQUFNakUsSUFDUnNXLE9BR1R3cEIiLCJmaWxlIjoianMvYXV0b3N1Z2dlc3Qtc2NyaXB0Lm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAzNDkpO1xuIiwidmFyIE8gPSAnb2JqZWN0JztcbnZhciBjaGVjayA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgJiYgaXQuTWF0aCA9PSBNYXRoICYmIGl0O1xufTtcblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzg2I2lzc3VlY29tbWVudC0xMTU3NTkwMjhcbm1vZHVsZS5leHBvcnRzID1cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gIGNoZWNrKHR5cGVvZiBnbG9iYWxUaGlzID09IE8gJiYgZ2xvYmFsVGhpcykgfHxcbiAgY2hlY2sodHlwZW9mIHdpbmRvdyA9PSBPICYmIHdpbmRvdykgfHxcbiAgY2hlY2sodHlwZW9mIHNlbGYgPT0gTyAmJiBzZWxmKSB8fFxuICBjaGVjayh0eXBlb2YgZ2xvYmFsID09IE8gJiYgZ2xvYmFsKSB8fFxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcbiAgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgc2hhcmVkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZCcpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy91aWQnKTtcbnZhciBOQVRJVkVfU1lNQk9MID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25hdGl2ZS1zeW1ib2wnKTtcblxudmFyIFN5bWJvbCA9IGdsb2JhbC5TeW1ib2w7XG52YXIgc3RvcmUgPSBzaGFyZWQoJ3drcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIHJldHVybiBzdG9yZVtuYW1lXSB8fCAoc3RvcmVbbmFtZV0gPSBOQVRJVkVfU1lNQk9MICYmIFN5bWJvbFtuYW1lXVxuICAgIHx8IChOQVRJVkVfU1lNQk9MID8gU3ltYm9sIDogdWlkKSgnU3ltYm9sLicgKyBuYW1lKSk7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZXhlYykge1xuICB0cnkge1xuICAgIHJldHVybiAhIWV4ZWMoKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0eXBlb2YgaXQgPT09ICdvYmplY3QnID8gaXQgIT09IG51bGwgOiB0eXBlb2YgaXQgPT09ICdmdW5jdGlvbic7XG59O1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoIWlzT2JqZWN0KGl0KSkge1xuICAgIHRocm93IFR5cGVFcnJvcihTdHJpbmcoaXQpICsgJyBpcyBub3QgYW4gb2JqZWN0Jyk7XG4gIH0gcmV0dXJuIGl0O1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKS5mO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGlkZScpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lJyk7XG52YXIgc2V0R2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC1nbG9iYWwnKTtcbnZhciBjb3B5Q29uc3RydWN0b3JQcm9wZXJ0aWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NvcHktY29uc3RydWN0b3ItcHJvcGVydGllcycpO1xudmFyIGlzRm9yY2VkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWZvcmNlZCcpO1xuXG4vKlxuICBvcHRpb25zLnRhcmdldCAgICAgIC0gbmFtZSBvZiB0aGUgdGFyZ2V0IG9iamVjdFxuICBvcHRpb25zLmdsb2JhbCAgICAgIC0gdGFyZ2V0IGlzIHRoZSBnbG9iYWwgb2JqZWN0XG4gIG9wdGlvbnMuc3RhdCAgICAgICAgLSBleHBvcnQgYXMgc3RhdGljIG1ldGhvZHMgb2YgdGFyZ2V0XG4gIG9wdGlvbnMucHJvdG8gICAgICAgLSBleHBvcnQgYXMgcHJvdG90eXBlIG1ldGhvZHMgb2YgdGFyZ2V0XG4gIG9wdGlvbnMucmVhbCAgICAgICAgLSByZWFsIHByb3RvdHlwZSBtZXRob2QgZm9yIHRoZSBgcHVyZWAgdmVyc2lvblxuICBvcHRpb25zLmZvcmNlZCAgICAgIC0gZXhwb3J0IGV2ZW4gaWYgdGhlIG5hdGl2ZSBmZWF0dXJlIGlzIGF2YWlsYWJsZVxuICBvcHRpb25zLmJpbmQgICAgICAgIC0gYmluZCBtZXRob2RzIHRvIHRoZSB0YXJnZXQsIHJlcXVpcmVkIGZvciB0aGUgYHB1cmVgIHZlcnNpb25cbiAgb3B0aW9ucy53cmFwICAgICAgICAtIHdyYXAgY29uc3RydWN0b3JzIHRvIHByZXZlbnRpbmcgZ2xvYmFsIHBvbGx1dGlvbiwgcmVxdWlyZWQgZm9yIHRoZSBgcHVyZWAgdmVyc2lvblxuICBvcHRpb25zLnVuc2FmZSAgICAgIC0gdXNlIHRoZSBzaW1wbGUgYXNzaWdubWVudCBvZiBwcm9wZXJ0eSBpbnN0ZWFkIG9mIGRlbGV0ZSArIGRlZmluZVByb3BlcnR5XG4gIG9wdGlvbnMuc2hhbSAgICAgICAgLSBhZGQgYSBmbGFnIHRvIG5vdCBjb21wbGV0ZWx5IGZ1bGwgcG9seWZpbGxzXG4gIG9wdGlvbnMuZW51bWVyYWJsZSAgLSBleHBvcnQgYXMgZW51bWVyYWJsZSBwcm9wZXJ0eVxuICBvcHRpb25zLm5vVGFyZ2V0R2V0IC0gcHJldmVudCBjYWxsaW5nIGEgZ2V0dGVyIG9uIHRhcmdldFxuKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9wdGlvbnMsIHNvdXJjZSkge1xuICB2YXIgVEFSR0VUID0gb3B0aW9ucy50YXJnZXQ7XG4gIHZhciBHTE9CQUwgPSBvcHRpb25zLmdsb2JhbDtcbiAgdmFyIFNUQVRJQyA9IG9wdGlvbnMuc3RhdDtcbiAgdmFyIEZPUkNFRCwgdGFyZ2V0LCBrZXksIHRhcmdldFByb3BlcnR5LCBzb3VyY2VQcm9wZXJ0eSwgZGVzY3JpcHRvcjtcbiAgaWYgKEdMT0JBTCkge1xuICAgIHRhcmdldCA9IGdsb2JhbDtcbiAgfSBlbHNlIGlmIChTVEFUSUMpIHtcbiAgICB0YXJnZXQgPSBnbG9iYWxbVEFSR0VUXSB8fCBzZXRHbG9iYWwoVEFSR0VULCB7fSk7XG4gIH0gZWxzZSB7XG4gICAgdGFyZ2V0ID0gKGdsb2JhbFtUQVJHRVRdIHx8IHt9KS5wcm90b3R5cGU7XG4gIH1cbiAgaWYgKHRhcmdldCkgZm9yIChrZXkgaW4gc291cmNlKSB7XG4gICAgc291cmNlUHJvcGVydHkgPSBzb3VyY2Vba2V5XTtcbiAgICBpZiAob3B0aW9ucy5ub1RhcmdldEdldCkge1xuICAgICAgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSk7XG4gICAgICB0YXJnZXRQcm9wZXJ0eSA9IGRlc2NyaXB0b3IgJiYgZGVzY3JpcHRvci52YWx1ZTtcbiAgICB9IGVsc2UgdGFyZ2V0UHJvcGVydHkgPSB0YXJnZXRba2V5XTtcbiAgICBGT1JDRUQgPSBpc0ZvcmNlZChHTE9CQUwgPyBrZXkgOiBUQVJHRVQgKyAoU1RBVElDID8gJy4nIDogJyMnKSArIGtleSwgb3B0aW9ucy5mb3JjZWQpO1xuICAgIC8vIGNvbnRhaW5lZCBpbiB0YXJnZXRcbiAgICBpZiAoIUZPUkNFRCAmJiB0YXJnZXRQcm9wZXJ0eSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAodHlwZW9mIHNvdXJjZVByb3BlcnR5ID09PSB0eXBlb2YgdGFyZ2V0UHJvcGVydHkpIGNvbnRpbnVlO1xuICAgICAgY29weUNvbnN0cnVjdG9yUHJvcGVydGllcyhzb3VyY2VQcm9wZXJ0eSwgdGFyZ2V0UHJvcGVydHkpO1xuICAgIH1cbiAgICAvLyBhZGQgYSBmbGFnIHRvIG5vdCBjb21wbGV0ZWx5IGZ1bGwgcG9seWZpbGxzXG4gICAgaWYgKG9wdGlvbnMuc2hhbSB8fCAodGFyZ2V0UHJvcGVydHkgJiYgdGFyZ2V0UHJvcGVydHkuc2hhbSkpIHtcbiAgICAgIGhpZGUoc291cmNlUHJvcGVydHksICdzaGFtJywgdHJ1ZSk7XG4gICAgfVxuICAgIC8vIGV4dGVuZCBnbG9iYWxcbiAgICByZWRlZmluZSh0YXJnZXQsIGtleSwgc291cmNlUHJvcGVydHksIG9wdGlvbnMpO1xuICB9XG59O1xuIiwidmFyIGhhc093blByb3BlcnR5ID0ge30uaGFzT3duUHJvcGVydHk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBrZXkpIHtcbiAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwoaXQsIGtleSk7XG59O1xuIiwidmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xudmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IERFU0NSSVBUT1JTID8gZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICByZXR1cm4gZGVmaW5lUHJvcGVydHlNb2R1bGUuZihvYmplY3QsIGtleSwgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDEsIHZhbHVlKSk7XG59IDogZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICBvYmplY3Rba2V5XSA9IHZhbHVlO1xuICByZXR1cm4gb2JqZWN0O1xufTtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG4vLyBUaGFuaydzIElFOCBmb3IgaGlzIGZ1bm55IGRlZmluZVByb3BlcnR5XG5tb2R1bGUuZXhwb3J0cyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sICdhJywgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH0gfSkuYSAhPSA3O1xufSk7XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBJRThfRE9NX0RFRklORSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pZTgtZG9tLWRlZmluZScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXByaW1pdGl2ZScpO1xuXG52YXIgbmF0aXZlRGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG5cbi8vIGBPYmplY3QuZGVmaW5lUHJvcGVydHlgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LmRlZmluZXByb3BlcnR5XG5leHBvcnRzLmYgPSBERVNDUklQVE9SUyA/IG5hdGl2ZURlZmluZVByb3BlcnR5IDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcykge1xuICBhbk9iamVjdChPKTtcbiAgUCA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICBhbk9iamVjdChBdHRyaWJ1dGVzKTtcbiAgaWYgKElFOF9ET01fREVGSU5FKSB0cnkge1xuICAgIHJldHVybiBuYXRpdmVEZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuICBpZiAoJ2dldCcgaW4gQXR0cmlidXRlcyB8fCAnc2V0JyBpbiBBdHRyaWJ1dGVzKSB0aHJvdyBUeXBlRXJyb3IoJ0FjY2Vzc29ycyBub3Qgc3VwcG9ydGVkJyk7XG4gIGlmICgndmFsdWUnIGluIEF0dHJpYnV0ZXMpIE9bUF0gPSBBdHRyaWJ1dGVzLnZhbHVlO1xuICByZXR1cm4gTztcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hpZGUnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgc2V0R2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC1nbG9iYWwnKTtcbnZhciBuYXRpdmVGdW5jdGlvblRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXRvLXN0cmluZycpO1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcblxudmFyIGdldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldDtcbnZhciBlbmZvcmNlSW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZW5mb3JjZTtcbnZhciBURU1QTEFURSA9IFN0cmluZyhuYXRpdmVGdW5jdGlvblRvU3RyaW5nKS5zcGxpdCgndG9TdHJpbmcnKTtcblxuc2hhcmVkKCdpbnNwZWN0U291cmNlJywgZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBuYXRpdmVGdW5jdGlvblRvU3RyaW5nLmNhbGwoaXQpO1xufSk7XG5cbihtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChPLCBrZXksIHZhbHVlLCBvcHRpb25zKSB7XG4gIHZhciB1bnNhZmUgPSBvcHRpb25zID8gISFvcHRpb25zLnVuc2FmZSA6IGZhbHNlO1xuICB2YXIgc2ltcGxlID0gb3B0aW9ucyA/ICEhb3B0aW9ucy5lbnVtZXJhYmxlIDogZmFsc2U7XG4gIHZhciBub1RhcmdldEdldCA9IG9wdGlvbnMgPyAhIW9wdGlvbnMubm9UYXJnZXRHZXQgOiBmYWxzZTtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnZnVuY3Rpb24nKSB7XG4gICAgaWYgKHR5cGVvZiBrZXkgPT0gJ3N0cmluZycgJiYgIWhhcyh2YWx1ZSwgJ25hbWUnKSkgaGlkZSh2YWx1ZSwgJ25hbWUnLCBrZXkpO1xuICAgIGVuZm9yY2VJbnRlcm5hbFN0YXRlKHZhbHVlKS5zb3VyY2UgPSBURU1QTEFURS5qb2luKHR5cGVvZiBrZXkgPT0gJ3N0cmluZycgPyBrZXkgOiAnJyk7XG4gIH1cbiAgaWYgKE8gPT09IGdsb2JhbCkge1xuICAgIGlmIChzaW1wbGUpIE9ba2V5XSA9IHZhbHVlO1xuICAgIGVsc2Ugc2V0R2xvYmFsKGtleSwgdmFsdWUpO1xuICAgIHJldHVybjtcbiAgfSBlbHNlIGlmICghdW5zYWZlKSB7XG4gICAgZGVsZXRlIE9ba2V5XTtcbiAgfSBlbHNlIGlmICghbm9UYXJnZXRHZXQgJiYgT1trZXldKSB7XG4gICAgc2ltcGxlID0gdHJ1ZTtcbiAgfVxuICBpZiAoc2ltcGxlKSBPW2tleV0gPSB2YWx1ZTtcbiAgZWxzZSBoaWRlKE8sIGtleSwgdmFsdWUpO1xuLy8gYWRkIGZha2UgRnVuY3Rpb24jdG9TdHJpbmcgZm9yIGNvcnJlY3Qgd29yayB3cmFwcGVkIG1ldGhvZHMgLyBjb25zdHJ1Y3RvcnMgd2l0aCBtZXRob2RzIGxpa2UgTG9EYXNoIGlzTmF0aXZlXG59KShGdW5jdGlvbi5wcm90b3R5cGUsICd0b1N0cmluZycsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICByZXR1cm4gdHlwZW9mIHRoaXMgPT0gJ2Z1bmN0aW9uJyAmJiBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpLnNvdXJjZSB8fCBuYXRpdmVGdW5jdGlvblRvU3RyaW5nLmNhbGwodGhpcyk7XG59KTtcbiIsInZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChpdCkuc2xpY2UoOCwgLTEpO1xufTtcbiIsInZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW50ZWdlcicpO1xuXG52YXIgbWluID0gTWF0aC5taW47XG5cbi8vIGBUb0xlbmd0aGAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy10b2xlbmd0aFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgcmV0dXJuIGFyZ3VtZW50ID4gMCA/IG1pbih0b0ludGVnZXIoYXJndW1lbnQpLCAweDFGRkZGRkZGRkZGRkZGKSA6IDA7IC8vIDIgKiogNTMgLSAxID09IDkwMDcxOTkyNTQ3NDA5OTFcbn07XG4iLCJ2YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcblxuLy8gYFRvT2JqZWN0YCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXRvb2JqZWN0XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICByZXR1cm4gT2JqZWN0KHJlcXVpcmVPYmplY3RDb2VyY2libGUoYXJndW1lbnQpKTtcbn07XG4iLCIvKipcbiAqIFNpbXBsZSB0aHJvdHRsaW5nIGZ1bmN0aW9uIGZvciB3YWl0aW5nIGEgc2V0IGFtb3VudCBvZiB0aW1lIGFmdGVyIHRoZSBsYXN0IGtleXByZXNzXG4gKiBTbyB3ZSBkb24ndCBvdmVybG9hZCB0aGUgc2VydmVyIHdpdGggdG9vIG1hbnkgcmVxdWVzdHMgYXQgb25jZVxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIC0gZnVuY3Rpb24gdG8gYmUgZGVib3VuY2VkXG4gKiBAcGFyYW0ge251bWJlcn0gZGVsYXkgLSBpbnRlZ2VyXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IC0gbmV3IGZ1bmN0aW9uLCB3aXRoIHRoZSBwcm92aWRlZCBmdW5jdGlvbiB3cmFwcGVkIGluIGEgdGltZW91dFxuICovXG5leHBvcnQgY29uc3QgZGVib3VuY2UgPSAoZm4sIGRlbGF5KSA9PiB7XG5cdGxldCB0aW1lciA9IG51bGw7XG5cblx0Ly8gZG9uJ3QgdXNlIGEgZmF0IGFycm93IGluIG9yZGVyIHRvIHByZXNlcnZlIHRoZSBwcm9wZXIgY29udGV4dFxuXHRyZXR1cm4gZnVuY3Rpb24gZGVib3VuY2VkRnVuY3Rpb24oLi4uYXJncykge1xuXHRcdGNvbnN0IGNvbnRleHQgPSB0aGlzO1xuXHRcdHdpbmRvdy5jbGVhclRpbWVvdXQodGltZXIpO1xuXG5cdFx0dGltZXIgPSB3aW5kb3cuc2V0VGltZW91dCgoKSA9PiB7XG5cdFx0XHRmbi5hcHBseShjb250ZXh0LCBhcmdzKTtcblx0XHR9LCBkZWxheSk7XG5cdH07XG59O1xuXG4vKipcbiAqIEhlbHBlciBmdW5jdGlvbiB0byBlc2NhcGUgaW5wdXQgdG8gYmUgdHJlYXRlZCBhcyBhIGxpdGVyYWwgc3RyaW5nIHdpdGggYSBSZWdFeFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgLSBzdHJpbmcgdG8gYmUgZXNjYXBlZFxuICogQHJldHVybnMge3N0cmluZ30gZXNjYXBlZCBzdHJpbmdcbiAqL1xuZXhwb3J0IGNvbnN0IGVzY2FwZVJlZ0V4cCA9IChzdHJpbmcpID0+IHN0cmluZy5yZXBsYWNlKC9bLiorP14ke30oKXxbXFxdXFxcXF0vZywgJ1xcXFwkJicpO1xuXG4vKipcbiAqIEhlbHBlciBmdW5jdGlvbiB0byBlc2NhcGUgaW5wdXQgdG8gYmUgdHJlYXRlZCBhcyBhIGxpdGVyYWwgc3RyaW5nIHdpdGggYSBSZWdFeFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgLSBzdHJpbmcgdG8gcmVwbGFjZVxuICogQHBhcmFtIHtzdHJpbmd9IHRlcm0gLSB0ZWFybSB0byBzZWFyY2ggZm9yXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVwbGFjZW1lbnQgIHJlcGxhY2UgdmFsdWUgdG8gdXNlXG4gKiBAcmV0dXJucyB7c3RyaW5nfSByZXBsYWNlZCBzdHJpbmdcbiAqL1xuZXhwb3J0IGNvbnN0IHJlcGxhY2VHbG9iYWxseSA9IChzdHJpbmcsIHRlcm0sIHJlcGxhY2VtZW50KSA9PiB7XG5cdHJldHVybiBzdHJpbmcucmVwbGFjZShuZXcgUmVnRXhwKGVzY2FwZVJlZ0V4cCh0ZXJtKSwgJ2cnKSwgcmVwbGFjZW1lbnQpO1xufTtcblxuLyoqXG4gKiBFc2NhcGVzIGRvdWJsZSBxdW90ZXMgZm9yIHNwZWNpZmljIGRhdGEtYXR0clxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgVGhlIHByb3ZpZGVkIHN0cmluZyBjb250YWluaW5nIGRvdWJsZSBxdW90ZXNcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBlc2NhcGVkIHN0cmluZ1xuICovXG5leHBvcnQgY29uc3QgZXNjYXBlRG91YmxlUXVvdGVzID0gKHN0cikgPT4gc3RyLnJlcGxhY2UoL1xcXFwoW1xcc1xcU10pfChcIikvZywgJyZxdW90OycpO1xuXG4vKipcbiAqIEZpbmRzIHBhcmVudCBub2RlIHdpdGggdGhlIHByb3ZpZGVkIGNsYXNzIHBhcmFtXG4gKlxuICogQHBhcmFtIHsqfSBlbCAtIG5vZGUgdG8gc2VhcmNoIGZvciBpdHMgYW5jZXN0b3JcbiAqIEBwYXJhbSB7Kn0gY2xhc3NOYW1lIC0gY2xhc3MgYXR0cmlidXRlIHRvIHNlYXJjaCBmb3JcbiAqIEByZXR1cm5zIHtFbGVtZW50fSAtIGFuY2VzdG9yIGVsZW1lbnQgb2YgcHJvdmlkZWQgZWxcbiAqL1xuZXhwb3J0IGNvbnN0IGZpbmRBbmNlc3RvckJ5Q2xhc3MgPSAoZWwsIGNsYXNzTmFtZSkgPT4ge1xuXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcblx0d2hpbGUgKCAoIGVsID0gZWwucGFyZW50RWxlbWVudCApICYmICFlbC5jbGFzc0xpc3QuY29udGFpbnMoIGNsYXNzTmFtZSApICk7XG5cdHJldHVybiBlbDtcbn07XG5cbi8qKlxuICogQXJyYXkgcGx1Y2tcbiAqXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSAtIGFycmF5IHRvIHNlYXJjaFxuICogQHBhcmFtIHtzdHJpbmd9IGtleSAtIGFycmF5IHRvIHNlYXJjaFxuICogQHJldHVybnMge0FycmF5fSAtIG5ldyBhcnJheVxuICovXG5leHBvcnQgY29uc3QgcGx1Y2sgPSAoYXJyYXksIGtleSkgPT4ge1xuXHRyZXR1cm4gYXJyYXkubWFwKChvKSA9PiBvW2tleV0pO1xufTtcblxuLyoqXG4gKiBGb3JtYXRzIG9iamVjdCBsaWtlIGEgdXJsIHF1ZXJ5IHN0cmluZywgd2hpY2ggaXMgaG93IGFqYXggbWV0aG9kc1xuICogaW4gUEhQIGV4cGVjdCB0byByZWNlaXZlIHRoZSBkYXRhLCBlLmcuIGFjdGlvbl93cF9hamF4X2VwX3NhdmVfZmVhdHVyZVxuICogZnJvbSBkYXNoYm9hcmQucGhwXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IG9iaiAtIGpzIG9iamVjdFxuICogQHJldHVybnMge3N0cmluZ30gdXJsZW5jb2RlZCBzdHJpbmcgZm9yIFBPU1QgYWpheCByZXF1ZXN0XG4gKi9cbmV4cG9ydCBjb25zdCBmb3JtYXRQb3N0Qm9keSA9IChvYmopID0+IHtcblx0cmV0dXJuIE9iamVjdC5rZXlzKG9iailcblx0XHQubWFwKChrZXkpID0+IGAke2VuY29kZVVSSUNvbXBvbmVudChrZXkpfT0ke2VuY29kZVVSSUNvbXBvbmVudChvYmpba2V5XSl9YClcblx0XHQuam9pbignJicpXG5cdFx0LnJlcGxhY2UoLyUyMC9nLCAnKycpO1xufTtcblxuLyoqXG4gKiBIZWxwZXIgbWV0aG9kIHRvIHdyYXAgc2hvdy9oaWRlIGVsZW1lbnRzLiBOb3QgZXhwb3J0ZWQuXG4gKlxuICogQHBhcmFtIHtBcnJheX0gZWxzIC0gY291bGQgcG9zc2libHkgYmUgYSBzaW5nbGUgbm9kZSwgb3IgYW4gYXJyYXkgb2Ygbm9kZXNcbiAqIEBwYXJhbSB7c3RyaW5nfSBkaXNwbGF5IC0gY3NzIGRpc3BsYXkgcHJvcGVydHkgdG8gc2V0XG4gKi9cbmNvbnN0IHNob3dPckhpZGVOb2RlcyA9IChlbHMsIGRpc3BsYXkpID0+IHtcblx0bGV0IG5vZGVzID0gW107XG5cblx0Ly8gY29udmVydCBub2RlbGlzdCB0byBhcnJheVxuXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcHJvdG90eXBlLWJ1aWx0aW5zXG5cdGlmIChOb2RlTGlzdC5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihlbHMpKSB7XG5cdFx0bm9kZXMgPSBBcnJheS5mcm9tKGVscyk7XG5cdH1cblxuXHQvLyBpZiBub3QgY29udmVydGVkLCB0aGVuIGl0IHdhcyBhIHNpbmdsZSBub2RlLFxuXHQvLyBzbyBjcmVhdGUgYW4gYXJyYXlcblx0aWYgKCFub2Rlcy5sZW5ndGgpIHtcblx0XHRpZiAoQXJyYXkuaXNBcnJheShlbHMpKSB7XG5cdFx0XHRub2RlcyA9IFsuLi5lbHMsIC4uLm5vZGVzXTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0bm9kZXMucHVzaChlbHMpO1xuXHRcdH1cblx0fVxuXG5cdG5vZGVzLmZvckVhY2goKGVsKSA9PiB7XG5cdFx0ZWwuc3R5bGUuZGlzcGxheSA9IGRpc3BsYXk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cblx0fSk7XG59O1xuXG4vKipcbiAqIERlY29yYXRlZCBoZWxwZXIgZnVuY3Rpb24gdG8gc2hvdyBub2RlL05vZGVMaXN0L2FycmF5IG9mIG5vZGVzXG4gKlxuICogQHBhcmFtIHtBcnJheX0gZWxzIC0gTm9kZWxpc3QvYXJyYXkgb2YgTm9kZXMgdG8gc2hvd1xuICogQHJldHVybnMge0Z1bmN0aW9ufSAtIHNob3dPckhpZGVOb2Rlc1xuICovXG5leHBvcnQgY29uc3Qgc2hvd0VsZW1lbnRzID0gKGVscykgPT4gc2hvd09ySGlkZU5vZGVzKGVscywgJ2lubGluZS1ibG9jaycpO1xuXG4vKipcbiAqIERlY29yYXRlZCBoZWxwZXIgZnVuY3Rpb24gdG8gaGlkZSBub2RlL05vZGVMaXN0L2FycmF5IG9mIG5vZGVzXG4gKlxuICogQHBhcmFtIHtBcnJheX0gZWxzIC0gTm9kZWxpc3QvYXJyYXkgb2YgTm9kZXMgdG8gc2hvd1xuICogQHJldHVybnMge0Z1bmN0aW9ufSAtIHNob3dPckhpZGVOb2Rlc1xuICovXG5leHBvcnQgY29uc3QgaGlkZUVsZW1lbnRzID0gKGVscykgPT4gc2hvd09ySGlkZU5vZGVzKGVscywgJ25vbmUnKTtcbiIsIi8vIGBSZXF1aXJlT2JqZWN0Q29lcmNpYmxlYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXJlcXVpcmVvYmplY3Rjb2VyY2libGVcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpdCA9PSB1bmRlZmluZWQpIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNhbGwgbWV0aG9kIG9uIFwiICsgaXQpO1xuICByZXR1cm4gaXQ7XG59O1xuIiwiLy8gdG9PYmplY3Qgd2l0aCBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIHN0cmluZ3NcbnZhciBJbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2luZGV4ZWQtb2JqZWN0Jyk7XG52YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIEluZGV4ZWRPYmplY3QocmVxdWlyZU9iamVjdENvZXJjaWJsZShpdCkpO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgc2V0R2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC1nbG9iYWwnKTtcbnZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcblxudmFyIFNIQVJFRCA9ICdfX2NvcmUtanNfc2hhcmVkX18nO1xudmFyIHN0b3JlID0gZ2xvYmFsW1NIQVJFRF0gfHwgc2V0R2xvYmFsKFNIQVJFRCwge30pO1xuXG4obW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICByZXR1cm4gc3RvcmVba2V5XSB8fCAoc3RvcmVba2V5XSA9IHZhbHVlICE9PSB1bmRlZmluZWQgPyB2YWx1ZSA6IHt9KTtcbn0pKCd2ZXJzaW9ucycsIFtdKS5wdXNoKHtcbiAgdmVyc2lvbjogJzMuMi4xJyxcbiAgbW9kZTogSVNfUFVSRSA/ICdwdXJlJyA6ICdnbG9iYWwnLFxuICBjb3B5cmlnaHQ6ICfCqSAyMDE5IERlbmlzIFB1c2hrYXJldiAoemxvaXJvY2sucnUpJ1xufSk7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChiaXRtYXAsIHZhbHVlKSB7XG4gIHJldHVybiB7XG4gICAgZW51bWVyYWJsZTogIShiaXRtYXAgJiAxKSxcbiAgICBjb25maWd1cmFibGU6ICEoYml0bWFwICYgMiksXG4gICAgd3JpdGFibGU6ICEoYml0bWFwICYgNCksXG4gICAgdmFsdWU6IHZhbHVlXG4gIH07XG59O1xuIiwidmFyIGNlaWwgPSBNYXRoLmNlaWw7XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xuXG4vLyBgVG9JbnRlZ2VyYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXRvaW50ZWdlclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgcmV0dXJuIGlzTmFOKGFyZ3VtZW50ID0gK2FyZ3VtZW50KSA/IDAgOiAoYXJndW1lbnQgPiAwID8gZmxvb3IgOiBjZWlsKShhcmd1bWVudCk7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hpZGUnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICB0cnkge1xuICAgIGhpZGUoZ2xvYmFsLCBrZXksIHZhbHVlKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBnbG9iYWxba2V5XSA9IHZhbHVlO1xuICB9IHJldHVybiB2YWx1ZTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZhbHNlO1xuIiwidmFyIHBhdGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcGF0aCcpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcblxudmFyIGFGdW5jdGlvbiA9IGZ1bmN0aW9uICh2YXJpYWJsZSkge1xuICByZXR1cm4gdHlwZW9mIHZhcmlhYmxlID09ICdmdW5jdGlvbicgPyB2YXJpYWJsZSA6IHVuZGVmaW5lZDtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG5hbWVzcGFjZSwgbWV0aG9kKSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoIDwgMiA/IGFGdW5jdGlvbihwYXRoW25hbWVzcGFjZV0pIHx8IGFGdW5jdGlvbihnbG9iYWxbbmFtZXNwYWNlXSlcbiAgICA6IHBhdGhbbmFtZXNwYWNlXSAmJiBwYXRoW25hbWVzcGFjZV1bbWV0aG9kXSB8fCBnbG9iYWxbbmFtZXNwYWNlXSAmJiBnbG9iYWxbbmFtZXNwYWNlXVttZXRob2RdO1xufTtcbiIsInZhciBOQVRJVkVfV0VBS19NQVAgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbmF0aXZlLXdlYWstbWFwJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGlkZScpO1xudmFyIG9iamVjdEhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciBzaGFyZWRLZXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkLWtleScpO1xudmFyIGhpZGRlbktleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGlkZGVuLWtleXMnKTtcblxudmFyIFdlYWtNYXAgPSBnbG9iYWwuV2Vha01hcDtcbnZhciBzZXQsIGdldCwgaGFzO1xuXG52YXIgZW5mb3JjZSA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaGFzKGl0KSA/IGdldChpdCkgOiBzZXQoaXQsIHt9KTtcbn07XG5cbnZhciBnZXR0ZXJGb3IgPSBmdW5jdGlvbiAoVFlQRSkge1xuICByZXR1cm4gZnVuY3Rpb24gKGl0KSB7XG4gICAgdmFyIHN0YXRlO1xuICAgIGlmICghaXNPYmplY3QoaXQpIHx8IChzdGF0ZSA9IGdldChpdCkpLnR5cGUgIT09IFRZUEUpIHtcbiAgICAgIHRocm93IFR5cGVFcnJvcignSW5jb21wYXRpYmxlIHJlY2VpdmVyLCAnICsgVFlQRSArICcgcmVxdWlyZWQnKTtcbiAgICB9IHJldHVybiBzdGF0ZTtcbiAgfTtcbn07XG5cbmlmIChOQVRJVkVfV0VBS19NQVApIHtcbiAgdmFyIHN0b3JlID0gbmV3IFdlYWtNYXAoKTtcbiAgdmFyIHdtZ2V0ID0gc3RvcmUuZ2V0O1xuICB2YXIgd21oYXMgPSBzdG9yZS5oYXM7XG4gIHZhciB3bXNldCA9IHN0b3JlLnNldDtcbiAgc2V0ID0gZnVuY3Rpb24gKGl0LCBtZXRhZGF0YSkge1xuICAgIHdtc2V0LmNhbGwoc3RvcmUsIGl0LCBtZXRhZGF0YSk7XG4gICAgcmV0dXJuIG1ldGFkYXRhO1xuICB9O1xuICBnZXQgPSBmdW5jdGlvbiAoaXQpIHtcbiAgICByZXR1cm4gd21nZXQuY2FsbChzdG9yZSwgaXQpIHx8IHt9O1xuICB9O1xuICBoYXMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgICByZXR1cm4gd21oYXMuY2FsbChzdG9yZSwgaXQpO1xuICB9O1xufSBlbHNlIHtcbiAgdmFyIFNUQVRFID0gc2hhcmVkS2V5KCdzdGF0ZScpO1xuICBoaWRkZW5LZXlzW1NUQVRFXSA9IHRydWU7XG4gIHNldCA9IGZ1bmN0aW9uIChpdCwgbWV0YWRhdGEpIHtcbiAgICBoaWRlKGl0LCBTVEFURSwgbWV0YWRhdGEpO1xuICAgIHJldHVybiBtZXRhZGF0YTtcbiAgfTtcbiAgZ2V0ID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIG9iamVjdEhhcyhpdCwgU1RBVEUpID8gaXRbU1RBVEVdIDoge307XG4gIH07XG4gIGhhcyA9IGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiBvYmplY3RIYXMoaXQsIFNUQVRFKTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNldDogc2V0LFxuICBnZXQ6IGdldCxcbiAgaGFzOiBoYXMsXG4gIGVuZm9yY2U6IGVuZm9yY2UsXG4gIGdldHRlckZvcjogZ2V0dGVyRm9yXG59O1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xuXG4vLyBgVG9QcmltaXRpdmVgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtdG9wcmltaXRpdmVcbi8vIGluc3RlYWQgb2YgdGhlIEVTNiBzcGVjIHZlcnNpb24sIHdlIGRpZG4ndCBpbXBsZW1lbnQgQEB0b1ByaW1pdGl2ZSBjYXNlXG4vLyBhbmQgdGhlIHNlY29uZCBhcmd1bWVudCAtIGZsYWcgLSBwcmVmZXJyZWQgdHlwZSBpcyBhIHN0cmluZ1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaW5wdXQsIFBSRUZFUlJFRF9TVFJJTkcpIHtcbiAgaWYgKCFpc09iamVjdChpbnB1dCkpIHJldHVybiBpbnB1dDtcbiAgdmFyIGZuLCB2YWw7XG4gIGlmIChQUkVGRVJSRURfU1RSSU5HICYmIHR5cGVvZiAoZm4gPSBpbnB1dC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpbnB1dCkpKSByZXR1cm4gdmFsO1xuICBpZiAodHlwZW9mIChmbiA9IGlucHV0LnZhbHVlT2YpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaW5wdXQpKSkgcmV0dXJuIHZhbDtcbiAgaWYgKCFQUkVGRVJSRURfU1RSSU5HICYmIHR5cGVvZiAoZm4gPSBpbnB1dC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpbnB1dCkpKSByZXR1cm4gdmFsO1xuICB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjb252ZXJ0IG9iamVjdCB0byBwcmltaXRpdmUgdmFsdWVcIik7XG59O1xuIiwidmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWZ1bmN0aW9uJyk7XG5cbi8vIG9wdGlvbmFsIC8gc2ltcGxlIGNvbnRleHQgYmluZGluZ1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZm4sIHRoYXQsIGxlbmd0aCkge1xuICBhRnVuY3Rpb24oZm4pO1xuICBpZiAodGhhdCA9PT0gdW5kZWZpbmVkKSByZXR1cm4gZm47XG4gIHN3aXRjaCAobGVuZ3RoKSB7XG4gICAgY2FzZSAwOiByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCk7XG4gICAgfTtcbiAgICBjYXNlIDE6IHJldHVybiBmdW5jdGlvbiAoYSkge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSk7XG4gICAgfTtcbiAgICBjYXNlIDI6IHJldHVybiBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYik7XG4gICAgfTtcbiAgICBjYXNlIDM6IHJldHVybiBmdW5jdGlvbiAoYSwgYiwgYykge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYiwgYyk7XG4gICAgfTtcbiAgfVxuICByZXR1cm4gZnVuY3Rpb24gKC8qIC4uLmFyZ3MgKi8pIHtcbiAgICByZXR1cm4gZm4uYXBwbHkodGhhdCwgYXJndW1lbnRzKTtcbiAgfTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAodHlwZW9mIGl0ICE9ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IoU3RyaW5nKGl0KSArICcgaXMgbm90IGEgZnVuY3Rpb24nKTtcbiAgfSByZXR1cm4gaXQ7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7fTtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZi1yYXcnKTtcblxudmFyIHNwbGl0ID0gJycuc3BsaXQ7XG5cbi8vIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgYW5kIG5vbi1lbnVtZXJhYmxlIG9sZCBWOCBzdHJpbmdzXG5tb2R1bGUuZXhwb3J0cyA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gdGhyb3dzIGFuIGVycm9yIGluIHJoaW5vLCBzZWUgaHR0cHM6Ly9naXRodWIuY29tL21vemlsbGEvcmhpbm8vaXNzdWVzLzM0NlxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcHJvdG90eXBlLWJ1aWx0aW5zXG4gIHJldHVybiAhT2JqZWN0KCd6JykucHJvcGVydHlJc0VudW1lcmFibGUoMCk7XG59KSA/IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gY2xhc3NvZihpdCkgPT0gJ1N0cmluZycgPyBzcGxpdC5jYWxsKGl0LCAnJykgOiBPYmplY3QoaXQpO1xufSA6IE9iamVjdDtcbiIsIm1vZHVsZS5leHBvcnRzID0ge307XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBwcm9wZXJ0eUlzRW51bWVyYWJsZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtcHJvcGVydHktaXMtZW51bWVyYWJsZScpO1xudmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvcicpO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXByaW1pdGl2ZScpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciBJRThfRE9NX0RFRklORSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pZTgtZG9tLWRlZmluZScpO1xuXG52YXIgbmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcblxuLy8gYE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LmdldG93bnByb3BlcnR5ZGVzY3JpcHRvclxuZXhwb3J0cy5mID0gREVTQ1JJUFRPUlMgPyBuYXRpdmVHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUCkge1xuICBPID0gdG9JbmRleGVkT2JqZWN0KE8pO1xuICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGlmIChJRThfRE9NX0RFRklORSkgdHJ5IHtcbiAgICByZXR1cm4gbmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApO1xuICB9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG4gIGlmIChoYXMoTywgUCkpIHJldHVybiBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoIXByb3BlcnR5SXNFbnVtZXJhYmxlTW9kdWxlLmYuY2FsbChPLCBQKSwgT1tQXSk7XG59O1xuIiwiLy8gSUU4LSBkb24ndCBlbnVtIGJ1ZyBrZXlzXG5tb2R1bGUuZXhwb3J0cyA9IFtcbiAgJ2NvbnN0cnVjdG9yJyxcbiAgJ2hhc093blByb3BlcnR5JyxcbiAgJ2lzUHJvdG90eXBlT2YnLFxuICAncHJvcGVydHlJc0VudW1lcmFibGUnLFxuICAndG9Mb2NhbGVTdHJpbmcnLFxuICAndG9TdHJpbmcnLFxuICAndmFsdWVPZidcbl07XG4iLCJ2YXIgc2hhcmVkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZCcpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy91aWQnKTtcblxudmFyIGtleXMgPSBzaGFyZWQoJ2tleXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIHJldHVybiBrZXlzW2tleV0gfHwgKGtleXNba2V5XSA9IHVpZChrZXkpKTtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xuXG52YXIgZG9jdW1lbnQgPSBnbG9iYWwuZG9jdW1lbnQ7XG4vLyB0eXBlb2YgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCBpcyAnb2JqZWN0JyBpbiBvbGQgSUVcbnZhciBFWElTVFMgPSBpc09iamVjdChkb2N1bWVudCkgJiYgaXNPYmplY3QoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBFWElTVFMgPyBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGl0KSA6IHt9O1xufTtcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgY3JlYXRlRWxlbWVudCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kb2N1bWVudC1jcmVhdGUtZWxlbWVudCcpO1xuXG4vLyBUaGFuaydzIElFOCBmb3IgaGlzIGZ1bm55IGRlZmluZVByb3BlcnR5XG5tb2R1bGUuZXhwb3J0cyA9ICFERVNDUklQVE9SUyAmJiAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KGNyZWF0ZUVsZW1lbnQoJ2RpdicpLCAnYScsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH1cbiAgfSkuYSAhPSA3O1xufSk7XG4iLCJ2YXIgc2hhcmVkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHNoYXJlZCgnbmF0aXZlLWZ1bmN0aW9uLXRvLXN0cmluZycsIEZ1bmN0aW9uLnRvU3RyaW5nKTtcbiIsInZhciBpZCA9IDA7XG52YXIgcG9zdGZpeCA9IE1hdGgucmFuZG9tKCk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4gJ1N5bWJvbCgnICsgU3RyaW5nKGtleSA9PT0gdW5kZWZpbmVkID8gJycgOiBrZXkpICsgJylfJyArICgrK2lkICsgcG9zdGZpeCkudG9TdHJpbmcoMzYpO1xufTtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG52YXIgcmVwbGFjZW1lbnQgPSAvI3xcXC5wcm90b3R5cGVcXC4vO1xuXG52YXIgaXNGb3JjZWQgPSBmdW5jdGlvbiAoZmVhdHVyZSwgZGV0ZWN0aW9uKSB7XG4gIHZhciB2YWx1ZSA9IGRhdGFbbm9ybWFsaXplKGZlYXR1cmUpXTtcbiAgcmV0dXJuIHZhbHVlID09IFBPTFlGSUxMID8gdHJ1ZVxuICAgIDogdmFsdWUgPT0gTkFUSVZFID8gZmFsc2VcbiAgICA6IHR5cGVvZiBkZXRlY3Rpb24gPT0gJ2Z1bmN0aW9uJyA/IGZhaWxzKGRldGVjdGlvbilcbiAgICA6ICEhZGV0ZWN0aW9uO1xufTtcblxudmFyIG5vcm1hbGl6ZSA9IGlzRm9yY2VkLm5vcm1hbGl6ZSA9IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgcmV0dXJuIFN0cmluZyhzdHJpbmcpLnJlcGxhY2UocmVwbGFjZW1lbnQsICcuJykudG9Mb3dlckNhc2UoKTtcbn07XG5cbnZhciBkYXRhID0gaXNGb3JjZWQuZGF0YSA9IHt9O1xudmFyIE5BVElWRSA9IGlzRm9yY2VkLk5BVElWRSA9ICdOJztcbnZhciBQT0xZRklMTCA9IGlzRm9yY2VkLlBPTFlGSUxMID0gJ1AnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGlzRm9yY2VkO1xuIiwidmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKS5mO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIFRPX1NUUklOR19UQUcgPSB3ZWxsS25vd25TeW1ib2woJ3RvU3RyaW5nVGFnJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBUQUcsIFNUQVRJQykge1xuICBpZiAoaXQgJiYgIWhhcyhpdCA9IFNUQVRJQyA/IGl0IDogaXQucHJvdG90eXBlLCBUT19TVFJJTkdfVEFHKSkge1xuICAgIGRlZmluZVByb3BlcnR5KGl0LCBUT19TVFJJTkdfVEFHLCB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSwgdmFsdWU6IFRBRyB9KTtcbiAgfVxufTtcbiIsInZhciBnO1xuXG4vLyBUaGlzIHdvcmtzIGluIG5vbi1zdHJpY3QgbW9kZVxuZyA9IChmdW5jdGlvbigpIHtcblx0cmV0dXJuIHRoaXM7XG59KSgpO1xuXG50cnkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIGV2YWwgaXMgYWxsb3dlZCAoc2VlIENTUClcblx0ZyA9IGcgfHwgbmV3IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKTtcbn0gY2F0Y2ggKGUpIHtcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcblx0aWYgKHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIpIGcgPSB3aW5kb3c7XG59XG5cbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cbi8vIFdlIHJldHVybiB1bmRlZmluZWQsIGluc3RlYWQgb2Ygbm90aGluZyBoZXJlLCBzbyBpdCdzXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XG5cbm1vZHVsZS5leHBvcnRzID0gZztcbiIsInZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YtcmF3Jyk7XG5cbi8vIGBJc0FycmF5YCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWlzYXJyYXlcbm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiBpc0FycmF5KGFyZykge1xuICByZXR1cm4gY2xhc3NvZihhcmcpID09ICdBcnJheSc7XG59O1xuIiwidmFyIGhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciBpbmRleE9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWluY2x1ZGVzJykuaW5kZXhPZjtcbnZhciBoaWRkZW5LZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hpZGRlbi1rZXlzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iamVjdCwgbmFtZXMpIHtcbiAgdmFyIE8gPSB0b0luZGV4ZWRPYmplY3Qob2JqZWN0KTtcbiAgdmFyIGkgPSAwO1xuICB2YXIgcmVzdWx0ID0gW107XG4gIHZhciBrZXk7XG4gIGZvciAoa2V5IGluIE8pICFoYXMoaGlkZGVuS2V5cywga2V5KSAmJiBoYXMoTywga2V5KSAmJiByZXN1bHQucHVzaChrZXkpO1xuICAvLyBEb24ndCBlbnVtIGJ1ZyAmIGhpZGRlbiBrZXlzXG4gIHdoaWxlIChuYW1lcy5sZW5ndGggPiBpKSBpZiAoaGFzKE8sIGtleSA9IG5hbWVzW2krK10pKSB7XG4gICAgfmluZGV4T2YocmVzdWx0LCBrZXkpIHx8IHJlc3VsdC5wdXNoKGtleSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1hcnJheScpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgU1BFQ0lFUyA9IHdlbGxLbm93blN5bWJvbCgnc3BlY2llcycpO1xuXG4vLyBgQXJyYXlTcGVjaWVzQ3JlYXRlYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5c3BlY2llc2NyZWF0ZVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob3JpZ2luYWxBcnJheSwgbGVuZ3RoKSB7XG4gIHZhciBDO1xuICBpZiAoaXNBcnJheShvcmlnaW5hbEFycmF5KSkge1xuICAgIEMgPSBvcmlnaW5hbEFycmF5LmNvbnN0cnVjdG9yO1xuICAgIC8vIGNyb3NzLXJlYWxtIGZhbGxiYWNrXG4gICAgaWYgKHR5cGVvZiBDID09ICdmdW5jdGlvbicgJiYgKEMgPT09IEFycmF5IHx8IGlzQXJyYXkoQy5wcm90b3R5cGUpKSkgQyA9IHVuZGVmaW5lZDtcbiAgICBlbHNlIGlmIChpc09iamVjdChDKSkge1xuICAgICAgQyA9IENbU1BFQ0lFU107XG4gICAgICBpZiAoQyA9PT0gbnVsbCkgQyA9IHVuZGVmaW5lZDtcbiAgICB9XG4gIH0gcmV0dXJuIG5ldyAoQyA9PT0gdW5kZWZpbmVkID8gQXJyYXkgOiBDKShsZW5ndGggPT09IDAgPyAwIDogbGVuZ3RoKTtcbn07XG4iLCJ2YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIFNQRUNJRVMgPSB3ZWxsS25vd25TeW1ib2woJ3NwZWNpZXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTUVUSE9EX05BTUUpIHtcbiAgcmV0dXJuICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGFycmF5ID0gW107XG4gICAgdmFyIGNvbnN0cnVjdG9yID0gYXJyYXkuY29uc3RydWN0b3IgPSB7fTtcbiAgICBjb25zdHJ1Y3RvcltTUEVDSUVTXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB7IGZvbzogMSB9O1xuICAgIH07XG4gICAgcmV0dXJuIGFycmF5W01FVEhPRF9OQU1FXShCb29sZWFuKS5mb28gIT09IDE7XG4gIH0pO1xufTtcbiIsInZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2JpbmQtY29udGV4dCcpO1xudmFyIEluZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5kZXhlZC1vYmplY3QnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciBhcnJheVNwZWNpZXNDcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktc3BlY2llcy1jcmVhdGUnKTtcblxudmFyIHB1c2ggPSBbXS5wdXNoO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLnsgZm9yRWFjaCwgbWFwLCBmaWx0ZXIsIHNvbWUsIGV2ZXJ5LCBmaW5kLCBmaW5kSW5kZXggfWAgbWV0aG9kcyBpbXBsZW1lbnRhdGlvblxudmFyIGNyZWF0ZU1ldGhvZCA9IGZ1bmN0aW9uIChUWVBFKSB7XG4gIHZhciBJU19NQVAgPSBUWVBFID09IDE7XG4gIHZhciBJU19GSUxURVIgPSBUWVBFID09IDI7XG4gIHZhciBJU19TT01FID0gVFlQRSA9PSAzO1xuICB2YXIgSVNfRVZFUlkgPSBUWVBFID09IDQ7XG4gIHZhciBJU19GSU5EX0lOREVYID0gVFlQRSA9PSA2O1xuICB2YXIgTk9fSE9MRVMgPSBUWVBFID09IDUgfHwgSVNfRklORF9JTkRFWDtcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgY2FsbGJhY2tmbiwgdGhhdCwgc3BlY2lmaWNDcmVhdGUpIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KCR0aGlzKTtcbiAgICB2YXIgc2VsZiA9IEluZGV4ZWRPYmplY3QoTyk7XG4gICAgdmFyIGJvdW5kRnVuY3Rpb24gPSBiaW5kKGNhbGxiYWNrZm4sIHRoYXQsIDMpO1xuICAgIHZhciBsZW5ndGggPSB0b0xlbmd0aChzZWxmLmxlbmd0aCk7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgY3JlYXRlID0gc3BlY2lmaWNDcmVhdGUgfHwgYXJyYXlTcGVjaWVzQ3JlYXRlO1xuICAgIHZhciB0YXJnZXQgPSBJU19NQVAgPyBjcmVhdGUoJHRoaXMsIGxlbmd0aCkgOiBJU19GSUxURVIgPyBjcmVhdGUoJHRoaXMsIDApIDogdW5kZWZpbmVkO1xuICAgIHZhciB2YWx1ZSwgcmVzdWx0O1xuICAgIGZvciAoO2xlbmd0aCA+IGluZGV4OyBpbmRleCsrKSBpZiAoTk9fSE9MRVMgfHwgaW5kZXggaW4gc2VsZikge1xuICAgICAgdmFsdWUgPSBzZWxmW2luZGV4XTtcbiAgICAgIHJlc3VsdCA9IGJvdW5kRnVuY3Rpb24odmFsdWUsIGluZGV4LCBPKTtcbiAgICAgIGlmIChUWVBFKSB7XG4gICAgICAgIGlmIChJU19NQVApIHRhcmdldFtpbmRleF0gPSByZXN1bHQ7IC8vIG1hcFxuICAgICAgICBlbHNlIGlmIChyZXN1bHQpIHN3aXRjaCAoVFlQRSkge1xuICAgICAgICAgIGNhc2UgMzogcmV0dXJuIHRydWU7ICAgICAgICAgICAgICAvLyBzb21lXG4gICAgICAgICAgY2FzZSA1OiByZXR1cm4gdmFsdWU7ICAgICAgICAgICAgIC8vIGZpbmRcbiAgICAgICAgICBjYXNlIDY6IHJldHVybiBpbmRleDsgICAgICAgICAgICAgLy8gZmluZEluZGV4XG4gICAgICAgICAgY2FzZSAyOiBwdXNoLmNhbGwodGFyZ2V0LCB2YWx1ZSk7IC8vIGZpbHRlclxuICAgICAgICB9IGVsc2UgaWYgKElTX0VWRVJZKSByZXR1cm4gZmFsc2U7ICAvLyBldmVyeVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gSVNfRklORF9JTkRFWCA/IC0xIDogSVNfU09NRSB8fCBJU19FVkVSWSA/IElTX0VWRVJZIDogdGFyZ2V0O1xuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIC8vIGBBcnJheS5wcm90b3R5cGUuZm9yRWFjaGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5mb3JlYWNoXG4gIGZvckVhY2g6IGNyZWF0ZU1ldGhvZCgwKSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5tYXBgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUubWFwXG4gIG1hcDogY3JlYXRlTWV0aG9kKDEpLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLmZpbHRlcmAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5maWx0ZXJcbiAgZmlsdGVyOiBjcmVhdGVNZXRob2QoMiksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuc29tZWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5zb21lXG4gIHNvbWU6IGNyZWF0ZU1ldGhvZCgzKSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5ldmVyeWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5ldmVyeVxuICBldmVyeTogY3JlYXRlTWV0aG9kKDQpLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLmZpbmRgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZmluZFxuICBmaW5kOiBjcmVhdGVNZXRob2QoNSksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuZmluZEluZGV4YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZpbmRJbmRleFxuICBmaW5kSW5kZXg6IGNyZWF0ZU1ldGhvZCg2KVxufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xuIiwidmFyIGludGVybmFsT2JqZWN0S2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qta2V5cy1pbnRlcm5hbCcpO1xudmFyIGVudW1CdWdLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VudW0tYnVnLWtleXMnKTtcblxudmFyIGhpZGRlbktleXMgPSBlbnVtQnVnS2V5cy5jb25jYXQoJ2xlbmd0aCcsICdwcm90b3R5cGUnKTtcblxuLy8gYE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5nZXRvd25wcm9wZXJ0eW5hbWVzXG5leHBvcnRzLmYgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyB8fCBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKE8pIHtcbiAgcmV0dXJuIGludGVybmFsT2JqZWN0S2V5cyhPLCBoaWRkZW5LZXlzKTtcbn07XG4iLCJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWludGVnZXInKTtcblxudmFyIG1heCA9IE1hdGgubWF4O1xudmFyIG1pbiA9IE1hdGgubWluO1xuXG4vLyBIZWxwZXIgZm9yIGEgcG9wdWxhciByZXBlYXRpbmcgY2FzZSBvZiB0aGUgc3BlYzpcbi8vIExldCBpbnRlZ2VyIGJlID8gVG9JbnRlZ2VyKGluZGV4KS5cbi8vIElmIGludGVnZXIgPCAwLCBsZXQgcmVzdWx0IGJlIG1heCgobGVuZ3RoICsgaW50ZWdlciksIDApOyBlbHNlIGxldCByZXN1bHQgYmUgbWluKGxlbmd0aCwgbGVuZ3RoKS5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGluZGV4LCBsZW5ndGgpIHtcbiAgdmFyIGludGVnZXIgPSB0b0ludGVnZXIoaW5kZXgpO1xuICByZXR1cm4gaW50ZWdlciA8IDAgPyBtYXgoaW50ZWdlciArIGxlbmd0aCwgMCkgOiBtaW4oaW50ZWdlciwgbGVuZ3RoKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tcHJpbWl0aXZlJyk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xudmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgdmFyIHByb3BlcnR5S2V5ID0gdG9QcmltaXRpdmUoa2V5KTtcbiAgaWYgKHByb3BlcnR5S2V5IGluIG9iamVjdCkgZGVmaW5lUHJvcGVydHlNb2R1bGUuZihvYmplY3QsIHByb3BlcnR5S2V5LCBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMCwgdmFsdWUpKTtcbiAgZWxzZSBvYmplY3RbcHJvcGVydHlLZXldID0gdmFsdWU7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIG5hdGl2ZVByb3BlcnR5SXNFbnVtZXJhYmxlID0ge30ucHJvcGVydHlJc0VudW1lcmFibGU7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcblxuLy8gTmFzaG9ybiB+IEpESzggYnVnXG52YXIgTkFTSE9STl9CVUcgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgJiYgIW5hdGl2ZVByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwoeyAxOiAyIH0sIDEpO1xuXG4vLyBgT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZWAgbWV0aG9kIGltcGxlbWVudGF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3QucHJvdG90eXBlLnByb3BlcnR5aXNlbnVtZXJhYmxlXG5leHBvcnRzLmYgPSBOQVNIT1JOX0JVRyA/IGZ1bmN0aW9uIHByb3BlcnR5SXNFbnVtZXJhYmxlKFYpIHtcbiAgdmFyIGRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGhpcywgVik7XG4gIHJldHVybiAhIWRlc2NyaXB0b3IgJiYgZGVzY3JpcHRvci5lbnVtZXJhYmxlO1xufSA6IG5hdGl2ZVByb3BlcnR5SXNFbnVtZXJhYmxlO1xuIiwidmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1hYnNvbHV0ZS1pbmRleCcpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLnsgaW5kZXhPZiwgaW5jbHVkZXMgfWAgbWV0aG9kcyBpbXBsZW1lbnRhdGlvblxudmFyIGNyZWF0ZU1ldGhvZCA9IGZ1bmN0aW9uIChJU19JTkNMVURFUykge1xuICByZXR1cm4gZnVuY3Rpb24gKCR0aGlzLCBlbCwgZnJvbUluZGV4KSB7XG4gICAgdmFyIE8gPSB0b0luZGV4ZWRPYmplY3QoJHRoaXMpO1xuICAgIHZhciBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgdmFyIGluZGV4ID0gdG9BYnNvbHV0ZUluZGV4KGZyb21JbmRleCwgbGVuZ3RoKTtcbiAgICB2YXIgdmFsdWU7XG4gICAgLy8gQXJyYXkjaW5jbHVkZXMgdXNlcyBTYW1lVmFsdWVaZXJvIGVxdWFsaXR5IGFsZ29yaXRobVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICBpZiAoSVNfSU5DTFVERVMgJiYgZWwgIT0gZWwpIHdoaWxlIChsZW5ndGggPiBpbmRleCkge1xuICAgICAgdmFsdWUgPSBPW2luZGV4KytdO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgICAgaWYgKHZhbHVlICE9IHZhbHVlKSByZXR1cm4gdHJ1ZTtcbiAgICAvLyBBcnJheSNpbmRleE9mIGlnbm9yZXMgaG9sZXMsIEFycmF5I2luY2x1ZGVzIC0gbm90XG4gICAgfSBlbHNlIGZvciAoO2xlbmd0aCA+IGluZGV4OyBpbmRleCsrKSB7XG4gICAgICBpZiAoKElTX0lOQ0xVREVTIHx8IGluZGV4IGluIE8pICYmIE9baW5kZXhdID09PSBlbCkgcmV0dXJuIElTX0lOQ0xVREVTIHx8IGluZGV4IHx8IDA7XG4gICAgfSByZXR1cm4gIUlTX0lOQ0xVREVTICYmIC0xO1xuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIC8vIGBBcnJheS5wcm90b3R5cGUuaW5jbHVkZXNgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuaW5jbHVkZXNcbiAgaW5jbHVkZXM6IGNyZWF0ZU1ldGhvZCh0cnVlKSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5pbmRleE9mYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmluZGV4b2ZcbiAgaW5kZXhPZjogY3JlYXRlTWV0aG9kKGZhbHNlKVxufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChNRVRIT0RfTkFNRSwgYXJndW1lbnQpIHtcbiAgdmFyIG1ldGhvZCA9IFtdW01FVEhPRF9OQU1FXTtcbiAgcmV0dXJuICFtZXRob2QgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdXNlbGVzcy1jYWxsLG5vLXRocm93LWxpdGVyYWxcbiAgICBtZXRob2QuY2FsbChudWxsLCBhcmd1bWVudCB8fCBmdW5jdGlvbiAoKSB7IHRocm93IDE7IH0sIDEpO1xuICB9KTtcbn07XG4iLCJ2YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9ycycpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgSVRFUkFUT1IgPSB3ZWxsS25vd25TeW1ib2woJ2l0ZXJhdG9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpdCAhPSB1bmRlZmluZWQpIHJldHVybiBpdFtJVEVSQVRPUl1cbiAgICB8fCBpdFsnQEBpdGVyYXRvciddXG4gICAgfHwgSXRlcmF0b3JzW2NsYXNzb2YoaXQpXTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBmb3JFYWNoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWZvci1lYWNoJyk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuZm9yRWFjaGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZm9yZWFjaFxuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGZvcmNlZDogW10uZm9yRWFjaCAhPSBmb3JFYWNoIH0sIHtcbiAgZm9yRWFjaDogZm9yRWFjaFxufSk7XG4iLCJleHBvcnRzLmYgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRmb3JFYWNoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWl0ZXJhdGlvbicpLmZvckVhY2g7XG52YXIgc2xvcHB5QXJyYXlNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2xvcHB5LWFycmF5LW1ldGhvZCcpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLmZvckVhY2hgIG1ldGhvZCBpbXBsZW1lbnRhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZvcmVhY2hcbm1vZHVsZS5leHBvcnRzID0gc2xvcHB5QXJyYXlNZXRob2QoJ2ZvckVhY2gnKSA/IGZ1bmN0aW9uIGZvckVhY2goY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgcmV0dXJuICRmb3JFYWNoKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbn0gOiBbXS5mb3JFYWNoO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBET01JdGVyYWJsZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZG9tLWl0ZXJhYmxlcycpO1xudmFyIGZvckVhY2ggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktZm9yLWVhY2gnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hpZGUnKTtcblxuZm9yICh2YXIgQ09MTEVDVElPTl9OQU1FIGluIERPTUl0ZXJhYmxlcykge1xuICB2YXIgQ29sbGVjdGlvbiA9IGdsb2JhbFtDT0xMRUNUSU9OX05BTUVdO1xuICB2YXIgQ29sbGVjdGlvblByb3RvdHlwZSA9IENvbGxlY3Rpb24gJiYgQ29sbGVjdGlvbi5wcm90b3R5cGU7XG4gIC8vIHNvbWUgQ2hyb21lIHZlcnNpb25zIGhhdmUgbm9uLWNvbmZpZ3VyYWJsZSBtZXRob2RzIG9uIERPTVRva2VuTGlzdFxuICBpZiAoQ29sbGVjdGlvblByb3RvdHlwZSAmJiBDb2xsZWN0aW9uUHJvdG90eXBlLmZvckVhY2ggIT09IGZvckVhY2gpIHRyeSB7XG4gICAgaGlkZShDb2xsZWN0aW9uUHJvdG90eXBlLCAnZm9yRWFjaCcsIGZvckVhY2gpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIENvbGxlY3Rpb25Qcm90b3R5cGUuZm9yRWFjaCA9IGZvckVhY2g7XG4gIH1cbn1cbiIsInZhciBpbnRlcm5hbE9iamVjdEtleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWtleXMtaW50ZXJuYWwnKTtcbnZhciBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbnVtLWJ1Zy1rZXlzJyk7XG5cbi8vIGBPYmplY3Qua2V5c2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3Qua2V5c1xubW9kdWxlLmV4cG9ydHMgPSBPYmplY3Qua2V5cyB8fCBmdW5jdGlvbiBrZXlzKE8pIHtcbiAgcmV0dXJuIGludGVybmFsT2JqZWN0S2V5cyhPLCBlbnVtQnVnS2V5cyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xuXG4vLyBgUmVnRXhwLnByb3RvdHlwZS5mbGFnc2AgZ2V0dGVyIGltcGxlbWVudGF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1nZXQtcmVnZXhwLnByb3RvdHlwZS5mbGFnc1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciB0aGF0ID0gYW5PYmplY3QodGhpcyk7XG4gIHZhciByZXN1bHQgPSAnJztcbiAgaWYgKHRoYXQuZ2xvYmFsKSByZXN1bHQgKz0gJ2cnO1xuICBpZiAodGhhdC5pZ25vcmVDYXNlKSByZXN1bHQgKz0gJ2knO1xuICBpZiAodGhhdC5tdWx0aWxpbmUpIHJlc3VsdCArPSAnbSc7XG4gIGlmICh0aGF0LmRvdEFsbCkgcmVzdWx0ICs9ICdzJztcbiAgaWYgKHRoYXQudW5pY29kZSkgcmVzdWx0ICs9ICd1JztcbiAgaWYgKHRoYXQuc3RpY2t5KSByZXN1bHQgKz0gJ3knO1xuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciByZWdleHBGbGFncyA9IHJlcXVpcmUoJy4vcmVnZXhwLWZsYWdzJyk7XG5cbnZhciBuYXRpdmVFeGVjID0gUmVnRXhwLnByb3RvdHlwZS5leGVjO1xuLy8gVGhpcyBhbHdheXMgcmVmZXJzIHRvIHRoZSBuYXRpdmUgaW1wbGVtZW50YXRpb24sIGJlY2F1c2UgdGhlXG4vLyBTdHJpbmcjcmVwbGFjZSBwb2x5ZmlsbCB1c2VzIC4vZml4LXJlZ2V4cC13ZWxsLWtub3duLXN5bWJvbC1sb2dpYy5qcyxcbi8vIHdoaWNoIGxvYWRzIHRoaXMgZmlsZSBiZWZvcmUgcGF0Y2hpbmcgdGhlIG1ldGhvZC5cbnZhciBuYXRpdmVSZXBsYWNlID0gU3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlO1xuXG52YXIgcGF0Y2hlZEV4ZWMgPSBuYXRpdmVFeGVjO1xuXG52YXIgVVBEQVRFU19MQVNUX0lOREVYX1dST05HID0gKGZ1bmN0aW9uICgpIHtcbiAgdmFyIHJlMSA9IC9hLztcbiAgdmFyIHJlMiA9IC9iKi9nO1xuICBuYXRpdmVFeGVjLmNhbGwocmUxLCAnYScpO1xuICBuYXRpdmVFeGVjLmNhbGwocmUyLCAnYScpO1xuICByZXR1cm4gcmUxLmxhc3RJbmRleCAhPT0gMCB8fCByZTIubGFzdEluZGV4ICE9PSAwO1xufSkoKTtcblxuLy8gbm9ucGFydGljaXBhdGluZyBjYXB0dXJpbmcgZ3JvdXAsIGNvcGllZCBmcm9tIGVzNS1zaGltJ3MgU3RyaW5nI3NwbGl0IHBhdGNoLlxudmFyIE5QQ0dfSU5DTFVERUQgPSAvKCk/Py8uZXhlYygnJylbMV0gIT09IHVuZGVmaW5lZDtcblxudmFyIFBBVENIID0gVVBEQVRFU19MQVNUX0lOREVYX1dST05HIHx8IE5QQ0dfSU5DTFVERUQ7XG5cbmlmIChQQVRDSCkge1xuICBwYXRjaGVkRXhlYyA9IGZ1bmN0aW9uIGV4ZWMoc3RyKSB7XG4gICAgdmFyIHJlID0gdGhpcztcbiAgICB2YXIgbGFzdEluZGV4LCByZUNvcHksIG1hdGNoLCBpO1xuXG4gICAgaWYgKE5QQ0dfSU5DTFVERUQpIHtcbiAgICAgIHJlQ29weSA9IG5ldyBSZWdFeHAoJ14nICsgcmUuc291cmNlICsgJyQoPyFcXFxccyknLCByZWdleHBGbGFncy5jYWxsKHJlKSk7XG4gICAgfVxuICAgIGlmIChVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkcpIGxhc3RJbmRleCA9IHJlLmxhc3RJbmRleDtcblxuICAgIG1hdGNoID0gbmF0aXZlRXhlYy5jYWxsKHJlLCBzdHIpO1xuXG4gICAgaWYgKFVQREFURVNfTEFTVF9JTkRFWF9XUk9ORyAmJiBtYXRjaCkge1xuICAgICAgcmUubGFzdEluZGV4ID0gcmUuZ2xvYmFsID8gbWF0Y2guaW5kZXggKyBtYXRjaFswXS5sZW5ndGggOiBsYXN0SW5kZXg7XG4gICAgfVxuICAgIGlmIChOUENHX0lOQ0xVREVEICYmIG1hdGNoICYmIG1hdGNoLmxlbmd0aCA+IDEpIHtcbiAgICAgIC8vIEZpeCBicm93c2VycyB3aG9zZSBgZXhlY2AgbWV0aG9kcyBkb24ndCBjb25zaXN0ZW50bHkgcmV0dXJuIGB1bmRlZmluZWRgXG4gICAgICAvLyBmb3IgTlBDRywgbGlrZSBJRTguIE5PVEU6IFRoaXMgZG9lc24nIHdvcmsgZm9yIC8oLj8pPy9cbiAgICAgIG5hdGl2ZVJlcGxhY2UuY2FsbChtYXRjaFswXSwgcmVDb3B5LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZvciAoaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoIC0gMjsgaSsrKSB7XG4gICAgICAgICAgaWYgKGFyZ3VtZW50c1tpXSA9PT0gdW5kZWZpbmVkKSBtYXRjaFtpXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1hdGNoO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHBhdGNoZWRFeGVjO1xuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwicmVnZW5lcmF0b3ItcnVudGltZVwiKTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgbmF0aXZlRnVuY3Rpb25Ub1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi10by1zdHJpbmcnKTtcblxudmFyIFdlYWtNYXAgPSBnbG9iYWwuV2Vha01hcDtcblxubW9kdWxlLmV4cG9ydHMgPSB0eXBlb2YgV2Vha01hcCA9PT0gJ2Z1bmN0aW9uJyAmJiAvbmF0aXZlIGNvZGUvLnRlc3QobmF0aXZlRnVuY3Rpb25Ub1N0cmluZy5jYWxsKFdlYWtNYXApKTtcbiIsInZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgb3duS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vd24ta2V5cycpO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0YXJnZXQsIHNvdXJjZSkge1xuICB2YXIga2V5cyA9IG93bktleXMoc291cmNlKTtcbiAgdmFyIGRlZmluZVByb3BlcnR5ID0gZGVmaW5lUHJvcGVydHlNb2R1bGUuZjtcbiAgdmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZS5mO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICBpZiAoIWhhcyh0YXJnZXQsIGtleSkpIGRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTtcbiAgfVxufTtcbiIsInZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIGdldE93blByb3BlcnR5TmFtZXNNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktc3ltYm9scycpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xuXG4vLyBhbGwgb2JqZWN0IGtleXMsIGluY2x1ZGVzIG5vbi1lbnVtZXJhYmxlIGFuZCBzeW1ib2xzXG5tb2R1bGUuZXhwb3J0cyA9IGdldEJ1aWx0SW4oJ1JlZmxlY3QnLCAnb3duS2V5cycpIHx8IGZ1bmN0aW9uIG93bktleXMoaXQpIHtcbiAgdmFyIGtleXMgPSBnZXRPd25Qcm9wZXJ0eU5hbWVzTW9kdWxlLmYoYW5PYmplY3QoaXQpKTtcbiAgdmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZS5mO1xuICByZXR1cm4gZ2V0T3duUHJvcGVydHlTeW1ib2xzID8ga2V5cy5jb25jYXQoZ2V0T3duUHJvcGVydHlTeW1ib2xzKGl0KSkgOiBrZXlzO1xufTtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9ICEhT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyAmJiAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBDaHJvbWUgMzggU3ltYm9sIGhhcyBpbmNvcnJlY3QgdG9TdHJpbmcgY29udmVyc2lvblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgcmV0dXJuICFTdHJpbmcoU3ltYm9sKCkpO1xufSk7XG4iLCJ2YXIgY2xhc3NvZlJhdyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mLXJhdycpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgVE9fU1RSSU5HX1RBRyA9IHdlbGxLbm93blN5bWJvbCgndG9TdHJpbmdUYWcnKTtcbi8vIEVTMyB3cm9uZyBoZXJlXG52YXIgQ09SUkVDVF9BUkdVTUVOVFMgPSBjbGFzc29mUmF3KGZ1bmN0aW9uICgpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKSA9PSAnQXJndW1lbnRzJztcblxuLy8gZmFsbGJhY2sgZm9yIElFMTEgU2NyaXB0IEFjY2VzcyBEZW5pZWQgZXJyb3JcbnZhciB0cnlHZXQgPSBmdW5jdGlvbiAoaXQsIGtleSkge1xuICB0cnkge1xuICAgIHJldHVybiBpdFtrZXldO1xuICB9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG59O1xuXG4vLyBnZXR0aW5nIHRhZyBmcm9tIEVTNisgYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdgXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgTywgdGFnLCByZXN1bHQ7XG4gIHJldHVybiBpdCA9PT0gdW5kZWZpbmVkID8gJ1VuZGVmaW5lZCcgOiBpdCA9PT0gbnVsbCA/ICdOdWxsJ1xuICAgIC8vIEBAdG9TdHJpbmdUYWcgY2FzZVxuICAgIDogdHlwZW9mICh0YWcgPSB0cnlHZXQoTyA9IE9iamVjdChpdCksIFRPX1NUUklOR19UQUcpKSA9PSAnc3RyaW5nJyA/IHRhZ1xuICAgIC8vIGJ1aWx0aW5UYWcgY2FzZVxuICAgIDogQ09SUkVDVF9BUkdVTUVOVFMgPyBjbGFzc29mUmF3KE8pXG4gICAgLy8gRVMzIGFyZ3VtZW50cyBmYWxsYmFja1xuICAgIDogKHJlc3VsdCA9IGNsYXNzb2ZSYXcoTykpID09ICdPYmplY3QnICYmIHR5cGVvZiBPLmNhbGxlZSA9PSAnZnVuY3Rpb24nID8gJ0FyZ3VtZW50cycgOiByZXN1bHQ7XG59O1xuIiwidmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbnRlZ2VyJyk7XG52YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUueyBjb2RlUG9pbnRBdCwgYXQgfWAgbWV0aG9kcyBpbXBsZW1lbnRhdGlvblxudmFyIGNyZWF0ZU1ldGhvZCA9IGZ1bmN0aW9uIChDT05WRVJUX1RPX1NUUklORykge1xuICByZXR1cm4gZnVuY3Rpb24gKCR0aGlzLCBwb3MpIHtcbiAgICB2YXIgUyA9IFN0cmluZyhyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKCR0aGlzKSk7XG4gICAgdmFyIHBvc2l0aW9uID0gdG9JbnRlZ2VyKHBvcyk7XG4gICAgdmFyIHNpemUgPSBTLmxlbmd0aDtcbiAgICB2YXIgZmlyc3QsIHNlY29uZDtcbiAgICBpZiAocG9zaXRpb24gPCAwIHx8IHBvc2l0aW9uID49IHNpemUpIHJldHVybiBDT05WRVJUX1RPX1NUUklORyA/ICcnIDogdW5kZWZpbmVkO1xuICAgIGZpcnN0ID0gUy5jaGFyQ29kZUF0KHBvc2l0aW9uKTtcbiAgICByZXR1cm4gZmlyc3QgPCAweEQ4MDAgfHwgZmlyc3QgPiAweERCRkYgfHwgcG9zaXRpb24gKyAxID09PSBzaXplXG4gICAgICB8fCAoc2Vjb25kID0gUy5jaGFyQ29kZUF0KHBvc2l0aW9uICsgMSkpIDwgMHhEQzAwIHx8IHNlY29uZCA+IDB4REZGRlxuICAgICAgICA/IENPTlZFUlRfVE9fU1RSSU5HID8gUy5jaGFyQXQocG9zaXRpb24pIDogZmlyc3RcbiAgICAgICAgOiBDT05WRVJUX1RPX1NUUklORyA/IFMuc2xpY2UocG9zaXRpb24sIHBvc2l0aW9uICsgMikgOiAoZmlyc3QgLSAweEQ4MDAgPDwgMTApICsgKHNlY29uZCAtIDB4REMwMCkgKyAweDEwMDAwO1xuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIC8vIGBTdHJpbmcucHJvdG90eXBlLmNvZGVQb2ludEF0YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5jb2RlcG9pbnRhdFxuICBjb2RlQXQ6IGNyZWF0ZU1ldGhvZChmYWxzZSksXG4gIC8vIGBTdHJpbmcucHJvdG90eXBlLmF0YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL21hdGhpYXNieW5lbnMvU3RyaW5nLnByb3RvdHlwZS5hdFxuICBjaGFyQXQ6IGNyZWF0ZU1ldGhvZCh0cnVlKVxufTtcbiIsInZhciBhcnJheVdpdGhvdXRIb2xlcyA9IHJlcXVpcmUoXCIuL2FycmF5V2l0aG91dEhvbGVzXCIpO1xuXG52YXIgaXRlcmFibGVUb0FycmF5ID0gcmVxdWlyZShcIi4vaXRlcmFibGVUb0FycmF5XCIpO1xuXG52YXIgbm9uSXRlcmFibGVTcHJlYWQgPSByZXF1aXJlKFwiLi9ub25JdGVyYWJsZVNwcmVhZFwiKTtcblxuZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikge1xuICByZXR1cm4gYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB8fCBpdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCBub25JdGVyYWJsZVNwcmVhZCgpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF90b0NvbnN1bWFibGVBcnJheTsiLCJ2YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9ycycpO1xuXG52YXIgSVRFUkFUT1IgPSB3ZWxsS25vd25TeW1ib2woJ2l0ZXJhdG9yJyk7XG52YXIgQXJyYXlQcm90b3R5cGUgPSBBcnJheS5wcm90b3R5cGU7XG5cbi8vIGNoZWNrIG9uIGRlZmF1bHQgQXJyYXkgaXRlcmF0b3Jcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCAhPT0gdW5kZWZpbmVkICYmIChJdGVyYXRvcnMuQXJyYXkgPT09IGl0IHx8IEFycmF5UHJvdG90eXBlW0lURVJBVE9SXSA9PT0gaXQpO1xufTtcbiIsInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcblxuLy8gY2FsbCBzb21ldGhpbmcgb24gaXRlcmF0b3Igc3RlcCB3aXRoIHNhZmUgY2xvc2luZyBvbiBlcnJvclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlcmF0b3IsIGZuLCB2YWx1ZSwgRU5UUklFUykge1xuICB0cnkge1xuICAgIHJldHVybiBFTlRSSUVTID8gZm4oYW5PYmplY3QodmFsdWUpWzBdLCB2YWx1ZVsxXSkgOiBmbih2YWx1ZSk7XG4gIC8vIDcuNC42IEl0ZXJhdG9yQ2xvc2UoaXRlcmF0b3IsIGNvbXBsZXRpb24pXG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgdmFyIHJldHVybk1ldGhvZCA9IGl0ZXJhdG9yWydyZXR1cm4nXTtcbiAgICBpZiAocmV0dXJuTWV0aG9kICE9PSB1bmRlZmluZWQpIGFuT2JqZWN0KHJldHVybk1ldGhvZC5jYWxsKGl0ZXJhdG9yKSk7XG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cbn07XG4iLCJ2YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBnZXRCdWlsdEluKCdkb2N1bWVudCcsICdkb2N1bWVudEVsZW1lbnQnKTtcbiIsIi8vIGl0ZXJhYmxlIERPTSBjb2xsZWN0aW9uc1xuLy8gZmxhZyAtIGBpdGVyYWJsZWAgaW50ZXJmYWNlIC0gJ2VudHJpZXMnLCAna2V5cycsICd2YWx1ZXMnLCAnZm9yRWFjaCcgbWV0aG9kc1xubW9kdWxlLmV4cG9ydHMgPSB7XG4gIENTU1J1bGVMaXN0OiAwLFxuICBDU1NTdHlsZURlY2xhcmF0aW9uOiAwLFxuICBDU1NWYWx1ZUxpc3Q6IDAsXG4gIENsaWVudFJlY3RMaXN0OiAwLFxuICBET01SZWN0TGlzdDogMCxcbiAgRE9NU3RyaW5nTGlzdDogMCxcbiAgRE9NVG9rZW5MaXN0OiAxLFxuICBEYXRhVHJhbnNmZXJJdGVtTGlzdDogMCxcbiAgRmlsZUxpc3Q6IDAsXG4gIEhUTUxBbGxDb2xsZWN0aW9uOiAwLFxuICBIVE1MQ29sbGVjdGlvbjogMCxcbiAgSFRNTEZvcm1FbGVtZW50OiAwLFxuICBIVE1MU2VsZWN0RWxlbWVudDogMCxcbiAgTWVkaWFMaXN0OiAwLFxuICBNaW1lVHlwZUFycmF5OiAwLFxuICBOYW1lZE5vZGVNYXA6IDAsXG4gIE5vZGVMaXN0OiAxLFxuICBQYWludFJlcXVlc3RMaXN0OiAwLFxuICBQbHVnaW46IDAsXG4gIFBsdWdpbkFycmF5OiAwLFxuICBTVkdMZW5ndGhMaXN0OiAwLFxuICBTVkdOdW1iZXJMaXN0OiAwLFxuICBTVkdQYXRoU2VnTGlzdDogMCxcbiAgU1ZHUG9pbnRMaXN0OiAwLFxuICBTVkdTdHJpbmdMaXN0OiAwLFxuICBTVkdUcmFuc2Zvcm1MaXN0OiAwLFxuICBTb3VyY2VCdWZmZXJMaXN0OiAwLFxuICBTdHlsZVNoZWV0TGlzdDogMCxcbiAgVGV4dFRyYWNrQ3VlTGlzdDogMCxcbiAgVGV4dFRyYWNrTGlzdDogMCxcbiAgVG91Y2hMaXN0OiAwXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGNoYXJBdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctbXVsdGlieXRlJykuY2hhckF0O1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcbnZhciBkZWZpbmVJdGVyYXRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtaXRlcmF0b3InKTtcblxudmFyIFNUUklOR19JVEVSQVRPUiA9ICdTdHJpbmcgSXRlcmF0b3InO1xudmFyIHNldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLnNldDtcbnZhciBnZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXR0ZXJGb3IoU1RSSU5HX0lURVJBVE9SKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGVbQEBpdGVyYXRvcl1gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS1AQGl0ZXJhdG9yXG5kZWZpbmVJdGVyYXRvcihTdHJpbmcsICdTdHJpbmcnLCBmdW5jdGlvbiAoaXRlcmF0ZWQpIHtcbiAgc2V0SW50ZXJuYWxTdGF0ZSh0aGlzLCB7XG4gICAgdHlwZTogU1RSSU5HX0lURVJBVE9SLFxuICAgIHN0cmluZzogU3RyaW5nKGl0ZXJhdGVkKSxcbiAgICBpbmRleDogMFxuICB9KTtcbi8vIGAlU3RyaW5nSXRlcmF0b3JQcm90b3R5cGUlLm5leHRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtJXN0cmluZ2l0ZXJhdG9ycHJvdG90eXBlJS5uZXh0XG59LCBmdW5jdGlvbiBuZXh0KCkge1xuICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpO1xuICB2YXIgc3RyaW5nID0gc3RhdGUuc3RyaW5nO1xuICB2YXIgaW5kZXggPSBzdGF0ZS5pbmRleDtcbiAgdmFyIHBvaW50O1xuICBpZiAoaW5kZXggPj0gc3RyaW5nLmxlbmd0aCkgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICBwb2ludCA9IGNoYXJBdChzdHJpbmcsIGluZGV4KTtcbiAgc3RhdGUuaW5kZXggKz0gcG9pbnQubGVuZ3RoO1xuICByZXR1cm4geyB2YWx1ZTogcG9pbnQsIGRvbmU6IGZhbHNlIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LXByb3RvdHlwZS1vZicpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGlkZScpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcblxudmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xudmFyIEJVR0dZX1NBRkFSSV9JVEVSQVRPUlMgPSBmYWxzZTtcblxudmFyIHJldHVyblRoaXMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9O1xuXG4vLyBgJUl0ZXJhdG9yUHJvdG90eXBlJWAgb2JqZWN0XG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy0laXRlcmF0b3Jwcm90b3R5cGUlLW9iamVjdFxudmFyIEl0ZXJhdG9yUHJvdG90eXBlLCBQcm90b3R5cGVPZkFycmF5SXRlcmF0b3JQcm90b3R5cGUsIGFycmF5SXRlcmF0b3I7XG5cbmlmIChbXS5rZXlzKSB7XG4gIGFycmF5SXRlcmF0b3IgPSBbXS5rZXlzKCk7XG4gIC8vIFNhZmFyaSA4IGhhcyBidWdneSBpdGVyYXRvcnMgdy9vIGBuZXh0YFxuICBpZiAoISgnbmV4dCcgaW4gYXJyYXlJdGVyYXRvcikpIEJVR0dZX1NBRkFSSV9JVEVSQVRPUlMgPSB0cnVlO1xuICBlbHNlIHtcbiAgICBQcm90b3R5cGVPZkFycmF5SXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZihnZXRQcm90b3R5cGVPZihhcnJheUl0ZXJhdG9yKSk7XG4gICAgaWYgKFByb3RvdHlwZU9mQXJyYXlJdGVyYXRvclByb3RvdHlwZSAhPT0gT2JqZWN0LnByb3RvdHlwZSkgSXRlcmF0b3JQcm90b3R5cGUgPSBQcm90b3R5cGVPZkFycmF5SXRlcmF0b3JQcm90b3R5cGU7XG4gIH1cbn1cblxuaWYgKEl0ZXJhdG9yUHJvdG90eXBlID09IHVuZGVmaW5lZCkgSXRlcmF0b3JQcm90b3R5cGUgPSB7fTtcblxuLy8gMjUuMS4yLjEuMSAlSXRlcmF0b3JQcm90b3R5cGUlW0BAaXRlcmF0b3JdKClcbmlmICghSVNfUFVSRSAmJiAhaGFzKEl0ZXJhdG9yUHJvdG90eXBlLCBJVEVSQVRPUikpIGhpZGUoSXRlcmF0b3JQcm90b3R5cGUsIElURVJBVE9SLCByZXR1cm5UaGlzKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIEl0ZXJhdG9yUHJvdG90eXBlOiBJdGVyYXRvclByb3RvdHlwZSxcbiAgQlVHR1lfU0FGQVJJX0lURVJBVE9SUzogQlVHR1lfU0FGQVJJX0lURVJBVE9SU1xufTtcbiIsInZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgc2hhcmVkS2V5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1rZXknKTtcbnZhciBDT1JSRUNUX1BST1RPVFlQRV9HRVRURVIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29ycmVjdC1wcm90b3R5cGUtZ2V0dGVyJyk7XG5cbnZhciBJRV9QUk9UTyA9IHNoYXJlZEtleSgnSUVfUFJPVE8nKTtcbnZhciBPYmplY3RQcm90b3R5cGUgPSBPYmplY3QucHJvdG90eXBlO1xuXG4vLyBgT2JqZWN0LmdldFByb3RvdHlwZU9mYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5nZXRwcm90b3R5cGVvZlxubW9kdWxlLmV4cG9ydHMgPSBDT1JSRUNUX1BST1RPVFlQRV9HRVRURVIgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiAoTykge1xuICBPID0gdG9PYmplY3QoTyk7XG4gIGlmIChoYXMoTywgSUVfUFJPVE8pKSByZXR1cm4gT1tJRV9QUk9UT107XG4gIGlmICh0eXBlb2YgTy5jb25zdHJ1Y3RvciA9PSAnZnVuY3Rpb24nICYmIE8gaW5zdGFuY2VvZiBPLmNvbnN0cnVjdG9yKSB7XG4gICAgcmV0dXJuIE8uY29uc3RydWN0b3IucHJvdG90eXBlO1xuICB9IHJldHVybiBPIGluc3RhbmNlb2YgT2JqZWN0ID8gT2JqZWN0UHJvdG90eXBlIDogbnVsbDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcblxudmFyIFNQRUNJRVMgPSB3ZWxsS25vd25TeW1ib2woJ3NwZWNpZXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQ09OU1RSVUNUT1JfTkFNRSkge1xuICB2YXIgQ29uc3RydWN0b3IgPSBnZXRCdWlsdEluKENPTlNUUlVDVE9SX05BTUUpO1xuICB2YXIgZGVmaW5lUHJvcGVydHkgPSBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mO1xuXG4gIGlmIChERVNDUklQVE9SUyAmJiBDb25zdHJ1Y3RvciAmJiAhQ29uc3RydWN0b3JbU1BFQ0lFU10pIHtcbiAgICBkZWZpbmVQcm9wZXJ0eShDb25zdHJ1Y3RvciwgU1BFQ0lFUywge1xuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9XG4gICAgfSk7XG4gIH1cbn07XG4iLCJ2YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBJVEVSQVRPUiA9IHdlbGxLbm93blN5bWJvbCgnaXRlcmF0b3InKTtcbnZhciBTQUZFX0NMT1NJTkcgPSBmYWxzZTtcblxudHJ5IHtcbiAgdmFyIGNhbGxlZCA9IDA7XG4gIHZhciBpdGVyYXRvcldpdGhSZXR1cm4gPSB7XG4gICAgbmV4dDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHsgZG9uZTogISFjYWxsZWQrKyB9O1xuICAgIH0sXG4gICAgJ3JldHVybic6IGZ1bmN0aW9uICgpIHtcbiAgICAgIFNBRkVfQ0xPU0lORyA9IHRydWU7XG4gICAgfVxuICB9O1xuICBpdGVyYXRvcldpdGhSZXR1cm5bSVRFUkFUT1JdID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdGhyb3ctbGl0ZXJhbFxuICBBcnJheS5mcm9tKGl0ZXJhdG9yV2l0aFJldHVybiwgZnVuY3Rpb24gKCkgeyB0aHJvdyAyOyB9KTtcbn0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZXhlYywgU0tJUF9DTE9TSU5HKSB7XG4gIGlmICghU0tJUF9DTE9TSU5HICYmICFTQUZFX0NMT1NJTkcpIHJldHVybiBmYWxzZTtcbiAgdmFyIElURVJBVElPTl9TVVBQT1JUID0gZmFsc2U7XG4gIHRyeSB7XG4gICAgdmFyIG9iamVjdCA9IHt9O1xuICAgIG9iamVjdFtJVEVSQVRPUl0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBuZXh0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIHsgZG9uZTogSVRFUkFUSU9OX1NVUFBPUlQgPSB0cnVlIH07XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfTtcbiAgICBleGVjKG9iamVjdCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cbiAgcmV0dXJuIElURVJBVElPTl9TVVBQT1JUO1xufTtcbiIsInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBkZWZpbmVQcm9wZXJ0aWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydGllcycpO1xudmFyIGVudW1CdWdLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VudW0tYnVnLWtleXMnKTtcbnZhciBoaWRkZW5LZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hpZGRlbi1rZXlzJyk7XG52YXIgaHRtbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9odG1sJyk7XG52YXIgZG9jdW1lbnRDcmVhdGVFbGVtZW50ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RvY3VtZW50LWNyZWF0ZS1lbGVtZW50Jyk7XG52YXIgc2hhcmVkS2V5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1rZXknKTtcbnZhciBJRV9QUk9UTyA9IHNoYXJlZEtleSgnSUVfUFJPVE8nKTtcblxudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xudmFyIEVtcHR5ID0gZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9O1xuXG4vLyBDcmVhdGUgb2JqZWN0IHdpdGggZmFrZSBgbnVsbGAgcHJvdG90eXBlOiB1c2UgaWZyYW1lIE9iamVjdCB3aXRoIGNsZWFyZWQgcHJvdG90eXBlXG52YXIgY3JlYXRlRGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgLy8gVGhyYXNoLCB3YXN0ZSBhbmQgc29kb215OiBJRSBHQyBidWdcbiAgdmFyIGlmcmFtZSA9IGRvY3VtZW50Q3JlYXRlRWxlbWVudCgnaWZyYW1lJyk7XG4gIHZhciBsZW5ndGggPSBlbnVtQnVnS2V5cy5sZW5ndGg7XG4gIHZhciBsdCA9ICc8JztcbiAgdmFyIHNjcmlwdCA9ICdzY3JpcHQnO1xuICB2YXIgZ3QgPSAnPic7XG4gIHZhciBqcyA9ICdqYXZhJyArIHNjcmlwdCArICc6JztcbiAgdmFyIGlmcmFtZURvY3VtZW50O1xuICBpZnJhbWUuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgaHRtbC5hcHBlbmRDaGlsZChpZnJhbWUpO1xuICBpZnJhbWUuc3JjID0gU3RyaW5nKGpzKTtcbiAgaWZyYW1lRG9jdW1lbnQgPSBpZnJhbWUuY29udGVudFdpbmRvdy5kb2N1bWVudDtcbiAgaWZyYW1lRG9jdW1lbnQub3BlbigpO1xuICBpZnJhbWVEb2N1bWVudC53cml0ZShsdCArIHNjcmlwdCArIGd0ICsgJ2RvY3VtZW50LkY9T2JqZWN0JyArIGx0ICsgJy8nICsgc2NyaXB0ICsgZ3QpO1xuICBpZnJhbWVEb2N1bWVudC5jbG9zZSgpO1xuICBjcmVhdGVEaWN0ID0gaWZyYW1lRG9jdW1lbnQuRjtcbiAgd2hpbGUgKGxlbmd0aC0tKSBkZWxldGUgY3JlYXRlRGljdFtQUk9UT1RZUEVdW2VudW1CdWdLZXlzW2xlbmd0aF1dO1xuICByZXR1cm4gY3JlYXRlRGljdCgpO1xufTtcblxuLy8gYE9iamVjdC5jcmVhdGVgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LmNyZWF0ZVxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuY3JlYXRlIHx8IGZ1bmN0aW9uIGNyZWF0ZShPLCBQcm9wZXJ0aWVzKSB7XG4gIHZhciByZXN1bHQ7XG4gIGlmIChPICE9PSBudWxsKSB7XG4gICAgRW1wdHlbUFJPVE9UWVBFXSA9IGFuT2JqZWN0KE8pO1xuICAgIHJlc3VsdCA9IG5ldyBFbXB0eSgpO1xuICAgIEVtcHR5W1BST1RPVFlQRV0gPSBudWxsO1xuICAgIC8vIGFkZCBcIl9fcHJvdG9fX1wiIGZvciBPYmplY3QuZ2V0UHJvdG90eXBlT2YgcG9seWZpbGxcbiAgICByZXN1bHRbSUVfUFJPVE9dID0gTztcbiAgfSBlbHNlIHJlc3VsdCA9IGNyZWF0ZURpY3QoKTtcbiAgcmV0dXJuIFByb3BlcnRpZXMgPT09IHVuZGVmaW5lZCA/IHJlc3VsdCA6IGRlZmluZVByb3BlcnRpZXMocmVzdWx0LCBQcm9wZXJ0aWVzKTtcbn07XG5cbmhpZGRlbktleXNbSUVfUFJPVE9dID0gdHJ1ZTtcbiIsInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBhUG9zc2libGVQcm90b3R5cGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1wb3NzaWJsZS1wcm90b3R5cGUnKTtcblxuLy8gYE9iamVjdC5zZXRQcm90b3R5cGVPZmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3Quc2V0cHJvdG90eXBlb2Zcbi8vIFdvcmtzIHdpdGggX19wcm90b19fIG9ubHkuIE9sZCB2OCBjYW4ndCB3b3JrIHdpdGggbnVsbCBwcm90byBvYmplY3RzLlxuLyogZXNsaW50LWRpc2FibGUgbm8tcHJvdG8gKi9cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8ICgnX19wcm90b19fJyBpbiB7fSA/IGZ1bmN0aW9uICgpIHtcbiAgdmFyIENPUlJFQ1RfU0VUVEVSID0gZmFsc2U7XG4gIHZhciB0ZXN0ID0ge307XG4gIHZhciBzZXR0ZXI7XG4gIHRyeSB7XG4gICAgc2V0dGVyID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihPYmplY3QucHJvdG90eXBlLCAnX19wcm90b19fJykuc2V0O1xuICAgIHNldHRlci5jYWxsKHRlc3QsIFtdKTtcbiAgICBDT1JSRUNUX1NFVFRFUiA9IHRlc3QgaW5zdGFuY2VvZiBBcnJheTtcbiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuICByZXR1cm4gZnVuY3Rpb24gc2V0UHJvdG90eXBlT2YoTywgcHJvdG8pIHtcbiAgICBhbk9iamVjdChPKTtcbiAgICBhUG9zc2libGVQcm90b3R5cGUocHJvdG8pO1xuICAgIGlmIChDT1JSRUNUX1NFVFRFUikgc2V0dGVyLmNhbGwoTywgcHJvdG8pO1xuICAgIGVsc2UgTy5fX3Byb3RvX18gPSBwcm90bztcbiAgICByZXR1cm4gTztcbiAgfTtcbn0oKSA6IHVuZGVmaW5lZCk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtYXJyYXknKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHknKTtcbnZhciBhcnJheVNwZWNpZXNDcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktc3BlY2llcy1jcmVhdGUnKTtcbnZhciBhcnJheU1ldGhvZEhhc1NwZWNpZXNTdXBwb3J0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1oYXMtc3BlY2llcy1zdXBwb3J0Jyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBJU19DT05DQVRfU1BSRUFEQUJMRSA9IHdlbGxLbm93blN5bWJvbCgnaXNDb25jYXRTcHJlYWRhYmxlJyk7XG52YXIgTUFYX1NBRkVfSU5URUdFUiA9IDB4MUZGRkZGRkZGRkZGRkY7XG52YXIgTUFYSU1VTV9BTExPV0VEX0lOREVYX0VYQ0VFREVEID0gJ01heGltdW0gYWxsb3dlZCBpbmRleCBleGNlZWRlZCc7XG5cbnZhciBJU19DT05DQVRfU1BSRUFEQUJMRV9TVVBQT1JUID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgdmFyIGFycmF5ID0gW107XG4gIGFycmF5W0lTX0NPTkNBVF9TUFJFQURBQkxFXSA9IGZhbHNlO1xuICByZXR1cm4gYXJyYXkuY29uY2F0KClbMF0gIT09IGFycmF5O1xufSk7XG5cbnZhciBTUEVDSUVTX1NVUFBPUlQgPSBhcnJheU1ldGhvZEhhc1NwZWNpZXNTdXBwb3J0KCdjb25jYXQnKTtcblxudmFyIGlzQ29uY2F0U3ByZWFkYWJsZSA9IGZ1bmN0aW9uIChPKSB7XG4gIGlmICghaXNPYmplY3QoTykpIHJldHVybiBmYWxzZTtcbiAgdmFyIHNwcmVhZGFibGUgPSBPW0lTX0NPTkNBVF9TUFJFQURBQkxFXTtcbiAgcmV0dXJuIHNwcmVhZGFibGUgIT09IHVuZGVmaW5lZCA/ICEhc3ByZWFkYWJsZSA6IGlzQXJyYXkoTyk7XG59O1xuXG52YXIgRk9SQ0VEID0gIUlTX0NPTkNBVF9TUFJFQURBQkxFX1NVUFBPUlQgfHwgIVNQRUNJRVNfU1VQUE9SVDtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5jb25jYXRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmNvbmNhdFxuLy8gd2l0aCBhZGRpbmcgc3VwcG9ydCBvZiBAQGlzQ29uY2F0U3ByZWFkYWJsZSBhbmQgQEBzcGVjaWVzXG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBGT1JDRUQgfSwge1xuICBjb25jYXQ6IGZ1bmN0aW9uIGNvbmNhdChhcmcpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gICAgdmFyIEEgPSBhcnJheVNwZWNpZXNDcmVhdGUoTywgMCk7XG4gICAgdmFyIG4gPSAwO1xuICAgIHZhciBpLCBrLCBsZW5ndGgsIGxlbiwgRTtcbiAgICBmb3IgKGkgPSAtMSwgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBFID0gaSA9PT0gLTEgPyBPIDogYXJndW1lbnRzW2ldO1xuICAgICAgaWYgKGlzQ29uY2F0U3ByZWFkYWJsZShFKSkge1xuICAgICAgICBsZW4gPSB0b0xlbmd0aChFLmxlbmd0aCk7XG4gICAgICAgIGlmIChuICsgbGVuID4gTUFYX1NBRkVfSU5URUdFUikgdGhyb3cgVHlwZUVycm9yKE1BWElNVU1fQUxMT1dFRF9JTkRFWF9FWENFRURFRCk7XG4gICAgICAgIGZvciAoayA9IDA7IGsgPCBsZW47IGsrKywgbisrKSBpZiAoayBpbiBFKSBjcmVhdGVQcm9wZXJ0eShBLCBuLCBFW2tdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChuID49IE1BWF9TQUZFX0lOVEVHRVIpIHRocm93IFR5cGVFcnJvcihNQVhJTVVNX0FMTE9XRURfSU5ERVhfRVhDRUVERUQpO1xuICAgICAgICBjcmVhdGVQcm9wZXJ0eShBLCBuKyssIEUpO1xuICAgICAgfVxuICAgIH1cbiAgICBBLmxlbmd0aCA9IG47XG4gICAgcmV0dXJuIEE7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgJG1hcCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pdGVyYXRpb24nKS5tYXA7XG52YXIgYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1tZXRob2QtaGFzLXNwZWNpZXMtc3VwcG9ydCcpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLm1hcGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUubWFwXG4vLyB3aXRoIGFkZGluZyBzdXBwb3J0IG9mIEBAc3BlY2llc1xuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGZvcmNlZDogIWFycmF5TWV0aG9kSGFzU3BlY2llc1N1cHBvcnQoJ21hcCcpIH0sIHtcbiAgbWFwOiBmdW5jdGlvbiBtYXAoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICByZXR1cm4gJG1hcCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xuIiwiLy8gYSBzdHJpbmcgb2YgYWxsIHZhbGlkIHVuaWNvZGUgd2hpdGVzcGFjZXNcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBtYXgtbGVuXG5tb2R1bGUuZXhwb3J0cyA9ICdcXHUwMDA5XFx1MDAwQVxcdTAwMEJcXHUwMDBDXFx1MDAwRFxcdTAwMjBcXHUwMEEwXFx1MTY4MFxcdTIwMDBcXHUyMDAxXFx1MjAwMlxcdTIwMDNcXHUyMDA0XFx1MjAwNVxcdTIwMDZcXHUyMDA3XFx1MjAwOFxcdTIwMDlcXHUyMDBBXFx1MjAyRlxcdTIwNUZcXHUzMDAwXFx1MjAyOFxcdTIwMjlcXHVGRUZGJztcbiIsIid1c2Ugc3RyaWN0JztcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgZmxhZ3MgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLWZsYWdzJyk7XG5cbnZhciBUT19TVFJJTkcgPSAndG9TdHJpbmcnO1xudmFyIFJlZ0V4cFByb3RvdHlwZSA9IFJlZ0V4cC5wcm90b3R5cGU7XG52YXIgbmF0aXZlVG9TdHJpbmcgPSBSZWdFeHBQcm90b3R5cGVbVE9fU1RSSU5HXTtcblxudmFyIE5PVF9HRU5FUklDID0gZmFpbHMoZnVuY3Rpb24gKCkgeyByZXR1cm4gbmF0aXZlVG9TdHJpbmcuY2FsbCh7IHNvdXJjZTogJ2EnLCBmbGFnczogJ2InIH0pICE9ICcvYS9iJzsgfSk7XG4vLyBGRjQ0LSBSZWdFeHAjdG9TdHJpbmcgaGFzIGEgd3JvbmcgbmFtZVxudmFyIElOQ09SUkVDVF9OQU1FID0gbmF0aXZlVG9TdHJpbmcubmFtZSAhPSBUT19TVFJJTkc7XG5cbi8vIGBSZWdFeHAucHJvdG90eXBlLnRvU3RyaW5nYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXJlZ2V4cC5wcm90b3R5cGUudG9zdHJpbmdcbmlmIChOT1RfR0VORVJJQyB8fCBJTkNPUlJFQ1RfTkFNRSkge1xuICByZWRlZmluZShSZWdFeHAucHJvdG90eXBlLCBUT19TVFJJTkcsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHZhciBSID0gYW5PYmplY3QodGhpcyk7XG4gICAgdmFyIHAgPSBTdHJpbmcoUi5zb3VyY2UpO1xuICAgIHZhciByZiA9IFIuZmxhZ3M7XG4gICAgdmFyIGYgPSBTdHJpbmcocmYgPT09IHVuZGVmaW5lZCAmJiBSIGluc3RhbmNlb2YgUmVnRXhwICYmICEoJ2ZsYWdzJyBpbiBSZWdFeHBQcm90b3R5cGUpID8gZmxhZ3MuY2FsbChSKSA6IHJmKTtcbiAgICByZXR1cm4gJy8nICsgcCArICcvJyArIGY7XG4gIH0sIHsgdW5zYWZlOiB0cnVlIH0pO1xufVxuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIENvbnN0cnVjdG9yLCBuYW1lKSB7XG4gIGlmICghKGl0IGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgdGhyb3cgVHlwZUVycm9yKCdJbmNvcnJlY3QgJyArIChuYW1lID8gbmFtZSArICcgJyA6ICcnKSArICdpbnZvY2F0aW9uJyk7XG4gIH0gcmV0dXJuIGl0O1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YtcmF3Jyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9iaW5kLWNvbnRleHQnKTtcbnZhciBodG1sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2h0bWwnKTtcbnZhciBjcmVhdGVFbGVtZW50ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RvY3VtZW50LWNyZWF0ZS1lbGVtZW50Jyk7XG5cbnZhciBsb2NhdGlvbiA9IGdsb2JhbC5sb2NhdGlvbjtcbnZhciBzZXQgPSBnbG9iYWwuc2V0SW1tZWRpYXRlO1xudmFyIGNsZWFyID0gZ2xvYmFsLmNsZWFySW1tZWRpYXRlO1xudmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcztcbnZhciBNZXNzYWdlQ2hhbm5lbCA9IGdsb2JhbC5NZXNzYWdlQ2hhbm5lbDtcbnZhciBEaXNwYXRjaCA9IGdsb2JhbC5EaXNwYXRjaDtcbnZhciBjb3VudGVyID0gMDtcbnZhciBxdWV1ZSA9IHt9O1xudmFyIE9OUkVBRFlTVEFURUNIQU5HRSA9ICdvbnJlYWR5c3RhdGVjaGFuZ2UnO1xudmFyIGRlZmVyLCBjaGFubmVsLCBwb3J0O1xuXG52YXIgcnVuID0gZnVuY3Rpb24gKGlkKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnNcbiAgaWYgKHF1ZXVlLmhhc093blByb3BlcnR5KGlkKSkge1xuICAgIHZhciBmbiA9IHF1ZXVlW2lkXTtcbiAgICBkZWxldGUgcXVldWVbaWRdO1xuICAgIGZuKCk7XG4gIH1cbn07XG5cbnZhciBydW5uZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBydW4oaWQpO1xuICB9O1xufTtcblxudmFyIGxpc3RlbmVyID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gIHJ1bihldmVudC5kYXRhKTtcbn07XG5cbnZhciBwb3N0ID0gZnVuY3Rpb24gKGlkKSB7XG4gIC8vIG9sZCBlbmdpbmVzIGhhdmUgbm90IGxvY2F0aW9uLm9yaWdpblxuICBnbG9iYWwucG9zdE1lc3NhZ2UoaWQgKyAnJywgbG9jYXRpb24ucHJvdG9jb2wgKyAnLy8nICsgbG9jYXRpb24uaG9zdCk7XG59O1xuXG4vLyBOb2RlLmpzIDAuOSsgJiBJRTEwKyBoYXMgc2V0SW1tZWRpYXRlLCBvdGhlcndpc2U6XG5pZiAoIXNldCB8fCAhY2xlYXIpIHtcbiAgc2V0ID0gZnVuY3Rpb24gc2V0SW1tZWRpYXRlKGZuKSB7XG4gICAgdmFyIGFyZ3MgPSBbXTtcbiAgICB2YXIgaSA9IDE7XG4gICAgd2hpbGUgKGFyZ3VtZW50cy5sZW5ndGggPiBpKSBhcmdzLnB1c2goYXJndW1lbnRzW2krK10pO1xuICAgIHF1ZXVlWysrY291bnRlcl0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcbiAgICAgICh0eXBlb2YgZm4gPT0gJ2Z1bmN0aW9uJyA/IGZuIDogRnVuY3Rpb24oZm4pKS5hcHBseSh1bmRlZmluZWQsIGFyZ3MpO1xuICAgIH07XG4gICAgZGVmZXIoY291bnRlcik7XG4gICAgcmV0dXJuIGNvdW50ZXI7XG4gIH07XG4gIGNsZWFyID0gZnVuY3Rpb24gY2xlYXJJbW1lZGlhdGUoaWQpIHtcbiAgICBkZWxldGUgcXVldWVbaWRdO1xuICB9O1xuICAvLyBOb2RlLmpzIDAuOC1cbiAgaWYgKGNsYXNzb2YocHJvY2VzcykgPT0gJ3Byb2Nlc3MnKSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIHByb2Nlc3MubmV4dFRpY2socnVubmVyKGlkKSk7XG4gICAgfTtcbiAgLy8gU3BoZXJlIChKUyBnYW1lIGVuZ2luZSkgRGlzcGF0Y2ggQVBJXG4gIH0gZWxzZSBpZiAoRGlzcGF0Y2ggJiYgRGlzcGF0Y2gubm93KSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIERpc3BhdGNoLm5vdyhydW5uZXIoaWQpKTtcbiAgICB9O1xuICAvLyBCcm93c2VycyB3aXRoIE1lc3NhZ2VDaGFubmVsLCBpbmNsdWRlcyBXZWJXb3JrZXJzXG4gIH0gZWxzZSBpZiAoTWVzc2FnZUNoYW5uZWwpIHtcbiAgICBjaGFubmVsID0gbmV3IE1lc3NhZ2VDaGFubmVsKCk7XG4gICAgcG9ydCA9IGNoYW5uZWwucG9ydDI7XG4gICAgY2hhbm5lbC5wb3J0MS5vbm1lc3NhZ2UgPSBsaXN0ZW5lcjtcbiAgICBkZWZlciA9IGJpbmQocG9ydC5wb3N0TWVzc2FnZSwgcG9ydCwgMSk7XG4gIC8vIEJyb3dzZXJzIHdpdGggcG9zdE1lc3NhZ2UsIHNraXAgV2ViV29ya2Vyc1xuICAvLyBJRTggaGFzIHBvc3RNZXNzYWdlLCBidXQgaXQncyBzeW5jICYgdHlwZW9mIGl0cyBwb3N0TWVzc2FnZSBpcyAnb2JqZWN0J1xuICB9IGVsc2UgaWYgKGdsb2JhbC5hZGRFdmVudExpc3RlbmVyICYmIHR5cGVvZiBwb3N0TWVzc2FnZSA9PSAnZnVuY3Rpb24nICYmICFnbG9iYWwuaW1wb3J0U2NyaXB0cyAmJiAhZmFpbHMocG9zdCkpIHtcbiAgICBkZWZlciA9IHBvc3Q7XG4gICAgZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCBsaXN0ZW5lciwgZmFsc2UpO1xuICAvLyBJRTgtXG4gIH0gZWxzZSBpZiAoT05SRUFEWVNUQVRFQ0hBTkdFIGluIGNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpKSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIGh0bWwuYXBwZW5kQ2hpbGQoY3JlYXRlRWxlbWVudCgnc2NyaXB0JykpW09OUkVBRFlTVEFURUNIQU5HRV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGh0bWwucmVtb3ZlQ2hpbGQodGhpcyk7XG4gICAgICAgIHJ1bihpZCk7XG4gICAgICB9O1xuICAgIH07XG4gIC8vIFJlc3Qgb2xkIGJyb3dzZXJzXG4gIH0gZWxzZSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIHNldFRpbWVvdXQocnVubmVyKGlkKSwgMCk7XG4gICAgfTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc2V0OiBzZXQsXG4gIGNsZWFyOiBjbGVhclxufTtcbiIsInZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGdldEJ1aWx0SW4oJ25hdmlnYXRvcicsICd1c2VyQWdlbnQnKSB8fCAnJztcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1mdW5jdGlvbicpO1xuXG52YXIgUHJvbWlzZUNhcGFiaWxpdHkgPSBmdW5jdGlvbiAoQykge1xuICB2YXIgcmVzb2x2ZSwgcmVqZWN0O1xuICB0aGlzLnByb21pc2UgPSBuZXcgQyhmdW5jdGlvbiAoJCRyZXNvbHZlLCAkJHJlamVjdCkge1xuICAgIGlmIChyZXNvbHZlICE9PSB1bmRlZmluZWQgfHwgcmVqZWN0ICE9PSB1bmRlZmluZWQpIHRocm93IFR5cGVFcnJvcignQmFkIFByb21pc2UgY29uc3RydWN0b3InKTtcbiAgICByZXNvbHZlID0gJCRyZXNvbHZlO1xuICAgIHJlamVjdCA9ICQkcmVqZWN0O1xuICB9KTtcbiAgdGhpcy5yZXNvbHZlID0gYUZ1bmN0aW9uKHJlc29sdmUpO1xuICB0aGlzLnJlamVjdCA9IGFGdW5jdGlvbihyZWplY3QpO1xufTtcblxuLy8gMjUuNC4xLjUgTmV3UHJvbWlzZUNhcGFiaWxpdHkoQylcbm1vZHVsZS5leHBvcnRzLmYgPSBmdW5jdGlvbiAoQykge1xuICByZXR1cm4gbmV3IFByb21pc2VDYXBhYmlsaXR5KEMpO1xufTtcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBvYmplY3RLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1rZXlzJyk7XG5cbi8vIGBPYmplY3QuZGVmaW5lUHJvcGVydGllc2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3QuZGVmaW5lcHJvcGVydGllc1xubW9kdWxlLmV4cG9ydHMgPSBERVNDUklQVE9SUyA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzIDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICB2YXIga2V5cyA9IG9iamVjdEtleXMoUHJvcGVydGllcyk7XG4gIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGtleTtcbiAgd2hpbGUgKGxlbmd0aCA+IGluZGV4KSBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mKE8sIGtleSA9IGtleXNbaW5kZXgrK10sIFByb3BlcnRpZXNba2V5XSk7XG4gIHJldHVybiBPO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGV4ZWMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLWV4ZWMnKTtcblxuJCh7IHRhcmdldDogJ1JlZ0V4cCcsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IC8uLy5leGVjICE9PSBleGVjIH0sIHtcbiAgZXhlYzogZXhlY1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBjcmVhdGVJdGVyYXRvckNvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1pdGVyYXRvci1jb25zdHJ1Y3RvcicpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtcHJvdG90eXBlLW9mJyk7XG52YXIgc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXNldC1wcm90b3R5cGUtb2YnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGlkZScpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9ycycpO1xudmFyIEl0ZXJhdG9yc0NvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0b3JzLWNvcmUnKTtcblxudmFyIEl0ZXJhdG9yUHJvdG90eXBlID0gSXRlcmF0b3JzQ29yZS5JdGVyYXRvclByb3RvdHlwZTtcbnZhciBCVUdHWV9TQUZBUklfSVRFUkFUT1JTID0gSXRlcmF0b3JzQ29yZS5CVUdHWV9TQUZBUklfSVRFUkFUT1JTO1xudmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xudmFyIEtFWVMgPSAna2V5cyc7XG52YXIgVkFMVUVTID0gJ3ZhbHVlcyc7XG52YXIgRU5UUklFUyA9ICdlbnRyaWVzJztcblxudmFyIHJldHVyblRoaXMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChJdGVyYWJsZSwgTkFNRSwgSXRlcmF0b3JDb25zdHJ1Y3RvciwgbmV4dCwgREVGQVVMVCwgSVNfU0VULCBGT1JDRUQpIHtcbiAgY3JlYXRlSXRlcmF0b3JDb25zdHJ1Y3RvcihJdGVyYXRvckNvbnN0cnVjdG9yLCBOQU1FLCBuZXh0KTtcblxuICB2YXIgZ2V0SXRlcmF0aW9uTWV0aG9kID0gZnVuY3Rpb24gKEtJTkQpIHtcbiAgICBpZiAoS0lORCA9PT0gREVGQVVMVCAmJiBkZWZhdWx0SXRlcmF0b3IpIHJldHVybiBkZWZhdWx0SXRlcmF0b3I7XG4gICAgaWYgKCFCVUdHWV9TQUZBUklfSVRFUkFUT1JTICYmIEtJTkQgaW4gSXRlcmFibGVQcm90b3R5cGUpIHJldHVybiBJdGVyYWJsZVByb3RvdHlwZVtLSU5EXTtcbiAgICBzd2l0Y2ggKEtJTkQpIHtcbiAgICAgIGNhc2UgS0VZUzogcmV0dXJuIGZ1bmN0aW9uIGtleXMoKSB7IHJldHVybiBuZXcgSXRlcmF0b3JDb25zdHJ1Y3Rvcih0aGlzLCBLSU5EKTsgfTtcbiAgICAgIGNhc2UgVkFMVUVTOiByZXR1cm4gZnVuY3Rpb24gdmFsdWVzKCkgeyByZXR1cm4gbmV3IEl0ZXJhdG9yQ29uc3RydWN0b3IodGhpcywgS0lORCk7IH07XG4gICAgICBjYXNlIEVOVFJJRVM6IHJldHVybiBmdW5jdGlvbiBlbnRyaWVzKCkgeyByZXR1cm4gbmV3IEl0ZXJhdG9yQ29uc3RydWN0b3IodGhpcywgS0lORCk7IH07XG4gICAgfSByZXR1cm4gZnVuY3Rpb24gKCkgeyByZXR1cm4gbmV3IEl0ZXJhdG9yQ29uc3RydWN0b3IodGhpcyk7IH07XG4gIH07XG5cbiAgdmFyIFRPX1NUUklOR19UQUcgPSBOQU1FICsgJyBJdGVyYXRvcic7XG4gIHZhciBJTkNPUlJFQ1RfVkFMVUVTX05BTUUgPSBmYWxzZTtcbiAgdmFyIEl0ZXJhYmxlUHJvdG90eXBlID0gSXRlcmFibGUucHJvdG90eXBlO1xuICB2YXIgbmF0aXZlSXRlcmF0b3IgPSBJdGVyYWJsZVByb3RvdHlwZVtJVEVSQVRPUl1cbiAgICB8fCBJdGVyYWJsZVByb3RvdHlwZVsnQEBpdGVyYXRvciddXG4gICAgfHwgREVGQVVMVCAmJiBJdGVyYWJsZVByb3RvdHlwZVtERUZBVUxUXTtcbiAgdmFyIGRlZmF1bHRJdGVyYXRvciA9ICFCVUdHWV9TQUZBUklfSVRFUkFUT1JTICYmIG5hdGl2ZUl0ZXJhdG9yIHx8IGdldEl0ZXJhdGlvbk1ldGhvZChERUZBVUxUKTtcbiAgdmFyIGFueU5hdGl2ZUl0ZXJhdG9yID0gTkFNRSA9PSAnQXJyYXknID8gSXRlcmFibGVQcm90b3R5cGUuZW50cmllcyB8fCBuYXRpdmVJdGVyYXRvciA6IG5hdGl2ZUl0ZXJhdG9yO1xuICB2YXIgQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlLCBtZXRob2RzLCBLRVk7XG5cbiAgLy8gZml4IG5hdGl2ZVxuICBpZiAoYW55TmF0aXZlSXRlcmF0b3IpIHtcbiAgICBDdXJyZW50SXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZihhbnlOYXRpdmVJdGVyYXRvci5jYWxsKG5ldyBJdGVyYWJsZSgpKSk7XG4gICAgaWYgKEl0ZXJhdG9yUHJvdG90eXBlICE9PSBPYmplY3QucHJvdG90eXBlICYmIEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZS5uZXh0KSB7XG4gICAgICBpZiAoIUlTX1BVUkUgJiYgZ2V0UHJvdG90eXBlT2YoQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlKSAhPT0gSXRlcmF0b3JQcm90b3R5cGUpIHtcbiAgICAgICAgaWYgKHNldFByb3RvdHlwZU9mKSB7XG4gICAgICAgICAgc2V0UHJvdG90eXBlT2YoQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlLCBJdGVyYXRvclByb3RvdHlwZSk7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZVtJVEVSQVRPUl0gIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIGhpZGUoQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlLCBJVEVSQVRPUiwgcmV0dXJuVGhpcyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIFNldCBAQHRvU3RyaW5nVGFnIHRvIG5hdGl2ZSBpdGVyYXRvcnNcbiAgICAgIHNldFRvU3RyaW5nVGFnKEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSwgVE9fU1RSSU5HX1RBRywgdHJ1ZSwgdHJ1ZSk7XG4gICAgICBpZiAoSVNfUFVSRSkgSXRlcmF0b3JzW1RPX1NUUklOR19UQUddID0gcmV0dXJuVGhpcztcbiAgICB9XG4gIH1cblxuICAvLyBmaXggQXJyYXkje3ZhbHVlcywgQEBpdGVyYXRvcn0ubmFtZSBpbiBWOCAvIEZGXG4gIGlmIChERUZBVUxUID09IFZBTFVFUyAmJiBuYXRpdmVJdGVyYXRvciAmJiBuYXRpdmVJdGVyYXRvci5uYW1lICE9PSBWQUxVRVMpIHtcbiAgICBJTkNPUlJFQ1RfVkFMVUVTX05BTUUgPSB0cnVlO1xuICAgIGRlZmF1bHRJdGVyYXRvciA9IGZ1bmN0aW9uIHZhbHVlcygpIHsgcmV0dXJuIG5hdGl2ZUl0ZXJhdG9yLmNhbGwodGhpcyk7IH07XG4gIH1cblxuICAvLyBkZWZpbmUgaXRlcmF0b3JcbiAgaWYgKCghSVNfUFVSRSB8fCBGT1JDRUQpICYmIEl0ZXJhYmxlUHJvdG90eXBlW0lURVJBVE9SXSAhPT0gZGVmYXVsdEl0ZXJhdG9yKSB7XG4gICAgaGlkZShJdGVyYWJsZVByb3RvdHlwZSwgSVRFUkFUT1IsIGRlZmF1bHRJdGVyYXRvcik7XG4gIH1cbiAgSXRlcmF0b3JzW05BTUVdID0gZGVmYXVsdEl0ZXJhdG9yO1xuXG4gIC8vIGV4cG9ydCBhZGRpdGlvbmFsIG1ldGhvZHNcbiAgaWYgKERFRkFVTFQpIHtcbiAgICBtZXRob2RzID0ge1xuICAgICAgdmFsdWVzOiBnZXRJdGVyYXRpb25NZXRob2QoVkFMVUVTKSxcbiAgICAgIGtleXM6IElTX1NFVCA/IGRlZmF1bHRJdGVyYXRvciA6IGdldEl0ZXJhdGlvbk1ldGhvZChLRVlTKSxcbiAgICAgIGVudHJpZXM6IGdldEl0ZXJhdGlvbk1ldGhvZChFTlRSSUVTKVxuICAgIH07XG4gICAgaWYgKEZPUkNFRCkgZm9yIChLRVkgaW4gbWV0aG9kcykge1xuICAgICAgaWYgKEJVR0dZX1NBRkFSSV9JVEVSQVRPUlMgfHwgSU5DT1JSRUNUX1ZBTFVFU19OQU1FIHx8ICEoS0VZIGluIEl0ZXJhYmxlUHJvdG90eXBlKSkge1xuICAgICAgICByZWRlZmluZShJdGVyYWJsZVByb3RvdHlwZSwgS0VZLCBtZXRob2RzW0tFWV0pO1xuICAgICAgfVxuICAgIH0gZWxzZSAkKHsgdGFyZ2V0OiBOQU1FLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBCVUdHWV9TQUZBUklfSVRFUkFUT1JTIHx8IElOQ09SUkVDVF9WQUxVRVNfTkFNRSB9LCBtZXRob2RzKTtcbiAgfVxuXG4gIHJldHVybiBtZXRob2RzO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBJdGVyYXRvclByb3RvdHlwZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvcnMtY29yZScpLkl0ZXJhdG9yUHJvdG90eXBlO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtY3JlYXRlJyk7XG52YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0b3JzJyk7XG5cbnZhciByZXR1cm5UaGlzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoSXRlcmF0b3JDb25zdHJ1Y3RvciwgTkFNRSwgbmV4dCkge1xuICB2YXIgVE9fU1RSSU5HX1RBRyA9IE5BTUUgKyAnIEl0ZXJhdG9yJztcbiAgSXRlcmF0b3JDb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBjcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUsIHsgbmV4dDogY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDEsIG5leHQpIH0pO1xuICBzZXRUb1N0cmluZ1RhZyhJdGVyYXRvckNvbnN0cnVjdG9yLCBUT19TVFJJTkdfVEFHLCBmYWxzZSwgdHJ1ZSk7XG4gIEl0ZXJhdG9yc1tUT19TVFJJTkdfVEFHXSA9IHJldHVyblRoaXM7XG4gIHJldHVybiBJdGVyYXRvckNvbnN0cnVjdG9yO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBmaXhSZWdFeHBXZWxsS25vd25TeW1ib2xMb2dpYyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9maXgtcmVnZXhwLXdlbGwta25vd24tc3ltYm9sLWxvZ2ljJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWludGVnZXInKTtcbnZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xudmFyIGFkdmFuY2VTdHJpbmdJbmRleCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hZHZhbmNlLXN0cmluZy1pbmRleCcpO1xudmFyIHJlZ0V4cEV4ZWMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLWV4ZWMtYWJzdHJhY3QnKTtcblxudmFyIG1heCA9IE1hdGgubWF4O1xudmFyIG1pbiA9IE1hdGgubWluO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbnZhciBTVUJTVElUVVRJT05fU1lNQk9MUyA9IC9cXCQoWyQmJ2BdfFxcZFxcZD98PFtePl0qPikvZztcbnZhciBTVUJTVElUVVRJT05fU1lNQk9MU19OT19OQU1FRCA9IC9cXCQoWyQmJ2BdfFxcZFxcZD8pL2c7XG5cbnZhciBtYXliZVRvU3RyaW5nID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCA9PT0gdW5kZWZpbmVkID8gaXQgOiBTdHJpbmcoaXQpO1xufTtcblxuLy8gQEByZXBsYWNlIGxvZ2ljXG5maXhSZWdFeHBXZWxsS25vd25TeW1ib2xMb2dpYygncmVwbGFjZScsIDIsIGZ1bmN0aW9uIChSRVBMQUNFLCBuYXRpdmVSZXBsYWNlLCBtYXliZUNhbGxOYXRpdmUpIHtcbiAgcmV0dXJuIFtcbiAgICAvLyBgU3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnJlcGxhY2VcbiAgICBmdW5jdGlvbiByZXBsYWNlKHNlYXJjaFZhbHVlLCByZXBsYWNlVmFsdWUpIHtcbiAgICAgIHZhciBPID0gcmVxdWlyZU9iamVjdENvZXJjaWJsZSh0aGlzKTtcbiAgICAgIHZhciByZXBsYWNlciA9IHNlYXJjaFZhbHVlID09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IHNlYXJjaFZhbHVlW1JFUExBQ0VdO1xuICAgICAgcmV0dXJuIHJlcGxhY2VyICE9PSB1bmRlZmluZWRcbiAgICAgICAgPyByZXBsYWNlci5jYWxsKHNlYXJjaFZhbHVlLCBPLCByZXBsYWNlVmFsdWUpXG4gICAgICAgIDogbmF0aXZlUmVwbGFjZS5jYWxsKFN0cmluZyhPKSwgc2VhcmNoVmFsdWUsIHJlcGxhY2VWYWx1ZSk7XG4gICAgfSxcbiAgICAvLyBgUmVnRXhwLnByb3RvdHlwZVtAQHJlcGxhY2VdYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1yZWdleHAucHJvdG90eXBlLUBAcmVwbGFjZVxuICAgIGZ1bmN0aW9uIChyZWdleHAsIHJlcGxhY2VWYWx1ZSkge1xuICAgICAgdmFyIHJlcyA9IG1heWJlQ2FsbE5hdGl2ZShuYXRpdmVSZXBsYWNlLCByZWdleHAsIHRoaXMsIHJlcGxhY2VWYWx1ZSk7XG4gICAgICBpZiAocmVzLmRvbmUpIHJldHVybiByZXMudmFsdWU7XG5cbiAgICAgIHZhciByeCA9IGFuT2JqZWN0KHJlZ2V4cCk7XG4gICAgICB2YXIgUyA9IFN0cmluZyh0aGlzKTtcblxuICAgICAgdmFyIGZ1bmN0aW9uYWxSZXBsYWNlID0gdHlwZW9mIHJlcGxhY2VWYWx1ZSA9PT0gJ2Z1bmN0aW9uJztcbiAgICAgIGlmICghZnVuY3Rpb25hbFJlcGxhY2UpIHJlcGxhY2VWYWx1ZSA9IFN0cmluZyhyZXBsYWNlVmFsdWUpO1xuXG4gICAgICB2YXIgZ2xvYmFsID0gcnguZ2xvYmFsO1xuICAgICAgaWYgKGdsb2JhbCkge1xuICAgICAgICB2YXIgZnVsbFVuaWNvZGUgPSByeC51bmljb2RlO1xuICAgICAgICByeC5sYXN0SW5kZXggPSAwO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdHMgPSBbXTtcbiAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSByZWdFeHBFeGVjKHJ4LCBTKTtcbiAgICAgICAgaWYgKHJlc3VsdCA9PT0gbnVsbCkgYnJlYWs7XG5cbiAgICAgICAgcmVzdWx0cy5wdXNoKHJlc3VsdCk7XG4gICAgICAgIGlmICghZ2xvYmFsKSBicmVhaztcblxuICAgICAgICB2YXIgbWF0Y2hTdHIgPSBTdHJpbmcocmVzdWx0WzBdKTtcbiAgICAgICAgaWYgKG1hdGNoU3RyID09PSAnJykgcngubGFzdEluZGV4ID0gYWR2YW5jZVN0cmluZ0luZGV4KFMsIHRvTGVuZ3RoKHJ4Lmxhc3RJbmRleCksIGZ1bGxVbmljb2RlKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGFjY3VtdWxhdGVkUmVzdWx0ID0gJyc7XG4gICAgICB2YXIgbmV4dFNvdXJjZVBvc2l0aW9uID0gMDtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmVzdWx0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICByZXN1bHQgPSByZXN1bHRzW2ldO1xuXG4gICAgICAgIHZhciBtYXRjaGVkID0gU3RyaW5nKHJlc3VsdFswXSk7XG4gICAgICAgIHZhciBwb3NpdGlvbiA9IG1heChtaW4odG9JbnRlZ2VyKHJlc3VsdC5pbmRleCksIFMubGVuZ3RoKSwgMCk7XG4gICAgICAgIHZhciBjYXB0dXJlcyA9IFtdO1xuICAgICAgICAvLyBOT1RFOiBUaGlzIGlzIGVxdWl2YWxlbnQgdG9cbiAgICAgICAgLy8gICBjYXB0dXJlcyA9IHJlc3VsdC5zbGljZSgxKS5tYXAobWF5YmVUb1N0cmluZylcbiAgICAgICAgLy8gYnV0IGZvciBzb21lIHJlYXNvbiBgbmF0aXZlU2xpY2UuY2FsbChyZXN1bHQsIDEsIHJlc3VsdC5sZW5ndGgpYCAoY2FsbGVkIGluXG4gICAgICAgIC8vIHRoZSBzbGljZSBwb2x5ZmlsbCB3aGVuIHNsaWNpbmcgbmF0aXZlIGFycmF5cykgXCJkb2Vzbid0IHdvcmtcIiBpbiBzYWZhcmkgOSBhbmRcbiAgICAgICAgLy8gY2F1c2VzIGEgY3Jhc2ggKGh0dHBzOi8vcGFzdGViaW4uY29tL04yMVF6ZVFBKSB3aGVuIHRyeWluZyB0byBkZWJ1ZyBpdC5cbiAgICAgICAgZm9yICh2YXIgaiA9IDE7IGogPCByZXN1bHQubGVuZ3RoOyBqKyspIGNhcHR1cmVzLnB1c2gobWF5YmVUb1N0cmluZyhyZXN1bHRbal0pKTtcbiAgICAgICAgdmFyIG5hbWVkQ2FwdHVyZXMgPSByZXN1bHQuZ3JvdXBzO1xuICAgICAgICBpZiAoZnVuY3Rpb25hbFJlcGxhY2UpIHtcbiAgICAgICAgICB2YXIgcmVwbGFjZXJBcmdzID0gW21hdGNoZWRdLmNvbmNhdChjYXB0dXJlcywgcG9zaXRpb24sIFMpO1xuICAgICAgICAgIGlmIChuYW1lZENhcHR1cmVzICE9PSB1bmRlZmluZWQpIHJlcGxhY2VyQXJncy5wdXNoKG5hbWVkQ2FwdHVyZXMpO1xuICAgICAgICAgIHZhciByZXBsYWNlbWVudCA9IFN0cmluZyhyZXBsYWNlVmFsdWUuYXBwbHkodW5kZWZpbmVkLCByZXBsYWNlckFyZ3MpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXBsYWNlbWVudCA9IGdldFN1YnN0aXR1dGlvbihtYXRjaGVkLCBTLCBwb3NpdGlvbiwgY2FwdHVyZXMsIG5hbWVkQ2FwdHVyZXMsIHJlcGxhY2VWYWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBvc2l0aW9uID49IG5leHRTb3VyY2VQb3NpdGlvbikge1xuICAgICAgICAgIGFjY3VtdWxhdGVkUmVzdWx0ICs9IFMuc2xpY2UobmV4dFNvdXJjZVBvc2l0aW9uLCBwb3NpdGlvbikgKyByZXBsYWNlbWVudDtcbiAgICAgICAgICBuZXh0U291cmNlUG9zaXRpb24gPSBwb3NpdGlvbiArIG1hdGNoZWQubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gYWNjdW11bGF0ZWRSZXN1bHQgKyBTLnNsaWNlKG5leHRTb3VyY2VQb3NpdGlvbik7XG4gICAgfVxuICBdO1xuXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWdldHN1YnN0aXR1dGlvblxuICBmdW5jdGlvbiBnZXRTdWJzdGl0dXRpb24obWF0Y2hlZCwgc3RyLCBwb3NpdGlvbiwgY2FwdHVyZXMsIG5hbWVkQ2FwdHVyZXMsIHJlcGxhY2VtZW50KSB7XG4gICAgdmFyIHRhaWxQb3MgPSBwb3NpdGlvbiArIG1hdGNoZWQubGVuZ3RoO1xuICAgIHZhciBtID0gY2FwdHVyZXMubGVuZ3RoO1xuICAgIHZhciBzeW1ib2xzID0gU1VCU1RJVFVUSU9OX1NZTUJPTFNfTk9fTkFNRUQ7XG4gICAgaWYgKG5hbWVkQ2FwdHVyZXMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgbmFtZWRDYXB0dXJlcyA9IHRvT2JqZWN0KG5hbWVkQ2FwdHVyZXMpO1xuICAgICAgc3ltYm9scyA9IFNVQlNUSVRVVElPTl9TWU1CT0xTO1xuICAgIH1cbiAgICByZXR1cm4gbmF0aXZlUmVwbGFjZS5jYWxsKHJlcGxhY2VtZW50LCBzeW1ib2xzLCBmdW5jdGlvbiAobWF0Y2gsIGNoKSB7XG4gICAgICB2YXIgY2FwdHVyZTtcbiAgICAgIHN3aXRjaCAoY2guY2hhckF0KDApKSB7XG4gICAgICAgIGNhc2UgJyQnOiByZXR1cm4gJyQnO1xuICAgICAgICBjYXNlICcmJzogcmV0dXJuIG1hdGNoZWQ7XG4gICAgICAgIGNhc2UgJ2AnOiByZXR1cm4gc3RyLnNsaWNlKDAsIHBvc2l0aW9uKTtcbiAgICAgICAgY2FzZSBcIidcIjogcmV0dXJuIHN0ci5zbGljZSh0YWlsUG9zKTtcbiAgICAgICAgY2FzZSAnPCc6XG4gICAgICAgICAgY2FwdHVyZSA9IG5hbWVkQ2FwdHVyZXNbY2guc2xpY2UoMSwgLTEpXTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDogLy8gXFxkXFxkP1xuICAgICAgICAgIHZhciBuID0gK2NoO1xuICAgICAgICAgIGlmIChuID09PSAwKSByZXR1cm4gbWF0Y2g7XG4gICAgICAgICAgaWYgKG4gPiBtKSB7XG4gICAgICAgICAgICB2YXIgZiA9IGZsb29yKG4gLyAxMCk7XG4gICAgICAgICAgICBpZiAoZiA9PT0gMCkgcmV0dXJuIG1hdGNoO1xuICAgICAgICAgICAgaWYgKGYgPD0gbSkgcmV0dXJuIGNhcHR1cmVzW2YgLSAxXSA9PT0gdW5kZWZpbmVkID8gY2guY2hhckF0KDEpIDogY2FwdHVyZXNbZiAtIDFdICsgY2guY2hhckF0KDEpO1xuICAgICAgICAgICAgcmV0dXJuIG1hdGNoO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjYXB0dXJlID0gY2FwdHVyZXNbbiAtIDFdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNhcHR1cmUgPT09IHVuZGVmaW5lZCA/ICcnIDogY2FwdHVyZTtcbiAgICB9KTtcbiAgfVxufSk7XG4iLCJmdW5jdGlvbiBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIGtleSwgYXJnKSB7XG4gIHRyeSB7XG4gICAgdmFyIGluZm8gPSBnZW5ba2V5XShhcmcpO1xuICAgIHZhciB2YWx1ZSA9IGluZm8udmFsdWU7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmVqZWN0KGVycm9yKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoaW5mby5kb25lKSB7XG4gICAgcmVzb2x2ZSh2YWx1ZSk7XG4gIH0gZWxzZSB7XG4gICAgUHJvbWlzZS5yZXNvbHZlKHZhbHVlKS50aGVuKF9uZXh0LCBfdGhyb3cpO1xuICB9XG59XG5cbmZ1bmN0aW9uIF9hc3luY1RvR2VuZXJhdG9yKGZuKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzLFxuICAgICAgICBhcmdzID0gYXJndW1lbnRzO1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB2YXIgZ2VuID0gZm4uYXBwbHkoc2VsZiwgYXJncyk7XG5cbiAgICAgIGZ1bmN0aW9uIF9uZXh0KHZhbHVlKSB7XG4gICAgICAgIGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywgXCJuZXh0XCIsIHZhbHVlKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gX3Rocm93KGVycikge1xuICAgICAgICBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIFwidGhyb3dcIiwgZXJyKTtcbiAgICAgIH1cblxuICAgICAgX25leHQodW5kZWZpbmVkKTtcbiAgICB9KTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfYXN5bmNUb0dlbmVyYXRvcjsiLCIndXNlIHN0cmljdCc7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9iaW5kLWNvbnRleHQnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciBjYWxsV2l0aFNhZmVJdGVyYXRpb25DbG9zaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NhbGwtd2l0aC1zYWZlLWl0ZXJhdGlvbi1jbG9zaW5nJyk7XG52YXIgaXNBcnJheUl0ZXJhdG9yTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWFycmF5LWl0ZXJhdG9yLW1ldGhvZCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xudmFyIGNyZWF0ZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eScpO1xudmFyIGdldEl0ZXJhdG9yTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1pdGVyYXRvci1tZXRob2QnKTtcblxuLy8gYEFycmF5LmZyb21gIG1ldGhvZCBpbXBsZW1lbnRhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkuZnJvbVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBmcm9tKGFycmF5TGlrZSAvKiAsIG1hcGZuID0gdW5kZWZpbmVkLCB0aGlzQXJnID0gdW5kZWZpbmVkICovKSB7XG4gIHZhciBPID0gdG9PYmplY3QoYXJyYXlMaWtlKTtcbiAgdmFyIEMgPSB0eXBlb2YgdGhpcyA9PSAnZnVuY3Rpb24nID8gdGhpcyA6IEFycmF5O1xuICB2YXIgYXJndW1lbnRzTGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgdmFyIG1hcGZuID0gYXJndW1lbnRzTGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZDtcbiAgdmFyIG1hcHBpbmcgPSBtYXBmbiAhPT0gdW5kZWZpbmVkO1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgaXRlcmF0b3JNZXRob2QgPSBnZXRJdGVyYXRvck1ldGhvZChPKTtcbiAgdmFyIGxlbmd0aCwgcmVzdWx0LCBzdGVwLCBpdGVyYXRvcjtcbiAgaWYgKG1hcHBpbmcpIG1hcGZuID0gYmluZChtYXBmbiwgYXJndW1lbnRzTGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZCwgMik7XG4gIC8vIGlmIHRoZSB0YXJnZXQgaXMgbm90IGl0ZXJhYmxlIG9yIGl0J3MgYW4gYXJyYXkgd2l0aCB0aGUgZGVmYXVsdCBpdGVyYXRvciAtIHVzZSBhIHNpbXBsZSBjYXNlXG4gIGlmIChpdGVyYXRvck1ldGhvZCAhPSB1bmRlZmluZWQgJiYgIShDID09IEFycmF5ICYmIGlzQXJyYXlJdGVyYXRvck1ldGhvZChpdGVyYXRvck1ldGhvZCkpKSB7XG4gICAgaXRlcmF0b3IgPSBpdGVyYXRvck1ldGhvZC5jYWxsKE8pO1xuICAgIHJlc3VsdCA9IG5ldyBDKCk7XG4gICAgZm9yICg7IShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lOyBpbmRleCsrKSB7XG4gICAgICBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGluZGV4LCBtYXBwaW5nXG4gICAgICAgID8gY2FsbFdpdGhTYWZlSXRlcmF0aW9uQ2xvc2luZyhpdGVyYXRvciwgbWFwZm4sIFtzdGVwLnZhbHVlLCBpbmRleF0sIHRydWUpXG4gICAgICAgIDogc3RlcC52YWx1ZVxuICAgICAgKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgIHJlc3VsdCA9IG5ldyBDKGxlbmd0aCk7XG4gICAgZm9yICg7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIHtcbiAgICAgIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwgaW5kZXgsIG1hcHBpbmcgPyBtYXBmbihPW2luZGV4XSwgaW5kZXgpIDogT1tpbmRleF0pO1xuICAgIH1cbiAgfVxuICByZXN1bHQubGVuZ3RoID0gaW5kZXg7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgbmF0aXZlS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qta2V5cycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbnZhciBGQUlMU19PTl9QUklNSVRJVkVTID0gZmFpbHMoZnVuY3Rpb24gKCkgeyBuYXRpdmVLZXlzKDEpOyB9KTtcblxuLy8gYE9iamVjdC5rZXlzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5rZXlzXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBGQUlMU19PTl9QUklNSVRJVkVTIH0sIHtcbiAga2V5czogZnVuY3Rpb24ga2V5cyhpdCkge1xuICAgIHJldHVybiBuYXRpdmVLZXlzKHRvT2JqZWN0KGl0KSk7XG4gIH1cbn0pO1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZi1yYXcnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIE1BVENIID0gd2VsbEtub3duU3ltYm9sKCdtYXRjaCcpO1xuXG4vLyBgSXNSZWdFeHBgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtaXNyZWdleHBcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciBpc1JlZ0V4cDtcbiAgcmV0dXJuIGlzT2JqZWN0KGl0KSAmJiAoKGlzUmVnRXhwID0gaXRbTUFUQ0hdKSAhPT0gdW5kZWZpbmVkID8gISFpc1JlZ0V4cCA6IGNsYXNzb2YoaXQpID09ICdSZWdFeHAnKTtcbn07XG4iLCJ2YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGFyZ2V0LCBzcmMsIG9wdGlvbnMpIHtcbiAgZm9yICh2YXIga2V5IGluIHNyYykgcmVkZWZpbmUodGFyZ2V0LCBrZXksIHNyY1trZXldLCBvcHRpb25zKTtcbiAgcmV0dXJuIHRhcmdldDtcbn07XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmICghaXNPYmplY3QoaXQpICYmIGl0ICE9PSBudWxsKSB7XG4gICAgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3Qgc2V0IFwiICsgU3RyaW5nKGl0KSArICcgYXMgYSBwcm90b3R5cGUnKTtcbiAgfSByZXR1cm4gaXQ7XG59O1xuIiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gRigpIHsgLyogZW1wdHkgKi8gfVxuICBGLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IG51bGw7XG4gIHJldHVybiBPYmplY3QuZ2V0UHJvdG90eXBlT2YobmV3IEYoKSkgIT09IEYucHJvdG90eXBlO1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oaWRlJyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIHJlZ2V4cEV4ZWMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLWV4ZWMnKTtcblxudmFyIFNQRUNJRVMgPSB3ZWxsS25vd25TeW1ib2woJ3NwZWNpZXMnKTtcblxudmFyIFJFUExBQ0VfU1VQUE9SVFNfTkFNRURfR1JPVVBTID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gI3JlcGxhY2UgbmVlZHMgYnVpbHQtaW4gc3VwcG9ydCBmb3IgbmFtZWQgZ3JvdXBzLlxuICAvLyAjbWF0Y2ggd29ya3MgZmluZSBiZWNhdXNlIGl0IGp1c3QgcmV0dXJuIHRoZSBleGVjIHJlc3VsdHMsIGV2ZW4gaWYgaXQgaGFzXG4gIC8vIGEgXCJncm9wc1wiIHByb3BlcnR5LlxuICB2YXIgcmUgPSAvLi87XG4gIHJlLmV4ZWMgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgIHJlc3VsdC5ncm91cHMgPSB7IGE6ICc3JyB9O1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG4gIHJldHVybiAnJy5yZXBsYWNlKHJlLCAnJDxhPicpICE9PSAnNyc7XG59KTtcblxuLy8gQ2hyb21lIDUxIGhhcyBhIGJ1Z2d5IFwic3BsaXRcIiBpbXBsZW1lbnRhdGlvbiB3aGVuIFJlZ0V4cCNleGVjICE9PSBuYXRpdmVFeGVjXG4vLyBXZWV4IEpTIGhhcyBmcm96ZW4gYnVpbHQtaW4gcHJvdG90eXBlcywgc28gdXNlIHRyeSAvIGNhdGNoIHdyYXBwZXJcbnZhciBTUExJVF9XT1JLU19XSVRIX09WRVJXUklUVEVOX0VYRUMgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICB2YXIgcmUgPSAvKD86KS87XG4gIHZhciBvcmlnaW5hbEV4ZWMgPSByZS5leGVjO1xuICByZS5leGVjID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gb3JpZ2luYWxFeGVjLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH07XG4gIHZhciByZXN1bHQgPSAnYWInLnNwbGl0KHJlKTtcbiAgcmV0dXJuIHJlc3VsdC5sZW5ndGggIT09IDIgfHwgcmVzdWx0WzBdICE9PSAnYScgfHwgcmVzdWx0WzFdICE9PSAnYic7XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZLCBsZW5ndGgsIGV4ZWMsIHNoYW0pIHtcbiAgdmFyIFNZTUJPTCA9IHdlbGxLbm93blN5bWJvbChLRVkpO1xuXG4gIHZhciBERUxFR0FURVNfVE9fU1lNQk9MID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBTdHJpbmcgbWV0aG9kcyBjYWxsIHN5bWJvbC1uYW1lZCBSZWdFcCBtZXRob2RzXG4gICAgdmFyIE8gPSB7fTtcbiAgICBPW1NZTUJPTF0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9O1xuICAgIHJldHVybiAnJ1tLRVldKE8pICE9IDc7XG4gIH0pO1xuXG4gIHZhciBERUxFR0FURVNfVE9fRVhFQyA9IERFTEVHQVRFU19UT19TWU1CT0wgJiYgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBTeW1ib2wtbmFtZWQgUmVnRXhwIG1ldGhvZHMgY2FsbCAuZXhlY1xuICAgIHZhciBleGVjQ2FsbGVkID0gZmFsc2U7XG4gICAgdmFyIHJlID0gL2EvO1xuICAgIHJlLmV4ZWMgPSBmdW5jdGlvbiAoKSB7IGV4ZWNDYWxsZWQgPSB0cnVlOyByZXR1cm4gbnVsbDsgfTtcblxuICAgIGlmIChLRVkgPT09ICdzcGxpdCcpIHtcbiAgICAgIC8vIFJlZ0V4cFtAQHNwbGl0XSBkb2Vzbid0IGNhbGwgdGhlIHJlZ2V4J3MgZXhlYyBtZXRob2QsIGJ1dCBmaXJzdCBjcmVhdGVzXG4gICAgICAvLyBhIG5ldyBvbmUuIFdlIG5lZWQgdG8gcmV0dXJuIHRoZSBwYXRjaGVkIHJlZ2V4IHdoZW4gY3JlYXRpbmcgdGhlIG5ldyBvbmUuXG4gICAgICByZS5jb25zdHJ1Y3RvciA9IHt9O1xuICAgICAgcmUuY29uc3RydWN0b3JbU1BFQ0lFU10gPSBmdW5jdGlvbiAoKSB7IHJldHVybiByZTsgfTtcbiAgICB9XG5cbiAgICByZVtTWU1CT0xdKCcnKTtcbiAgICByZXR1cm4gIWV4ZWNDYWxsZWQ7XG4gIH0pO1xuXG4gIGlmIChcbiAgICAhREVMRUdBVEVTX1RPX1NZTUJPTCB8fFxuICAgICFERUxFR0FURVNfVE9fRVhFQyB8fFxuICAgIChLRVkgPT09ICdyZXBsYWNlJyAmJiAhUkVQTEFDRV9TVVBQT1JUU19OQU1FRF9HUk9VUFMpIHx8XG4gICAgKEtFWSA9PT0gJ3NwbGl0JyAmJiAhU1BMSVRfV09SS1NfV0lUSF9PVkVSV1JJVFRFTl9FWEVDKVxuICApIHtcbiAgICB2YXIgbmF0aXZlUmVnRXhwTWV0aG9kID0gLy4vW1NZTUJPTF07XG4gICAgdmFyIG1ldGhvZHMgPSBleGVjKFNZTUJPTCwgJydbS0VZXSwgZnVuY3Rpb24gKG5hdGl2ZU1ldGhvZCwgcmVnZXhwLCBzdHIsIGFyZzIsIGZvcmNlU3RyaW5nTWV0aG9kKSB7XG4gICAgICBpZiAocmVnZXhwLmV4ZWMgPT09IHJlZ2V4cEV4ZWMpIHtcbiAgICAgICAgaWYgKERFTEVHQVRFU19UT19TWU1CT0wgJiYgIWZvcmNlU3RyaW5nTWV0aG9kKSB7XG4gICAgICAgICAgLy8gVGhlIG5hdGl2ZSBTdHJpbmcgbWV0aG9kIGFscmVhZHkgZGVsZWdhdGVzIHRvIEBAbWV0aG9kICh0aGlzXG4gICAgICAgICAgLy8gcG9seWZpbGxlZCBmdW5jdGlvbiksIGxlYXNpbmcgdG8gaW5maW5pdGUgcmVjdXJzaW9uLlxuICAgICAgICAgIC8vIFdlIGF2b2lkIGl0IGJ5IGRpcmVjdGx5IGNhbGxpbmcgdGhlIG5hdGl2ZSBAQG1ldGhvZCBtZXRob2QuXG4gICAgICAgICAgcmV0dXJuIHsgZG9uZTogdHJ1ZSwgdmFsdWU6IG5hdGl2ZVJlZ0V4cE1ldGhvZC5jYWxsKHJlZ2V4cCwgc3RyLCBhcmcyKSB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IGRvbmU6IHRydWUsIHZhbHVlOiBuYXRpdmVNZXRob2QuY2FsbChzdHIsIHJlZ2V4cCwgYXJnMikgfTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB7IGRvbmU6IGZhbHNlIH07XG4gICAgfSk7XG4gICAgdmFyIHN0cmluZ01ldGhvZCA9IG1ldGhvZHNbMF07XG4gICAgdmFyIHJlZ2V4TWV0aG9kID0gbWV0aG9kc1sxXTtcblxuICAgIHJlZGVmaW5lKFN0cmluZy5wcm90b3R5cGUsIEtFWSwgc3RyaW5nTWV0aG9kKTtcbiAgICByZWRlZmluZShSZWdFeHAucHJvdG90eXBlLCBTWU1CT0wsIGxlbmd0aCA9PSAyXG4gICAgICAvLyAyMS4yLjUuOCBSZWdFeHAucHJvdG90eXBlW0BAcmVwbGFjZV0oc3RyaW5nLCByZXBsYWNlVmFsdWUpXG4gICAgICAvLyAyMS4yLjUuMTEgUmVnRXhwLnByb3RvdHlwZVtAQHNwbGl0XShzdHJpbmcsIGxpbWl0KVxuICAgICAgPyBmdW5jdGlvbiAoc3RyaW5nLCBhcmcpIHsgcmV0dXJuIHJlZ2V4TWV0aG9kLmNhbGwoc3RyaW5nLCB0aGlzLCBhcmcpOyB9XG4gICAgICAvLyAyMS4yLjUuNiBSZWdFeHAucHJvdG90eXBlW0BAbWF0Y2hdKHN0cmluZylcbiAgICAgIC8vIDIxLjIuNS45IFJlZ0V4cC5wcm90b3R5cGVbQEBzZWFyY2hdKHN0cmluZylcbiAgICAgIDogZnVuY3Rpb24gKHN0cmluZykgeyByZXR1cm4gcmVnZXhNZXRob2QuY2FsbChzdHJpbmcsIHRoaXMpOyB9XG4gICAgKTtcbiAgICBpZiAoc2hhbSkgaGlkZShSZWdFeHAucHJvdG90eXBlW1NZTUJPTF0sICdzaGFtJywgdHJ1ZSk7XG4gIH1cbn07XG4iLCJ2YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4vY2xhc3NvZi1yYXcnKTtcbnZhciByZWdleHBFeGVjID0gcmVxdWlyZSgnLi9yZWdleHAtZXhlYycpO1xuXG4vLyBgUmVnRXhwRXhlY2AgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1yZWdleHBleGVjXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChSLCBTKSB7XG4gIHZhciBleGVjID0gUi5leGVjO1xuICBpZiAodHlwZW9mIGV4ZWMgPT09ICdmdW5jdGlvbicpIHtcbiAgICB2YXIgcmVzdWx0ID0gZXhlYy5jYWxsKFIsIFMpO1xuICAgIGlmICh0eXBlb2YgcmVzdWx0ICE9PSAnb2JqZWN0Jykge1xuICAgICAgdGhyb3cgVHlwZUVycm9yKCdSZWdFeHAgZXhlYyBtZXRob2QgcmV0dXJuZWQgc29tZXRoaW5nIG90aGVyIHRoYW4gYW4gT2JqZWN0IG9yIG51bGwnKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIGlmIChjbGFzc29mKFIpICE9PSAnUmVnRXhwJykge1xuICAgIHRocm93IFR5cGVFcnJvcignUmVnRXhwI2V4ZWMgY2FsbGVkIG9uIGluY29tcGF0aWJsZSByZWNlaXZlcicpO1xuICB9XG5cbiAgcmV0dXJuIHJlZ2V4cEV4ZWMuY2FsbChSLCBTKTtcbn07XG5cbiIsIi8qKlxuICogQHRoaXMge1Byb21pc2V9XG4gKi9cbmZ1bmN0aW9uIGZpbmFsbHlDb25zdHJ1Y3RvcihjYWxsYmFjaykge1xuICB2YXIgY29uc3RydWN0b3IgPSB0aGlzLmNvbnN0cnVjdG9yO1xuICByZXR1cm4gdGhpcy50aGVuKFxuICAgIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICByZXR1cm4gY29uc3RydWN0b3IucmVzb2x2ZShjYWxsYmFjaygpKS50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9KTtcbiAgICB9LFxuICAgIGZ1bmN0aW9uKHJlYXNvbikge1xuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgcmV0dXJuIGNvbnN0cnVjdG9yLnJlc29sdmUoY2FsbGJhY2soKSkudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICByZXR1cm4gY29uc3RydWN0b3IucmVqZWN0KHJlYXNvbik7XG4gICAgICB9KTtcbiAgICB9XG4gICk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZpbmFsbHlDb25zdHJ1Y3RvcjtcbiIsInZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZScpO1xudmFyIHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC10by1zdHJpbmcnKTtcblxudmFyIE9iamVjdFByb3RvdHlwZSA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8vIGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmdcbmlmICh0b1N0cmluZyAhPT0gT2JqZWN0UHJvdG90eXBlLnRvU3RyaW5nKSB7XG4gIHJlZGVmaW5lKE9iamVjdFByb3RvdHlwZSwgJ3RvU3RyaW5nJywgdG9TdHJpbmcsIHsgdW5zYWZlOiB0cnVlIH0pO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHBhdGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcGF0aCcpO1xudmFyIE5hdGl2ZVByb21pc2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbmF0aXZlLXByb21pc2UtY29uc3RydWN0b3InKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZScpO1xudmFyIHJlZGVmaW5lQWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lLWFsbCcpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgc2V0U3BlY2llcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtc3BlY2llcycpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWZ1bmN0aW9uJyk7XG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1pbnN0YW5jZScpO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZi1yYXcnKTtcbnZhciBpdGVyYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdGUnKTtcbnZhciBjaGVja0NvcnJlY3RuZXNzT2ZJdGVyYXRpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2hlY2stY29ycmVjdG5lc3Mtb2YtaXRlcmF0aW9uJyk7XG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NwZWNpZXMtY29uc3RydWN0b3InKTtcbnZhciB0YXNrID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3Rhc2snKS5zZXQ7XG52YXIgbWljcm90YXNrID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL21pY3JvdGFzaycpO1xudmFyIHByb21pc2VSZXNvbHZlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3Byb21pc2UtcmVzb2x2ZScpO1xudmFyIGhvc3RSZXBvcnRFcnJvcnMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaG9zdC1yZXBvcnQtZXJyb3JzJyk7XG52YXIgbmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbmV3LXByb21pc2UtY2FwYWJpbGl0eScpO1xudmFyIHBlcmZvcm0gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcGVyZm9ybScpO1xudmFyIHVzZXJBZ2VudCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy91c2VyLWFnZW50Jyk7XG52YXIgSW50ZXJuYWxTdGF0ZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZScpO1xudmFyIGlzRm9yY2VkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWZvcmNlZCcpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgU1BFQ0lFUyA9IHdlbGxLbm93blN5bWJvbCgnc3BlY2llcycpO1xudmFyIFBST01JU0UgPSAnUHJvbWlzZSc7XG52YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0O1xudmFyIHNldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLnNldDtcbnZhciBnZXRJbnRlcm5hbFByb21pc2VTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0dGVyRm9yKFBST01JU0UpO1xudmFyIFByb21pc2VDb25zdHJ1Y3RvciA9IE5hdGl2ZVByb21pc2U7XG52YXIgVHlwZUVycm9yID0gZ2xvYmFsLlR5cGVFcnJvcjtcbnZhciBkb2N1bWVudCA9IGdsb2JhbC5kb2N1bWVudDtcbnZhciBwcm9jZXNzID0gZ2xvYmFsLnByb2Nlc3M7XG52YXIgJGZldGNoID0gZ2xvYmFsLmZldGNoO1xudmFyIHZlcnNpb25zID0gcHJvY2VzcyAmJiBwcm9jZXNzLnZlcnNpb25zO1xudmFyIHY4ID0gdmVyc2lvbnMgJiYgdmVyc2lvbnMudjggfHwgJyc7XG52YXIgbmV3UHJvbWlzZUNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZS5mO1xudmFyIG5ld0dlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5O1xudmFyIElTX05PREUgPSBjbGFzc29mKHByb2Nlc3MpID09ICdwcm9jZXNzJztcbnZhciBESVNQQVRDSF9FVkVOVCA9ICEhKGRvY3VtZW50ICYmIGRvY3VtZW50LmNyZWF0ZUV2ZW50ICYmIGdsb2JhbC5kaXNwYXRjaEV2ZW50KTtcbnZhciBVTkhBTkRMRURfUkVKRUNUSU9OID0gJ3VuaGFuZGxlZHJlamVjdGlvbic7XG52YXIgUkVKRUNUSU9OX0hBTkRMRUQgPSAncmVqZWN0aW9uaGFuZGxlZCc7XG52YXIgUEVORElORyA9IDA7XG52YXIgRlVMRklMTEVEID0gMTtcbnZhciBSRUpFQ1RFRCA9IDI7XG52YXIgSEFORExFRCA9IDE7XG52YXIgVU5IQU5ETEVEID0gMjtcbnZhciBJbnRlcm5hbCwgT3duUHJvbWlzZUNhcGFiaWxpdHksIFByb21pc2VXcmFwcGVyLCBuYXRpdmVUaGVuO1xuXG52YXIgRk9SQ0VEID0gaXNGb3JjZWQoUFJPTUlTRSwgZnVuY3Rpb24gKCkge1xuICAvLyBjb3JyZWN0IHN1YmNsYXNzaW5nIHdpdGggQEBzcGVjaWVzIHN1cHBvcnRcbiAgdmFyIHByb21pc2UgPSBQcm9taXNlQ29uc3RydWN0b3IucmVzb2x2ZSgxKTtcbiAgdmFyIGVtcHR5ID0gZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9O1xuICB2YXIgRmFrZVByb21pc2UgPSAocHJvbWlzZS5jb25zdHJ1Y3RvciA9IHt9KVtTUEVDSUVTXSA9IGZ1bmN0aW9uIChleGVjKSB7XG4gICAgZXhlYyhlbXB0eSwgZW1wdHkpO1xuICB9O1xuICAvLyB1bmhhbmRsZWQgcmVqZWN0aW9ucyB0cmFja2luZyBzdXBwb3J0LCBOb2RlSlMgUHJvbWlzZSB3aXRob3V0IGl0IGZhaWxzIEBAc3BlY2llcyB0ZXN0XG4gIHJldHVybiAhKChJU19OT0RFIHx8IHR5cGVvZiBQcm9taXNlUmVqZWN0aW9uRXZlbnQgPT0gJ2Z1bmN0aW9uJylcbiAgICAmJiAoIUlTX1BVUkUgfHwgcHJvbWlzZVsnZmluYWxseSddKVxuICAgICYmIHByb21pc2UudGhlbihlbXB0eSkgaW5zdGFuY2VvZiBGYWtlUHJvbWlzZVxuICAgIC8vIHY4IDYuNiAoTm9kZSAxMCBhbmQgQ2hyb21lIDY2KSBoYXZlIGEgYnVnIHdpdGggcmVzb2x2aW5nIGN1c3RvbSB0aGVuYWJsZXNcbiAgICAvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD04MzA1NjVcbiAgICAvLyB3ZSBjYW4ndCBkZXRlY3QgaXQgc3luY2hyb25vdXNseSwgc28ganVzdCBjaGVjayB2ZXJzaW9uc1xuICAgICYmIHY4LmluZGV4T2YoJzYuNicpICE9PSAwXG4gICAgJiYgdXNlckFnZW50LmluZGV4T2YoJ0Nocm9tZS82NicpID09PSAtMSk7XG59KTtcblxudmFyIElOQ09SUkVDVF9JVEVSQVRJT04gPSBGT1JDRUQgfHwgIWNoZWNrQ29ycmVjdG5lc3NPZkl0ZXJhdGlvbihmdW5jdGlvbiAoaXRlcmFibGUpIHtcbiAgUHJvbWlzZUNvbnN0cnVjdG9yLmFsbChpdGVyYWJsZSlbJ2NhdGNoJ10oZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9KTtcbn0pO1xuXG4vLyBoZWxwZXJzXG52YXIgaXNUaGVuYWJsZSA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgdGhlbjtcbiAgcmV0dXJuIGlzT2JqZWN0KGl0KSAmJiB0eXBlb2YgKHRoZW4gPSBpdC50aGVuKSA9PSAnZnVuY3Rpb24nID8gdGhlbiA6IGZhbHNlO1xufTtcblxudmFyIG5vdGlmeSA9IGZ1bmN0aW9uIChwcm9taXNlLCBzdGF0ZSwgaXNSZWplY3QpIHtcbiAgaWYgKHN0YXRlLm5vdGlmaWVkKSByZXR1cm47XG4gIHN0YXRlLm5vdGlmaWVkID0gdHJ1ZTtcbiAgdmFyIGNoYWluID0gc3RhdGUucmVhY3Rpb25zO1xuICBtaWNyb3Rhc2soZnVuY3Rpb24gKCkge1xuICAgIHZhciB2YWx1ZSA9IHN0YXRlLnZhbHVlO1xuICAgIHZhciBvayA9IHN0YXRlLnN0YXRlID09IEZVTEZJTExFRDtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIC8vIHZhcmlhYmxlIGxlbmd0aCAtIGNhbid0IHVzZSBmb3JFYWNoXG4gICAgd2hpbGUgKGNoYWluLmxlbmd0aCA+IGluZGV4KSB7XG4gICAgICB2YXIgcmVhY3Rpb24gPSBjaGFpbltpbmRleCsrXTtcbiAgICAgIHZhciBoYW5kbGVyID0gb2sgPyByZWFjdGlvbi5vayA6IHJlYWN0aW9uLmZhaWw7XG4gICAgICB2YXIgcmVzb2x2ZSA9IHJlYWN0aW9uLnJlc29sdmU7XG4gICAgICB2YXIgcmVqZWN0ID0gcmVhY3Rpb24ucmVqZWN0O1xuICAgICAgdmFyIGRvbWFpbiA9IHJlYWN0aW9uLmRvbWFpbjtcbiAgICAgIHZhciByZXN1bHQsIHRoZW4sIGV4aXRlZDtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmIChoYW5kbGVyKSB7XG4gICAgICAgICAgaWYgKCFvaykge1xuICAgICAgICAgICAgaWYgKHN0YXRlLnJlamVjdGlvbiA9PT0gVU5IQU5ETEVEKSBvbkhhbmRsZVVuaGFuZGxlZChwcm9taXNlLCBzdGF0ZSk7XG4gICAgICAgICAgICBzdGF0ZS5yZWplY3Rpb24gPSBIQU5ETEVEO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaGFuZGxlciA9PT0gdHJ1ZSkgcmVzdWx0ID0gdmFsdWU7XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAoZG9tYWluKSBkb21haW4uZW50ZXIoKTtcbiAgICAgICAgICAgIHJlc3VsdCA9IGhhbmRsZXIodmFsdWUpOyAvLyBjYW4gdGhyb3dcbiAgICAgICAgICAgIGlmIChkb21haW4pIHtcbiAgICAgICAgICAgICAgZG9tYWluLmV4aXQoKTtcbiAgICAgICAgICAgICAgZXhpdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHJlc3VsdCA9PT0gcmVhY3Rpb24ucHJvbWlzZSkge1xuICAgICAgICAgICAgcmVqZWN0KFR5cGVFcnJvcignUHJvbWlzZS1jaGFpbiBjeWNsZScpKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHRoZW4gPSBpc1RoZW5hYmxlKHJlc3VsdCkpIHtcbiAgICAgICAgICAgIHRoZW4uY2FsbChyZXN1bHQsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSBlbHNlIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgfSBlbHNlIHJlamVjdCh2YWx1ZSk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBpZiAoZG9tYWluICYmICFleGl0ZWQpIGRvbWFpbi5leGl0KCk7XG4gICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICB9XG4gICAgfVxuICAgIHN0YXRlLnJlYWN0aW9ucyA9IFtdO1xuICAgIHN0YXRlLm5vdGlmaWVkID0gZmFsc2U7XG4gICAgaWYgKGlzUmVqZWN0ICYmICFzdGF0ZS5yZWplY3Rpb24pIG9uVW5oYW5kbGVkKHByb21pc2UsIHN0YXRlKTtcbiAgfSk7XG59O1xuXG52YXIgZGlzcGF0Y2hFdmVudCA9IGZ1bmN0aW9uIChuYW1lLCBwcm9taXNlLCByZWFzb24pIHtcbiAgdmFyIGV2ZW50LCBoYW5kbGVyO1xuICBpZiAoRElTUEFUQ0hfRVZFTlQpIHtcbiAgICBldmVudCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdFdmVudCcpO1xuICAgIGV2ZW50LnByb21pc2UgPSBwcm9taXNlO1xuICAgIGV2ZW50LnJlYXNvbiA9IHJlYXNvbjtcbiAgICBldmVudC5pbml0RXZlbnQobmFtZSwgZmFsc2UsIHRydWUpO1xuICAgIGdsb2JhbC5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcbiAgfSBlbHNlIGV2ZW50ID0geyBwcm9taXNlOiBwcm9taXNlLCByZWFzb246IHJlYXNvbiB9O1xuICBpZiAoaGFuZGxlciA9IGdsb2JhbFsnb24nICsgbmFtZV0pIGhhbmRsZXIoZXZlbnQpO1xuICBlbHNlIGlmIChuYW1lID09PSBVTkhBTkRMRURfUkVKRUNUSU9OKSBob3N0UmVwb3J0RXJyb3JzKCdVbmhhbmRsZWQgcHJvbWlzZSByZWplY3Rpb24nLCByZWFzb24pO1xufTtcblxudmFyIG9uVW5oYW5kbGVkID0gZnVuY3Rpb24gKHByb21pc2UsIHN0YXRlKSB7XG4gIHRhc2suY2FsbChnbG9iYWwsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdmFsdWUgPSBzdGF0ZS52YWx1ZTtcbiAgICB2YXIgSVNfVU5IQU5ETEVEID0gaXNVbmhhbmRsZWQoc3RhdGUpO1xuICAgIHZhciByZXN1bHQ7XG4gICAgaWYgKElTX1VOSEFORExFRCkge1xuICAgICAgcmVzdWx0ID0gcGVyZm9ybShmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChJU19OT0RFKSB7XG4gICAgICAgICAgcHJvY2Vzcy5lbWl0KCd1bmhhbmRsZWRSZWplY3Rpb24nLCB2YWx1ZSwgcHJvbWlzZSk7XG4gICAgICAgIH0gZWxzZSBkaXNwYXRjaEV2ZW50KFVOSEFORExFRF9SRUpFQ1RJT04sIHByb21pc2UsIHZhbHVlKTtcbiAgICAgIH0pO1xuICAgICAgLy8gQnJvd3NlcnMgc2hvdWxkIG5vdCB0cmlnZ2VyIGByZWplY3Rpb25IYW5kbGVkYCBldmVudCBpZiBpdCB3YXMgaGFuZGxlZCBoZXJlLCBOb2RlSlMgLSBzaG91bGRcbiAgICAgIHN0YXRlLnJlamVjdGlvbiA9IElTX05PREUgfHwgaXNVbmhhbmRsZWQoc3RhdGUpID8gVU5IQU5ETEVEIDogSEFORExFRDtcbiAgICAgIGlmIChyZXN1bHQuZXJyb3IpIHRocm93IHJlc3VsdC52YWx1ZTtcbiAgICB9XG4gIH0pO1xufTtcblxudmFyIGlzVW5oYW5kbGVkID0gZnVuY3Rpb24gKHN0YXRlKSB7XG4gIHJldHVybiBzdGF0ZS5yZWplY3Rpb24gIT09IEhBTkRMRUQgJiYgIXN0YXRlLnBhcmVudDtcbn07XG5cbnZhciBvbkhhbmRsZVVuaGFuZGxlZCA9IGZ1bmN0aW9uIChwcm9taXNlLCBzdGF0ZSkge1xuICB0YXNrLmNhbGwoZ2xvYmFsLCBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKElTX05PREUpIHtcbiAgICAgIHByb2Nlc3MuZW1pdCgncmVqZWN0aW9uSGFuZGxlZCcsIHByb21pc2UpO1xuICAgIH0gZWxzZSBkaXNwYXRjaEV2ZW50KFJFSkVDVElPTl9IQU5ETEVELCBwcm9taXNlLCBzdGF0ZS52YWx1ZSk7XG4gIH0pO1xufTtcblxudmFyIGJpbmQgPSBmdW5jdGlvbiAoZm4sIHByb21pc2UsIHN0YXRlLCB1bndyYXApIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIGZuKHByb21pc2UsIHN0YXRlLCB2YWx1ZSwgdW53cmFwKTtcbiAgfTtcbn07XG5cbnZhciBpbnRlcm5hbFJlamVjdCA9IGZ1bmN0aW9uIChwcm9taXNlLCBzdGF0ZSwgdmFsdWUsIHVud3JhcCkge1xuICBpZiAoc3RhdGUuZG9uZSkgcmV0dXJuO1xuICBzdGF0ZS5kb25lID0gdHJ1ZTtcbiAgaWYgKHVud3JhcCkgc3RhdGUgPSB1bndyYXA7XG4gIHN0YXRlLnZhbHVlID0gdmFsdWU7XG4gIHN0YXRlLnN0YXRlID0gUkVKRUNURUQ7XG4gIG5vdGlmeShwcm9taXNlLCBzdGF0ZSwgdHJ1ZSk7XG59O1xuXG52YXIgaW50ZXJuYWxSZXNvbHZlID0gZnVuY3Rpb24gKHByb21pc2UsIHN0YXRlLCB2YWx1ZSwgdW53cmFwKSB7XG4gIGlmIChzdGF0ZS5kb25lKSByZXR1cm47XG4gIHN0YXRlLmRvbmUgPSB0cnVlO1xuICBpZiAodW53cmFwKSBzdGF0ZSA9IHVud3JhcDtcbiAgdHJ5IHtcbiAgICBpZiAocHJvbWlzZSA9PT0gdmFsdWUpIHRocm93IFR5cGVFcnJvcihcIlByb21pc2UgY2FuJ3QgYmUgcmVzb2x2ZWQgaXRzZWxmXCIpO1xuICAgIHZhciB0aGVuID0gaXNUaGVuYWJsZSh2YWx1ZSk7XG4gICAgaWYgKHRoZW4pIHtcbiAgICAgIG1pY3JvdGFzayhmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB3cmFwcGVyID0geyBkb25lOiBmYWxzZSB9O1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHRoZW4uY2FsbCh2YWx1ZSxcbiAgICAgICAgICAgIGJpbmQoaW50ZXJuYWxSZXNvbHZlLCBwcm9taXNlLCB3cmFwcGVyLCBzdGF0ZSksXG4gICAgICAgICAgICBiaW5kKGludGVybmFsUmVqZWN0LCBwcm9taXNlLCB3cmFwcGVyLCBzdGF0ZSlcbiAgICAgICAgICApO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgIGludGVybmFsUmVqZWN0KHByb21pc2UsIHdyYXBwZXIsIGVycm9yLCBzdGF0ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdGF0ZS52YWx1ZSA9IHZhbHVlO1xuICAgICAgc3RhdGUuc3RhdGUgPSBGVUxGSUxMRUQ7XG4gICAgICBub3RpZnkocHJvbWlzZSwgc3RhdGUsIGZhbHNlKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgaW50ZXJuYWxSZWplY3QocHJvbWlzZSwgeyBkb25lOiBmYWxzZSB9LCBlcnJvciwgc3RhdGUpO1xuICB9XG59O1xuXG4vLyBjb25zdHJ1Y3RvciBwb2x5ZmlsbFxuaWYgKEZPUkNFRCkge1xuICAvLyAyNS40LjMuMSBQcm9taXNlKGV4ZWN1dG9yKVxuICBQcm9taXNlQ29uc3RydWN0b3IgPSBmdW5jdGlvbiBQcm9taXNlKGV4ZWN1dG9yKSB7XG4gICAgYW5JbnN0YW5jZSh0aGlzLCBQcm9taXNlQ29uc3RydWN0b3IsIFBST01JU0UpO1xuICAgIGFGdW5jdGlvbihleGVjdXRvcik7XG4gICAgSW50ZXJuYWwuY2FsbCh0aGlzKTtcbiAgICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpO1xuICAgIHRyeSB7XG4gICAgICBleGVjdXRvcihiaW5kKGludGVybmFsUmVzb2x2ZSwgdGhpcywgc3RhdGUpLCBiaW5kKGludGVybmFsUmVqZWN0LCB0aGlzLCBzdGF0ZSkpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBpbnRlcm5hbFJlamVjdCh0aGlzLCBzdGF0ZSwgZXJyb3IpO1xuICAgIH1cbiAgfTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gIEludGVybmFsID0gZnVuY3Rpb24gUHJvbWlzZShleGVjdXRvcikge1xuICAgIHNldEludGVybmFsU3RhdGUodGhpcywge1xuICAgICAgdHlwZTogUFJPTUlTRSxcbiAgICAgIGRvbmU6IGZhbHNlLFxuICAgICAgbm90aWZpZWQ6IGZhbHNlLFxuICAgICAgcGFyZW50OiBmYWxzZSxcbiAgICAgIHJlYWN0aW9uczogW10sXG4gICAgICByZWplY3Rpb246IGZhbHNlLFxuICAgICAgc3RhdGU6IFBFTkRJTkcsXG4gICAgICB2YWx1ZTogdW5kZWZpbmVkXG4gICAgfSk7XG4gIH07XG4gIEludGVybmFsLnByb3RvdHlwZSA9IHJlZGVmaW5lQWxsKFByb21pc2VDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHtcbiAgICAvLyBgUHJvbWlzZS5wcm90b3R5cGUudGhlbmAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcHJvbWlzZS5wcm90b3R5cGUudGhlblxuICAgIHRoZW46IGZ1bmN0aW9uIHRoZW4ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpIHtcbiAgICAgIHZhciBzdGF0ZSA9IGdldEludGVybmFsUHJvbWlzZVN0YXRlKHRoaXMpO1xuICAgICAgdmFyIHJlYWN0aW9uID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkoc3BlY2llc0NvbnN0cnVjdG9yKHRoaXMsIFByb21pc2VDb25zdHJ1Y3RvcikpO1xuICAgICAgcmVhY3Rpb24ub2sgPSB0eXBlb2Ygb25GdWxmaWxsZWQgPT0gJ2Z1bmN0aW9uJyA/IG9uRnVsZmlsbGVkIDogdHJ1ZTtcbiAgICAgIHJlYWN0aW9uLmZhaWwgPSB0eXBlb2Ygb25SZWplY3RlZCA9PSAnZnVuY3Rpb24nICYmIG9uUmVqZWN0ZWQ7XG4gICAgICByZWFjdGlvbi5kb21haW4gPSBJU19OT0RFID8gcHJvY2Vzcy5kb21haW4gOiB1bmRlZmluZWQ7XG4gICAgICBzdGF0ZS5wYXJlbnQgPSB0cnVlO1xuICAgICAgc3RhdGUucmVhY3Rpb25zLnB1c2gocmVhY3Rpb24pO1xuICAgICAgaWYgKHN0YXRlLnN0YXRlICE9IFBFTkRJTkcpIG5vdGlmeSh0aGlzLCBzdGF0ZSwgZmFsc2UpO1xuICAgICAgcmV0dXJuIHJlYWN0aW9uLnByb21pc2U7XG4gICAgfSxcbiAgICAvLyBgUHJvbWlzZS5wcm90b3R5cGUuY2F0Y2hgIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXByb21pc2UucHJvdG90eXBlLmNhdGNoXG4gICAgJ2NhdGNoJzogZnVuY3Rpb24gKG9uUmVqZWN0ZWQpIHtcbiAgICAgIHJldHVybiB0aGlzLnRoZW4odW5kZWZpbmVkLCBvblJlamVjdGVkKTtcbiAgICB9XG4gIH0pO1xuICBPd25Qcm9taXNlQ2FwYWJpbGl0eSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcHJvbWlzZSA9IG5ldyBJbnRlcm5hbCgpO1xuICAgIHZhciBzdGF0ZSA9IGdldEludGVybmFsU3RhdGUocHJvbWlzZSk7XG4gICAgdGhpcy5wcm9taXNlID0gcHJvbWlzZTtcbiAgICB0aGlzLnJlc29sdmUgPSBiaW5kKGludGVybmFsUmVzb2x2ZSwgcHJvbWlzZSwgc3RhdGUpO1xuICAgIHRoaXMucmVqZWN0ID0gYmluZChpbnRlcm5hbFJlamVjdCwgcHJvbWlzZSwgc3RhdGUpO1xuICB9O1xuICBuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZS5mID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkgPSBmdW5jdGlvbiAoQykge1xuICAgIHJldHVybiBDID09PSBQcm9taXNlQ29uc3RydWN0b3IgfHwgQyA9PT0gUHJvbWlzZVdyYXBwZXJcbiAgICAgID8gbmV3IE93blByb21pc2VDYXBhYmlsaXR5KEMpXG4gICAgICA6IG5ld0dlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eShDKTtcbiAgfTtcblxuICBpZiAoIUlTX1BVUkUgJiYgdHlwZW9mIE5hdGl2ZVByb21pc2UgPT0gJ2Z1bmN0aW9uJykge1xuICAgIG5hdGl2ZVRoZW4gPSBOYXRpdmVQcm9taXNlLnByb3RvdHlwZS50aGVuO1xuXG4gICAgLy8gd3JhcCBuYXRpdmUgUHJvbWlzZSN0aGVuIGZvciBuYXRpdmUgYXN5bmMgZnVuY3Rpb25zXG4gICAgcmVkZWZpbmUoTmF0aXZlUHJvbWlzZS5wcm90b3R5cGUsICd0aGVuJywgZnVuY3Rpb24gdGhlbihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCkge1xuICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlQ29uc3RydWN0b3IoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBuYXRpdmVUaGVuLmNhbGwodGhhdCwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgIH0pLnRoZW4ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpO1xuICAgIH0pO1xuXG4gICAgLy8gd3JhcCBmZXRjaCByZXN1bHRcbiAgICBpZiAodHlwZW9mICRmZXRjaCA9PSAnZnVuY3Rpb24nKSAkKHsgZ2xvYmFsOiB0cnVlLCBlbnVtZXJhYmxlOiB0cnVlLCBmb3JjZWQ6IHRydWUgfSwge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgICBmZXRjaDogZnVuY3Rpb24gZmV0Y2goaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIHByb21pc2VSZXNvbHZlKFByb21pc2VDb25zdHJ1Y3RvciwgJGZldGNoLmFwcGx5KGdsb2JhbCwgYXJndW1lbnRzKSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn1cblxuJCh7IGdsb2JhbDogdHJ1ZSwgd3JhcDogdHJ1ZSwgZm9yY2VkOiBGT1JDRUQgfSwge1xuICBQcm9taXNlOiBQcm9taXNlQ29uc3RydWN0b3Jcbn0pO1xuXG5zZXRUb1N0cmluZ1RhZyhQcm9taXNlQ29uc3RydWN0b3IsIFBST01JU0UsIGZhbHNlLCB0cnVlKTtcbnNldFNwZWNpZXMoUFJPTUlTRSk7XG5cblByb21pc2VXcmFwcGVyID0gcGF0aFtQUk9NSVNFXTtcblxuLy8gc3RhdGljc1xuJCh7IHRhcmdldDogUFJPTUlTRSwgc3RhdDogdHJ1ZSwgZm9yY2VkOiBGT1JDRUQgfSwge1xuICAvLyBgUHJvbWlzZS5yZWplY3RgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1wcm9taXNlLnJlamVjdFxuICByZWplY3Q6IGZ1bmN0aW9uIHJlamVjdChyKSB7XG4gICAgdmFyIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eSh0aGlzKTtcbiAgICBjYXBhYmlsaXR5LnJlamVjdC5jYWxsKHVuZGVmaW5lZCwgcik7XG4gICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTtcbiAgfVxufSk7XG5cbiQoeyB0YXJnZXQ6IFBST01JU0UsIHN0YXQ6IHRydWUsIGZvcmNlZDogSVNfUFVSRSB8fCBGT1JDRUQgfSwge1xuICAvLyBgUHJvbWlzZS5yZXNvbHZlYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcHJvbWlzZS5yZXNvbHZlXG4gIHJlc29sdmU6IGZ1bmN0aW9uIHJlc29sdmUoeCkge1xuICAgIHJldHVybiBwcm9taXNlUmVzb2x2ZShJU19QVVJFICYmIHRoaXMgPT09IFByb21pc2VXcmFwcGVyID8gUHJvbWlzZUNvbnN0cnVjdG9yIDogdGhpcywgeCk7XG4gIH1cbn0pO1xuXG4kKHsgdGFyZ2V0OiBQUk9NSVNFLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IElOQ09SUkVDVF9JVEVSQVRJT04gfSwge1xuICAvLyBgUHJvbWlzZS5hbGxgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1wcm9taXNlLmFsbFxuICBhbGw6IGZ1bmN0aW9uIGFsbChpdGVyYWJsZSkge1xuICAgIHZhciBDID0gdGhpcztcbiAgICB2YXIgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KEMpO1xuICAgIHZhciByZXNvbHZlID0gY2FwYWJpbGl0eS5yZXNvbHZlO1xuICAgIHZhciByZWplY3QgPSBjYXBhYmlsaXR5LnJlamVjdDtcbiAgICB2YXIgcmVzdWx0ID0gcGVyZm9ybShmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgJHByb21pc2VSZXNvbHZlID0gYUZ1bmN0aW9uKEMucmVzb2x2ZSk7XG4gICAgICB2YXIgdmFsdWVzID0gW107XG4gICAgICB2YXIgY291bnRlciA9IDA7XG4gICAgICB2YXIgcmVtYWluaW5nID0gMTtcbiAgICAgIGl0ZXJhdGUoaXRlcmFibGUsIGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gICAgICAgIHZhciBpbmRleCA9IGNvdW50ZXIrKztcbiAgICAgICAgdmFyIGFscmVhZHlDYWxsZWQgPSBmYWxzZTtcbiAgICAgICAgdmFsdWVzLnB1c2godW5kZWZpbmVkKTtcbiAgICAgICAgcmVtYWluaW5nKys7XG4gICAgICAgICRwcm9taXNlUmVzb2x2ZS5jYWxsKEMsIHByb21pc2UpLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgaWYgKGFscmVhZHlDYWxsZWQpIHJldHVybjtcbiAgICAgICAgICBhbHJlYWR5Q2FsbGVkID0gdHJ1ZTtcbiAgICAgICAgICB2YWx1ZXNbaW5kZXhdID0gdmFsdWU7XG4gICAgICAgICAgLS1yZW1haW5pbmcgfHwgcmVzb2x2ZSh2YWx1ZXMpO1xuICAgICAgICB9LCByZWplY3QpO1xuICAgICAgfSk7XG4gICAgICAtLXJlbWFpbmluZyB8fCByZXNvbHZlKHZhbHVlcyk7XG4gICAgfSk7XG4gICAgaWYgKHJlc3VsdC5lcnJvcikgcmVqZWN0KHJlc3VsdC52YWx1ZSk7XG4gICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTtcbiAgfSxcbiAgLy8gYFByb21pc2UucmFjZWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXByb21pc2UucmFjZVxuICByYWNlOiBmdW5jdGlvbiByYWNlKGl0ZXJhYmxlKSB7XG4gICAgdmFyIEMgPSB0aGlzO1xuICAgIHZhciBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkoQyk7XG4gICAgdmFyIHJlamVjdCA9IGNhcGFiaWxpdHkucmVqZWN0O1xuICAgIHZhciByZXN1bHQgPSBwZXJmb3JtKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciAkcHJvbWlzZVJlc29sdmUgPSBhRnVuY3Rpb24oQy5yZXNvbHZlKTtcbiAgICAgIGl0ZXJhdGUoaXRlcmFibGUsIGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gICAgICAgICRwcm9taXNlUmVzb2x2ZS5jYWxsKEMsIHByb21pc2UpLnRoZW4oY2FwYWJpbGl0eS5yZXNvbHZlLCByZWplY3QpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgaWYgKHJlc3VsdC5lcnJvcikgcmVqZWN0KHJlc3VsdC52YWx1ZSk7XG4gICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTtcbiAgfVxufSk7XG4iLCJ2YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtZnVuY3Rpb24nKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIFNQRUNJRVMgPSB3ZWxsS25vd25TeW1ib2woJ3NwZWNpZXMnKTtcblxuLy8gYFNwZWNpZXNDb25zdHJ1Y3RvcmAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zcGVjaWVzY29uc3RydWN0b3Jcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE8sIGRlZmF1bHRDb25zdHJ1Y3Rvcikge1xuICB2YXIgQyA9IGFuT2JqZWN0KE8pLmNvbnN0cnVjdG9yO1xuICB2YXIgUztcbiAgcmV0dXJuIEMgPT09IHVuZGVmaW5lZCB8fCAoUyA9IGFuT2JqZWN0KEMpW1NQRUNJRVNdKSA9PSB1bmRlZmluZWQgPyBkZWZhdWx0Q29uc3RydWN0b3IgOiBhRnVuY3Rpb24oUyk7XG59O1xuIiwidmFyIHN1cHBvcnQgPSB7XG4gIHNlYXJjaFBhcmFtczogJ1VSTFNlYXJjaFBhcmFtcycgaW4gc2VsZixcbiAgaXRlcmFibGU6ICdTeW1ib2wnIGluIHNlbGYgJiYgJ2l0ZXJhdG9yJyBpbiBTeW1ib2wsXG4gIGJsb2I6XG4gICAgJ0ZpbGVSZWFkZXInIGluIHNlbGYgJiZcbiAgICAnQmxvYicgaW4gc2VsZiAmJlxuICAgIChmdW5jdGlvbigpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIG5ldyBCbG9iKClcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgfSkoKSxcbiAgZm9ybURhdGE6ICdGb3JtRGF0YScgaW4gc2VsZixcbiAgYXJyYXlCdWZmZXI6ICdBcnJheUJ1ZmZlcicgaW4gc2VsZlxufVxuXG5mdW5jdGlvbiBpc0RhdGFWaWV3KG9iaikge1xuICByZXR1cm4gb2JqICYmIERhdGFWaWV3LnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKG9iailcbn1cblxuaWYgKHN1cHBvcnQuYXJyYXlCdWZmZXIpIHtcbiAgdmFyIHZpZXdDbGFzc2VzID0gW1xuICAgICdbb2JqZWN0IEludDhBcnJheV0nLFxuICAgICdbb2JqZWN0IFVpbnQ4QXJyYXldJyxcbiAgICAnW29iamVjdCBVaW50OENsYW1wZWRBcnJheV0nLFxuICAgICdbb2JqZWN0IEludDE2QXJyYXldJyxcbiAgICAnW29iamVjdCBVaW50MTZBcnJheV0nLFxuICAgICdbb2JqZWN0IEludDMyQXJyYXldJyxcbiAgICAnW29iamVjdCBVaW50MzJBcnJheV0nLFxuICAgICdbb2JqZWN0IEZsb2F0MzJBcnJheV0nLFxuICAgICdbb2JqZWN0IEZsb2F0NjRBcnJheV0nXG4gIF1cblxuICB2YXIgaXNBcnJheUJ1ZmZlclZpZXcgPVxuICAgIEFycmF5QnVmZmVyLmlzVmlldyB8fFxuICAgIGZ1bmN0aW9uKG9iaikge1xuICAgICAgcmV0dXJuIG9iaiAmJiB2aWV3Q2xhc3Nlcy5pbmRleE9mKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmopKSA+IC0xXG4gICAgfVxufVxuXG5mdW5jdGlvbiBub3JtYWxpemVOYW1lKG5hbWUpIHtcbiAgaWYgKHR5cGVvZiBuYW1lICE9PSAnc3RyaW5nJykge1xuICAgIG5hbWUgPSBTdHJpbmcobmFtZSlcbiAgfVxuICBpZiAoL1teYS16MC05XFwtIyQlJicqKy5eX2B8fl0vaS50ZXN0KG5hbWUpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignSW52YWxpZCBjaGFyYWN0ZXIgaW4gaGVhZGVyIGZpZWxkIG5hbWUnKVxuICB9XG4gIHJldHVybiBuYW1lLnRvTG93ZXJDYXNlKClcbn1cblxuZnVuY3Rpb24gbm9ybWFsaXplVmFsdWUodmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycpIHtcbiAgICB2YWx1ZSA9IFN0cmluZyh2YWx1ZSlcbiAgfVxuICByZXR1cm4gdmFsdWVcbn1cblxuLy8gQnVpbGQgYSBkZXN0cnVjdGl2ZSBpdGVyYXRvciBmb3IgdGhlIHZhbHVlIGxpc3RcbmZ1bmN0aW9uIGl0ZXJhdG9yRm9yKGl0ZW1zKSB7XG4gIHZhciBpdGVyYXRvciA9IHtcbiAgICBuZXh0OiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciB2YWx1ZSA9IGl0ZW1zLnNoaWZ0KClcbiAgICAgIHJldHVybiB7ZG9uZTogdmFsdWUgPT09IHVuZGVmaW5lZCwgdmFsdWU6IHZhbHVlfVxuICAgIH1cbiAgfVxuXG4gIGlmIChzdXBwb3J0Lml0ZXJhYmxlKSB7XG4gICAgaXRlcmF0b3JbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGl0ZXJhdG9yXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGl0ZXJhdG9yXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBIZWFkZXJzKGhlYWRlcnMpIHtcbiAgdGhpcy5tYXAgPSB7fVxuXG4gIGlmIChoZWFkZXJzIGluc3RhbmNlb2YgSGVhZGVycykge1xuICAgIGhlYWRlcnMuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSwgbmFtZSkge1xuICAgICAgdGhpcy5hcHBlbmQobmFtZSwgdmFsdWUpXG4gICAgfSwgdGhpcylcbiAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGhlYWRlcnMpKSB7XG4gICAgaGVhZGVycy5mb3JFYWNoKGZ1bmN0aW9uKGhlYWRlcikge1xuICAgICAgdGhpcy5hcHBlbmQoaGVhZGVyWzBdLCBoZWFkZXJbMV0pXG4gICAgfSwgdGhpcylcbiAgfSBlbHNlIGlmIChoZWFkZXJzKSB7XG4gICAgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoaGVhZGVycykuZm9yRWFjaChmdW5jdGlvbihuYW1lKSB7XG4gICAgICB0aGlzLmFwcGVuZChuYW1lLCBoZWFkZXJzW25hbWVdKVxuICAgIH0sIHRoaXMpXG4gIH1cbn1cblxuSGVhZGVycy5wcm90b3R5cGUuYXBwZW5kID0gZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgbmFtZSA9IG5vcm1hbGl6ZU5hbWUobmFtZSlcbiAgdmFsdWUgPSBub3JtYWxpemVWYWx1ZSh2YWx1ZSlcbiAgdmFyIG9sZFZhbHVlID0gdGhpcy5tYXBbbmFtZV1cbiAgdGhpcy5tYXBbbmFtZV0gPSBvbGRWYWx1ZSA/IG9sZFZhbHVlICsgJywgJyArIHZhbHVlIDogdmFsdWVcbn1cblxuSGVhZGVycy5wcm90b3R5cGVbJ2RlbGV0ZSddID0gZnVuY3Rpb24obmFtZSkge1xuICBkZWxldGUgdGhpcy5tYXBbbm9ybWFsaXplTmFtZShuYW1lKV1cbn1cblxuSGVhZGVycy5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24obmFtZSkge1xuICBuYW1lID0gbm9ybWFsaXplTmFtZShuYW1lKVxuICByZXR1cm4gdGhpcy5oYXMobmFtZSkgPyB0aGlzLm1hcFtuYW1lXSA6IG51bGxcbn1cblxuSGVhZGVycy5wcm90b3R5cGUuaGFzID0gZnVuY3Rpb24obmFtZSkge1xuICByZXR1cm4gdGhpcy5tYXAuaGFzT3duUHJvcGVydHkobm9ybWFsaXplTmFtZShuYW1lKSlcbn1cblxuSGVhZGVycy5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgdGhpcy5tYXBbbm9ybWFsaXplTmFtZShuYW1lKV0gPSBub3JtYWxpemVWYWx1ZSh2YWx1ZSlcbn1cblxuSGVhZGVycy5wcm90b3R5cGUuZm9yRWFjaCA9IGZ1bmN0aW9uKGNhbGxiYWNrLCB0aGlzQXJnKSB7XG4gIGZvciAodmFyIG5hbWUgaW4gdGhpcy5tYXApIHtcbiAgICBpZiAodGhpcy5tYXAuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgIGNhbGxiYWNrLmNhbGwodGhpc0FyZywgdGhpcy5tYXBbbmFtZV0sIG5hbWUsIHRoaXMpXG4gICAgfVxuICB9XG59XG5cbkhlYWRlcnMucHJvdG90eXBlLmtleXMgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGl0ZW1zID0gW11cbiAgdGhpcy5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlLCBuYW1lKSB7XG4gICAgaXRlbXMucHVzaChuYW1lKVxuICB9KVxuICByZXR1cm4gaXRlcmF0b3JGb3IoaXRlbXMpXG59XG5cbkhlYWRlcnMucHJvdG90eXBlLnZhbHVlcyA9IGZ1bmN0aW9uKCkge1xuICB2YXIgaXRlbXMgPSBbXVxuICB0aGlzLmZvckVhY2goZnVuY3Rpb24odmFsdWUpIHtcbiAgICBpdGVtcy5wdXNoKHZhbHVlKVxuICB9KVxuICByZXR1cm4gaXRlcmF0b3JGb3IoaXRlbXMpXG59XG5cbkhlYWRlcnMucHJvdG90eXBlLmVudHJpZXMgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGl0ZW1zID0gW11cbiAgdGhpcy5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlLCBuYW1lKSB7XG4gICAgaXRlbXMucHVzaChbbmFtZSwgdmFsdWVdKVxuICB9KVxuICByZXR1cm4gaXRlcmF0b3JGb3IoaXRlbXMpXG59XG5cbmlmIChzdXBwb3J0Lml0ZXJhYmxlKSB7XG4gIEhlYWRlcnMucHJvdG90eXBlW1N5bWJvbC5pdGVyYXRvcl0gPSBIZWFkZXJzLnByb3RvdHlwZS5lbnRyaWVzXG59XG5cbmZ1bmN0aW9uIGNvbnN1bWVkKGJvZHkpIHtcbiAgaWYgKGJvZHkuYm9keVVzZWQpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IFR5cGVFcnJvcignQWxyZWFkeSByZWFkJykpXG4gIH1cbiAgYm9keS5ib2R5VXNlZCA9IHRydWVcbn1cblxuZnVuY3Rpb24gZmlsZVJlYWRlclJlYWR5KHJlYWRlcikge1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgcmVhZGVyLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmVzb2x2ZShyZWFkZXIucmVzdWx0KVxuICAgIH1cbiAgICByZWFkZXIub25lcnJvciA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmVqZWN0KHJlYWRlci5lcnJvcilcbiAgICB9XG4gIH0pXG59XG5cbmZ1bmN0aW9uIHJlYWRCbG9iQXNBcnJheUJ1ZmZlcihibG9iKSB7XG4gIHZhciByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpXG4gIHZhciBwcm9taXNlID0gZmlsZVJlYWRlclJlYWR5KHJlYWRlcilcbiAgcmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKGJsb2IpXG4gIHJldHVybiBwcm9taXNlXG59XG5cbmZ1bmN0aW9uIHJlYWRCbG9iQXNUZXh0KGJsb2IpIHtcbiAgdmFyIHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKClcbiAgdmFyIHByb21pc2UgPSBmaWxlUmVhZGVyUmVhZHkocmVhZGVyKVxuICByZWFkZXIucmVhZEFzVGV4dChibG9iKVxuICByZXR1cm4gcHJvbWlzZVxufVxuXG5mdW5jdGlvbiByZWFkQXJyYXlCdWZmZXJBc1RleHQoYnVmKSB7XG4gIHZhciB2aWV3ID0gbmV3IFVpbnQ4QXJyYXkoYnVmKVxuICB2YXIgY2hhcnMgPSBuZXcgQXJyYXkodmlldy5sZW5ndGgpXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB2aWV3Lmxlbmd0aDsgaSsrKSB7XG4gICAgY2hhcnNbaV0gPSBTdHJpbmcuZnJvbUNoYXJDb2RlKHZpZXdbaV0pXG4gIH1cbiAgcmV0dXJuIGNoYXJzLmpvaW4oJycpXG59XG5cbmZ1bmN0aW9uIGJ1ZmZlckNsb25lKGJ1Zikge1xuICBpZiAoYnVmLnNsaWNlKSB7XG4gICAgcmV0dXJuIGJ1Zi5zbGljZSgwKVxuICB9IGVsc2Uge1xuICAgIHZhciB2aWV3ID0gbmV3IFVpbnQ4QXJyYXkoYnVmLmJ5dGVMZW5ndGgpXG4gICAgdmlldy5zZXQobmV3IFVpbnQ4QXJyYXkoYnVmKSlcbiAgICByZXR1cm4gdmlldy5idWZmZXJcbiAgfVxufVxuXG5mdW5jdGlvbiBCb2R5KCkge1xuICB0aGlzLmJvZHlVc2VkID0gZmFsc2VcblxuICB0aGlzLl9pbml0Qm9keSA9IGZ1bmN0aW9uKGJvZHkpIHtcbiAgICB0aGlzLl9ib2R5SW5pdCA9IGJvZHlcbiAgICBpZiAoIWJvZHkpIHtcbiAgICAgIHRoaXMuX2JvZHlUZXh0ID0gJydcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBib2R5ID09PSAnc3RyaW5nJykge1xuICAgICAgdGhpcy5fYm9keVRleHQgPSBib2R5XG4gICAgfSBlbHNlIGlmIChzdXBwb3J0LmJsb2IgJiYgQmxvYi5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihib2R5KSkge1xuICAgICAgdGhpcy5fYm9keUJsb2IgPSBib2R5XG4gICAgfSBlbHNlIGlmIChzdXBwb3J0LmZvcm1EYXRhICYmIEZvcm1EYXRhLnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKGJvZHkpKSB7XG4gICAgICB0aGlzLl9ib2R5Rm9ybURhdGEgPSBib2R5XG4gICAgfSBlbHNlIGlmIChzdXBwb3J0LnNlYXJjaFBhcmFtcyAmJiBVUkxTZWFyY2hQYXJhbXMucHJvdG90eXBlLmlzUHJvdG90eXBlT2YoYm9keSkpIHtcbiAgICAgIHRoaXMuX2JvZHlUZXh0ID0gYm9keS50b1N0cmluZygpXG4gICAgfSBlbHNlIGlmIChzdXBwb3J0LmFycmF5QnVmZmVyICYmIHN1cHBvcnQuYmxvYiAmJiBpc0RhdGFWaWV3KGJvZHkpKSB7XG4gICAgICB0aGlzLl9ib2R5QXJyYXlCdWZmZXIgPSBidWZmZXJDbG9uZShib2R5LmJ1ZmZlcilcbiAgICAgIC8vIElFIDEwLTExIGNhbid0IGhhbmRsZSBhIERhdGFWaWV3IGJvZHkuXG4gICAgICB0aGlzLl9ib2R5SW5pdCA9IG5ldyBCbG9iKFt0aGlzLl9ib2R5QXJyYXlCdWZmZXJdKVxuICAgIH0gZWxzZSBpZiAoc3VwcG9ydC5hcnJheUJ1ZmZlciAmJiAoQXJyYXlCdWZmZXIucHJvdG90eXBlLmlzUHJvdG90eXBlT2YoYm9keSkgfHwgaXNBcnJheUJ1ZmZlclZpZXcoYm9keSkpKSB7XG4gICAgICB0aGlzLl9ib2R5QXJyYXlCdWZmZXIgPSBidWZmZXJDbG9uZShib2R5KVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9ib2R5VGV4dCA9IGJvZHkgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYm9keSlcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuaGVhZGVycy5nZXQoJ2NvbnRlbnQtdHlwZScpKSB7XG4gICAgICBpZiAodHlwZW9mIGJvZHkgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHRoaXMuaGVhZGVycy5zZXQoJ2NvbnRlbnQtdHlwZScsICd0ZXh0L3BsYWluO2NoYXJzZXQ9VVRGLTgnKVxuICAgICAgfSBlbHNlIGlmICh0aGlzLl9ib2R5QmxvYiAmJiB0aGlzLl9ib2R5QmxvYi50eXBlKSB7XG4gICAgICAgIHRoaXMuaGVhZGVycy5zZXQoJ2NvbnRlbnQtdHlwZScsIHRoaXMuX2JvZHlCbG9iLnR5cGUpXG4gICAgICB9IGVsc2UgaWYgKHN1cHBvcnQuc2VhcmNoUGFyYW1zICYmIFVSTFNlYXJjaFBhcmFtcy5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihib2R5KSkge1xuICAgICAgICB0aGlzLmhlYWRlcnMuc2V0KCdjb250ZW50LXR5cGUnLCAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkO2NoYXJzZXQ9VVRGLTgnKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmIChzdXBwb3J0LmJsb2IpIHtcbiAgICB0aGlzLmJsb2IgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciByZWplY3RlZCA9IGNvbnN1bWVkKHRoaXMpXG4gICAgICBpZiAocmVqZWN0ZWQpIHtcbiAgICAgICAgcmV0dXJuIHJlamVjdGVkXG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLl9ib2R5QmxvYikge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRoaXMuX2JvZHlCbG9iKVxuICAgICAgfSBlbHNlIGlmICh0aGlzLl9ib2R5QXJyYXlCdWZmZXIpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShuZXcgQmxvYihbdGhpcy5fYm9keUFycmF5QnVmZmVyXSkpXG4gICAgICB9IGVsc2UgaWYgKHRoaXMuX2JvZHlGb3JtRGF0YSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2NvdWxkIG5vdCByZWFkIEZvcm1EYXRhIGJvZHkgYXMgYmxvYicpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG5ldyBCbG9iKFt0aGlzLl9ib2R5VGV4dF0pKVxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuYXJyYXlCdWZmZXIgPSBmdW5jdGlvbigpIHtcbiAgICAgIGlmICh0aGlzLl9ib2R5QXJyYXlCdWZmZXIpIHtcbiAgICAgICAgcmV0dXJuIGNvbnN1bWVkKHRoaXMpIHx8IFByb21pc2UucmVzb2x2ZSh0aGlzLl9ib2R5QXJyYXlCdWZmZXIpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdGhpcy5ibG9iKCkudGhlbihyZWFkQmxvYkFzQXJyYXlCdWZmZXIpXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdGhpcy50ZXh0ID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHJlamVjdGVkID0gY29uc3VtZWQodGhpcylcbiAgICBpZiAocmVqZWN0ZWQpIHtcbiAgICAgIHJldHVybiByZWplY3RlZFxuICAgIH1cblxuICAgIGlmICh0aGlzLl9ib2R5QmxvYikge1xuICAgICAgcmV0dXJuIHJlYWRCbG9iQXNUZXh0KHRoaXMuX2JvZHlCbG9iKVxuICAgIH0gZWxzZSBpZiAodGhpcy5fYm9keUFycmF5QnVmZmVyKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHJlYWRBcnJheUJ1ZmZlckFzVGV4dCh0aGlzLl9ib2R5QXJyYXlCdWZmZXIpKVxuICAgIH0gZWxzZSBpZiAodGhpcy5fYm9keUZvcm1EYXRhKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2NvdWxkIG5vdCByZWFkIEZvcm1EYXRhIGJvZHkgYXMgdGV4dCcpXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodGhpcy5fYm9keVRleHQpXG4gICAgfVxuICB9XG5cbiAgaWYgKHN1cHBvcnQuZm9ybURhdGEpIHtcbiAgICB0aGlzLmZvcm1EYXRhID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy50ZXh0KCkudGhlbihkZWNvZGUpXG4gICAgfVxuICB9XG5cbiAgdGhpcy5qc29uID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMudGV4dCgpLnRoZW4oSlNPTi5wYXJzZSlcbiAgfVxuXG4gIHJldHVybiB0aGlzXG59XG5cbi8vIEhUVFAgbWV0aG9kcyB3aG9zZSBjYXBpdGFsaXphdGlvbiBzaG91bGQgYmUgbm9ybWFsaXplZFxudmFyIG1ldGhvZHMgPSBbJ0RFTEVURScsICdHRVQnLCAnSEVBRCcsICdPUFRJT05TJywgJ1BPU1QnLCAnUFVUJ11cblxuZnVuY3Rpb24gbm9ybWFsaXplTWV0aG9kKG1ldGhvZCkge1xuICB2YXIgdXBjYXNlZCA9IG1ldGhvZC50b1VwcGVyQ2FzZSgpXG4gIHJldHVybiBtZXRob2RzLmluZGV4T2YodXBjYXNlZCkgPiAtMSA/IHVwY2FzZWQgOiBtZXRob2Rcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIFJlcXVlc3QoaW5wdXQsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge31cbiAgdmFyIGJvZHkgPSBvcHRpb25zLmJvZHlcblxuICBpZiAoaW5wdXQgaW5zdGFuY2VvZiBSZXF1ZXN0KSB7XG4gICAgaWYgKGlucHV0LmJvZHlVc2VkKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBbHJlYWR5IHJlYWQnKVxuICAgIH1cbiAgICB0aGlzLnVybCA9IGlucHV0LnVybFxuICAgIHRoaXMuY3JlZGVudGlhbHMgPSBpbnB1dC5jcmVkZW50aWFsc1xuICAgIGlmICghb3B0aW9ucy5oZWFkZXJzKSB7XG4gICAgICB0aGlzLmhlYWRlcnMgPSBuZXcgSGVhZGVycyhpbnB1dC5oZWFkZXJzKVxuICAgIH1cbiAgICB0aGlzLm1ldGhvZCA9IGlucHV0Lm1ldGhvZFxuICAgIHRoaXMubW9kZSA9IGlucHV0Lm1vZGVcbiAgICB0aGlzLnNpZ25hbCA9IGlucHV0LnNpZ25hbFxuICAgIGlmICghYm9keSAmJiBpbnB1dC5fYm9keUluaXQgIT0gbnVsbCkge1xuICAgICAgYm9keSA9IGlucHV0Ll9ib2R5SW5pdFxuICAgICAgaW5wdXQuYm9keVVzZWQgPSB0cnVlXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHRoaXMudXJsID0gU3RyaW5nKGlucHV0KVxuICB9XG5cbiAgdGhpcy5jcmVkZW50aWFscyA9IG9wdGlvbnMuY3JlZGVudGlhbHMgfHwgdGhpcy5jcmVkZW50aWFscyB8fCAnc2FtZS1vcmlnaW4nXG4gIGlmIChvcHRpb25zLmhlYWRlcnMgfHwgIXRoaXMuaGVhZGVycykge1xuICAgIHRoaXMuaGVhZGVycyA9IG5ldyBIZWFkZXJzKG9wdGlvbnMuaGVhZGVycylcbiAgfVxuICB0aGlzLm1ldGhvZCA9IG5vcm1hbGl6ZU1ldGhvZChvcHRpb25zLm1ldGhvZCB8fCB0aGlzLm1ldGhvZCB8fCAnR0VUJylcbiAgdGhpcy5tb2RlID0gb3B0aW9ucy5tb2RlIHx8IHRoaXMubW9kZSB8fCBudWxsXG4gIHRoaXMuc2lnbmFsID0gb3B0aW9ucy5zaWduYWwgfHwgdGhpcy5zaWduYWxcbiAgdGhpcy5yZWZlcnJlciA9IG51bGxcblxuICBpZiAoKHRoaXMubWV0aG9kID09PSAnR0VUJyB8fCB0aGlzLm1ldGhvZCA9PT0gJ0hFQUQnKSAmJiBib2R5KSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQm9keSBub3QgYWxsb3dlZCBmb3IgR0VUIG9yIEhFQUQgcmVxdWVzdHMnKVxuICB9XG4gIHRoaXMuX2luaXRCb2R5KGJvZHkpXG59XG5cblJlcXVlc3QucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgUmVxdWVzdCh0aGlzLCB7Ym9keTogdGhpcy5fYm9keUluaXR9KVxufVxuXG5mdW5jdGlvbiBkZWNvZGUoYm9keSkge1xuICB2YXIgZm9ybSA9IG5ldyBGb3JtRGF0YSgpXG4gIGJvZHlcbiAgICAudHJpbSgpXG4gICAgLnNwbGl0KCcmJylcbiAgICAuZm9yRWFjaChmdW5jdGlvbihieXRlcykge1xuICAgICAgaWYgKGJ5dGVzKSB7XG4gICAgICAgIHZhciBzcGxpdCA9IGJ5dGVzLnNwbGl0KCc9JylcbiAgICAgICAgdmFyIG5hbWUgPSBzcGxpdC5zaGlmdCgpLnJlcGxhY2UoL1xcKy9nLCAnICcpXG4gICAgICAgIHZhciB2YWx1ZSA9IHNwbGl0LmpvaW4oJz0nKS5yZXBsYWNlKC9cXCsvZywgJyAnKVxuICAgICAgICBmb3JtLmFwcGVuZChkZWNvZGVVUklDb21wb25lbnQobmFtZSksIGRlY29kZVVSSUNvbXBvbmVudCh2YWx1ZSkpXG4gICAgICB9XG4gICAgfSlcbiAgcmV0dXJuIGZvcm1cbn1cblxuZnVuY3Rpb24gcGFyc2VIZWFkZXJzKHJhd0hlYWRlcnMpIHtcbiAgdmFyIGhlYWRlcnMgPSBuZXcgSGVhZGVycygpXG4gIC8vIFJlcGxhY2UgaW5zdGFuY2VzIG9mIFxcclxcbiBhbmQgXFxuIGZvbGxvd2VkIGJ5IGF0IGxlYXN0IG9uZSBzcGFjZSBvciBob3Jpem9udGFsIHRhYiB3aXRoIGEgc3BhY2VcbiAgLy8gaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzcyMzAjc2VjdGlvbi0zLjJcbiAgdmFyIHByZVByb2Nlc3NlZEhlYWRlcnMgPSByYXdIZWFkZXJzLnJlcGxhY2UoL1xccj9cXG5bXFx0IF0rL2csICcgJylcbiAgcHJlUHJvY2Vzc2VkSGVhZGVycy5zcGxpdCgvXFxyP1xcbi8pLmZvckVhY2goZnVuY3Rpb24obGluZSkge1xuICAgIHZhciBwYXJ0cyA9IGxpbmUuc3BsaXQoJzonKVxuICAgIHZhciBrZXkgPSBwYXJ0cy5zaGlmdCgpLnRyaW0oKVxuICAgIGlmIChrZXkpIHtcbiAgICAgIHZhciB2YWx1ZSA9IHBhcnRzLmpvaW4oJzonKS50cmltKClcbiAgICAgIGhlYWRlcnMuYXBwZW5kKGtleSwgdmFsdWUpXG4gICAgfVxuICB9KVxuICByZXR1cm4gaGVhZGVyc1xufVxuXG5Cb2R5LmNhbGwoUmVxdWVzdC5wcm90b3R5cGUpXG5cbmV4cG9ydCBmdW5jdGlvbiBSZXNwb25zZShib2R5SW5pdCwgb3B0aW9ucykge1xuICBpZiAoIW9wdGlvbnMpIHtcbiAgICBvcHRpb25zID0ge31cbiAgfVxuXG4gIHRoaXMudHlwZSA9ICdkZWZhdWx0J1xuICB0aGlzLnN0YXR1cyA9IG9wdGlvbnMuc3RhdHVzID09PSB1bmRlZmluZWQgPyAyMDAgOiBvcHRpb25zLnN0YXR1c1xuICB0aGlzLm9rID0gdGhpcy5zdGF0dXMgPj0gMjAwICYmIHRoaXMuc3RhdHVzIDwgMzAwXG4gIHRoaXMuc3RhdHVzVGV4dCA9ICdzdGF0dXNUZXh0JyBpbiBvcHRpb25zID8gb3B0aW9ucy5zdGF0dXNUZXh0IDogJ09LJ1xuICB0aGlzLmhlYWRlcnMgPSBuZXcgSGVhZGVycyhvcHRpb25zLmhlYWRlcnMpXG4gIHRoaXMudXJsID0gb3B0aW9ucy51cmwgfHwgJydcbiAgdGhpcy5faW5pdEJvZHkoYm9keUluaXQpXG59XG5cbkJvZHkuY2FsbChSZXNwb25zZS5wcm90b3R5cGUpXG5cblJlc3BvbnNlLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IFJlc3BvbnNlKHRoaXMuX2JvZHlJbml0LCB7XG4gICAgc3RhdHVzOiB0aGlzLnN0YXR1cyxcbiAgICBzdGF0dXNUZXh0OiB0aGlzLnN0YXR1c1RleHQsXG4gICAgaGVhZGVyczogbmV3IEhlYWRlcnModGhpcy5oZWFkZXJzKSxcbiAgICB1cmw6IHRoaXMudXJsXG4gIH0pXG59XG5cblJlc3BvbnNlLmVycm9yID0gZnVuY3Rpb24oKSB7XG4gIHZhciByZXNwb25zZSA9IG5ldyBSZXNwb25zZShudWxsLCB7c3RhdHVzOiAwLCBzdGF0dXNUZXh0OiAnJ30pXG4gIHJlc3BvbnNlLnR5cGUgPSAnZXJyb3InXG4gIHJldHVybiByZXNwb25zZVxufVxuXG52YXIgcmVkaXJlY3RTdGF0dXNlcyA9IFszMDEsIDMwMiwgMzAzLCAzMDcsIDMwOF1cblxuUmVzcG9uc2UucmVkaXJlY3QgPSBmdW5jdGlvbih1cmwsIHN0YXR1cykge1xuICBpZiAocmVkaXJlY3RTdGF0dXNlcy5pbmRleE9mKHN0YXR1cykgPT09IC0xKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0ludmFsaWQgc3RhdHVzIGNvZGUnKVxuICB9XG5cbiAgcmV0dXJuIG5ldyBSZXNwb25zZShudWxsLCB7c3RhdHVzOiBzdGF0dXMsIGhlYWRlcnM6IHtsb2NhdGlvbjogdXJsfX0pXG59XG5cbmV4cG9ydCB2YXIgRE9NRXhjZXB0aW9uID0gc2VsZi5ET01FeGNlcHRpb25cbnRyeSB7XG4gIG5ldyBET01FeGNlcHRpb24oKVxufSBjYXRjaCAoZXJyKSB7XG4gIERPTUV4Y2VwdGlvbiA9IGZ1bmN0aW9uKG1lc3NhZ2UsIG5hbWUpIHtcbiAgICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlXG4gICAgdGhpcy5uYW1lID0gbmFtZVxuICAgIHZhciBlcnJvciA9IEVycm9yKG1lc3NhZ2UpXG4gICAgdGhpcy5zdGFjayA9IGVycm9yLnN0YWNrXG4gIH1cbiAgRE9NRXhjZXB0aW9uLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoRXJyb3IucHJvdG90eXBlKVxuICBET01FeGNlcHRpb24ucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gRE9NRXhjZXB0aW9uXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmZXRjaChpbnB1dCwgaW5pdCkge1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgdmFyIHJlcXVlc3QgPSBuZXcgUmVxdWVzdChpbnB1dCwgaW5pdClcblxuICAgIGlmIChyZXF1ZXN0LnNpZ25hbCAmJiByZXF1ZXN0LnNpZ25hbC5hYm9ydGVkKSB7XG4gICAgICByZXR1cm4gcmVqZWN0KG5ldyBET01FeGNlcHRpb24oJ0Fib3J0ZWQnLCAnQWJvcnRFcnJvcicpKVxuICAgIH1cblxuICAgIHZhciB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKVxuXG4gICAgZnVuY3Rpb24gYWJvcnRYaHIoKSB7XG4gICAgICB4aHIuYWJvcnQoKVxuICAgIH1cblxuICAgIHhoci5vbmxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgICBzdGF0dXM6IHhoci5zdGF0dXMsXG4gICAgICAgIHN0YXR1c1RleHQ6IHhoci5zdGF0dXNUZXh0LFxuICAgICAgICBoZWFkZXJzOiBwYXJzZUhlYWRlcnMoeGhyLmdldEFsbFJlc3BvbnNlSGVhZGVycygpIHx8ICcnKVxuICAgICAgfVxuICAgICAgb3B0aW9ucy51cmwgPSAncmVzcG9uc2VVUkwnIGluIHhociA/IHhoci5yZXNwb25zZVVSTCA6IG9wdGlvbnMuaGVhZGVycy5nZXQoJ1gtUmVxdWVzdC1VUkwnKVxuICAgICAgdmFyIGJvZHkgPSAncmVzcG9uc2UnIGluIHhociA/IHhoci5yZXNwb25zZSA6IHhoci5yZXNwb25zZVRleHRcbiAgICAgIHJlc29sdmUobmV3IFJlc3BvbnNlKGJvZHksIG9wdGlvbnMpKVxuICAgIH1cblxuICAgIHhoci5vbmVycm9yID0gZnVuY3Rpb24oKSB7XG4gICAgICByZWplY3QobmV3IFR5cGVFcnJvcignTmV0d29yayByZXF1ZXN0IGZhaWxlZCcpKVxuICAgIH1cblxuICAgIHhoci5vbnRpbWVvdXQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJlamVjdChuZXcgVHlwZUVycm9yKCdOZXR3b3JrIHJlcXVlc3QgZmFpbGVkJykpXG4gICAgfVxuXG4gICAgeGhyLm9uYWJvcnQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJlamVjdChuZXcgRE9NRXhjZXB0aW9uKCdBYm9ydGVkJywgJ0Fib3J0RXJyb3InKSlcbiAgICB9XG5cbiAgICB4aHIub3BlbihyZXF1ZXN0Lm1ldGhvZCwgcmVxdWVzdC51cmwsIHRydWUpXG5cbiAgICBpZiAocmVxdWVzdC5jcmVkZW50aWFscyA9PT0gJ2luY2x1ZGUnKSB7XG4gICAgICB4aHIud2l0aENyZWRlbnRpYWxzID0gdHJ1ZVxuICAgIH0gZWxzZSBpZiAocmVxdWVzdC5jcmVkZW50aWFscyA9PT0gJ29taXQnKSB7XG4gICAgICB4aHIud2l0aENyZWRlbnRpYWxzID0gZmFsc2VcbiAgICB9XG5cbiAgICBpZiAoJ3Jlc3BvbnNlVHlwZScgaW4geGhyICYmIHN1cHBvcnQuYmxvYikge1xuICAgICAgeGhyLnJlc3BvbnNlVHlwZSA9ICdibG9iJ1xuICAgIH1cblxuICAgIHJlcXVlc3QuaGVhZGVycy5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlLCBuYW1lKSB7XG4gICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcihuYW1lLCB2YWx1ZSlcbiAgICB9KVxuXG4gICAgaWYgKHJlcXVlc3Quc2lnbmFsKSB7XG4gICAgICByZXF1ZXN0LnNpZ25hbC5hZGRFdmVudExpc3RlbmVyKCdhYm9ydCcsIGFib3J0WGhyKVxuXG4gICAgICB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIC8vIERPTkUgKHN1Y2Nlc3Mgb3IgZmFpbHVyZSlcbiAgICAgICAgaWYgKHhoci5yZWFkeVN0YXRlID09PSA0KSB7XG4gICAgICAgICAgcmVxdWVzdC5zaWduYWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignYWJvcnQnLCBhYm9ydFhocilcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHhoci5zZW5kKHR5cGVvZiByZXF1ZXN0Ll9ib2R5SW5pdCA9PT0gJ3VuZGVmaW5lZCcgPyBudWxsIDogcmVxdWVzdC5fYm9keUluaXQpXG4gIH0pXG59XG5cbmZldGNoLnBvbHlmaWxsID0gdHJ1ZVxuXG5pZiAoIXNlbGYuZmV0Y2gpIHtcbiAgc2VsZi5mZXRjaCA9IGZldGNoXG4gIHNlbGYuSGVhZGVycyA9IEhlYWRlcnNcbiAgc2VsZi5SZXF1ZXN0ID0gUmVxdWVzdFxuICBzZWxmLlJlc3BvbnNlID0gUmVzcG9uc2Vcbn1cbiIsInZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWNyZWF0ZScpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGlkZScpO1xuXG52YXIgVU5TQ09QQUJMRVMgPSB3ZWxsS25vd25TeW1ib2woJ3Vuc2NvcGFibGVzJyk7XG52YXIgQXJyYXlQcm90b3R5cGUgPSBBcnJheS5wcm90b3R5cGU7XG5cbi8vIEFycmF5LnByb3RvdHlwZVtAQHVuc2NvcGFibGVzXVxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLUBAdW5zY29wYWJsZXNcbmlmIChBcnJheVByb3RvdHlwZVtVTlNDT1BBQkxFU10gPT0gdW5kZWZpbmVkKSB7XG4gIGhpZGUoQXJyYXlQcm90b3R5cGUsIFVOU0NPUEFCTEVTLCBjcmVhdGUobnVsbCkpO1xufVxuXG4vLyBhZGQgYSBrZXkgdG8gQXJyYXkucHJvdG90eXBlW0BAdW5zY29wYWJsZXNdXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgQXJyYXlQcm90b3R5cGVbVU5TQ09QQUJMRVNdW2tleV0gPSB0cnVlO1xufTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGZyb20gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktZnJvbScpO1xudmFyIGNoZWNrQ29ycmVjdG5lc3NPZkl0ZXJhdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jaGVjay1jb3JyZWN0bmVzcy1vZi1pdGVyYXRpb24nKTtcblxudmFyIElOQ09SUkVDVF9JVEVSQVRJT04gPSAhY2hlY2tDb3JyZWN0bmVzc09mSXRlcmF0aW9uKGZ1bmN0aW9uIChpdGVyYWJsZSkge1xuICBBcnJheS5mcm9tKGl0ZXJhYmxlKTtcbn0pO1xuXG4vLyBgQXJyYXkuZnJvbWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5mcm9tXG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IElOQ09SUkVDVF9JVEVSQVRJT04gfSwge1xuICBmcm9tOiBmcm9tXG59KTtcbiIsInZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xudmFyIHdoaXRlc3BhY2VzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3doaXRlc3BhY2VzJyk7XG5cbnZhciB3aGl0ZXNwYWNlID0gJ1snICsgd2hpdGVzcGFjZXMgKyAnXSc7XG52YXIgbHRyaW0gPSBSZWdFeHAoJ14nICsgd2hpdGVzcGFjZSArIHdoaXRlc3BhY2UgKyAnKicpO1xudmFyIHJ0cmltID0gUmVnRXhwKHdoaXRlc3BhY2UgKyB3aGl0ZXNwYWNlICsgJyokJyk7XG5cbi8vIGBTdHJpbmcucHJvdG90eXBlLnsgdHJpbSwgdHJpbVN0YXJ0LCB0cmltRW5kLCB0cmltTGVmdCwgdHJpbVJpZ2h0IH1gIG1ldGhvZHMgaW1wbGVtZW50YXRpb25cbnZhciBjcmVhdGVNZXRob2QgPSBmdW5jdGlvbiAoVFlQRSkge1xuICByZXR1cm4gZnVuY3Rpb24gKCR0aGlzKSB7XG4gICAgdmFyIHN0cmluZyA9IFN0cmluZyhyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKCR0aGlzKSk7XG4gICAgaWYgKFRZUEUgJiAxKSBzdHJpbmcgPSBzdHJpbmcucmVwbGFjZShsdHJpbSwgJycpO1xuICAgIGlmIChUWVBFICYgMikgc3RyaW5nID0gc3RyaW5nLnJlcGxhY2UocnRyaW0sICcnKTtcbiAgICByZXR1cm4gc3RyaW5nO1xuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIC8vIGBTdHJpbmcucHJvdG90eXBlLnsgdHJpbUxlZnQsIHRyaW1TdGFydCB9YCBtZXRob2RzXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUudHJpbXN0YXJ0XG4gIHN0YXJ0OiBjcmVhdGVNZXRob2QoMSksXG4gIC8vIGBTdHJpbmcucHJvdG90eXBlLnsgdHJpbVJpZ2h0LCB0cmltRW5kIH1gIG1ldGhvZHNcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS50cmltZW5kXG4gIGVuZDogY3JlYXRlTWV0aG9kKDIpLFxuICAvLyBgU3RyaW5nLnByb3RvdHlwZS50cmltYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS50cmltXG4gIHRyaW06IGNyZWF0ZU1ldGhvZCgzKVxufTtcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBpc0ZvcmNlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1mb3JjZWQnKTtcbnZhciBpbmhlcml0SWZSZXF1aXJlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbmhlcml0LWlmLXJlcXVpcmVkJyk7XG52YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpLmY7XG52YXIgZ2V0T3duUHJvcGVydHlOYW1lcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcycpLmY7XG52YXIgaXNSZWdFeHAgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcmVnZXhwJyk7XG52YXIgZ2V0RmxhZ3MgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLWZsYWdzJyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIHNldFNwZWNpZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXNwZWNpZXMnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIE1BVENIID0gd2VsbEtub3duU3ltYm9sKCdtYXRjaCcpO1xudmFyIE5hdGl2ZVJlZ0V4cCA9IGdsb2JhbC5SZWdFeHA7XG52YXIgUmVnRXhwUHJvdG90eXBlID0gTmF0aXZlUmVnRXhwLnByb3RvdHlwZTtcbnZhciByZTEgPSAvYS9nO1xudmFyIHJlMiA9IC9hL2c7XG5cbi8vIFwibmV3XCIgc2hvdWxkIGNyZWF0ZSBhIG5ldyBvYmplY3QsIG9sZCB3ZWJraXQgYnVnXG52YXIgQ09SUkVDVF9ORVcgPSBuZXcgTmF0aXZlUmVnRXhwKHJlMSkgIT09IHJlMTtcblxudmFyIEZPUkNFRCA9IERFU0NSSVBUT1JTICYmIGlzRm9yY2VkKCdSZWdFeHAnLCAoIUNPUlJFQ1RfTkVXIHx8IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgcmUyW01BVENIXSA9IGZhbHNlO1xuICAvLyBSZWdFeHAgY29uc3RydWN0b3IgY2FuIGFsdGVyIGZsYWdzIGFuZCBJc1JlZ0V4cCB3b3JrcyBjb3JyZWN0IHdpdGggQEBtYXRjaFxuICByZXR1cm4gTmF0aXZlUmVnRXhwKHJlMSkgIT0gcmUxIHx8IE5hdGl2ZVJlZ0V4cChyZTIpID09IHJlMiB8fCBOYXRpdmVSZWdFeHAocmUxLCAnaScpICE9ICcvYS9pJztcbn0pKSk7XG5cbi8vIGBSZWdFeHBgIGNvbnN0cnVjdG9yXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1yZWdleHAtY29uc3RydWN0b3JcbmlmIChGT1JDRUQpIHtcbiAgdmFyIFJlZ0V4cFdyYXBwZXIgPSBmdW5jdGlvbiBSZWdFeHAocGF0dGVybiwgZmxhZ3MpIHtcbiAgICB2YXIgdGhpc0lzUmVnRXhwID0gdGhpcyBpbnN0YW5jZW9mIFJlZ0V4cFdyYXBwZXI7XG4gICAgdmFyIHBhdHRlcm5Jc1JlZ0V4cCA9IGlzUmVnRXhwKHBhdHRlcm4pO1xuICAgIHZhciBmbGFnc0FyZVVuZGVmaW5lZCA9IGZsYWdzID09PSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuICF0aGlzSXNSZWdFeHAgJiYgcGF0dGVybklzUmVnRXhwICYmIHBhdHRlcm4uY29uc3RydWN0b3IgPT09IFJlZ0V4cFdyYXBwZXIgJiYgZmxhZ3NBcmVVbmRlZmluZWQgPyBwYXR0ZXJuXG4gICAgICA6IGluaGVyaXRJZlJlcXVpcmVkKENPUlJFQ1RfTkVXXG4gICAgICAgID8gbmV3IE5hdGl2ZVJlZ0V4cChwYXR0ZXJuSXNSZWdFeHAgJiYgIWZsYWdzQXJlVW5kZWZpbmVkID8gcGF0dGVybi5zb3VyY2UgOiBwYXR0ZXJuLCBmbGFncylcbiAgICAgICAgOiBOYXRpdmVSZWdFeHAoKHBhdHRlcm5Jc1JlZ0V4cCA9IHBhdHRlcm4gaW5zdGFuY2VvZiBSZWdFeHBXcmFwcGVyKVxuICAgICAgICAgID8gcGF0dGVybi5zb3VyY2VcbiAgICAgICAgICA6IHBhdHRlcm4sIHBhdHRlcm5Jc1JlZ0V4cCAmJiBmbGFnc0FyZVVuZGVmaW5lZCA/IGdldEZsYWdzLmNhbGwocGF0dGVybikgOiBmbGFncylcbiAgICAgICwgdGhpc0lzUmVnRXhwID8gdGhpcyA6IFJlZ0V4cFByb3RvdHlwZSwgUmVnRXhwV3JhcHBlcik7XG4gIH07XG4gIHZhciBwcm94eSA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgICBrZXkgaW4gUmVnRXhwV3JhcHBlciB8fCBkZWZpbmVQcm9wZXJ0eShSZWdFeHBXcmFwcGVyLCBrZXksIHtcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gTmF0aXZlUmVnRXhwW2tleV07IH0sXG4gICAgICBzZXQ6IGZ1bmN0aW9uIChpdCkgeyBOYXRpdmVSZWdFeHBba2V5XSA9IGl0OyB9XG4gICAgfSk7XG4gIH07XG4gIHZhciBrZXlzID0gZ2V0T3duUHJvcGVydHlOYW1lcyhOYXRpdmVSZWdFeHApO1xuICB2YXIgaW5kZXggPSAwO1xuICB3aGlsZSAoa2V5cy5sZW5ndGggPiBpbmRleCkgcHJveHkoa2V5c1tpbmRleCsrXSk7XG4gIFJlZ0V4cFByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFJlZ0V4cFdyYXBwZXI7XG4gIFJlZ0V4cFdyYXBwZXIucHJvdG90eXBlID0gUmVnRXhwUHJvdG90eXBlO1xuICByZWRlZmluZShnbG9iYWwsICdSZWdFeHAnLCBSZWdFeHBXcmFwcGVyKTtcbn1cblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtZ2V0LXJlZ2V4cC1AQHNwZWNpZXNcbnNldFNwZWNpZXMoJ1JlZ0V4cCcpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGNoYXJBdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctbXVsdGlieXRlJykuY2hhckF0O1xuXG4vLyBgQWR2YW5jZVN0cmluZ0luZGV4YCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFkdmFuY2VzdHJpbmdpbmRleFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoUywgaW5kZXgsIHVuaWNvZGUpIHtcbiAgcmV0dXJuIGluZGV4ICsgKHVuaWNvZGUgPyBjaGFyQXQoUywgaW5kZXgpLmxlbmd0aCA6IDEpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIEluZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5kZXhlZC1vYmplY3QnKTtcbnZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciBzbG9wcHlBcnJheU1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zbG9wcHktYXJyYXktbWV0aG9kJyk7XG5cbnZhciBuYXRpdmVKb2luID0gW10uam9pbjtcblxudmFyIEVTM19TVFJJTkdTID0gSW5kZXhlZE9iamVjdCAhPSBPYmplY3Q7XG52YXIgU0xPUFBZX01FVEhPRCA9IHNsb3BweUFycmF5TWV0aG9kKCdqb2luJywgJywnKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5qb2luYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5qb2luXG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBFUzNfU1RSSU5HUyB8fCBTTE9QUFlfTUVUSE9EIH0sIHtcbiAgam9pbjogZnVuY3Rpb24gam9pbihzZXBhcmF0b3IpIHtcbiAgICByZXR1cm4gbmF0aXZlSm9pbi5jYWxsKHRvSW5kZXhlZE9iamVjdCh0aGlzKSwgc2VwYXJhdG9yID09PSB1bmRlZmluZWQgPyAnLCcgOiBzZXBhcmF0b3IpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIFRPX1NUUklOR19UQUcgPSB3ZWxsS25vd25TeW1ib2woJ3RvU3RyaW5nVGFnJyk7XG52YXIgdGVzdCA9IHt9O1xuXG50ZXN0W1RPX1NUUklOR19UQUddID0gJ3onO1xuXG4vLyBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZ2AgbWV0aG9kIGltcGxlbWVudGF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nXG5tb2R1bGUuZXhwb3J0cyA9IFN0cmluZyh0ZXN0KSAhPT0gJ1tvYmplY3Qgel0nID8gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gIHJldHVybiAnW29iamVjdCAnICsgY2xhc3NvZih0aGlzKSArICddJztcbn0gOiB0ZXN0LnRvU3RyaW5nO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBnbG9iYWwuUHJvbWlzZTtcbiIsInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBpc0FycmF5SXRlcmF0b3JNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtYXJyYXktaXRlcmF0b3ItbWV0aG9kJyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9iaW5kLWNvbnRleHQnKTtcbnZhciBnZXRJdGVyYXRvck1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtaXRlcmF0b3ItbWV0aG9kJyk7XG52YXIgY2FsbFdpdGhTYWZlSXRlcmF0aW9uQ2xvc2luZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jYWxsLXdpdGgtc2FmZS1pdGVyYXRpb24tY2xvc2luZycpO1xuXG52YXIgUmVzdWx0ID0gZnVuY3Rpb24gKHN0b3BwZWQsIHJlc3VsdCkge1xuICB0aGlzLnN0b3BwZWQgPSBzdG9wcGVkO1xuICB0aGlzLnJlc3VsdCA9IHJlc3VsdDtcbn07XG5cbnZhciBpdGVyYXRlID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlcmFibGUsIGZuLCB0aGF0LCBBU19FTlRSSUVTLCBJU19JVEVSQVRPUikge1xuICB2YXIgYm91bmRGdW5jdGlvbiA9IGJpbmQoZm4sIHRoYXQsIEFTX0VOVFJJRVMgPyAyIDogMSk7XG4gIHZhciBpdGVyYXRvciwgaXRlckZuLCBpbmRleCwgbGVuZ3RoLCByZXN1bHQsIHN0ZXA7XG5cbiAgaWYgKElTX0lURVJBVE9SKSB7XG4gICAgaXRlcmF0b3IgPSBpdGVyYWJsZTtcbiAgfSBlbHNlIHtcbiAgICBpdGVyRm4gPSBnZXRJdGVyYXRvck1ldGhvZChpdGVyYWJsZSk7XG4gICAgaWYgKHR5cGVvZiBpdGVyRm4gIT0gJ2Z1bmN0aW9uJykgdGhyb3cgVHlwZUVycm9yKCdUYXJnZXQgaXMgbm90IGl0ZXJhYmxlJyk7XG4gICAgLy8gb3B0aW1pc2F0aW9uIGZvciBhcnJheSBpdGVyYXRvcnNcbiAgICBpZiAoaXNBcnJheUl0ZXJhdG9yTWV0aG9kKGl0ZXJGbikpIHtcbiAgICAgIGZvciAoaW5kZXggPSAwLCBsZW5ndGggPSB0b0xlbmd0aChpdGVyYWJsZS5sZW5ndGgpOyBsZW5ndGggPiBpbmRleDsgaW5kZXgrKykge1xuICAgICAgICByZXN1bHQgPSBBU19FTlRSSUVTXG4gICAgICAgICAgPyBib3VuZEZ1bmN0aW9uKGFuT2JqZWN0KHN0ZXAgPSBpdGVyYWJsZVtpbmRleF0pWzBdLCBzdGVwWzFdKVxuICAgICAgICAgIDogYm91bmRGdW5jdGlvbihpdGVyYWJsZVtpbmRleF0pO1xuICAgICAgICBpZiAocmVzdWx0ICYmIHJlc3VsdCBpbnN0YW5jZW9mIFJlc3VsdCkgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH0gcmV0dXJuIG5ldyBSZXN1bHQoZmFsc2UpO1xuICAgIH1cbiAgICBpdGVyYXRvciA9IGl0ZXJGbi5jYWxsKGl0ZXJhYmxlKTtcbiAgfVxuXG4gIHdoaWxlICghKHN0ZXAgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmUpIHtcbiAgICByZXN1bHQgPSBjYWxsV2l0aFNhZmVJdGVyYXRpb25DbG9zaW5nKGl0ZXJhdG9yLCBib3VuZEZ1bmN0aW9uLCBzdGVwLnZhbHVlLCBBU19FTlRSSUVTKTtcbiAgICBpZiAocmVzdWx0ICYmIHJlc3VsdCBpbnN0YW5jZW9mIFJlc3VsdCkgcmV0dXJuIHJlc3VsdDtcbiAgfSByZXR1cm4gbmV3IFJlc3VsdChmYWxzZSk7XG59O1xuXG5pdGVyYXRlLnN0b3AgPSBmdW5jdGlvbiAocmVzdWx0KSB7XG4gIHJldHVybiBuZXcgUmVzdWx0KHRydWUsIHJlc3VsdCk7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpLmY7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mLXJhdycpO1xudmFyIG1hY3JvdGFzayA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90YXNrJykuc2V0O1xudmFyIHVzZXJBZ2VudCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy91c2VyLWFnZW50Jyk7XG5cbnZhciBNdXRhdGlvbk9ic2VydmVyID0gZ2xvYmFsLk11dGF0aW9uT2JzZXJ2ZXIgfHwgZ2xvYmFsLldlYktpdE11dGF0aW9uT2JzZXJ2ZXI7XG52YXIgcHJvY2VzcyA9IGdsb2JhbC5wcm9jZXNzO1xudmFyIFByb21pc2UgPSBnbG9iYWwuUHJvbWlzZTtcbnZhciBJU19OT0RFID0gY2xhc3NvZihwcm9jZXNzKSA9PSAncHJvY2Vzcyc7XG4vLyBOb2RlLmpzIDExIHNob3dzIEV4cGVyaW1lbnRhbFdhcm5pbmcgb24gZ2V0dGluZyBgcXVldWVNaWNyb3Rhc2tgXG52YXIgcXVldWVNaWNyb3Rhc2tEZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGdsb2JhbCwgJ3F1ZXVlTWljcm90YXNrJyk7XG52YXIgcXVldWVNaWNyb3Rhc2sgPSBxdWV1ZU1pY3JvdGFza0Rlc2NyaXB0b3IgJiYgcXVldWVNaWNyb3Rhc2tEZXNjcmlwdG9yLnZhbHVlO1xuXG52YXIgZmx1c2gsIGhlYWQsIGxhc3QsIG5vdGlmeSwgdG9nZ2xlLCBub2RlLCBwcm9taXNlLCB0aGVuO1xuXG4vLyBtb2Rlcm4gZW5naW5lcyBoYXZlIHF1ZXVlTWljcm90YXNrIG1ldGhvZFxuaWYgKCFxdWV1ZU1pY3JvdGFzaykge1xuICBmbHVzaCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcGFyZW50LCBmbjtcbiAgICBpZiAoSVNfTk9ERSAmJiAocGFyZW50ID0gcHJvY2Vzcy5kb21haW4pKSBwYXJlbnQuZXhpdCgpO1xuICAgIHdoaWxlIChoZWFkKSB7XG4gICAgICBmbiA9IGhlYWQuZm47XG4gICAgICBoZWFkID0gaGVhZC5uZXh0O1xuICAgICAgdHJ5IHtcbiAgICAgICAgZm4oKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGlmIChoZWFkKSBub3RpZnkoKTtcbiAgICAgICAgZWxzZSBsYXN0ID0gdW5kZWZpbmVkO1xuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgIH1cbiAgICB9IGxhc3QgPSB1bmRlZmluZWQ7XG4gICAgaWYgKHBhcmVudCkgcGFyZW50LmVudGVyKCk7XG4gIH07XG5cbiAgLy8gTm9kZS5qc1xuICBpZiAoSVNfTk9ERSkge1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHByb2Nlc3MubmV4dFRpY2soZmx1c2gpO1xuICAgIH07XG4gIC8vIGJyb3dzZXJzIHdpdGggTXV0YXRpb25PYnNlcnZlciwgZXhjZXB0IGlPUyAtIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy8zMzlcbiAgfSBlbHNlIGlmIChNdXRhdGlvbk9ic2VydmVyICYmICEvKGlwaG9uZXxpcG9kfGlwYWQpLiphcHBsZXdlYmtpdC9pLnRlc3QodXNlckFnZW50KSkge1xuICAgIHRvZ2dsZSA9IHRydWU7XG4gICAgbm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCcnKTtcbiAgICBuZXcgTXV0YXRpb25PYnNlcnZlcihmbHVzaCkub2JzZXJ2ZShub2RlLCB7IGNoYXJhY3RlckRhdGE6IHRydWUgfSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgbm9kZS5kYXRhID0gdG9nZ2xlID0gIXRvZ2dsZTtcbiAgICB9O1xuICAvLyBlbnZpcm9ubWVudHMgd2l0aCBtYXliZSBub24tY29tcGxldGVseSBjb3JyZWN0LCBidXQgZXhpc3RlbnQgUHJvbWlzZVxuICB9IGVsc2UgaWYgKFByb21pc2UgJiYgUHJvbWlzZS5yZXNvbHZlKSB7XG4gICAgLy8gUHJvbWlzZS5yZXNvbHZlIHdpdGhvdXQgYW4gYXJndW1lbnQgdGhyb3dzIGFuIGVycm9yIGluIExHIFdlYk9TIDJcbiAgICBwcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKHVuZGVmaW5lZCk7XG4gICAgdGhlbiA9IHByb21pc2UudGhlbjtcbiAgICBub3RpZnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGVuLmNhbGwocHJvbWlzZSwgZmx1c2gpO1xuICAgIH07XG4gIC8vIGZvciBvdGhlciBlbnZpcm9ubWVudHMgLSBtYWNyb3Rhc2sgYmFzZWQgb246XG4gIC8vIC0gc2V0SW1tZWRpYXRlXG4gIC8vIC0gTWVzc2FnZUNoYW5uZWxcbiAgLy8gLSB3aW5kb3cucG9zdE1lc3NhZ1xuICAvLyAtIG9ucmVhZHlzdGF0ZWNoYW5nZVxuICAvLyAtIHNldFRpbWVvdXRcbiAgfSBlbHNlIHtcbiAgICBub3RpZnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBzdHJhbmdlIElFICsgd2VicGFjayBkZXYgc2VydmVyIGJ1ZyAtIHVzZSAuY2FsbChnbG9iYWwpXG4gICAgICBtYWNyb3Rhc2suY2FsbChnbG9iYWwsIGZsdXNoKTtcbiAgICB9O1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gcXVldWVNaWNyb3Rhc2sgfHwgZnVuY3Rpb24gKGZuKSB7XG4gIHZhciB0YXNrID0geyBmbjogZm4sIG5leHQ6IHVuZGVmaW5lZCB9O1xuICBpZiAobGFzdCkgbGFzdC5uZXh0ID0gdGFzaztcbiAgaWYgKCFoZWFkKSB7XG4gICAgaGVhZCA9IHRhc2s7XG4gICAgbm90aWZ5KCk7XG4gIH0gbGFzdCA9IHRhc2s7XG59O1xuIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIG5ld1Byb21pc2VDYXBhYmlsaXR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25ldy1wcm9taXNlLWNhcGFiaWxpdHknKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQywgeCkge1xuICBhbk9iamVjdChDKTtcbiAgaWYgKGlzT2JqZWN0KHgpICYmIHguY29uc3RydWN0b3IgPT09IEMpIHJldHVybiB4O1xuICB2YXIgcHJvbWlzZUNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eS5mKEMpO1xuICB2YXIgcmVzb2x2ZSA9IHByb21pc2VDYXBhYmlsaXR5LnJlc29sdmU7XG4gIHJlc29sdmUoeCk7XG4gIHJldHVybiBwcm9taXNlQ2FwYWJpbGl0eS5wcm9taXNlO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgdmFyIGNvbnNvbGUgPSBnbG9iYWwuY29uc29sZTtcbiAgaWYgKGNvbnNvbGUgJiYgY29uc29sZS5lcnJvcikge1xuICAgIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgPyBjb25zb2xlLmVycm9yKGEpIDogY29uc29sZS5lcnJvcihhLCBiKTtcbiAgfVxufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4geyBlcnJvcjogZmFsc2UsIHZhbHVlOiBleGVjKCkgfTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4geyBlcnJvcjogdHJ1ZSwgdmFsdWU6IGVycm9yIH07XG4gIH1cbn07XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXNldC1wcm90b3R5cGUtb2YnKTtcblxuLy8gbWFrZXMgc3ViY2xhc3Npbmcgd29yayBjb3JyZWN0IGZvciB3cmFwcGVkIGJ1aWx0LWluc1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoJHRoaXMsIGR1bW15LCBXcmFwcGVyKSB7XG4gIHZhciBOZXdUYXJnZXQsIE5ld1RhcmdldFByb3RvdHlwZTtcbiAgaWYgKFxuICAgIC8vIGl0IGNhbiB3b3JrIG9ubHkgd2l0aCBuYXRpdmUgYHNldFByb3RvdHlwZU9mYFxuICAgIHNldFByb3RvdHlwZU9mICYmXG4gICAgLy8gd2UgaGF2ZW4ndCBjb21wbGV0ZWx5IGNvcnJlY3QgcHJlLUVTNiB3YXkgZm9yIGdldHRpbmcgYG5ldy50YXJnZXRgLCBzbyB1c2UgdGhpc1xuICAgIHR5cGVvZiAoTmV3VGFyZ2V0ID0gZHVtbXkuY29uc3RydWN0b3IpID09ICdmdW5jdGlvbicgJiZcbiAgICBOZXdUYXJnZXQgIT09IFdyYXBwZXIgJiZcbiAgICBpc09iamVjdChOZXdUYXJnZXRQcm90b3R5cGUgPSBOZXdUYXJnZXQucHJvdG90eXBlKSAmJlxuICAgIE5ld1RhcmdldFByb3RvdHlwZSAhPT0gV3JhcHBlci5wcm90b3R5cGVcbiAgKSBzZXRQcm90b3R5cGVPZigkdGhpcywgTmV3VGFyZ2V0UHJvdG90eXBlKTtcbiAgcmV0dXJuICR0aGlzO1xufTtcbiIsImZ1bmN0aW9uIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkge1xuICAgIGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGFyci5sZW5ndGgpOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgICBhcnIyW2ldID0gYXJyW2ldO1xuICAgIH1cblxuICAgIHJldHVybiBhcnIyO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2FycmF5V2l0aG91dEhvbGVzOyIsImZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXkoaXRlcikge1xuICBpZiAoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChpdGVyKSB8fCBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaXRlcikgPT09IFwiW29iamVjdCBBcmd1bWVudHNdXCIpIHJldHVybiBBcnJheS5mcm9tKGl0ZXIpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9pdGVyYWJsZVRvQXJyYXk7IiwiZnVuY3Rpb24gX25vbkl0ZXJhYmxlU3ByZWFkKCkge1xuICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIHNwcmVhZCBub24taXRlcmFibGUgaW5zdGFuY2VcIik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX25vbkl0ZXJhYmxlU3ByZWFkOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE0LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxudmFyIHJ1bnRpbWUgPSAoZnVuY3Rpb24gKGV4cG9ydHMpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgdmFyIE9wID0gT2JqZWN0LnByb3RvdHlwZTtcbiAgdmFyIGhhc093biA9IE9wLmhhc093blByb3BlcnR5O1xuICB2YXIgdW5kZWZpbmVkOyAvLyBNb3JlIGNvbXByZXNzaWJsZSB0aGFuIHZvaWQgMC5cbiAgdmFyICRTeW1ib2wgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgPyBTeW1ib2wgOiB7fTtcbiAgdmFyIGl0ZXJhdG9yU3ltYm9sID0gJFN5bWJvbC5pdGVyYXRvciB8fCBcIkBAaXRlcmF0b3JcIjtcbiAgdmFyIGFzeW5jSXRlcmF0b3JTeW1ib2wgPSAkU3ltYm9sLmFzeW5jSXRlcmF0b3IgfHwgXCJAQGFzeW5jSXRlcmF0b3JcIjtcbiAgdmFyIHRvU3RyaW5nVGFnU3ltYm9sID0gJFN5bWJvbC50b1N0cmluZ1RhZyB8fCBcIkBAdG9TdHJpbmdUYWdcIjtcblxuICBmdW5jdGlvbiB3cmFwKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSB7XG4gICAgLy8gSWYgb3V0ZXJGbiBwcm92aWRlZCBhbmQgb3V0ZXJGbi5wcm90b3R5cGUgaXMgYSBHZW5lcmF0b3IsIHRoZW4gb3V0ZXJGbi5wcm90b3R5cGUgaW5zdGFuY2VvZiBHZW5lcmF0b3IuXG4gICAgdmFyIHByb3RvR2VuZXJhdG9yID0gb3V0ZXJGbiAmJiBvdXRlckZuLnByb3RvdHlwZSBpbnN0YW5jZW9mIEdlbmVyYXRvciA/IG91dGVyRm4gOiBHZW5lcmF0b3I7XG4gICAgdmFyIGdlbmVyYXRvciA9IE9iamVjdC5jcmVhdGUocHJvdG9HZW5lcmF0b3IucHJvdG90eXBlKTtcbiAgICB2YXIgY29udGV4dCA9IG5ldyBDb250ZXh0KHRyeUxvY3NMaXN0IHx8IFtdKTtcblxuICAgIC8vIFRoZSAuX2ludm9rZSBtZXRob2QgdW5pZmllcyB0aGUgaW1wbGVtZW50YXRpb25zIG9mIHRoZSAubmV4dCxcbiAgICAvLyAudGhyb3csIGFuZCAucmV0dXJuIG1ldGhvZHMuXG4gICAgZ2VuZXJhdG9yLl9pbnZva2UgPSBtYWtlSW52b2tlTWV0aG9kKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpO1xuXG4gICAgcmV0dXJuIGdlbmVyYXRvcjtcbiAgfVxuICBleHBvcnRzLndyYXAgPSB3cmFwO1xuXG4gIC8vIFRyeS9jYXRjaCBoZWxwZXIgdG8gbWluaW1pemUgZGVvcHRpbWl6YXRpb25zLiBSZXR1cm5zIGEgY29tcGxldGlvblxuICAvLyByZWNvcmQgbGlrZSBjb250ZXh0LnRyeUVudHJpZXNbaV0uY29tcGxldGlvbi4gVGhpcyBpbnRlcmZhY2UgY291bGRcbiAgLy8gaGF2ZSBiZWVuIChhbmQgd2FzIHByZXZpb3VzbHkpIGRlc2lnbmVkIHRvIHRha2UgYSBjbG9zdXJlIHRvIGJlXG4gIC8vIGludm9rZWQgd2l0aG91dCBhcmd1bWVudHMsIGJ1dCBpbiBhbGwgdGhlIGNhc2VzIHdlIGNhcmUgYWJvdXQgd2VcbiAgLy8gYWxyZWFkeSBoYXZlIGFuIGV4aXN0aW5nIG1ldGhvZCB3ZSB3YW50IHRvIGNhbGwsIHNvIHRoZXJlJ3Mgbm8gbmVlZFxuICAvLyB0byBjcmVhdGUgYSBuZXcgZnVuY3Rpb24gb2JqZWN0LiBXZSBjYW4gZXZlbiBnZXQgYXdheSB3aXRoIGFzc3VtaW5nXG4gIC8vIHRoZSBtZXRob2QgdGFrZXMgZXhhY3RseSBvbmUgYXJndW1lbnQsIHNpbmNlIHRoYXQgaGFwcGVucyB0byBiZSB0cnVlXG4gIC8vIGluIGV2ZXJ5IGNhc2UsIHNvIHdlIGRvbid0IGhhdmUgdG8gdG91Y2ggdGhlIGFyZ3VtZW50cyBvYmplY3QuIFRoZVxuICAvLyBvbmx5IGFkZGl0aW9uYWwgYWxsb2NhdGlvbiByZXF1aXJlZCBpcyB0aGUgY29tcGxldGlvbiByZWNvcmQsIHdoaWNoXG4gIC8vIGhhcyBhIHN0YWJsZSBzaGFwZSBhbmQgc28gaG9wZWZ1bGx5IHNob3VsZCBiZSBjaGVhcCB0byBhbGxvY2F0ZS5cbiAgZnVuY3Rpb24gdHJ5Q2F0Y2goZm4sIG9iaiwgYXJnKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiB7IHR5cGU6IFwibm9ybWFsXCIsIGFyZzogZm4uY2FsbChvYmosIGFyZykgfTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJldHVybiB7IHR5cGU6IFwidGhyb3dcIiwgYXJnOiBlcnIgfTtcbiAgICB9XG4gIH1cblxuICB2YXIgR2VuU3RhdGVTdXNwZW5kZWRTdGFydCA9IFwic3VzcGVuZGVkU3RhcnRcIjtcbiAgdmFyIEdlblN0YXRlU3VzcGVuZGVkWWllbGQgPSBcInN1c3BlbmRlZFlpZWxkXCI7XG4gIHZhciBHZW5TdGF0ZUV4ZWN1dGluZyA9IFwiZXhlY3V0aW5nXCI7XG4gIHZhciBHZW5TdGF0ZUNvbXBsZXRlZCA9IFwiY29tcGxldGVkXCI7XG5cbiAgLy8gUmV0dXJuaW5nIHRoaXMgb2JqZWN0IGZyb20gdGhlIGlubmVyRm4gaGFzIHRoZSBzYW1lIGVmZmVjdCBhc1xuICAvLyBicmVha2luZyBvdXQgb2YgdGhlIGRpc3BhdGNoIHN3aXRjaCBzdGF0ZW1lbnQuXG4gIHZhciBDb250aW51ZVNlbnRpbmVsID0ge307XG5cbiAgLy8gRHVtbXkgY29uc3RydWN0b3IgZnVuY3Rpb25zIHRoYXQgd2UgdXNlIGFzIHRoZSAuY29uc3RydWN0b3IgYW5kXG4gIC8vIC5jb25zdHJ1Y3Rvci5wcm90b3R5cGUgcHJvcGVydGllcyBmb3IgZnVuY3Rpb25zIHRoYXQgcmV0dXJuIEdlbmVyYXRvclxuICAvLyBvYmplY3RzLiBGb3IgZnVsbCBzcGVjIGNvbXBsaWFuY2UsIHlvdSBtYXkgd2lzaCB0byBjb25maWd1cmUgeW91clxuICAvLyBtaW5pZmllciBub3QgdG8gbWFuZ2xlIHRoZSBuYW1lcyBvZiB0aGVzZSB0d28gZnVuY3Rpb25zLlxuICBmdW5jdGlvbiBHZW5lcmF0b3IoKSB7fVxuICBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvbigpIHt9XG4gIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKCkge31cblxuICAvLyBUaGlzIGlzIGEgcG9seWZpbGwgZm9yICVJdGVyYXRvclByb3RvdHlwZSUgZm9yIGVudmlyb25tZW50cyB0aGF0XG4gIC8vIGRvbid0IG5hdGl2ZWx5IHN1cHBvcnQgaXQuXG4gIHZhciBJdGVyYXRvclByb3RvdHlwZSA9IHt9O1xuICBJdGVyYXRvclByb3RvdHlwZVtpdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgdmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xuICB2YXIgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90byAmJiBnZXRQcm90byhnZXRQcm90byh2YWx1ZXMoW10pKSk7XG4gIGlmIChOYXRpdmVJdGVyYXRvclByb3RvdHlwZSAmJlxuICAgICAgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgIT09IE9wICYmXG4gICAgICBoYXNPd24uY2FsbChOYXRpdmVJdGVyYXRvclByb3RvdHlwZSwgaXRlcmF0b3JTeW1ib2wpKSB7XG4gICAgLy8gVGhpcyBlbnZpcm9ubWVudCBoYXMgYSBuYXRpdmUgJUl0ZXJhdG9yUHJvdG90eXBlJTsgdXNlIGl0IGluc3RlYWRcbiAgICAvLyBvZiB0aGUgcG9seWZpbGwuXG4gICAgSXRlcmF0b3JQcm90b3R5cGUgPSBOYXRpdmVJdGVyYXRvclByb3RvdHlwZTtcbiAgfVxuXG4gIHZhciBHcCA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLnByb3RvdHlwZSA9XG4gICAgR2VuZXJhdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUpO1xuICBHZW5lcmF0b3JGdW5jdGlvbi5wcm90b3R5cGUgPSBHcC5jb25zdHJ1Y3RvciA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlO1xuICBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEdlbmVyYXRvckZ1bmN0aW9uO1xuICBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZVt0b1N0cmluZ1RhZ1N5bWJvbF0gPVxuICAgIEdlbmVyYXRvckZ1bmN0aW9uLmRpc3BsYXlOYW1lID0gXCJHZW5lcmF0b3JGdW5jdGlvblwiO1xuXG4gIC8vIEhlbHBlciBmb3IgZGVmaW5pbmcgdGhlIC5uZXh0LCAudGhyb3csIGFuZCAucmV0dXJuIG1ldGhvZHMgb2YgdGhlXG4gIC8vIEl0ZXJhdG9yIGludGVyZmFjZSBpbiB0ZXJtcyBvZiBhIHNpbmdsZSAuX2ludm9rZSBtZXRob2QuXG4gIGZ1bmN0aW9uIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhwcm90b3R5cGUpIHtcbiAgICBbXCJuZXh0XCIsIFwidGhyb3dcIiwgXCJyZXR1cm5cIl0uZm9yRWFjaChmdW5jdGlvbihtZXRob2QpIHtcbiAgICAgIHByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24oYXJnKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pbnZva2UobWV0aG9kLCBhcmcpO1xuICAgICAgfTtcbiAgICB9KTtcbiAgfVxuXG4gIGV4cG9ydHMuaXNHZW5lcmF0b3JGdW5jdGlvbiA9IGZ1bmN0aW9uKGdlbkZ1bikge1xuICAgIHZhciBjdG9yID0gdHlwZW9mIGdlbkZ1biA9PT0gXCJmdW5jdGlvblwiICYmIGdlbkZ1bi5jb25zdHJ1Y3RvcjtcbiAgICByZXR1cm4gY3RvclxuICAgICAgPyBjdG9yID09PSBHZW5lcmF0b3JGdW5jdGlvbiB8fFxuICAgICAgICAvLyBGb3IgdGhlIG5hdGl2ZSBHZW5lcmF0b3JGdW5jdGlvbiBjb25zdHJ1Y3RvciwgdGhlIGJlc3Qgd2UgY2FuXG4gICAgICAgIC8vIGRvIGlzIHRvIGNoZWNrIGl0cyAubmFtZSBwcm9wZXJ0eS5cbiAgICAgICAgKGN0b3IuZGlzcGxheU5hbWUgfHwgY3Rvci5uYW1lKSA9PT0gXCJHZW5lcmF0b3JGdW5jdGlvblwiXG4gICAgICA6IGZhbHNlO1xuICB9O1xuXG4gIGV4cG9ydHMubWFyayA9IGZ1bmN0aW9uKGdlbkZ1bikge1xuICAgIGlmIChPYmplY3Quc2V0UHJvdG90eXBlT2YpIHtcbiAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihnZW5GdW4sIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZ2VuRnVuLl9fcHJvdG9fXyA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlO1xuICAgICAgaWYgKCEodG9TdHJpbmdUYWdTeW1ib2wgaW4gZ2VuRnVuKSkge1xuICAgICAgICBnZW5GdW5bdG9TdHJpbmdUYWdTeW1ib2xdID0gXCJHZW5lcmF0b3JGdW5jdGlvblwiO1xuICAgICAgfVxuICAgIH1cbiAgICBnZW5GdW4ucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShHcCk7XG4gICAgcmV0dXJuIGdlbkZ1bjtcbiAgfTtcblxuICAvLyBXaXRoaW4gdGhlIGJvZHkgb2YgYW55IGFzeW5jIGZ1bmN0aW9uLCBgYXdhaXQgeGAgaXMgdHJhbnNmb3JtZWQgdG9cbiAgLy8gYHlpZWxkIHJlZ2VuZXJhdG9yUnVudGltZS5hd3JhcCh4KWAsIHNvIHRoYXQgdGhlIHJ1bnRpbWUgY2FuIHRlc3RcbiAgLy8gYGhhc093bi5jYWxsKHZhbHVlLCBcIl9fYXdhaXRcIilgIHRvIGRldGVybWluZSBpZiB0aGUgeWllbGRlZCB2YWx1ZSBpc1xuICAvLyBtZWFudCB0byBiZSBhd2FpdGVkLlxuICBleHBvcnRzLmF3cmFwID0gZnVuY3Rpb24oYXJnKSB7XG4gICAgcmV0dXJuIHsgX19hd2FpdDogYXJnIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gQXN5bmNJdGVyYXRvcihnZW5lcmF0b3IpIHtcbiAgICBmdW5jdGlvbiBpbnZva2UobWV0aG9kLCBhcmcsIHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKGdlbmVyYXRvclttZXRob2RdLCBnZW5lcmF0b3IsIGFyZyk7XG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICByZWplY3QocmVjb3JkLmFyZyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgcmVzdWx0ID0gcmVjb3JkLmFyZztcbiAgICAgICAgdmFyIHZhbHVlID0gcmVzdWx0LnZhbHVlO1xuICAgICAgICBpZiAodmFsdWUgJiZcbiAgICAgICAgICAgIHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIiAmJlxuICAgICAgICAgICAgaGFzT3duLmNhbGwodmFsdWUsIFwiX19hd2FpdFwiKSkge1xuICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodmFsdWUuX19hd2FpdCkudGhlbihmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgaW52b2tlKFwibmV4dFwiLCB2YWx1ZSwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgIGludm9rZShcInRocm93XCIsIGVyciwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodmFsdWUpLnRoZW4oZnVuY3Rpb24odW53cmFwcGVkKSB7XG4gICAgICAgICAgLy8gV2hlbiBhIHlpZWxkZWQgUHJvbWlzZSBpcyByZXNvbHZlZCwgaXRzIGZpbmFsIHZhbHVlIGJlY29tZXNcbiAgICAgICAgICAvLyB0aGUgLnZhbHVlIG9mIHRoZSBQcm9taXNlPHt2YWx1ZSxkb25lfT4gcmVzdWx0IGZvciB0aGVcbiAgICAgICAgICAvLyBjdXJyZW50IGl0ZXJhdGlvbi5cbiAgICAgICAgICByZXN1bHQudmFsdWUgPSB1bndyYXBwZWQ7XG4gICAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICB9LCBmdW5jdGlvbihlcnJvcikge1xuICAgICAgICAgIC8vIElmIGEgcmVqZWN0ZWQgUHJvbWlzZSB3YXMgeWllbGRlZCwgdGhyb3cgdGhlIHJlamVjdGlvbiBiYWNrXG4gICAgICAgICAgLy8gaW50byB0aGUgYXN5bmMgZ2VuZXJhdG9yIGZ1bmN0aW9uIHNvIGl0IGNhbiBiZSBoYW5kbGVkIHRoZXJlLlxuICAgICAgICAgIHJldHVybiBpbnZva2UoXCJ0aHJvd1wiLCBlcnJvciwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHByZXZpb3VzUHJvbWlzZTtcblxuICAgIGZ1bmN0aW9uIGVucXVldWUobWV0aG9kLCBhcmcpIHtcbiAgICAgIGZ1bmN0aW9uIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgaW52b2tlKG1ldGhvZCwgYXJnLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHByZXZpb3VzUHJvbWlzZSA9XG4gICAgICAgIC8vIElmIGVucXVldWUgaGFzIGJlZW4gY2FsbGVkIGJlZm9yZSwgdGhlbiB3ZSB3YW50IHRvIHdhaXQgdW50aWxcbiAgICAgICAgLy8gYWxsIHByZXZpb3VzIFByb21pc2VzIGhhdmUgYmVlbiByZXNvbHZlZCBiZWZvcmUgY2FsbGluZyBpbnZva2UsXG4gICAgICAgIC8vIHNvIHRoYXQgcmVzdWx0cyBhcmUgYWx3YXlzIGRlbGl2ZXJlZCBpbiB0aGUgY29ycmVjdCBvcmRlci4gSWZcbiAgICAgICAgLy8gZW5xdWV1ZSBoYXMgbm90IGJlZW4gY2FsbGVkIGJlZm9yZSwgdGhlbiBpdCBpcyBpbXBvcnRhbnQgdG9cbiAgICAgICAgLy8gY2FsbCBpbnZva2UgaW1tZWRpYXRlbHksIHdpdGhvdXQgd2FpdGluZyBvbiBhIGNhbGxiYWNrIHRvIGZpcmUsXG4gICAgICAgIC8vIHNvIHRoYXQgdGhlIGFzeW5jIGdlbmVyYXRvciBmdW5jdGlvbiBoYXMgdGhlIG9wcG9ydHVuaXR5IHRvIGRvXG4gICAgICAgIC8vIGFueSBuZWNlc3Nhcnkgc2V0dXAgaW4gYSBwcmVkaWN0YWJsZSB3YXkuIFRoaXMgcHJlZGljdGFiaWxpdHlcbiAgICAgICAgLy8gaXMgd2h5IHRoZSBQcm9taXNlIGNvbnN0cnVjdG9yIHN5bmNocm9ub3VzbHkgaW52b2tlcyBpdHNcbiAgICAgICAgLy8gZXhlY3V0b3IgY2FsbGJhY2ssIGFuZCB3aHkgYXN5bmMgZnVuY3Rpb25zIHN5bmNocm9ub3VzbHlcbiAgICAgICAgLy8gZXhlY3V0ZSBjb2RlIGJlZm9yZSB0aGUgZmlyc3QgYXdhaXQuIFNpbmNlIHdlIGltcGxlbWVudCBzaW1wbGVcbiAgICAgICAgLy8gYXN5bmMgZnVuY3Rpb25zIGluIHRlcm1zIG9mIGFzeW5jIGdlbmVyYXRvcnMsIGl0IGlzIGVzcGVjaWFsbHlcbiAgICAgICAgLy8gaW1wb3J0YW50IHRvIGdldCB0aGlzIHJpZ2h0LCBldmVuIHRob3VnaCBpdCByZXF1aXJlcyBjYXJlLlxuICAgICAgICBwcmV2aW91c1Byb21pc2UgPyBwcmV2aW91c1Byb21pc2UudGhlbihcbiAgICAgICAgICBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZyxcbiAgICAgICAgICAvLyBBdm9pZCBwcm9wYWdhdGluZyBmYWlsdXJlcyB0byBQcm9taXNlcyByZXR1cm5lZCBieSBsYXRlclxuICAgICAgICAgIC8vIGludm9jYXRpb25zIG9mIHRoZSBpdGVyYXRvci5cbiAgICAgICAgICBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZ1xuICAgICAgICApIDogY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKTtcbiAgICB9XG5cbiAgICAvLyBEZWZpbmUgdGhlIHVuaWZpZWQgaGVscGVyIG1ldGhvZCB0aGF0IGlzIHVzZWQgdG8gaW1wbGVtZW50IC5uZXh0LFxuICAgIC8vIC50aHJvdywgYW5kIC5yZXR1cm4gKHNlZSBkZWZpbmVJdGVyYXRvck1ldGhvZHMpLlxuICAgIHRoaXMuX2ludm9rZSA9IGVucXVldWU7XG4gIH1cblxuICBkZWZpbmVJdGVyYXRvck1ldGhvZHMoQXN5bmNJdGVyYXRvci5wcm90b3R5cGUpO1xuICBBc3luY0l0ZXJhdG9yLnByb3RvdHlwZVthc3luY0l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcbiAgZXhwb3J0cy5Bc3luY0l0ZXJhdG9yID0gQXN5bmNJdGVyYXRvcjtcblxuICAvLyBOb3RlIHRoYXQgc2ltcGxlIGFzeW5jIGZ1bmN0aW9ucyBhcmUgaW1wbGVtZW50ZWQgb24gdG9wIG9mXG4gIC8vIEFzeW5jSXRlcmF0b3Igb2JqZWN0czsgdGhleSBqdXN0IHJldHVybiBhIFByb21pc2UgZm9yIHRoZSB2YWx1ZSBvZlxuICAvLyB0aGUgZmluYWwgcmVzdWx0IHByb2R1Y2VkIGJ5IHRoZSBpdGVyYXRvci5cbiAgZXhwb3J0cy5hc3luYyA9IGZ1bmN0aW9uKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSB7XG4gICAgdmFyIGl0ZXIgPSBuZXcgQXN5bmNJdGVyYXRvcihcbiAgICAgIHdyYXAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpXG4gICAgKTtcblxuICAgIHJldHVybiBleHBvcnRzLmlzR2VuZXJhdG9yRnVuY3Rpb24ob3V0ZXJGbilcbiAgICAgID8gaXRlciAvLyBJZiBvdXRlckZuIGlzIGEgZ2VuZXJhdG9yLCByZXR1cm4gdGhlIGZ1bGwgaXRlcmF0b3IuXG4gICAgICA6IGl0ZXIubmV4dCgpLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdC5kb25lID8gcmVzdWx0LnZhbHVlIDogaXRlci5uZXh0KCk7XG4gICAgICAgIH0pO1xuICB9O1xuXG4gIGZ1bmN0aW9uIG1ha2VJbnZva2VNZXRob2QoaW5uZXJGbiwgc2VsZiwgY29udGV4dCkge1xuICAgIHZhciBzdGF0ZSA9IEdlblN0YXRlU3VzcGVuZGVkU3RhcnQ7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gaW52b2tlKG1ldGhvZCwgYXJnKSB7XG4gICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlRXhlY3V0aW5nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IHJ1bm5pbmdcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVDb21wbGV0ZWQpIHtcbiAgICAgICAgaWYgKG1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgdGhyb3cgYXJnO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQmUgZm9yZ2l2aW5nLCBwZXIgMjUuMy4zLjMuMyBvZiB0aGUgc3BlYzpcbiAgICAgICAgLy8gaHR0cHM6Ly9wZW9wbGUubW96aWxsYS5vcmcvfmpvcmVuZG9yZmYvZXM2LWRyYWZ0Lmh0bWwjc2VjLWdlbmVyYXRvcnJlc3VtZVxuICAgICAgICByZXR1cm4gZG9uZVJlc3VsdCgpO1xuICAgICAgfVxuXG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IG1ldGhvZDtcbiAgICAgIGNvbnRleHQuYXJnID0gYXJnO1xuXG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICB2YXIgZGVsZWdhdGUgPSBjb250ZXh0LmRlbGVnYXRlO1xuICAgICAgICBpZiAoZGVsZWdhdGUpIHtcbiAgICAgICAgICB2YXIgZGVsZWdhdGVSZXN1bHQgPSBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KTtcbiAgICAgICAgICBpZiAoZGVsZWdhdGVSZXN1bHQpIHtcbiAgICAgICAgICAgIGlmIChkZWxlZ2F0ZVJlc3VsdCA9PT0gQ29udGludWVTZW50aW5lbCkgY29udGludWU7XG4gICAgICAgICAgICByZXR1cm4gZGVsZWdhdGVSZXN1bHQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcIm5leHRcIikge1xuICAgICAgICAgIC8vIFNldHRpbmcgY29udGV4dC5fc2VudCBmb3IgbGVnYWN5IHN1cHBvcnQgb2YgQmFiZWwnc1xuICAgICAgICAgIC8vIGZ1bmN0aW9uLnNlbnQgaW1wbGVtZW50YXRpb24uXG4gICAgICAgICAgY29udGV4dC5zZW50ID0gY29udGV4dC5fc2VudCA9IGNvbnRleHQuYXJnO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVTdXNwZW5kZWRTdGFydCkge1xuICAgICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUNvbXBsZXRlZDtcbiAgICAgICAgICAgIHRocm93IGNvbnRleHQuYXJnO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnRleHQuZGlzcGF0Y2hFeGNlcHRpb24oY29udGV4dC5hcmcpO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoY29udGV4dC5tZXRob2QgPT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgICBjb250ZXh0LmFicnVwdChcInJldHVyblwiLCBjb250ZXh0LmFyZyk7XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0ZSA9IEdlblN0YXRlRXhlY3V0aW5nO1xuXG4gICAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChpbm5lckZuLCBzZWxmLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcIm5vcm1hbFwiKSB7XG4gICAgICAgICAgLy8gSWYgYW4gZXhjZXB0aW9uIGlzIHRocm93biBmcm9tIGlubmVyRm4sIHdlIGxlYXZlIHN0YXRlID09PVxuICAgICAgICAgIC8vIEdlblN0YXRlRXhlY3V0aW5nIGFuZCBsb29wIGJhY2sgZm9yIGFub3RoZXIgaW52b2NhdGlvbi5cbiAgICAgICAgICBzdGF0ZSA9IGNvbnRleHQuZG9uZVxuICAgICAgICAgICAgPyBHZW5TdGF0ZUNvbXBsZXRlZFxuICAgICAgICAgICAgOiBHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkO1xuXG4gICAgICAgICAgaWYgKHJlY29yZC5hcmcgPT09IENvbnRpbnVlU2VudGluZWwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB2YWx1ZTogcmVjb3JkLmFyZyxcbiAgICAgICAgICAgIGRvbmU6IGNvbnRleHQuZG9uZVxuICAgICAgICAgIH07XG5cbiAgICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUNvbXBsZXRlZDtcbiAgICAgICAgICAvLyBEaXNwYXRjaCB0aGUgZXhjZXB0aW9uIGJ5IGxvb3BpbmcgYmFjayBhcm91bmQgdG8gdGhlXG4gICAgICAgICAgLy8gY29udGV4dC5kaXNwYXRjaEV4Y2VwdGlvbihjb250ZXh0LmFyZykgY2FsbCBhYm92ZS5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgLy8gQ2FsbCBkZWxlZ2F0ZS5pdGVyYXRvcltjb250ZXh0Lm1ldGhvZF0oY29udGV4dC5hcmcpIGFuZCBoYW5kbGUgdGhlXG4gIC8vIHJlc3VsdCwgZWl0aGVyIGJ5IHJldHVybmluZyBhIHsgdmFsdWUsIGRvbmUgfSByZXN1bHQgZnJvbSB0aGVcbiAgLy8gZGVsZWdhdGUgaXRlcmF0b3IsIG9yIGJ5IG1vZGlmeWluZyBjb250ZXh0Lm1ldGhvZCBhbmQgY29udGV4dC5hcmcsXG4gIC8vIHNldHRpbmcgY29udGV4dC5kZWxlZ2F0ZSB0byBudWxsLCBhbmQgcmV0dXJuaW5nIHRoZSBDb250aW51ZVNlbnRpbmVsLlxuICBmdW5jdGlvbiBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KSB7XG4gICAgdmFyIG1ldGhvZCA9IGRlbGVnYXRlLml0ZXJhdG9yW2NvbnRleHQubWV0aG9kXTtcbiAgICBpZiAobWV0aG9kID09PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIEEgLnRocm93IG9yIC5yZXR1cm4gd2hlbiB0aGUgZGVsZWdhdGUgaXRlcmF0b3IgaGFzIG5vIC50aHJvd1xuICAgICAgLy8gbWV0aG9kIGFsd2F5cyB0ZXJtaW5hdGVzIHRoZSB5aWVsZCogbG9vcC5cbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuXG4gICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAvLyBOb3RlOiBbXCJyZXR1cm5cIl0gbXVzdCBiZSB1c2VkIGZvciBFUzMgcGFyc2luZyBjb21wYXRpYmlsaXR5LlxuICAgICAgICBpZiAoZGVsZWdhdGUuaXRlcmF0b3JbXCJyZXR1cm5cIl0pIHtcbiAgICAgICAgICAvLyBJZiB0aGUgZGVsZWdhdGUgaXRlcmF0b3IgaGFzIGEgcmV0dXJuIG1ldGhvZCwgZ2l2ZSBpdCBhXG4gICAgICAgICAgLy8gY2hhbmNlIHRvIGNsZWFuIHVwLlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJyZXR1cm5cIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KTtcblxuICAgICAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgICAvLyBJZiBtYXliZUludm9rZURlbGVnYXRlKGNvbnRleHQpIGNoYW5nZWQgY29udGV4dC5tZXRob2QgZnJvbVxuICAgICAgICAgICAgLy8gXCJyZXR1cm5cIiB0byBcInRocm93XCIsIGxldCB0aGF0IG92ZXJyaWRlIHRoZSBUeXBlRXJyb3IgYmVsb3cuXG4gICAgICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgICAgY29udGV4dC5hcmcgPSBuZXcgVHlwZUVycm9yKFxuICAgICAgICAgIFwiVGhlIGl0ZXJhdG9yIGRvZXMgbm90IHByb3ZpZGUgYSAndGhyb3cnIG1ldGhvZFwiKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKG1ldGhvZCwgZGVsZWdhdGUuaXRlcmF0b3IsIGNvbnRleHQuYXJnKTtcblxuICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgIGNvbnRleHQuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgdmFyIGluZm8gPSByZWNvcmQuYXJnO1xuXG4gICAgaWYgKCEgaW5mbykge1xuICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICBjb250ZXh0LmFyZyA9IG5ldyBUeXBlRXJyb3IoXCJpdGVyYXRvciByZXN1bHQgaXMgbm90IGFuIG9iamVjdFwiKTtcbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgaWYgKGluZm8uZG9uZSkge1xuICAgICAgLy8gQXNzaWduIHRoZSByZXN1bHQgb2YgdGhlIGZpbmlzaGVkIGRlbGVnYXRlIHRvIHRoZSB0ZW1wb3JhcnlcbiAgICAgIC8vIHZhcmlhYmxlIHNwZWNpZmllZCBieSBkZWxlZ2F0ZS5yZXN1bHROYW1lIChzZWUgZGVsZWdhdGVZaWVsZCkuXG4gICAgICBjb250ZXh0W2RlbGVnYXRlLnJlc3VsdE5hbWVdID0gaW5mby52YWx1ZTtcblxuICAgICAgLy8gUmVzdW1lIGV4ZWN1dGlvbiBhdCB0aGUgZGVzaXJlZCBsb2NhdGlvbiAoc2VlIGRlbGVnYXRlWWllbGQpLlxuICAgICAgY29udGV4dC5uZXh0ID0gZGVsZWdhdGUubmV4dExvYztcblxuICAgICAgLy8gSWYgY29udGV4dC5tZXRob2Qgd2FzIFwidGhyb3dcIiBidXQgdGhlIGRlbGVnYXRlIGhhbmRsZWQgdGhlXG4gICAgICAvLyBleGNlcHRpb24sIGxldCB0aGUgb3V0ZXIgZ2VuZXJhdG9yIHByb2NlZWQgbm9ybWFsbHkuIElmXG4gICAgICAvLyBjb250ZXh0Lm1ldGhvZCB3YXMgXCJuZXh0XCIsIGZvcmdldCBjb250ZXh0LmFyZyBzaW5jZSBpdCBoYXMgYmVlblxuICAgICAgLy8gXCJjb25zdW1lZFwiIGJ5IHRoZSBkZWxlZ2F0ZSBpdGVyYXRvci4gSWYgY29udGV4dC5tZXRob2Qgd2FzXG4gICAgICAvLyBcInJldHVyblwiLCBhbGxvdyB0aGUgb3JpZ2luYWwgLnJldHVybiBjYWxsIHRvIGNvbnRpbnVlIGluIHRoZVxuICAgICAgLy8gb3V0ZXIgZ2VuZXJhdG9yLlxuICAgICAgaWYgKGNvbnRleHQubWV0aG9kICE9PSBcInJldHVyblwiKSB7XG4gICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFJlLXlpZWxkIHRoZSByZXN1bHQgcmV0dXJuZWQgYnkgdGhlIGRlbGVnYXRlIG1ldGhvZC5cbiAgICAgIHJldHVybiBpbmZvO1xuICAgIH1cblxuICAgIC8vIFRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBpcyBmaW5pc2hlZCwgc28gZm9yZ2V0IGl0IGFuZCBjb250aW51ZSB3aXRoXG4gICAgLy8gdGhlIG91dGVyIGdlbmVyYXRvci5cbiAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgfVxuXG4gIC8vIERlZmluZSBHZW5lcmF0b3IucHJvdG90eXBlLntuZXh0LHRocm93LHJldHVybn0gaW4gdGVybXMgb2YgdGhlXG4gIC8vIHVuaWZpZWQgLl9pbnZva2UgaGVscGVyIG1ldGhvZC5cbiAgZGVmaW5lSXRlcmF0b3JNZXRob2RzKEdwKTtcblxuICBHcFt0b1N0cmluZ1RhZ1N5bWJvbF0gPSBcIkdlbmVyYXRvclwiO1xuXG4gIC8vIEEgR2VuZXJhdG9yIHNob3VsZCBhbHdheXMgcmV0dXJuIGl0c2VsZiBhcyB0aGUgaXRlcmF0b3Igb2JqZWN0IHdoZW4gdGhlXG4gIC8vIEBAaXRlcmF0b3IgZnVuY3Rpb24gaXMgY2FsbGVkIG9uIGl0LiBTb21lIGJyb3dzZXJzJyBpbXBsZW1lbnRhdGlvbnMgb2YgdGhlXG4gIC8vIGl0ZXJhdG9yIHByb3RvdHlwZSBjaGFpbiBpbmNvcnJlY3RseSBpbXBsZW1lbnQgdGhpcywgY2F1c2luZyB0aGUgR2VuZXJhdG9yXG4gIC8vIG9iamVjdCB0byBub3QgYmUgcmV0dXJuZWQgZnJvbSB0aGlzIGNhbGwuIFRoaXMgZW5zdXJlcyB0aGF0IGRvZXNuJ3QgaGFwcGVuLlxuICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlZ2VuZXJhdG9yL2lzc3Vlcy8yNzQgZm9yIG1vcmUgZGV0YWlscy5cbiAgR3BbaXRlcmF0b3JTeW1ib2xdID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgR3AudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gXCJbb2JqZWN0IEdlbmVyYXRvcl1cIjtcbiAgfTtcblxuICBmdW5jdGlvbiBwdXNoVHJ5RW50cnkobG9jcykge1xuICAgIHZhciBlbnRyeSA9IHsgdHJ5TG9jOiBsb2NzWzBdIH07XG5cbiAgICBpZiAoMSBpbiBsb2NzKSB7XG4gICAgICBlbnRyeS5jYXRjaExvYyA9IGxvY3NbMV07XG4gICAgfVxuXG4gICAgaWYgKDIgaW4gbG9jcykge1xuICAgICAgZW50cnkuZmluYWxseUxvYyA9IGxvY3NbMl07XG4gICAgICBlbnRyeS5hZnRlckxvYyA9IGxvY3NbM107XG4gICAgfVxuXG4gICAgdGhpcy50cnlFbnRyaWVzLnB1c2goZW50cnkpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVzZXRUcnlFbnRyeShlbnRyeSkge1xuICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uIHx8IHt9O1xuICAgIHJlY29yZC50eXBlID0gXCJub3JtYWxcIjtcbiAgICBkZWxldGUgcmVjb3JkLmFyZztcbiAgICBlbnRyeS5jb21wbGV0aW9uID0gcmVjb3JkO1xuICB9XG5cbiAgZnVuY3Rpb24gQ29udGV4dCh0cnlMb2NzTGlzdCkge1xuICAgIC8vIFRoZSByb290IGVudHJ5IG9iamVjdCAoZWZmZWN0aXZlbHkgYSB0cnkgc3RhdGVtZW50IHdpdGhvdXQgYSBjYXRjaFxuICAgIC8vIG9yIGEgZmluYWxseSBibG9jaykgZ2l2ZXMgdXMgYSBwbGFjZSB0byBzdG9yZSB2YWx1ZXMgdGhyb3duIGZyb21cbiAgICAvLyBsb2NhdGlvbnMgd2hlcmUgdGhlcmUgaXMgbm8gZW5jbG9zaW5nIHRyeSBzdGF0ZW1lbnQuXG4gICAgdGhpcy50cnlFbnRyaWVzID0gW3sgdHJ5TG9jOiBcInJvb3RcIiB9XTtcbiAgICB0cnlMb2NzTGlzdC5mb3JFYWNoKHB1c2hUcnlFbnRyeSwgdGhpcyk7XG4gICAgdGhpcy5yZXNldCh0cnVlKTtcbiAgfVxuXG4gIGV4cG9ydHMua2V5cyA9IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIHZhciBrZXlzID0gW107XG4gICAgZm9yICh2YXIga2V5IGluIG9iamVjdCkge1xuICAgICAga2V5cy5wdXNoKGtleSk7XG4gICAgfVxuICAgIGtleXMucmV2ZXJzZSgpO1xuXG4gICAgLy8gUmF0aGVyIHRoYW4gcmV0dXJuaW5nIGFuIG9iamVjdCB3aXRoIGEgbmV4dCBtZXRob2QsIHdlIGtlZXBcbiAgICAvLyB0aGluZ3Mgc2ltcGxlIGFuZCByZXR1cm4gdGhlIG5leHQgZnVuY3Rpb24gaXRzZWxmLlxuICAgIHJldHVybiBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgd2hpbGUgKGtleXMubGVuZ3RoKSB7XG4gICAgICAgIHZhciBrZXkgPSBrZXlzLnBvcCgpO1xuICAgICAgICBpZiAoa2V5IGluIG9iamVjdCkge1xuICAgICAgICAgIG5leHQudmFsdWUgPSBrZXk7XG4gICAgICAgICAgbmV4dC5kb25lID0gZmFsc2U7XG4gICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gVG8gYXZvaWQgY3JlYXRpbmcgYW4gYWRkaXRpb25hbCBvYmplY3QsIHdlIGp1c3QgaGFuZyB0aGUgLnZhbHVlXG4gICAgICAvLyBhbmQgLmRvbmUgcHJvcGVydGllcyBvZmYgdGhlIG5leHQgZnVuY3Rpb24gb2JqZWN0IGl0c2VsZi4gVGhpc1xuICAgICAgLy8gYWxzbyBlbnN1cmVzIHRoYXQgdGhlIG1pbmlmaWVyIHdpbGwgbm90IGFub255bWl6ZSB0aGUgZnVuY3Rpb24uXG4gICAgICBuZXh0LmRvbmUgPSB0cnVlO1xuICAgICAgcmV0dXJuIG5leHQ7XG4gICAgfTtcbiAgfTtcblxuICBmdW5jdGlvbiB2YWx1ZXMoaXRlcmFibGUpIHtcbiAgICBpZiAoaXRlcmFibGUpIHtcbiAgICAgIHZhciBpdGVyYXRvck1ldGhvZCA9IGl0ZXJhYmxlW2l0ZXJhdG9yU3ltYm9sXTtcbiAgICAgIGlmIChpdGVyYXRvck1ldGhvZCkge1xuICAgICAgICByZXR1cm4gaXRlcmF0b3JNZXRob2QuY2FsbChpdGVyYWJsZSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgaXRlcmFibGUubmV4dCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHJldHVybiBpdGVyYWJsZTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFpc05hTihpdGVyYWJsZS5sZW5ndGgpKSB7XG4gICAgICAgIHZhciBpID0gLTEsIG5leHQgPSBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgICAgIHdoaWxlICgrK2kgPCBpdGVyYWJsZS5sZW5ndGgpIHtcbiAgICAgICAgICAgIGlmIChoYXNPd24uY2FsbChpdGVyYWJsZSwgaSkpIHtcbiAgICAgICAgICAgICAgbmV4dC52YWx1ZSA9IGl0ZXJhYmxlW2ldO1xuICAgICAgICAgICAgICBuZXh0LmRvbmUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbmV4dC52YWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBuZXh0LmRvbmUgPSB0cnVlO1xuXG4gICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIG5leHQubmV4dCA9IG5leHQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gUmV0dXJuIGFuIGl0ZXJhdG9yIHdpdGggbm8gdmFsdWVzLlxuICAgIHJldHVybiB7IG5leHQ6IGRvbmVSZXN1bHQgfTtcbiAgfVxuICBleHBvcnRzLnZhbHVlcyA9IHZhbHVlcztcblxuICBmdW5jdGlvbiBkb25lUmVzdWx0KCkge1xuICAgIHJldHVybiB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWUgfTtcbiAgfVxuXG4gIENvbnRleHQucHJvdG90eXBlID0ge1xuICAgIGNvbnN0cnVjdG9yOiBDb250ZXh0LFxuXG4gICAgcmVzZXQ6IGZ1bmN0aW9uKHNraXBUZW1wUmVzZXQpIHtcbiAgICAgIHRoaXMucHJldiA9IDA7XG4gICAgICB0aGlzLm5leHQgPSAwO1xuICAgICAgLy8gUmVzZXR0aW5nIGNvbnRleHQuX3NlbnQgZm9yIGxlZ2FjeSBzdXBwb3J0IG9mIEJhYmVsJ3NcbiAgICAgIC8vIGZ1bmN0aW9uLnNlbnQgaW1wbGVtZW50YXRpb24uXG4gICAgICB0aGlzLnNlbnQgPSB0aGlzLl9zZW50ID0gdW5kZWZpbmVkO1xuICAgICAgdGhpcy5kb25lID0gZmFsc2U7XG4gICAgICB0aGlzLmRlbGVnYXRlID0gbnVsbDtcblxuICAgICAgdGhpcy5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgIHRoaXMuYXJnID0gdW5kZWZpbmVkO1xuXG4gICAgICB0aGlzLnRyeUVudHJpZXMuZm9yRWFjaChyZXNldFRyeUVudHJ5KTtcblxuICAgICAgaWYgKCFza2lwVGVtcFJlc2V0KSB7XG4gICAgICAgIGZvciAodmFyIG5hbWUgaW4gdGhpcykge1xuICAgICAgICAgIC8vIE5vdCBzdXJlIGFib3V0IHRoZSBvcHRpbWFsIG9yZGVyIG9mIHRoZXNlIGNvbmRpdGlvbnM6XG4gICAgICAgICAgaWYgKG5hbWUuY2hhckF0KDApID09PSBcInRcIiAmJlxuICAgICAgICAgICAgICBoYXNPd24uY2FsbCh0aGlzLCBuYW1lKSAmJlxuICAgICAgICAgICAgICAhaXNOYU4oK25hbWUuc2xpY2UoMSkpKSB7XG4gICAgICAgICAgICB0aGlzW25hbWVdID0gdW5kZWZpbmVkO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBzdG9wOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuZG9uZSA9IHRydWU7XG5cbiAgICAgIHZhciByb290RW50cnkgPSB0aGlzLnRyeUVudHJpZXNbMF07XG4gICAgICB2YXIgcm9vdFJlY29yZCA9IHJvb3RFbnRyeS5jb21wbGV0aW9uO1xuICAgICAgaWYgKHJvb3RSZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHRocm93IHJvb3RSZWNvcmQuYXJnO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5ydmFsO1xuICAgIH0sXG5cbiAgICBkaXNwYXRjaEV4Y2VwdGlvbjogZnVuY3Rpb24oZXhjZXB0aW9uKSB7XG4gICAgICBpZiAodGhpcy5kb25lKSB7XG4gICAgICAgIHRocm93IGV4Y2VwdGlvbjtcbiAgICAgIH1cblxuICAgICAgdmFyIGNvbnRleHQgPSB0aGlzO1xuICAgICAgZnVuY3Rpb24gaGFuZGxlKGxvYywgY2F1Z2h0KSB7XG4gICAgICAgIHJlY29yZC50eXBlID0gXCJ0aHJvd1wiO1xuICAgICAgICByZWNvcmQuYXJnID0gZXhjZXB0aW9uO1xuICAgICAgICBjb250ZXh0Lm5leHQgPSBsb2M7XG5cbiAgICAgICAgaWYgKGNhdWdodCkge1xuICAgICAgICAgIC8vIElmIHRoZSBkaXNwYXRjaGVkIGV4Y2VwdGlvbiB3YXMgY2F1Z2h0IGJ5IGEgY2F0Y2ggYmxvY2ssXG4gICAgICAgICAgLy8gdGhlbiBsZXQgdGhhdCBjYXRjaCBibG9jayBoYW5kbGUgdGhlIGV4Y2VwdGlvbiBub3JtYWxseS5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuICEhIGNhdWdodDtcbiAgICAgIH1cblxuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uO1xuXG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPT09IFwicm9vdFwiKSB7XG4gICAgICAgICAgLy8gRXhjZXB0aW9uIHRocm93biBvdXRzaWRlIG9mIGFueSB0cnkgYmxvY2sgdGhhdCBjb3VsZCBoYW5kbGVcbiAgICAgICAgICAvLyBpdCwgc28gc2V0IHRoZSBjb21wbGV0aW9uIHZhbHVlIG9mIHRoZSBlbnRpcmUgZnVuY3Rpb24gdG9cbiAgICAgICAgICAvLyB0aHJvdyB0aGUgZXhjZXB0aW9uLlxuICAgICAgICAgIHJldHVybiBoYW5kbGUoXCJlbmRcIik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZW50cnkudHJ5TG9jIDw9IHRoaXMucHJldikge1xuICAgICAgICAgIHZhciBoYXNDYXRjaCA9IGhhc093bi5jYWxsKGVudHJ5LCBcImNhdGNoTG9jXCIpO1xuICAgICAgICAgIHZhciBoYXNGaW5hbGx5ID0gaGFzT3duLmNhbGwoZW50cnksIFwiZmluYWxseUxvY1wiKTtcblxuICAgICAgICAgIGlmIChoYXNDYXRjaCAmJiBoYXNGaW5hbGx5KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuY2F0Y2hMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5jYXRjaExvYywgdHJ1ZSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5maW5hbGx5TG9jKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSBpZiAoaGFzQ2F0Y2gpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5jYXRjaExvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmNhdGNoTG9jLCB0cnVlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSBpZiAoaGFzRmluYWxseSkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5maW5hbGx5TG9jKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ0cnkgc3RhdGVtZW50IHdpdGhvdXQgY2F0Y2ggb3IgZmluYWxseVwiKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgYWJydXB0OiBmdW5jdGlvbih0eXBlLCBhcmcpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkudHJ5TG9jIDw9IHRoaXMucHJldiAmJlxuICAgICAgICAgICAgaGFzT3duLmNhbGwoZW50cnksIFwiZmluYWxseUxvY1wiKSAmJlxuICAgICAgICAgICAgdGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgIHZhciBmaW5hbGx5RW50cnkgPSBlbnRyeTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoZmluYWxseUVudHJ5ICYmXG4gICAgICAgICAgKHR5cGUgPT09IFwiYnJlYWtcIiB8fFxuICAgICAgICAgICB0eXBlID09PSBcImNvbnRpbnVlXCIpICYmXG4gICAgICAgICAgZmluYWxseUVudHJ5LnRyeUxvYyA8PSBhcmcgJiZcbiAgICAgICAgICBhcmcgPD0gZmluYWxseUVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgLy8gSWdub3JlIHRoZSBmaW5hbGx5IGVudHJ5IGlmIGNvbnRyb2wgaXMgbm90IGp1bXBpbmcgdG8gYVxuICAgICAgICAvLyBsb2NhdGlvbiBvdXRzaWRlIHRoZSB0cnkvY2F0Y2ggYmxvY2suXG4gICAgICAgIGZpbmFsbHlFbnRyeSA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIHZhciByZWNvcmQgPSBmaW5hbGx5RW50cnkgPyBmaW5hbGx5RW50cnkuY29tcGxldGlvbiA6IHt9O1xuICAgICAgcmVjb3JkLnR5cGUgPSB0eXBlO1xuICAgICAgcmVjb3JkLmFyZyA9IGFyZztcblxuICAgICAgaWYgKGZpbmFsbHlFbnRyeSkge1xuICAgICAgICB0aGlzLm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICB0aGlzLm5leHQgPSBmaW5hbGx5RW50cnkuZmluYWxseUxvYztcbiAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLmNvbXBsZXRlKHJlY29yZCk7XG4gICAgfSxcblxuICAgIGNvbXBsZXRlOiBmdW5jdGlvbihyZWNvcmQsIGFmdGVyTG9jKSB7XG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICB0aHJvdyByZWNvcmQuYXJnO1xuICAgICAgfVxuXG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwiYnJlYWtcIiB8fFxuICAgICAgICAgIHJlY29yZC50eXBlID09PSBcImNvbnRpbnVlXCIpIHtcbiAgICAgICAgdGhpcy5uZXh0ID0gcmVjb3JkLmFyZztcbiAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgdGhpcy5ydmFsID0gdGhpcy5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgICB0aGlzLm1ldGhvZCA9IFwicmV0dXJuXCI7XG4gICAgICAgIHRoaXMubmV4dCA9IFwiZW5kXCI7XG4gICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcIm5vcm1hbFwiICYmIGFmdGVyTG9jKSB7XG4gICAgICAgIHRoaXMubmV4dCA9IGFmdGVyTG9jO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9LFxuXG4gICAgZmluaXNoOiBmdW5jdGlvbihmaW5hbGx5TG9jKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LmZpbmFsbHlMb2MgPT09IGZpbmFsbHlMb2MpIHtcbiAgICAgICAgICB0aGlzLmNvbXBsZXRlKGVudHJ5LmNvbXBsZXRpb24sIGVudHJ5LmFmdGVyTG9jKTtcbiAgICAgICAgICByZXNldFRyeUVudHJ5KGVudHJ5KTtcbiAgICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBcImNhdGNoXCI6IGZ1bmN0aW9uKHRyeUxvYykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPT09IHRyeUxvYykge1xuICAgICAgICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uO1xuICAgICAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgICB2YXIgdGhyb3duID0gcmVjb3JkLmFyZztcbiAgICAgICAgICAgIHJlc2V0VHJ5RW50cnkoZW50cnkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdGhyb3duO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFRoZSBjb250ZXh0LmNhdGNoIG1ldGhvZCBtdXN0IG9ubHkgYmUgY2FsbGVkIHdpdGggYSBsb2NhdGlvblxuICAgICAgLy8gYXJndW1lbnQgdGhhdCBjb3JyZXNwb25kcyB0byBhIGtub3duIGNhdGNoIGJsb2NrLlxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaWxsZWdhbCBjYXRjaCBhdHRlbXB0XCIpO1xuICAgIH0sXG5cbiAgICBkZWxlZ2F0ZVlpZWxkOiBmdW5jdGlvbihpdGVyYWJsZSwgcmVzdWx0TmFtZSwgbmV4dExvYykge1xuICAgICAgdGhpcy5kZWxlZ2F0ZSA9IHtcbiAgICAgICAgaXRlcmF0b3I6IHZhbHVlcyhpdGVyYWJsZSksXG4gICAgICAgIHJlc3VsdE5hbWU6IHJlc3VsdE5hbWUsXG4gICAgICAgIG5leHRMb2M6IG5leHRMb2NcbiAgICAgIH07XG5cbiAgICAgIGlmICh0aGlzLm1ldGhvZCA9PT0gXCJuZXh0XCIpIHtcbiAgICAgICAgLy8gRGVsaWJlcmF0ZWx5IGZvcmdldCB0aGUgbGFzdCBzZW50IHZhbHVlIHNvIHRoYXQgd2UgZG9uJ3RcbiAgICAgICAgLy8gYWNjaWRlbnRhbGx5IHBhc3MgaXQgb24gdG8gdGhlIGRlbGVnYXRlLlxuICAgICAgICB0aGlzLmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuICB9O1xuXG4gIC8vIFJlZ2FyZGxlc3Mgb2Ygd2hldGhlciB0aGlzIHNjcmlwdCBpcyBleGVjdXRpbmcgYXMgYSBDb21tb25KUyBtb2R1bGVcbiAgLy8gb3Igbm90LCByZXR1cm4gdGhlIHJ1bnRpbWUgb2JqZWN0IHNvIHRoYXQgd2UgY2FuIGRlY2xhcmUgdGhlIHZhcmlhYmxlXG4gIC8vIHJlZ2VuZXJhdG9yUnVudGltZSBpbiB0aGUgb3V0ZXIgc2NvcGUsIHdoaWNoIGFsbG93cyB0aGlzIG1vZHVsZSB0byBiZVxuICAvLyBpbmplY3RlZCBlYXNpbHkgYnkgYGJpbi9yZWdlbmVyYXRvciAtLWluY2x1ZGUtcnVudGltZSBzY3JpcHQuanNgLlxuICByZXR1cm4gZXhwb3J0cztcblxufShcbiAgLy8gSWYgdGhpcyBzY3JpcHQgaXMgZXhlY3V0aW5nIGFzIGEgQ29tbW9uSlMgbW9kdWxlLCB1c2UgbW9kdWxlLmV4cG9ydHNcbiAgLy8gYXMgdGhlIHJlZ2VuZXJhdG9yUnVudGltZSBuYW1lc3BhY2UuIE90aGVyd2lzZSBjcmVhdGUgYSBuZXcgZW1wdHlcbiAgLy8gb2JqZWN0LiBFaXRoZXIgd2F5LCB0aGUgcmVzdWx0aW5nIG9iamVjdCB3aWxsIGJlIHVzZWQgdG8gaW5pdGlhbGl6ZVxuICAvLyB0aGUgcmVnZW5lcmF0b3JSdW50aW1lIHZhcmlhYmxlIGF0IHRoZSB0b3Agb2YgdGhpcyBmaWxlLlxuICB0eXBlb2YgbW9kdWxlID09PSBcIm9iamVjdFwiID8gbW9kdWxlLmV4cG9ydHMgOiB7fVxuKSk7XG5cbnRyeSB7XG4gIHJlZ2VuZXJhdG9yUnVudGltZSA9IHJ1bnRpbWU7XG59IGNhdGNoIChhY2NpZGVudGFsU3RyaWN0TW9kZSkge1xuICAvLyBUaGlzIG1vZHVsZSBzaG91bGQgbm90IGJlIHJ1bm5pbmcgaW4gc3RyaWN0IG1vZGUsIHNvIHRoZSBhYm92ZVxuICAvLyBhc3NpZ25tZW50IHNob3VsZCBhbHdheXMgd29yayB1bmxlc3Mgc29tZXRoaW5nIGlzIG1pc2NvbmZpZ3VyZWQuIEp1c3RcbiAgLy8gaW4gY2FzZSBydW50aW1lLmpzIGFjY2lkZW50YWxseSBydW5zIGluIHN0cmljdCBtb2RlLCB3ZSBjYW4gZXNjYXBlXG4gIC8vIHN0cmljdCBtb2RlIHVzaW5nIGEgZ2xvYmFsIEZ1bmN0aW9uIGNhbGwuIFRoaXMgY291bGQgY29uY2VpdmFibHkgZmFpbFxuICAvLyBpZiBhIENvbnRlbnQgU2VjdXJpdHkgUG9saWN5IGZvcmJpZHMgdXNpbmcgRnVuY3Rpb24sIGJ1dCBpbiB0aGF0IGNhc2VcbiAgLy8gdGhlIHByb3BlciBzb2x1dGlvbiBpcyB0byBmaXggdGhlIGFjY2lkZW50YWwgc3RyaWN0IG1vZGUgcHJvYmxlbS4gSWZcbiAgLy8geW91J3ZlIG1pc2NvbmZpZ3VyZWQgeW91ciBidW5kbGVyIHRvIGZvcmNlIHN0cmljdCBtb2RlIGFuZCBhcHBsaWVkIGFcbiAgLy8gQ1NQIHRvIGZvcmJpZCBGdW5jdGlvbiwgYW5kIHlvdSdyZSBub3Qgd2lsbGluZyB0byBmaXggZWl0aGVyIG9mIHRob3NlXG4gIC8vIHByb2JsZW1zLCBwbGVhc2UgZGV0YWlsIHlvdXIgdW5pcXVlIHByZWRpY2FtZW50IGluIGEgR2l0SHViIGlzc3VlLlxuICBGdW5jdGlvbihcInJcIiwgXCJyZWdlbmVyYXRvclJ1bnRpbWUgPSByXCIpKHJ1bnRpbWUpO1xufVxuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgcGFyc2VJbnRJbXBsZW1lbnRhdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9wYXJzZS1pbnQnKTtcblxuLy8gYHBhcnNlSW50YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXBhcnNlaW50LXN0cmluZy1yYWRpeFxuJCh7IGdsb2JhbDogdHJ1ZSwgZm9yY2VkOiBwYXJzZUludCAhPSBwYXJzZUludEltcGxlbWVudGF0aW9uIH0sIHtcbiAgcGFyc2VJbnQ6IHBhcnNlSW50SW1wbGVtZW50YXRpb25cbn0pO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciB0cmltID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy10cmltJykudHJpbTtcbnZhciB3aGl0ZXNwYWNlcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93aGl0ZXNwYWNlcycpO1xuXG52YXIgbmF0aXZlUGFyc2VJbnQgPSBnbG9iYWwucGFyc2VJbnQ7XG52YXIgaGV4ID0gL15bKy1dPzBbWHhdLztcbnZhciBGT1JDRUQgPSBuYXRpdmVQYXJzZUludCh3aGl0ZXNwYWNlcyArICcwOCcpICE9PSA4IHx8IG5hdGl2ZVBhcnNlSW50KHdoaXRlc3BhY2VzICsgJzB4MTYnKSAhPT0gMjI7XG5cbi8vIGBwYXJzZUludGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1wYXJzZWludC1zdHJpbmctcmFkaXhcbm1vZHVsZS5leHBvcnRzID0gRk9SQ0VEID8gZnVuY3Rpb24gcGFyc2VJbnQoc3RyaW5nLCByYWRpeCkge1xuICB2YXIgUyA9IHRyaW0oU3RyaW5nKHN0cmluZykpO1xuICByZXR1cm4gbmF0aXZlUGFyc2VJbnQoUywgKHJhZGl4ID4+PiAwKSB8fCAoaGV4LnRlc3QoUykgPyAxNiA6IDEwKSk7XG59IDogbmF0aXZlUGFyc2VJbnQ7XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNC1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbnZhciBydW50aW1lID0gKGZ1bmN0aW9uIChleHBvcnRzKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gIHZhciBPcCA9IE9iamVjdC5wcm90b3R5cGU7XG4gIHZhciBoYXNPd24gPSBPcC5oYXNPd25Qcm9wZXJ0eTtcbiAgdmFyIHVuZGVmaW5lZDsgLy8gTW9yZSBjb21wcmVzc2libGUgdGhhbiB2b2lkIDAuXG4gIHZhciAkU3ltYm9sID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiID8gU3ltYm9sIDoge307XG4gIHZhciBpdGVyYXRvclN5bWJvbCA9ICRTeW1ib2wuaXRlcmF0b3IgfHwgXCJAQGl0ZXJhdG9yXCI7XG4gIHZhciBhc3luY0l0ZXJhdG9yU3ltYm9sID0gJFN5bWJvbC5hc3luY0l0ZXJhdG9yIHx8IFwiQEBhc3luY0l0ZXJhdG9yXCI7XG4gIHZhciB0b1N0cmluZ1RhZ1N5bWJvbCA9ICRTeW1ib2wudG9TdHJpbmdUYWcgfHwgXCJAQHRvU3RyaW5nVGFnXCI7XG5cbiAgZnVuY3Rpb24gd3JhcChpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCkge1xuICAgIC8vIElmIG91dGVyRm4gcHJvdmlkZWQgYW5kIG91dGVyRm4ucHJvdG90eXBlIGlzIGEgR2VuZXJhdG9yLCB0aGVuIG91dGVyRm4ucHJvdG90eXBlIGluc3RhbmNlb2YgR2VuZXJhdG9yLlxuICAgIHZhciBwcm90b0dlbmVyYXRvciA9IG91dGVyRm4gJiYgb3V0ZXJGbi5wcm90b3R5cGUgaW5zdGFuY2VvZiBHZW5lcmF0b3IgPyBvdXRlckZuIDogR2VuZXJhdG9yO1xuICAgIHZhciBnZW5lcmF0b3IgPSBPYmplY3QuY3JlYXRlKHByb3RvR2VuZXJhdG9yLnByb3RvdHlwZSk7XG4gICAgdmFyIGNvbnRleHQgPSBuZXcgQ29udGV4dCh0cnlMb2NzTGlzdCB8fCBbXSk7XG5cbiAgICAvLyBUaGUgLl9pbnZva2UgbWV0aG9kIHVuaWZpZXMgdGhlIGltcGxlbWVudGF0aW9ucyBvZiB0aGUgLm5leHQsXG4gICAgLy8gLnRocm93LCBhbmQgLnJldHVybiBtZXRob2RzLlxuICAgIGdlbmVyYXRvci5faW52b2tlID0gbWFrZUludm9rZU1ldGhvZChpbm5lckZuLCBzZWxmLCBjb250ZXh0KTtcblxuICAgIHJldHVybiBnZW5lcmF0b3I7XG4gIH1cbiAgZXhwb3J0cy53cmFwID0gd3JhcDtcblxuICAvLyBUcnkvY2F0Y2ggaGVscGVyIHRvIG1pbmltaXplIGRlb3B0aW1pemF0aW9ucy4gUmV0dXJucyBhIGNvbXBsZXRpb25cbiAgLy8gcmVjb3JkIGxpa2UgY29udGV4dC50cnlFbnRyaWVzW2ldLmNvbXBsZXRpb24uIFRoaXMgaW50ZXJmYWNlIGNvdWxkXG4gIC8vIGhhdmUgYmVlbiAoYW5kIHdhcyBwcmV2aW91c2x5KSBkZXNpZ25lZCB0byB0YWtlIGEgY2xvc3VyZSB0byBiZVxuICAvLyBpbnZva2VkIHdpdGhvdXQgYXJndW1lbnRzLCBidXQgaW4gYWxsIHRoZSBjYXNlcyB3ZSBjYXJlIGFib3V0IHdlXG4gIC8vIGFscmVhZHkgaGF2ZSBhbiBleGlzdGluZyBtZXRob2Qgd2Ugd2FudCB0byBjYWxsLCBzbyB0aGVyZSdzIG5vIG5lZWRcbiAgLy8gdG8gY3JlYXRlIGEgbmV3IGZ1bmN0aW9uIG9iamVjdC4gV2UgY2FuIGV2ZW4gZ2V0IGF3YXkgd2l0aCBhc3N1bWluZ1xuICAvLyB0aGUgbWV0aG9kIHRha2VzIGV4YWN0bHkgb25lIGFyZ3VtZW50LCBzaW5jZSB0aGF0IGhhcHBlbnMgdG8gYmUgdHJ1ZVxuICAvLyBpbiBldmVyeSBjYXNlLCBzbyB3ZSBkb24ndCBoYXZlIHRvIHRvdWNoIHRoZSBhcmd1bWVudHMgb2JqZWN0LiBUaGVcbiAgLy8gb25seSBhZGRpdGlvbmFsIGFsbG9jYXRpb24gcmVxdWlyZWQgaXMgdGhlIGNvbXBsZXRpb24gcmVjb3JkLCB3aGljaFxuICAvLyBoYXMgYSBzdGFibGUgc2hhcGUgYW5kIHNvIGhvcGVmdWxseSBzaG91bGQgYmUgY2hlYXAgdG8gYWxsb2NhdGUuXG4gIGZ1bmN0aW9uIHRyeUNhdGNoKGZuLCBvYmosIGFyZykge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4geyB0eXBlOiBcIm5vcm1hbFwiLCBhcmc6IGZuLmNhbGwob2JqLCBhcmcpIH07XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICByZXR1cm4geyB0eXBlOiBcInRocm93XCIsIGFyZzogZXJyIH07XG4gICAgfVxuICB9XG5cbiAgdmFyIEdlblN0YXRlU3VzcGVuZGVkU3RhcnQgPSBcInN1c3BlbmRlZFN0YXJ0XCI7XG4gIHZhciBHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkID0gXCJzdXNwZW5kZWRZaWVsZFwiO1xuICB2YXIgR2VuU3RhdGVFeGVjdXRpbmcgPSBcImV4ZWN1dGluZ1wiO1xuICB2YXIgR2VuU3RhdGVDb21wbGV0ZWQgPSBcImNvbXBsZXRlZFwiO1xuXG4gIC8vIFJldHVybmluZyB0aGlzIG9iamVjdCBmcm9tIHRoZSBpbm5lckZuIGhhcyB0aGUgc2FtZSBlZmZlY3QgYXNcbiAgLy8gYnJlYWtpbmcgb3V0IG9mIHRoZSBkaXNwYXRjaCBzd2l0Y2ggc3RhdGVtZW50LlxuICB2YXIgQ29udGludWVTZW50aW5lbCA9IHt9O1xuXG4gIC8vIER1bW15IGNvbnN0cnVjdG9yIGZ1bmN0aW9ucyB0aGF0IHdlIHVzZSBhcyB0aGUgLmNvbnN0cnVjdG9yIGFuZFxuICAvLyAuY29uc3RydWN0b3IucHJvdG90eXBlIHByb3BlcnRpZXMgZm9yIGZ1bmN0aW9ucyB0aGF0IHJldHVybiBHZW5lcmF0b3JcbiAgLy8gb2JqZWN0cy4gRm9yIGZ1bGwgc3BlYyBjb21wbGlhbmNlLCB5b3UgbWF5IHdpc2ggdG8gY29uZmlndXJlIHlvdXJcbiAgLy8gbWluaWZpZXIgbm90IHRvIG1hbmdsZSB0aGUgbmFtZXMgb2YgdGhlc2UgdHdvIGZ1bmN0aW9ucy5cbiAgZnVuY3Rpb24gR2VuZXJhdG9yKCkge31cbiAgZnVuY3Rpb24gR2VuZXJhdG9yRnVuY3Rpb24oKSB7fVxuICBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSgpIHt9XG5cbiAgLy8gVGhpcyBpcyBhIHBvbHlmaWxsIGZvciAlSXRlcmF0b3JQcm90b3R5cGUlIGZvciBlbnZpcm9ubWVudHMgdGhhdFxuICAvLyBkb24ndCBuYXRpdmVseSBzdXBwb3J0IGl0LlxuICB2YXIgSXRlcmF0b3JQcm90b3R5cGUgPSB7fTtcbiAgSXRlcmF0b3JQcm90b3R5cGVbaXRlcmF0b3JTeW1ib2xdID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIHZhciBnZXRQcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbiAgdmFyIE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlID0gZ2V0UHJvdG8gJiYgZ2V0UHJvdG8oZ2V0UHJvdG8odmFsdWVzKFtdKSkpO1xuICBpZiAoTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgJiZcbiAgICAgIE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlICE9PSBPcCAmJlxuICAgICAgaGFzT3duLmNhbGwoTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUsIGl0ZXJhdG9yU3ltYm9sKSkge1xuICAgIC8vIFRoaXMgZW52aXJvbm1lbnQgaGFzIGEgbmF0aXZlICVJdGVyYXRvclByb3RvdHlwZSU7IHVzZSBpdCBpbnN0ZWFkXG4gICAgLy8gb2YgdGhlIHBvbHlmaWxsLlxuICAgIEl0ZXJhdG9yUHJvdG90eXBlID0gTmF0aXZlSXRlcmF0b3JQcm90b3R5cGU7XG4gIH1cblxuICB2YXIgR3AgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZS5wcm90b3R5cGUgPVxuICAgIEdlbmVyYXRvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEl0ZXJhdG9yUHJvdG90eXBlKTtcbiAgR2VuZXJhdG9yRnVuY3Rpb24ucHJvdG90eXBlID0gR3AuY29uc3RydWN0b3IgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZTtcbiAgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUuY29uc3RydWN0b3IgPSBHZW5lcmF0b3JGdW5jdGlvbjtcbiAgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGVbdG9TdHJpbmdUYWdTeW1ib2xdID1cbiAgICBHZW5lcmF0b3JGdW5jdGlvbi5kaXNwbGF5TmFtZSA9IFwiR2VuZXJhdG9yRnVuY3Rpb25cIjtcblxuICAvLyBIZWxwZXIgZm9yIGRlZmluaW5nIHRoZSAubmV4dCwgLnRocm93LCBhbmQgLnJldHVybiBtZXRob2RzIG9mIHRoZVxuICAvLyBJdGVyYXRvciBpbnRlcmZhY2UgaW4gdGVybXMgb2YgYSBzaW5nbGUgLl9pbnZva2UgbWV0aG9kLlxuICBmdW5jdGlvbiBkZWZpbmVJdGVyYXRvck1ldGhvZHMocHJvdG90eXBlKSB7XG4gICAgW1wibmV4dFwiLCBcInRocm93XCIsIFwicmV0dXJuXCJdLmZvckVhY2goZnVuY3Rpb24obWV0aG9kKSB7XG4gICAgICBwcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKGFyZykge1xuICAgICAgICByZXR1cm4gdGhpcy5faW52b2tlKG1ldGhvZCwgYXJnKTtcbiAgICAgIH07XG4gICAgfSk7XG4gIH1cblxuICBleHBvcnRzLmlzR2VuZXJhdG9yRnVuY3Rpb24gPSBmdW5jdGlvbihnZW5GdW4pIHtcbiAgICB2YXIgY3RvciA9IHR5cGVvZiBnZW5GdW4gPT09IFwiZnVuY3Rpb25cIiAmJiBnZW5GdW4uY29uc3RydWN0b3I7XG4gICAgcmV0dXJuIGN0b3JcbiAgICAgID8gY3RvciA9PT0gR2VuZXJhdG9yRnVuY3Rpb24gfHxcbiAgICAgICAgLy8gRm9yIHRoZSBuYXRpdmUgR2VuZXJhdG9yRnVuY3Rpb24gY29uc3RydWN0b3IsIHRoZSBiZXN0IHdlIGNhblxuICAgICAgICAvLyBkbyBpcyB0byBjaGVjayBpdHMgLm5hbWUgcHJvcGVydHkuXG4gICAgICAgIChjdG9yLmRpc3BsYXlOYW1lIHx8IGN0b3IubmFtZSkgPT09IFwiR2VuZXJhdG9yRnVuY3Rpb25cIlxuICAgICAgOiBmYWxzZTtcbiAgfTtcblxuICBleHBvcnRzLm1hcmsgPSBmdW5jdGlvbihnZW5GdW4pIHtcbiAgICBpZiAoT2JqZWN0LnNldFByb3RvdHlwZU9mKSB7XG4gICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YoZ2VuRnVuLCBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGdlbkZ1bi5fX3Byb3RvX18gPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZTtcbiAgICAgIGlmICghKHRvU3RyaW5nVGFnU3ltYm9sIGluIGdlbkZ1bikpIHtcbiAgICAgICAgZ2VuRnVuW3RvU3RyaW5nVGFnU3ltYm9sXSA9IFwiR2VuZXJhdG9yRnVuY3Rpb25cIjtcbiAgICAgIH1cbiAgICB9XG4gICAgZ2VuRnVuLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoR3ApO1xuICAgIHJldHVybiBnZW5GdW47XG4gIH07XG5cbiAgLy8gV2l0aGluIHRoZSBib2R5IG9mIGFueSBhc3luYyBmdW5jdGlvbiwgYGF3YWl0IHhgIGlzIHRyYW5zZm9ybWVkIHRvXG4gIC8vIGB5aWVsZCByZWdlbmVyYXRvclJ1bnRpbWUuYXdyYXAoeClgLCBzbyB0aGF0IHRoZSBydW50aW1lIGNhbiB0ZXN0XG4gIC8vIGBoYXNPd24uY2FsbCh2YWx1ZSwgXCJfX2F3YWl0XCIpYCB0byBkZXRlcm1pbmUgaWYgdGhlIHlpZWxkZWQgdmFsdWUgaXNcbiAgLy8gbWVhbnQgdG8gYmUgYXdhaXRlZC5cbiAgZXhwb3J0cy5hd3JhcCA9IGZ1bmN0aW9uKGFyZykge1xuICAgIHJldHVybiB7IF9fYXdhaXQ6IGFyZyB9O1xuICB9O1xuXG4gIGZ1bmN0aW9uIEFzeW5jSXRlcmF0b3IoZ2VuZXJhdG9yKSB7XG4gICAgZnVuY3Rpb24gaW52b2tlKG1ldGhvZCwgYXJnLCByZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChnZW5lcmF0b3JbbWV0aG9kXSwgZ2VuZXJhdG9yLCBhcmcpO1xuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgcmVqZWN0KHJlY29yZC5hcmcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHJlY29yZC5hcmc7XG4gICAgICAgIHZhciB2YWx1ZSA9IHJlc3VsdC52YWx1ZTtcbiAgICAgICAgaWYgKHZhbHVlICYmXG4gICAgICAgICAgICB0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIgJiZcbiAgICAgICAgICAgIGhhc093bi5jYWxsKHZhbHVlLCBcIl9fYXdhaXRcIikpIHtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHZhbHVlLl9fYXdhaXQpLnRoZW4oZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgIGludm9rZShcIm5leHRcIiwgdmFsdWUsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICBpbnZva2UoXCJ0aHJvd1wiLCBlcnIsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHZhbHVlKS50aGVuKGZ1bmN0aW9uKHVud3JhcHBlZCkge1xuICAgICAgICAgIC8vIFdoZW4gYSB5aWVsZGVkIFByb21pc2UgaXMgcmVzb2x2ZWQsIGl0cyBmaW5hbCB2YWx1ZSBiZWNvbWVzXG4gICAgICAgICAgLy8gdGhlIC52YWx1ZSBvZiB0aGUgUHJvbWlzZTx7dmFsdWUsZG9uZX0+IHJlc3VsdCBmb3IgdGhlXG4gICAgICAgICAgLy8gY3VycmVudCBpdGVyYXRpb24uXG4gICAgICAgICAgcmVzdWx0LnZhbHVlID0gdW53cmFwcGVkO1xuICAgICAgICAgIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgfSwgZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAgICAgICAvLyBJZiBhIHJlamVjdGVkIFByb21pc2Ugd2FzIHlpZWxkZWQsIHRocm93IHRoZSByZWplY3Rpb24gYmFja1xuICAgICAgICAgIC8vIGludG8gdGhlIGFzeW5jIGdlbmVyYXRvciBmdW5jdGlvbiBzbyBpdCBjYW4gYmUgaGFuZGxlZCB0aGVyZS5cbiAgICAgICAgICByZXR1cm4gaW52b2tlKFwidGhyb3dcIiwgZXJyb3IsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBwcmV2aW91c1Byb21pc2U7XG5cbiAgICBmdW5jdGlvbiBlbnF1ZXVlKG1ldGhvZCwgYXJnKSB7XG4gICAgICBmdW5jdGlvbiBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZygpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgIGludm9rZShtZXRob2QsIGFyZywgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwcmV2aW91c1Byb21pc2UgPVxuICAgICAgICAvLyBJZiBlbnF1ZXVlIGhhcyBiZWVuIGNhbGxlZCBiZWZvcmUsIHRoZW4gd2Ugd2FudCB0byB3YWl0IHVudGlsXG4gICAgICAgIC8vIGFsbCBwcmV2aW91cyBQcm9taXNlcyBoYXZlIGJlZW4gcmVzb2x2ZWQgYmVmb3JlIGNhbGxpbmcgaW52b2tlLFxuICAgICAgICAvLyBzbyB0aGF0IHJlc3VsdHMgYXJlIGFsd2F5cyBkZWxpdmVyZWQgaW4gdGhlIGNvcnJlY3Qgb3JkZXIuIElmXG4gICAgICAgIC8vIGVucXVldWUgaGFzIG5vdCBiZWVuIGNhbGxlZCBiZWZvcmUsIHRoZW4gaXQgaXMgaW1wb3J0YW50IHRvXG4gICAgICAgIC8vIGNhbGwgaW52b2tlIGltbWVkaWF0ZWx5LCB3aXRob3V0IHdhaXRpbmcgb24gYSBjYWxsYmFjayB0byBmaXJlLFxuICAgICAgICAvLyBzbyB0aGF0IHRoZSBhc3luYyBnZW5lcmF0b3IgZnVuY3Rpb24gaGFzIHRoZSBvcHBvcnR1bml0eSB0byBkb1xuICAgICAgICAvLyBhbnkgbmVjZXNzYXJ5IHNldHVwIGluIGEgcHJlZGljdGFibGUgd2F5LiBUaGlzIHByZWRpY3RhYmlsaXR5XG4gICAgICAgIC8vIGlzIHdoeSB0aGUgUHJvbWlzZSBjb25zdHJ1Y3RvciBzeW5jaHJvbm91c2x5IGludm9rZXMgaXRzXG4gICAgICAgIC8vIGV4ZWN1dG9yIGNhbGxiYWNrLCBhbmQgd2h5IGFzeW5jIGZ1bmN0aW9ucyBzeW5jaHJvbm91c2x5XG4gICAgICAgIC8vIGV4ZWN1dGUgY29kZSBiZWZvcmUgdGhlIGZpcnN0IGF3YWl0LiBTaW5jZSB3ZSBpbXBsZW1lbnQgc2ltcGxlXG4gICAgICAgIC8vIGFzeW5jIGZ1bmN0aW9ucyBpbiB0ZXJtcyBvZiBhc3luYyBnZW5lcmF0b3JzLCBpdCBpcyBlc3BlY2lhbGx5XG4gICAgICAgIC8vIGltcG9ydGFudCB0byBnZXQgdGhpcyByaWdodCwgZXZlbiB0aG91Z2ggaXQgcmVxdWlyZXMgY2FyZS5cbiAgICAgICAgcHJldmlvdXNQcm9taXNlID8gcHJldmlvdXNQcm9taXNlLnRoZW4oXG4gICAgICAgICAgY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcsXG4gICAgICAgICAgLy8gQXZvaWQgcHJvcGFnYXRpbmcgZmFpbHVyZXMgdG8gUHJvbWlzZXMgcmV0dXJuZWQgYnkgbGF0ZXJcbiAgICAgICAgICAvLyBpbnZvY2F0aW9ucyBvZiB0aGUgaXRlcmF0b3IuXG4gICAgICAgICAgY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmdcbiAgICAgICAgKSA6IGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCk7XG4gICAgfVxuXG4gICAgLy8gRGVmaW5lIHRoZSB1bmlmaWVkIGhlbHBlciBtZXRob2QgdGhhdCBpcyB1c2VkIHRvIGltcGxlbWVudCAubmV4dCxcbiAgICAvLyAudGhyb3csIGFuZCAucmV0dXJuIChzZWUgZGVmaW5lSXRlcmF0b3JNZXRob2RzKS5cbiAgICB0aGlzLl9pbnZva2UgPSBlbnF1ZXVlO1xuICB9XG5cbiAgZGVmaW5lSXRlcmF0b3JNZXRob2RzKEFzeW5jSXRlcmF0b3IucHJvdG90eXBlKTtcbiAgQXN5bmNJdGVyYXRvci5wcm90b3R5cGVbYXN5bmNJdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG4gIGV4cG9ydHMuQXN5bmNJdGVyYXRvciA9IEFzeW5jSXRlcmF0b3I7XG5cbiAgLy8gTm90ZSB0aGF0IHNpbXBsZSBhc3luYyBmdW5jdGlvbnMgYXJlIGltcGxlbWVudGVkIG9uIHRvcCBvZlxuICAvLyBBc3luY0l0ZXJhdG9yIG9iamVjdHM7IHRoZXkganVzdCByZXR1cm4gYSBQcm9taXNlIGZvciB0aGUgdmFsdWUgb2ZcbiAgLy8gdGhlIGZpbmFsIHJlc3VsdCBwcm9kdWNlZCBieSB0aGUgaXRlcmF0b3IuXG4gIGV4cG9ydHMuYXN5bmMgPSBmdW5jdGlvbihpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCkge1xuICAgIHZhciBpdGVyID0gbmV3IEFzeW5jSXRlcmF0b3IoXG4gICAgICB3cmFwKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KVxuICAgICk7XG5cbiAgICByZXR1cm4gZXhwb3J0cy5pc0dlbmVyYXRvckZ1bmN0aW9uKG91dGVyRm4pXG4gICAgICA/IGl0ZXIgLy8gSWYgb3V0ZXJGbiBpcyBhIGdlbmVyYXRvciwgcmV0dXJuIHRoZSBmdWxsIGl0ZXJhdG9yLlxuICAgICAgOiBpdGVyLm5leHQoKS50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICAgIHJldHVybiByZXN1bHQuZG9uZSA/IHJlc3VsdC52YWx1ZSA6IGl0ZXIubmV4dCgpO1xuICAgICAgICB9KTtcbiAgfTtcblxuICBmdW5jdGlvbiBtYWtlSW52b2tlTWV0aG9kKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpIHtcbiAgICB2YXIgc3RhdGUgPSBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0O1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIGludm9rZShtZXRob2QsIGFyZykge1xuICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZUV4ZWN1dGluZykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBydW5uaW5nXCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlQ29tcGxldGVkKSB7XG4gICAgICAgIGlmIChtZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIHRocm93IGFyZztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEJlIGZvcmdpdmluZywgcGVyIDI1LjMuMy4zLjMgb2YgdGhlIHNwZWM6XG4gICAgICAgIC8vIGh0dHBzOi8vcGVvcGxlLm1vemlsbGEub3JnL35qb3JlbmRvcmZmL2VzNi1kcmFmdC5odG1sI3NlYy1nZW5lcmF0b3JyZXN1bWVcbiAgICAgICAgcmV0dXJuIGRvbmVSZXN1bHQoKTtcbiAgICAgIH1cblxuICAgICAgY29udGV4dC5tZXRob2QgPSBtZXRob2Q7XG4gICAgICBjb250ZXh0LmFyZyA9IGFyZztcblxuICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgdmFyIGRlbGVnYXRlID0gY29udGV4dC5kZWxlZ2F0ZTtcbiAgICAgICAgaWYgKGRlbGVnYXRlKSB7XG4gICAgICAgICAgdmFyIGRlbGVnYXRlUmVzdWx0ID0gbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCk7XG4gICAgICAgICAgaWYgKGRlbGVnYXRlUmVzdWx0KSB7XG4gICAgICAgICAgICBpZiAoZGVsZWdhdGVSZXN1bHQgPT09IENvbnRpbnVlU2VudGluZWwpIGNvbnRpbnVlO1xuICAgICAgICAgICAgcmV0dXJuIGRlbGVnYXRlUmVzdWx0O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJuZXh0XCIpIHtcbiAgICAgICAgICAvLyBTZXR0aW5nIGNvbnRleHQuX3NlbnQgZm9yIGxlZ2FjeSBzdXBwb3J0IG9mIEJhYmVsJ3NcbiAgICAgICAgICAvLyBmdW5jdGlvbi5zZW50IGltcGxlbWVudGF0aW9uLlxuICAgICAgICAgIGNvbnRleHQuc2VudCA9IGNvbnRleHQuX3NlbnQgPSBjb250ZXh0LmFyZztcblxuICAgICAgICB9IGVsc2UgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlU3VzcGVuZGVkU3RhcnQpIHtcbiAgICAgICAgICAgIHN0YXRlID0gR2VuU3RhdGVDb21wbGV0ZWQ7XG4gICAgICAgICAgICB0aHJvdyBjb250ZXh0LmFyZztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb250ZXh0LmRpc3BhdGNoRXhjZXB0aW9uKGNvbnRleHQuYXJnKTtcblxuICAgICAgICB9IGVsc2UgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInJldHVyblwiKSB7XG4gICAgICAgICAgY29udGV4dC5hYnJ1cHQoXCJyZXR1cm5cIiwgY29udGV4dC5hcmcpO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUV4ZWN1dGluZztcblxuICAgICAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2goaW5uZXJGbiwgc2VsZiwgY29udGV4dCk7XG4gICAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJub3JtYWxcIikge1xuICAgICAgICAgIC8vIElmIGFuIGV4Y2VwdGlvbiBpcyB0aHJvd24gZnJvbSBpbm5lckZuLCB3ZSBsZWF2ZSBzdGF0ZSA9PT1cbiAgICAgICAgICAvLyBHZW5TdGF0ZUV4ZWN1dGluZyBhbmQgbG9vcCBiYWNrIGZvciBhbm90aGVyIGludm9jYXRpb24uXG4gICAgICAgICAgc3RhdGUgPSBjb250ZXh0LmRvbmVcbiAgICAgICAgICAgID8gR2VuU3RhdGVDb21wbGV0ZWRcbiAgICAgICAgICAgIDogR2VuU3RhdGVTdXNwZW5kZWRZaWVsZDtcblxuICAgICAgICAgIGlmIChyZWNvcmQuYXJnID09PSBDb250aW51ZVNlbnRpbmVsKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdmFsdWU6IHJlY29yZC5hcmcsXG4gICAgICAgICAgICBkb25lOiBjb250ZXh0LmRvbmVcbiAgICAgICAgICB9O1xuXG4gICAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIHN0YXRlID0gR2VuU3RhdGVDb21wbGV0ZWQ7XG4gICAgICAgICAgLy8gRGlzcGF0Y2ggdGhlIGV4Y2VwdGlvbiBieSBsb29waW5nIGJhY2sgYXJvdW5kIHRvIHRoZVxuICAgICAgICAgIC8vIGNvbnRleHQuZGlzcGF0Y2hFeGNlcHRpb24oY29udGV4dC5hcmcpIGNhbGwgYWJvdmUuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIC8vIENhbGwgZGVsZWdhdGUuaXRlcmF0b3JbY29udGV4dC5tZXRob2RdKGNvbnRleHQuYXJnKSBhbmQgaGFuZGxlIHRoZVxuICAvLyByZXN1bHQsIGVpdGhlciBieSByZXR1cm5pbmcgYSB7IHZhbHVlLCBkb25lIH0gcmVzdWx0IGZyb20gdGhlXG4gIC8vIGRlbGVnYXRlIGl0ZXJhdG9yLCBvciBieSBtb2RpZnlpbmcgY29udGV4dC5tZXRob2QgYW5kIGNvbnRleHQuYXJnLFxuICAvLyBzZXR0aW5nIGNvbnRleHQuZGVsZWdhdGUgdG8gbnVsbCwgYW5kIHJldHVybmluZyB0aGUgQ29udGludWVTZW50aW5lbC5cbiAgZnVuY3Rpb24gbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCkge1xuICAgIHZhciBtZXRob2QgPSBkZWxlZ2F0ZS5pdGVyYXRvcltjb250ZXh0Lm1ldGhvZF07XG4gICAgaWYgKG1ldGhvZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyBBIC50aHJvdyBvciAucmV0dXJuIHdoZW4gdGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGhhcyBubyAudGhyb3dcbiAgICAgIC8vIG1ldGhvZCBhbHdheXMgdGVybWluYXRlcyB0aGUgeWllbGQqIGxvb3AuXG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcblxuICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgLy8gTm90ZTogW1wicmV0dXJuXCJdIG11c3QgYmUgdXNlZCBmb3IgRVMzIHBhcnNpbmcgY29tcGF0aWJpbGl0eS5cbiAgICAgICAgaWYgKGRlbGVnYXRlLml0ZXJhdG9yW1wicmV0dXJuXCJdKSB7XG4gICAgICAgICAgLy8gSWYgdGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGhhcyBhIHJldHVybiBtZXRob2QsIGdpdmUgaXQgYVxuICAgICAgICAgIC8vIGNoYW5jZSB0byBjbGVhbiB1cC5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwicmV0dXJuXCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCk7XG5cbiAgICAgICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgICAgLy8gSWYgbWF5YmVJbnZva2VEZWxlZ2F0ZShjb250ZXh0KSBjaGFuZ2VkIGNvbnRleHQubWV0aG9kIGZyb21cbiAgICAgICAgICAgIC8vIFwicmV0dXJuXCIgdG8gXCJ0aHJvd1wiLCBsZXQgdGhhdCBvdmVycmlkZSB0aGUgVHlwZUVycm9yIGJlbG93LlxuICAgICAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICAgIGNvbnRleHQuYXJnID0gbmV3IFR5cGVFcnJvcihcbiAgICAgICAgICBcIlRoZSBpdGVyYXRvciBkb2VzIG5vdCBwcm92aWRlIGEgJ3Rocm93JyBtZXRob2RcIik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChtZXRob2QsIGRlbGVnYXRlLml0ZXJhdG9yLCBjb250ZXh0LmFyZyk7XG5cbiAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICBjb250ZXh0LmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIHZhciBpbmZvID0gcmVjb3JkLmFyZztcblxuICAgIGlmICghIGluZm8pIHtcbiAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgY29udGV4dC5hcmcgPSBuZXcgVHlwZUVycm9yKFwiaXRlcmF0b3IgcmVzdWx0IGlzIG5vdCBhbiBvYmplY3RcIik7XG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIGlmIChpbmZvLmRvbmUpIHtcbiAgICAgIC8vIEFzc2lnbiB0aGUgcmVzdWx0IG9mIHRoZSBmaW5pc2hlZCBkZWxlZ2F0ZSB0byB0aGUgdGVtcG9yYXJ5XG4gICAgICAvLyB2YXJpYWJsZSBzcGVjaWZpZWQgYnkgZGVsZWdhdGUucmVzdWx0TmFtZSAoc2VlIGRlbGVnYXRlWWllbGQpLlxuICAgICAgY29udGV4dFtkZWxlZ2F0ZS5yZXN1bHROYW1lXSA9IGluZm8udmFsdWU7XG5cbiAgICAgIC8vIFJlc3VtZSBleGVjdXRpb24gYXQgdGhlIGRlc2lyZWQgbG9jYXRpb24gKHNlZSBkZWxlZ2F0ZVlpZWxkKS5cbiAgICAgIGNvbnRleHQubmV4dCA9IGRlbGVnYXRlLm5leHRMb2M7XG5cbiAgICAgIC8vIElmIGNvbnRleHQubWV0aG9kIHdhcyBcInRocm93XCIgYnV0IHRoZSBkZWxlZ2F0ZSBoYW5kbGVkIHRoZVxuICAgICAgLy8gZXhjZXB0aW9uLCBsZXQgdGhlIG91dGVyIGdlbmVyYXRvciBwcm9jZWVkIG5vcm1hbGx5LiBJZlxuICAgICAgLy8gY29udGV4dC5tZXRob2Qgd2FzIFwibmV4dFwiLCBmb3JnZXQgY29udGV4dC5hcmcgc2luY2UgaXQgaGFzIGJlZW5cbiAgICAgIC8vIFwiY29uc3VtZWRcIiBieSB0aGUgZGVsZWdhdGUgaXRlcmF0b3IuIElmIGNvbnRleHQubWV0aG9kIHdhc1xuICAgICAgLy8gXCJyZXR1cm5cIiwgYWxsb3cgdGhlIG9yaWdpbmFsIC5yZXR1cm4gY2FsbCB0byBjb250aW51ZSBpbiB0aGVcbiAgICAgIC8vIG91dGVyIGdlbmVyYXRvci5cbiAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCAhPT0gXCJyZXR1cm5cIikge1xuICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBSZS15aWVsZCB0aGUgcmVzdWx0IHJldHVybmVkIGJ5IHRoZSBkZWxlZ2F0ZSBtZXRob2QuXG4gICAgICByZXR1cm4gaW5mbztcbiAgICB9XG5cbiAgICAvLyBUaGUgZGVsZWdhdGUgaXRlcmF0b3IgaXMgZmluaXNoZWQsIHNvIGZvcmdldCBpdCBhbmQgY29udGludWUgd2l0aFxuICAgIC8vIHRoZSBvdXRlciBnZW5lcmF0b3IuXG4gICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gIH1cblxuICAvLyBEZWZpbmUgR2VuZXJhdG9yLnByb3RvdHlwZS57bmV4dCx0aHJvdyxyZXR1cm59IGluIHRlcm1zIG9mIHRoZVxuICAvLyB1bmlmaWVkIC5faW52b2tlIGhlbHBlciBtZXRob2QuXG4gIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhHcCk7XG5cbiAgR3BbdG9TdHJpbmdUYWdTeW1ib2xdID0gXCJHZW5lcmF0b3JcIjtcblxuICAvLyBBIEdlbmVyYXRvciBzaG91bGQgYWx3YXlzIHJldHVybiBpdHNlbGYgYXMgdGhlIGl0ZXJhdG9yIG9iamVjdCB3aGVuIHRoZVxuICAvLyBAQGl0ZXJhdG9yIGZ1bmN0aW9uIGlzIGNhbGxlZCBvbiBpdC4gU29tZSBicm93c2VycycgaW1wbGVtZW50YXRpb25zIG9mIHRoZVxuICAvLyBpdGVyYXRvciBwcm90b3R5cGUgY2hhaW4gaW5jb3JyZWN0bHkgaW1wbGVtZW50IHRoaXMsIGNhdXNpbmcgdGhlIEdlbmVyYXRvclxuICAvLyBvYmplY3QgdG8gbm90IGJlIHJldHVybmVkIGZyb20gdGhpcyBjYWxsLiBUaGlzIGVuc3VyZXMgdGhhdCBkb2Vzbid0IGhhcHBlbi5cbiAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWdlbmVyYXRvci9pc3N1ZXMvMjc0IGZvciBtb3JlIGRldGFpbHMuXG4gIEdwW2l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEdwLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFwiW29iamVjdCBHZW5lcmF0b3JdXCI7XG4gIH07XG5cbiAgZnVuY3Rpb24gcHVzaFRyeUVudHJ5KGxvY3MpIHtcbiAgICB2YXIgZW50cnkgPSB7IHRyeUxvYzogbG9jc1swXSB9O1xuXG4gICAgaWYgKDEgaW4gbG9jcykge1xuICAgICAgZW50cnkuY2F0Y2hMb2MgPSBsb2NzWzFdO1xuICAgIH1cblxuICAgIGlmICgyIGluIGxvY3MpIHtcbiAgICAgIGVudHJ5LmZpbmFsbHlMb2MgPSBsb2NzWzJdO1xuICAgICAgZW50cnkuYWZ0ZXJMb2MgPSBsb2NzWzNdO1xuICAgIH1cblxuICAgIHRoaXMudHJ5RW50cmllcy5wdXNoKGVudHJ5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlc2V0VHJ5RW50cnkoZW50cnkpIHtcbiAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbiB8fCB7fTtcbiAgICByZWNvcmQudHlwZSA9IFwibm9ybWFsXCI7XG4gICAgZGVsZXRlIHJlY29yZC5hcmc7XG4gICAgZW50cnkuY29tcGxldGlvbiA9IHJlY29yZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIENvbnRleHQodHJ5TG9jc0xpc3QpIHtcbiAgICAvLyBUaGUgcm9vdCBlbnRyeSBvYmplY3QgKGVmZmVjdGl2ZWx5IGEgdHJ5IHN0YXRlbWVudCB3aXRob3V0IGEgY2F0Y2hcbiAgICAvLyBvciBhIGZpbmFsbHkgYmxvY2spIGdpdmVzIHVzIGEgcGxhY2UgdG8gc3RvcmUgdmFsdWVzIHRocm93biBmcm9tXG4gICAgLy8gbG9jYXRpb25zIHdoZXJlIHRoZXJlIGlzIG5vIGVuY2xvc2luZyB0cnkgc3RhdGVtZW50LlxuICAgIHRoaXMudHJ5RW50cmllcyA9IFt7IHRyeUxvYzogXCJyb290XCIgfV07XG4gICAgdHJ5TG9jc0xpc3QuZm9yRWFjaChwdXNoVHJ5RW50cnksIHRoaXMpO1xuICAgIHRoaXMucmVzZXQodHJ1ZSk7XG4gIH1cblxuICBleHBvcnRzLmtleXMgPSBmdW5jdGlvbihvYmplY3QpIHtcbiAgICB2YXIga2V5cyA9IFtdO1xuICAgIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICAgIGtleXMucHVzaChrZXkpO1xuICAgIH1cbiAgICBrZXlzLnJldmVyc2UoKTtcblxuICAgIC8vIFJhdGhlciB0aGFuIHJldHVybmluZyBhbiBvYmplY3Qgd2l0aCBhIG5leHQgbWV0aG9kLCB3ZSBrZWVwXG4gICAgLy8gdGhpbmdzIHNpbXBsZSBhbmQgcmV0dXJuIHRoZSBuZXh0IGZ1bmN0aW9uIGl0c2VsZi5cbiAgICByZXR1cm4gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgIHdoaWxlIChrZXlzLmxlbmd0aCkge1xuICAgICAgICB2YXIga2V5ID0ga2V5cy5wb3AoKTtcbiAgICAgICAgaWYgKGtleSBpbiBvYmplY3QpIHtcbiAgICAgICAgICBuZXh0LnZhbHVlID0ga2V5O1xuICAgICAgICAgIG5leHQuZG9uZSA9IGZhbHNlO1xuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFRvIGF2b2lkIGNyZWF0aW5nIGFuIGFkZGl0aW9uYWwgb2JqZWN0LCB3ZSBqdXN0IGhhbmcgdGhlIC52YWx1ZVxuICAgICAgLy8gYW5kIC5kb25lIHByb3BlcnRpZXMgb2ZmIHRoZSBuZXh0IGZ1bmN0aW9uIG9iamVjdCBpdHNlbGYuIFRoaXNcbiAgICAgIC8vIGFsc28gZW5zdXJlcyB0aGF0IHRoZSBtaW5pZmllciB3aWxsIG5vdCBhbm9ueW1pemUgdGhlIGZ1bmN0aW9uLlxuICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcbiAgICAgIHJldHVybiBuZXh0O1xuICAgIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gdmFsdWVzKGl0ZXJhYmxlKSB7XG4gICAgaWYgKGl0ZXJhYmxlKSB7XG4gICAgICB2YXIgaXRlcmF0b3JNZXRob2QgPSBpdGVyYWJsZVtpdGVyYXRvclN5bWJvbF07XG4gICAgICBpZiAoaXRlcmF0b3JNZXRob2QpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhdG9yTWV0aG9kLmNhbGwoaXRlcmFibGUpO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGl0ZXJhYmxlLm5leHQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICByZXR1cm4gaXRlcmFibGU7XG4gICAgICB9XG5cbiAgICAgIGlmICghaXNOYU4oaXRlcmFibGUubGVuZ3RoKSkge1xuICAgICAgICB2YXIgaSA9IC0xLCBuZXh0ID0gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgICAgICB3aGlsZSAoKytpIDwgaXRlcmFibGUubGVuZ3RoKSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duLmNhbGwoaXRlcmFibGUsIGkpKSB7XG4gICAgICAgICAgICAgIG5leHQudmFsdWUgPSBpdGVyYWJsZVtpXTtcbiAgICAgICAgICAgICAgbmV4dC5kb25lID0gZmFsc2U7XG4gICAgICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIG5leHQudmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcblxuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBuZXh0Lm5leHQgPSBuZXh0O1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFJldHVybiBhbiBpdGVyYXRvciB3aXRoIG5vIHZhbHVlcy5cbiAgICByZXR1cm4geyBuZXh0OiBkb25lUmVzdWx0IH07XG4gIH1cbiAgZXhwb3J0cy52YWx1ZXMgPSB2YWx1ZXM7XG5cbiAgZnVuY3Rpb24gZG9uZVJlc3VsdCgpIHtcbiAgICByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gIH1cblxuICBDb250ZXh0LnByb3RvdHlwZSA9IHtcbiAgICBjb25zdHJ1Y3RvcjogQ29udGV4dCxcblxuICAgIHJlc2V0OiBmdW5jdGlvbihza2lwVGVtcFJlc2V0KSB7XG4gICAgICB0aGlzLnByZXYgPSAwO1xuICAgICAgdGhpcy5uZXh0ID0gMDtcbiAgICAgIC8vIFJlc2V0dGluZyBjb250ZXh0Ll9zZW50IGZvciBsZWdhY3kgc3VwcG9ydCBvZiBCYWJlbCdzXG4gICAgICAvLyBmdW5jdGlvbi5zZW50IGltcGxlbWVudGF0aW9uLlxuICAgICAgdGhpcy5zZW50ID0gdGhpcy5fc2VudCA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuZG9uZSA9IGZhbHNlO1xuICAgICAgdGhpcy5kZWxlZ2F0ZSA9IG51bGw7XG5cbiAgICAgIHRoaXMubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICB0aGlzLmFyZyA9IHVuZGVmaW5lZDtcblxuICAgICAgdGhpcy50cnlFbnRyaWVzLmZvckVhY2gocmVzZXRUcnlFbnRyeSk7XG5cbiAgICAgIGlmICghc2tpcFRlbXBSZXNldCkge1xuICAgICAgICBmb3IgKHZhciBuYW1lIGluIHRoaXMpIHtcbiAgICAgICAgICAvLyBOb3Qgc3VyZSBhYm91dCB0aGUgb3B0aW1hbCBvcmRlciBvZiB0aGVzZSBjb25kaXRpb25zOlxuICAgICAgICAgIGlmIChuYW1lLmNoYXJBdCgwKSA9PT0gXCJ0XCIgJiZcbiAgICAgICAgICAgICAgaGFzT3duLmNhbGwodGhpcywgbmFtZSkgJiZcbiAgICAgICAgICAgICAgIWlzTmFOKCtuYW1lLnNsaWNlKDEpKSkge1xuICAgICAgICAgICAgdGhpc1tuYW1lXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgc3RvcDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLmRvbmUgPSB0cnVlO1xuXG4gICAgICB2YXIgcm9vdEVudHJ5ID0gdGhpcy50cnlFbnRyaWVzWzBdO1xuICAgICAgdmFyIHJvb3RSZWNvcmQgPSByb290RW50cnkuY29tcGxldGlvbjtcbiAgICAgIGlmIChyb290UmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICB0aHJvdyByb290UmVjb3JkLmFyZztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMucnZhbDtcbiAgICB9LFxuXG4gICAgZGlzcGF0Y2hFeGNlcHRpb246IGZ1bmN0aW9uKGV4Y2VwdGlvbikge1xuICAgICAgaWYgKHRoaXMuZG9uZSkge1xuICAgICAgICB0aHJvdyBleGNlcHRpb247XG4gICAgICB9XG5cbiAgICAgIHZhciBjb250ZXh0ID0gdGhpcztcbiAgICAgIGZ1bmN0aW9uIGhhbmRsZShsb2MsIGNhdWdodCkge1xuICAgICAgICByZWNvcmQudHlwZSA9IFwidGhyb3dcIjtcbiAgICAgICAgcmVjb3JkLmFyZyA9IGV4Y2VwdGlvbjtcbiAgICAgICAgY29udGV4dC5uZXh0ID0gbG9jO1xuXG4gICAgICAgIGlmIChjYXVnaHQpIHtcbiAgICAgICAgICAvLyBJZiB0aGUgZGlzcGF0Y2hlZCBleGNlcHRpb24gd2FzIGNhdWdodCBieSBhIGNhdGNoIGJsb2NrLFxuICAgICAgICAgIC8vIHRoZW4gbGV0IHRoYXQgY2F0Y2ggYmxvY2sgaGFuZGxlIHRoZSBleGNlcHRpb24gbm9ybWFsbHkuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAhISBjYXVnaHQ7XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcblxuICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSBcInJvb3RcIikge1xuICAgICAgICAgIC8vIEV4Y2VwdGlvbiB0aHJvd24gb3V0c2lkZSBvZiBhbnkgdHJ5IGJsb2NrIHRoYXQgY291bGQgaGFuZGxlXG4gICAgICAgICAgLy8gaXQsIHNvIHNldCB0aGUgY29tcGxldGlvbiB2YWx1ZSBvZiB0aGUgZW50aXJlIGZ1bmN0aW9uIHRvXG4gICAgICAgICAgLy8gdGhyb3cgdGhlIGV4Y2VwdGlvbi5cbiAgICAgICAgICByZXR1cm4gaGFuZGxlKFwiZW5kXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYpIHtcbiAgICAgICAgICB2YXIgaGFzQ2F0Y2ggPSBoYXNPd24uY2FsbChlbnRyeSwgXCJjYXRjaExvY1wiKTtcbiAgICAgICAgICB2YXIgaGFzRmluYWxseSA9IGhhc093bi5jYWxsKGVudHJ5LCBcImZpbmFsbHlMb2NcIik7XG5cbiAgICAgICAgICBpZiAoaGFzQ2F0Y2ggJiYgaGFzRmluYWxseSkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsIHRydWUpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0NhdGNoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuY2F0Y2hMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5jYXRjaExvYywgdHJ1ZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0ZpbmFsbHkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwidHJ5IHN0YXRlbWVudCB3aXRob3V0IGNhdGNoIG9yIGZpbmFsbHlcIik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIGFicnVwdDogZnVuY3Rpb24odHlwZSwgYXJnKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYgJiZcbiAgICAgICAgICAgIGhhc093bi5jYWxsKGVudHJ5LCBcImZpbmFsbHlMb2NcIikgJiZcbiAgICAgICAgICAgIHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICB2YXIgZmluYWxseUVudHJ5ID0gZW50cnk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGZpbmFsbHlFbnRyeSAmJlxuICAgICAgICAgICh0eXBlID09PSBcImJyZWFrXCIgfHxcbiAgICAgICAgICAgdHlwZSA9PT0gXCJjb250aW51ZVwiKSAmJlxuICAgICAgICAgIGZpbmFsbHlFbnRyeS50cnlMb2MgPD0gYXJnICYmXG4gICAgICAgICAgYXJnIDw9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgIC8vIElnbm9yZSB0aGUgZmluYWxseSBlbnRyeSBpZiBjb250cm9sIGlzIG5vdCBqdW1waW5nIHRvIGFcbiAgICAgICAgLy8gbG9jYXRpb24gb3V0c2lkZSB0aGUgdHJ5L2NhdGNoIGJsb2NrLlxuICAgICAgICBmaW5hbGx5RW50cnkgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICB2YXIgcmVjb3JkID0gZmluYWxseUVudHJ5ID8gZmluYWxseUVudHJ5LmNvbXBsZXRpb24gOiB7fTtcbiAgICAgIHJlY29yZC50eXBlID0gdHlwZTtcbiAgICAgIHJlY29yZC5hcmcgPSBhcmc7XG5cbiAgICAgIGlmIChmaW5hbGx5RW50cnkpIHtcbiAgICAgICAgdGhpcy5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgdGhpcy5uZXh0ID0gZmluYWxseUVudHJ5LmZpbmFsbHlMb2M7XG4gICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5jb21wbGV0ZShyZWNvcmQpO1xuICAgIH0sXG5cbiAgICBjb21wbGV0ZTogZnVuY3Rpb24ocmVjb3JkLCBhZnRlckxvYykge1xuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgdGhyb3cgcmVjb3JkLmFyZztcbiAgICAgIH1cblxuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcImJyZWFrXCIgfHxcbiAgICAgICAgICByZWNvcmQudHlwZSA9PT0gXCJjb250aW51ZVwiKSB7XG4gICAgICAgIHRoaXMubmV4dCA9IHJlY29yZC5hcmc7XG4gICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcInJldHVyblwiKSB7XG4gICAgICAgIHRoaXMucnZhbCA9IHRoaXMuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgICAgdGhpcy5tZXRob2QgPSBcInJldHVyblwiO1xuICAgICAgICB0aGlzLm5leHQgPSBcImVuZFwiO1xuICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJub3JtYWxcIiAmJiBhZnRlckxvYykge1xuICAgICAgICB0aGlzLm5leHQgPSBhZnRlckxvYztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfSxcblxuICAgIGZpbmlzaDogZnVuY3Rpb24oZmluYWxseUxvYykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS5maW5hbGx5TG9jID09PSBmaW5hbGx5TG9jKSB7XG4gICAgICAgICAgdGhpcy5jb21wbGV0ZShlbnRyeS5jb21wbGV0aW9uLCBlbnRyeS5hZnRlckxvYyk7XG4gICAgICAgICAgcmVzZXRUcnlFbnRyeShlbnRyeSk7XG4gICAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgXCJjYXRjaFwiOiBmdW5jdGlvbih0cnlMb2MpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSB0cnlMb2MpIHtcbiAgICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcbiAgICAgICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgICAgdmFyIHRocm93biA9IHJlY29yZC5hcmc7XG4gICAgICAgICAgICByZXNldFRyeUVudHJ5KGVudHJ5KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRocm93bjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBUaGUgY29udGV4dC5jYXRjaCBtZXRob2QgbXVzdCBvbmx5IGJlIGNhbGxlZCB3aXRoIGEgbG9jYXRpb25cbiAgICAgIC8vIGFyZ3VtZW50IHRoYXQgY29ycmVzcG9uZHMgdG8gYSBrbm93biBjYXRjaCBibG9jay5cbiAgICAgIHRocm93IG5ldyBFcnJvcihcImlsbGVnYWwgY2F0Y2ggYXR0ZW1wdFwiKTtcbiAgICB9LFxuXG4gICAgZGVsZWdhdGVZaWVsZDogZnVuY3Rpb24oaXRlcmFibGUsIHJlc3VsdE5hbWUsIG5leHRMb2MpIHtcbiAgICAgIHRoaXMuZGVsZWdhdGUgPSB7XG4gICAgICAgIGl0ZXJhdG9yOiB2YWx1ZXMoaXRlcmFibGUpLFxuICAgICAgICByZXN1bHROYW1lOiByZXN1bHROYW1lLFxuICAgICAgICBuZXh0TG9jOiBuZXh0TG9jXG4gICAgICB9O1xuXG4gICAgICBpZiAodGhpcy5tZXRob2QgPT09IFwibmV4dFwiKSB7XG4gICAgICAgIC8vIERlbGliZXJhdGVseSBmb3JnZXQgdGhlIGxhc3Qgc2VudCB2YWx1ZSBzbyB0aGF0IHdlIGRvbid0XG4gICAgICAgIC8vIGFjY2lkZW50YWxseSBwYXNzIGl0IG9uIHRvIHRoZSBkZWxlZ2F0ZS5cbiAgICAgICAgdGhpcy5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cbiAgfTtcblxuICAvLyBSZWdhcmRsZXNzIG9mIHdoZXRoZXIgdGhpcyBzY3JpcHQgaXMgZXhlY3V0aW5nIGFzIGEgQ29tbW9uSlMgbW9kdWxlXG4gIC8vIG9yIG5vdCwgcmV0dXJuIHRoZSBydW50aW1lIG9iamVjdCBzbyB0aGF0IHdlIGNhbiBkZWNsYXJlIHRoZSB2YXJpYWJsZVxuICAvLyByZWdlbmVyYXRvclJ1bnRpbWUgaW4gdGhlIG91dGVyIHNjb3BlLCB3aGljaCBhbGxvd3MgdGhpcyBtb2R1bGUgdG8gYmVcbiAgLy8gaW5qZWN0ZWQgZWFzaWx5IGJ5IGBiaW4vcmVnZW5lcmF0b3IgLS1pbmNsdWRlLXJ1bnRpbWUgc2NyaXB0LmpzYC5cbiAgcmV0dXJuIGV4cG9ydHM7XG5cbn0oXG4gIC8vIElmIHRoaXMgc2NyaXB0IGlzIGV4ZWN1dGluZyBhcyBhIENvbW1vbkpTIG1vZHVsZSwgdXNlIG1vZHVsZS5leHBvcnRzXG4gIC8vIGFzIHRoZSByZWdlbmVyYXRvclJ1bnRpbWUgbmFtZXNwYWNlLiBPdGhlcndpc2UgY3JlYXRlIGEgbmV3IGVtcHR5XG4gIC8vIG9iamVjdC4gRWl0aGVyIHdheSwgdGhlIHJlc3VsdGluZyBvYmplY3Qgd2lsbCBiZSB1c2VkIHRvIGluaXRpYWxpemVcbiAgLy8gdGhlIHJlZ2VuZXJhdG9yUnVudGltZSB2YXJpYWJsZSBhdCB0aGUgdG9wIG9mIHRoaXMgZmlsZS5cbiAgdHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIiA/IG1vZHVsZS5leHBvcnRzIDoge31cbikpO1xuXG50cnkge1xuICByZWdlbmVyYXRvclJ1bnRpbWUgPSBydW50aW1lO1xufSBjYXRjaCAoYWNjaWRlbnRhbFN0cmljdE1vZGUpIHtcbiAgLy8gVGhpcyBtb2R1bGUgc2hvdWxkIG5vdCBiZSBydW5uaW5nIGluIHN0cmljdCBtb2RlLCBzbyB0aGUgYWJvdmVcbiAgLy8gYXNzaWdubWVudCBzaG91bGQgYWx3YXlzIHdvcmsgdW5sZXNzIHNvbWV0aGluZyBpcyBtaXNjb25maWd1cmVkLiBKdXN0XG4gIC8vIGluIGNhc2UgcnVudGltZS5qcyBhY2NpZGVudGFsbHkgcnVucyBpbiBzdHJpY3QgbW9kZSwgd2UgY2FuIGVzY2FwZVxuICAvLyBzdHJpY3QgbW9kZSB1c2luZyBhIGdsb2JhbCBGdW5jdGlvbiBjYWxsLiBUaGlzIGNvdWxkIGNvbmNlaXZhYmx5IGZhaWxcbiAgLy8gaWYgYSBDb250ZW50IFNlY3VyaXR5IFBvbGljeSBmb3JiaWRzIHVzaW5nIEZ1bmN0aW9uLCBidXQgaW4gdGhhdCBjYXNlXG4gIC8vIHRoZSBwcm9wZXIgc29sdXRpb24gaXMgdG8gZml4IHRoZSBhY2NpZGVudGFsIHN0cmljdCBtb2RlIHByb2JsZW0uIElmXG4gIC8vIHlvdSd2ZSBtaXNjb25maWd1cmVkIHlvdXIgYnVuZGxlciB0byBmb3JjZSBzdHJpY3QgbW9kZSBhbmQgYXBwbGllZCBhXG4gIC8vIENTUCB0byBmb3JiaWQgRnVuY3Rpb24sIGFuZCB5b3UncmUgbm90IHdpbGxpbmcgdG8gZml4IGVpdGhlciBvZiB0aG9zZVxuICAvLyBwcm9ibGVtcywgcGxlYXNlIGRldGFpbCB5b3VyIHVuaXF1ZSBwcmVkaWNhbWVudCBpbiBhIEdpdEh1YiBpc3N1ZS5cbiAgRnVuY3Rpb24oXCJyXCIsIFwicmVnZW5lcmF0b3JSdW50aW1lID0gclwiKShydW50aW1lKTtcbn1cbiIsImltcG9ydCBwcm9taXNlRmluYWxseSBmcm9tICcuL2ZpbmFsbHknO1xuXG4vLyBTdG9yZSBzZXRUaW1lb3V0IHJlZmVyZW5jZSBzbyBwcm9taXNlLXBvbHlmaWxsIHdpbGwgYmUgdW5hZmZlY3RlZCBieVxuLy8gb3RoZXIgY29kZSBtb2RpZnlpbmcgc2V0VGltZW91dCAobGlrZSBzaW5vbi51c2VGYWtlVGltZXJzKCkpXG52YXIgc2V0VGltZW91dEZ1bmMgPSBzZXRUaW1lb3V0O1xuXG5mdW5jdGlvbiBpc0FycmF5KHgpIHtcbiAgcmV0dXJuIEJvb2xlYW4oeCAmJiB0eXBlb2YgeC5sZW5ndGggIT09ICd1bmRlZmluZWQnKTtcbn1cblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbi8vIFBvbHlmaWxsIGZvciBGdW5jdGlvbi5wcm90b3R5cGUuYmluZFxuZnVuY3Rpb24gYmluZChmbiwgdGhpc0FyZykge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgZm4uYXBwbHkodGhpc0FyZywgYXJndW1lbnRzKTtcbiAgfTtcbn1cblxuLyoqXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXG4gKi9cbmZ1bmN0aW9uIFByb21pc2UoZm4pIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFByb21pc2UpKVxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Byb21pc2VzIG11c3QgYmUgY29uc3RydWN0ZWQgdmlhIG5ldycpO1xuICBpZiAodHlwZW9mIGZuICE9PSAnZnVuY3Rpb24nKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdub3QgYSBmdW5jdGlvbicpO1xuICAvKiogQHR5cGUgeyFudW1iZXJ9ICovXG4gIHRoaXMuX3N0YXRlID0gMDtcbiAgLyoqIEB0eXBlIHshYm9vbGVhbn0gKi9cbiAgdGhpcy5faGFuZGxlZCA9IGZhbHNlO1xuICAvKiogQHR5cGUge1Byb21pc2V8dW5kZWZpbmVkfSAqL1xuICB0aGlzLl92YWx1ZSA9IHVuZGVmaW5lZDtcbiAgLyoqIEB0eXBlIHshQXJyYXk8IUZ1bmN0aW9uPn0gKi9cbiAgdGhpcy5fZGVmZXJyZWRzID0gW107XG5cbiAgZG9SZXNvbHZlKGZuLCB0aGlzKTtcbn1cblxuZnVuY3Rpb24gaGFuZGxlKHNlbGYsIGRlZmVycmVkKSB7XG4gIHdoaWxlIChzZWxmLl9zdGF0ZSA9PT0gMykge1xuICAgIHNlbGYgPSBzZWxmLl92YWx1ZTtcbiAgfVxuICBpZiAoc2VsZi5fc3RhdGUgPT09IDApIHtcbiAgICBzZWxmLl9kZWZlcnJlZHMucHVzaChkZWZlcnJlZCk7XG4gICAgcmV0dXJuO1xuICB9XG4gIHNlbGYuX2hhbmRsZWQgPSB0cnVlO1xuICBQcm9taXNlLl9pbW1lZGlhdGVGbihmdW5jdGlvbigpIHtcbiAgICB2YXIgY2IgPSBzZWxmLl9zdGF0ZSA9PT0gMSA/IGRlZmVycmVkLm9uRnVsZmlsbGVkIDogZGVmZXJyZWQub25SZWplY3RlZDtcbiAgICBpZiAoY2IgPT09IG51bGwpIHtcbiAgICAgIChzZWxmLl9zdGF0ZSA9PT0gMSA/IHJlc29sdmUgOiByZWplY3QpKGRlZmVycmVkLnByb21pc2UsIHNlbGYuX3ZhbHVlKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHJldDtcbiAgICB0cnkge1xuICAgICAgcmV0ID0gY2Ioc2VsZi5fdmFsdWUpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJlamVjdChkZWZlcnJlZC5wcm9taXNlLCBlKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgcmVzb2x2ZShkZWZlcnJlZC5wcm9taXNlLCByZXQpO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gcmVzb2x2ZShzZWxmLCBuZXdWYWx1ZSkge1xuICB0cnkge1xuICAgIC8vIFByb21pc2UgUmVzb2x1dGlvbiBQcm9jZWR1cmU6IGh0dHBzOi8vZ2l0aHViLmNvbS9wcm9taXNlcy1hcGx1cy9wcm9taXNlcy1zcGVjI3RoZS1wcm9taXNlLXJlc29sdXRpb24tcHJvY2VkdXJlXG4gICAgaWYgKG5ld1ZhbHVlID09PSBzZWxmKVxuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQSBwcm9taXNlIGNhbm5vdCBiZSByZXNvbHZlZCB3aXRoIGl0c2VsZi4nKTtcbiAgICBpZiAoXG4gICAgICBuZXdWYWx1ZSAmJlxuICAgICAgKHR5cGVvZiBuZXdWYWx1ZSA9PT0gJ29iamVjdCcgfHwgdHlwZW9mIG5ld1ZhbHVlID09PSAnZnVuY3Rpb24nKVxuICAgICkge1xuICAgICAgdmFyIHRoZW4gPSBuZXdWYWx1ZS50aGVuO1xuICAgICAgaWYgKG5ld1ZhbHVlIGluc3RhbmNlb2YgUHJvbWlzZSkge1xuICAgICAgICBzZWxmLl9zdGF0ZSA9IDM7XG4gICAgICAgIHNlbGYuX3ZhbHVlID0gbmV3VmFsdWU7XG4gICAgICAgIGZpbmFsZShzZWxmKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdGhlbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBkb1Jlc29sdmUoYmluZCh0aGVuLCBuZXdWYWx1ZSksIHNlbGYpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuICAgIHNlbGYuX3N0YXRlID0gMTtcbiAgICBzZWxmLl92YWx1ZSA9IG5ld1ZhbHVlO1xuICAgIGZpbmFsZShzZWxmKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJlamVjdChzZWxmLCBlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZWplY3Qoc2VsZiwgbmV3VmFsdWUpIHtcbiAgc2VsZi5fc3RhdGUgPSAyO1xuICBzZWxmLl92YWx1ZSA9IG5ld1ZhbHVlO1xuICBmaW5hbGUoc2VsZik7XG59XG5cbmZ1bmN0aW9uIGZpbmFsZShzZWxmKSB7XG4gIGlmIChzZWxmLl9zdGF0ZSA9PT0gMiAmJiBzZWxmLl9kZWZlcnJlZHMubGVuZ3RoID09PSAwKSB7XG4gICAgUHJvbWlzZS5faW1tZWRpYXRlRm4oZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoIXNlbGYuX2hhbmRsZWQpIHtcbiAgICAgICAgUHJvbWlzZS5fdW5oYW5kbGVkUmVqZWN0aW9uRm4oc2VsZi5fdmFsdWUpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHNlbGYuX2RlZmVycmVkcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgIGhhbmRsZShzZWxmLCBzZWxmLl9kZWZlcnJlZHNbaV0pO1xuICB9XG4gIHNlbGYuX2RlZmVycmVkcyA9IG51bGw7XG59XG5cbi8qKlxuICogQGNvbnN0cnVjdG9yXG4gKi9cbmZ1bmN0aW9uIEhhbmRsZXIob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQsIHByb21pc2UpIHtcbiAgdGhpcy5vbkZ1bGZpbGxlZCA9IHR5cGVvZiBvbkZ1bGZpbGxlZCA9PT0gJ2Z1bmN0aW9uJyA/IG9uRnVsZmlsbGVkIDogbnVsbDtcbiAgdGhpcy5vblJlamVjdGVkID0gdHlwZW9mIG9uUmVqZWN0ZWQgPT09ICdmdW5jdGlvbicgPyBvblJlamVjdGVkIDogbnVsbDtcbiAgdGhpcy5wcm9taXNlID0gcHJvbWlzZTtcbn1cblxuLyoqXG4gKiBUYWtlIGEgcG90ZW50aWFsbHkgbWlzYmVoYXZpbmcgcmVzb2x2ZXIgZnVuY3Rpb24gYW5kIG1ha2Ugc3VyZVxuICogb25GdWxmaWxsZWQgYW5kIG9uUmVqZWN0ZWQgYXJlIG9ubHkgY2FsbGVkIG9uY2UuXG4gKlxuICogTWFrZXMgbm8gZ3VhcmFudGVlcyBhYm91dCBhc3luY2hyb255LlxuICovXG5mdW5jdGlvbiBkb1Jlc29sdmUoZm4sIHNlbGYpIHtcbiAgdmFyIGRvbmUgPSBmYWxzZTtcbiAgdHJ5IHtcbiAgICBmbihcbiAgICAgIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIGlmIChkb25lKSByZXR1cm47XG4gICAgICAgIGRvbmUgPSB0cnVlO1xuICAgICAgICByZXNvbHZlKHNlbGYsIHZhbHVlKTtcbiAgICAgIH0sXG4gICAgICBmdW5jdGlvbihyZWFzb24pIHtcbiAgICAgICAgaWYgKGRvbmUpIHJldHVybjtcbiAgICAgICAgZG9uZSA9IHRydWU7XG4gICAgICAgIHJlamVjdChzZWxmLCByZWFzb24pO1xuICAgICAgfVxuICAgICk7XG4gIH0gY2F0Y2ggKGV4KSB7XG4gICAgaWYgKGRvbmUpIHJldHVybjtcbiAgICBkb25lID0gdHJ1ZTtcbiAgICByZWplY3Qoc2VsZiwgZXgpO1xuICB9XG59XG5cblByb21pc2UucHJvdG90eXBlWydjYXRjaCddID0gZnVuY3Rpb24ob25SZWplY3RlZCkge1xuICByZXR1cm4gdGhpcy50aGVuKG51bGwsIG9uUmVqZWN0ZWQpO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUudGhlbiA9IGZ1bmN0aW9uKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKSB7XG4gIC8vIEB0cy1pZ25vcmVcbiAgdmFyIHByb20gPSBuZXcgdGhpcy5jb25zdHJ1Y3Rvcihub29wKTtcblxuICBoYW5kbGUodGhpcywgbmV3IEhhbmRsZXIob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQsIHByb20pKTtcbiAgcmV0dXJuIHByb207XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZVsnZmluYWxseSddID0gcHJvbWlzZUZpbmFsbHk7XG5cblByb21pc2UuYWxsID0gZnVuY3Rpb24oYXJyKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICBpZiAoIWlzQXJyYXkoYXJyKSkge1xuICAgICAgcmV0dXJuIHJlamVjdChuZXcgVHlwZUVycm9yKCdQcm9taXNlLmFsbCBhY2NlcHRzIGFuIGFycmF5JykpO1xuICAgIH1cblxuICAgIHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJyKTtcbiAgICBpZiAoYXJncy5sZW5ndGggPT09IDApIHJldHVybiByZXNvbHZlKFtdKTtcbiAgICB2YXIgcmVtYWluaW5nID0gYXJncy5sZW5ndGg7XG5cbiAgICBmdW5jdGlvbiByZXMoaSwgdmFsKSB7XG4gICAgICB0cnkge1xuICAgICAgICBpZiAodmFsICYmICh0eXBlb2YgdmFsID09PSAnb2JqZWN0JyB8fCB0eXBlb2YgdmFsID09PSAnZnVuY3Rpb24nKSkge1xuICAgICAgICAgIHZhciB0aGVuID0gdmFsLnRoZW47XG4gICAgICAgICAgaWYgKHR5cGVvZiB0aGVuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB0aGVuLmNhbGwoXG4gICAgICAgICAgICAgIHZhbCxcbiAgICAgICAgICAgICAgZnVuY3Rpb24odmFsKSB7XG4gICAgICAgICAgICAgICAgcmVzKGksIHZhbCk7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHJlamVjdFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYXJnc1tpXSA9IHZhbDtcbiAgICAgICAgaWYgKC0tcmVtYWluaW5nID09PSAwKSB7XG4gICAgICAgICAgcmVzb2x2ZShhcmdzKTtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgICAgcmVqZWN0KGV4KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgIHJlcyhpLCBhcmdzW2ldKTtcbiAgICB9XG4gIH0pO1xufTtcblxuUHJvbWlzZS5yZXNvbHZlID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgaWYgKHZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUuY29uc3RydWN0b3IgPT09IFByb21pc2UpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cblxuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSkge1xuICAgIHJlc29sdmUodmFsdWUpO1xuICB9KTtcbn07XG5cblByb21pc2UucmVqZWN0ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgIHJlamVjdCh2YWx1ZSk7XG4gIH0pO1xufTtcblxuUHJvbWlzZS5yYWNlID0gZnVuY3Rpb24oYXJyKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICBpZiAoIWlzQXJyYXkoYXJyKSkge1xuICAgICAgcmV0dXJuIHJlamVjdChuZXcgVHlwZUVycm9yKCdQcm9taXNlLnJhY2UgYWNjZXB0cyBhbiBhcnJheScpKTtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gYXJyLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBQcm9taXNlLnJlc29sdmUoYXJyW2ldKS50aGVuKHJlc29sdmUsIHJlamVjdCk7XG4gICAgfVxuICB9KTtcbn07XG5cbi8vIFVzZSBwb2x5ZmlsbCBmb3Igc2V0SW1tZWRpYXRlIGZvciBwZXJmb3JtYW5jZSBnYWluc1xuUHJvbWlzZS5faW1tZWRpYXRlRm4gPVxuICAvLyBAdHMtaWdub3JlXG4gICh0eXBlb2Ygc2V0SW1tZWRpYXRlID09PSAnZnVuY3Rpb24nICYmXG4gICAgZnVuY3Rpb24oZm4pIHtcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIHNldEltbWVkaWF0ZShmbik7XG4gICAgfSkgfHxcbiAgZnVuY3Rpb24oZm4pIHtcbiAgICBzZXRUaW1lb3V0RnVuYyhmbiwgMCk7XG4gIH07XG5cblByb21pc2UuX3VuaGFuZGxlZFJlamVjdGlvbkZuID0gZnVuY3Rpb24gX3VuaGFuZGxlZFJlamVjdGlvbkZuKGVycikge1xuICBpZiAodHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnICYmIGNvbnNvbGUpIHtcbiAgICBjb25zb2xlLndhcm4oJ1Bvc3NpYmxlIFVuaGFuZGxlZCBQcm9taXNlIFJlamVjdGlvbjonLCBlcnIpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWNvbnNvbGVcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgUHJvbWlzZTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyICRmaWx0ZXIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uJykuZmlsdGVyO1xudmFyIGFycmF5TWV0aG9kSGFzU3BlY2llc1N1cHBvcnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLWhhcy1zcGVjaWVzLXN1cHBvcnQnKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5maWx0ZXJgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZpbHRlclxuLy8gd2l0aCBhZGRpbmcgc3VwcG9ydCBvZiBAQHNwZWNpZXNcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6ICFhcnJheU1ldGhvZEhhc1NwZWNpZXNTdXBwb3J0KCdmaWx0ZXInKSB9LCB7XG4gIGZpbHRlcjogZnVuY3Rpb24gZmlsdGVyKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgcmV0dXJuICRmaWx0ZXIodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyICRpbmNsdWRlcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pbmNsdWRlcycpLmluY2x1ZGVzO1xudmFyIGFkZFRvVW5zY29wYWJsZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYWRkLXRvLXVuc2NvcGFibGVzJyk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuaW5jbHVkZXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmluY2x1ZGVzXG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSB9LCB7XG4gIGluY2x1ZGVzOiBmdW5jdGlvbiBpbmNsdWRlcyhlbCAvKiAsIGZyb21JbmRleCA9IDAgKi8pIHtcbiAgICByZXR1cm4gJGluY2x1ZGVzKHRoaXMsIGVsLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xuXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUtQEB1bnNjb3BhYmxlc1xuYWRkVG9VbnNjb3BhYmxlcygnaW5jbHVkZXMnKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWZ1bmN0aW9uJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBzbG9wcHlBcnJheU1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zbG9wcHktYXJyYXktbWV0aG9kJyk7XG5cbnZhciBuYXRpdmVTb3J0ID0gW10uc29ydDtcbnZhciB0ZXN0ID0gWzEsIDIsIDNdO1xuXG4vLyBJRTgtXG52YXIgRkFJTFNfT05fVU5ERUZJTkVEID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICB0ZXN0LnNvcnQodW5kZWZpbmVkKTtcbn0pO1xuLy8gVjggYnVnXG52YXIgRkFJTFNfT05fTlVMTCA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgdGVzdC5zb3J0KG51bGwpO1xufSk7XG4vLyBPbGQgV2ViS2l0XG52YXIgU0xPUFBZX01FVEhPRCA9IHNsb3BweUFycmF5TWV0aG9kKCdzb3J0Jyk7XG5cbnZhciBGT1JDRUQgPSBGQUlMU19PTl9VTkRFRklORUQgfHwgIUZBSUxTX09OX05VTEwgfHwgU0xPUFBZX01FVEhPRDtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5zb3J0YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5zb3J0XG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBGT1JDRUQgfSwge1xuICBzb3J0OiBmdW5jdGlvbiBzb3J0KGNvbXBhcmVmbikge1xuICAgIHJldHVybiBjb21wYXJlZm4gPT09IHVuZGVmaW5lZFxuICAgICAgPyBuYXRpdmVTb3J0LmNhbGwodG9PYmplY3QodGhpcykpXG4gICAgICA6IG5hdGl2ZVNvcnQuY2FsbCh0b09iamVjdCh0aGlzKSwgYUZ1bmN0aW9uKGNvbXBhcmVmbikpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1hYnNvbHV0ZS1pbmRleCcpO1xudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbnRlZ2VyJyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgYXJyYXlTcGVjaWVzQ3JlYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LXNwZWNpZXMtY3JlYXRlJyk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5Jyk7XG52YXIgYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1tZXRob2QtaGFzLXNwZWNpZXMtc3VwcG9ydCcpO1xuXG52YXIgbWF4ID0gTWF0aC5tYXg7XG52YXIgbWluID0gTWF0aC5taW47XG52YXIgTUFYX1NBRkVfSU5URUdFUiA9IDB4MUZGRkZGRkZGRkZGRkY7XG52YXIgTUFYSU1VTV9BTExPV0VEX0xFTkdUSF9FWENFRURFRCA9ICdNYXhpbXVtIGFsbG93ZWQgbGVuZ3RoIGV4Y2VlZGVkJztcblxuLy8gYEFycmF5LnByb3RvdHlwZS5zcGxpY2VgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLnNwbGljZVxuLy8gd2l0aCBhZGRpbmcgc3VwcG9ydCBvZiBAQHNwZWNpZXNcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6ICFhcnJheU1ldGhvZEhhc1NwZWNpZXNTdXBwb3J0KCdzcGxpY2UnKSB9LCB7XG4gIHNwbGljZTogZnVuY3Rpb24gc3BsaWNlKHN0YXJ0LCBkZWxldGVDb3VudCAvKiAsIC4uLml0ZW1zICovKSB7XG4gICAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgICB2YXIgbGVuID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgIHZhciBhY3R1YWxTdGFydCA9IHRvQWJzb2x1dGVJbmRleChzdGFydCwgbGVuKTtcbiAgICB2YXIgYXJndW1lbnRzTGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgaW5zZXJ0Q291bnQsIGFjdHVhbERlbGV0ZUNvdW50LCBBLCBrLCBmcm9tLCB0bztcbiAgICBpZiAoYXJndW1lbnRzTGVuZ3RoID09PSAwKSB7XG4gICAgICBpbnNlcnRDb3VudCA9IGFjdHVhbERlbGV0ZUNvdW50ID0gMDtcbiAgICB9IGVsc2UgaWYgKGFyZ3VtZW50c0xlbmd0aCA9PT0gMSkge1xuICAgICAgaW5zZXJ0Q291bnQgPSAwO1xuICAgICAgYWN0dWFsRGVsZXRlQ291bnQgPSBsZW4gLSBhY3R1YWxTdGFydDtcbiAgICB9IGVsc2Uge1xuICAgICAgaW5zZXJ0Q291bnQgPSBhcmd1bWVudHNMZW5ndGggLSAyO1xuICAgICAgYWN0dWFsRGVsZXRlQ291bnQgPSBtaW4obWF4KHRvSW50ZWdlcihkZWxldGVDb3VudCksIDApLCBsZW4gLSBhY3R1YWxTdGFydCk7XG4gICAgfVxuICAgIGlmIChsZW4gKyBpbnNlcnRDb3VudCAtIGFjdHVhbERlbGV0ZUNvdW50ID4gTUFYX1NBRkVfSU5URUdFUikge1xuICAgICAgdGhyb3cgVHlwZUVycm9yKE1BWElNVU1fQUxMT1dFRF9MRU5HVEhfRVhDRUVERUQpO1xuICAgIH1cbiAgICBBID0gYXJyYXlTcGVjaWVzQ3JlYXRlKE8sIGFjdHVhbERlbGV0ZUNvdW50KTtcbiAgICBmb3IgKGsgPSAwOyBrIDwgYWN0dWFsRGVsZXRlQ291bnQ7IGsrKykge1xuICAgICAgZnJvbSA9IGFjdHVhbFN0YXJ0ICsgaztcbiAgICAgIGlmIChmcm9tIGluIE8pIGNyZWF0ZVByb3BlcnR5KEEsIGssIE9bZnJvbV0pO1xuICAgIH1cbiAgICBBLmxlbmd0aCA9IGFjdHVhbERlbGV0ZUNvdW50O1xuICAgIGlmIChpbnNlcnRDb3VudCA8IGFjdHVhbERlbGV0ZUNvdW50KSB7XG4gICAgICBmb3IgKGsgPSBhY3R1YWxTdGFydDsgayA8IGxlbiAtIGFjdHVhbERlbGV0ZUNvdW50OyBrKyspIHtcbiAgICAgICAgZnJvbSA9IGsgKyBhY3R1YWxEZWxldGVDb3VudDtcbiAgICAgICAgdG8gPSBrICsgaW5zZXJ0Q291bnQ7XG4gICAgICAgIGlmIChmcm9tIGluIE8pIE9bdG9dID0gT1tmcm9tXTtcbiAgICAgICAgZWxzZSBkZWxldGUgT1t0b107XG4gICAgICB9XG4gICAgICBmb3IgKGsgPSBsZW47IGsgPiBsZW4gLSBhY3R1YWxEZWxldGVDb3VudCArIGluc2VydENvdW50OyBrLS0pIGRlbGV0ZSBPW2sgLSAxXTtcbiAgICB9IGVsc2UgaWYgKGluc2VydENvdW50ID4gYWN0dWFsRGVsZXRlQ291bnQpIHtcbiAgICAgIGZvciAoayA9IGxlbiAtIGFjdHVhbERlbGV0ZUNvdW50OyBrID4gYWN0dWFsU3RhcnQ7IGstLSkge1xuICAgICAgICBmcm9tID0gayArIGFjdHVhbERlbGV0ZUNvdW50IC0gMTtcbiAgICAgICAgdG8gPSBrICsgaW5zZXJ0Q291bnQgLSAxO1xuICAgICAgICBpZiAoZnJvbSBpbiBPKSBPW3RvXSA9IE9bZnJvbV07XG4gICAgICAgIGVsc2UgZGVsZXRlIE9bdG9dO1xuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKGsgPSAwOyBrIDwgaW5zZXJ0Q291bnQ7IGsrKykge1xuICAgICAgT1trICsgYWN0dWFsU3RhcnRdID0gYXJndW1lbnRzW2sgKyAyXTtcbiAgICB9XG4gICAgTy5sZW5ndGggPSBsZW4gLSBhY3R1YWxEZWxldGVDb3VudCArIGluc2VydENvdW50O1xuICAgIHJldHVybiBBO1xuICB9XG59KTtcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKS5mO1xuXG52YXIgRnVuY3Rpb25Qcm90b3R5cGUgPSBGdW5jdGlvbi5wcm90b3R5cGU7XG52YXIgRnVuY3Rpb25Qcm90b3R5cGVUb1N0cmluZyA9IEZ1bmN0aW9uUHJvdG90eXBlLnRvU3RyaW5nO1xudmFyIG5hbWVSRSA9IC9eXFxzKmZ1bmN0aW9uIChbXiAoXSopLztcbnZhciBOQU1FID0gJ25hbWUnO1xuXG4vLyBGdW5jdGlvbiBpbnN0YW5jZXMgYC5uYW1lYCBwcm9wZXJ0eVxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtZnVuY3Rpb24taW5zdGFuY2VzLW5hbWVcbmlmIChERVNDUklQVE9SUyAmJiAhKE5BTUUgaW4gRnVuY3Rpb25Qcm90b3R5cGUpKSB7XG4gIGRlZmluZVByb3BlcnR5KEZ1bmN0aW9uUHJvdG90eXBlLCBOQU1FLCB7XG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIEZ1bmN0aW9uUHJvdG90eXBlVG9TdHJpbmcuY2FsbCh0aGlzKS5tYXRjaChuYW1lUkUpWzFdO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG59XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBub3RBUmVnRXhwID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25vdC1hLXJlZ2V4cCcpO1xudmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG52YXIgY29ycmVjdElzUmVnRXhwTG9naWMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29ycmVjdC1pcy1yZWdleHAtbG9naWMnKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUuaW5jbHVkZXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5pbmNsdWRlc1xuJCh7IHRhcmdldDogJ1N0cmluZycsIHByb3RvOiB0cnVlLCBmb3JjZWQ6ICFjb3JyZWN0SXNSZWdFeHBMb2dpYygnaW5jbHVkZXMnKSB9LCB7XG4gIGluY2x1ZGVzOiBmdW5jdGlvbiBpbmNsdWRlcyhzZWFyY2hTdHJpbmcgLyogLCBwb3NpdGlvbiA9IDAgKi8pIHtcbiAgICByZXR1cm4gISF+U3RyaW5nKHJlcXVpcmVPYmplY3RDb2VyY2libGUodGhpcykpXG4gICAgICAuaW5kZXhPZihub3RBUmVnRXhwKHNlYXJjaFN0cmluZyksIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG4iLCJ2YXIgaXNSZWdFeHAgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcmVnZXhwJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpc1JlZ0V4cChpdCkpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IoXCJUaGUgbWV0aG9kIGRvZXNuJ3QgYWNjZXB0IHJlZ3VsYXIgZXhwcmVzc2lvbnNcIik7XG4gIH0gcmV0dXJuIGl0O1xufTtcbiIsInZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIE1BVENIID0gd2VsbEtub3duU3ltYm9sKCdtYXRjaCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChNRVRIT0RfTkFNRSkge1xuICB2YXIgcmVnZXhwID0gLy4vO1xuICB0cnkge1xuICAgICcvLi8nW01FVEhPRF9OQU1FXShyZWdleHApO1xuICB9IGNhdGNoIChlKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJlZ2V4cFtNQVRDSF0gPSBmYWxzZTtcbiAgICAgIHJldHVybiAnLy4vJ1tNRVRIT0RfTkFNRV0ocmVnZXhwKTtcbiAgICB9IGNhdGNoIChmKSB7IC8qIGVtcHR5ICovIH1cbiAgfSByZXR1cm4gZmFsc2U7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgJHRyaW0gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLXRyaW0nKS50cmltO1xudmFyIGZvcmNlZFN0cmluZ1RyaW1NZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZm9yY2VkLXN0cmluZy10cmltLW1ldGhvZCcpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS50cmltYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUudHJpbVxuJCh7IHRhcmdldDogJ1N0cmluZycsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IGZvcmNlZFN0cmluZ1RyaW1NZXRob2QoJ3RyaW0nKSB9LCB7XG4gIHRyaW06IGZ1bmN0aW9uIHRyaW0oKSB7XG4gICAgcmV0dXJuICR0cmltKHRoaXMpO1xuICB9XG59KTtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIHdoaXRlc3BhY2VzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3doaXRlc3BhY2VzJyk7XG5cbnZhciBub24gPSAnXFx1MjAwQlxcdTAwODVcXHUxODBFJztcblxuLy8gY2hlY2sgdGhhdCBhIG1ldGhvZCB3b3JrcyB3aXRoIHRoZSBjb3JyZWN0IGxpc3Rcbi8vIG9mIHdoaXRlc3BhY2VzIGFuZCBoYXMgYSBjb3JyZWN0IG5hbWVcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE1FVEhPRF9OQU1FKSB7XG4gIHJldHVybiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICEhd2hpdGVzcGFjZXNbTUVUSE9EX05BTUVdKCkgfHwgbm9uW01FVEhPRF9OQU1FXSgpICE9IG5vbiB8fCB3aGl0ZXNwYWNlc1tNRVRIT0RfTkFNRV0ubmFtZSAhPT0gTUVUSE9EX05BTUU7XG4gIH0pO1xufTtcbiIsImltcG9ydCBQcm9taXNlIGZyb20gJy4vaW5kZXgnO1xuaW1wb3J0IHByb21pc2VGaW5hbGx5IGZyb20gJy4vZmluYWxseSc7XG5cbi8qKiBAc3VwcHJlc3Mge3VuZGVmaW5lZFZhcnN9ICovXG52YXIgZ2xvYmFsTlMgPSAoZnVuY3Rpb24oKSB7XG4gIC8vIHRoZSBvbmx5IHJlbGlhYmxlIG1lYW5zIHRvIGdldCB0aGUgZ2xvYmFsIG9iamVjdCBpc1xuICAvLyBgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKWBcbiAgLy8gSG93ZXZlciwgdGhpcyBjYXVzZXMgQ1NQIHZpb2xhdGlvbnMgaW4gQ2hyb21lIGFwcHMuXG4gIGlmICh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gc2VsZjtcbiAgfVxuICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gd2luZG93O1xuICB9XG4gIGlmICh0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBnbG9iYWw7XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKCd1bmFibGUgdG8gbG9jYXRlIGdsb2JhbCBvYmplY3QnKTtcbn0pKCk7XG5cbmlmICghKCdQcm9taXNlJyBpbiBnbG9iYWxOUykpIHtcbiAgZ2xvYmFsTlNbJ1Byb21pc2UnXSA9IFByb21pc2U7XG59IGVsc2UgaWYgKCFnbG9iYWxOUy5Qcm9taXNlLnByb3RvdHlwZVsnZmluYWxseSddKSB7XG4gIGdsb2JhbE5TLlByb21pc2UucHJvdG90eXBlWydmaW5hbGx5J10gPSBwcm9taXNlRmluYWxseTtcbn1cbiIsInZhciBzY29wZSA9ICh0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiICYmIGdsb2JhbCkgfHxcbiAgICAgICAgICAgICh0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiAmJiBzZWxmKSB8fFxuICAgICAgICAgICAgd2luZG93O1xudmFyIGFwcGx5ID0gRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5O1xuXG4vLyBET00gQVBJcywgZm9yIGNvbXBsZXRlbmVzc1xuXG5leHBvcnRzLnNldFRpbWVvdXQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBUaW1lb3V0KGFwcGx5LmNhbGwoc2V0VGltZW91dCwgc2NvcGUsIGFyZ3VtZW50cyksIGNsZWFyVGltZW91dCk7XG59O1xuZXhwb3J0cy5zZXRJbnRlcnZhbCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IFRpbWVvdXQoYXBwbHkuY2FsbChzZXRJbnRlcnZhbCwgc2NvcGUsIGFyZ3VtZW50cyksIGNsZWFySW50ZXJ2YWwpO1xufTtcbmV4cG9ydHMuY2xlYXJUaW1lb3V0ID1cbmV4cG9ydHMuY2xlYXJJbnRlcnZhbCA9IGZ1bmN0aW9uKHRpbWVvdXQpIHtcbiAgaWYgKHRpbWVvdXQpIHtcbiAgICB0aW1lb3V0LmNsb3NlKCk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIFRpbWVvdXQoaWQsIGNsZWFyRm4pIHtcbiAgdGhpcy5faWQgPSBpZDtcbiAgdGhpcy5fY2xlYXJGbiA9IGNsZWFyRm47XG59XG5UaW1lb3V0LnByb3RvdHlwZS51bnJlZiA9IFRpbWVvdXQucHJvdG90eXBlLnJlZiA9IGZ1bmN0aW9uKCkge307XG5UaW1lb3V0LnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLl9jbGVhckZuLmNhbGwoc2NvcGUsIHRoaXMuX2lkKTtcbn07XG5cbi8vIERvZXMgbm90IHN0YXJ0IHRoZSB0aW1lLCBqdXN0IHNldHMgdXAgdGhlIG1lbWJlcnMgbmVlZGVkLlxuZXhwb3J0cy5lbnJvbGwgPSBmdW5jdGlvbihpdGVtLCBtc2Vjcykge1xuICBjbGVhclRpbWVvdXQoaXRlbS5faWRsZVRpbWVvdXRJZCk7XG4gIGl0ZW0uX2lkbGVUaW1lb3V0ID0gbXNlY3M7XG59O1xuXG5leHBvcnRzLnVuZW5yb2xsID0gZnVuY3Rpb24oaXRlbSkge1xuICBjbGVhclRpbWVvdXQoaXRlbS5faWRsZVRpbWVvdXRJZCk7XG4gIGl0ZW0uX2lkbGVUaW1lb3V0ID0gLTE7XG59O1xuXG5leHBvcnRzLl91bnJlZkFjdGl2ZSA9IGV4cG9ydHMuYWN0aXZlID0gZnVuY3Rpb24oaXRlbSkge1xuICBjbGVhclRpbWVvdXQoaXRlbS5faWRsZVRpbWVvdXRJZCk7XG5cbiAgdmFyIG1zZWNzID0gaXRlbS5faWRsZVRpbWVvdXQ7XG4gIGlmIChtc2VjcyA+PSAwKSB7XG4gICAgaXRlbS5faWRsZVRpbWVvdXRJZCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gb25UaW1lb3V0KCkge1xuICAgICAgaWYgKGl0ZW0uX29uVGltZW91dClcbiAgICAgICAgaXRlbS5fb25UaW1lb3V0KCk7XG4gICAgfSwgbXNlY3MpO1xuICB9XG59O1xuXG4vLyBzZXRpbW1lZGlhdGUgYXR0YWNoZXMgaXRzZWxmIHRvIHRoZSBnbG9iYWwgb2JqZWN0XG5yZXF1aXJlKFwic2V0aW1tZWRpYXRlXCIpO1xuLy8gT24gc29tZSBleG90aWMgZW52aXJvbm1lbnRzLCBpdCdzIG5vdCBjbGVhciB3aGljaCBvYmplY3QgYHNldGltbWVkaWF0ZWAgd2FzXG4vLyBhYmxlIHRvIGluc3RhbGwgb250by4gIFNlYXJjaCBlYWNoIHBvc3NpYmlsaXR5IGluIHRoZSBzYW1lIG9yZGVyIGFzIHRoZVxuLy8gYHNldGltbWVkaWF0ZWAgbGlicmFyeS5cbmV4cG9ydHMuc2V0SW1tZWRpYXRlID0gKHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiICYmIHNlbGYuc2V0SW1tZWRpYXRlKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAodHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBnbG9iYWwuc2V0SW1tZWRpYXRlKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAodGhpcyAmJiB0aGlzLnNldEltbWVkaWF0ZSk7XG5leHBvcnRzLmNsZWFySW1tZWRpYXRlID0gKHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiICYmIHNlbGYuY2xlYXJJbW1lZGlhdGUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgKHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgJiYgZ2xvYmFsLmNsZWFySW1tZWRpYXRlKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICh0aGlzICYmIHRoaXMuY2xlYXJJbW1lZGlhdGUpO1xuIiwiKGZ1bmN0aW9uIChnbG9iYWwsIHVuZGVmaW5lZCkge1xuICAgIFwidXNlIHN0cmljdFwiO1xuXG4gICAgaWYgKGdsb2JhbC5zZXRJbW1lZGlhdGUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBuZXh0SGFuZGxlID0gMTsgLy8gU3BlYyBzYXlzIGdyZWF0ZXIgdGhhbiB6ZXJvXG4gICAgdmFyIHRhc2tzQnlIYW5kbGUgPSB7fTtcbiAgICB2YXIgY3VycmVudGx5UnVubmluZ0FUYXNrID0gZmFsc2U7XG4gICAgdmFyIGRvYyA9IGdsb2JhbC5kb2N1bWVudDtcbiAgICB2YXIgcmVnaXN0ZXJJbW1lZGlhdGU7XG5cbiAgICBmdW5jdGlvbiBzZXRJbW1lZGlhdGUoY2FsbGJhY2spIHtcbiAgICAgIC8vIENhbGxiYWNrIGNhbiBlaXRoZXIgYmUgYSBmdW5jdGlvbiBvciBhIHN0cmluZ1xuICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIGNhbGxiYWNrID0gbmV3IEZ1bmN0aW9uKFwiXCIgKyBjYWxsYmFjayk7XG4gICAgICB9XG4gICAgICAvLyBDb3B5IGZ1bmN0aW9uIGFyZ3VtZW50c1xuICAgICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgYXJnc1tpXSA9IGFyZ3VtZW50c1tpICsgMV07XG4gICAgICB9XG4gICAgICAvLyBTdG9yZSBhbmQgcmVnaXN0ZXIgdGhlIHRhc2tcbiAgICAgIHZhciB0YXNrID0geyBjYWxsYmFjazogY2FsbGJhY2ssIGFyZ3M6IGFyZ3MgfTtcbiAgICAgIHRhc2tzQnlIYW5kbGVbbmV4dEhhbmRsZV0gPSB0YXNrO1xuICAgICAgcmVnaXN0ZXJJbW1lZGlhdGUobmV4dEhhbmRsZSk7XG4gICAgICByZXR1cm4gbmV4dEhhbmRsZSsrO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNsZWFySW1tZWRpYXRlKGhhbmRsZSkge1xuICAgICAgICBkZWxldGUgdGFza3NCeUhhbmRsZVtoYW5kbGVdO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJ1bih0YXNrKSB7XG4gICAgICAgIHZhciBjYWxsYmFjayA9IHRhc2suY2FsbGJhY2s7XG4gICAgICAgIHZhciBhcmdzID0gdGFzay5hcmdzO1xuICAgICAgICBzd2l0Y2ggKGFyZ3MubGVuZ3RoKSB7XG4gICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgY2FsbGJhY2soYXJnc1swXSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgY2FsbGJhY2soYXJnc1swXSwgYXJnc1sxXSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgY2FsbGJhY2soYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIGNhbGxiYWNrLmFwcGx5KHVuZGVmaW5lZCwgYXJncyk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJ1bklmUHJlc2VudChoYW5kbGUpIHtcbiAgICAgICAgLy8gRnJvbSB0aGUgc3BlYzogXCJXYWl0IHVudGlsIGFueSBpbnZvY2F0aW9ucyBvZiB0aGlzIGFsZ29yaXRobSBzdGFydGVkIGJlZm9yZSB0aGlzIG9uZSBoYXZlIGNvbXBsZXRlZC5cIlxuICAgICAgICAvLyBTbyBpZiB3ZSdyZSBjdXJyZW50bHkgcnVubmluZyBhIHRhc2ssIHdlJ2xsIG5lZWQgdG8gZGVsYXkgdGhpcyBpbnZvY2F0aW9uLlxuICAgICAgICBpZiAoY3VycmVudGx5UnVubmluZ0FUYXNrKSB7XG4gICAgICAgICAgICAvLyBEZWxheSBieSBkb2luZyBhIHNldFRpbWVvdXQuIHNldEltbWVkaWF0ZSB3YXMgdHJpZWQgaW5zdGVhZCwgYnV0IGluIEZpcmVmb3ggNyBpdCBnZW5lcmF0ZWQgYVxuICAgICAgICAgICAgLy8gXCJ0b28gbXVjaCByZWN1cnNpb25cIiBlcnJvci5cbiAgICAgICAgICAgIHNldFRpbWVvdXQocnVuSWZQcmVzZW50LCAwLCBoYW5kbGUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIHRhc2sgPSB0YXNrc0J5SGFuZGxlW2hhbmRsZV07XG4gICAgICAgICAgICBpZiAodGFzaykge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRseVJ1bm5pbmdBVGFzayA9IHRydWU7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgcnVuKHRhc2spO1xuICAgICAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgIGNsZWFySW1tZWRpYXRlKGhhbmRsZSk7XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRseVJ1bm5pbmdBVGFzayA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluc3RhbGxOZXh0VGlja0ltcGxlbWVudGF0aW9uKCkge1xuICAgICAgICByZWdpc3RlckltbWVkaWF0ZSA9IGZ1bmN0aW9uKGhhbmRsZSkge1xuICAgICAgICAgICAgcHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbiAoKSB7IHJ1bklmUHJlc2VudChoYW5kbGUpOyB9KTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjYW5Vc2VQb3N0TWVzc2FnZSgpIHtcbiAgICAgICAgLy8gVGhlIHRlc3QgYWdhaW5zdCBgaW1wb3J0U2NyaXB0c2AgcHJldmVudHMgdGhpcyBpbXBsZW1lbnRhdGlvbiBmcm9tIGJlaW5nIGluc3RhbGxlZCBpbnNpZGUgYSB3ZWIgd29ya2VyLFxuICAgICAgICAvLyB3aGVyZSBgZ2xvYmFsLnBvc3RNZXNzYWdlYCBtZWFucyBzb21ldGhpbmcgY29tcGxldGVseSBkaWZmZXJlbnQgYW5kIGNhbid0IGJlIHVzZWQgZm9yIHRoaXMgcHVycG9zZS5cbiAgICAgICAgaWYgKGdsb2JhbC5wb3N0TWVzc2FnZSAmJiAhZ2xvYmFsLmltcG9ydFNjcmlwdHMpIHtcbiAgICAgICAgICAgIHZhciBwb3N0TWVzc2FnZUlzQXN5bmNocm9ub3VzID0gdHJ1ZTtcbiAgICAgICAgICAgIHZhciBvbGRPbk1lc3NhZ2UgPSBnbG9iYWwub25tZXNzYWdlO1xuICAgICAgICAgICAgZ2xvYmFsLm9ubWVzc2FnZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHBvc3RNZXNzYWdlSXNBc3luY2hyb25vdXMgPSBmYWxzZTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBnbG9iYWwucG9zdE1lc3NhZ2UoXCJcIiwgXCIqXCIpO1xuICAgICAgICAgICAgZ2xvYmFsLm9ubWVzc2FnZSA9IG9sZE9uTWVzc2FnZTtcbiAgICAgICAgICAgIHJldHVybiBwb3N0TWVzc2FnZUlzQXN5bmNocm9ub3VzO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5zdGFsbFBvc3RNZXNzYWdlSW1wbGVtZW50YXRpb24oKSB7XG4gICAgICAgIC8vIEluc3RhbGxzIGFuIGV2ZW50IGhhbmRsZXIgb24gYGdsb2JhbGAgZm9yIHRoZSBgbWVzc2FnZWAgZXZlbnQ6IHNlZVxuICAgICAgICAvLyAqIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL0RPTS93aW5kb3cucG9zdE1lc3NhZ2VcbiAgICAgICAgLy8gKiBodHRwOi8vd3d3LndoYXR3Zy5vcmcvc3BlY3Mvd2ViLWFwcHMvY3VycmVudC13b3JrL211bHRpcGFnZS9jb21tcy5odG1sI2Nyb3NzRG9jdW1lbnRNZXNzYWdlc1xuXG4gICAgICAgIHZhciBtZXNzYWdlUHJlZml4ID0gXCJzZXRJbW1lZGlhdGUkXCIgKyBNYXRoLnJhbmRvbSgpICsgXCIkXCI7XG4gICAgICAgIHZhciBvbkdsb2JhbE1lc3NhZ2UgPSBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgaWYgKGV2ZW50LnNvdXJjZSA9PT0gZ2xvYmFsICYmXG4gICAgICAgICAgICAgICAgdHlwZW9mIGV2ZW50LmRhdGEgPT09IFwic3RyaW5nXCIgJiZcbiAgICAgICAgICAgICAgICBldmVudC5kYXRhLmluZGV4T2YobWVzc2FnZVByZWZpeCkgPT09IDApIHtcbiAgICAgICAgICAgICAgICBydW5JZlByZXNlbnQoK2V2ZW50LmRhdGEuc2xpY2UobWVzc2FnZVByZWZpeC5sZW5ndGgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBpZiAoZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIpIHtcbiAgICAgICAgICAgIGdsb2JhbC5hZGRFdmVudExpc3RlbmVyKFwibWVzc2FnZVwiLCBvbkdsb2JhbE1lc3NhZ2UsIGZhbHNlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGdsb2JhbC5hdHRhY2hFdmVudChcIm9ubWVzc2FnZVwiLCBvbkdsb2JhbE1lc3NhZ2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVnaXN0ZXJJbW1lZGlhdGUgPSBmdW5jdGlvbihoYW5kbGUpIHtcbiAgICAgICAgICAgIGdsb2JhbC5wb3N0TWVzc2FnZShtZXNzYWdlUHJlZml4ICsgaGFuZGxlLCBcIipcIik7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5zdGFsbE1lc3NhZ2VDaGFubmVsSW1wbGVtZW50YXRpb24oKSB7XG4gICAgICAgIHZhciBjaGFubmVsID0gbmV3IE1lc3NhZ2VDaGFubmVsKCk7XG4gICAgICAgIGNoYW5uZWwucG9ydDEub25tZXNzYWdlID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICAgIHZhciBoYW5kbGUgPSBldmVudC5kYXRhO1xuICAgICAgICAgICAgcnVuSWZQcmVzZW50KGhhbmRsZSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmVnaXN0ZXJJbW1lZGlhdGUgPSBmdW5jdGlvbihoYW5kbGUpIHtcbiAgICAgICAgICAgIGNoYW5uZWwucG9ydDIucG9zdE1lc3NhZ2UoaGFuZGxlKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnN0YWxsUmVhZHlTdGF0ZUNoYW5nZUltcGxlbWVudGF0aW9uKCkge1xuICAgICAgICB2YXIgaHRtbCA9IGRvYy5kb2N1bWVudEVsZW1lbnQ7XG4gICAgICAgIHJlZ2lzdGVySW1tZWRpYXRlID0gZnVuY3Rpb24oaGFuZGxlKSB7XG4gICAgICAgICAgICAvLyBDcmVhdGUgYSA8c2NyaXB0PiBlbGVtZW50OyBpdHMgcmVhZHlzdGF0ZWNoYW5nZSBldmVudCB3aWxsIGJlIGZpcmVkIGFzeW5jaHJvbm91c2x5IG9uY2UgaXQgaXMgaW5zZXJ0ZWRcbiAgICAgICAgICAgIC8vIGludG8gdGhlIGRvY3VtZW50LiBEbyBzbywgdGh1cyBxdWV1aW5nIHVwIHRoZSB0YXNrLiBSZW1lbWJlciB0byBjbGVhbiB1cCBvbmNlIGl0J3MgYmVlbiBjYWxsZWQuXG4gICAgICAgICAgICB2YXIgc2NyaXB0ID0gZG9jLmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIik7XG4gICAgICAgICAgICBzY3JpcHQub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJ1bklmUHJlc2VudChoYW5kbGUpO1xuICAgICAgICAgICAgICAgIHNjcmlwdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBudWxsO1xuICAgICAgICAgICAgICAgIGh0bWwucmVtb3ZlQ2hpbGQoc2NyaXB0KTtcbiAgICAgICAgICAgICAgICBzY3JpcHQgPSBudWxsO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGh0bWwuYXBwZW5kQ2hpbGQoc2NyaXB0KTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnN0YWxsU2V0VGltZW91dEltcGxlbWVudGF0aW9uKCkge1xuICAgICAgICByZWdpc3RlckltbWVkaWF0ZSA9IGZ1bmN0aW9uKGhhbmRsZSkge1xuICAgICAgICAgICAgc2V0VGltZW91dChydW5JZlByZXNlbnQsIDAsIGhhbmRsZSk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gSWYgc3VwcG9ydGVkLCB3ZSBzaG91bGQgYXR0YWNoIHRvIHRoZSBwcm90b3R5cGUgb2YgZ2xvYmFsLCBzaW5jZSB0aGF0IGlzIHdoZXJlIHNldFRpbWVvdXQgZXQgYWwuIGxpdmUuXG4gICAgdmFyIGF0dGFjaFRvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mICYmIE9iamVjdC5nZXRQcm90b3R5cGVPZihnbG9iYWwpO1xuICAgIGF0dGFjaFRvID0gYXR0YWNoVG8gJiYgYXR0YWNoVG8uc2V0VGltZW91dCA/IGF0dGFjaFRvIDogZ2xvYmFsO1xuXG4gICAgLy8gRG9uJ3QgZ2V0IGZvb2xlZCBieSBlLmcuIGJyb3dzZXJpZnkgZW52aXJvbm1lbnRzLlxuICAgIGlmICh7fS50b1N0cmluZy5jYWxsKGdsb2JhbC5wcm9jZXNzKSA9PT0gXCJbb2JqZWN0IHByb2Nlc3NdXCIpIHtcbiAgICAgICAgLy8gRm9yIE5vZGUuanMgYmVmb3JlIDAuOVxuICAgICAgICBpbnN0YWxsTmV4dFRpY2tJbXBsZW1lbnRhdGlvbigpO1xuXG4gICAgfSBlbHNlIGlmIChjYW5Vc2VQb3N0TWVzc2FnZSgpKSB7XG4gICAgICAgIC8vIEZvciBub24tSUUxMCBtb2Rlcm4gYnJvd3NlcnNcbiAgICAgICAgaW5zdGFsbFBvc3RNZXNzYWdlSW1wbGVtZW50YXRpb24oKTtcblxuICAgIH0gZWxzZSBpZiAoZ2xvYmFsLk1lc3NhZ2VDaGFubmVsKSB7XG4gICAgICAgIC8vIEZvciB3ZWIgd29ya2Vycywgd2hlcmUgc3VwcG9ydGVkXG4gICAgICAgIGluc3RhbGxNZXNzYWdlQ2hhbm5lbEltcGxlbWVudGF0aW9uKCk7XG5cbiAgICB9IGVsc2UgaWYgKGRvYyAmJiBcIm9ucmVhZHlzdGF0ZWNoYW5nZVwiIGluIGRvYy5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIpKSB7XG4gICAgICAgIC8vIEZvciBJRSA24oCTOFxuICAgICAgICBpbnN0YWxsUmVhZHlTdGF0ZUNoYW5nZUltcGxlbWVudGF0aW9uKCk7XG5cbiAgICB9IGVsc2Uge1xuICAgICAgICAvLyBGb3Igb2xkZXIgYnJvd3NlcnNcbiAgICAgICAgaW5zdGFsbFNldFRpbWVvdXRJbXBsZW1lbnRhdGlvbigpO1xuICAgIH1cblxuICAgIGF0dGFjaFRvLnNldEltbWVkaWF0ZSA9IHNldEltbWVkaWF0ZTtcbiAgICBhdHRhY2hUby5jbGVhckltbWVkaWF0ZSA9IGNsZWFySW1tZWRpYXRlO1xufSh0eXBlb2Ygc2VsZiA9PT0gXCJ1bmRlZmluZWRcIiA/IHR5cGVvZiBnbG9iYWwgPT09IFwidW5kZWZpbmVkXCIgPyB0aGlzIDogZ2xvYmFsIDogc2VsZikpO1xuIiwiLy8gc2hpbSBmb3IgdXNpbmcgcHJvY2VzcyBpbiBicm93c2VyXG52YXIgcHJvY2VzcyA9IG1vZHVsZS5leHBvcnRzID0ge307XG5cbi8vIGNhY2hlZCBmcm9tIHdoYXRldmVyIGdsb2JhbCBpcyBwcmVzZW50IHNvIHRoYXQgdGVzdCBydW5uZXJzIHRoYXQgc3R1YiBpdFxuLy8gZG9uJ3QgYnJlYWsgdGhpbmdzLiAgQnV0IHdlIG5lZWQgdG8gd3JhcCBpdCBpbiBhIHRyeSBjYXRjaCBpbiBjYXNlIGl0IGlzXG4vLyB3cmFwcGVkIGluIHN0cmljdCBtb2RlIGNvZGUgd2hpY2ggZG9lc24ndCBkZWZpbmUgYW55IGdsb2JhbHMuICBJdCdzIGluc2lkZSBhXG4vLyBmdW5jdGlvbiBiZWNhdXNlIHRyeS9jYXRjaGVzIGRlb3B0aW1pemUgaW4gY2VydGFpbiBlbmdpbmVzLlxuXG52YXIgY2FjaGVkU2V0VGltZW91dDtcbnZhciBjYWNoZWRDbGVhclRpbWVvdXQ7XG5cbmZ1bmN0aW9uIGRlZmF1bHRTZXRUaW1vdXQoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdzZXRUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG5mdW5jdGlvbiBkZWZhdWx0Q2xlYXJUaW1lb3V0ICgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2NsZWFyVGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuKGZ1bmN0aW9uICgpIHtcbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIHNldFRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIGNsZWFyVGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICB9XG59ICgpKVxuZnVuY3Rpb24gcnVuVGltZW91dChmdW4pIHtcbiAgICBpZiAoY2FjaGVkU2V0VGltZW91dCA9PT0gc2V0VGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgLy8gaWYgc2V0VGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZFNldFRpbWVvdXQgPT09IGRlZmF1bHRTZXRUaW1vdXQgfHwgIWNhY2hlZFNldFRpbWVvdXQpICYmIHNldFRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9IGNhdGNoKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0IHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKG51bGwsIGZ1biwgMCk7XG4gICAgICAgIH0gY2F0Y2goZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvclxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbCh0aGlzLCBmdW4sIDApO1xuICAgICAgICB9XG4gICAgfVxuXG5cbn1cbmZ1bmN0aW9uIHJ1bkNsZWFyVGltZW91dChtYXJrZXIpIHtcbiAgICBpZiAoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgLy8gaWYgY2xlYXJUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBkZWZhdWx0Q2xlYXJUaW1lb3V0IHx8ICFjYWNoZWRDbGVhclRpbWVvdXQpICYmIGNsZWFyVGltZW91dCkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfSBjYXRjaCAoZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgIHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwobnVsbCwgbWFya2VyKTtcbiAgICAgICAgfSBjYXRjaCAoZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvci5cbiAgICAgICAgICAgIC8vIFNvbWUgdmVyc2lvbnMgb2YgSS5FLiBoYXZlIGRpZmZlcmVudCBydWxlcyBmb3IgY2xlYXJUaW1lb3V0IHZzIHNldFRpbWVvdXRcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbCh0aGlzLCBtYXJrZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG5cblxufVxudmFyIHF1ZXVlID0gW107XG52YXIgZHJhaW5pbmcgPSBmYWxzZTtcbnZhciBjdXJyZW50UXVldWU7XG52YXIgcXVldWVJbmRleCA9IC0xO1xuXG5mdW5jdGlvbiBjbGVhblVwTmV4dFRpY2soKSB7XG4gICAgaWYgKCFkcmFpbmluZyB8fCAhY3VycmVudFF1ZXVlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBpZiAoY3VycmVudFF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBxdWV1ZSA9IGN1cnJlbnRRdWV1ZS5jb25jYXQocXVldWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICB9XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBkcmFpblF1ZXVlKCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBkcmFpblF1ZXVlKCkge1xuICAgIGlmIChkcmFpbmluZykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciB0aW1lb3V0ID0gcnVuVGltZW91dChjbGVhblVwTmV4dFRpY2spO1xuICAgIGRyYWluaW5nID0gdHJ1ZTtcblxuICAgIHZhciBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgd2hpbGUobGVuKSB7XG4gICAgICAgIGN1cnJlbnRRdWV1ZSA9IHF1ZXVlO1xuICAgICAgICBxdWV1ZSA9IFtdO1xuICAgICAgICB3aGlsZSAoKytxdWV1ZUluZGV4IDwgbGVuKSB7XG4gICAgICAgICAgICBpZiAoY3VycmVudFF1ZXVlKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudFF1ZXVlW3F1ZXVlSW5kZXhdLnJ1bigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICAgICAgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIH1cbiAgICBjdXJyZW50UXVldWUgPSBudWxsO1xuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgcnVuQ2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xufVxuXG5wcm9jZXNzLm5leHRUaWNrID0gZnVuY3Rpb24gKGZ1bikge1xuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHF1ZXVlLnB1c2gobmV3IEl0ZW0oZnVuLCBhcmdzKSk7XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCA9PT0gMSAmJiAhZHJhaW5pbmcpIHtcbiAgICAgICAgcnVuVGltZW91dChkcmFpblF1ZXVlKTtcbiAgICB9XG59O1xuXG4vLyB2OCBsaWtlcyBwcmVkaWN0aWJsZSBvYmplY3RzXG5mdW5jdGlvbiBJdGVtKGZ1biwgYXJyYXkpIHtcbiAgICB0aGlzLmZ1biA9IGZ1bjtcbiAgICB0aGlzLmFycmF5ID0gYXJyYXk7XG59XG5JdGVtLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5mdW4uYXBwbHkobnVsbCwgdGhpcy5hcnJheSk7XG59O1xucHJvY2Vzcy50aXRsZSA9ICdicm93c2VyJztcbnByb2Nlc3MuYnJvd3NlciA9IHRydWU7XG5wcm9jZXNzLmVudiA9IHt9O1xucHJvY2Vzcy5hcmd2ID0gW107XG5wcm9jZXNzLnZlcnNpb24gPSAnJzsgLy8gZW1wdHkgc3RyaW5nIHRvIGF2b2lkIHJlZ2V4cCBpc3N1ZXNcbnByb2Nlc3MudmVyc2lvbnMgPSB7fTtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbnByb2Nlc3Mub24gPSBub29wO1xucHJvY2Vzcy5hZGRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLm9uY2UgPSBub29wO1xucHJvY2Vzcy5vZmYgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUFsbExpc3RlbmVycyA9IG5vb3A7XG5wcm9jZXNzLmVtaXQgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kT25jZUxpc3RlbmVyID0gbm9vcDtcblxucHJvY2Vzcy5saXN0ZW5lcnMgPSBmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gW10gfVxuXG5wcm9jZXNzLmJpbmRpbmcgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5cbnByb2Nlc3MuY3dkID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gJy8nIH07XG5wcm9jZXNzLmNoZGlyID0gZnVuY3Rpb24gKGRpcikge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5jaGRpciBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xucHJvY2Vzcy51bWFzayA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gMDsgfTtcbiIsIi8qIGVzbGludC1kaXNhYmxlIGNhbWVsY2FzZSwgbm8tdW5kZXJzY29yZS1kYW5nbGUsIG5vLXVzZS1iZWZvcmUtZGVmaW5lICovXG5pbXBvcnQge1xuXHRmaW5kQW5jZXN0b3JCeUNsYXNzLFxuXHRlc2NhcGVEb3VibGVRdW90ZXMsXG5cdHJlcGxhY2VHbG9iYWxseSxcblx0ZGVib3VuY2UsXG59IGZyb20gJy4vdXRpbHMvaGVscGVycyc7XG5pbXBvcnQgJ2VsZW1lbnQtY2xvc2VzdCc7XG5pbXBvcnQgJ3Byb21pc2UtcG9seWZpbGwvc3JjL3BvbHlmaWxsJztcbmltcG9ydCAnd2hhdHdnLWZldGNoJztcblxuY29uc3QgeyBlcGFzIH0gPSB3aW5kb3c7XG5cbi8vIEVuc3VyZSB3ZSBoYXZlIGFuIGVuZHBvaW50IFVSTCwgb3Jcbi8vIGVsc2UgdGhpcyBzaG91bGRuJ3QgaGFwcGVuXG5pZiAoZXBhcy5lbmRwb2ludFVybCAmJiBlcGFzLmVuZHBvaW50VXJsICE9PSAnJykge1xuXHRpbml0KCk7XG5cblx0Ly8gUHVibGljYWxseSBleHBvc2UgQVBJXG5cdHdpbmRvdy5lcGFzQVBJID0ge1xuXHRcdGhpZGVBdXRvc3VnZ2VzdEJveCxcblx0XHR1cGRhdGVBdXRvc3VnZ2VzdEJveCxcblx0XHRlc1NlYXJjaCxcblx0XHRidWlsZFNlYXJjaFF1ZXJ5LFxuXHR9O1xufVxuXG4vKipcbiAqIFN1Ym1pdCB0aGUgc2VhcmNoIGZvcm1cbiAqXG4gKiBAcGFyYW0ge05vZGV9IGlucHV0IC0gaW5wdXQgZWxlbWVudFxuICovXG5mdW5jdGlvbiBzdWJtaXRTZWFyY2hGb3JtKGlucHV0KSB7XG5cdGlucHV0LmNsb3Nlc3QoJ2Zvcm0nKS5zdWJtaXQoKTtcbn1cblxuLyoqXG4gKiBTZXQgdGhlIGV4cGFuZGVkIGFyaWEgc3RhdGUgb24gdGhlIGlucHV0XG4gKlxuICogQHBhcmFtIHtib29sZWFufSBoYXZlT3B0aW9ucyAtIHdoZXRoZXIgb3Igbm90IHRoZSBhdXRvc3VnZ2VzdCBsaXN0IGNvbnRhaW5zIHJlc3VsdHNcbiAqIEBwYXJhbSB7Tm9kZX0gaW5wdXQgLSBzZWFyY2ggaW5wdXRcbiAqL1xuZnVuY3Rpb24gdG9nZ2xlSW5wdXRBcmlhKGhhdmVPcHRpb25zLCBpbnB1dCkge1xuXHRpbnB1dC5zZXRBdHRyaWJ1dGUoJ2FyaWEtZXhwYW5kZWQnLCBoYXZlT3B0aW9ucyk7XG59XG5cbi8qKlxuICogU2V0IHRoZSBhY3RpdmUgZGVzY2VuZGFudCBhcmlhIGF0dHJpYnV0ZSBpbnB1dFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBpZCAtIGlkIG9mIHRoZSBjdXJyZW50bHkgc2VsZWN0ZWQgZWxlbWVudFxuICogQHBhcmFtIHtOb2RlfSBpbnB1dCAtIHNlYXJjaCBpbnB1dFxuICovXG5mdW5jdGlvbiBzZXRJbnB1dEFjdGl2ZURlc2NlbmRhbnQoaWQsIGlucHV0KSB7XG5cdGlucHV0LnNldEF0dHJpYnV0ZSgnYXJpYS1hY3RpdmVkZXNjZW5kYW50JywgaWQpO1xufVxuXG4vKipcbiAqIFRha2Ugc2VsZWN0ZWQgaXRlbSBhbmQgZmlsbCB0aGUgc2VhcmNoIGlucHV0XG4gKlxuICogQHBhcmFtIHtOb2RlfSBpbnB1dCAtIGlucHV0IGVsZW1lbnRcbiAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0IC0gbmV3IGlucHV0IHZhbHVlXG4gKi9cbmZ1bmN0aW9uIHNlbGVjdEF1dG9zdWdnZXN0SXRlbShpbnB1dCwgdGV4dCkge1xuXHRpbnB1dC52YWx1ZSA9IHRleHQ7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbn1cblxuLyoqXG4gKiBGaXJlcyBldmVudHMgd2hlbiBhdXRvc3VnZ2VzdCByZXN1bHRzIGFyZSBjbGlja2VkLFxuICogYW5kIGlmIEdBIHRyYWNraW5nIGlzIGFjdGl2YXRlZFxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBkZXRhaWwgLSB2YWx1ZSB0byBwYXNzIG9uIHRvIHRoZSBDdXN0b20gRXZlbnRcbiAqL1xuZnVuY3Rpb24gdHJpZ2dlckF1dG9zdWdnZXN0RXZlbnQoZGV0YWlsKSB7XG5cdGNvbnN0IGV2ZW50ID0gbmV3IEN1c3RvbUV2ZW50KCdlcC1hdXRvc3VnZ2VzdC1jbGljaycsIHsgZGV0YWlsIH0pO1xuXHR3aW5kb3cuZGlzcGF0Y2hFdmVudChldmVudCk7XG5cblx0aWYgKFxuXHRcdGRldGFpbC5zZWFyY2hUZXJtICYmXG5cdFx0cGFyc2VJbnQoZXBhcy50cmlnZ2VyQW5hbHl0aWNzLCAxMCkgPT09IDEgJiZcblx0XHR0eXBlb2YgZ3RhZyA9PT0gJ2Z1bmN0aW9uJ1xuXHQpIHtcblx0XHRjb25zdCBhY3Rpb24gPSBgY2xpY2sgLSAke2RldGFpbC5zZWFyY2hUZXJtfWA7XG5cdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG5cdFx0Z3RhZygnZXZlbnQnLCBhY3Rpb24sIHtcblx0XHRcdGV2ZW50X2NhdGVnb3J5OiAnRVAgOjogQXV0b3N1Z2dlc3QnLFxuXHRcdFx0ZXZlbnRfbGFiZWw6IGRldGFpbC51cmwsXG5cdFx0XHR0cmFuc3BvcnRfdHlwZTogJ2JlYWNvbicsXG5cdFx0fSk7XG5cdH1cbn1cblxuLyoqXG4gKiBOYXZpZ2F0ZSB0byB0aGUgc2VsZWN0ZWQgaXRlbSwgYW5kIHByb3ZpZGVzXG4gKiBldmVudCBob29rIGZvciBKUyBjdXN0b21pemF0aW9ucywgbGlrZSBHQVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBzZWFyY2hUZXJtIC0gdXNlciBkZWZpbmVkIHNlYXJjaCB0ZXJtXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIC0gcG9zdCB1cmwgZnJvbSBkYXRhc2V0IGluIHNlYXJjaCByZXN1bHRcbiAqL1xuZnVuY3Rpb24gZ29Ub0F1dG9zdWdnZXN0SXRlbShzZWFyY2hUZXJtLCB1cmwpIHtcblx0Y29uc3QgZGV0YWlsID0ge1xuXHRcdHNlYXJjaFRlcm0sXG5cdFx0dXJsLFxuXHR9O1xuXG5cdHRyaWdnZXJBdXRvc3VnZ2VzdEV2ZW50KGRldGFpbCk7XG5cdHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gdXJsO1xufVxuXG4vKipcbiAqIFJlc3BvbmQgdG8gYW4gaXRlbSBzZWxlY3Rpb24gYmFzZWQgb24gdGhlIHByZWRlZmluZWQgYmVoYXZpb3IuXG4gKiBJZiBlcGFzLmFjdGlvbiBpcyBzZXQgdG8gXCJuYXZpZ2F0ZVwiICh0aGUgZGVmYXVsdCksIHJlZGlyZWN0cyB0aGUgYnJvd3NlciB0byB0aGUgVVJMIG9mIHRoZSBzZWxlY3RlZCBpdGVtXG4gKiBJZiBlcGFzLmFjdGlvbiBpcyBzZXQgdG8gYW55IG90aGVyIHZhbHVlIChzdWNoIGFzIFwic2VhcmNoXCIpLCBmaWxsIGluIHRoZSB2YWx1ZSBhbmQgcGVyZm9ybSB0aGUgc2VhcmNoXG4gKlxuICogQHBhcmFtIHtOb2RlfSBpbnB1dCAtIHNlYXJjaCBpbnB1dFxuICogQHBhcmFtIHtOb2RlfSBlbGVtZW50IC0gc2VhcmNoIHRlcm0gcmVzdWx0IGl0ZW1cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gY2FsbHMgdGhlIHN1Ym1pdFNlYXJjaEZvcm0gZnVuY3Rpb25cbiAqL1xuZnVuY3Rpb24gc2VsZWN0SXRlbShpbnB1dCwgZWxlbWVudCkge1xuXHRpZiAoZXBhcy5hY3Rpb24gPT09ICduYXZpZ2F0ZScpIHtcblx0XHRyZXR1cm4gZ29Ub0F1dG9zdWdnZXN0SXRlbShpbnB1dC52YWx1ZSwgZWxlbWVudC5kYXRhc2V0LnVybCk7XG5cdH1cblxuXHRzZWxlY3RBdXRvc3VnZ2VzdEl0ZW0oaW5wdXQsIGVsZW1lbnQuaW5uZXJUZXh0KTtcblx0cmV0dXJuIHN1Ym1pdFNlYXJjaEZvcm0oaW5wdXQpO1xufVxuXG4vKipcbiAqIEJ1aWxkIHRoZSBzZWFyY2ggcXVlcnkgZnJvbSB0aGUgc2VhcmNoIHRleHQgLSB0aGUgcXVlcnkgaXMgZ2VuZXJhdGVkIGluIFBIUFxuICogYW5kIHBhc3NlZCBpbnRvIHRoZSBmcm9udCBlbmQgYXMgd2luZG93LmVwYXMgPSB7IFwicXVlcnkuLi5cbiAqXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBqc29uIHN0cmluZ1xuICovXG5mdW5jdGlvbiBnZXRKc29uUXVlcnkoKSB7XG5cdGlmICh0eXBlb2Ygd2luZG93LmVwYXMgPT09ICd1bmRlZmluZWQnKSB7XG5cdFx0Y29uc3QgZXJyb3IgPSAnTm8gZXBhcyBvYmplY3QgZGVmaW5lZCc7XG5cblx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuXHRcdGNvbnNvbGUud2FybihlcnJvcik7XG5cdFx0cmV0dXJuIHsgZXJyb3IgfTtcblx0fVxuXG5cdHJldHVybiB3aW5kb3cuZXBhcztcbn1cblxuLyoqXG4gKiBCdWlsZCB0aGUgc2VhcmNoIHF1ZXJ5IGZyb20gdGhlIHNlYXJjaCB0ZXh0XG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHNlYXJjaFRleHQgLSB1c2VyIHNlYXJjaCBzdHJpbmdcbiAqIEBwYXJhbSB7c3RyaW5nfSBwbGFjZWhvbGRlciAtIHBsYWNlaG9sZGVyIHRleHQgdG8gcmVwbGFjZVxuICogQHBhcmFtIHtvYmplY3R9IHF1ZXJ5IC0gZGVzcnVjdHVyZWQganNvbiBxdWVyeSBzdHJpbmdcbiAqIEByZXR1cm5zIHtzdHJpbmd9IGpzb24gcmVwcmVzZW50YXRpb24gb2Ygc2VhcmNoIHF1ZXJ5XG4gKi9cbmZ1bmN0aW9uIGJ1aWxkU2VhcmNoUXVlcnkoc2VhcmNoVGV4dCwgcGxhY2Vob2xkZXIsIHsgcXVlcnkgfSkge1xuXHRjb25zdCBuZXdRdWVyeSA9IHJlcGxhY2VHbG9iYWxseShxdWVyeSwgcGxhY2Vob2xkZXIsIHNlYXJjaFRleHQpO1xuXHRyZXR1cm4gbmV3UXVlcnk7XG59XG5cbi8qKlxuICogQnVpbGQgdGhlIGFqYXggcmVxdWVzdFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBxdWVyeSAtIGpzb24gc3RyaW5nXG4gKiBAcGFyYW0ge3N0cmluZ30gc2VhcmNoVGVybSAtIHVzZXIgc2VhcmNoIHRlcm1cbiAqIEByZXR1cm5zIHtvYmplY3R9IEFKQVggb2JqZWN0IHJlcXVlc3RcbiAqL1xuYXN5bmMgZnVuY3Rpb24gZXNTZWFyY2gocXVlcnksIHNlYXJjaFRlcm0pIHtcblx0Y29uc3QgZmV0Y2hDb25maWcgPSB7XG5cdFx0Ym9keTogcXVlcnksXG5cdFx0bWV0aG9kOiAnUE9TVCcsXG5cdFx0bW9kZTogJ2NvcnMnLFxuXHRcdGhlYWRlcnM6IHtcblx0XHRcdCdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbjsgY2hhcnNldD11dGYtOCcsXG5cdFx0fSxcblx0fTtcblxuXHQvLyBvbmx5IGFwcGxpZXMgaGVhZGVycyBpZiB1c2luZyBlcC5pbyBlbmRwb2ludFxuXHRpZiAoZXBhcy5hZGRTZWFyY2hUZXJtSGVhZGVyKSB7XG5cdFx0ZmV0Y2hDb25maWcuaGVhZGVyc1snRVAtU2VhcmNoLVRlcm0nXSA9IHNlYXJjaFRlcm07XG5cdH1cblxuXHR0cnkge1xuXHRcdGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgd2luZG93LmZldGNoKGVwYXMuZW5kcG9pbnRVcmwsIGZldGNoQ29uZmlnKTtcblx0XHRpZiAoIXJlc3BvbnNlLm9rKSB7XG5cdFx0XHR0aHJvdyBFcnJvcihyZXNwb25zZS5zdGF0dXNUZXh0KTtcblx0XHR9XG5cblx0XHRjb25zdCBkYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuXG5cdFx0Ly8gYWxsb3cgZm9yIGZpbHRlcmVkIGRhdGEgYmVmb3JlIHJldHVybmluZyBpdCB0b1xuXHRcdC8vIGJlIG91dHB1dCBvbiB0aGUgZnJvbnQgZW5kXG5cdFx0aWYgKHR5cGVvZiB3aW5kb3cuZXBEYXRhRmlsdGVyICE9PSAndW5kZWZpbmVkJykge1xuXHRcdFx0cmV0dXJuIHdpbmRvdy5lcERhdGFGaWx0ZXIoZGF0YSwgc2VhcmNoVGVybSk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGRhdGE7XG5cdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcblx0XHRjb25zb2xlLmVycm9yKGVycm9yKTtcblx0XHRyZXR1cm4gZXJyb3I7XG5cdH1cbn1cblxuLyoqXG4gKiBVcGRhdGUgdGhlIGF1dG8gc3VnZ2VzdCBib3ggd2l0aCBuZXcgb3B0aW9ucyBvciBoaWRlIGlmIG5vbmVcbiAqXG4gKiBAcGFyYW0ge0FycmF5fSBvcHRpb25zIC0gZm9ybWF0dGVkIHJlc3VsdHNcbiAqIEBwYXJhbSB7c3RyaW5nfSBpbnB1dCAtIHNlYXJjaCBzdHJpbmdcbiAqIEByZXR1cm5zIHtib29sZWFufSByZXR1cm4gdHJ1ZVxuICovXG5mdW5jdGlvbiB1cGRhdGVBdXRvc3VnZ2VzdEJveChvcHRpb25zLCBpbnB1dCkge1xuXHRsZXQgaTtcblx0bGV0IGl0ZW1TdHJpbmcgPSAnJztcblxuXHQvLyBnZXQgdGhlIHNlYXJjaCB0ZXJtIGZvciB1c2UgbGF0ZXIgb25cblx0Y29uc3QgeyB2YWx1ZSB9ID0gaW5wdXQ7XG5cdGNvbnN0IGNvbnRhaW5lciA9IGZpbmRBbmNlc3RvckJ5Q2xhc3MoaW5wdXQsICdlcC1hdXRvc3VnZ2VzdC1jb250YWluZXInKTtcblx0Y29uc3QgcmVzdWx0c0NvbnRhaW5lciA9IGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCcuZXAtYXV0b3N1Z2dlc3QnKTtcblx0Y29uc3Qgc3VnZ2VzdExpc3QgPSByZXN1bHRzQ29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJy5hdXRvc3VnZ2VzdC1saXN0Jyk7XG5cblx0Ly8gZW1wdHkgdGhlIHRoZSBsaXN0IG9mIGFsbCBjaGlsZCBub2Rlc1xuXHR3aGlsZSAoc3VnZ2VzdExpc3QuZmlyc3RDaGlsZCkge1xuXHRcdHN1Z2dlc3RMaXN0LnJlbW92ZUNoaWxkKHN1Z2dlc3RMaXN0LmZpcnN0Q2hpbGQpO1xuXHR9XG5cblx0aWYgKG9wdGlvbnMubGVuZ3RoID4gMCkge1xuXHRcdHJlc3VsdHNDb250YWluZXIuc3R5bGUgPSAnZGlzcGxheTogYmxvY2s7Jztcblx0fSBlbHNlIHtcblx0XHRyZXN1bHRzQ29udGFpbmVyLnN0eWxlID0gJ2Rpc3BsYXk6IG5vbmU7Jztcblx0fVxuXG5cdC8vIGFudGljaXBhdGluZyB0aGUgZnV0dXJlLi4uIGEgc2V0dGluZyB3aGVyZSB3ZSBjb25maWd1cmVcblx0Ly8gYSBsaW1pdCBvZiByZXN1bHRzIHRvIHNob3csIGFuZCBvcHRpb25hbGx5IGFwcGVuZCBhXG5cdC8vIGxpbmsgdG8gXCJhbGwgcmVzdWx0c1wiIG9yIHNvbWV0aGluZyBvZiB0aGF0IG5hdHVyZVxuXHRjb25zdCByZXN1bHRzTGltaXQgPSBvcHRpb25zLmxlbmd0aDtcblxuXHQvLyBjcmVhdGUgbWFya3VwIGZvciBsaXN0IGl0ZW1zXG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuXHRmb3IgKCBpID0gMDsgcmVzdWx0c0xpbWl0ID4gaTsgKytpICkge1xuXHRcdGNvbnN0IHsgdGV4dCwgdXJsIH0gPSBvcHRpb25zW2ldO1xuXHRcdGNvbnN0IGVzY2FwZWRUZXh0ID0gZXNjYXBlRG91YmxlUXVvdGVzKHRleHQpO1xuXG5cdFx0Y29uc3Qgc2VhcmNoUGFydHMgPSB2YWx1ZS50cmltKCkuc3BsaXQoJyAnKTtcblx0XHRsZXQgcmVzdWx0c1RleHQgPSBlc2NhcGVkVGV4dDtcblx0XHQvLyB1c2VzIHNvbWUgcmVnZXggbWFnaWMgdG8gbWF0Y2ggdXBwZXIvbG93ZXIvY2FwaXRhbCBjYXNlXG5cdFx0c2VhcmNoUGFydHMuZm9yRWFjaCgod29yZCkgPT4ge1xuXHRcdFx0Y29uc3QgcmVnZXggPSBuZXcgUmVnRXhwKGAoJHt3b3JkLnRyaW0oKX0pYCwgJ2dpJyk7XG5cdFx0XHRpZiAod29yZC5sZW5ndGggPiAxKSB7XG5cdFx0XHRcdHJlc3VsdHNUZXh0ID0gcmVzdWx0c1RleHQucmVwbGFjZShcblx0XHRcdFx0XHRyZWdleCxcblx0XHRcdFx0XHRgPHNwYW4gY2xhc3M9XCJlcC1hdXRvc3VnZ2VzdC1oaWdobGlnaHRcIj4kMTwvc3Bhbj5gLFxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0aXRlbVN0cmluZyArPSBgPGxpIGNsYXNzPVwiYXV0b3N1Z2dlc3QtaXRlbVwiIHJvbGU9XCJvcHRpb25cIiBhcmlhLXNlbGVjdGVkPVwiZmFsc2VcIiBpZD1cImF1dG9zdWdnZXN0LW9wdGlvbi0ke2l9XCI+XG5cdFx0XHRcdDxhIGhyZWY9XCIke3VybH1cIiBjbGFzcz1cImF1dG9zdWdnZXN0LWxpbmtcIiBkYXRhLXNlYXJjaD1cIiR7ZXNjYXBlZFRleHR9XCIgZGF0YS11cmw9XCIke3VybH1cIj5cblx0XHRcdFx0XHQke3Jlc3VsdHNUZXh0fVxuXHRcdFx0XHQ8L2E+XG5cdFx0XHQ8L2xpPmA7XG5cdH1cblxuXHQvLyBhcHBlbmQgbGlzdCBpdGVtcyB0byB0aGUgbGlzdFxuXHRzdWdnZXN0TGlzdC5pbm5lckhUTUwgPSBpdGVtU3RyaW5nO1xuXG5cdGNvbnN0IGF1dG9zdWdnZXN0SXRlbXMgPSBBcnJheS5mcm9tKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5hdXRvc3VnZ2VzdC1saW5rJykpO1xuXG5cdHN1Z2dlc3RMaXN0LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGV2ZW50KSA9PiB7XG5cdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRjb25zdCB7IHNyY0VsZW1lbnQgfSA9IGV2ZW50O1xuXG5cdFx0aWYgKGF1dG9zdWdnZXN0SXRlbXMuaW5jbHVkZXMoc3JjRWxlbWVudCkpIHtcblx0XHRcdHNlbGVjdEl0ZW0oaW5wdXQsIHNyY0VsZW1lbnQpO1xuXHRcdH1cblx0fSk7XG5cblx0cmV0dXJuIHRydWU7XG59XG5cbi8qKlxuICogSGlkZSB0aGUgYXV0byBzdWdnZXN0IGJveFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSByZXR1cm5zIHRydWVcbiAqL1xuZnVuY3Rpb24gaGlkZUF1dG9zdWdnZXN0Qm94KCkge1xuXHRjb25zdCBsaXN0cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5hdXRvc3VnZ2VzdC1saXN0Jyk7XG5cdGNvbnN0IGNvbnRhaW5lcnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuZXAtYXV0b3N1Z2dlc3QnKTtcblxuXHQvLyBlbXB0eSBhbGwgRVAgcmVzdWx0cyBsaXN0c1xuXHRsaXN0cy5mb3JFYWNoKChsaXN0KSA9PiB7XG5cdFx0d2hpbGUgKGxpc3QuZmlyc3RDaGlsZCkge1xuXHRcdFx0bGlzdC5yZW1vdmVDaGlsZChsaXN0LmZpcnN0Q2hpbGQpO1xuXHRcdH1cblx0fSk7XG5cblx0Ly8gaGlkZSBhbGwgRVAgcmVzdWx0cyBjb250YWluZXJzXG5cdGNvbnRhaW5lcnMuZm9yRWFjaCgoY29udGFpbmVyKSA9PiB7XG5cdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG5cdFx0Y29udGFpbmVyLnN0eWxlID0gJ2Rpc3BsYXk6IG5vbmU7Jztcblx0fSk7XG5cblx0cmV0dXJuIHRydWU7XG59XG5cbi8qKlxuICogQ2hlY2tzIGZvciBhbnkgbWFudWFsbHkgb3JkZXJlZCBwb3N0cyBhbmQgcHV0cyB0aGVtIGluIHRoZSBjb3JyZWN0IHBsYWNlXG4gKlxuICogQHBhcmFtIHtBcnJheX0gaGl0cyAtIEVTIHJlc3VsdHNcbiAqIEBwYXJhbSB7c3RyaW5nfSBzZWFyY2hUZXJtIC0gdXNlciBzZWFyY2ggdGVybVxuICogQHJldHVybnMge29iamVjdH0gZm9ybWF0dGVkIGhpdHNcbiAqL1xuZnVuY3Rpb24gY2hlY2tGb3JPcmRlcmVkUG9zdHMoaGl0cywgc2VhcmNoVGVybSkge1xuXHRjb25zdCB0b0luc2VydCA9IHt9O1xuXHRjb25zdCB0YXhOYW1lID0gJ2VwX2N1c3RvbV9yZXN1bHQnO1xuXHRjb25zdCBsb3dlckNhc2VTZWFyY2hUZXJtID0gc2VhcmNoVGVybS50b0xvd2VyQ2FzZSgpO1xuXG5cdGNvbnN0IGZpbHRlcmVkSGl0cyA9IGhpdHMuZmlsdGVyKChoaXQpID0+IHtcblx0XHQvLyBTaG91bGQgd2UgcmV0YWluIHRoaXMgaGl0IGluIGl0cyBjdXJyZW50IHBvc2l0aW9uP1xuXHRcdGxldCByZXRhaW4gPSB0cnVlO1xuXG5cdFx0aWYgKHVuZGVmaW5lZCAhPT0gaGl0Ll9zb3VyY2UudGVybXMgJiYgdW5kZWZpbmVkICE9PSBoaXQuX3NvdXJjZS50ZXJtc1t0YXhOYW1lXSkge1xuXHRcdFx0aGl0Ll9zb3VyY2UudGVybXNbdGF4TmFtZV0uZm9yRWFjaCgoY3VycmVudFRlcm0pID0+IHtcblx0XHRcdFx0aWYgKGN1cnJlbnRUZXJtLm5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbG93ZXJDYXNlU2VhcmNoVGVybSkge1xuXHRcdFx0XHRcdHRvSW5zZXJ0W2N1cnJlbnRUZXJtLnRlcm1fb3JkZXJdID0gaGl0O1xuXG5cdFx0XHRcdFx0cmV0YWluID0gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdHJldHVybiByZXRhaW47XG5cdH0pO1xuXG5cdGNvbnN0IG9yZGVyZWRJbnNlcnRzID0ge307XG5cblx0T2JqZWN0LmtleXModG9JbnNlcnQpXG5cdFx0LnNvcnQoKVxuXHRcdC5mb3JFYWNoKChrZXkpID0+IHtcblx0XHRcdG9yZGVyZWRJbnNlcnRzW2tleV0gPSB0b0luc2VydFtrZXldO1xuXHRcdH0pO1xuXG5cdGlmIChPYmplY3Qua2V5cyhvcmRlcmVkSW5zZXJ0cykubGVuZ3RoID4gMCkge1xuXHRcdE9iamVjdC5rZXlzKG9yZGVyZWRJbnNlcnRzKS5mb3JFYWNoKChrZXkpID0+IHtcblx0XHRcdGNvbnN0IGluc2VydEl0ZW0gPSBvcmRlcmVkSW5zZXJ0c1trZXldO1xuXG5cdFx0XHRmaWx0ZXJlZEhpdHMuc3BsaWNlKGtleSAtIDEsIDAsIGluc2VydEl0ZW0pO1xuXHRcdH0pO1xuXHR9XG5cblx0cmV0dXJuIGhpdHM7XG59XG5cbi8qKlxuICogaW5pdCBtZXRob2QgY2FsbGVkIGlmIHRoZSBlcGFzIGVuZHBvaW50IGlzIGRlZmluZWRcbiAqL1xuZnVuY3Rpb24gaW5pdCgpIHtcblx0Y29uc3QgZXBJbnB1dE5vZGVzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcblx0XHRgLmVwLWF1dG9zdWdnZXN0LCBpbnB1dFt0eXBlPVwic2VhcmNoXCJdLCAuc2VhcmNoLWZpZWxkLCAke2VwYXMuc2VsZWN0b3J9YCxcblx0KTtcblxuXHQvLyBidWlsZCB0aGUgY29udGFpbmVyIGludG8gd2hpY2ggd2UgcGxhY2UgdGhlIHNlYXJjaCByZXN1bHRzLlxuXHQvLyBUaGVzZSB3aWxsIGJlIGNsb25lZCBsYXRlciBmb3IgZWFjaCBpbnN0YW5jZVxuXHQvLyBvZiBhdXRvc3VnZ2VzdCBpbnB1dHNcblx0Y29uc3QgZXBBdXRvc3VnZ2VzdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuXHRlcEF1dG9zdWdnZXN0LmNsYXNzTGlzdC5hZGQoJ2VwLWF1dG9zdWdnZXN0Jyk7XG5cdGNvbnN0IGF1dG9zdWdnZXN0TGlzdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3VsJyk7XG5cdGF1dG9zdWdnZXN0TGlzdC5jbGFzc0xpc3QuYWRkKCdhdXRvc3VnZ2VzdC1saXN0Jyk7XG5cdGF1dG9zdWdnZXN0TGlzdC5zZXRBdHRyaWJ1dGUoJ3JvbGUnLCAnbGlzdGJveCcpO1xuXHRlcEF1dG9zdWdnZXN0LmFwcGVuZENoaWxkKGF1dG9zdWdnZXN0TGlzdCk7XG5cblx0Ly8gQnVpbGQgdGhlIGF1dG8tc3VnZ2VzdCBjb250YWluZXJzXG5cdC8vIGV4Y2x1ZGluZyB0aGUgZmFjZXQgc2VhcmNoIGZpZWxkXG5cdGNvbnN0IGVwSW5wdXRzID0gQXJyYXkuZnJvbShlcElucHV0Tm9kZXMpLmZpbHRlcihcblx0XHQobm9kZSkgPT4gIW5vZGUuY2xhc3NMaXN0LmNvbnRhaW5zKCdmYWNldC1zZWFyY2gnKSxcblx0KTtcblx0ZXBJbnB1dHMuZm9yRWFjaCgoaW5wdXQpID0+IHtcblx0XHRjb25zdCBlcENvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuXHRcdGVwQ29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ2VwLWF1dG9zdWdnZXN0LWNvbnRhaW5lcicpO1xuXG5cdFx0Ly8gRGlzYWJsZSBhdXRvY29tcGxldGVcblx0XHRpbnB1dC5zZXRBdHRyaWJ1dGUoJ2F1dG9jb21wbGV0ZScsICdvZmYnKTtcblxuXHRcdC8vIGluc2VydCB0aGUgY29udGFpbmVyIC0gbGF0ZXIgd2Ugd2lsbCBwbGFjZVxuXHRcdC8vIHRoZSBpbnB1dCBpbnNpZGUgdGhpcyBjb250YWluZXJcblx0XHRpbnB1dC5pbnNlcnRBZGphY2VudEVsZW1lbnQoJ2FmdGVyZW5kJywgZXBDb250YWluZXIpO1xuXG5cdFx0Ly8gbW92ZSB0aGUgaW5wdXQgaW5zaWRlIHRoZSBjb250YWluZXJcblx0XHRjb25zdCBmb3JtID0gaW5wdXQuY2xvc2VzdCgnZm9ybScpO1xuXHRcdGNvbnN0IGNvbnRhaW5lciA9IGZvcm0ucXVlcnlTZWxlY3RvcignLmVwLWF1dG9zdWdnZXN0LWNvbnRhaW5lcicpO1xuXHRcdGNvbnRhaW5lci5hcHBlbmRDaGlsZChpbnB1dCk7XG5cblx0XHRjb25zdCBjbG9uZWRDb250YWluZXIgPSBlcEF1dG9zdWdnZXN0LmNsb25lTm9kZSh0cnVlKTtcblx0XHRpbnB1dC5pbnNlcnRBZGphY2VudEVsZW1lbnQoJ2FmdGVyZW5kJywgY2xvbmVkQ29udGFpbmVyKTtcblxuXHRcdC8vIGFubm91bmNlIHRoYXQgdGhpcyBpcyBoYXMgYmVlbiBkb25lXG5cdFx0Y29uc3QgZXZlbnQgPSBuZXcgQ3VzdG9tRXZlbnQoJ2VsYXN0aWNwcmVzcy5pbnB1dC5tb3ZlZCcpO1xuXHRcdGlucHV0LmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xuXHR9KTtcblxuXHRpZiAoZXBJbnB1dHMubGVuZ3RoID4gMCkge1xuXHRcdGVwQXV0b3N1Z2dlc3Quc2V0QXR0cmlidXRlKFxuXHRcdFx0J3N0eWxlJyxcblx0XHRcdGBcblx0XHRcdHRvcDogJHtlcElucHV0c1swXS5vZmZzZXRIZWlnaHQgLSAxfTtcblx0XHRcdGJhY2tncm91bmQtY29sb3I6ICR7Z2V0Q29tcHV0ZWRTdHlsZShlcElucHV0c1swXSwgJ2JhY2tncm91bmQtY29sb3InKX1cblx0XHRgLFxuXHRcdCk7XG5cdH1cblxuXHQvKipcblx0ICogSGVscGVyIGZ1bmN0aW9uIHRvIGZvcm1hdCBzZWFyY2ggcmVzdWx0cyBmb3IgY29uc3VtcHRpb25cblx0ICogYnkgdGhlIHVwZGF0ZUF1dG9zdWdnZXN0Qm94IGZ1bmN0aW9uXG5cdCAqXG5cdCAqIEBwYXJhbSB7b2JqZWN0fSBoaXRzIC0gcmVzdWx0cyBmcm9tIEVTXG5cdCAqIEByZXR1cm5zIHtBcnJheX0gZm9ybWF0dGVkIGhpdHNcblx0ICovXG5cdGNvbnN0IGZvcm1hdFNlYXJjaFJlc3VsdHMgPSAoaGl0cykgPT4ge1xuXHRcdHJldHVybiBoaXRzLm1hcCgoaGl0KSA9PiB7XG5cdFx0XHRjb25zdCB0ZXh0ID0gaGl0Ll9zb3VyY2UucG9zdF90aXRsZTtcblx0XHRcdGNvbnN0IHVybCA9IGhpdC5fc291cmNlLnBlcm1hbGluaztcblxuXHRcdFx0cmV0dXJuIHsgdGV4dCwgdXJsIH07XG5cdFx0fSk7XG5cdH07XG5cblx0Ly8gdG8gYmUgdXNlZCBieSB0aGUgaGFuZGxlVXBEb3duIGZ1bmN0aW9uXG5cdC8vIHRvIGtlZXAgdHJhY2sgb2YgdGhlIGN1cnJlbnRseSBzZWxlY3RlZCByZXN1bHRcblx0bGV0IGN1cnJlbnRJbmRleDtcblxuXHQvLyB0aGVzZSBhcmUgdGhlIGtleWNvZGVzIHdlIGxpc3RlbiBmb3IgaW4gaGFuZGxlVXBEb3duLFxuXHQvLyBhbmQgaW4gaGFuZGxlS2V5dXBcblx0Y29uc3Qga2V5Q29kZXMgPSBbXG5cdFx0MzgsIC8vIHVwXG5cdFx0NDAsIC8vIGRvd25cblx0XHQxMywgLy8gZW50ZXJcblx0XTtcblxuXHQvKipcblx0ICogSGFuZGxlcyBrZXl1cCBldmVudCBvbiB0aGUgc2VhcmNoIGlucHV0XG5cdCAqXG5cdCAqIEBwYXJhbSB7ZXZlbnR9IGV2ZW50IC0ga2V5dXAgZXZlbnRcblx0ICovXG5cdGNvbnN0IGhhbmRsZVVwRG93biA9IChldmVudCkgPT4ge1xuXHRcdGlmICgha2V5Q29kZXMuaW5jbHVkZXMoZXZlbnQua2V5Q29kZSkpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRjb25zdCBpbnB1dCA9IGV2ZW50LnRhcmdldDtcblx0XHRjb25zdCBjb250YWluZXIgPSBmaW5kQW5jZXN0b3JCeUNsYXNzKGlucHV0LCAnZXAtYXV0b3N1Z2dlc3QtY29udGFpbmVyJyk7XG5cdFx0Y29uc3Qgc3VnZ2VzdExpc3QgPSBjb250YWluZXIucXVlcnlTZWxlY3RvcignLmF1dG9zdWdnZXN0LWxpc3QnKTtcblx0XHRjb25zdCByZXN1bHRzID0gc3VnZ2VzdExpc3QuY2hpbGRyZW47XG5cblx0XHQvKipcblx0XHQgKiBoZWxwZXIgZnVuY3Rpb24gdG8gZ2V0IHRoZSBjdXJyZW50bHkgc2VsZWN0ZWQgcmVzdWx0XG5cdFx0ICpcblx0XHQgKiBAcmV0dXJucyB7bnVtYmVyfSBpbmRleCBvZiB0aGUgc2VsZWN0ZWQgc2VhcmNoIHJlc3VsdFxuXHRcdCAqL1xuXHRcdGNvbnN0IGdldFNlbGVjdGVkUmVzdWx0SW5kZXggPSAoKSA9PiB7XG5cdFx0XHRjb25zdCByZXN1bHRzQXJyID0gQXJyYXkuZnJvbShyZXN1bHRzKTtcblx0XHRcdHJldHVybiByZXN1bHRzQXJyLmZpbmRJbmRleCgocmVzdWx0KSA9PiByZXN1bHQuY2xhc3NMaXN0LmNvbnRhaW5zKCdzZWxlY3RlZCcpKTtcblx0XHR9O1xuXG5cdFx0LyoqXG5cdFx0ICogaGVscGVyIGZ1bmN0aW9uIHRvIGRlc2VsZWN0IHJlc3VsdHNcblx0XHQgKi9cblx0XHRjb25zdCBkZVNlbGVjdFJlc3VsdHMgPSAoKSA9PiB7XG5cdFx0XHRyZXN1bHRzLmZvckVhY2goKHJlc3VsdCkgPT4ge1xuXHRcdFx0XHRyZXN1bHQuY2xhc3NMaXN0LnJlbW92ZSgnc2VsZWN0ZWQnKTtcblx0XHRcdFx0cmVzdWx0LnNldEF0dHJpYnV0ZSgnYXJpYS1zZWxlY3RlZCcsICdmYWxzZScpO1xuXHRcdFx0fSk7XG5cdFx0fTtcblxuXHRcdC8qKlxuXHRcdCAqIGhlbHBlciBmdW5jdGlvbiB0byBzZWxlY3RlZCB0aGUgbmV4dCByZXN1bHRcblx0XHQgKi9cblx0XHRjb25zdCBzZWxlY3ROZXh0UmVzdWx0ID0gKCkgPT4ge1xuXHRcdFx0aWYgKGN1cnJlbnRJbmRleCA+PSAwKSB7XG5cdFx0XHRcdGNvbnN0IGVsID0gcmVzdWx0c1tjdXJyZW50SW5kZXhdO1xuXHRcdFx0XHRlbC5jbGFzc0xpc3QuYWRkKCdzZWxlY3RlZCcpO1xuXHRcdFx0XHRlbC5zZXRBdHRyaWJ1dGUoJ2FyaWEtc2VsZWN0ZWQnLCAndHJ1ZScpO1xuXHRcdFx0XHRzZXRJbnB1dEFjdGl2ZURlc2NlbmRhbnQoZWwuaWQsIGlucHV0KTtcblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0Ly8gc2VsZWN0IG5leHQgb3IgcHJldmlvdXMgYmFzZWQgb24ga2V5Q29kZVxuXHRcdC8vIGlmIGVudGVyLCBuYXZpZ2F0ZSB0byB0aGF0IGVsZW1lbnRcblx0XHRzd2l0Y2ggKGV2ZW50LmtleUNvZGUpIHtcblx0XHRcdGNhc2UgMzg6IC8vIFVwXG5cdFx0XHRcdC8vIGRvbid0IGdvIGxlc3MgdGhhbiB0aGUgMHRoIGluZGV4XG5cdFx0XHRcdGN1cnJlbnRJbmRleCA9IGN1cnJlbnRJbmRleCAtIDEgPj0gMCA/IGN1cnJlbnRJbmRleCAtIDEgOiAwO1xuXHRcdFx0XHRkZVNlbGVjdFJlc3VsdHMoKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlIDQwOiAvLyBEb3duXG5cdFx0XHRcdGlmICh0eXBlb2YgY3VycmVudEluZGV4ID09PSAndW5kZWZpbmVkJykge1xuXHRcdFx0XHRcdC8vIGluZGV4IGlzIG5vdCB5ZXQgZGVmaW5lZCwgc28gbGV0J3Ncblx0XHRcdFx0XHQvLyBzdGFydCB3aXRoIHRoZSBmaXJzdCBvbmVcblx0XHRcdFx0XHRjdXJyZW50SW5kZXggPSAwO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGNvbnN0IGN1cnJlbnQgPSBnZXRTZWxlY3RlZFJlc3VsdEluZGV4KCk7XG5cblx0XHRcdFx0XHQvLyBjaGVjayBmb3IgZXhpc3RlbmNlIG9mIG5leHQgcmVzdWx0XG5cdFx0XHRcdFx0aWYgKHJlc3VsdHNbY3VycmVudCArIDFdKSB7XG5cdFx0XHRcdFx0XHRjdXJyZW50SW5kZXggPSBjdXJyZW50ICsgMTtcblx0XHRcdFx0XHRcdGRlU2VsZWN0UmVzdWx0cygpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgMTM6IC8vIEVudGVyXG5cdFx0XHRcdGlmIChyZXN1bHRzW2N1cnJlbnRJbmRleF0uY2xhc3NMaXN0LmNvbnRhaW5zKCdzZWxlY3RlZCcpKSB7XG5cdFx0XHRcdFx0Ly8gbmF2aWdhdGUgdG8gdGhlIGl0ZW0gZGVmaW5lZCBpbiB0aGUgc3BhbidzIGRhdGEtdXJsIGF0dHJpYnV0ZVxuXHRcdFx0XHRcdHNlbGVjdEl0ZW0oaW5wdXQsIHJlc3VsdHNbY3VycmVudEluZGV4XS5xdWVyeVNlbGVjdG9yKCcuYXV0b3N1Z2dlc3QtbGluaycpKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRicmVhaztcblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdC8vIE5vIGl0ZW0gc2VsZWN0ZWRcblx0XHRcdFx0YnJlYWs7XG5cdFx0fVxuXG5cdFx0Ly8gb25seSBjaGVjayBuZXh0IGVsZW1lbnQgaWYgdXAgYW5kIGRvd24ga2V5IHByZXNzZWRcblx0XHRpZiAocmVzdWx0c1tjdXJyZW50SW5kZXhdICYmIHJlc3VsdHNbY3VycmVudEluZGV4XS5jbGFzc0xpc3QuY29udGFpbnMoJ2F1dG9zdWdnZXN0LWl0ZW0nKSkge1xuXHRcdFx0c2VsZWN0TmV4dFJlc3VsdCgpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRkZVNlbGVjdFJlc3VsdHMoKTtcblx0XHR9XG5cblx0XHQvLyBrZWVwIGN1cnNvciBmcm9tIGhlYWRpbmcgYmFjayB0byB0aGUgYmVnaW5uaW5nIGluIHRoZSBpbnB1dFxuXHRcdGlmIChldmVudC5rZXlDb2RlID09PSAzOCkge1xuXHRcdFx0Ly8gcmV0dXJuIGZhbHNlO1xuXHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHR9XG5cdH07XG5cblx0LyoqXG5cdCAqIENhbGxzIHRoZSBhamF4IHJlcXVlc3QsIGFuZCBvdXRwdXRzIHRoZSByZXN1bHRzLlxuXHQgKiBDYWxsZWQgYnkgdGhlIGhhbmRsZUtleXVwIGNhbGxiYWNrLCBkZWJvdW5jZWQuXG5cdCAqXG5cdCAqIEBwYXJhbSB7Tm9kZX0gaW5wdXQgLSBzZWFyY2ggaW5wdXQgZmllbGRcblx0ICovXG5cdGNvbnN0IGZldGNoUmVzdWx0cyA9IGFzeW5jIChpbnB1dCkgPT4ge1xuXHRcdGNvbnN0IHNlYXJjaFRleHQgPSBpbnB1dC52YWx1ZTtcblx0XHRjb25zdCBwbGFjZWhvbGRlciA9ICdlcF9hdXRvc3VnZ2VzdF9wbGFjZWhvbGRlcic7XG5cblx0XHQvLyByZXRyaWV2ZXMgdGhlIFBIUC1nZW5lcmVhdGVkIHF1ZXJ5IHRvIHBhc3MgdG8gRWxhc3RpY1NlYXJjaFxuXHRcdGNvbnN0IHF1ZXJ5SlNPTiA9IGdldEpzb25RdWVyeSgpO1xuXG5cdFx0aWYgKHF1ZXJ5SlNPTi5lcnJvcikge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmIChzZWFyY2hUZXh0Lmxlbmd0aCA+PSAyKSB7XG5cdFx0XHRjb25zdCBxdWVyeSA9IGJ1aWxkU2VhcmNoUXVlcnkoc2VhcmNoVGV4dCwgcGxhY2Vob2xkZXIsIHF1ZXJ5SlNPTik7XG5cblx0XHRcdC8vIGZldGNoIHRoZSByZXN1bHRzXG5cdFx0XHRjb25zdCByZXNwb25zZSA9IGF3YWl0IGVzU2VhcmNoKHF1ZXJ5LCBzZWFyY2hUZXh0KTtcblxuXHRcdFx0aWYgKHJlc3BvbnNlICYmIHJlc3BvbnNlLl9zaGFyZHMuc3VjY2Vzc2Z1bCA+IDApIHtcblx0XHRcdFx0Y29uc3QgaGl0cyA9IGNoZWNrRm9yT3JkZXJlZFBvc3RzKHJlc3BvbnNlLmhpdHMuaGl0cywgc2VhcmNoVGV4dCk7XG5cdFx0XHRcdGNvbnN0IGZvcm1hdHRlZFJlc3VsdHMgPSBmb3JtYXRTZWFyY2hSZXN1bHRzKGhpdHMpO1xuXG5cdFx0XHRcdGlmIChmb3JtYXR0ZWRSZXN1bHRzLmxlbmd0aCA9PT0gMCkge1xuXHRcdFx0XHRcdGhpZGVBdXRvc3VnZ2VzdEJveCgpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHVwZGF0ZUF1dG9zdWdnZXN0Qm94KGZvcm1hdHRlZFJlc3VsdHMsIGlucHV0KTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aGlkZUF1dG9zdWdnZXN0Qm94KCk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIGlmIChzZWFyY2hUZXh0Lmxlbmd0aCA9PT0gMCkge1xuXHRcdFx0aGlkZUF1dG9zdWdnZXN0Qm94KCk7XG5cdFx0fVxuXHR9O1xuXG5cdC8qKlxuXHQgKiBDYWxsYmFjayBmb3Iga2V5dXAgaW4gQXV0b3N1Z2dlc3QgY29udGFpbmVyLlxuXHQgKlxuXHQgKiBDYWxscyBhIGRlYm91bmNlZCBmdW5jdGlvbiB0byBnZXQgdGhlIHNlYXJjaCByZXN1bHRzIHZpYVxuXHQgKiBhamF4IHJlcXVlc3QuXG5cdCAqXG5cdCAqIEBwYXJhbSB7ZXZlbnR9IGV2ZW50IC0ga2V5dXAgZXZlbnRcblx0ICovXG5cdGNvbnN0IGhhbmRsZUtleXVwID0gKGV2ZW50KSA9PiB7XG5cdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuXHRcdGlmIChldmVudC5rZXlDb2RlID09PSAyNykge1xuXHRcdFx0aGlkZUF1dG9zdWdnZXN0Qm94KCk7XG5cdFx0XHR0b2dnbGVJbnB1dEFyaWEoZmFsc2UsIGV2ZW50LnRhcmdldCk7XG5cdFx0XHRzZXRJbnB1dEFjdGl2ZURlc2NlbmRhbnQoJycsIGV2ZW50LnRhcmdldCk7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKGtleUNvZGVzLmluY2x1ZGVzKGV2ZW50LmtleUNvZGUpKSB7XG5cdFx0XHRoYW5kbGVVcERvd24oZXZlbnQpO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGNvbnN0IGlucHV0ID0gZXZlbnQudGFyZ2V0O1xuXHRcdGNvbnN0IGRlYm91bmNlRmV0Y2hSZXN1bHRzID0gZGVib3VuY2UoZmV0Y2hSZXN1bHRzLCAyMDApO1xuXHRcdGRlYm91bmNlRmV0Y2hSZXN1bHRzKGlucHV0KTtcblx0fTtcblxuXHQvKipcblx0ICogTGlzdGVuIGZvciBhbnkgZXZlbnRzOlxuXHQgKlxuXHQgKiBrZXl1cFxuXHQgKiBzZW5kIHRoZW0gZm9yIGEgcXVlcnkgdG8gdGhlIEVsYXN0aWNzZWFyY2ggc2VydmVyXG5cdCAqIGhhbmRsZSB1cCBhbmQgZG93biBrZXlzIHRvIG1vdmUgYmV0d2VlbiByZXN1bHRzXG5cdCAqXG5cdCAqIGJsdXJcblx0ICogaGlkZSB0aGUgYXV0b3N1Z2dlc3QgYm94XG5cdCAqL1xuXHRlcElucHV0cy5mb3JFYWNoKChpbnB1dCkgPT4ge1xuXHRcdGlucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2tleXVwJywgaGFuZGxlS2V5dXApO1xuXHRcdC8vIGlucHV0LmFkZEV2ZW50TGlzdGVuZXIoICdibHVyJywgaGlkZUF1dG9zdWdnZXN0Qm94ICk7XG5cdH0pO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgJGZpbmRJbmRleCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pdGVyYXRpb24nKS5maW5kSW5kZXg7XG52YXIgYWRkVG9VbnNjb3BhYmxlcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hZGQtdG8tdW5zY29wYWJsZXMnKTtcblxudmFyIEZJTkRfSU5ERVggPSAnZmluZEluZGV4JztcbnZhciBTS0lQU19IT0xFUyA9IHRydWU7XG5cbi8vIFNob3VsZG4ndCBza2lwIGhvbGVzXG5pZiAoRklORF9JTkRFWCBpbiBbXSkgQXJyYXkoMSlbRklORF9JTkRFWF0oZnVuY3Rpb24gKCkgeyBTS0lQU19IT0xFUyA9IGZhbHNlOyB9KTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5maW5kSW5kZXhgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZpbmRpbmRleFxuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGZvcmNlZDogU0tJUFNfSE9MRVMgfSwge1xuICBmaW5kSW5kZXg6IGZ1bmN0aW9uIGZpbmRJbmRleChjYWxsYmFja2ZuIC8qICwgdGhhdCA9IHVuZGVmaW5lZCAqLykge1xuICAgIHJldHVybiAkZmluZEluZGV4KHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG5cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS1AQHVuc2NvcGFibGVzXG5hZGRUb1Vuc2NvcGFibGVzKEZJTkRfSU5ERVgpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGZpeFJlZ0V4cFdlbGxLbm93blN5bWJvbExvZ2ljID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZpeC1yZWdleHAtd2VsbC1rbm93bi1zeW1ib2wtbG9naWMnKTtcbnZhciBpc1JlZ0V4cCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1yZWdleHAnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG52YXIgYWR2YW5jZVN0cmluZ0luZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FkdmFuY2Utc3RyaW5nLWluZGV4Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG52YXIgY2FsbFJlZ0V4cEV4ZWMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLWV4ZWMtYWJzdHJhY3QnKTtcbnZhciByZWdleHBFeGVjID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC1leGVjJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxudmFyIGFycmF5UHVzaCA9IFtdLnB1c2g7XG52YXIgbWluID0gTWF0aC5taW47XG52YXIgTUFYX1VJTlQzMiA9IDB4RkZGRkZGRkY7XG5cbi8vIGJhYmVsLW1pbmlmeSB0cmFuc3BpbGVzIFJlZ0V4cCgneCcsICd5JykgLT4gL3gveSBhbmQgaXQgY2F1c2VzIFN5bnRheEVycm9yXG52YXIgU1VQUE9SVFNfWSA9ICFmYWlscyhmdW5jdGlvbiAoKSB7IHJldHVybiAhUmVnRXhwKE1BWF9VSU5UMzIsICd5Jyk7IH0pO1xuXG4vLyBAQHNwbGl0IGxvZ2ljXG5maXhSZWdFeHBXZWxsS25vd25TeW1ib2xMb2dpYygnc3BsaXQnLCAyLCBmdW5jdGlvbiAoU1BMSVQsIG5hdGl2ZVNwbGl0LCBtYXliZUNhbGxOYXRpdmUpIHtcbiAgdmFyIGludGVybmFsU3BsaXQ7XG4gIGlmIChcbiAgICAnYWJiYycuc3BsaXQoLyhiKSovKVsxXSA9PSAnYycgfHxcbiAgICAndGVzdCcuc3BsaXQoLyg/OikvLCAtMSkubGVuZ3RoICE9IDQgfHxcbiAgICAnYWInLnNwbGl0KC8oPzphYikqLykubGVuZ3RoICE9IDIgfHxcbiAgICAnLicuc3BsaXQoLyguPykoLj8pLykubGVuZ3RoICE9IDQgfHxcbiAgICAnLicuc3BsaXQoLygpKCkvKS5sZW5ndGggPiAxIHx8XG4gICAgJycuc3BsaXQoLy4/LykubGVuZ3RoXG4gICkge1xuICAgIC8vIGJhc2VkIG9uIGVzNS1zaGltIGltcGxlbWVudGF0aW9uLCBuZWVkIHRvIHJld29yayBpdFxuICAgIGludGVybmFsU3BsaXQgPSBmdW5jdGlvbiAoc2VwYXJhdG9yLCBsaW1pdCkge1xuICAgICAgdmFyIHN0cmluZyA9IFN0cmluZyhyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKHRoaXMpKTtcbiAgICAgIHZhciBsaW0gPSBsaW1pdCA9PT0gdW5kZWZpbmVkID8gTUFYX1VJTlQzMiA6IGxpbWl0ID4+PiAwO1xuICAgICAgaWYgKGxpbSA9PT0gMCkgcmV0dXJuIFtdO1xuICAgICAgaWYgKHNlcGFyYXRvciA9PT0gdW5kZWZpbmVkKSByZXR1cm4gW3N0cmluZ107XG4gICAgICAvLyBJZiBgc2VwYXJhdG9yYCBpcyBub3QgYSByZWdleCwgdXNlIG5hdGl2ZSBzcGxpdFxuICAgICAgaWYgKCFpc1JlZ0V4cChzZXBhcmF0b3IpKSB7XG4gICAgICAgIHJldHVybiBuYXRpdmVTcGxpdC5jYWxsKHN0cmluZywgc2VwYXJhdG9yLCBsaW0pO1xuICAgICAgfVxuICAgICAgdmFyIG91dHB1dCA9IFtdO1xuICAgICAgdmFyIGZsYWdzID0gKHNlcGFyYXRvci5pZ25vcmVDYXNlID8gJ2knIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChzZXBhcmF0b3IubXVsdGlsaW5lID8gJ20nIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChzZXBhcmF0b3IudW5pY29kZSA/ICd1JyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAoc2VwYXJhdG9yLnN0aWNreSA/ICd5JyA6ICcnKTtcbiAgICAgIHZhciBsYXN0TGFzdEluZGV4ID0gMDtcbiAgICAgIC8vIE1ha2UgYGdsb2JhbGAgYW5kIGF2b2lkIGBsYXN0SW5kZXhgIGlzc3VlcyBieSB3b3JraW5nIHdpdGggYSBjb3B5XG4gICAgICB2YXIgc2VwYXJhdG9yQ29weSA9IG5ldyBSZWdFeHAoc2VwYXJhdG9yLnNvdXJjZSwgZmxhZ3MgKyAnZycpO1xuICAgICAgdmFyIG1hdGNoLCBsYXN0SW5kZXgsIGxhc3RMZW5ndGg7XG4gICAgICB3aGlsZSAobWF0Y2ggPSByZWdleHBFeGVjLmNhbGwoc2VwYXJhdG9yQ29weSwgc3RyaW5nKSkge1xuICAgICAgICBsYXN0SW5kZXggPSBzZXBhcmF0b3JDb3B5Lmxhc3RJbmRleDtcbiAgICAgICAgaWYgKGxhc3RJbmRleCA+IGxhc3RMYXN0SW5kZXgpIHtcbiAgICAgICAgICBvdXRwdXQucHVzaChzdHJpbmcuc2xpY2UobGFzdExhc3RJbmRleCwgbWF0Y2guaW5kZXgpKTtcbiAgICAgICAgICBpZiAobWF0Y2gubGVuZ3RoID4gMSAmJiBtYXRjaC5pbmRleCA8IHN0cmluZy5sZW5ndGgpIGFycmF5UHVzaC5hcHBseShvdXRwdXQsIG1hdGNoLnNsaWNlKDEpKTtcbiAgICAgICAgICBsYXN0TGVuZ3RoID0gbWF0Y2hbMF0ubGVuZ3RoO1xuICAgICAgICAgIGxhc3RMYXN0SW5kZXggPSBsYXN0SW5kZXg7XG4gICAgICAgICAgaWYgKG91dHB1dC5sZW5ndGggPj0gbGltKSBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2VwYXJhdG9yQ29weS5sYXN0SW5kZXggPT09IG1hdGNoLmluZGV4KSBzZXBhcmF0b3JDb3B5Lmxhc3RJbmRleCsrOyAvLyBBdm9pZCBhbiBpbmZpbml0ZSBsb29wXG4gICAgICB9XG4gICAgICBpZiAobGFzdExhc3RJbmRleCA9PT0gc3RyaW5nLmxlbmd0aCkge1xuICAgICAgICBpZiAobGFzdExlbmd0aCB8fCAhc2VwYXJhdG9yQ29weS50ZXN0KCcnKSkgb3V0cHV0LnB1c2goJycpO1xuICAgICAgfSBlbHNlIG91dHB1dC5wdXNoKHN0cmluZy5zbGljZShsYXN0TGFzdEluZGV4KSk7XG4gICAgICByZXR1cm4gb3V0cHV0Lmxlbmd0aCA+IGxpbSA/IG91dHB1dC5zbGljZSgwLCBsaW0pIDogb3V0cHV0O1xuICAgIH07XG4gIC8vIENoYWtyYSwgVjhcbiAgfSBlbHNlIGlmICgnMCcuc3BsaXQodW5kZWZpbmVkLCAwKS5sZW5ndGgpIHtcbiAgICBpbnRlcm5hbFNwbGl0ID0gZnVuY3Rpb24gKHNlcGFyYXRvciwgbGltaXQpIHtcbiAgICAgIHJldHVybiBzZXBhcmF0b3IgPT09IHVuZGVmaW5lZCAmJiBsaW1pdCA9PT0gMCA/IFtdIDogbmF0aXZlU3BsaXQuY2FsbCh0aGlzLCBzZXBhcmF0b3IsIGxpbWl0KTtcbiAgICB9O1xuICB9IGVsc2UgaW50ZXJuYWxTcGxpdCA9IG5hdGl2ZVNwbGl0O1xuXG4gIHJldHVybiBbXG4gICAgLy8gYFN0cmluZy5wcm90b3R5cGUuc3BsaXRgIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUuc3BsaXRcbiAgICBmdW5jdGlvbiBzcGxpdChzZXBhcmF0b3IsIGxpbWl0KSB7XG4gICAgICB2YXIgTyA9IHJlcXVpcmVPYmplY3RDb2VyY2libGUodGhpcyk7XG4gICAgICB2YXIgc3BsaXR0ZXIgPSBzZXBhcmF0b3IgPT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogc2VwYXJhdG9yW1NQTElUXTtcbiAgICAgIHJldHVybiBzcGxpdHRlciAhPT0gdW5kZWZpbmVkXG4gICAgICAgID8gc3BsaXR0ZXIuY2FsbChzZXBhcmF0b3IsIE8sIGxpbWl0KVxuICAgICAgICA6IGludGVybmFsU3BsaXQuY2FsbChTdHJpbmcoTyksIHNlcGFyYXRvciwgbGltaXQpO1xuICAgIH0sXG4gICAgLy8gYFJlZ0V4cC5wcm90b3R5cGVbQEBzcGxpdF1gIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXJlZ2V4cC5wcm90b3R5cGUtQEBzcGxpdFxuICAgIC8vXG4gICAgLy8gTk9URTogVGhpcyBjYW5ub3QgYmUgcHJvcGVybHkgcG9seWZpbGxlZCBpbiBlbmdpbmVzIHRoYXQgZG9uJ3Qgc3VwcG9ydFxuICAgIC8vIHRoZSAneScgZmxhZy5cbiAgICBmdW5jdGlvbiAocmVnZXhwLCBsaW1pdCkge1xuICAgICAgdmFyIHJlcyA9IG1heWJlQ2FsbE5hdGl2ZShpbnRlcm5hbFNwbGl0LCByZWdleHAsIHRoaXMsIGxpbWl0LCBpbnRlcm5hbFNwbGl0ICE9PSBuYXRpdmVTcGxpdCk7XG4gICAgICBpZiAocmVzLmRvbmUpIHJldHVybiByZXMudmFsdWU7XG5cbiAgICAgIHZhciByeCA9IGFuT2JqZWN0KHJlZ2V4cCk7XG4gICAgICB2YXIgUyA9IFN0cmluZyh0aGlzKTtcbiAgICAgIHZhciBDID0gc3BlY2llc0NvbnN0cnVjdG9yKHJ4LCBSZWdFeHApO1xuXG4gICAgICB2YXIgdW5pY29kZU1hdGNoaW5nID0gcngudW5pY29kZTtcbiAgICAgIHZhciBmbGFncyA9IChyeC5pZ25vcmVDYXNlID8gJ2knIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChyeC5tdWx0aWxpbmUgPyAnbScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgKHJ4LnVuaWNvZGUgPyAndScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgKFNVUFBPUlRTX1kgPyAneScgOiAnZycpO1xuXG4gICAgICAvLyBeKD8gKyByeCArICkgaXMgbmVlZGVkLCBpbiBjb21iaW5hdGlvbiB3aXRoIHNvbWUgUyBzbGljaW5nLCB0b1xuICAgICAgLy8gc2ltdWxhdGUgdGhlICd5JyBmbGFnLlxuICAgICAgdmFyIHNwbGl0dGVyID0gbmV3IEMoU1VQUE9SVFNfWSA/IHJ4IDogJ14oPzonICsgcnguc291cmNlICsgJyknLCBmbGFncyk7XG4gICAgICB2YXIgbGltID0gbGltaXQgPT09IHVuZGVmaW5lZCA/IE1BWF9VSU5UMzIgOiBsaW1pdCA+Pj4gMDtcbiAgICAgIGlmIChsaW0gPT09IDApIHJldHVybiBbXTtcbiAgICAgIGlmIChTLmxlbmd0aCA9PT0gMCkgcmV0dXJuIGNhbGxSZWdFeHBFeGVjKHNwbGl0dGVyLCBTKSA9PT0gbnVsbCA/IFtTXSA6IFtdO1xuICAgICAgdmFyIHAgPSAwO1xuICAgICAgdmFyIHEgPSAwO1xuICAgICAgdmFyIEEgPSBbXTtcbiAgICAgIHdoaWxlIChxIDwgUy5sZW5ndGgpIHtcbiAgICAgICAgc3BsaXR0ZXIubGFzdEluZGV4ID0gU1VQUE9SVFNfWSA/IHEgOiAwO1xuICAgICAgICB2YXIgeiA9IGNhbGxSZWdFeHBFeGVjKHNwbGl0dGVyLCBTVVBQT1JUU19ZID8gUyA6IFMuc2xpY2UocSkpO1xuICAgICAgICB2YXIgZTtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIHogPT09IG51bGwgfHxcbiAgICAgICAgICAoZSA9IG1pbih0b0xlbmd0aChzcGxpdHRlci5sYXN0SW5kZXggKyAoU1VQUE9SVFNfWSA/IDAgOiBxKSksIFMubGVuZ3RoKSkgPT09IHBcbiAgICAgICAgKSB7XG4gICAgICAgICAgcSA9IGFkdmFuY2VTdHJpbmdJbmRleChTLCBxLCB1bmljb2RlTWF0Y2hpbmcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIEEucHVzaChTLnNsaWNlKHAsIHEpKTtcbiAgICAgICAgICBpZiAoQS5sZW5ndGggPT09IGxpbSkgcmV0dXJuIEE7XG4gICAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPD0gei5sZW5ndGggLSAxOyBpKyspIHtcbiAgICAgICAgICAgIEEucHVzaCh6W2ldKTtcbiAgICAgICAgICAgIGlmIChBLmxlbmd0aCA9PT0gbGltKSByZXR1cm4gQTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcSA9IHAgPSBlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBBLnB1c2goUy5zbGljZShwKSk7XG4gICAgICByZXR1cm4gQTtcbiAgICB9XG4gIF07XG59LCAhU1VQUE9SVFNfWSk7XG4iXSwic291cmNlUm9vdCI6IiJ9