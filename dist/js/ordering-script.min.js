!function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!==typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"===typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(r,i,function(t){return e[t]}.bind(null,i));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=362)}([,function(e,t,n){"use strict";e.exports=n(296)},function(e,t,n){(function(t){var n="object",r=function(e){return e&&e.Math==Math&&e};e.exports=r(typeof globalThis==n&&globalThis)||r(typeof window==n&&window)||r(typeof self==n&&self)||r(typeof t==n&&t)||Function("return this")()}).call(this,n(43))},function(e,t,n){"use strict";n(14),n(42);var r=n(6);n(21);n(65);var i=Object(r.createContext)();i.Provider,i.Consumer,Object(r.forwardRef)((function(){return null})),new Set(["string","boolean","number"]),new Set(["area","base","br","col","command","embed","hr","img","input","keygen","link","meta","param","source","track","wbr"]),new Set(["allowfullscreen","allowpaymentrequest","allowusermedia","async","autofocus","autoplay","checked","controls","default","defer","disabled","download","formnovalidate","hidden","ismap","itemscope","loop","multiple","muted","nomodule","novalidate","open","playsinline","readonly","required","reversed","selected","typemustmatch"]),new Set(["autocapitalize","autocomplete","charset","contenteditable","crossorigin","decoding","dir","draggable","enctype","formenctype","formmethod","http-equiv","inputmode","kind","method","preload","scope","shape","spellcheck","translate","type","wrap"]),new Set(["animation","animationIterationCount","baselineShift","borderImageOutset","borderImageSlice","borderImageWidth","columnCount","cx","cy","fillOpacity","flexGrow","flexShrink","floodOpacity","fontWeight","gridColumnEnd","gridColumnStart","gridRowEnd","gridRowStart","lineHeight","opacity","order","orphans","r","rx","ry","shapeImageThreshold","stopOpacity","strokeDasharray","strokeDashoffset","strokeMiterlimit","strokeOpacity","strokeWidth","tabSize","widows","x","y","zIndex","zoom"]);n.d(t,"a",(function(){return r.createElement}))},function(e,t){e.exports=function(e){try{return!!e()}catch(e){return!0}}},,function(e,t,n){"use strict";e.exports=n(120)},,function(e,t){e.exports=function(e){return"object"===typeof e?null!==e:"function"===typeof e}},function(e,t,n){var r=n(4);e.exports=!r((function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a}))},function(e,t,n){var r=n(9),i=n(19),o=n(26);e.exports=r?function(e,t,n){return i.f(e,t,o(1,n))}:function(e,t,n){return e[t]=n,e}},function(e,t){var n={}.hasOwnProperty;e.exports=function(e,t){return n.call(e,t)}},function(e,t,n){var r=n(2),i=n(31).f,o=n(10),a=n(45),u=n(23),l=n(56),c=n(60);e.exports=function(e,t){var n,s,f,d,p,h=e.target,m=e.global,v=e.stat;if(n=m?r:v?r[h]||u(h,{}):(r[h]||{}).prototype)for(s in t){if(d=t[s],f=e.noTargetGet?(p=i(n,s))&&p.value:n[s],!c(m?s:h+(v?".":"#")+s,e.forced)&&void 0!==f){if(typeof d===typeof f)continue;l(d,f)}(e.sham||f&&f.sham)&&o(d,"sham",!0),a(n,s,d,e)}}},function(e,t,n){var r=n(8);e.exports=function(e){if(!r(e))throw TypeError(String(e)+" is not an object");return e}},function(e,t,n){"use strict";function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},i=Object.keys(n);"function"===typeof Object.getOwnPropertySymbols&&(i=i.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),i.forEach((function(t){r(e,t,n[t])}))}return e}n.d(t,"a",(function(){return i}))},function(e,t,n){var r=n(2),i=n(23),o=n(53),a=r["__core-js_shared__"]||i("__core-js_shared__",{});(e.exports=function(e,t){return a[e]||(a[e]=void 0!==t?t:{})})("versions",[]).push({version:"3.2.1",mode:o?"pure":"global",copyright:"© 2019 Denis Pushkarev (zloirock.ru)"})},function(e,t){e.exports=function(e){if(void 0==e)throw TypeError("Can't call method on "+e);return e}},function(e,t,n){var r=n(2),i=n(15),o=n(34),a=n(62),u=r.Symbol,l=i("wks");e.exports=function(e){return l[e]||(l[e]=a&&u[e]||(a?u:o)("Symbol."+e))}},function(e,t,n){var r=n(30),i=n(16);e.exports=function(e){return r(i(e))}},function(e,t,n){var r=n(9),i=n(32),o=n(13),a=n(27),u=Object.defineProperty;t.f=r?u:function(e,t,n){if(o(e),t=a(t,!0),o(n),i)try{return u(e,t,n)}catch(e){}if("get"in n||"set"in n)throw TypeError("Accessors not supported");return"value"in n&&(e[t]=n.value),e}},function(e,t,n){var r=n(22),i=Math.min;e.exports=function(e){return e>0?i(r(e),9007199254740991):0}},function(e,t,n){(function(e,r){var i;(function(){var o,a=200,u="Unsupported core-js use. Try https://npms.io/search?q=ponyfill.",l="Expected a function",c="__lodash_hash_undefined__",s=500,f="__lodash_placeholder__",d=1,p=2,h=4,m=1,v=2,g=1,y=2,b=4,w=8,x=16,_=32,E=64,k=128,S=256,C=512,T=30,P="...",O=800,D=16,N=1,I=2,R=1/0,j=9007199254740991,M=17976931348623157e292,A=NaN,L=4294967295,F=L-1,z=L>>>1,B=[["ary",k],["bind",g],["bindKey",y],["curry",w],["curryRight",x],["flip",C],["partial",_],["partialRight",E],["rearg",S]],U="[object Arguments]",W="[object Array]",V="[object AsyncFunction]",H="[object Boolean]",$="[object Date]",G="[object DOMException]",q="[object Error]",Q="[object Function]",K="[object GeneratorFunction]",Y="[object Map]",X="[object Number]",J="[object Null]",Z="[object Object]",ee="[object Proxy]",te="[object RegExp]",ne="[object Set]",re="[object String]",ie="[object Symbol]",oe="[object Undefined]",ae="[object WeakMap]",ue="[object WeakSet]",le="[object ArrayBuffer]",ce="[object DataView]",se="[object Float32Array]",fe="[object Float64Array]",de="[object Int8Array]",pe="[object Int16Array]",he="[object Int32Array]",me="[object Uint8Array]",ve="[object Uint8ClampedArray]",ge="[object Uint16Array]",ye="[object Uint32Array]",be=/\b__p \+= '';/g,we=/\b(__p \+=) '' \+/g,xe=/(__e\(.*?\)|\b__t\)) \+\n'';/g,_e=/&(?:amp|lt|gt|quot|#39);/g,Ee=/[&<>"']/g,ke=RegExp(_e.source),Se=RegExp(Ee.source),Ce=/<%-([\s\S]+?)%>/g,Te=/<%([\s\S]+?)%>/g,Pe=/<%=([\s\S]+?)%>/g,Oe=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,De=/^\w*$/,Ne=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,Ie=/[\\^$.*+?()[\]{}|]/g,Re=RegExp(Ie.source),je=/^\s+|\s+$/g,Me=/^\s+/,Ae=/\s+$/,Le=/\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,Fe=/\{\n\/\* \[wrapped with (.+)\] \*/,ze=/,? & /,Be=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,Ue=/\\(\\)?/g,We=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,Ve=/\w*$/,He=/^[-+]0x[0-9a-f]+$/i,$e=/^0b[01]+$/i,Ge=/^\[object .+?Constructor\]$/,qe=/^0o[0-7]+$/i,Qe=/^(?:0|[1-9]\d*)$/,Ke=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,Ye=/($^)/,Xe=/['\n\r\u2028\u2029\\]/g,Je="\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff",Ze="\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",et="[\\ud800-\\udfff]",tt="["+Ze+"]",nt="["+Je+"]",rt="\\d+",it="[\\u2700-\\u27bf]",ot="[a-z\\xdf-\\xf6\\xf8-\\xff]",at="[^\\ud800-\\udfff"+Ze+rt+"\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde]",ut="\\ud83c[\\udffb-\\udfff]",lt="[^\\ud800-\\udfff]",ct="(?:\\ud83c[\\udde6-\\uddff]){2}",st="[\\ud800-\\udbff][\\udc00-\\udfff]",ft="[A-Z\\xc0-\\xd6\\xd8-\\xde]",dt="(?:"+ot+"|"+at+")",pt="(?:"+ft+"|"+at+")",ht="(?:"+nt+"|"+ut+")"+"?",mt="[\\ufe0e\\ufe0f]?"+ht+("(?:\\u200d(?:"+[lt,ct,st].join("|")+")[\\ufe0e\\ufe0f]?"+ht+")*"),vt="(?:"+[it,ct,st].join("|")+")"+mt,gt="(?:"+[lt+nt+"?",nt,ct,st,et].join("|")+")",yt=RegExp("['’]","g"),bt=RegExp(nt,"g"),wt=RegExp(ut+"(?="+ut+")|"+gt+mt,"g"),xt=RegExp([ft+"?"+ot+"+(?:['’](?:d|ll|m|re|s|t|ve))?(?="+[tt,ft,"$"].join("|")+")",pt+"+(?:['’](?:D|LL|M|RE|S|T|VE))?(?="+[tt,ft+dt,"$"].join("|")+")",ft+"?"+dt+"+(?:['’](?:d|ll|m|re|s|t|ve))?",ft+"+(?:['’](?:D|LL|M|RE|S|T|VE))?","\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])","\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])",rt,vt].join("|"),"g"),_t=RegExp("[\\u200d\\ud800-\\udfff"+Je+"\\ufe0e\\ufe0f]"),Et=/[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,kt=["Array","Buffer","DataView","Date","Error","Float32Array","Float64Array","Function","Int8Array","Int16Array","Int32Array","Map","Math","Object","Promise","RegExp","Set","String","Symbol","TypeError","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","WeakMap","_","clearTimeout","isFinite","parseInt","setTimeout"],St=-1,Ct={};Ct[se]=Ct[fe]=Ct[de]=Ct[pe]=Ct[he]=Ct[me]=Ct[ve]=Ct[ge]=Ct[ye]=!0,Ct[U]=Ct[W]=Ct[le]=Ct[H]=Ct[ce]=Ct[$]=Ct[q]=Ct[Q]=Ct[Y]=Ct[X]=Ct[Z]=Ct[te]=Ct[ne]=Ct[re]=Ct[ae]=!1;var Tt={};Tt[U]=Tt[W]=Tt[le]=Tt[ce]=Tt[H]=Tt[$]=Tt[se]=Tt[fe]=Tt[de]=Tt[pe]=Tt[he]=Tt[Y]=Tt[X]=Tt[Z]=Tt[te]=Tt[ne]=Tt[re]=Tt[ie]=Tt[me]=Tt[ve]=Tt[ge]=Tt[ye]=!0,Tt[q]=Tt[Q]=Tt[ae]=!1;var Pt={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"},Ot=parseFloat,Dt=parseInt,Nt="object"==typeof e&&e&&e.Object===Object&&e,It="object"==typeof self&&self&&self.Object===Object&&self,Rt=Nt||It||Function("return this")(),jt=t&&!t.nodeType&&t,Mt=jt&&"object"==typeof r&&r&&!r.nodeType&&r,At=Mt&&Mt.exports===jt,Lt=At&&Nt.process,Ft=function(){try{var e=Mt&&Mt.require&&Mt.require("util").types;return e||Lt&&Lt.binding&&Lt.binding("util")}catch(e){}}(),zt=Ft&&Ft.isArrayBuffer,Bt=Ft&&Ft.isDate,Ut=Ft&&Ft.isMap,Wt=Ft&&Ft.isRegExp,Vt=Ft&&Ft.isSet,Ht=Ft&&Ft.isTypedArray;function $t(e,t,n){switch(n.length){case 0:return e.call(t);case 1:return e.call(t,n[0]);case 2:return e.call(t,n[0],n[1]);case 3:return e.call(t,n[0],n[1],n[2])}return e.apply(t,n)}function Gt(e,t,n,r){for(var i=-1,o=null==e?0:e.length;++i<o;){var a=e[i];t(r,a,n(a),e)}return r}function qt(e,t){for(var n=-1,r=null==e?0:e.length;++n<r&&!1!==t(e[n],n,e););return e}function Qt(e,t){for(var n=null==e?0:e.length;n--&&!1!==t(e[n],n,e););return e}function Kt(e,t){for(var n=-1,r=null==e?0:e.length;++n<r;)if(!t(e[n],n,e))return!1;return!0}function Yt(e,t){for(var n=-1,r=null==e?0:e.length,i=0,o=[];++n<r;){var a=e[n];t(a,n,e)&&(o[i++]=a)}return o}function Xt(e,t){return!!(null==e?0:e.length)&&ln(e,t,0)>-1}function Jt(e,t,n){for(var r=-1,i=null==e?0:e.length;++r<i;)if(n(t,e[r]))return!0;return!1}function Zt(e,t){for(var n=-1,r=null==e?0:e.length,i=Array(r);++n<r;)i[n]=t(e[n],n,e);return i}function en(e,t){for(var n=-1,r=t.length,i=e.length;++n<r;)e[i+n]=t[n];return e}function tn(e,t,n,r){var i=-1,o=null==e?0:e.length;for(r&&o&&(n=e[++i]);++i<o;)n=t(n,e[i],i,e);return n}function nn(e,t,n,r){var i=null==e?0:e.length;for(r&&i&&(n=e[--i]);i--;)n=t(n,e[i],i,e);return n}function rn(e,t){for(var n=-1,r=null==e?0:e.length;++n<r;)if(t(e[n],n,e))return!0;return!1}var on=dn("length");function an(e,t,n){var r;return n(e,(function(e,n,i){if(t(e,n,i))return r=n,!1})),r}function un(e,t,n,r){for(var i=e.length,o=n+(r?1:-1);r?o--:++o<i;)if(t(e[o],o,e))return o;return-1}function ln(e,t,n){return t===t?function(e,t,n){var r=n-1,i=e.length;for(;++r<i;)if(e[r]===t)return r;return-1}(e,t,n):un(e,sn,n)}function cn(e,t,n,r){for(var i=n-1,o=e.length;++i<o;)if(r(e[i],t))return i;return-1}function sn(e){return e!==e}function fn(e,t){var n=null==e?0:e.length;return n?mn(e,t)/n:A}function dn(e){return function(t){return null==t?o:t[e]}}function pn(e){return function(t){return null==e?o:e[t]}}function hn(e,t,n,r,i){return i(e,(function(e,i,o){n=r?(r=!1,e):t(n,e,i,o)})),n}function mn(e,t){for(var n,r=-1,i=e.length;++r<i;){var a=t(e[r]);a!==o&&(n=n===o?a:n+a)}return n}function vn(e,t){for(var n=-1,r=Array(e);++n<e;)r[n]=t(n);return r}function gn(e){return function(t){return e(t)}}function yn(e,t){return Zt(t,(function(t){return e[t]}))}function bn(e,t){return e.has(t)}function wn(e,t){for(var n=-1,r=e.length;++n<r&&ln(t,e[n],0)>-1;);return n}function xn(e,t){for(var n=e.length;n--&&ln(t,e[n],0)>-1;);return n}var _n=pn({"À":"A","Á":"A","Â":"A","Ã":"A","Ä":"A","Å":"A","à":"a","á":"a","â":"a","ã":"a","ä":"a","å":"a","Ç":"C","ç":"c","Ð":"D","ð":"d","È":"E","É":"E","Ê":"E","Ë":"E","è":"e","é":"e","ê":"e","ë":"e","Ì":"I","Í":"I","Î":"I","Ï":"I","ì":"i","í":"i","î":"i","ï":"i","Ñ":"N","ñ":"n","Ò":"O","Ó":"O","Ô":"O","Õ":"O","Ö":"O","Ø":"O","ò":"o","ó":"o","ô":"o","õ":"o","ö":"o","ø":"o","Ù":"U","Ú":"U","Û":"U","Ü":"U","ù":"u","ú":"u","û":"u","ü":"u","Ý":"Y","ý":"y","ÿ":"y","Æ":"Ae","æ":"ae","Þ":"Th","þ":"th","ß":"ss","Ā":"A","Ă":"A","Ą":"A","ā":"a","ă":"a","ą":"a","Ć":"C","Ĉ":"C","Ċ":"C","Č":"C","ć":"c","ĉ":"c","ċ":"c","č":"c","Ď":"D","Đ":"D","ď":"d","đ":"d","Ē":"E","Ĕ":"E","Ė":"E","Ę":"E","Ě":"E","ē":"e","ĕ":"e","ė":"e","ę":"e","ě":"e","Ĝ":"G","Ğ":"G","Ġ":"G","Ģ":"G","ĝ":"g","ğ":"g","ġ":"g","ģ":"g","Ĥ":"H","Ħ":"H","ĥ":"h","ħ":"h","Ĩ":"I","Ī":"I","Ĭ":"I","Į":"I","İ":"I","ĩ":"i","ī":"i","ĭ":"i","į":"i","ı":"i","Ĵ":"J","ĵ":"j","Ķ":"K","ķ":"k","ĸ":"k","Ĺ":"L","Ļ":"L","Ľ":"L","Ŀ":"L","Ł":"L","ĺ":"l","ļ":"l","ľ":"l","ŀ":"l","ł":"l","Ń":"N","Ņ":"N","Ň":"N","Ŋ":"N","ń":"n","ņ":"n","ň":"n","ŋ":"n","Ō":"O","Ŏ":"O","Ő":"O","ō":"o","ŏ":"o","ő":"o","Ŕ":"R","Ŗ":"R","Ř":"R","ŕ":"r","ŗ":"r","ř":"r","Ś":"S","Ŝ":"S","Ş":"S","Š":"S","ś":"s","ŝ":"s","ş":"s","š":"s","Ţ":"T","Ť":"T","Ŧ":"T","ţ":"t","ť":"t","ŧ":"t","Ũ":"U","Ū":"U","Ŭ":"U","Ů":"U","Ű":"U","Ų":"U","ũ":"u","ū":"u","ŭ":"u","ů":"u","ű":"u","ų":"u","Ŵ":"W","ŵ":"w","Ŷ":"Y","ŷ":"y","Ÿ":"Y","Ź":"Z","Ż":"Z","Ž":"Z","ź":"z","ż":"z","ž":"z","Ĳ":"IJ","ĳ":"ij","Œ":"Oe","œ":"oe","ŉ":"'n","ſ":"s"}),En=pn({"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"});function kn(e){return"\\"+Pt[e]}function Sn(e){return _t.test(e)}function Cn(e){var t=-1,n=Array(e.size);return e.forEach((function(e,r){n[++t]=[r,e]})),n}function Tn(e,t){return function(n){return e(t(n))}}function Pn(e,t){for(var n=-1,r=e.length,i=0,o=[];++n<r;){var a=e[n];a!==t&&a!==f||(e[n]=f,o[i++]=n)}return o}function On(e){var t=-1,n=Array(e.size);return e.forEach((function(e){n[++t]=e})),n}function Dn(e){var t=-1,n=Array(e.size);return e.forEach((function(e){n[++t]=[e,e]})),n}function Nn(e){return Sn(e)?function(e){var t=wt.lastIndex=0;for(;wt.test(e);)++t;return t}(e):on(e)}function In(e){return Sn(e)?function(e){return e.match(wt)||[]}(e):function(e){return e.split("")}(e)}var Rn=pn({"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'"});var jn=function e(t){var n=(t=null==t?Rt:jn.defaults(Rt.Object(),t,jn.pick(Rt,kt))).Array,r=t.Date,i=t.Error,Je=t.Function,Ze=t.Math,et=t.Object,tt=t.RegExp,nt=t.String,rt=t.TypeError,it=n.prototype,ot=Je.prototype,at=et.prototype,ut=t["__core-js_shared__"],lt=ot.toString,ct=at.hasOwnProperty,st=0,ft=function(){var e=/[^.]+$/.exec(ut&&ut.keys&&ut.keys.IE_PROTO||"");return e?"Symbol(src)_1."+e:""}(),dt=at.toString,pt=lt.call(et),ht=Rt._,mt=tt("^"+lt.call(ct).replace(Ie,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),vt=At?t.Buffer:o,gt=t.Symbol,wt=t.Uint8Array,_t=vt?vt.allocUnsafe:o,Pt=Tn(et.getPrototypeOf,et),Nt=et.create,It=at.propertyIsEnumerable,jt=it.splice,Mt=gt?gt.isConcatSpreadable:o,Lt=gt?gt.iterator:o,Ft=gt?gt.toStringTag:o,on=function(){try{var e=Fo(et,"defineProperty");return e({},"",{}),e}catch(e){}}(),pn=t.clearTimeout!==Rt.clearTimeout&&t.clearTimeout,Mn=r&&r.now!==Rt.Date.now&&r.now,An=t.setTimeout!==Rt.setTimeout&&t.setTimeout,Ln=Ze.ceil,Fn=Ze.floor,zn=et.getOwnPropertySymbols,Bn=vt?vt.isBuffer:o,Un=t.isFinite,Wn=it.join,Vn=Tn(et.keys,et),Hn=Ze.max,$n=Ze.min,Gn=r.now,qn=t.parseInt,Qn=Ze.random,Kn=it.reverse,Yn=Fo(t,"DataView"),Xn=Fo(t,"Map"),Jn=Fo(t,"Promise"),Zn=Fo(t,"Set"),er=Fo(t,"WeakMap"),tr=Fo(et,"create"),nr=er&&new er,rr={},ir=sa(Yn),or=sa(Xn),ar=sa(Jn),ur=sa(Zn),lr=sa(er),cr=gt?gt.prototype:o,sr=cr?cr.valueOf:o,fr=cr?cr.toString:o;function dr(e){if(Tu(e)&&!vu(e)&&!(e instanceof vr)){if(e instanceof mr)return e;if(ct.call(e,"__wrapped__"))return fa(e)}return new mr(e)}var pr=function(){function e(){}return function(t){if(!Cu(t))return{};if(Nt)return Nt(t);e.prototype=t;var n=new e;return e.prototype=o,n}}();function hr(){}function mr(e,t){this.__wrapped__=e,this.__actions__=[],this.__chain__=!!t,this.__index__=0,this.__values__=o}function vr(e){this.__wrapped__=e,this.__actions__=[],this.__dir__=1,this.__filtered__=!1,this.__iteratees__=[],this.__takeCount__=L,this.__views__=[]}function gr(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function yr(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function br(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function wr(e){var t=-1,n=null==e?0:e.length;for(this.__data__=new br;++t<n;)this.add(e[t])}function xr(e){var t=this.__data__=new yr(e);this.size=t.size}function _r(e,t){var n=vu(e),r=!n&&mu(e),i=!n&&!r&&wu(e),o=!n&&!r&&!i&&Mu(e),a=n||r||i||o,u=a?vn(e.length,nt):[],l=u.length;for(var c in e)!t&&!ct.call(e,c)||a&&("length"==c||i&&("offset"==c||"parent"==c)||o&&("buffer"==c||"byteLength"==c||"byteOffset"==c)||$o(c,l))||u.push(c);return u}function Er(e){var t=e.length;return t?e[wi(0,t-1)]:o}function kr(e,t){return ua(to(e),Rr(t,0,e.length))}function Sr(e){return ua(to(e))}function Cr(e,t,n){(n===o||du(e[t],n))&&(n!==o||t in e)||Nr(e,t,n)}function Tr(e,t,n){var r=e[t];ct.call(e,t)&&du(r,n)&&(n!==o||t in e)||Nr(e,t,n)}function Pr(e,t){for(var n=e.length;n--;)if(du(e[n][0],t))return n;return-1}function Or(e,t,n,r){return Fr(e,(function(e,i,o){t(r,e,n(e),o)})),r}function Dr(e,t){return e&&no(t,rl(t),e)}function Nr(e,t,n){"__proto__"==t&&on?on(e,t,{configurable:!0,enumerable:!0,value:n,writable:!0}):e[t]=n}function Ir(e,t){for(var r=-1,i=t.length,a=n(i),u=null==e;++r<i;)a[r]=u?o:Ju(e,t[r]);return a}function Rr(e,t,n){return e===e&&(n!==o&&(e=e<=n?e:n),t!==o&&(e=e>=t?e:t)),e}function jr(e,t,n,r,i,a){var u,l=t&d,c=t&p,s=t&h;if(n&&(u=i?n(e,r,i,a):n(e)),u!==o)return u;if(!Cu(e))return e;var f=vu(e);if(f){if(u=function(e){var t=e.length,n=new e.constructor(t);t&&"string"==typeof e[0]&&ct.call(e,"index")&&(n.index=e.index,n.input=e.input);return n}(e),!l)return to(e,u)}else{var m=Uo(e),v=m==Q||m==K;if(wu(e))return Ki(e,l);if(m==Z||m==U||v&&!i){if(u=c||v?{}:Vo(e),!l)return c?function(e,t){return no(e,Bo(e),t)}(e,function(e,t){return e&&no(t,il(t),e)}(u,e)):function(e,t){return no(e,zo(e),t)}(e,Dr(u,e))}else{if(!Tt[m])return i?e:{};u=function(e,t,n){var r=e.constructor;switch(t){case le:return Yi(e);case H:case $:return new r(+e);case ce:return function(e,t){var n=t?Yi(e.buffer):e.buffer;return new e.constructor(n,e.byteOffset,e.byteLength)}(e,n);case se:case fe:case de:case pe:case he:case me:case ve:case ge:case ye:return Xi(e,n);case Y:return new r;case X:case re:return new r(e);case te:return function(e){var t=new e.constructor(e.source,Ve.exec(e));return t.lastIndex=e.lastIndex,t}(e);case ne:return new r;case ie:return i=e,sr?et(sr.call(i)):{}}var i}(e,m,l)}}a||(a=new xr);var g=a.get(e);if(g)return g;a.set(e,u),Iu(e)?e.forEach((function(r){u.add(jr(r,t,n,r,e,a))})):Pu(e)&&e.forEach((function(r,i){u.set(i,jr(r,t,n,i,e,a))}));var y=f?o:(s?c?No:Do:c?il:rl)(e);return qt(y||e,(function(r,i){y&&(r=e[i=r]),Tr(u,i,jr(r,t,n,i,e,a))})),u}function Mr(e,t,n){var r=n.length;if(null==e)return!r;for(e=et(e);r--;){var i=n[r],a=t[i],u=e[i];if(u===o&&!(i in e)||!a(u))return!1}return!0}function Ar(e,t,n){if("function"!=typeof e)throw new rt(l);return ra((function(){e.apply(o,n)}),t)}function Lr(e,t,n,r){var i=-1,o=Xt,u=!0,l=e.length,c=[],s=t.length;if(!l)return c;n&&(t=Zt(t,gn(n))),r?(o=Jt,u=!1):t.length>=a&&(o=bn,u=!1,t=new wr(t));e:for(;++i<l;){var f=e[i],d=null==n?f:n(f);if(f=r||0!==f?f:0,u&&d===d){for(var p=s;p--;)if(t[p]===d)continue e;c.push(f)}else o(t,d,r)||c.push(f)}return c}dr.templateSettings={escape:Ce,evaluate:Te,interpolate:Pe,variable:"",imports:{_:dr}},dr.prototype=hr.prototype,dr.prototype.constructor=dr,mr.prototype=pr(hr.prototype),mr.prototype.constructor=mr,vr.prototype=pr(hr.prototype),vr.prototype.constructor=vr,gr.prototype.clear=function(){this.__data__=tr?tr(null):{},this.size=0},gr.prototype.delete=function(e){var t=this.has(e)&&delete this.__data__[e];return this.size-=t?1:0,t},gr.prototype.get=function(e){var t=this.__data__;if(tr){var n=t[e];return n===c?o:n}return ct.call(t,e)?t[e]:o},gr.prototype.has=function(e){var t=this.__data__;return tr?t[e]!==o:ct.call(t,e)},gr.prototype.set=function(e,t){var n=this.__data__;return this.size+=this.has(e)?0:1,n[e]=tr&&t===o?c:t,this},yr.prototype.clear=function(){this.__data__=[],this.size=0},yr.prototype.delete=function(e){var t=this.__data__,n=Pr(t,e);return!(n<0)&&(n==t.length-1?t.pop():jt.call(t,n,1),--this.size,!0)},yr.prototype.get=function(e){var t=this.__data__,n=Pr(t,e);return n<0?o:t[n][1]},yr.prototype.has=function(e){return Pr(this.__data__,e)>-1},yr.prototype.set=function(e,t){var n=this.__data__,r=Pr(n,e);return r<0?(++this.size,n.push([e,t])):n[r][1]=t,this},br.prototype.clear=function(){this.size=0,this.__data__={hash:new gr,map:new(Xn||yr),string:new gr}},br.prototype.delete=function(e){var t=Ao(this,e).delete(e);return this.size-=t?1:0,t},br.prototype.get=function(e){return Ao(this,e).get(e)},br.prototype.has=function(e){return Ao(this,e).has(e)},br.prototype.set=function(e,t){var n=Ao(this,e),r=n.size;return n.set(e,t),this.size+=n.size==r?0:1,this},wr.prototype.add=wr.prototype.push=function(e){return this.__data__.set(e,c),this},wr.prototype.has=function(e){return this.__data__.has(e)},xr.prototype.clear=function(){this.__data__=new yr,this.size=0},xr.prototype.delete=function(e){var t=this.__data__,n=t.delete(e);return this.size=t.size,n},xr.prototype.get=function(e){return this.__data__.get(e)},xr.prototype.has=function(e){return this.__data__.has(e)},xr.prototype.set=function(e,t){var n=this.__data__;if(n instanceof yr){var r=n.__data__;if(!Xn||r.length<a-1)return r.push([e,t]),this.size=++n.size,this;n=this.__data__=new br(r)}return n.set(e,t),this.size=n.size,this};var Fr=oo(Gr),zr=oo(qr,!0);function Br(e,t){var n=!0;return Fr(e,(function(e,r,i){return n=!!t(e,r,i)})),n}function Ur(e,t,n){for(var r=-1,i=e.length;++r<i;){var a=e[r],u=t(a);if(null!=u&&(l===o?u===u&&!ju(u):n(u,l)))var l=u,c=a}return c}function Wr(e,t){var n=[];return Fr(e,(function(e,r,i){t(e,r,i)&&n.push(e)})),n}function Vr(e,t,n,r,i){var o=-1,a=e.length;for(n||(n=Ho),i||(i=[]);++o<a;){var u=e[o];t>0&&n(u)?t>1?Vr(u,t-1,n,r,i):en(i,u):r||(i[i.length]=u)}return i}var Hr=ao(),$r=ao(!0);function Gr(e,t){return e&&Hr(e,t,rl)}function qr(e,t){return e&&$r(e,t,rl)}function Qr(e,t){return Yt(t,(function(t){return Eu(e[t])}))}function Kr(e,t){for(var n=0,r=(t=$i(t,e)).length;null!=e&&n<r;)e=e[ca(t[n++])];return n&&n==r?e:o}function Yr(e,t,n){var r=t(e);return vu(e)?r:en(r,n(e))}function Xr(e){return null==e?e===o?oe:J:Ft&&Ft in et(e)?function(e){var t=ct.call(e,Ft),n=e[Ft];try{e[Ft]=o;var r=!0}catch(e){}var i=dt.call(e);r&&(t?e[Ft]=n:delete e[Ft]);return i}(e):function(e){return dt.call(e)}(e)}function Jr(e,t){return e>t}function Zr(e,t){return null!=e&&ct.call(e,t)}function ei(e,t){return null!=e&&t in et(e)}function ti(e,t,r){for(var i=r?Jt:Xt,a=e[0].length,u=e.length,l=u,c=n(u),s=1/0,f=[];l--;){var d=e[l];l&&t&&(d=Zt(d,gn(t))),s=$n(d.length,s),c[l]=!r&&(t||a>=120&&d.length>=120)?new wr(l&&d):o}d=e[0];var p=-1,h=c[0];e:for(;++p<a&&f.length<s;){var m=d[p],v=t?t(m):m;if(m=r||0!==m?m:0,!(h?bn(h,v):i(f,v,r))){for(l=u;--l;){var g=c[l];if(!(g?bn(g,v):i(e[l],v,r)))continue e}h&&h.push(v),f.push(m)}}return f}function ni(e,t,n){var r=null==(e=ea(e,t=$i(t,e)))?e:e[ca(_a(t))];return null==r?o:$t(r,e,n)}function ri(e){return Tu(e)&&Xr(e)==U}function ii(e,t,n,r,i){return e===t||(null==e||null==t||!Tu(e)&&!Tu(t)?e!==e&&t!==t:function(e,t,n,r,i,a){var u=vu(e),l=vu(t),c=u?W:Uo(e),s=l?W:Uo(t),f=(c=c==U?Z:c)==Z,d=(s=s==U?Z:s)==Z,p=c==s;if(p&&wu(e)){if(!wu(t))return!1;u=!0,f=!1}if(p&&!f)return a||(a=new xr),u||Mu(e)?Po(e,t,n,r,i,a):function(e,t,n,r,i,o,a){switch(n){case ce:if(e.byteLength!=t.byteLength||e.byteOffset!=t.byteOffset)return!1;e=e.buffer,t=t.buffer;case le:return!(e.byteLength!=t.byteLength||!o(new wt(e),new wt(t)));case H:case $:case X:return du(+e,+t);case q:return e.name==t.name&&e.message==t.message;case te:case re:return e==t+"";case Y:var u=Cn;case ne:var l=r&m;if(u||(u=On),e.size!=t.size&&!l)return!1;var c=a.get(e);if(c)return c==t;r|=v,a.set(e,t);var s=Po(u(e),u(t),r,i,o,a);return a.delete(e),s;case ie:if(sr)return sr.call(e)==sr.call(t)}return!1}(e,t,c,n,r,i,a);if(!(n&m)){var h=f&&ct.call(e,"__wrapped__"),g=d&&ct.call(t,"__wrapped__");if(h||g){var y=h?e.value():e,b=g?t.value():t;return a||(a=new xr),i(y,b,n,r,a)}}if(!p)return!1;return a||(a=new xr),function(e,t,n,r,i,a){var u=n&m,l=Do(e),c=l.length,s=Do(t).length;if(c!=s&&!u)return!1;var f=c;for(;f--;){var d=l[f];if(!(u?d in t:ct.call(t,d)))return!1}var p=a.get(e);if(p&&a.get(t))return p==t;var h=!0;a.set(e,t),a.set(t,e);var v=u;for(;++f<c;){d=l[f];var g=e[d],y=t[d];if(r)var b=u?r(y,g,d,t,e,a):r(g,y,d,e,t,a);if(!(b===o?g===y||i(g,y,n,r,a):b)){h=!1;break}v||(v="constructor"==d)}if(h&&!v){var w=e.constructor,x=t.constructor;w!=x&&"constructor"in e&&"constructor"in t&&!("function"==typeof w&&w instanceof w&&"function"==typeof x&&x instanceof x)&&(h=!1)}return a.delete(e),a.delete(t),h}(e,t,n,r,i,a)}(e,t,n,r,ii,i))}function oi(e,t,n,r){var i=n.length,a=i,u=!r;if(null==e)return!a;for(e=et(e);i--;){var l=n[i];if(u&&l[2]?l[1]!==e[l[0]]:!(l[0]in e))return!1}for(;++i<a;){var c=(l=n[i])[0],s=e[c],f=l[1];if(u&&l[2]){if(s===o&&!(c in e))return!1}else{var d=new xr;if(r)var p=r(s,f,c,e,t,d);if(!(p===o?ii(f,s,m|v,r,d):p))return!1}}return!0}function ai(e){return!(!Cu(e)||(t=e,ft&&ft in t))&&(Eu(e)?mt:Ge).test(sa(e));var t}function ui(e){return"function"==typeof e?e:null==e?Ol:"object"==typeof e?vu(e)?pi(e[0],e[1]):di(e):Fl(e)}function li(e){if(!Yo(e))return Vn(e);var t=[];for(var n in et(e))ct.call(e,n)&&"constructor"!=n&&t.push(n);return t}function ci(e){if(!Cu(e))return function(e){var t=[];if(null!=e)for(var n in et(e))t.push(n);return t}(e);var t=Yo(e),n=[];for(var r in e)("constructor"!=r||!t&&ct.call(e,r))&&n.push(r);return n}function si(e,t){return e<t}function fi(e,t){var r=-1,i=yu(e)?n(e.length):[];return Fr(e,(function(e,n,o){i[++r]=t(e,n,o)})),i}function di(e){var t=Lo(e);return 1==t.length&&t[0][2]?Jo(t[0][0],t[0][1]):function(n){return n===e||oi(n,e,t)}}function pi(e,t){return qo(e)&&Xo(t)?Jo(ca(e),t):function(n){var r=Ju(n,e);return r===o&&r===t?Zu(n,e):ii(t,r,m|v)}}function hi(e,t,n,r,i){e!==t&&Hr(t,(function(a,u){if(i||(i=new xr),Cu(a))!function(e,t,n,r,i,a,u){var l=ta(e,n),c=ta(t,n),s=u.get(c);if(s)return void Cr(e,n,s);var f=a?a(l,c,n+"",e,t,u):o,d=f===o;if(d){var p=vu(c),h=!p&&wu(c),m=!p&&!h&&Mu(c);f=c,p||h||m?vu(l)?f=l:bu(l)?f=to(l):h?(d=!1,f=Ki(c,!0)):m?(d=!1,f=Xi(c,!0)):f=[]:Du(c)||mu(c)?(f=l,mu(l)?f=Vu(l):Cu(l)&&!Eu(l)||(f=Vo(c))):d=!1}d&&(u.set(c,f),i(f,c,r,a,u),u.delete(c));Cr(e,n,f)}(e,t,u,n,hi,r,i);else{var l=r?r(ta(e,u),a,u+"",e,t,i):o;l===o&&(l=a),Cr(e,u,l)}}),il)}function mi(e,t){var n=e.length;if(n)return $o(t+=t<0?n:0,n)?e[t]:o}function vi(e,t,n){var r=-1;return t=Zt(t.length?t:[Ol],gn(Mo())),function(e,t){var n=e.length;for(e.sort(t);n--;)e[n]=e[n].value;return e}(fi(e,(function(e,n,i){return{criteria:Zt(t,(function(t){return t(e)})),index:++r,value:e}})),(function(e,t){return function(e,t,n){var r=-1,i=e.criteria,o=t.criteria,a=i.length,u=n.length;for(;++r<a;){var l=Ji(i[r],o[r]);if(l){if(r>=u)return l;var c=n[r];return l*("desc"==c?-1:1)}}return e.index-t.index}(e,t,n)}))}function gi(e,t,n){for(var r=-1,i=t.length,o={};++r<i;){var a=t[r],u=Kr(e,a);n(u,a)&&Si(o,$i(a,e),u)}return o}function yi(e,t,n,r){var i=r?cn:ln,o=-1,a=t.length,u=e;for(e===t&&(t=to(t)),n&&(u=Zt(e,gn(n)));++o<a;)for(var l=0,c=t[o],s=n?n(c):c;(l=i(u,s,l,r))>-1;)u!==e&&jt.call(u,l,1),jt.call(e,l,1);return e}function bi(e,t){for(var n=e?t.length:0,r=n-1;n--;){var i=t[n];if(n==r||i!==o){var o=i;$o(i)?jt.call(e,i,1):Li(e,i)}}return e}function wi(e,t){return e+Fn(Qn()*(t-e+1))}function xi(e,t){var n="";if(!e||t<1||t>j)return n;do{t%2&&(n+=e),(t=Fn(t/2))&&(e+=e)}while(t);return n}function _i(e,t){return ia(Zo(e,t,Ol),e+"")}function Ei(e){return Er(dl(e))}function ki(e,t){var n=dl(e);return ua(n,Rr(t,0,n.length))}function Si(e,t,n,r){if(!Cu(e))return e;for(var i=-1,a=(t=$i(t,e)).length,u=a-1,l=e;null!=l&&++i<a;){var c=ca(t[i]),s=n;if(i!=u){var f=l[c];(s=r?r(f,c,l):o)===o&&(s=Cu(f)?f:$o(t[i+1])?[]:{})}Tr(l,c,s),l=l[c]}return e}var Ci=nr?function(e,t){return nr.set(e,t),e}:Ol,Ti=on?function(e,t){return on(e,"toString",{configurable:!0,enumerable:!1,value:Cl(t),writable:!0})}:Ol;function Pi(e){return ua(dl(e))}function Oi(e,t,r){var i=-1,o=e.length;t<0&&(t=-t>o?0:o+t),(r=r>o?o:r)<0&&(r+=o),o=t>r?0:r-t>>>0,t>>>=0;for(var a=n(o);++i<o;)a[i]=e[i+t];return a}function Di(e,t){var n;return Fr(e,(function(e,r,i){return!(n=t(e,r,i))})),!!n}function Ni(e,t,n){var r=0,i=null==e?r:e.length;if("number"==typeof t&&t===t&&i<=z){for(;r<i;){var o=r+i>>>1,a=e[o];null!==a&&!ju(a)&&(n?a<=t:a<t)?r=o+1:i=o}return i}return Ii(e,t,Ol,n)}function Ii(e,t,n,r){t=n(t);for(var i=0,a=null==e?0:e.length,u=t!==t,l=null===t,c=ju(t),s=t===o;i<a;){var f=Fn((i+a)/2),d=n(e[f]),p=d!==o,h=null===d,m=d===d,v=ju(d);if(u)var g=r||m;else g=s?m&&(r||p):l?m&&p&&(r||!h):c?m&&p&&!h&&(r||!v):!h&&!v&&(r?d<=t:d<t);g?i=f+1:a=f}return $n(a,F)}function Ri(e,t){for(var n=-1,r=e.length,i=0,o=[];++n<r;){var a=e[n],u=t?t(a):a;if(!n||!du(u,l)){var l=u;o[i++]=0===a?0:a}}return o}function ji(e){return"number"==typeof e?e:ju(e)?A:+e}function Mi(e){if("string"==typeof e)return e;if(vu(e))return Zt(e,Mi)+"";if(ju(e))return fr?fr.call(e):"";var t=e+"";return"0"==t&&1/e==-R?"-0":t}function Ai(e,t,n){var r=-1,i=Xt,o=e.length,u=!0,l=[],c=l;if(n)u=!1,i=Jt;else if(o>=a){var s=t?null:_o(e);if(s)return On(s);u=!1,i=bn,c=new wr}else c=t?[]:l;e:for(;++r<o;){var f=e[r],d=t?t(f):f;if(f=n||0!==f?f:0,u&&d===d){for(var p=c.length;p--;)if(c[p]===d)continue e;t&&c.push(d),l.push(f)}else i(c,d,n)||(c!==l&&c.push(d),l.push(f))}return l}function Li(e,t){return null==(e=ea(e,t=$i(t,e)))||delete e[ca(_a(t))]}function Fi(e,t,n,r){return Si(e,t,n(Kr(e,t)),r)}function zi(e,t,n,r){for(var i=e.length,o=r?i:-1;(r?o--:++o<i)&&t(e[o],o,e););return n?Oi(e,r?0:o,r?o+1:i):Oi(e,r?o+1:0,r?i:o)}function Bi(e,t){var n=e;return n instanceof vr&&(n=n.value()),tn(t,(function(e,t){return t.func.apply(t.thisArg,en([e],t.args))}),n)}function Ui(e,t,r){var i=e.length;if(i<2)return i?Ai(e[0]):[];for(var o=-1,a=n(i);++o<i;)for(var u=e[o],l=-1;++l<i;)l!=o&&(a[o]=Lr(a[o]||u,e[l],t,r));return Ai(Vr(a,1),t,r)}function Wi(e,t,n){for(var r=-1,i=e.length,a=t.length,u={};++r<i;){var l=r<a?t[r]:o;n(u,e[r],l)}return u}function Vi(e){return bu(e)?e:[]}function Hi(e){return"function"==typeof e?e:Ol}function $i(e,t){return vu(e)?e:qo(e,t)?[e]:la(Hu(e))}var Gi=_i;function qi(e,t,n){var r=e.length;return n=n===o?r:n,!t&&n>=r?e:Oi(e,t,n)}var Qi=pn||function(e){return Rt.clearTimeout(e)};function Ki(e,t){if(t)return e.slice();var n=e.length,r=_t?_t(n):new e.constructor(n);return e.copy(r),r}function Yi(e){var t=new e.constructor(e.byteLength);return new wt(t).set(new wt(e)),t}function Xi(e,t){var n=t?Yi(e.buffer):e.buffer;return new e.constructor(n,e.byteOffset,e.length)}function Ji(e,t){if(e!==t){var n=e!==o,r=null===e,i=e===e,a=ju(e),u=t!==o,l=null===t,c=t===t,s=ju(t);if(!l&&!s&&!a&&e>t||a&&u&&c&&!l&&!s||r&&u&&c||!n&&c||!i)return 1;if(!r&&!a&&!s&&e<t||s&&n&&i&&!r&&!a||l&&n&&i||!u&&i||!c)return-1}return 0}function Zi(e,t,r,i){for(var o=-1,a=e.length,u=r.length,l=-1,c=t.length,s=Hn(a-u,0),f=n(c+s),d=!i;++l<c;)f[l]=t[l];for(;++o<u;)(d||o<a)&&(f[r[o]]=e[o]);for(;s--;)f[l++]=e[o++];return f}function eo(e,t,r,i){for(var o=-1,a=e.length,u=-1,l=r.length,c=-1,s=t.length,f=Hn(a-l,0),d=n(f+s),p=!i;++o<f;)d[o]=e[o];for(var h=o;++c<s;)d[h+c]=t[c];for(;++u<l;)(p||o<a)&&(d[h+r[u]]=e[o++]);return d}function to(e,t){var r=-1,i=e.length;for(t||(t=n(i));++r<i;)t[r]=e[r];return t}function no(e,t,n,r){var i=!n;n||(n={});for(var a=-1,u=t.length;++a<u;){var l=t[a],c=r?r(n[l],e[l],l,n,e):o;c===o&&(c=e[l]),i?Nr(n,l,c):Tr(n,l,c)}return n}function ro(e,t){return function(n,r){var i=vu(n)?Gt:Or,o=t?t():{};return i(n,e,Mo(r,2),o)}}function io(e){return _i((function(t,n){var r=-1,i=n.length,a=i>1?n[i-1]:o,u=i>2?n[2]:o;for(a=e.length>3&&"function"==typeof a?(i--,a):o,u&&Go(n[0],n[1],u)&&(a=i<3?o:a,i=1),t=et(t);++r<i;){var l=n[r];l&&e(t,l,r,a)}return t}))}function oo(e,t){return function(n,r){if(null==n)return n;if(!yu(n))return e(n,r);for(var i=n.length,o=t?i:-1,a=et(n);(t?o--:++o<i)&&!1!==r(a[o],o,a););return n}}function ao(e){return function(t,n,r){for(var i=-1,o=et(t),a=r(t),u=a.length;u--;){var l=a[e?u:++i];if(!1===n(o[l],l,o))break}return t}}function uo(e){return function(t){var n=Sn(t=Hu(t))?In(t):o,r=n?n[0]:t.charAt(0),i=n?qi(n,1).join(""):t.slice(1);return r[e]()+i}}function lo(e){return function(t){return tn(El(ml(t).replace(yt,"")),e,"")}}function co(e){return function(){var t=arguments;switch(t.length){case 0:return new e;case 1:return new e(t[0]);case 2:return new e(t[0],t[1]);case 3:return new e(t[0],t[1],t[2]);case 4:return new e(t[0],t[1],t[2],t[3]);case 5:return new e(t[0],t[1],t[2],t[3],t[4]);case 6:return new e(t[0],t[1],t[2],t[3],t[4],t[5]);case 7:return new e(t[0],t[1],t[2],t[3],t[4],t[5],t[6])}var n=pr(e.prototype),r=e.apply(n,t);return Cu(r)?r:n}}function so(e){return function(t,n,r){var i=et(t);if(!yu(t)){var a=Mo(n,3);t=rl(t),n=function(e){return a(i[e],e,i)}}var u=e(t,n,r);return u>-1?i[a?t[u]:u]:o}}function fo(e){return Oo((function(t){var n=t.length,r=n,i=mr.prototype.thru;for(e&&t.reverse();r--;){var a=t[r];if("function"!=typeof a)throw new rt(l);if(i&&!u&&"wrapper"==Ro(a))var u=new mr([],!0)}for(r=u?r:n;++r<n;){var c=Ro(a=t[r]),s="wrapper"==c?Io(a):o;u=s&&Qo(s[0])&&s[1]==(k|w|_|S)&&!s[4].length&&1==s[9]?u[Ro(s[0])].apply(u,s[3]):1==a.length&&Qo(a)?u[c]():u.thru(a)}return function(){var e=arguments,r=e[0];if(u&&1==e.length&&vu(r))return u.plant(r).value();for(var i=0,o=n?t[i].apply(this,e):r;++i<n;)o=t[i].call(this,o);return o}}))}function po(e,t,r,i,a,u,l,c,s,f){var d=t&k,p=t&g,h=t&y,m=t&(w|x),v=t&C,b=h?o:co(e);return function g(){for(var y=arguments.length,w=n(y),x=y;x--;)w[x]=arguments[x];if(m)var _=jo(g),E=function(e,t){for(var n=e.length,r=0;n--;)e[n]===t&&++r;return r}(w,_);if(i&&(w=Zi(w,i,a,m)),u&&(w=eo(w,u,l,m)),y-=E,m&&y<f){var k=Pn(w,_);return wo(e,t,po,g.placeholder,r,w,k,c,s,f-y)}var S=p?r:this,C=h?S[e]:e;return y=w.length,c?w=function(e,t){var n=e.length,r=$n(t.length,n),i=to(e);for(;r--;){var a=t[r];e[r]=$o(a,n)?i[a]:o}return e}(w,c):v&&y>1&&w.reverse(),d&&s<y&&(w.length=s),this&&this!==Rt&&this instanceof g&&(C=b||co(C)),C.apply(S,w)}}function ho(e,t){return function(n,r){return function(e,t,n,r){return Gr(e,(function(e,i,o){t(r,n(e),i,o)})),r}(n,e,t(r),{})}}function mo(e,t){return function(n,r){var i;if(n===o&&r===o)return t;if(n!==o&&(i=n),r!==o){if(i===o)return r;"string"==typeof n||"string"==typeof r?(n=Mi(n),r=Mi(r)):(n=ji(n),r=ji(r)),i=e(n,r)}return i}}function vo(e){return Oo((function(t){return t=Zt(t,gn(Mo())),_i((function(n){var r=this;return e(t,(function(e){return $t(e,r,n)}))}))}))}function go(e,t){var n=(t=t===o?" ":Mi(t)).length;if(n<2)return n?xi(t,e):t;var r=xi(t,Ln(e/Nn(t)));return Sn(t)?qi(In(r),0,e).join(""):r.slice(0,e)}function yo(e){return function(t,r,i){return i&&"number"!=typeof i&&Go(t,r,i)&&(r=i=o),t=zu(t),r===o?(r=t,t=0):r=zu(r),function(e,t,r,i){for(var o=-1,a=Hn(Ln((t-e)/(r||1)),0),u=n(a);a--;)u[i?a:++o]=e,e+=r;return u}(t,r,i=i===o?t<r?1:-1:zu(i),e)}}function bo(e){return function(t,n){return"string"==typeof t&&"string"==typeof n||(t=Wu(t),n=Wu(n)),e(t,n)}}function wo(e,t,n,r,i,a,u,l,c,s){var f=t&w;t|=f?_:E,(t&=~(f?E:_))&b||(t&=~(g|y));var d=[e,t,i,f?a:o,f?u:o,f?o:a,f?o:u,l,c,s],p=n.apply(o,d);return Qo(e)&&na(p,d),p.placeholder=r,oa(p,e,t)}function xo(e){var t=Ze[e];return function(e,n){if(e=Wu(e),(n=null==n?0:$n(Bu(n),292))&&Un(e)){var r=(Hu(e)+"e").split("e");return+((r=(Hu(t(r[0]+"e"+(+r[1]+n)))+"e").split("e"))[0]+"e"+(+r[1]-n))}return t(e)}}var _o=Zn&&1/On(new Zn([,-0]))[1]==R?function(e){return new Zn(e)}:jl;function Eo(e){return function(t){var n=Uo(t);return n==Y?Cn(t):n==ne?Dn(t):function(e,t){return Zt(t,(function(t){return[t,e[t]]}))}(t,e(t))}}function ko(e,t,r,i,a,u,c,s){var d=t&y;if(!d&&"function"!=typeof e)throw new rt(l);var p=i?i.length:0;if(p||(t&=~(_|E),i=a=o),c=c===o?c:Hn(Bu(c),0),s=s===o?s:Bu(s),p-=a?a.length:0,t&E){var h=i,m=a;i=a=o}var v=d?o:Io(e),C=[e,t,r,i,a,h,m,u,c,s];if(v&&function(e,t){var n=e[1],r=t[1],i=n|r,o=i<(g|y|k),a=r==k&&n==w||r==k&&n==S&&e[7].length<=t[8]||r==(k|S)&&t[7].length<=t[8]&&n==w;if(!o&&!a)return e;r&g&&(e[2]=t[2],i|=n&g?0:b);var u=t[3];if(u){var l=e[3];e[3]=l?Zi(l,u,t[4]):u,e[4]=l?Pn(e[3],f):t[4]}(u=t[5])&&(l=e[5],e[5]=l?eo(l,u,t[6]):u,e[6]=l?Pn(e[5],f):t[6]);(u=t[7])&&(e[7]=u);r&k&&(e[8]=null==e[8]?t[8]:$n(e[8],t[8]));null==e[9]&&(e[9]=t[9]);e[0]=t[0],e[1]=i}(C,v),e=C[0],t=C[1],r=C[2],i=C[3],a=C[4],!(s=C[9]=C[9]===o?d?0:e.length:Hn(C[9]-p,0))&&t&(w|x)&&(t&=~(w|x)),t&&t!=g)T=t==w||t==x?function(e,t,r){var i=co(e);return function a(){for(var u=arguments.length,l=n(u),c=u,s=jo(a);c--;)l[c]=arguments[c];var f=u<3&&l[0]!==s&&l[u-1]!==s?[]:Pn(l,s);return(u-=f.length)<r?wo(e,t,po,a.placeholder,o,l,f,o,o,r-u):$t(this&&this!==Rt&&this instanceof a?i:e,this,l)}}(e,t,s):t!=_&&t!=(g|_)||a.length?po.apply(o,C):function(e,t,r,i){var o=t&g,a=co(e);return function t(){for(var u=-1,l=arguments.length,c=-1,s=i.length,f=n(s+l),d=this&&this!==Rt&&this instanceof t?a:e;++c<s;)f[c]=i[c];for(;l--;)f[c++]=arguments[++u];return $t(d,o?r:this,f)}}(e,t,r,i);else var T=function(e,t,n){var r=t&g,i=co(e);return function t(){return(this&&this!==Rt&&this instanceof t?i:e).apply(r?n:this,arguments)}}(e,t,r);return oa((v?Ci:na)(T,C),e,t)}function So(e,t,n,r){return e===o||du(e,at[n])&&!ct.call(r,n)?t:e}function Co(e,t,n,r,i,a){return Cu(e)&&Cu(t)&&(a.set(t,e),hi(e,t,o,Co,a),a.delete(t)),e}function To(e){return Du(e)?o:e}function Po(e,t,n,r,i,a){var u=n&m,l=e.length,c=t.length;if(l!=c&&!(u&&c>l))return!1;var s=a.get(e);if(s&&a.get(t))return s==t;var f=-1,d=!0,p=n&v?new wr:o;for(a.set(e,t),a.set(t,e);++f<l;){var h=e[f],g=t[f];if(r)var y=u?r(g,h,f,t,e,a):r(h,g,f,e,t,a);if(y!==o){if(y)continue;d=!1;break}if(p){if(!rn(t,(function(e,t){if(!bn(p,t)&&(h===e||i(h,e,n,r,a)))return p.push(t)}))){d=!1;break}}else if(h!==g&&!i(h,g,n,r,a)){d=!1;break}}return a.delete(e),a.delete(t),d}function Oo(e){return ia(Zo(e,o,ga),e+"")}function Do(e){return Yr(e,rl,zo)}function No(e){return Yr(e,il,Bo)}var Io=nr?function(e){return nr.get(e)}:jl;function Ro(e){for(var t=e.name+"",n=rr[t],r=ct.call(rr,t)?n.length:0;r--;){var i=n[r],o=i.func;if(null==o||o==e)return i.name}return t}function jo(e){return(ct.call(dr,"placeholder")?dr:e).placeholder}function Mo(){var e=dr.iteratee||Dl;return e=e===Dl?ui:e,arguments.length?e(arguments[0],arguments[1]):e}function Ao(e,t){var n=e.__data__;return function(e){var t=typeof e;return"string"==t||"number"==t||"symbol"==t||"boolean"==t?"__proto__"!==e:null===e}(t)?n["string"==typeof t?"string":"hash"]:n.map}function Lo(e){for(var t=rl(e),n=t.length;n--;){var r=t[n],i=e[r];t[n]=[r,i,Xo(i)]}return t}function Fo(e,t){var n=function(e,t){return null==e?o:e[t]}(e,t);return ai(n)?n:o}var zo=zn?function(e){return null==e?[]:(e=et(e),Yt(zn(e),(function(t){return It.call(e,t)})))}:Ul,Bo=zn?function(e){for(var t=[];e;)en(t,zo(e)),e=Pt(e);return t}:Ul,Uo=Xr;function Wo(e,t,n){for(var r=-1,i=(t=$i(t,e)).length,o=!1;++r<i;){var a=ca(t[r]);if(!(o=null!=e&&n(e,a)))break;e=e[a]}return o||++r!=i?o:!!(i=null==e?0:e.length)&&Su(i)&&$o(a,i)&&(vu(e)||mu(e))}function Vo(e){return"function"!=typeof e.constructor||Yo(e)?{}:pr(Pt(e))}function Ho(e){return vu(e)||mu(e)||!!(Mt&&e&&e[Mt])}function $o(e,t){var n=typeof e;return!!(t=null==t?j:t)&&("number"==n||"symbol"!=n&&Qe.test(e))&&e>-1&&e%1==0&&e<t}function Go(e,t,n){if(!Cu(n))return!1;var r=typeof t;return!!("number"==r?yu(n)&&$o(t,n.length):"string"==r&&t in n)&&du(n[t],e)}function qo(e,t){if(vu(e))return!1;var n=typeof e;return!("number"!=n&&"symbol"!=n&&"boolean"!=n&&null!=e&&!ju(e))||(De.test(e)||!Oe.test(e)||null!=t&&e in et(t))}function Qo(e){var t=Ro(e),n=dr[t];if("function"!=typeof n||!(t in vr.prototype))return!1;if(e===n)return!0;var r=Io(n);return!!r&&e===r[0]}(Yn&&Uo(new Yn(new ArrayBuffer(1)))!=ce||Xn&&Uo(new Xn)!=Y||Jn&&"[object Promise]"!=Uo(Jn.resolve())||Zn&&Uo(new Zn)!=ne||er&&Uo(new er)!=ae)&&(Uo=function(e){var t=Xr(e),n=t==Z?e.constructor:o,r=n?sa(n):"";if(r)switch(r){case ir:return ce;case or:return Y;case ar:return"[object Promise]";case ur:return ne;case lr:return ae}return t});var Ko=ut?Eu:Wl;function Yo(e){var t=e&&e.constructor;return e===("function"==typeof t&&t.prototype||at)}function Xo(e){return e===e&&!Cu(e)}function Jo(e,t){return function(n){return null!=n&&(n[e]===t&&(t!==o||e in et(n)))}}function Zo(e,t,r){return t=Hn(t===o?e.length-1:t,0),function(){for(var i=arguments,o=-1,a=Hn(i.length-t,0),u=n(a);++o<a;)u[o]=i[t+o];o=-1;for(var l=n(t+1);++o<t;)l[o]=i[o];return l[t]=r(u),$t(e,this,l)}}function ea(e,t){return t.length<2?e:Kr(e,Oi(t,0,-1))}function ta(e,t){if(("constructor"!==t||"function"!==typeof e[t])&&"__proto__"!=t)return e[t]}var na=aa(Ci),ra=An||function(e,t){return Rt.setTimeout(e,t)},ia=aa(Ti);function oa(e,t,n){var r=t+"";return ia(e,function(e,t){var n=t.length;if(!n)return e;var r=n-1;return t[r]=(n>1?"& ":"")+t[r],t=t.join(n>2?", ":" "),e.replace(Le,"{\n/* [wrapped with "+t+"] */\n")}(r,function(e,t){return qt(B,(function(n){var r="_."+n[0];t&n[1]&&!Xt(e,r)&&e.push(r)})),e.sort()}(function(e){var t=e.match(Fe);return t?t[1].split(ze):[]}(r),n)))}function aa(e){var t=0,n=0;return function(){var r=Gn(),i=D-(r-n);if(n=r,i>0){if(++t>=O)return arguments[0]}else t=0;return e.apply(o,arguments)}}function ua(e,t){var n=-1,r=e.length,i=r-1;for(t=t===o?r:t;++n<t;){var a=wi(n,i),u=e[a];e[a]=e[n],e[n]=u}return e.length=t,e}var la=function(e){var t=au(e,(function(e){return n.size===s&&n.clear(),e})),n=t.cache;return t}((function(e){var t=[];return 46===e.charCodeAt(0)&&t.push(""),e.replace(Ne,(function(e,n,r,i){t.push(r?i.replace(Ue,"$1"):n||e)})),t}));function ca(e){if("string"==typeof e||ju(e))return e;var t=e+"";return"0"==t&&1/e==-R?"-0":t}function sa(e){if(null!=e){try{return lt.call(e)}catch(e){}try{return e+""}catch(e){}}return""}function fa(e){if(e instanceof vr)return e.clone();var t=new mr(e.__wrapped__,e.__chain__);return t.__actions__=to(e.__actions__),t.__index__=e.__index__,t.__values__=e.__values__,t}var da=_i((function(e,t){return bu(e)?Lr(e,Vr(t,1,bu,!0)):[]})),pa=_i((function(e,t){var n=_a(t);return bu(n)&&(n=o),bu(e)?Lr(e,Vr(t,1,bu,!0),Mo(n,2)):[]})),ha=_i((function(e,t){var n=_a(t);return bu(n)&&(n=o),bu(e)?Lr(e,Vr(t,1,bu,!0),o,n):[]}));function ma(e,t,n){var r=null==e?0:e.length;if(!r)return-1;var i=null==n?0:Bu(n);return i<0&&(i=Hn(r+i,0)),un(e,Mo(t,3),i)}function va(e,t,n){var r=null==e?0:e.length;if(!r)return-1;var i=r-1;return n!==o&&(i=Bu(n),i=n<0?Hn(r+i,0):$n(i,r-1)),un(e,Mo(t,3),i,!0)}function ga(e){return(null==e?0:e.length)?Vr(e,1):[]}function ya(e){return e&&e.length?e[0]:o}var ba=_i((function(e){var t=Zt(e,Vi);return t.length&&t[0]===e[0]?ti(t):[]})),wa=_i((function(e){var t=_a(e),n=Zt(e,Vi);return t===_a(n)?t=o:n.pop(),n.length&&n[0]===e[0]?ti(n,Mo(t,2)):[]})),xa=_i((function(e){var t=_a(e),n=Zt(e,Vi);return(t="function"==typeof t?t:o)&&n.pop(),n.length&&n[0]===e[0]?ti(n,o,t):[]}));function _a(e){var t=null==e?0:e.length;return t?e[t-1]:o}var Ea=_i(ka);function ka(e,t){return e&&e.length&&t&&t.length?yi(e,t):e}var Sa=Oo((function(e,t){var n=null==e?0:e.length,r=Ir(e,t);return bi(e,Zt(t,(function(e){return $o(e,n)?+e:e})).sort(Ji)),r}));function Ca(e){return null==e?e:Kn.call(e)}var Ta=_i((function(e){return Ai(Vr(e,1,bu,!0))})),Pa=_i((function(e){var t=_a(e);return bu(t)&&(t=o),Ai(Vr(e,1,bu,!0),Mo(t,2))})),Oa=_i((function(e){var t=_a(e);return t="function"==typeof t?t:o,Ai(Vr(e,1,bu,!0),o,t)}));function Da(e){if(!e||!e.length)return[];var t=0;return e=Yt(e,(function(e){if(bu(e))return t=Hn(e.length,t),!0})),vn(t,(function(t){return Zt(e,dn(t))}))}function Na(e,t){if(!e||!e.length)return[];var n=Da(e);return null==t?n:Zt(n,(function(e){return $t(t,o,e)}))}var Ia=_i((function(e,t){return bu(e)?Lr(e,t):[]})),Ra=_i((function(e){return Ui(Yt(e,bu))})),ja=_i((function(e){var t=_a(e);return bu(t)&&(t=o),Ui(Yt(e,bu),Mo(t,2))})),Ma=_i((function(e){var t=_a(e);return t="function"==typeof t?t:o,Ui(Yt(e,bu),o,t)})),Aa=_i(Da);var La=_i((function(e){var t=e.length,n=t>1?e[t-1]:o;return n="function"==typeof n?(e.pop(),n):o,Na(e,n)}));function Fa(e){var t=dr(e);return t.__chain__=!0,t}function za(e,t){return t(e)}var Ba=Oo((function(e){var t=e.length,n=t?e[0]:0,r=this.__wrapped__,i=function(t){return Ir(t,e)};return!(t>1||this.__actions__.length)&&r instanceof vr&&$o(n)?((r=r.slice(n,+n+(t?1:0))).__actions__.push({func:za,args:[i],thisArg:o}),new mr(r,this.__chain__).thru((function(e){return t&&!e.length&&e.push(o),e}))):this.thru(i)}));var Ua=ro((function(e,t,n){ct.call(e,n)?++e[n]:Nr(e,n,1)}));var Wa=so(ma),Va=so(va);function Ha(e,t){return(vu(e)?qt:Fr)(e,Mo(t,3))}function $a(e,t){return(vu(e)?Qt:zr)(e,Mo(t,3))}var Ga=ro((function(e,t,n){ct.call(e,n)?e[n].push(t):Nr(e,n,[t])}));var qa=_i((function(e,t,r){var i=-1,o="function"==typeof t,a=yu(e)?n(e.length):[];return Fr(e,(function(e){a[++i]=o?$t(t,e,r):ni(e,t,r)})),a})),Qa=ro((function(e,t,n){Nr(e,n,t)}));function Ka(e,t){return(vu(e)?Zt:fi)(e,Mo(t,3))}var Ya=ro((function(e,t,n){e[n?0:1].push(t)}),(function(){return[[],[]]}));var Xa=_i((function(e,t){if(null==e)return[];var n=t.length;return n>1&&Go(e,t[0],t[1])?t=[]:n>2&&Go(t[0],t[1],t[2])&&(t=[t[0]]),vi(e,Vr(t,1),[])})),Ja=Mn||function(){return Rt.Date.now()};function Za(e,t,n){return t=n?o:t,t=e&&null==t?e.length:t,ko(e,k,o,o,o,o,t)}function eu(e,t){var n;if("function"!=typeof t)throw new rt(l);return e=Bu(e),function(){return--e>0&&(n=t.apply(this,arguments)),e<=1&&(t=o),n}}var tu=_i((function(e,t,n){var r=g;if(n.length){var i=Pn(n,jo(tu));r|=_}return ko(e,r,t,n,i)})),nu=_i((function(e,t,n){var r=g|y;if(n.length){var i=Pn(n,jo(nu));r|=_}return ko(t,r,e,n,i)}));function ru(e,t,n){var r,i,a,u,c,s,f=0,d=!1,p=!1,h=!0;if("function"!=typeof e)throw new rt(l);function m(t){var n=r,a=i;return r=i=o,f=t,u=e.apply(a,n)}function v(e){var n=e-s;return s===o||n>=t||n<0||p&&e-f>=a}function g(){var e=Ja();if(v(e))return y(e);c=ra(g,function(e){var n=t-(e-s);return p?$n(n,a-(e-f)):n}(e))}function y(e){return c=o,h&&r?m(e):(r=i=o,u)}function b(){var e=Ja(),n=v(e);if(r=arguments,i=this,s=e,n){if(c===o)return function(e){return f=e,c=ra(g,t),d?m(e):u}(s);if(p)return Qi(c),c=ra(g,t),m(s)}return c===o&&(c=ra(g,t)),u}return t=Wu(t)||0,Cu(n)&&(d=!!n.leading,a=(p="maxWait"in n)?Hn(Wu(n.maxWait)||0,t):a,h="trailing"in n?!!n.trailing:h),b.cancel=function(){c!==o&&Qi(c),f=0,r=s=i=c=o},b.flush=function(){return c===o?u:y(Ja())},b}var iu=_i((function(e,t){return Ar(e,1,t)})),ou=_i((function(e,t,n){return Ar(e,Wu(t)||0,n)}));function au(e,t){if("function"!=typeof e||null!=t&&"function"!=typeof t)throw new rt(l);var n=function(){var r=arguments,i=t?t.apply(this,r):r[0],o=n.cache;if(o.has(i))return o.get(i);var a=e.apply(this,r);return n.cache=o.set(i,a)||o,a};return n.cache=new(au.Cache||br),n}function uu(e){if("function"!=typeof e)throw new rt(l);return function(){var t=arguments;switch(t.length){case 0:return!e.call(this);case 1:return!e.call(this,t[0]);case 2:return!e.call(this,t[0],t[1]);case 3:return!e.call(this,t[0],t[1],t[2])}return!e.apply(this,t)}}au.Cache=br;var lu=Gi((function(e,t){var n=(t=1==t.length&&vu(t[0])?Zt(t[0],gn(Mo())):Zt(Vr(t,1),gn(Mo()))).length;return _i((function(r){for(var i=-1,o=$n(r.length,n);++i<o;)r[i]=t[i].call(this,r[i]);return $t(e,this,r)}))})),cu=_i((function(e,t){var n=Pn(t,jo(cu));return ko(e,_,o,t,n)})),su=_i((function(e,t){var n=Pn(t,jo(su));return ko(e,E,o,t,n)})),fu=Oo((function(e,t){return ko(e,S,o,o,o,t)}));function du(e,t){return e===t||e!==e&&t!==t}var pu=bo(Jr),hu=bo((function(e,t){return e>=t})),mu=ri(function(){return arguments}())?ri:function(e){return Tu(e)&&ct.call(e,"callee")&&!It.call(e,"callee")},vu=n.isArray,gu=zt?gn(zt):function(e){return Tu(e)&&Xr(e)==le};function yu(e){return null!=e&&Su(e.length)&&!Eu(e)}function bu(e){return Tu(e)&&yu(e)}var wu=Bn||Wl,xu=Bt?gn(Bt):function(e){return Tu(e)&&Xr(e)==$};function _u(e){if(!Tu(e))return!1;var t=Xr(e);return t==q||t==G||"string"==typeof e.message&&"string"==typeof e.name&&!Du(e)}function Eu(e){if(!Cu(e))return!1;var t=Xr(e);return t==Q||t==K||t==V||t==ee}function ku(e){return"number"==typeof e&&e==Bu(e)}function Su(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=j}function Cu(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)}function Tu(e){return null!=e&&"object"==typeof e}var Pu=Ut?gn(Ut):function(e){return Tu(e)&&Uo(e)==Y};function Ou(e){return"number"==typeof e||Tu(e)&&Xr(e)==X}function Du(e){if(!Tu(e)||Xr(e)!=Z)return!1;var t=Pt(e);if(null===t)return!0;var n=ct.call(t,"constructor")&&t.constructor;return"function"==typeof n&&n instanceof n&&lt.call(n)==pt}var Nu=Wt?gn(Wt):function(e){return Tu(e)&&Xr(e)==te};var Iu=Vt?gn(Vt):function(e){return Tu(e)&&Uo(e)==ne};function Ru(e){return"string"==typeof e||!vu(e)&&Tu(e)&&Xr(e)==re}function ju(e){return"symbol"==typeof e||Tu(e)&&Xr(e)==ie}var Mu=Ht?gn(Ht):function(e){return Tu(e)&&Su(e.length)&&!!Ct[Xr(e)]};var Au=bo(si),Lu=bo((function(e,t){return e<=t}));function Fu(e){if(!e)return[];if(yu(e))return Ru(e)?In(e):to(e);if(Lt&&e[Lt])return function(e){for(var t,n=[];!(t=e.next()).done;)n.push(t.value);return n}(e[Lt]());var t=Uo(e);return(t==Y?Cn:t==ne?On:dl)(e)}function zu(e){return e?(e=Wu(e))===R||e===-R?(e<0?-1:1)*M:e===e?e:0:0===e?e:0}function Bu(e){var t=zu(e),n=t%1;return t===t?n?t-n:t:0}function Uu(e){return e?Rr(Bu(e),0,L):0}function Wu(e){if("number"==typeof e)return e;if(ju(e))return A;if(Cu(e)){var t="function"==typeof e.valueOf?e.valueOf():e;e=Cu(t)?t+"":t}if("string"!=typeof e)return 0===e?e:+e;e=e.replace(je,"");var n=$e.test(e);return n||qe.test(e)?Dt(e.slice(2),n?2:8):He.test(e)?A:+e}function Vu(e){return no(e,il(e))}function Hu(e){return null==e?"":Mi(e)}var $u=io((function(e,t){if(Yo(t)||yu(t))no(t,rl(t),e);else for(var n in t)ct.call(t,n)&&Tr(e,n,t[n])})),Gu=io((function(e,t){no(t,il(t),e)})),qu=io((function(e,t,n,r){no(t,il(t),e,r)})),Qu=io((function(e,t,n,r){no(t,rl(t),e,r)})),Ku=Oo(Ir);var Yu=_i((function(e,t){e=et(e);var n=-1,r=t.length,i=r>2?t[2]:o;for(i&&Go(t[0],t[1],i)&&(r=1);++n<r;)for(var a=t[n],u=il(a),l=-1,c=u.length;++l<c;){var s=u[l],f=e[s];(f===o||du(f,at[s])&&!ct.call(e,s))&&(e[s]=a[s])}return e})),Xu=_i((function(e){return e.push(o,Co),$t(al,o,e)}));function Ju(e,t,n){var r=null==e?o:Kr(e,t);return r===o?n:r}function Zu(e,t){return null!=e&&Wo(e,t,ei)}var el=ho((function(e,t,n){null!=t&&"function"!=typeof t.toString&&(t=dt.call(t)),e[t]=n}),Cl(Ol)),tl=ho((function(e,t,n){null!=t&&"function"!=typeof t.toString&&(t=dt.call(t)),ct.call(e,t)?e[t].push(n):e[t]=[n]}),Mo),nl=_i(ni);function rl(e){return yu(e)?_r(e):li(e)}function il(e){return yu(e)?_r(e,!0):ci(e)}var ol=io((function(e,t,n){hi(e,t,n)})),al=io((function(e,t,n,r){hi(e,t,n,r)})),ul=Oo((function(e,t){var n={};if(null==e)return n;var r=!1;t=Zt(t,(function(t){return t=$i(t,e),r||(r=t.length>1),t})),no(e,No(e),n),r&&(n=jr(n,d|p|h,To));for(var i=t.length;i--;)Li(n,t[i]);return n}));var ll=Oo((function(e,t){return null==e?{}:function(e,t){return gi(e,t,(function(t,n){return Zu(e,n)}))}(e,t)}));function cl(e,t){if(null==e)return{};var n=Zt(No(e),(function(e){return[e]}));return t=Mo(t),gi(e,n,(function(e,n){return t(e,n[0])}))}var sl=Eo(rl),fl=Eo(il);function dl(e){return null==e?[]:yn(e,rl(e))}var pl=lo((function(e,t,n){return t=t.toLowerCase(),e+(n?hl(t):t)}));function hl(e){return _l(Hu(e).toLowerCase())}function ml(e){return(e=Hu(e))&&e.replace(Ke,_n).replace(bt,"")}var vl=lo((function(e,t,n){return e+(n?"-":"")+t.toLowerCase()})),gl=lo((function(e,t,n){return e+(n?" ":"")+t.toLowerCase()})),yl=uo("toLowerCase");var bl=lo((function(e,t,n){return e+(n?"_":"")+t.toLowerCase()}));var wl=lo((function(e,t,n){return e+(n?" ":"")+_l(t)}));var xl=lo((function(e,t,n){return e+(n?" ":"")+t.toUpperCase()})),_l=uo("toUpperCase");function El(e,t,n){return e=Hu(e),(t=n?o:t)===o?function(e){return Et.test(e)}(e)?function(e){return e.match(xt)||[]}(e):function(e){return e.match(Be)||[]}(e):e.match(t)||[]}var kl=_i((function(e,t){try{return $t(e,o,t)}catch(e){return _u(e)?e:new i(e)}})),Sl=Oo((function(e,t){return qt(t,(function(t){t=ca(t),Nr(e,t,tu(e[t],e))})),e}));function Cl(e){return function(){return e}}var Tl=fo(),Pl=fo(!0);function Ol(e){return e}function Dl(e){return ui("function"==typeof e?e:jr(e,d))}var Nl=_i((function(e,t){return function(n){return ni(n,e,t)}})),Il=_i((function(e,t){return function(n){return ni(e,n,t)}}));function Rl(e,t,n){var r=rl(t),i=Qr(t,r);null!=n||Cu(t)&&(i.length||!r.length)||(n=t,t=e,e=this,i=Qr(t,rl(t)));var o=!(Cu(n)&&"chain"in n)||!!n.chain,a=Eu(e);return qt(i,(function(n){var r=t[n];e[n]=r,a&&(e.prototype[n]=function(){var t=this.__chain__;if(o||t){var n=e(this.__wrapped__),i=n.__actions__=to(this.__actions__);return i.push({func:r,args:arguments,thisArg:e}),n.__chain__=t,n}return r.apply(e,en([this.value()],arguments))})})),e}function jl(){}var Ml=vo(Zt),Al=vo(Kt),Ll=vo(rn);function Fl(e){return qo(e)?dn(ca(e)):function(e){return function(t){return Kr(t,e)}}(e)}var zl=yo(),Bl=yo(!0);function Ul(){return[]}function Wl(){return!1}var Vl=mo((function(e,t){return e+t}),0),Hl=xo("ceil"),$l=mo((function(e,t){return e/t}),1),Gl=xo("floor");var ql=mo((function(e,t){return e*t}),1),Ql=xo("round"),Kl=mo((function(e,t){return e-t}),0);return dr.after=function(e,t){if("function"!=typeof t)throw new rt(l);return e=Bu(e),function(){if(--e<1)return t.apply(this,arguments)}},dr.ary=Za,dr.assign=$u,dr.assignIn=Gu,dr.assignInWith=qu,dr.assignWith=Qu,dr.at=Ku,dr.before=eu,dr.bind=tu,dr.bindAll=Sl,dr.bindKey=nu,dr.castArray=function(){if(!arguments.length)return[];var e=arguments[0];return vu(e)?e:[e]},dr.chain=Fa,dr.chunk=function(e,t,r){t=(r?Go(e,t,r):t===o)?1:Hn(Bu(t),0);var i=null==e?0:e.length;if(!i||t<1)return[];for(var a=0,u=0,l=n(Ln(i/t));a<i;)l[u++]=Oi(e,a,a+=t);return l},dr.compact=function(e){for(var t=-1,n=null==e?0:e.length,r=0,i=[];++t<n;){var o=e[t];o&&(i[r++]=o)}return i},dr.concat=function(){var e=arguments.length;if(!e)return[];for(var t=n(e-1),r=arguments[0],i=e;i--;)t[i-1]=arguments[i];return en(vu(r)?to(r):[r],Vr(t,1))},dr.cond=function(e){var t=null==e?0:e.length,n=Mo();return e=t?Zt(e,(function(e){if("function"!=typeof e[1])throw new rt(l);return[n(e[0]),e[1]]})):[],_i((function(n){for(var r=-1;++r<t;){var i=e[r];if($t(i[0],this,n))return $t(i[1],this,n)}}))},dr.conforms=function(e){return function(e){var t=rl(e);return function(n){return Mr(n,e,t)}}(jr(e,d))},dr.constant=Cl,dr.countBy=Ua,dr.create=function(e,t){var n=pr(e);return null==t?n:Dr(n,t)},dr.curry=function e(t,n,r){var i=ko(t,w,o,o,o,o,o,n=r?o:n);return i.placeholder=e.placeholder,i},dr.curryRight=function e(t,n,r){var i=ko(t,x,o,o,o,o,o,n=r?o:n);return i.placeholder=e.placeholder,i},dr.debounce=ru,dr.defaults=Yu,dr.defaultsDeep=Xu,dr.defer=iu,dr.delay=ou,dr.difference=da,dr.differenceBy=pa,dr.differenceWith=ha,dr.drop=function(e,t,n){var r=null==e?0:e.length;return r?Oi(e,(t=n||t===o?1:Bu(t))<0?0:t,r):[]},dr.dropRight=function(e,t,n){var r=null==e?0:e.length;return r?Oi(e,0,(t=r-(t=n||t===o?1:Bu(t)))<0?0:t):[]},dr.dropRightWhile=function(e,t){return e&&e.length?zi(e,Mo(t,3),!0,!0):[]},dr.dropWhile=function(e,t){return e&&e.length?zi(e,Mo(t,3),!0):[]},dr.fill=function(e,t,n,r){var i=null==e?0:e.length;return i?(n&&"number"!=typeof n&&Go(e,t,n)&&(n=0,r=i),function(e,t,n,r){var i=e.length;for((n=Bu(n))<0&&(n=-n>i?0:i+n),(r=r===o||r>i?i:Bu(r))<0&&(r+=i),r=n>r?0:Uu(r);n<r;)e[n++]=t;return e}(e,t,n,r)):[]},dr.filter=function(e,t){return(vu(e)?Yt:Wr)(e,Mo(t,3))},dr.flatMap=function(e,t){return Vr(Ka(e,t),1)},dr.flatMapDeep=function(e,t){return Vr(Ka(e,t),R)},dr.flatMapDepth=function(e,t,n){return n=n===o?1:Bu(n),Vr(Ka(e,t),n)},dr.flatten=ga,dr.flattenDeep=function(e){return(null==e?0:e.length)?Vr(e,R):[]},dr.flattenDepth=function(e,t){return(null==e?0:e.length)?Vr(e,t=t===o?1:Bu(t)):[]},dr.flip=function(e){return ko(e,C)},dr.flow=Tl,dr.flowRight=Pl,dr.fromPairs=function(e){for(var t=-1,n=null==e?0:e.length,r={};++t<n;){var i=e[t];r[i[0]]=i[1]}return r},dr.functions=function(e){return null==e?[]:Qr(e,rl(e))},dr.functionsIn=function(e){return null==e?[]:Qr(e,il(e))},dr.groupBy=Ga,dr.initial=function(e){return(null==e?0:e.length)?Oi(e,0,-1):[]},dr.intersection=ba,dr.intersectionBy=wa,dr.intersectionWith=xa,dr.invert=el,dr.invertBy=tl,dr.invokeMap=qa,dr.iteratee=Dl,dr.keyBy=Qa,dr.keys=rl,dr.keysIn=il,dr.map=Ka,dr.mapKeys=function(e,t){var n={};return t=Mo(t,3),Gr(e,(function(e,r,i){Nr(n,t(e,r,i),e)})),n},dr.mapValues=function(e,t){var n={};return t=Mo(t,3),Gr(e,(function(e,r,i){Nr(n,r,t(e,r,i))})),n},dr.matches=function(e){return di(jr(e,d))},dr.matchesProperty=function(e,t){return pi(e,jr(t,d))},dr.memoize=au,dr.merge=ol,dr.mergeWith=al,dr.method=Nl,dr.methodOf=Il,dr.mixin=Rl,dr.negate=uu,dr.nthArg=function(e){return e=Bu(e),_i((function(t){return mi(t,e)}))},dr.omit=ul,dr.omitBy=function(e,t){return cl(e,uu(Mo(t)))},dr.once=function(e){return eu(2,e)},dr.orderBy=function(e,t,n,r){return null==e?[]:(vu(t)||(t=null==t?[]:[t]),vu(n=r?o:n)||(n=null==n?[]:[n]),vi(e,t,n))},dr.over=Ml,dr.overArgs=lu,dr.overEvery=Al,dr.overSome=Ll,dr.partial=cu,dr.partialRight=su,dr.partition=Ya,dr.pick=ll,dr.pickBy=cl,dr.property=Fl,dr.propertyOf=function(e){return function(t){return null==e?o:Kr(e,t)}},dr.pull=Ea,dr.pullAll=ka,dr.pullAllBy=function(e,t,n){return e&&e.length&&t&&t.length?yi(e,t,Mo(n,2)):e},dr.pullAllWith=function(e,t,n){return e&&e.length&&t&&t.length?yi(e,t,o,n):e},dr.pullAt=Sa,dr.range=zl,dr.rangeRight=Bl,dr.rearg=fu,dr.reject=function(e,t){return(vu(e)?Yt:Wr)(e,uu(Mo(t,3)))},dr.remove=function(e,t){var n=[];if(!e||!e.length)return n;var r=-1,i=[],o=e.length;for(t=Mo(t,3);++r<o;){var a=e[r];t(a,r,e)&&(n.push(a),i.push(r))}return bi(e,i),n},dr.rest=function(e,t){if("function"!=typeof e)throw new rt(l);return _i(e,t=t===o?t:Bu(t))},dr.reverse=Ca,dr.sampleSize=function(e,t,n){return t=(n?Go(e,t,n):t===o)?1:Bu(t),(vu(e)?kr:ki)(e,t)},dr.set=function(e,t,n){return null==e?e:Si(e,t,n)},dr.setWith=function(e,t,n,r){return r="function"==typeof r?r:o,null==e?e:Si(e,t,n,r)},dr.shuffle=function(e){return(vu(e)?Sr:Pi)(e)},dr.slice=function(e,t,n){var r=null==e?0:e.length;return r?(n&&"number"!=typeof n&&Go(e,t,n)?(t=0,n=r):(t=null==t?0:Bu(t),n=n===o?r:Bu(n)),Oi(e,t,n)):[]},dr.sortBy=Xa,dr.sortedUniq=function(e){return e&&e.length?Ri(e):[]},dr.sortedUniqBy=function(e,t){return e&&e.length?Ri(e,Mo(t,2)):[]},dr.split=function(e,t,n){return n&&"number"!=typeof n&&Go(e,t,n)&&(t=n=o),(n=n===o?L:n>>>0)?(e=Hu(e))&&("string"==typeof t||null!=t&&!Nu(t))&&!(t=Mi(t))&&Sn(e)?qi(In(e),0,n):e.split(t,n):[]},dr.spread=function(e,t){if("function"!=typeof e)throw new rt(l);return t=null==t?0:Hn(Bu(t),0),_i((function(n){var r=n[t],i=qi(n,0,t);return r&&en(i,r),$t(e,this,i)}))},dr.tail=function(e){var t=null==e?0:e.length;return t?Oi(e,1,t):[]},dr.take=function(e,t,n){return e&&e.length?Oi(e,0,(t=n||t===o?1:Bu(t))<0?0:t):[]},dr.takeRight=function(e,t,n){var r=null==e?0:e.length;return r?Oi(e,(t=r-(t=n||t===o?1:Bu(t)))<0?0:t,r):[]},dr.takeRightWhile=function(e,t){return e&&e.length?zi(e,Mo(t,3),!1,!0):[]},dr.takeWhile=function(e,t){return e&&e.length?zi(e,Mo(t,3)):[]},dr.tap=function(e,t){return t(e),e},dr.throttle=function(e,t,n){var r=!0,i=!0;if("function"!=typeof e)throw new rt(l);return Cu(n)&&(r="leading"in n?!!n.leading:r,i="trailing"in n?!!n.trailing:i),ru(e,t,{leading:r,maxWait:t,trailing:i})},dr.thru=za,dr.toArray=Fu,dr.toPairs=sl,dr.toPairsIn=fl,dr.toPath=function(e){return vu(e)?Zt(e,ca):ju(e)?[e]:to(la(Hu(e)))},dr.toPlainObject=Vu,dr.transform=function(e,t,n){var r=vu(e),i=r||wu(e)||Mu(e);if(t=Mo(t,4),null==n){var o=e&&e.constructor;n=i?r?new o:[]:Cu(e)&&Eu(o)?pr(Pt(e)):{}}return(i?qt:Gr)(e,(function(e,r,i){return t(n,e,r,i)})),n},dr.unary=function(e){return Za(e,1)},dr.union=Ta,dr.unionBy=Pa,dr.unionWith=Oa,dr.uniq=function(e){return e&&e.length?Ai(e):[]},dr.uniqBy=function(e,t){return e&&e.length?Ai(e,Mo(t,2)):[]},dr.uniqWith=function(e,t){return t="function"==typeof t?t:o,e&&e.length?Ai(e,o,t):[]},dr.unset=function(e,t){return null==e||Li(e,t)},dr.unzip=Da,dr.unzipWith=Na,dr.update=function(e,t,n){return null==e?e:Fi(e,t,Hi(n))},dr.updateWith=function(e,t,n,r){return r="function"==typeof r?r:o,null==e?e:Fi(e,t,Hi(n),r)},dr.values=dl,dr.valuesIn=function(e){return null==e?[]:yn(e,il(e))},dr.without=Ia,dr.words=El,dr.wrap=function(e,t){return cu(Hi(t),e)},dr.xor=Ra,dr.xorBy=ja,dr.xorWith=Ma,dr.zip=Aa,dr.zipObject=function(e,t){return Wi(e||[],t||[],Tr)},dr.zipObjectDeep=function(e,t){return Wi(e||[],t||[],Si)},dr.zipWith=La,dr.entries=sl,dr.entriesIn=fl,dr.extend=Gu,dr.extendWith=qu,Rl(dr,dr),dr.add=Vl,dr.attempt=kl,dr.camelCase=pl,dr.capitalize=hl,dr.ceil=Hl,dr.clamp=function(e,t,n){return n===o&&(n=t,t=o),n!==o&&(n=(n=Wu(n))===n?n:0),t!==o&&(t=(t=Wu(t))===t?t:0),Rr(Wu(e),t,n)},dr.clone=function(e){return jr(e,h)},dr.cloneDeep=function(e){return jr(e,d|h)},dr.cloneDeepWith=function(e,t){return jr(e,d|h,t="function"==typeof t?t:o)},dr.cloneWith=function(e,t){return jr(e,h,t="function"==typeof t?t:o)},dr.conformsTo=function(e,t){return null==t||Mr(e,t,rl(t))},dr.deburr=ml,dr.defaultTo=function(e,t){return null==e||e!==e?t:e},dr.divide=$l,dr.endsWith=function(e,t,n){e=Hu(e),t=Mi(t);var r=e.length,i=n=n===o?r:Rr(Bu(n),0,r);return(n-=t.length)>=0&&e.slice(n,i)==t},dr.eq=du,dr.escape=function(e){return(e=Hu(e))&&Se.test(e)?e.replace(Ee,En):e},dr.escapeRegExp=function(e){return(e=Hu(e))&&Re.test(e)?e.replace(Ie,"\\$&"):e},dr.every=function(e,t,n){var r=vu(e)?Kt:Br;return n&&Go(e,t,n)&&(t=o),r(e,Mo(t,3))},dr.find=Wa,dr.findIndex=ma,dr.findKey=function(e,t){return an(e,Mo(t,3),Gr)},dr.findLast=Va,dr.findLastIndex=va,dr.findLastKey=function(e,t){return an(e,Mo(t,3),qr)},dr.floor=Gl,dr.forEach=Ha,dr.forEachRight=$a,dr.forIn=function(e,t){return null==e?e:Hr(e,Mo(t,3),il)},dr.forInRight=function(e,t){return null==e?e:$r(e,Mo(t,3),il)},dr.forOwn=function(e,t){return e&&Gr(e,Mo(t,3))},dr.forOwnRight=function(e,t){return e&&qr(e,Mo(t,3))},dr.get=Ju,dr.gt=pu,dr.gte=hu,dr.has=function(e,t){return null!=e&&Wo(e,t,Zr)},dr.hasIn=Zu,dr.head=ya,dr.identity=Ol,dr.includes=function(e,t,n,r){e=yu(e)?e:dl(e),n=n&&!r?Bu(n):0;var i=e.length;return n<0&&(n=Hn(i+n,0)),Ru(e)?n<=i&&e.indexOf(t,n)>-1:!!i&&ln(e,t,n)>-1},dr.indexOf=function(e,t,n){var r=null==e?0:e.length;if(!r)return-1;var i=null==n?0:Bu(n);return i<0&&(i=Hn(r+i,0)),ln(e,t,i)},dr.inRange=function(e,t,n){return t=zu(t),n===o?(n=t,t=0):n=zu(n),function(e,t,n){return e>=$n(t,n)&&e<Hn(t,n)}(e=Wu(e),t,n)},dr.invoke=nl,dr.isArguments=mu,dr.isArray=vu,dr.isArrayBuffer=gu,dr.isArrayLike=yu,dr.isArrayLikeObject=bu,dr.isBoolean=function(e){return!0===e||!1===e||Tu(e)&&Xr(e)==H},dr.isBuffer=wu,dr.isDate=xu,dr.isElement=function(e){return Tu(e)&&1===e.nodeType&&!Du(e)},dr.isEmpty=function(e){if(null==e)return!0;if(yu(e)&&(vu(e)||"string"==typeof e||"function"==typeof e.splice||wu(e)||Mu(e)||mu(e)))return!e.length;var t=Uo(e);if(t==Y||t==ne)return!e.size;if(Yo(e))return!li(e).length;for(var n in e)if(ct.call(e,n))return!1;return!0},dr.isEqual=function(e,t){return ii(e,t)},dr.isEqualWith=function(e,t,n){var r=(n="function"==typeof n?n:o)?n(e,t):o;return r===o?ii(e,t,o,n):!!r},dr.isError=_u,dr.isFinite=function(e){return"number"==typeof e&&Un(e)},dr.isFunction=Eu,dr.isInteger=ku,dr.isLength=Su,dr.isMap=Pu,dr.isMatch=function(e,t){return e===t||oi(e,t,Lo(t))},dr.isMatchWith=function(e,t,n){return n="function"==typeof n?n:o,oi(e,t,Lo(t),n)},dr.isNaN=function(e){return Ou(e)&&e!=+e},dr.isNative=function(e){if(Ko(e))throw new i(u);return ai(e)},dr.isNil=function(e){return null==e},dr.isNull=function(e){return null===e},dr.isNumber=Ou,dr.isObject=Cu,dr.isObjectLike=Tu,dr.isPlainObject=Du,dr.isRegExp=Nu,dr.isSafeInteger=function(e){return ku(e)&&e>=-j&&e<=j},dr.isSet=Iu,dr.isString=Ru,dr.isSymbol=ju,dr.isTypedArray=Mu,dr.isUndefined=function(e){return e===o},dr.isWeakMap=function(e){return Tu(e)&&Uo(e)==ae},dr.isWeakSet=function(e){return Tu(e)&&Xr(e)==ue},dr.join=function(e,t){return null==e?"":Wn.call(e,t)},dr.kebabCase=vl,dr.last=_a,dr.lastIndexOf=function(e,t,n){var r=null==e?0:e.length;if(!r)return-1;var i=r;return n!==o&&(i=(i=Bu(n))<0?Hn(r+i,0):$n(i,r-1)),t===t?function(e,t,n){for(var r=n+1;r--;)if(e[r]===t)return r;return r}(e,t,i):un(e,sn,i,!0)},dr.lowerCase=gl,dr.lowerFirst=yl,dr.lt=Au,dr.lte=Lu,dr.max=function(e){return e&&e.length?Ur(e,Ol,Jr):o},dr.maxBy=function(e,t){return e&&e.length?Ur(e,Mo(t,2),Jr):o},dr.mean=function(e){return fn(e,Ol)},dr.meanBy=function(e,t){return fn(e,Mo(t,2))},dr.min=function(e){return e&&e.length?Ur(e,Ol,si):o},dr.minBy=function(e,t){return e&&e.length?Ur(e,Mo(t,2),si):o},dr.stubArray=Ul,dr.stubFalse=Wl,dr.stubObject=function(){return{}},dr.stubString=function(){return""},dr.stubTrue=function(){return!0},dr.multiply=ql,dr.nth=function(e,t){return e&&e.length?mi(e,Bu(t)):o},dr.noConflict=function(){return Rt._===this&&(Rt._=ht),this},dr.noop=jl,dr.now=Ja,dr.pad=function(e,t,n){e=Hu(e);var r=(t=Bu(t))?Nn(e):0;if(!t||r>=t)return e;var i=(t-r)/2;return go(Fn(i),n)+e+go(Ln(i),n)},dr.padEnd=function(e,t,n){e=Hu(e);var r=(t=Bu(t))?Nn(e):0;return t&&r<t?e+go(t-r,n):e},dr.padStart=function(e,t,n){e=Hu(e);var r=(t=Bu(t))?Nn(e):0;return t&&r<t?go(t-r,n)+e:e},dr.parseInt=function(e,t,n){return n||null==t?t=0:t&&(t=+t),qn(Hu(e).replace(Me,""),t||0)},dr.random=function(e,t,n){if(n&&"boolean"!=typeof n&&Go(e,t,n)&&(t=n=o),n===o&&("boolean"==typeof t?(n=t,t=o):"boolean"==typeof e&&(n=e,e=o)),e===o&&t===o?(e=0,t=1):(e=zu(e),t===o?(t=e,e=0):t=zu(t)),e>t){var r=e;e=t,t=r}if(n||e%1||t%1){var i=Qn();return $n(e+i*(t-e+Ot("1e-"+((i+"").length-1))),t)}return wi(e,t)},dr.reduce=function(e,t,n){var r=vu(e)?tn:hn,i=arguments.length<3;return r(e,Mo(t,4),n,i,Fr)},dr.reduceRight=function(e,t,n){var r=vu(e)?nn:hn,i=arguments.length<3;return r(e,Mo(t,4),n,i,zr)},dr.repeat=function(e,t,n){return t=(n?Go(e,t,n):t===o)?1:Bu(t),xi(Hu(e),t)},dr.replace=function(){var e=arguments,t=Hu(e[0]);return e.length<3?t:t.replace(e[1],e[2])},dr.result=function(e,t,n){var r=-1,i=(t=$i(t,e)).length;for(i||(i=1,e=o);++r<i;){var a=null==e?o:e[ca(t[r])];a===o&&(r=i,a=n),e=Eu(a)?a.call(e):a}return e},dr.round=Ql,dr.runInContext=e,dr.sample=function(e){return(vu(e)?Er:Ei)(e)},dr.size=function(e){if(null==e)return 0;if(yu(e))return Ru(e)?Nn(e):e.length;var t=Uo(e);return t==Y||t==ne?e.size:li(e).length},dr.snakeCase=bl,dr.some=function(e,t,n){var r=vu(e)?rn:Di;return n&&Go(e,t,n)&&(t=o),r(e,Mo(t,3))},dr.sortedIndex=function(e,t){return Ni(e,t)},dr.sortedIndexBy=function(e,t,n){return Ii(e,t,Mo(n,2))},dr.sortedIndexOf=function(e,t){var n=null==e?0:e.length;if(n){var r=Ni(e,t);if(r<n&&du(e[r],t))return r}return-1},dr.sortedLastIndex=function(e,t){return Ni(e,t,!0)},dr.sortedLastIndexBy=function(e,t,n){return Ii(e,t,Mo(n,2),!0)},dr.sortedLastIndexOf=function(e,t){if(null==e?0:e.length){var n=Ni(e,t,!0)-1;if(du(e[n],t))return n}return-1},dr.startCase=wl,dr.startsWith=function(e,t,n){return e=Hu(e),n=null==n?0:Rr(Bu(n),0,e.length),t=Mi(t),e.slice(n,n+t.length)==t},dr.subtract=Kl,dr.sum=function(e){return e&&e.length?mn(e,Ol):0},dr.sumBy=function(e,t){return e&&e.length?mn(e,Mo(t,2)):0},dr.template=function(e,t,n){var r=dr.templateSettings;n&&Go(e,t,n)&&(t=o),e=Hu(e),t=qu({},t,r,So);var i,a,u=qu({},t.imports,r.imports,So),l=rl(u),c=yn(u,l),s=0,f=t.interpolate||Ye,d="__p += '",p=tt((t.escape||Ye).source+"|"+f.source+"|"+(f===Pe?We:Ye).source+"|"+(t.evaluate||Ye).source+"|$","g"),h="//# sourceURL="+(ct.call(t,"sourceURL")?(t.sourceURL+"").replace(/[\r\n]/g," "):"lodash.templateSources["+ ++St+"]")+"\n";e.replace(p,(function(t,n,r,o,u,l){return r||(r=o),d+=e.slice(s,l).replace(Xe,kn),n&&(i=!0,d+="' +\n__e("+n+") +\n'"),u&&(a=!0,d+="';\n"+u+";\n__p += '"),r&&(d+="' +\n((__t = ("+r+")) == null ? '' : __t) +\n'"),s=l+t.length,t})),d+="';\n";var m=ct.call(t,"variable")&&t.variable;m||(d="with (obj) {\n"+d+"\n}\n"),d=(a?d.replace(be,""):d).replace(we,"$1").replace(xe,"$1;"),d="function("+(m||"obj")+") {\n"+(m?"":"obj || (obj = {});\n")+"var __t, __p = ''"+(i?", __e = _.escape":"")+(a?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+d+"return __p\n}";var v=kl((function(){return Je(l,h+"return "+d).apply(o,c)}));if(v.source=d,_u(v))throw v;return v},dr.times=function(e,t){if((e=Bu(e))<1||e>j)return[];var n=L,r=$n(e,L);t=Mo(t),e-=L;for(var i=vn(r,t);++n<e;)t(n);return i},dr.toFinite=zu,dr.toInteger=Bu,dr.toLength=Uu,dr.toLower=function(e){return Hu(e).toLowerCase()},dr.toNumber=Wu,dr.toSafeInteger=function(e){return e?Rr(Bu(e),-j,j):0===e?e:0},dr.toString=Hu,dr.toUpper=function(e){return Hu(e).toUpperCase()},dr.trim=function(e,t,n){if((e=Hu(e))&&(n||t===o))return e.replace(je,"");if(!e||!(t=Mi(t)))return e;var r=In(e),i=In(t);return qi(r,wn(r,i),xn(r,i)+1).join("")},dr.trimEnd=function(e,t,n){if((e=Hu(e))&&(n||t===o))return e.replace(Ae,"");if(!e||!(t=Mi(t)))return e;var r=In(e);return qi(r,0,xn(r,In(t))+1).join("")},dr.trimStart=function(e,t,n){if((e=Hu(e))&&(n||t===o))return e.replace(Me,"");if(!e||!(t=Mi(t)))return e;var r=In(e);return qi(r,wn(r,In(t))).join("")},dr.truncate=function(e,t){var n=T,r=P;if(Cu(t)){var i="separator"in t?t.separator:i;n="length"in t?Bu(t.length):n,r="omission"in t?Mi(t.omission):r}var a=(e=Hu(e)).length;if(Sn(e)){var u=In(e);a=u.length}if(n>=a)return e;var l=n-Nn(r);if(l<1)return r;var c=u?qi(u,0,l).join(""):e.slice(0,l);if(i===o)return c+r;if(u&&(l+=c.length-l),Nu(i)){if(e.slice(l).search(i)){var s,f=c;for(i.global||(i=tt(i.source,Hu(Ve.exec(i))+"g")),i.lastIndex=0;s=i.exec(f);)var d=s.index;c=c.slice(0,d===o?l:d)}}else if(e.indexOf(Mi(i),l)!=l){var p=c.lastIndexOf(i);p>-1&&(c=c.slice(0,p))}return c+r},dr.unescape=function(e){return(e=Hu(e))&&ke.test(e)?e.replace(_e,Rn):e},dr.uniqueId=function(e){var t=++st;return Hu(e)+t},dr.upperCase=xl,dr.upperFirst=_l,dr.each=Ha,dr.eachRight=$a,dr.first=ya,Rl(dr,function(){var e={};return Gr(dr,(function(t,n){ct.call(dr.prototype,n)||(e[n]=t)})),e}(),{chain:!1}),dr.VERSION="4.17.15",qt(["bind","bindKey","curry","curryRight","partial","partialRight"],(function(e){dr[e].placeholder=dr})),qt(["drop","take"],(function(e,t){vr.prototype[e]=function(n){n=n===o?1:Hn(Bu(n),0);var r=this.__filtered__&&!t?new vr(this):this.clone();return r.__filtered__?r.__takeCount__=$n(n,r.__takeCount__):r.__views__.push({size:$n(n,L),type:e+(r.__dir__<0?"Right":"")}),r},vr.prototype[e+"Right"]=function(t){return this.reverse()[e](t).reverse()}})),qt(["filter","map","takeWhile"],(function(e,t){var n=t+1,r=n==N||3==n;vr.prototype[e]=function(e){var t=this.clone();return t.__iteratees__.push({iteratee:Mo(e,3),type:n}),t.__filtered__=t.__filtered__||r,t}})),qt(["head","last"],(function(e,t){var n="take"+(t?"Right":"");vr.prototype[e]=function(){return this[n](1).value()[0]}})),qt(["initial","tail"],(function(e,t){var n="drop"+(t?"":"Right");vr.prototype[e]=function(){return this.__filtered__?new vr(this):this[n](1)}})),vr.prototype.compact=function(){return this.filter(Ol)},vr.prototype.find=function(e){return this.filter(e).head()},vr.prototype.findLast=function(e){return this.reverse().find(e)},vr.prototype.invokeMap=_i((function(e,t){return"function"==typeof e?new vr(this):this.map((function(n){return ni(n,e,t)}))})),vr.prototype.reject=function(e){return this.filter(uu(Mo(e)))},vr.prototype.slice=function(e,t){e=Bu(e);var n=this;return n.__filtered__&&(e>0||t<0)?new vr(n):(e<0?n=n.takeRight(-e):e&&(n=n.drop(e)),t!==o&&(n=(t=Bu(t))<0?n.dropRight(-t):n.take(t-e)),n)},vr.prototype.takeRightWhile=function(e){return this.reverse().takeWhile(e).reverse()},vr.prototype.toArray=function(){return this.take(L)},Gr(vr.prototype,(function(e,t){var n=/^(?:filter|find|map|reject)|While$/.test(t),r=/^(?:head|last)$/.test(t),i=dr[r?"take"+("last"==t?"Right":""):t],a=r||/^find/.test(t);i&&(dr.prototype[t]=function(){var t=this.__wrapped__,u=r?[1]:arguments,l=t instanceof vr,c=u[0],s=l||vu(t),f=function(e){var t=i.apply(dr,en([e],u));return r&&d?t[0]:t};s&&n&&"function"==typeof c&&1!=c.length&&(l=s=!1);var d=this.__chain__,p=!!this.__actions__.length,h=a&&!d,m=l&&!p;if(!a&&s){t=m?t:new vr(this);var v=e.apply(t,u);return v.__actions__.push({func:za,args:[f],thisArg:o}),new mr(v,d)}return h&&m?e.apply(this,u):(v=this.thru(f),h?r?v.value()[0]:v.value():v)})})),qt(["pop","push","shift","sort","splice","unshift"],(function(e){var t=it[e],n=/^(?:push|sort|unshift)$/.test(e)?"tap":"thru",r=/^(?:pop|shift)$/.test(e);dr.prototype[e]=function(){var e=arguments;if(r&&!this.__chain__){var i=this.value();return t.apply(vu(i)?i:[],e)}return this[n]((function(n){return t.apply(vu(n)?n:[],e)}))}})),Gr(vr.prototype,(function(e,t){var n=dr[t];if(n){var r=n.name+"";ct.call(rr,r)||(rr[r]=[]),rr[r].push({name:t,func:n})}})),rr[po(o,y).name]=[{name:"wrapper",func:o}],vr.prototype.clone=function(){var e=new vr(this.__wrapped__);return e.__actions__=to(this.__actions__),e.__dir__=this.__dir__,e.__filtered__=this.__filtered__,e.__iteratees__=to(this.__iteratees__),e.__takeCount__=this.__takeCount__,e.__views__=to(this.__views__),e},vr.prototype.reverse=function(){if(this.__filtered__){var e=new vr(this);e.__dir__=-1,e.__filtered__=!0}else(e=this.clone()).__dir__*=-1;return e},vr.prototype.value=function(){var e=this.__wrapped__.value(),t=this.__dir__,n=vu(e),r=t<0,i=n?e.length:0,o=function(e,t,n){var r=-1,i=n.length;for(;++r<i;){var o=n[r],a=o.size;switch(o.type){case"drop":e+=a;break;case"dropRight":t-=a;break;case"take":t=$n(t,e+a);break;case"takeRight":e=Hn(e,t-a)}}return{start:e,end:t}}(0,i,this.__views__),a=o.start,u=o.end,l=u-a,c=r?u:a-1,s=this.__iteratees__,f=s.length,d=0,p=$n(l,this.__takeCount__);if(!n||!r&&i==l&&p==l)return Bi(e,this.__actions__);var h=[];e:for(;l--&&d<p;){for(var m=-1,v=e[c+=t];++m<f;){var g=s[m],y=g.iteratee,b=g.type,w=y(v);if(b==I)v=w;else if(!w){if(b==N)continue e;break e}}h[d++]=v}return h},dr.prototype.at=Ba,dr.prototype.chain=function(){return Fa(this)},dr.prototype.commit=function(){return new mr(this.value(),this.__chain__)},dr.prototype.next=function(){this.__values__===o&&(this.__values__=Fu(this.value()));var e=this.__index__>=this.__values__.length;return{done:e,value:e?o:this.__values__[this.__index__++]}},dr.prototype.plant=function(e){for(var t,n=this;n instanceof hr;){var r=fa(n);r.__index__=0,r.__values__=o,t?i.__wrapped__=r:t=r;var i=r;n=n.__wrapped__}return i.__wrapped__=e,t},dr.prototype.reverse=function(){var e=this.__wrapped__;if(e instanceof vr){var t=e;return this.__actions__.length&&(t=new vr(this)),(t=t.reverse()).__actions__.push({func:za,args:[Ca],thisArg:o}),new mr(t,this.__chain__)}return this.thru(Ca)},dr.prototype.toJSON=dr.prototype.valueOf=dr.prototype.value=function(){return Bi(this.__wrapped__,this.__actions__)},dr.prototype.first=dr.prototype.head,Lt&&(dr.prototype[Lt]=function(){return this}),dr}();Rt._=jn,(i=function(){return jn}.call(t,n,t,r))===o||(r.exports=i)}).call(this)}).call(this,n(43),n(91)(e))},function(e,t){var n=Math.ceil,r=Math.floor;e.exports=function(e){return isNaN(e=+e)?0:(e>0?r:n)(e)}},function(e,t,n){var r=n(2),i=n(10);e.exports=function(e,t){try{i(r,e,t)}catch(n){r[e]=t}return t}},function(e,t){var n={}.toString;e.exports=function(e){return n.call(e).slice(8,-1)}},function(e,t,n){var r=n(16);e.exports=function(e){return Object(r(e))}},function(e,t){e.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},function(e,t,n){var r=n(8);e.exports=function(e,t){if(!r(e))return e;var n,i;if(t&&"function"==typeof(n=e.toString)&&!r(i=n.call(e)))return i;if("function"==typeof(n=e.valueOf)&&!r(i=n.call(e)))return i;if(!t&&"function"==typeof(n=e.toString)&&!r(i=n.call(e)))return i;throw TypeError("Can't convert object to primitive value")}},function(e,t){e.exports={}},function(e,t){e.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},function(e,t,n){var r=n(4),i=n(24),o="".split;e.exports=r((function(){return!Object("z").propertyIsEnumerable(0)}))?function(e){return"String"==i(e)?o.call(e,""):Object(e)}:Object},function(e,t,n){var r=n(9),i=n(44),o=n(26),a=n(18),u=n(27),l=n(11),c=n(32),s=Object.getOwnPropertyDescriptor;t.f=r?s:function(e,t){if(e=a(e),t=u(t,!0),c)try{return s(e,t)}catch(e){}if(l(e,t))return o(!i.f.call(e,t),e[t])}},function(e,t,n){var r=n(9),i=n(4),o=n(36);e.exports=!r&&!i((function(){return 7!=Object.defineProperty(o("div"),"a",{get:function(){return 7}}).a}))},function(e,t,n){var r=n(15);e.exports=r("native-function-to-string",Function.toString)},function(e,t){var n=0,r=Math.random();e.exports=function(e){return"Symbol("+String(void 0===e?"":e)+")_"+(++n+r).toString(36)}},function(e,t,n){var r=n(11),i=n(18),o=n(48).indexOf,a=n(28);e.exports=function(e,t){var n,u=i(e),l=0,c=[];for(n in u)!r(a,n)&&r(u,n)&&c.push(n);for(;t.length>l;)r(u,n=t[l++])&&(~o(c,n)||c.push(n));return c}},function(e,t,n){var r=n(2),i=n(8),o=r.document,a=i(o)&&i(o.createElement);e.exports=function(e){return a?o.createElement(e):{}}},function(e,t,n){var r=n(15),i=n(34),o=r("keys");e.exports=function(e){return o[e]||(o[e]=i(e))}},function(e,t,n){var r=n(58),i=n(2),o=function(e){return"function"==typeof e?e:void 0};e.exports=function(e,t){return arguments.length<2?o(r[e])||o(i[e]):r[e]&&r[e][t]||i[e]&&i[e][t]}},function(e,t,n){var r=n(22),i=Math.max,o=Math.min;e.exports=function(e,t){var n=r(e);return n<0?i(n+t,0):o(n,t)}},function(e,t,n){var r=n(8),i=n(41),o=n(17)("species");e.exports=function(e,t){var n;return i(e)&&("function"!=typeof(n=e.constructor)||n!==Array&&!i(n.prototype)?r(n)&&null===(n=n[o])&&(n=void 0):n=void 0),new(void 0===n?Array:n)(0===t?0:t)}},function(e,t,n){var r=n(24);e.exports=Array.isArray||function(e){return"Array"==r(e)}},function(e,t,n){"use strict";function r(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}n.d(t,"a",(function(){return r}))},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"===typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";var r={}.propertyIsEnumerable,i=Object.getOwnPropertyDescriptor,o=i&&!r.call({1:2},1);t.f=o?function(e){var t=i(this,e);return!!t&&t.enumerable}:r},function(e,t,n){var r=n(2),i=n(15),o=n(10),a=n(11),u=n(23),l=n(33),c=n(54),s=c.get,f=c.enforce,d=String(l).split("toString");i("inspectSource",(function(e){return l.call(e)})),(e.exports=function(e,t,n,i){var l=!!i&&!!i.unsafe,c=!!i&&!!i.enumerable,s=!!i&&!!i.noTargetGet;"function"==typeof n&&("string"!=typeof t||a(n,"name")||o(n,"name",t),f(n).source=d.join("string"==typeof t?t:"")),e!==r?(l?!s&&e[t]&&(c=!0):delete e[t],c?e[t]=n:o(e,t,n)):c?e[t]=n:u(t,n)})(Function.prototype,"toString",(function(){return"function"==typeof this&&s(this).source||l.call(this)}))},function(e,t,n){var r=n(61),i=n(30),o=n(25),a=n(20),u=n(40),l=[].push,c=function(e){var t=1==e,n=2==e,c=3==e,s=4==e,f=6==e,d=5==e||f;return function(p,h,m,v){for(var g,y,b=o(p),w=i(b),x=r(h,m,3),_=a(w.length),E=0,k=v||u,S=t?k(p,_):n?k(p,0):void 0;_>E;E++)if((d||E in w)&&(y=x(g=w[E],E,b),e))if(t)S[E]=y;else if(y)switch(e){case 3:return!0;case 5:return g;case 6:return E;case 2:l.call(S,g)}else if(s)return!1;return f?-1:c||s?s:S}};e.exports={forEach:c(0),map:c(1),filter:c(2),some:c(3),every:c(4),find:c(5),findIndex:c(6)}},function(e,t){e.exports=function(e){if("function"!=typeof e)throw TypeError(String(e)+" is not a function");return e}},function(e,t,n){var r=n(18),i=n(20),o=n(39),a=function(e){return function(t,n,a){var u,l=r(t),c=i(l.length),s=o(a,c);if(e&&n!=n){for(;c>s;)if((u=l[s++])!=u)return!0}else for(;c>s;s++)if((e||s in l)&&l[s]===n)return e||s||0;return!e&&-1}};e.exports={includes:a(!0),indexOf:a(!1)}},function(e,t){e.exports=function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}},function(e,t){t.f=Object.getOwnPropertySymbols},function(e,t,n){var r=n(35),i=n(29);e.exports=Object.keys||function(e){return r(e,i)}},function(e,t,n){var r=n(4),i=n(17)("species");e.exports=function(e){return!r((function(){var t=[];return(t.constructor={})[i]=function(){return{foo:1}},1!==t[e](Boolean).foo}))}},function(e,t){e.exports=!1},function(e,t,n){var r,i,o,a=n(55),u=n(2),l=n(8),c=n(10),s=n(11),f=n(37),d=n(28),p=u.WeakMap;if(a){var h=new p,m=h.get,v=h.has,g=h.set;r=function(e,t){return g.call(h,e,t),t},i=function(e){return m.call(h,e)||{}},o=function(e){return v.call(h,e)}}else{var y=f("state");d[y]=!0,r=function(e,t){return c(e,y,t),t},i=function(e){return s(e,y)?e[y]:{}},o=function(e){return s(e,y)}}e.exports={set:r,get:i,has:o,enforce:function(e){return o(e)?i(e):r(e,{})},getterFor:function(e){return function(t){var n;if(!l(t)||(n=i(t)).type!==e)throw TypeError("Incompatible receiver, "+e+" required");return n}}}},function(e,t,n){var r=n(2),i=n(33),o=r.WeakMap;e.exports="function"===typeof o&&/native code/.test(i.call(o))},function(e,t,n){var r=n(11),i=n(57),o=n(31),a=n(19);e.exports=function(e,t){for(var n=i(t),u=a.f,l=o.f,c=0;c<n.length;c++){var s=n[c];r(e,s)||u(e,s,l(t,s))}}},function(e,t,n){var r=n(38),i=n(59),o=n(50),a=n(13);e.exports=r("Reflect","ownKeys")||function(e){var t=i.f(a(e)),n=o.f;return n?t.concat(n(e)):t}},function(e,t,n){e.exports=n(2)},function(e,t,n){var r=n(35),i=n(29).concat("length","prototype");t.f=Object.getOwnPropertyNames||function(e){return r(e,i)}},function(e,t,n){var r=n(4),i=/#|\.prototype\./,o=function(e,t){var n=u[a(e)];return n==c||n!=l&&("function"==typeof t?r(t):!!t)},a=o.normalize=function(e){return String(e).replace(i,".").toLowerCase()},u=o.data={},l=o.NATIVE="N",c=o.POLYFILL="P";e.exports=o},function(e,t,n){var r=n(47);e.exports=function(e,t,n){if(r(e),void 0===t)return e;switch(n){case 0:return function(){return e.call(t)};case 1:return function(n){return e.call(t,n)};case 2:return function(n,r){return e.call(t,n,r)};case 3:return function(n,r,i){return e.call(t,n,r,i)}}return function(){return e.apply(t,arguments)}}},function(e,t,n){var r=n(4);e.exports=!!Object.getOwnPropertySymbols&&!r((function(){return!String(Symbol())}))},,function(e,t){e.exports=function(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}},function(e,t,n){"use strict";!function e(){if("undefined"!==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"===typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE){0;try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}}(),e.exports=n(121)},function(e,t,n){"use strict";var r=n(27),i=n(19),o=n(26);e.exports=function(e,t,n){var a=r(t);a in e?i.f(e,a,o(0,n)):e[a]=n}},function(e,t){var n=e.exports={version:"2.6.9"};"number"==typeof __e&&(__e=n)},function(e,t,n){"use strict";e.exports=function(e,t,n,r,i,o,a,u){if(!e){var l;if(void 0===t)l=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var c=[n,r,i,o,a,u],s=0;(l=new Error(t.replace(/%s/g,(function(){return c[s++]})))).name="Invariant Violation"}throw l.framesToPop=1,l}}},function(e,t,n){"use strict";var r=n(4);e.exports=function(e,t){var n=[][e];return!n||!r((function(){n.call(null,t||function(){throw 1},1)}))}},function(e,t){e.exports="\t\n\v\f\r                　\u2028\u2029\ufeff"},,,,,,,function(e,t,n){"use strict";var r=Object.getOwnPropertySymbols,i=Object.prototype.hasOwnProperty,o=Object.prototype.propertyIsEnumerable;function a(e){if(null===e||void 0===e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,u,l=a(e),c=1;c<arguments.length;c++){for(var s in n=Object(arguments[c]))i.call(n,s)&&(l[s]=n[s]);if(r){u=r(n);for(var f=0;f<u.length;f++)o.call(n,u[f])&&(l[u[f]]=n[u[f]])}}return l}},function(e,t,n){e.exports=n(330)()},function(e,t,n){"use strict";var r=n(12),i=n(46).map;r({target:"Array",proto:!0,forced:!n(52)("map")},{map:function(e){return i(this,e,arguments.length>1?arguments[1]:void 0)}})},,function(e,t,n){var r=n(99),i=n(67),o=n(309),a=n(311),u=n(139),l=function(e,t,n){var c,s,f,d=e&l.F,p=e&l.G,h=e&l.S,m=e&l.P,v=e&l.B,g=e&l.W,y=p?i:i[t]||(i[t]={}),b=y.prototype,w=p?r:h?r[t]:(r[t]||{}).prototype;for(c in p&&(n=t),n)(s=!d&&w&&void 0!==w[c])&&u(y,c)||(f=s?w[c]:n[c],y[c]=p&&"function"!=typeof w[c]?n[c]:v&&s?o(f,r):g&&w[c]==f?function(e){var t=function(t,n,r){if(this instanceof e){switch(arguments.length){case 0:return new e;case 1:return new e(t);case 2:return new e(t,n)}return new e(t,n,r)}return e.apply(this,arguments)};return t.prototype=e.prototype,t}(f):m&&"function"==typeof f?o(Function.call,f):f,m&&((y.virtual||(y.virtual={}))[c]=f,e&l.R&&b&&!b[c]&&a(b,c,f)))};l.F=1,l.G=2,l.S=4,l.P=8,l.B=16,l.W=32,l.U=64,l.R=128,e.exports=l},function(e,t,n){e.exports=!n(101)((function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a}))},function(e,t,n){"use strict";var r=n(305),i=n(306),o=n(136);e.exports={formats:o,parse:i,stringify:r}},,,,,,function(e,t,n){var r=n(16),i="["+n(70)+"]",o=RegExp("^"+i+i+"*"),a=RegExp(i+i+"*$"),u=function(e){return function(t){var n=String(r(t));return 1&e&&(n=n.replace(o,"")),2&e&&(n=n.replace(a,"")),n}};e.exports={start:u(1),end:u(2),trim:u(3)}},,function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t){e.exports=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}},function(e,t){function n(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}e.exports=function(e,t,r){return t&&n(e.prototype,t),r&&n(e,r),e}},function(e,t,n){var r=n(125),i=n(49);e.exports=function(e,t){return!t||"object"!==r(t)&&"function"!==typeof t?i(e):t}},function(e,t){function n(t){return e.exports=n=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},n(t)}e.exports=n},function(e,t,n){var r=n(126);e.exports=function(e,t){if("function"!==typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&r(e,t)}},function(e,t){function n(){return e.exports=n=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},n.apply(this,arguments)}e.exports=n},,function(e,t){var n=e.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=n)},function(e,t){e.exports=function(e){return"object"===typeof e?null!==e:"function"===typeof e}},function(e,t){e.exports=function(e){try{return!!e()}catch(e){return!0}}},function(e,t,n){var r=n(316),i=n(144);e.exports=Object.keys||function(e){return r(e,i)}},function(e,t,n){"use strict";!function e(){if("undefined"!==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"===typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE){0;try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}}(),e.exports=n(297)},function(e,t,n){e.exports=function(e,t){var n,r,i,o=0;function a(){var t,a,u=r,l=arguments.length;e:for(;u;){if(u.args.length===arguments.length){for(a=0;a<l;a++)if(u.args[a]!==arguments[a]){u=u.next;continue e}return u!==r&&(u===i&&(i=u.prev),u.prev.next=u.next,u.next&&(u.next.prev=u.prev),u.next=r,u.prev=null,r.prev=u,r=u),u.val}u=u.next}for(t=new Array(l),a=0;a<l;a++)t[a]=arguments[a];return u={args:t,val:e.apply(null,t)},r?(r.prev=u,u.next=r):i=u,o===n?(i=i.prev).next=null:o++,r=u,u.val}return t&&t.maxSize&&(n=t.maxSize),a.clear=function(){r=null,i=null,o=0},a}},function(e,t,n){e.exports=n(307)},function(e,t,n){e.exports=n(339)},,function(e,t,n){"use strict";var r=n(12),i=n(46).filter;r({target:"Array",proto:!0,forced:!n(52)("filter")},{filter:function(e){return i(this,e,arguments.length>1?arguments[1]:void 0)}})},function(e,t,n){"use strict";var r=n(12),i=n(47),o=n(25),a=n(4),u=n(69),l=[].sort,c=[1,2,3],s=a((function(){c.sort(void 0)})),f=a((function(){c.sort(null)})),d=u("sort");r({target:"Array",proto:!0,forced:s||!f||d},{sort:function(e){return void 0===e?l.call(o(this)):l.call(o(this),i(e))}})},function(e,t,n){"use strict";var r=n(12),i=n(39),o=n(22),a=n(20),u=n(25),l=n(40),c=n(66),s=n(52),f=Math.max,d=Math.min;r({target:"Array",proto:!0,forced:!s("splice")},{splice:function(e,t){var n,r,s,p,h,m,v=u(this),g=a(v.length),y=i(e,g),b=arguments.length;if(0===b?n=r=0:1===b?(n=0,r=g-y):(n=b-2,r=d(f(o(t),0),g-y)),g+n-r>9007199254740991)throw TypeError("Maximum allowed length exceeded");for(s=l(v,r),p=0;p<r;p++)(h=y+p)in v&&c(s,p,v[h]);if(s.length=r,n<r){for(p=y;p<g-r;p++)m=p+n,(h=p+r)in v?v[m]=v[h]:delete v[m];for(p=g;p>g-r+n;p--)delete v[p-1]}else if(n>r)for(p=g-r;p>y;p--)m=p+n-1,(h=p+r-1)in v?v[m]=v[h]:delete v[m];for(p=0;p<n;p++)v[p+y]=arguments[p+2];return v.length=g-r+n,s}})},,function(e,t,n){var r=n(12),i=n(25),o=n(51);r({target:"Object",stat:!0,forced:n(4)((function(){o(1)}))},{keys:function(e){return o(i(e))}})},,,function(e,t,n){var r=n(12),i=n(116);r({global:!0,forced:parseInt!=i},{parseInt:i})},function(e,t,n){var r=n(2),i=n(89).trim,o=n(70),a=r.parseInt,u=/^[+-]?0[Xx]/,l=8!==a(o+"08")||22!==a(o+"0x16");e.exports=l?function(e,t){var n=i(String(e));return a(n,t>>>0||(u.test(n)?16:10))}:a},,,,function(e,t,n){"use strict";var r=n(77),i="function"===typeof Symbol&&Symbol.for,o=i?Symbol.for("react.element"):60103,a=i?Symbol.for("react.portal"):60106,u=i?Symbol.for("react.fragment"):60107,l=i?Symbol.for("react.strict_mode"):60108,c=i?Symbol.for("react.profiler"):60114,s=i?Symbol.for("react.provider"):60109,f=i?Symbol.for("react.context"):60110,d=i?Symbol.for("react.forward_ref"):60112,p=i?Symbol.for("react.suspense"):60113,h=i?Symbol.for("react.suspense_list"):60120,m=i?Symbol.for("react.memo"):60115,v=i?Symbol.for("react.lazy"):60116;i&&Symbol.for("react.fundamental"),i&&Symbol.for("react.responder");var g="function"===typeof Symbol&&Symbol.iterator;function y(e){for(var t=e.message,n="https://reactjs.org/docs/error-decoder.html?invariant="+t,r=1;r<arguments.length;r++)n+="&args[]="+encodeURIComponent(arguments[r]);return e.message="Minified React error #"+t+"; visit "+n+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",e}var b={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},w={};function x(e,t,n){this.props=e,this.context=t,this.refs=w,this.updater=n||b}function _(){}function E(e,t,n){this.props=e,this.context=t,this.refs=w,this.updater=n||b}x.prototype.isReactComponent={},x.prototype.setState=function(e,t){if("object"!==typeof e&&"function"!==typeof e&&null!=e)throw y(Error(85));this.updater.enqueueSetState(this,e,t,"setState")},x.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},_.prototype=x.prototype;var k=E.prototype=new _;k.constructor=E,r(k,x.prototype),k.isPureReactComponent=!0;var S={current:null},C={suspense:null},T={current:null},P=Object.prototype.hasOwnProperty,O={key:!0,ref:!0,__self:!0,__source:!0};function D(e,t,n){var r=void 0,i={},a=null,u=null;if(null!=t)for(r in void 0!==t.ref&&(u=t.ref),void 0!==t.key&&(a=""+t.key),t)P.call(t,r)&&!O.hasOwnProperty(r)&&(i[r]=t[r]);var l=arguments.length-2;if(1===l)i.children=n;else if(1<l){for(var c=Array(l),s=0;s<l;s++)c[s]=arguments[s+2];i.children=c}if(e&&e.defaultProps)for(r in l=e.defaultProps)void 0===i[r]&&(i[r]=l[r]);return{$$typeof:o,type:e,key:a,ref:u,props:i,_owner:T.current}}function N(e){return"object"===typeof e&&null!==e&&e.$$typeof===o}var I=/\/+/g,R=[];function j(e,t,n,r){if(R.length){var i=R.pop();return i.result=e,i.keyPrefix=t,i.func=n,i.context=r,i.count=0,i}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function M(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>R.length&&R.push(e)}function A(e,t,n){return null==e?0:function e(t,n,r,i){var u=typeof t;"undefined"!==u&&"boolean"!==u||(t=null);var l=!1;if(null===t)l=!0;else switch(u){case"string":case"number":l=!0;break;case"object":switch(t.$$typeof){case o:case a:l=!0}}if(l)return r(i,t,""===n?"."+L(t,0):n),1;if(l=0,n=""===n?".":n+":",Array.isArray(t))for(var c=0;c<t.length;c++){var s=n+L(u=t[c],c);l+=e(u,s,r,i)}else if(null===t||"object"!==typeof t?s=null:s="function"===typeof(s=g&&t[g]||t["@@iterator"])?s:null,"function"===typeof s)for(t=s.call(t),c=0;!(u=t.next()).done;)l+=e(u=u.value,s=n+L(u,c++),r,i);else if("object"===u)throw r=""+t,y(Error(31),"[object Object]"===r?"object with keys {"+Object.keys(t).join(", ")+"}":r,"");return l}(e,"",t,n)}function L(e,t){return"object"===typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,(function(e){return t[e]}))}(e.key):t.toString(36)}function F(e,t){e.func.call(e.context,t,e.count++)}function z(e,t,n){var r=e.result,i=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?B(e,r,n,(function(e){return e})):null!=e&&(N(e)&&(e=function(e,t){return{$$typeof:o,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(e,i+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(I,"$&/")+"/")+n)),r.push(e))}function B(e,t,n,r,i){var o="";null!=n&&(o=(""+n).replace(I,"$&/")+"/"),A(e,z,t=j(t,o,r,i)),M(t)}function U(){var e=S.current;if(null===e)throw y(Error(321));return e}var W={Children:{map:function(e,t,n){if(null==e)return e;var r=[];return B(e,r,null,t,n),r},forEach:function(e,t,n){if(null==e)return e;A(e,F,t=j(null,null,t,n)),M(t)},count:function(e){return A(e,(function(){return null}),null)},toArray:function(e){var t=[];return B(e,t,null,(function(e){return e})),t},only:function(e){if(!N(e))throw y(Error(143));return e}},createRef:function(){return{current:null}},Component:x,PureComponent:E,createContext:function(e,t){return void 0===t&&(t=null),(e={$$typeof:f,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:s,_context:e},e.Consumer=e},forwardRef:function(e){return{$$typeof:d,render:e}},lazy:function(e){return{$$typeof:v,_ctor:e,_status:-1,_result:null}},memo:function(e,t){return{$$typeof:m,type:e,compare:void 0===t?null:t}},useCallback:function(e,t){return U().useCallback(e,t)},useContext:function(e,t){return U().useContext(e,t)},useEffect:function(e,t){return U().useEffect(e,t)},useImperativeHandle:function(e,t,n){return U().useImperativeHandle(e,t,n)},useDebugValue:function(){},useLayoutEffect:function(e,t){return U().useLayoutEffect(e,t)},useMemo:function(e,t){return U().useMemo(e,t)},useReducer:function(e,t,n){return U().useReducer(e,t,n)},useRef:function(e){return U().useRef(e)},useState:function(e){return U().useState(e)},Fragment:u,Profiler:c,StrictMode:l,Suspense:p,unstable_SuspenseList:h,createElement:D,cloneElement:function(e,t,n){if(null===e||void 0===e)throw y(Error(267),e);var i=void 0,a=r({},e.props),u=e.key,l=e.ref,c=e._owner;if(null!=t){void 0!==t.ref&&(l=t.ref,c=T.current),void 0!==t.key&&(u=""+t.key);var s=void 0;for(i in e.type&&e.type.defaultProps&&(s=e.type.defaultProps),t)P.call(t,i)&&!O.hasOwnProperty(i)&&(a[i]=void 0===t[i]&&void 0!==s?s[i]:t[i])}if(1===(i=arguments.length-2))a.children=n;else if(1<i){s=Array(i);for(var f=0;f<i;f++)s[f]=arguments[f+2];a.children=s}return{$$typeof:o,type:e.type,key:u,ref:l,props:a,_owner:c}},createFactory:function(e){var t=D.bind(null,e);return t.type=e,t},isValidElement:N,version:"16.9.0",unstable_withSuspenseConfig:function(e,t){var n=C.suspense;C.suspense=void 0===t?null:t;try{e()}finally{C.suspense=n}},__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentDispatcher:S,ReactCurrentBatchConfig:C,ReactCurrentOwner:T,IsSomeRendererActing:{current:!1},assign:r}},V={default:W},H=V&&W||V;e.exports=H.default||H},function(e,t,n){"use strict";var r=n(6),i=n(77),o=n(122);function a(e){for(var t=e.message,n="https://reactjs.org/docs/error-decoder.html?invariant="+t,r=1;r<arguments.length;r++)n+="&args[]="+encodeURIComponent(arguments[r]);return e.message="Minified React error #"+t+"; visit "+n+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",e}if(!r)throw a(Error(227));var u=null,l={};function c(){if(u)for(var e in l){var t=l[e],n=u.indexOf(e);if(!(-1<n))throw a(Error(96),e);if(!f[n]){if(!t.extractEvents)throw a(Error(97),e);for(var r in f[n]=t,n=t.eventTypes){var i=void 0,o=n[r],c=t,p=r;if(d.hasOwnProperty(p))throw a(Error(99),p);d[p]=o;var h=o.phasedRegistrationNames;if(h){for(i in h)h.hasOwnProperty(i)&&s(h[i],c,p);i=!0}else o.registrationName?(s(o.registrationName,c,p),i=!0):i=!1;if(!i)throw a(Error(98),r,e)}}}}function s(e,t,n){if(p[e])throw a(Error(100),e);p[e]=t,h[e]=t.eventTypes[n].dependencies}var f=[],d={},p={},h={};function m(e,t,n,r,i,o,a,u,l){var c=Array.prototype.slice.call(arguments,3);try{t.apply(n,c)}catch(e){this.onError(e)}}var v=!1,g=null,y=!1,b=null,w={onError:function(e){v=!0,g=e}};function x(e,t,n,r,i,o,a,u,l){v=!1,g=null,m.apply(w,arguments)}var _=null,E=null,k=null;function S(e,t,n){var r=e.type||"unknown-event";e.currentTarget=k(n),function(e,t,n,r,i,o,u,l,c){if(x.apply(this,arguments),v){if(!v)throw a(Error(198));var s=g;v=!1,g=null,y||(y=!0,b=s)}}(r,t,void 0,e),e.currentTarget=null}function C(e,t){if(null==t)throw a(Error(30));return null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}function T(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)}var P=null;function O(e){if(e){var t=e._dispatchListeners,n=e._dispatchInstances;if(Array.isArray(t))for(var r=0;r<t.length&&!e.isPropagationStopped();r++)S(e,t[r],n[r]);else t&&S(e,t,n);e._dispatchListeners=null,e._dispatchInstances=null,e.isPersistent()||e.constructor.release(e)}}function D(e){if(null!==e&&(P=C(P,e)),e=P,P=null,e){if(T(e,O),P)throw a(Error(95));if(y)throw e=b,y=!1,b=null,e}}var N={injectEventPluginOrder:function(e){if(u)throw a(Error(101));u=Array.prototype.slice.call(e),c()},injectEventPluginsByName:function(e){var t,n=!1;for(t in e)if(e.hasOwnProperty(t)){var r=e[t];if(!l.hasOwnProperty(t)||l[t]!==r){if(l[t])throw a(Error(102),t);l[t]=r,n=!0}}n&&c()}};function I(e,t){var n=e.stateNode;if(!n)return null;var r=_(n);if(!r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!==typeof n)throw a(Error(231),t,typeof n);return n}var R=Math.random().toString(36).slice(2),j="__reactInternalInstance$"+R,M="__reactEventHandlers$"+R;function A(e){if(e[j])return e[j];for(;!e[j];){if(!e.parentNode)return null;e=e.parentNode}return 5===(e=e[j]).tag||6===e.tag?e:null}function L(e){return!(e=e[j])||5!==e.tag&&6!==e.tag?null:e}function F(e){if(5===e.tag||6===e.tag)return e.stateNode;throw a(Error(33))}function z(e){return e[M]||null}function B(e){do{e=e.return}while(e&&5!==e.tag);return e||null}function U(e,t,n){(t=I(e,n.dispatchConfig.phasedRegistrationNames[t]))&&(n._dispatchListeners=C(n._dispatchListeners,t),n._dispatchInstances=C(n._dispatchInstances,e))}function W(e){if(e&&e.dispatchConfig.phasedRegistrationNames){for(var t=e._targetInst,n=[];t;)n.push(t),t=B(t);for(t=n.length;0<t--;)U(n[t],"captured",e);for(t=0;t<n.length;t++)U(n[t],"bubbled",e)}}function V(e,t,n){e&&n&&n.dispatchConfig.registrationName&&(t=I(e,n.dispatchConfig.registrationName))&&(n._dispatchListeners=C(n._dispatchListeners,t),n._dispatchInstances=C(n._dispatchInstances,e))}function H(e){e&&e.dispatchConfig.registrationName&&V(e._targetInst,null,e)}function $(e){T(e,W)}var G=!("undefined"===typeof window||"undefined"===typeof window.document||"undefined"===typeof window.document.createElement);function q(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var Q={animationend:q("Animation","AnimationEnd"),animationiteration:q("Animation","AnimationIteration"),animationstart:q("Animation","AnimationStart"),transitionend:q("Transition","TransitionEnd")},K={},Y={};function X(e){if(K[e])return K[e];if(!Q[e])return e;var t,n=Q[e];for(t in n)if(n.hasOwnProperty(t)&&t in Y)return K[e]=n[t];return e}G&&(Y=document.createElement("div").style,"AnimationEvent"in window||(delete Q.animationend.animation,delete Q.animationiteration.animation,delete Q.animationstart.animation),"TransitionEvent"in window||delete Q.transitionend.transition);var J=X("animationend"),Z=X("animationiteration"),ee=X("animationstart"),te=X("transitionend"),ne="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),re=null,ie=null,oe=null;function ae(){if(oe)return oe;var e,t,n=ie,r=n.length,i="value"in re?re.value:re.textContent,o=i.length;for(e=0;e<r&&n[e]===i[e];e++);var a=r-e;for(t=1;t<=a&&n[r-t]===i[o-t];t++);return oe=i.slice(e,1<t?1-t:void 0)}function ue(){return!0}function le(){return!1}function ce(e,t,n,r){for(var i in this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=n,e=this.constructor.Interface)e.hasOwnProperty(i)&&((t=e[i])?this[i]=t(n):"target"===i?this.target=r:this[i]=n[i]);return this.isDefaultPrevented=(null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue)?ue:le,this.isPropagationStopped=le,this}function se(e,t,n,r){if(this.eventPool.length){var i=this.eventPool.pop();return this.call(i,e,t,n,r),i}return new this(e,t,n,r)}function fe(e){if(!(e instanceof this))throw a(Error(279));e.destructor(),10>this.eventPool.length&&this.eventPool.push(e)}function de(e){e.eventPool=[],e.getPooled=se,e.release=fe}i(ce.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!==typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=ue)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!==typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=ue)},persist:function(){this.isPersistent=ue},isPersistent:le,destructor:function(){var e,t=this.constructor.Interface;for(e in t)this[e]=null;this.nativeEvent=this._targetInst=this.dispatchConfig=null,this.isPropagationStopped=this.isDefaultPrevented=le,this._dispatchInstances=this._dispatchListeners=null}}),ce.Interface={type:null,target:null,currentTarget:function(){return null},eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null},ce.extend=function(e){function t(){}function n(){return r.apply(this,arguments)}var r=this;t.prototype=r.prototype;var o=new t;return i(o,n.prototype),n.prototype=o,n.prototype.constructor=n,n.Interface=i({},r.Interface,e),n.extend=r.extend,de(n),n},de(ce);var pe=ce.extend({data:null}),he=ce.extend({data:null}),me=[9,13,27,32],ve=G&&"CompositionEvent"in window,ge=null;G&&"documentMode"in document&&(ge=document.documentMode);var ye=G&&"TextEvent"in window&&!ge,be=G&&(!ve||ge&&8<ge&&11>=ge),we=String.fromCharCode(32),xe={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["compositionend","keypress","textInput","paste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"blur compositionend keydown keypress keyup mousedown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"blur compositionstart keydown keypress keyup mousedown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"blur compositionupdate keydown keypress keyup mousedown".split(" ")}},_e=!1;function Ee(e,t){switch(e){case"keyup":return-1!==me.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"blur":return!0;default:return!1}}function ke(e){return"object"===typeof(e=e.detail)&&"data"in e?e.data:null}var Se=!1;var Ce={eventTypes:xe,extractEvents:function(e,t,n,r){var i=void 0,o=void 0;if(ve)e:{switch(e){case"compositionstart":i=xe.compositionStart;break e;case"compositionend":i=xe.compositionEnd;break e;case"compositionupdate":i=xe.compositionUpdate;break e}i=void 0}else Se?Ee(e,n)&&(i=xe.compositionEnd):"keydown"===e&&229===n.keyCode&&(i=xe.compositionStart);return i?(be&&"ko"!==n.locale&&(Se||i!==xe.compositionStart?i===xe.compositionEnd&&Se&&(o=ae()):(ie="value"in(re=r)?re.value:re.textContent,Se=!0)),i=pe.getPooled(i,t,n,r),o?i.data=o:null!==(o=ke(n))&&(i.data=o),$(i),o=i):o=null,(e=ye?function(e,t){switch(e){case"compositionend":return ke(t);case"keypress":return 32!==t.which?null:(_e=!0,we);case"textInput":return(e=t.data)===we&&_e?null:e;default:return null}}(e,n):function(e,t){if(Se)return"compositionend"===e||!ve&&Ee(e,t)?(e=ae(),oe=ie=re=null,Se=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return be&&"ko"!==t.locale?null:t.data;default:return null}}(e,n))?((t=he.getPooled(xe.beforeInput,t,n,r)).data=e,$(t)):t=null,null===o?t:null===t?o:[o,t]}},Te=null,Pe=null,Oe=null;function De(e){if(e=E(e)){if("function"!==typeof Te)throw a(Error(280));var t=_(e.stateNode);Te(e.stateNode,e.type,t)}}function Ne(e){Pe?Oe?Oe.push(e):Oe=[e]:Pe=e}function Ie(){if(Pe){var e=Pe,t=Oe;if(Oe=Pe=null,De(e),t)for(e=0;e<t.length;e++)De(t[e])}}function Re(e,t){return e(t)}function je(e,t,n,r){return e(t,n,r)}function Me(){}var Ae=Re,Le=!1;function Fe(){null===Pe&&null===Oe||(Me(),Ie())}var ze={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Be(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!ze[e.type]:"textarea"===t}function Ue(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}function We(e){if(!G)return!1;var t=(e="on"+e)in document;return t||((t=document.createElement("div")).setAttribute(e,"return;"),t="function"===typeof t[e]),t}function Ve(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function He(e){e._valueTracker||(e._valueTracker=function(e){var t=Ve(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&"undefined"!==typeof n&&"function"===typeof n.get&&"function"===typeof n.set){var i=n.get,o=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return i.call(this)},set:function(e){r=""+e,o.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function $e(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=Ve(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}var Ge=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;Ge.hasOwnProperty("ReactCurrentDispatcher")||(Ge.ReactCurrentDispatcher={current:null}),Ge.hasOwnProperty("ReactCurrentBatchConfig")||(Ge.ReactCurrentBatchConfig={suspense:null});var qe=/^(.*)[\\\/]/,Qe="function"===typeof Symbol&&Symbol.for,Ke=Qe?Symbol.for("react.element"):60103,Ye=Qe?Symbol.for("react.portal"):60106,Xe=Qe?Symbol.for("react.fragment"):60107,Je=Qe?Symbol.for("react.strict_mode"):60108,Ze=Qe?Symbol.for("react.profiler"):60114,et=Qe?Symbol.for("react.provider"):60109,tt=Qe?Symbol.for("react.context"):60110,nt=Qe?Symbol.for("react.concurrent_mode"):60111,rt=Qe?Symbol.for("react.forward_ref"):60112,it=Qe?Symbol.for("react.suspense"):60113,ot=Qe?Symbol.for("react.suspense_list"):60120,at=Qe?Symbol.for("react.memo"):60115,ut=Qe?Symbol.for("react.lazy"):60116;Qe&&Symbol.for("react.fundamental"),Qe&&Symbol.for("react.responder");var lt="function"===typeof Symbol&&Symbol.iterator;function ct(e){return null===e||"object"!==typeof e?null:"function"===typeof(e=lt&&e[lt]||e["@@iterator"])?e:null}function st(e){if(null==e)return null;if("function"===typeof e)return e.displayName||e.name||null;if("string"===typeof e)return e;switch(e){case Xe:return"Fragment";case Ye:return"Portal";case Ze:return"Profiler";case Je:return"StrictMode";case it:return"Suspense";case ot:return"SuspenseList"}if("object"===typeof e)switch(e.$$typeof){case tt:return"Context.Consumer";case et:return"Context.Provider";case rt:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case at:return st(e.type);case ut:if(e=1===e._status?e._result:null)return st(e)}return null}function ft(e){var t="";do{e:switch(e.tag){case 3:case 4:case 6:case 7:case 10:case 9:var n="";break e;default:var r=e._debugOwner,i=e._debugSource,o=st(e.type);n=null,r&&(n=st(r.type)),r=o,o="",i?o=" (at "+i.fileName.replace(qe,"")+":"+i.lineNumber+")":n&&(o=" (created by "+n+")"),n="\n    in "+(r||"Unknown")+o}t+=n,e=e.return}while(e);return t}var dt=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,pt=Object.prototype.hasOwnProperty,ht={},mt={};function vt(e,t,n,r,i,o){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=i,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=o}var gt={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){gt[e]=new vt(e,0,!1,e,null,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];gt[t]=new vt(t,1,!1,e[1],null,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){gt[e]=new vt(e,2,!1,e.toLowerCase(),null,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){gt[e]=new vt(e,2,!1,e,null,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){gt[e]=new vt(e,3,!1,e.toLowerCase(),null,!1)})),["checked","multiple","muted","selected"].forEach((function(e){gt[e]=new vt(e,3,!0,e,null,!1)})),["capture","download"].forEach((function(e){gt[e]=new vt(e,4,!1,e,null,!1)})),["cols","rows","size","span"].forEach((function(e){gt[e]=new vt(e,6,!1,e,null,!1)})),["rowSpan","start"].forEach((function(e){gt[e]=new vt(e,5,!1,e.toLowerCase(),null,!1)}));var yt=/[\-:]([a-z])/g;function bt(e){return e[1].toUpperCase()}function wt(e,t,n,r){var i=gt.hasOwnProperty(t)?gt[t]:null;(null!==i?0===i.type:!r&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(function(e,t,n,r){if(null===t||"undefined"===typeof t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,i,r)&&(n=null),r||null===i?function(e){return!!pt.call(mt,e)||!pt.call(ht,e)&&(dt.test(e)?mt[e]=!0:(ht[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):i.mustUseProperty?e[i.propertyName]=null===n?3!==i.type&&"":n:(t=i.attributeName,r=i.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(i=i.type)||4===i&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}function xt(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function _t(e,t){var n=t.checked;return i({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function Et(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=xt(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function kt(e,t){null!=(t=t.checked)&&wt(e,"checked",t,!1)}function St(e,t){kt(e,t);var n=xt(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?Tt(e,t.type,n):t.hasOwnProperty("defaultValue")&&Tt(e,t.type,xt(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function Ct(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!e.defaultChecked,e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function Tt(e,t,n){"number"===t&&e.ownerDocument.activeElement===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(yt,bt);gt[t]=new vt(t,1,!1,e,null,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(yt,bt);gt[t]=new vt(t,1,!1,e,"http://www.w3.org/1999/xlink",!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(yt,bt);gt[t]=new vt(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1)})),["tabIndex","crossOrigin"].forEach((function(e){gt[e]=new vt(e,1,!1,e.toLowerCase(),null,!1)})),gt.xlinkHref=new vt("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0),["src","href","action","formAction"].forEach((function(e){gt[e]=new vt(e,1,!1,e.toLowerCase(),null,!0)}));var Pt={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"blur change click focus input keydown keyup selectionchange".split(" ")}};function Ot(e,t,n){return(e=ce.getPooled(Pt.change,e,t,n)).type="change",Ne(n),$(e),e}var Dt=null,Nt=null;function It(e){D(e)}function Rt(e){if($e(F(e)))return e}function jt(e,t){if("change"===e)return t}var Mt=!1;function At(){Dt&&(Dt.detachEvent("onpropertychange",Lt),Nt=Dt=null)}function Lt(e){if("value"===e.propertyName&&Rt(Nt))if(e=Ot(Nt,e,Ue(e)),Le)D(e);else{Le=!0;try{Re(It,e)}finally{Le=!1,Fe()}}}function Ft(e,t,n){"focus"===e?(At(),Nt=n,(Dt=t).attachEvent("onpropertychange",Lt)):"blur"===e&&At()}function zt(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Rt(Nt)}function Bt(e,t){if("click"===e)return Rt(t)}function Ut(e,t){if("input"===e||"change"===e)return Rt(t)}G&&(Mt=We("input")&&(!document.documentMode||9<document.documentMode));var Wt={eventTypes:Pt,_isInputEventSupported:Mt,extractEvents:function(e,t,n,r){var i=t?F(t):window,o=void 0,a=void 0,u=i.nodeName&&i.nodeName.toLowerCase();if("select"===u||"input"===u&&"file"===i.type?o=jt:Be(i)?Mt?o=Ut:(o=zt,a=Ft):(u=i.nodeName)&&"input"===u.toLowerCase()&&("checkbox"===i.type||"radio"===i.type)&&(o=Bt),o&&(o=o(e,t)))return Ot(o,n,r);a&&a(e,i,t),"blur"===e&&(e=i._wrapperState)&&e.controlled&&"number"===i.type&&Tt(i,"number",i.value)}},Vt=ce.extend({view:null,detail:null}),Ht={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function $t(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Ht[e])&&!!t[e]}function Gt(){return $t}var qt=0,Qt=0,Kt=!1,Yt=!1,Xt=Vt.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:Gt,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)},movementX:function(e){if("movementX"in e)return e.movementX;var t=qt;return qt=e.screenX,Kt?"mousemove"===e.type?e.screenX-t:0:(Kt=!0,0)},movementY:function(e){if("movementY"in e)return e.movementY;var t=Qt;return Qt=e.screenY,Yt?"mousemove"===e.type?e.screenY-t:0:(Yt=!0,0)}}),Jt=Xt.extend({pointerId:null,width:null,height:null,pressure:null,tangentialPressure:null,tiltX:null,tiltY:null,twist:null,pointerType:null,isPrimary:null}),Zt={mouseEnter:{registrationName:"onMouseEnter",dependencies:["mouseout","mouseover"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["mouseout","mouseover"]},pointerEnter:{registrationName:"onPointerEnter",dependencies:["pointerout","pointerover"]},pointerLeave:{registrationName:"onPointerLeave",dependencies:["pointerout","pointerover"]}},en={eventTypes:Zt,extractEvents:function(e,t,n,r){var i="mouseover"===e||"pointerover"===e,o="mouseout"===e||"pointerout"===e;if(i&&(n.relatedTarget||n.fromElement)||!o&&!i)return null;if(i=r.window===r?r:(i=r.ownerDocument)?i.defaultView||i.parentWindow:window,o?(o=t,t=(t=n.relatedTarget||n.toElement)?A(t):null):o=null,o===t)return null;var a=void 0,u=void 0,l=void 0,c=void 0;"mouseout"===e||"mouseover"===e?(a=Xt,u=Zt.mouseLeave,l=Zt.mouseEnter,c="mouse"):"pointerout"!==e&&"pointerover"!==e||(a=Jt,u=Zt.pointerLeave,l=Zt.pointerEnter,c="pointer");var s=null==o?i:F(o);if(i=null==t?i:F(t),(e=a.getPooled(u,o,n,r)).type=c+"leave",e.target=s,e.relatedTarget=i,(n=a.getPooled(l,t,n,r)).type=c+"enter",n.target=i,n.relatedTarget=s,r=t,o&&r)e:{for(i=r,c=0,a=t=o;a;a=B(a))c++;for(a=0,l=i;l;l=B(l))a++;for(;0<c-a;)t=B(t),c--;for(;0<a-c;)i=B(i),a--;for(;c--;){if(t===i||t===i.alternate)break e;t=B(t),i=B(i)}t=null}else t=null;for(i=t,t=[];o&&o!==i&&(null===(c=o.alternate)||c!==i);)t.push(o),o=B(o);for(o=[];r&&r!==i&&(null===(c=r.alternate)||c!==i);)o.push(r),r=B(r);for(r=0;r<t.length;r++)V(t[r],"bubbled",e);for(r=o.length;0<r--;)V(o[r],"captured",n);return[e,n]}};function tn(e,t){return e===t&&(0!==e||1/e===1/t)||e!==e&&t!==t}var nn=Object.prototype.hasOwnProperty;function rn(e,t){if(tn(e,t))return!0;if("object"!==typeof e||null===e||"object"!==typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!nn.call(t,n[r])||!tn(e[n[r]],t[n[r]]))return!1;return!0}function on(e,t){return{responder:e,props:t}}function an(e){var t=e;if(e.alternate)for(;t.return;)t=t.return;else{if(0!==(2&t.effectTag))return 1;for(;t.return;)if(0!==(2&(t=t.return).effectTag))return 1}return 3===t.tag?2:3}function un(e){if(2!==an(e))throw a(Error(188))}function ln(e){if(!(e=function(e){var t=e.alternate;if(!t){if(3===(t=an(e)))throw a(Error(188));return 1===t?null:e}for(var n=e,r=t;;){var i=n.return;if(null===i)break;var o=i.alternate;if(null===o){if(null!==(r=i.return)){n=r;continue}break}if(i.child===o.child){for(o=i.child;o;){if(o===n)return un(i),e;if(o===r)return un(i),t;o=o.sibling}throw a(Error(188))}if(n.return!==r.return)n=i,r=o;else{for(var u=!1,l=i.child;l;){if(l===n){u=!0,n=i,r=o;break}if(l===r){u=!0,r=i,n=o;break}l=l.sibling}if(!u){for(l=o.child;l;){if(l===n){u=!0,n=o,r=i;break}if(l===r){u=!0,r=o,n=i;break}l=l.sibling}if(!u)throw a(Error(189))}}if(n.alternate!==r)throw a(Error(190))}if(3!==n.tag)throw a(Error(188));return n.stateNode.current===n?e:t}(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}new Map,new Map,new Set,new Map;var cn=ce.extend({animationName:null,elapsedTime:null,pseudoElement:null}),sn=ce.extend({clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),fn=Vt.extend({relatedTarget:null});function dn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}for(var pn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},hn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},mn=Vt.extend({key:function(e){if(e.key){var t=pn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=dn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?hn[e.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:Gt,charCode:function(e){return"keypress"===e.type?dn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?dn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),vn=Xt.extend({dataTransfer:null}),gn=Vt.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:Gt}),yn=ce.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),bn=Xt.extend({deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null}),wn=[["blur","blur",0],["cancel","cancel",0],["click","click",0],["close","close",0],["contextmenu","contextMenu",0],["copy","copy",0],["cut","cut",0],["auxclick","auxClick",0],["dblclick","doubleClick",0],["dragend","dragEnd",0],["dragstart","dragStart",0],["drop","drop",0],["focus","focus",0],["input","input",0],["invalid","invalid",0],["keydown","keyDown",0],["keypress","keyPress",0],["keyup","keyUp",0],["mousedown","mouseDown",0],["mouseup","mouseUp",0],["paste","paste",0],["pause","pause",0],["play","play",0],["pointercancel","pointerCancel",0],["pointerdown","pointerDown",0],["pointerup","pointerUp",0],["ratechange","rateChange",0],["reset","reset",0],["seeked","seeked",0],["submit","submit",0],["touchcancel","touchCancel",0],["touchend","touchEnd",0],["touchstart","touchStart",0],["volumechange","volumeChange",0],["drag","drag",1],["dragenter","dragEnter",1],["dragexit","dragExit",1],["dragleave","dragLeave",1],["dragover","dragOver",1],["mousemove","mouseMove",1],["mouseout","mouseOut",1],["mouseover","mouseOver",1],["pointermove","pointerMove",1],["pointerout","pointerOut",1],["pointerover","pointerOver",1],["scroll","scroll",1],["toggle","toggle",1],["touchmove","touchMove",1],["wheel","wheel",1],["abort","abort",2],[J,"animationEnd",2],[Z,"animationIteration",2],[ee,"animationStart",2],["canplay","canPlay",2],["canplaythrough","canPlayThrough",2],["durationchange","durationChange",2],["emptied","emptied",2],["encrypted","encrypted",2],["ended","ended",2],["error","error",2],["gotpointercapture","gotPointerCapture",2],["load","load",2],["loadeddata","loadedData",2],["loadedmetadata","loadedMetadata",2],["loadstart","loadStart",2],["lostpointercapture","lostPointerCapture",2],["playing","playing",2],["progress","progress",2],["seeking","seeking",2],["stalled","stalled",2],["suspend","suspend",2],["timeupdate","timeUpdate",2],[te,"transitionEnd",2],["waiting","waiting",2]],xn={},_n={},En=0;En<wn.length;En++){var kn=wn[En],Sn=kn[0],Cn=kn[1],Tn=kn[2],Pn="on"+(Cn[0].toUpperCase()+Cn.slice(1)),On={phasedRegistrationNames:{bubbled:Pn,captured:Pn+"Capture"},dependencies:[Sn],eventPriority:Tn};xn[Cn]=On,_n[Sn]=On}var Dn={eventTypes:xn,getEventPriority:function(e){return void 0!==(e=_n[e])?e.eventPriority:2},extractEvents:function(e,t,n,r){var i=_n[e];if(!i)return null;switch(e){case"keypress":if(0===dn(n))return null;case"keydown":case"keyup":e=mn;break;case"blur":case"focus":e=fn;break;case"click":if(2===n.button)return null;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":e=Xt;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":e=vn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":e=gn;break;case J:case Z:case ee:e=cn;break;case te:e=yn;break;case"scroll":e=Vt;break;case"wheel":e=bn;break;case"copy":case"cut":case"paste":e=sn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":e=Jt;break;default:e=ce}return $(t=e.getPooled(i,t,n,r)),t}},Nn=Dn.getEventPriority,In=[];function Rn(e){var t=e.targetInst,n=t;do{if(!n){e.ancestors.push(n);break}var r;for(r=n;r.return;)r=r.return;if(!(r=3!==r.tag?null:r.stateNode.containerInfo))break;e.ancestors.push(n),n=A(r)}while(n);for(n=0;n<e.ancestors.length;n++){t=e.ancestors[n];var i=Ue(e.nativeEvent);r=e.topLevelType;for(var o=e.nativeEvent,a=null,u=0;u<f.length;u++){var l=f[u];l&&(l=l.extractEvents(r,t,o,i))&&(a=C(a,l))}D(a)}}var jn=!0;function Mn(e,t){An(t,e,!1)}function An(e,t,n){switch(Nn(t)){case 0:var r=Ln.bind(null,t,1);break;case 1:r=Fn.bind(null,t,1);break;default:r=zn.bind(null,t,1)}n?e.addEventListener(t,r,!0):e.addEventListener(t,r,!1)}function Ln(e,t,n){Le||Me();var r=zn,i=Le;Le=!0;try{je(r,e,t,n)}finally{(Le=i)||Fe()}}function Fn(e,t,n){zn(e,t,n)}function zn(e,t,n){if(jn){if(null===(t=A(t=Ue(n)))||"number"!==typeof t.tag||2===an(t)||(t=null),In.length){var r=In.pop();r.topLevelType=e,r.nativeEvent=n,r.targetInst=t,e=r}else e={topLevelType:e,nativeEvent:n,targetInst:t,ancestors:[]};try{if(n=e,Le)Rn(n);else{Le=!0;try{Ae(Rn,n,void 0)}finally{Le=!1,Fe()}}}finally{e.topLevelType=null,e.nativeEvent=null,e.targetInst=null,e.ancestors.length=0,10>In.length&&In.push(e)}}}var Bn=new("function"===typeof WeakMap?WeakMap:Map);function Un(e){var t=Bn.get(e);return void 0===t&&(t=new Set,Bn.set(e,t)),t}function Wn(e){if("undefined"===typeof(e=e||("undefined"!==typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function Vn(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function Hn(e,t){var n,r=Vn(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=Vn(r)}}function $n(){for(var e=window,t=Wn();t instanceof e.HTMLIFrameElement;){try{var n="string"===typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=Wn((e=t.contentWindow).document)}return t}function Gn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var qn=G&&"documentMode"in document&&11>=document.documentMode,Qn={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"blur contextmenu dragend focus keydown keyup mousedown mouseup selectionchange".split(" ")}},Kn=null,Yn=null,Xn=null,Jn=!1;function Zn(e,t){var n=t.window===t?t.document:9===t.nodeType?t:t.ownerDocument;return Jn||null==Kn||Kn!==Wn(n)?null:("selectionStart"in(n=Kn)&&Gn(n)?n={start:n.selectionStart,end:n.selectionEnd}:n={anchorNode:(n=(n.ownerDocument&&n.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset},Xn&&rn(Xn,n)?null:(Xn=n,(e=ce.getPooled(Qn.select,Yn,e,t)).type="select",e.target=Kn,$(e),e))}var er={eventTypes:Qn,extractEvents:function(e,t,n,r){var i,o=r.window===r?r.document:9===r.nodeType?r:r.ownerDocument;if(!(i=!o)){e:{o=Un(o),i=h.onSelect;for(var a=0;a<i.length;a++)if(!o.has(i[a])){o=!1;break e}o=!0}i=!o}if(i)return null;switch(o=t?F(t):window,e){case"focus":(Be(o)||"true"===o.contentEditable)&&(Kn=o,Yn=t,Xn=null);break;case"blur":Xn=Yn=Kn=null;break;case"mousedown":Jn=!0;break;case"contextmenu":case"mouseup":case"dragend":return Jn=!1,Zn(n,r);case"selectionchange":if(qn)break;case"keydown":case"keyup":return Zn(n,r)}return null}};function tr(e,t){return e=i({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(t.children))&&(e.children=t),e}function nr(e,t,n,r){if(e=e.options,t){t={};for(var i=0;i<n.length;i++)t["$"+n[i]]=!0;for(n=0;n<e.length;n++)i=t.hasOwnProperty("$"+e[n].value),e[n].selected!==i&&(e[n].selected=i),i&&r&&(e[n].defaultSelected=!0)}else{for(n=""+xt(n),t=null,i=0;i<e.length;i++){if(e[i].value===n)return e[i].selected=!0,void(r&&(e[i].defaultSelected=!0));null!==t||e[i].disabled||(t=e[i])}null!==t&&(t.selected=!0)}}function rr(e,t){if(null!=t.dangerouslySetInnerHTML)throw a(Error(91));return i({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function ir(e,t){var n=t.value;if(null==n){if(n=t.defaultValue,null!=(t=t.children)){if(null!=n)throw a(Error(92));if(Array.isArray(t)){if(!(1>=t.length))throw a(Error(93));t=t[0]}n=t}null==n&&(n="")}e._wrapperState={initialValue:xt(n)}}function or(e,t){var n=xt(t.value),r=xt(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function ar(e){var t=e.textContent;t===e._wrapperState.initialValue&&(e.value=t)}N.injectEventPluginOrder("ResponderEventPlugin SimpleEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),_=z,E=L,k=F,N.injectEventPluginsByName({SimpleEventPlugin:Dn,EnterLeaveEventPlugin:en,ChangeEventPlugin:Wt,SelectEventPlugin:er,BeforeInputEventPlugin:Ce});var ur={html:"http://www.w3.org/1999/xhtml",mathml:"http://www.w3.org/1998/Math/MathML",svg:"http://www.w3.org/2000/svg"};function lr(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function cr(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?lr(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var sr=void 0,fr=function(e){return"undefined"!==typeof MSApp&&MSApp.execUnsafeLocalFunction?function(t,n,r,i){MSApp.execUnsafeLocalFunction((function(){return e(t,n)}))}:e}((function(e,t){if(e.namespaceURI!==ur.svg||"innerHTML"in e)e.innerHTML=t;else{for((sr=sr||document.createElement("div")).innerHTML="<svg>"+t+"</svg>",t=sr.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}}));function dr(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var pr={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},hr=["Webkit","ms","Moz","O"];function mr(e,t,n){return null==t||"boolean"===typeof t||""===t?"":n||"number"!==typeof t||0===t||pr.hasOwnProperty(e)&&pr[e]?(""+t).trim():t+"px"}function vr(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),i=mr(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,i):e[n]=i}}Object.keys(pr).forEach((function(e){hr.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),pr[t]=pr[e]}))}));var gr=i({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function yr(e,t){if(t){if(gr[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw a(Error(137),e,"");if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw a(Error(60));if(!("object"===typeof t.dangerouslySetInnerHTML&&"__html"in t.dangerouslySetInnerHTML))throw a(Error(61))}if(null!=t.style&&"object"!==typeof t.style)throw a(Error(62),"")}}function br(e,t){if(-1===e.indexOf("-"))return"string"===typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function wr(e,t){var n=Un(e=9===e.nodeType||11===e.nodeType?e:e.ownerDocument);t=h[t];for(var r=0;r<t.length;r++){var i=t[r];if(!n.has(i)){switch(i){case"scroll":An(e,"scroll",!0);break;case"focus":case"blur":An(e,"focus",!0),An(e,"blur",!0),n.add("blur"),n.add("focus");break;case"cancel":case"close":We(i)&&An(e,i,!0);break;case"invalid":case"submit":case"reset":break;default:-1===ne.indexOf(i)&&Mn(i,e)}n.add(i)}}}function xr(){}var _r=null,Er=null;function kr(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function Sr(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"===typeof t.children||"number"===typeof t.children||"object"===typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var Cr="function"===typeof setTimeout?setTimeout:void 0,Tr="function"===typeof clearTimeout?clearTimeout:void 0;function Pr(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}new Set;var Or=[],Dr=-1;function Nr(e){0>Dr||(e.current=Or[Dr],Or[Dr]=null,Dr--)}function Ir(e,t){Or[++Dr]=e.current,e.current=t}var Rr={},jr={current:Rr},Mr={current:!1},Ar=Rr;function Lr(e,t){var n=e.type.contextTypes;if(!n)return Rr;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var i,o={};for(i in n)o[i]=t[i];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=o),o}function Fr(e){return null!==(e=e.childContextTypes)&&void 0!==e}function zr(e){Nr(Mr),Nr(jr)}function Br(e){Nr(Mr),Nr(jr)}function Ur(e,t,n){if(jr.current!==Rr)throw a(Error(168));Ir(jr,t),Ir(Mr,n)}function Wr(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!==typeof r.getChildContext)return n;for(var o in r=r.getChildContext())if(!(o in e))throw a(Error(108),st(t)||"Unknown",o);return i({},n,r)}function Vr(e){var t=e.stateNode;return t=t&&t.__reactInternalMemoizedMergedChildContext||Rr,Ar=jr.current,Ir(jr,t),Ir(Mr,Mr.current),!0}function Hr(e,t,n){var r=e.stateNode;if(!r)throw a(Error(169));n?(t=Wr(e,t,Ar),r.__reactInternalMemoizedMergedChildContext=t,Nr(Mr),Nr(jr),Ir(jr,t)):Nr(Mr),Ir(Mr,n)}var $r=o.unstable_runWithPriority,Gr=o.unstable_scheduleCallback,qr=o.unstable_cancelCallback,Qr=o.unstable_shouldYield,Kr=o.unstable_requestPaint,Yr=o.unstable_now,Xr=o.unstable_getCurrentPriorityLevel,Jr=o.unstable_ImmediatePriority,Zr=o.unstable_UserBlockingPriority,ei=o.unstable_NormalPriority,ti=o.unstable_LowPriority,ni=o.unstable_IdlePriority,ri={},ii=void 0!==Kr?Kr:function(){},oi=null,ai=null,ui=!1,li=Yr(),ci=1e4>li?Yr:function(){return Yr()-li};function si(){switch(Xr()){case Jr:return 99;case Zr:return 98;case ei:return 97;case ti:return 96;case ni:return 95;default:throw a(Error(332))}}function fi(e){switch(e){case 99:return Jr;case 98:return Zr;case 97:return ei;case 96:return ti;case 95:return ni;default:throw a(Error(332))}}function di(e,t){return e=fi(e),$r(e,t)}function pi(e,t,n){return e=fi(e),Gr(e,t,n)}function hi(e){return null===oi?(oi=[e],ai=Gr(Jr,vi)):oi.push(e),ri}function mi(){null!==ai&&qr(ai),vi()}function vi(){if(!ui&&null!==oi){ui=!0;var e=0;try{var t=oi;di(99,(function(){for(;e<t.length;e++){var n=t[e];do{n=n(!0)}while(null!==n)}})),oi=null}catch(t){throw null!==oi&&(oi=oi.slice(e+1)),Gr(Jr,mi),t}finally{ui=!1}}}function gi(e,t){return 1073741823===t?99:1===t?95:0>=(e=10*(1073741821-t)-10*(1073741821-e))?99:250>=e?98:5250>=e?97:95}function yi(e,t){if(e&&e.defaultProps)for(var n in t=i({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}var bi={current:null},wi=null,xi=null,_i=null;function Ei(){_i=xi=wi=null}function ki(e,t){var n=e.type._context;Ir(bi,n._currentValue),n._currentValue=t}function Si(e){var t=bi.current;Nr(bi),e.type._context._currentValue=t}function Ci(e,t){for(;null!==e;){var n=e.alternate;if(e.childExpirationTime<t)e.childExpirationTime=t,null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t);else{if(!(null!==n&&n.childExpirationTime<t))break;n.childExpirationTime=t}e=e.return}}function Ti(e,t){wi=e,_i=xi=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(e.expirationTime>=t&&(fa=!0),e.firstContext=null)}function Pi(e,t){if(_i!==e&&!1!==t&&0!==t)if("number"===typeof t&&1073741823!==t||(_i=e,t=1073741823),t={context:e,observedBits:t,next:null},null===xi){if(null===wi)throw a(Error(308));xi=t,wi.dependencies={expirationTime:0,firstContext:t,responders:null}}else xi=xi.next=t;return e._currentValue}var Oi=!1;function Di(e){return{baseState:e,firstUpdate:null,lastUpdate:null,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function Ni(e){return{baseState:e.baseState,firstUpdate:e.firstUpdate,lastUpdate:e.lastUpdate,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function Ii(e,t){return{expirationTime:e,suspenseConfig:t,tag:0,payload:null,callback:null,next:null,nextEffect:null}}function Ri(e,t){null===e.lastUpdate?e.firstUpdate=e.lastUpdate=t:(e.lastUpdate.next=t,e.lastUpdate=t)}function ji(e,t){var n=e.alternate;if(null===n){var r=e.updateQueue,i=null;null===r&&(r=e.updateQueue=Di(e.memoizedState))}else r=e.updateQueue,i=n.updateQueue,null===r?null===i?(r=e.updateQueue=Di(e.memoizedState),i=n.updateQueue=Di(n.memoizedState)):r=e.updateQueue=Ni(i):null===i&&(i=n.updateQueue=Ni(r));null===i||r===i?Ri(r,t):null===r.lastUpdate||null===i.lastUpdate?(Ri(r,t),Ri(i,t)):(Ri(r,t),i.lastUpdate=t)}function Mi(e,t){var n=e.updateQueue;null===(n=null===n?e.updateQueue=Di(e.memoizedState):Ai(e,n)).lastCapturedUpdate?n.firstCapturedUpdate=n.lastCapturedUpdate=t:(n.lastCapturedUpdate.next=t,n.lastCapturedUpdate=t)}function Ai(e,t){var n=e.alternate;return null!==n&&t===n.updateQueue&&(t=e.updateQueue=Ni(t)),t}function Li(e,t,n,r,o,a){switch(n.tag){case 1:return"function"===typeof(e=n.payload)?e.call(a,r,o):e;case 3:e.effectTag=-2049&e.effectTag|64;case 0:if(null===(o="function"===typeof(e=n.payload)?e.call(a,r,o):e)||void 0===o)break;return i({},r,o);case 2:Oi=!0}return r}function Fi(e,t,n,r,i){Oi=!1;for(var o=(t=Ai(e,t)).baseState,a=null,u=0,l=t.firstUpdate,c=o;null!==l;){var s=l.expirationTime;s<i?(null===a&&(a=l,o=c),u<s&&(u=s)):(Wu(s,l.suspenseConfig),c=Li(e,0,l,c,n,r),null!==l.callback&&(e.effectTag|=32,l.nextEffect=null,null===t.lastEffect?t.firstEffect=t.lastEffect=l:(t.lastEffect.nextEffect=l,t.lastEffect=l))),l=l.next}for(s=null,l=t.firstCapturedUpdate;null!==l;){var f=l.expirationTime;f<i?(null===s&&(s=l,null===a&&(o=c)),u<f&&(u=f)):(c=Li(e,0,l,c,n,r),null!==l.callback&&(e.effectTag|=32,l.nextEffect=null,null===t.lastCapturedEffect?t.firstCapturedEffect=t.lastCapturedEffect=l:(t.lastCapturedEffect.nextEffect=l,t.lastCapturedEffect=l))),l=l.next}null===a&&(t.lastUpdate=null),null===s?t.lastCapturedUpdate=null:e.effectTag|=32,null===a&&null===s&&(o=c),t.baseState=o,t.firstUpdate=a,t.firstCapturedUpdate=s,e.expirationTime=u,e.memoizedState=c}function zi(e,t,n){null!==t.firstCapturedUpdate&&(null!==t.lastUpdate&&(t.lastUpdate.next=t.firstCapturedUpdate,t.lastUpdate=t.lastCapturedUpdate),t.firstCapturedUpdate=t.lastCapturedUpdate=null),Bi(t.firstEffect,n),t.firstEffect=t.lastEffect=null,Bi(t.firstCapturedEffect,n),t.firstCapturedEffect=t.lastCapturedEffect=null}function Bi(e,t){for(;null!==e;){var n=e.callback;if(null!==n){e.callback=null;var r=t;if("function"!==typeof n)throw a(Error(191),n);n.call(r)}e=e.nextEffect}}var Ui=Ge.ReactCurrentBatchConfig,Wi=(new r.Component).refs;function Vi(e,t,n,r){n=null===(n=n(r,t=e.memoizedState))||void 0===n?t:i({},t,n),e.memoizedState=n,null!==(r=e.updateQueue)&&0===e.expirationTime&&(r.baseState=n)}var Hi={isMounted:function(e){return!!(e=e._reactInternalFiber)&&2===an(e)},enqueueSetState:function(e,t,n){e=e._reactInternalFiber;var r=Ou(),i=Ui.suspense;(i=Ii(r=Du(r,e,i),i)).payload=t,void 0!==n&&null!==n&&(i.callback=n),ji(e,i),Iu(e,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternalFiber;var r=Ou(),i=Ui.suspense;(i=Ii(r=Du(r,e,i),i)).tag=1,i.payload=t,void 0!==n&&null!==n&&(i.callback=n),ji(e,i),Iu(e,r)},enqueueForceUpdate:function(e,t){e=e._reactInternalFiber;var n=Ou(),r=Ui.suspense;(r=Ii(n=Du(n,e,r),r)).tag=2,void 0!==t&&null!==t&&(r.callback=t),ji(e,r),Iu(e,n)}};function $i(e,t,n,r,i,o,a){return"function"===typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,o,a):!t.prototype||!t.prototype.isPureReactComponent||(!rn(n,r)||!rn(i,o))}function Gi(e,t,n){var r=!1,i=Rr,o=t.contextType;return"object"===typeof o&&null!==o?o=Pi(o):(i=Fr(t)?Ar:jr.current,o=(r=null!==(r=t.contextTypes)&&void 0!==r)?Lr(e,i):Rr),t=new t(n,o),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=Hi,e.stateNode=t,t._reactInternalFiber=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=i,e.__reactInternalMemoizedMaskedChildContext=o),t}function qi(e,t,n,r){e=t.state,"function"===typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"===typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&Hi.enqueueReplaceState(t,t.state,null)}function Qi(e,t,n,r){var i=e.stateNode;i.props=n,i.state=e.memoizedState,i.refs=Wi;var o=t.contextType;"object"===typeof o&&null!==o?i.context=Pi(o):(o=Fr(t)?Ar:jr.current,i.context=Lr(e,o)),null!==(o=e.updateQueue)&&(Fi(e,o,n,i,r),i.state=e.memoizedState),"function"===typeof(o=t.getDerivedStateFromProps)&&(Vi(e,t,o,n),i.state=e.memoizedState),"function"===typeof t.getDerivedStateFromProps||"function"===typeof i.getSnapshotBeforeUpdate||"function"!==typeof i.UNSAFE_componentWillMount&&"function"!==typeof i.componentWillMount||(t=i.state,"function"===typeof i.componentWillMount&&i.componentWillMount(),"function"===typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount(),t!==i.state&&Hi.enqueueReplaceState(i,i.state,null),null!==(o=e.updateQueue)&&(Fi(e,o,n,i,r),i.state=e.memoizedState)),"function"===typeof i.componentDidMount&&(e.effectTag|=4)}var Ki=Array.isArray;function Yi(e,t,n){if(null!==(e=n.ref)&&"function"!==typeof e&&"object"!==typeof e){if(n._owner){n=n._owner;var r=void 0;if(n){if(1!==n.tag)throw a(Error(309));r=n.stateNode}if(!r)throw a(Error(147),e);var i=""+e;return null!==t&&null!==t.ref&&"function"===typeof t.ref&&t.ref._stringRef===i?t.ref:((t=function(e){var t=r.refs;t===Wi&&(t=r.refs={}),null===e?delete t[i]:t[i]=e})._stringRef=i,t)}if("string"!==typeof e)throw a(Error(284));if(!n._owner)throw a(Error(290),e)}return e}function Xi(e,t){if("textarea"!==e.type)throw a(Error(31),"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t,"")}function Ji(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.effectTag=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function i(e,t,n){return(e=ol(e,t)).index=0,e.sibling=null,e}function o(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.effectTag=2,n):r:(t.effectTag=2,n):n}function u(t){return e&&null===t.alternate&&(t.effectTag=2),t}function l(e,t,n,r){return null===t||6!==t.tag?((t=ll(n,e.mode,r)).return=e,t):((t=i(t,n)).return=e,t)}function c(e,t,n,r){return null!==t&&t.elementType===n.type?((r=i(t,n.props)).ref=Yi(e,t,n),r.return=e,r):((r=al(n.type,n.key,n.props,null,e.mode,r)).ref=Yi(e,t,n),r.return=e,r)}function s(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=cl(n,e.mode,r)).return=e,t):((t=i(t,n.children||[])).return=e,t)}function f(e,t,n,r,o){return null===t||7!==t.tag?((t=ul(n,e.mode,r,o)).return=e,t):((t=i(t,n)).return=e,t)}function d(e,t,n){if("string"===typeof t||"number"===typeof t)return(t=ll(""+t,e.mode,n)).return=e,t;if("object"===typeof t&&null!==t){switch(t.$$typeof){case Ke:return(n=al(t.type,t.key,t.props,null,e.mode,n)).ref=Yi(e,null,t),n.return=e,n;case Ye:return(t=cl(t,e.mode,n)).return=e,t}if(Ki(t)||ct(t))return(t=ul(t,e.mode,n,null)).return=e,t;Xi(e,t)}return null}function p(e,t,n,r){var i=null!==t?t.key:null;if("string"===typeof n||"number"===typeof n)return null!==i?null:l(e,t,""+n,r);if("object"===typeof n&&null!==n){switch(n.$$typeof){case Ke:return n.key===i?n.type===Xe?f(e,t,n.props.children,r,i):c(e,t,n,r):null;case Ye:return n.key===i?s(e,t,n,r):null}if(Ki(n)||ct(n))return null!==i?null:f(e,t,n,r,null);Xi(e,n)}return null}function h(e,t,n,r,i){if("string"===typeof r||"number"===typeof r)return l(t,e=e.get(n)||null,""+r,i);if("object"===typeof r&&null!==r){switch(r.$$typeof){case Ke:return e=e.get(null===r.key?n:r.key)||null,r.type===Xe?f(t,e,r.props.children,i,r.key):c(t,e,r,i);case Ye:return s(t,e=e.get(null===r.key?n:r.key)||null,r,i)}if(Ki(r)||ct(r))return f(t,e=e.get(n)||null,r,i,null);Xi(t,r)}return null}function m(i,a,u,l){for(var c=null,s=null,f=a,m=a=0,v=null;null!==f&&m<u.length;m++){f.index>m?(v=f,f=null):v=f.sibling;var g=p(i,f,u[m],l);if(null===g){null===f&&(f=v);break}e&&f&&null===g.alternate&&t(i,f),a=o(g,a,m),null===s?c=g:s.sibling=g,s=g,f=v}if(m===u.length)return n(i,f),c;if(null===f){for(;m<u.length;m++)null!==(f=d(i,u[m],l))&&(a=o(f,a,m),null===s?c=f:s.sibling=f,s=f);return c}for(f=r(i,f);m<u.length;m++)null!==(v=h(f,i,m,u[m],l))&&(e&&null!==v.alternate&&f.delete(null===v.key?m:v.key),a=o(v,a,m),null===s?c=v:s.sibling=v,s=v);return e&&f.forEach((function(e){return t(i,e)})),c}function v(i,u,l,c){var s=ct(l);if("function"!==typeof s)throw a(Error(150));if(null==(l=s.call(l)))throw a(Error(151));for(var f=s=null,m=u,v=u=0,g=null,y=l.next();null!==m&&!y.done;v++,y=l.next()){m.index>v?(g=m,m=null):g=m.sibling;var b=p(i,m,y.value,c);if(null===b){null===m&&(m=g);break}e&&m&&null===b.alternate&&t(i,m),u=o(b,u,v),null===f?s=b:f.sibling=b,f=b,m=g}if(y.done)return n(i,m),s;if(null===m){for(;!y.done;v++,y=l.next())null!==(y=d(i,y.value,c))&&(u=o(y,u,v),null===f?s=y:f.sibling=y,f=y);return s}for(m=r(i,m);!y.done;v++,y=l.next())null!==(y=h(m,i,v,y.value,c))&&(e&&null!==y.alternate&&m.delete(null===y.key?v:y.key),u=o(y,u,v),null===f?s=y:f.sibling=y,f=y);return e&&m.forEach((function(e){return t(i,e)})),s}return function(e,r,o,l){var c="object"===typeof o&&null!==o&&o.type===Xe&&null===o.key;c&&(o=o.props.children);var s="object"===typeof o&&null!==o;if(s)switch(o.$$typeof){case Ke:e:{for(s=o.key,c=r;null!==c;){if(c.key===s){if(7===c.tag?o.type===Xe:c.elementType===o.type){n(e,c.sibling),(r=i(c,o.type===Xe?o.props.children:o.props)).ref=Yi(e,c,o),r.return=e,e=r;break e}n(e,c);break}t(e,c),c=c.sibling}o.type===Xe?((r=ul(o.props.children,e.mode,l,o.key)).return=e,e=r):((l=al(o.type,o.key,o.props,null,e.mode,l)).ref=Yi(e,r,o),l.return=e,e=l)}return u(e);case Ye:e:{for(c=o.key;null!==r;){if(r.key===c){if(4===r.tag&&r.stateNode.containerInfo===o.containerInfo&&r.stateNode.implementation===o.implementation){n(e,r.sibling),(r=i(r,o.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=cl(o,e.mode,l)).return=e,e=r}return u(e)}if("string"===typeof o||"number"===typeof o)return o=""+o,null!==r&&6===r.tag?(n(e,r.sibling),(r=i(r,o)).return=e,e=r):(n(e,r),(r=ll(o,e.mode,l)).return=e,e=r),u(e);if(Ki(o))return m(e,r,o,l);if(ct(o))return v(e,r,o,l);if(s&&Xi(e,o),"undefined"===typeof o&&!c)switch(e.tag){case 1:case 0:throw e=e.type,a(Error(152),e.displayName||e.name||"Component")}return n(e,r)}}var Zi=Ji(!0),eo=Ji(!1),to={},no={current:to},ro={current:to},io={current:to};function oo(e){if(e===to)throw a(Error(174));return e}function ao(e,t){Ir(io,t),Ir(ro,e),Ir(no,to);var n=t.nodeType;switch(n){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:cr(null,"");break;default:t=cr(t=(n=8===n?t.parentNode:t).namespaceURI||null,n=n.tagName)}Nr(no),Ir(no,t)}function uo(e){Nr(no),Nr(ro),Nr(io)}function lo(e){oo(io.current);var t=oo(no.current),n=cr(t,e.type);t!==n&&(Ir(ro,e),Ir(no,n))}function co(e){ro.current===e&&(Nr(no),Nr(ro))}var so=1,fo=1,po=2,ho={current:0};function mo(e){for(var t=e;null!==t;){if(13===t.tag){if(null!==t.memoizedState)return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!==(64&t.effectTag))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var vo=0,go=2,yo=4,bo=8,wo=16,xo=32,_o=64,Eo=128,ko=Ge.ReactCurrentDispatcher,So=0,Co=null,To=null,Po=null,Oo=null,Do=null,No=null,Io=0,Ro=null,jo=0,Mo=!1,Ao=null,Lo=0;function Fo(){throw a(Error(321))}function zo(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!tn(e[n],t[n]))return!1;return!0}function Bo(e,t,n,r,i,o){if(So=o,Co=t,Po=null!==e?e.memoizedState:null,ko.current=null===Po?Zo:ea,t=n(r,i),Mo){do{Mo=!1,Lo+=1,Po=null!==e?e.memoizedState:null,No=Oo,Ro=Do=To=null,ko.current=ea,t=n(r,i)}while(Mo);Ao=null,Lo=0}if(ko.current=Jo,(e=Co).memoizedState=Oo,e.expirationTime=Io,e.updateQueue=Ro,e.effectTag|=jo,e=null!==To&&null!==To.next,So=0,No=Do=Oo=Po=To=Co=null,Io=0,Ro=null,jo=0,e)throw a(Error(300));return t}function Uo(){ko.current=Jo,So=0,No=Do=Oo=Po=To=Co=null,Io=0,Ro=null,jo=0,Mo=!1,Ao=null,Lo=0}function Wo(){var e={memoizedState:null,baseState:null,queue:null,baseUpdate:null,next:null};return null===Do?Oo=Do=e:Do=Do.next=e,Do}function Vo(){if(null!==No)No=(Do=No).next,Po=null!==(To=Po)?To.next:null;else{if(null===Po)throw a(Error(310));var e={memoizedState:(To=Po).memoizedState,baseState:To.baseState,queue:To.queue,baseUpdate:To.baseUpdate,next:null};Do=null===Do?Oo=e:Do.next=e,Po=To.next}return Do}function Ho(e,t){return"function"===typeof t?t(e):t}function $o(e){var t=Vo(),n=t.queue;if(null===n)throw a(Error(311));if(n.lastRenderedReducer=e,0<Lo){var r=n.dispatch;if(null!==Ao){var i=Ao.get(n);if(void 0!==i){Ao.delete(n);var o=t.memoizedState;do{o=e(o,i.action),i=i.next}while(null!==i);return tn(o,t.memoizedState)||(fa=!0),t.memoizedState=o,t.baseUpdate===n.last&&(t.baseState=o),n.lastRenderedState=o,[o,r]}}return[t.memoizedState,r]}r=n.last;var u=t.baseUpdate;if(o=t.baseState,null!==u?(null!==r&&(r.next=null),r=u.next):r=null!==r?r.next:null,null!==r){var l=i=null,c=r,s=!1;do{var f=c.expirationTime;f<So?(s||(s=!0,l=u,i=o),f>Io&&(Io=f)):(Wu(f,c.suspenseConfig),o=c.eagerReducer===e?c.eagerState:e(o,c.action)),u=c,c=c.next}while(null!==c&&c!==r);s||(l=u,i=o),tn(o,t.memoizedState)||(fa=!0),t.memoizedState=o,t.baseUpdate=l,t.baseState=i,n.lastRenderedState=o}return[t.memoizedState,n.dispatch]}function Go(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===Ro?(Ro={lastEffect:null}).lastEffect=e.next=e:null===(t=Ro.lastEffect)?Ro.lastEffect=e.next=e:(n=t.next,t.next=e,e.next=n,Ro.lastEffect=e),e}function qo(e,t,n,r){var i=Wo();jo|=e,i.memoizedState=Go(t,n,void 0,void 0===r?null:r)}function Qo(e,t,n,r){var i=Vo();r=void 0===r?null:r;var o=void 0;if(null!==To){var a=To.memoizedState;if(o=a.destroy,null!==r&&zo(r,a.deps))return void Go(vo,n,o,r)}jo|=e,i.memoizedState=Go(t,n,o,r)}function Ko(e,t){return"function"===typeof t?(e=e(),t(e),function(){t(null)}):null!==t&&void 0!==t?(e=e(),t.current=e,function(){t.current=null}):void 0}function Yo(){}function Xo(e,t,n){if(!(25>Lo))throw a(Error(301));var r=e.alternate;if(e===Co||null!==r&&r===Co)if(Mo=!0,e={expirationTime:So,suspenseConfig:null,action:n,eagerReducer:null,eagerState:null,next:null},null===Ao&&(Ao=new Map),void 0===(n=Ao.get(t)))Ao.set(t,e);else{for(t=n;null!==t.next;)t=t.next;t.next=e}else{var i=Ou(),o=Ui.suspense;o={expirationTime:i=Du(i,e,o),suspenseConfig:o,action:n,eagerReducer:null,eagerState:null,next:null};var u=t.last;if(null===u)o.next=o;else{var l=u.next;null!==l&&(o.next=l),u.next=o}if(t.last=o,0===e.expirationTime&&(null===r||0===r.expirationTime)&&null!==(r=t.lastRenderedReducer))try{var c=t.lastRenderedState,s=r(c,n);if(o.eagerReducer=r,o.eagerState=s,tn(s,c))return}catch(e){}Iu(e,i)}}var Jo={readContext:Pi,useCallback:Fo,useContext:Fo,useEffect:Fo,useImperativeHandle:Fo,useLayoutEffect:Fo,useMemo:Fo,useReducer:Fo,useRef:Fo,useState:Fo,useDebugValue:Fo,useResponder:Fo},Zo={readContext:Pi,useCallback:function(e,t){return Wo().memoizedState=[e,void 0===t?null:t],e},useContext:Pi,useEffect:function(e,t){return qo(516,Eo|_o,e,t)},useImperativeHandle:function(e,t,n){return n=null!==n&&void 0!==n?n.concat([e]):null,qo(4,yo|xo,Ko.bind(null,t,e),n)},useLayoutEffect:function(e,t){return qo(4,yo|xo,e,t)},useMemo:function(e,t){var n=Wo();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=Wo();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={last:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=Xo.bind(null,Co,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},Wo().memoizedState=e},useState:function(e){var t=Wo();return"function"===typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={last:null,dispatch:null,lastRenderedReducer:Ho,lastRenderedState:e}).dispatch=Xo.bind(null,Co,e),[t.memoizedState,e]},useDebugValue:Yo,useResponder:on},ea={readContext:Pi,useCallback:function(e,t){var n=Vo();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&zo(t,r[1])?r[0]:(n.memoizedState=[e,t],e)},useContext:Pi,useEffect:function(e,t){return Qo(516,Eo|_o,e,t)},useImperativeHandle:function(e,t,n){return n=null!==n&&void 0!==n?n.concat([e]):null,Qo(4,yo|xo,Ko.bind(null,t,e),n)},useLayoutEffect:function(e,t){return Qo(4,yo|xo,e,t)},useMemo:function(e,t){var n=Vo();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&zo(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)},useReducer:$o,useRef:function(){return Vo().memoizedState},useState:function(e){return $o(Ho)},useDebugValue:Yo,useResponder:on},ta=null,na=null,ra=!1;function ia(e,t){var n=rl(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.effectTag=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function oa(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);case 13:default:return!1}}function aa(e){if(ra){var t=na;if(t){var n=t;if(!oa(e,t)){if(!(t=Pr(n.nextSibling))||!oa(e,t))return e.effectTag|=2,ra=!1,void(ta=e);ia(ta,n)}ta=e,na=Pr(t.firstChild)}else e.effectTag|=2,ra=!1,ta=e}}function ua(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&18!==e.tag;)e=e.return;ta=e}function la(e){if(e!==ta)return!1;if(!ra)return ua(e),ra=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!Sr(t,e.memoizedProps))for(t=na;t;)ia(e,t),t=Pr(t.nextSibling);return ua(e),na=ta?Pr(e.stateNode.nextSibling):null,!0}function ca(){na=ta=null,ra=!1}var sa=Ge.ReactCurrentOwner,fa=!1;function da(e,t,n,r){t.child=null===e?eo(t,null,n,r):Zi(t,e.child,n,r)}function pa(e,t,n,r,i){n=n.render;var o=t.ref;return Ti(t,i),r=Bo(e,t,n,r,o,i),null===e||fa?(t.effectTag|=1,da(e,t,r,i),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=i&&(e.expirationTime=0),Sa(e,t,i))}function ha(e,t,n,r,i,o){if(null===e){var a=n.type;return"function"!==typeof a||il(a)||void 0!==a.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=al(n.type,null,r,null,t.mode,o)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=a,ma(e,t,a,r,i,o))}return a=e.child,i<o&&(i=a.memoizedProps,(n=null!==(n=n.compare)?n:rn)(i,r)&&e.ref===t.ref)?Sa(e,t,o):(t.effectTag|=1,(e=ol(a,r)).ref=t.ref,e.return=t,t.child=e)}function ma(e,t,n,r,i,o){return null!==e&&rn(e.memoizedProps,r)&&e.ref===t.ref&&(fa=!1,i<o)?Sa(e,t,o):ga(e,t,n,r,o)}function va(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.effectTag|=128)}function ga(e,t,n,r,i){var o=Fr(n)?Ar:jr.current;return o=Lr(t,o),Ti(t,i),n=Bo(e,t,n,r,o,i),null===e||fa?(t.effectTag|=1,da(e,t,n,i),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=i&&(e.expirationTime=0),Sa(e,t,i))}function ya(e,t,n,r,i){if(Fr(n)){var o=!0;Vr(t)}else o=!1;if(Ti(t,i),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),Gi(t,n,r),Qi(t,n,r,i),r=!0;else if(null===e){var a=t.stateNode,u=t.memoizedProps;a.props=u;var l=a.context,c=n.contextType;"object"===typeof c&&null!==c?c=Pi(c):c=Lr(t,c=Fr(n)?Ar:jr.current);var s=n.getDerivedStateFromProps,f="function"===typeof s||"function"===typeof a.getSnapshotBeforeUpdate;f||"function"!==typeof a.UNSAFE_componentWillReceiveProps&&"function"!==typeof a.componentWillReceiveProps||(u!==r||l!==c)&&qi(t,a,r,c),Oi=!1;var d=t.memoizedState;l=a.state=d;var p=t.updateQueue;null!==p&&(Fi(t,p,r,a,i),l=t.memoizedState),u!==r||d!==l||Mr.current||Oi?("function"===typeof s&&(Vi(t,n,s,r),l=t.memoizedState),(u=Oi||$i(t,n,u,r,d,l,c))?(f||"function"!==typeof a.UNSAFE_componentWillMount&&"function"!==typeof a.componentWillMount||("function"===typeof a.componentWillMount&&a.componentWillMount(),"function"===typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"===typeof a.componentDidMount&&(t.effectTag|=4)):("function"===typeof a.componentDidMount&&(t.effectTag|=4),t.memoizedProps=r,t.memoizedState=l),a.props=r,a.state=l,a.context=c,r=u):("function"===typeof a.componentDidMount&&(t.effectTag|=4),r=!1)}else a=t.stateNode,u=t.memoizedProps,a.props=t.type===t.elementType?u:yi(t.type,u),l=a.context,"object"===typeof(c=n.contextType)&&null!==c?c=Pi(c):c=Lr(t,c=Fr(n)?Ar:jr.current),(f="function"===typeof(s=n.getDerivedStateFromProps)||"function"===typeof a.getSnapshotBeforeUpdate)||"function"!==typeof a.UNSAFE_componentWillReceiveProps&&"function"!==typeof a.componentWillReceiveProps||(u!==r||l!==c)&&qi(t,a,r,c),Oi=!1,l=t.memoizedState,d=a.state=l,null!==(p=t.updateQueue)&&(Fi(t,p,r,a,i),d=t.memoizedState),u!==r||l!==d||Mr.current||Oi?("function"===typeof s&&(Vi(t,n,s,r),d=t.memoizedState),(s=Oi||$i(t,n,u,r,l,d,c))?(f||"function"!==typeof a.UNSAFE_componentWillUpdate&&"function"!==typeof a.componentWillUpdate||("function"===typeof a.componentWillUpdate&&a.componentWillUpdate(r,d,c),"function"===typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(r,d,c)),"function"===typeof a.componentDidUpdate&&(t.effectTag|=4),"function"===typeof a.getSnapshotBeforeUpdate&&(t.effectTag|=256)):("function"!==typeof a.componentDidUpdate||u===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=4),"function"!==typeof a.getSnapshotBeforeUpdate||u===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=256),t.memoizedProps=r,t.memoizedState=d),a.props=r,a.state=d,a.context=c,r=s):("function"!==typeof a.componentDidUpdate||u===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=4),"function"!==typeof a.getSnapshotBeforeUpdate||u===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=256),r=!1);return ba(e,t,n,r,o,i)}function ba(e,t,n,r,i,o){va(e,t);var a=0!==(64&t.effectTag);if(!r&&!a)return i&&Hr(t,n,!1),Sa(e,t,o);r=t.stateNode,sa.current=t;var u=a&&"function"!==typeof n.getDerivedStateFromError?null:r.render();return t.effectTag|=1,null!==e&&a?(t.child=Zi(t,e.child,null,o),t.child=Zi(t,null,u,o)):da(e,t,u,o),t.memoizedState=r.state,i&&Hr(t,n,!0),t.child}function wa(e){var t=e.stateNode;t.pendingContext?Ur(0,t.pendingContext,t.pendingContext!==t.context):t.context&&Ur(0,t.context,!1),ao(e,t.containerInfo)}var xa={};function _a(e,t,n){var r,i=t.mode,o=t.pendingProps,a=ho.current,u=null,l=!1;if((r=0!==(64&t.effectTag))||(r=0!==(a&po)&&(null===e||null!==e.memoizedState)),r?(u=xa,l=!0,t.effectTag&=-65):null!==e&&null===e.memoizedState||void 0===o.fallback||!0===o.unstable_avoidThisFallback||(a|=fo),Ir(ho,a&=so),null===e)if(l){if(o=o.fallback,(e=ul(null,i,0,null)).return=t,0===(2&t.mode))for(l=null!==t.memoizedState?t.child.child:t.child,e.child=l;null!==l;)l.return=e,l=l.sibling;(n=ul(o,i,n,null)).return=t,e.sibling=n,i=e}else i=n=eo(t,null,o.children,n);else{if(null!==e.memoizedState)if(i=(a=e.child).sibling,l){if(o=o.fallback,(n=ol(a,a.pendingProps)).return=t,0===(2&t.mode)&&(l=null!==t.memoizedState?t.child.child:t.child)!==a.child)for(n.child=l;null!==l;)l.return=n,l=l.sibling;(o=ol(i,o,i.expirationTime)).return=t,n.sibling=o,i=n,n.childExpirationTime=0,n=o}else i=n=Zi(t,a.child,o.children,n);else if(a=e.child,l){if(l=o.fallback,(o=ul(null,i,0,null)).return=t,o.child=a,null!==a&&(a.return=o),0===(2&t.mode))for(a=null!==t.memoizedState?t.child.child:t.child,o.child=a;null!==a;)a.return=o,a=a.sibling;(n=ul(l,i,n,null)).return=t,o.sibling=n,n.effectTag|=2,i=o,o.childExpirationTime=0}else n=i=Zi(t,a,o.children,n);t.stateNode=e.stateNode}return t.memoizedState=u,t.child=i,n}function Ea(e,t,n,r,i){var o=e.memoizedState;null===o?e.memoizedState={isBackwards:t,rendering:null,last:r,tail:n,tailExpiration:0,tailMode:i}:(o.isBackwards=t,o.rendering=null,o.last=r,o.tail=n,o.tailExpiration=0,o.tailMode=i)}function ka(e,t,n){var r=t.pendingProps,i=r.revealOrder,o=r.tail;if(da(e,t,r.children,n),0!==((r=ho.current)&po))r=r&so|po,t.effectTag|=64;else{if(null!==e&&0!==(64&e.effectTag))e:for(e=t.child;null!==e;){if(13===e.tag){if(null!==e.memoizedState){e.expirationTime<n&&(e.expirationTime=n);var a=e.alternate;null!==a&&a.expirationTime<n&&(a.expirationTime=n),Ci(e.return,n)}}else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=so}if(Ir(ho,r),0===(2&t.mode))t.memoizedState=null;else switch(i){case"forwards":for(n=t.child,i=null;null!==n;)null!==(r=n.alternate)&&null===mo(r)&&(i=n),n=n.sibling;null===(n=i)?(i=t.child,t.child=null):(i=n.sibling,n.sibling=null),Ea(t,!1,i,n,o);break;case"backwards":for(n=null,i=t.child,t.child=null;null!==i;){if(null!==(r=i.alternate)&&null===mo(r)){t.child=i;break}r=i.sibling,i.sibling=n,n=i,i=r}Ea(t,!0,n,null,o);break;case"together":Ea(t,!1,null,null,void 0);break;default:t.memoizedState=null}return t.child}function Sa(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),t.childExpirationTime<n)return null;if(null!==e&&t.child!==e.child)throw a(Error(153));if(null!==t.child){for(n=ol(e=t.child,e.pendingProps,e.expirationTime),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=ol(e,e.pendingProps,e.expirationTime)).return=t;n.sibling=null}return t.child}function Ca(e){e.effectTag|=4}var Ta=void 0,Pa=void 0,Oa=void 0,Da=void 0;function Na(e,t){switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function Ia(e){switch(e.tag){case 1:Fr(e.type)&&zr();var t=e.effectTag;return 2048&t?(e.effectTag=-2049&t|64,e):null;case 3:if(uo(),Br(),0!==(64&(t=e.effectTag)))throw a(Error(285));return e.effectTag=-2049&t|64,e;case 5:return co(e),null;case 13:return Nr(ho),2048&(t=e.effectTag)?(e.effectTag=-2049&t|64,e):null;case 18:return null;case 19:return Nr(ho),null;case 4:return uo(),null;case 10:return Si(e),null;default:return null}}function Ra(e,t){return{value:e,source:t,stack:ft(t)}}Ta=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(20===n.tag)e.appendChild(n.stateNode.instance);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Pa=function(){},Oa=function(e,t,n,r,o){var a=e.memoizedProps;if(a!==r){var u=t.stateNode;switch(oo(no.current),e=null,n){case"input":a=_t(u,a),r=_t(u,r),e=[];break;case"option":a=tr(u,a),r=tr(u,r),e=[];break;case"select":a=i({},a,{value:void 0}),r=i({},r,{value:void 0}),e=[];break;case"textarea":a=rr(u,a),r=rr(u,r),e=[];break;default:"function"!==typeof a.onClick&&"function"===typeof r.onClick&&(u.onclick=xr)}yr(n,r),u=n=void 0;var l=null;for(n in a)if(!r.hasOwnProperty(n)&&a.hasOwnProperty(n)&&null!=a[n])if("style"===n){var c=a[n];for(u in c)c.hasOwnProperty(u)&&(l||(l={}),l[u]="")}else"dangerouslySetInnerHTML"!==n&&"children"!==n&&"suppressContentEditableWarning"!==n&&"suppressHydrationWarning"!==n&&"autoFocus"!==n&&(p.hasOwnProperty(n)?e||(e=[]):(e=e||[]).push(n,null));for(n in r){var s=r[n];if(c=null!=a?a[n]:void 0,r.hasOwnProperty(n)&&s!==c&&(null!=s||null!=c))if("style"===n)if(c){for(u in c)!c.hasOwnProperty(u)||s&&s.hasOwnProperty(u)||(l||(l={}),l[u]="");for(u in s)s.hasOwnProperty(u)&&c[u]!==s[u]&&(l||(l={}),l[u]=s[u])}else l||(e||(e=[]),e.push(n,l)),l=s;else"dangerouslySetInnerHTML"===n?(s=s?s.__html:void 0,c=c?c.__html:void 0,null!=s&&c!==s&&(e=e||[]).push(n,""+s)):"children"===n?c===s||"string"!==typeof s&&"number"!==typeof s||(e=e||[]).push(n,""+s):"suppressContentEditableWarning"!==n&&"suppressHydrationWarning"!==n&&(p.hasOwnProperty(n)?(null!=s&&wr(o,n),e||c===s||(e=[])):(e=e||[]).push(n,s))}l&&(e=e||[]).push("style",l),o=e,(t.updateQueue=o)&&Ca(t)}},Da=function(e,t,n,r){n!==r&&Ca(t)};var ja="function"===typeof WeakSet?WeakSet:Set;function Ma(e,t){var n=t.source,r=t.stack;null===r&&null!==n&&(r=ft(n)),null!==n&&st(n.type),t=t.value,null!==e&&1===e.tag&&st(e.type);try{console.error(t)}catch(e){setTimeout((function(){throw e}))}}function Aa(e){var t=e.ref;if(null!==t)if("function"===typeof t)try{t(null)}catch(t){Yu(e,t)}else t.current=null}function La(e,t,n){if(null!==(n=null!==(n=n.updateQueue)?n.lastEffect:null)){var r=n=n.next;do{if((r.tag&e)!==vo){var i=r.destroy;r.destroy=void 0,void 0!==i&&i()}(r.tag&t)!==vo&&(i=r.create,r.destroy=i()),r=r.next}while(r!==n)}}function Fa(e,t){switch("function"===typeof tl&&tl(e),e.tag){case 0:case 11:case 14:case 15:var n=e.updateQueue;if(null!==n&&null!==(n=n.lastEffect)){var r=n.next;di(97<t?97:t,(function(){var t=r;do{var n=t.destroy;if(void 0!==n){var i=e;try{n()}catch(e){Yu(i,e)}}t=t.next}while(t!==r)}))}break;case 1:Aa(e),"function"===typeof(t=e.stateNode).componentWillUnmount&&function(e,t){try{t.props=e.memoizedProps,t.state=e.memoizedState,t.componentWillUnmount()}catch(t){Yu(e,t)}}(e,t);break;case 5:Aa(e);break;case 4:Wa(e,t)}}function za(e,t){for(var n=e;;)if(Fa(n,t),null!==n.child&&4!==n.tag)n.child.return=n,n=n.child;else{if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return;n=n.return}n.sibling.return=n.return,n=n.sibling}}function Ba(e){return 5===e.tag||3===e.tag||4===e.tag}function Ua(e){e:{for(var t=e.return;null!==t;){if(Ba(t)){var n=t;break e}t=t.return}throw a(Error(160))}switch(t=n.stateNode,n.tag){case 5:var r=!1;break;case 3:case 4:t=t.containerInfo,r=!0;break;default:throw a(Error(161))}16&n.effectTag&&(dr(t,""),n.effectTag&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||Ba(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.effectTag)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.effectTag)){n=n.stateNode;break e}}for(var i=e;;){var o=5===i.tag||6===i.tag;if(o||20===i.tag){var u=o?i.stateNode:i.stateNode.instance;if(n)if(r){var l=u;u=n,8===(o=t).nodeType?o.parentNode.insertBefore(l,u):o.insertBefore(l,u)}else t.insertBefore(u,n);else r?(8===(l=t).nodeType?(o=l.parentNode).insertBefore(u,l):(o=l).appendChild(u),null!==(l=l._reactRootContainer)&&void 0!==l||null!==o.onclick||(o.onclick=xr)):t.appendChild(u)}else if(4!==i.tag&&null!==i.child){i.child.return=i,i=i.child;continue}if(i===e)break;for(;null===i.sibling;){if(null===i.return||i.return===e)return;i=i.return}i.sibling.return=i.return,i=i.sibling}}function Wa(e,t){for(var n=e,r=!1,i=void 0,o=void 0;;){if(!r){r=n.return;e:for(;;){if(null===r)throw a(Error(160));switch(i=r.stateNode,r.tag){case 5:o=!1;break e;case 3:case 4:i=i.containerInfo,o=!0;break e}r=r.return}r=!0}if(5===n.tag||6===n.tag)if(za(n,t),o){var u=i,l=n.stateNode;8===u.nodeType?u.parentNode.removeChild(l):u.removeChild(l)}else i.removeChild(n.stateNode);else if(20===n.tag)l=n.stateNode.instance,za(n,t),o?8===(u=i).nodeType?u.parentNode.removeChild(l):u.removeChild(l):i.removeChild(l);else if(4===n.tag){if(null!==n.child){i=n.stateNode.containerInfo,o=!0,n.child.return=n,n=n.child;continue}}else if(Fa(n,t),null!==n.child){n.child.return=n,n=n.child;continue}if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return;4===(n=n.return).tag&&(r=!1)}n.sibling.return=n.return,n=n.sibling}}function Va(e,t){switch(t.tag){case 0:case 11:case 14:case 15:La(yo,bo,t);break;case 1:break;case 5:var n=t.stateNode;if(null!=n){var r=t.memoizedProps,i=null!==e?e.memoizedProps:r;e=t.type;var o=t.updateQueue;if(t.updateQueue=null,null!==o){for(n[M]=r,"input"===e&&"radio"===r.type&&null!=r.name&&kt(n,r),br(e,i),t=br(e,r),i=0;i<o.length;i+=2){var u=o[i],l=o[i+1];"style"===u?vr(n,l):"dangerouslySetInnerHTML"===u?fr(n,l):"children"===u?dr(n,l):wt(n,u,l,t)}switch(e){case"input":St(n,r);break;case"textarea":or(n,r);break;case"select":t=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(e=r.value)?nr(n,!!r.multiple,e,!1):t!==!!r.multiple&&(null!=r.defaultValue?nr(n,!!r.multiple,r.defaultValue,!0):nr(n,!!r.multiple,r.multiple?[]:"",!1))}}}break;case 6:if(null===t.stateNode)throw a(Error(162));t.stateNode.nodeValue=t.memoizedProps;break;case 3:case 12:break;case 13:if(n=t,null===t.memoizedState?r=!1:(r=!0,n=t.child,mu=ci()),null!==n)e:for(e=n;;){if(5===e.tag)o=e.stateNode,r?"function"===typeof(o=o.style).setProperty?o.setProperty("display","none","important"):o.display="none":(o=e.stateNode,i=void 0!==(i=e.memoizedProps.style)&&null!==i&&i.hasOwnProperty("display")?i.display:null,o.style.display=mr("display",i));else if(6===e.tag)e.stateNode.nodeValue=r?"":e.memoizedProps;else{if(13===e.tag&&null!==e.memoizedState){(o=e.child.sibling).return=e,e=o;continue}if(null!==e.child){e.child.return=e,e=e.child;continue}}if(e===n)break e;for(;null===e.sibling;){if(null===e.return||e.return===n)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}Ha(t);break;case 19:Ha(t);break;case 17:case 20:break;default:throw a(Error(163))}}function Ha(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new ja),t.forEach((function(t){var r=Ju.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}var $a="function"===typeof WeakMap?WeakMap:Map;function Ga(e,t,n){(n=Ii(n,null)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){yu||(yu=!0,bu=r),Ma(e,t)},n}function qa(e,t,n){(n=Ii(n,null)).tag=3;var r=e.type.getDerivedStateFromError;if("function"===typeof r){var i=t.value;n.payload=function(){return Ma(e,t),r(i)}}var o=e.stateNode;return null!==o&&"function"===typeof o.componentDidCatch&&(n.callback=function(){"function"!==typeof r&&(null===wu?wu=new Set([this]):wu.add(this),Ma(e,t));var n=t.stack;this.componentDidCatch(t.value,{componentStack:null!==n?n:""})}),n}var Qa=Math.ceil,Ka=Ge.ReactCurrentDispatcher,Ya=Ge.ReactCurrentOwner,Xa=0,Ja=8,Za=16,eu=32,tu=0,nu=1,ru=2,iu=3,ou=4,au=Xa,uu=null,lu=null,cu=0,su=tu,fu=1073741823,du=1073741823,pu=null,hu=!1,mu=0,vu=500,gu=null,yu=!1,bu=null,wu=null,xu=!1,_u=null,Eu=90,ku=0,Su=null,Cu=0,Tu=null,Pu=0;function Ou(){return(au&(Za|eu))!==Xa?1073741821-(ci()/10|0):0!==Pu?Pu:Pu=1073741821-(ci()/10|0)}function Du(e,t,n){if(0===(2&(t=t.mode)))return 1073741823;var r=si();if(0===(4&t))return 99===r?1073741823:1073741822;if((au&Za)!==Xa)return cu;if(null!==n)e=1073741821-25*(1+((1073741821-e+(0|n.timeoutMs||5e3)/10)/25|0));else switch(r){case 99:e=1073741823;break;case 98:e=1073741821-10*(1+((1073741821-e+15)/10|0));break;case 97:case 96:e=1073741821-25*(1+((1073741821-e+500)/25|0));break;case 95:e=1;break;default:throw a(Error(326))}return null!==uu&&e===cu&&--e,e}var Nu=0;function Iu(e,t){if(50<Cu)throw Cu=0,Tu=null,a(Error(185));if(null!==(e=Ru(e,t))){e.pingTime=0;var n=si();if(1073741823===t)if((au&Ja)!==Xa&&(au&(Za|eu))===Xa)for(var r=Uu(e,1073741823,!0);null!==r;)r=r(!0);else ju(e,99,1073741823),au===Xa&&mi();else ju(e,n,t);(4&au)===Xa||98!==n&&99!==n||(null===Su?Su=new Map([[e,t]]):(void 0===(n=Su.get(e))||n>t)&&Su.set(e,t))}}function Ru(e,t){e.expirationTime<t&&(e.expirationTime=t);var n=e.alternate;null!==n&&n.expirationTime<t&&(n.expirationTime=t);var r=e.return,i=null;if(null===r&&3===e.tag)i=e.stateNode;else for(;null!==r;){if(n=r.alternate,r.childExpirationTime<t&&(r.childExpirationTime=t),null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t),null===r.return&&3===r.tag){i=r.stateNode;break}r=r.return}return null!==i&&(t>i.firstPendingTime&&(i.firstPendingTime=t),0===(e=i.lastPendingTime)||t<e)&&(i.lastPendingTime=t),i}function ju(e,t,n){if(e.callbackExpirationTime<n){var r=e.callbackNode;null!==r&&r!==ri&&qr(r),e.callbackExpirationTime=n,1073741823===n?e.callbackNode=hi(Mu.bind(null,e,Uu.bind(null,e,n))):(r=null,1!==n&&(r={timeout:10*(1073741821-n)-ci()}),e.callbackNode=pi(t,Mu.bind(null,e,Uu.bind(null,e,n)),r))}}function Mu(e,t,n){var r=e.callbackNode,i=null;try{return null!==(i=t(n))?Mu.bind(null,e,i):null}finally{null===i&&r===e.callbackNode&&(e.callbackNode=null,e.callbackExpirationTime=0)}}function Au(){(au&(1|Za|eu))===Xa&&(function(){if(null!==Su){var e=Su;Su=null,e.forEach((function(e,t){hi(Uu.bind(null,t,e))})),mi()}}(),qu())}function Lu(e,t){var n=au;au|=1;try{return e(t)}finally{(au=n)===Xa&&mi()}}function Fu(e,t,n,r){var i=au;au|=4;try{return di(98,e.bind(null,t,n,r))}finally{(au=i)===Xa&&mi()}}function zu(e,t){var n=au;au&=-2,au|=Ja;try{return e(t)}finally{(au=n)===Xa&&mi()}}function Bu(e,t){e.finishedWork=null,e.finishedExpirationTime=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,Tr(n)),null!==lu)for(n=lu.return;null!==n;){var r=n;switch(r.tag){case 1:var i=r.type.childContextTypes;null!==i&&void 0!==i&&zr();break;case 3:uo(),Br();break;case 5:co(r);break;case 4:uo();break;case 13:case 19:Nr(ho);break;case 10:Si(r)}n=n.return}uu=e,lu=ol(e.current,null),cu=t,su=tu,du=fu=1073741823,pu=null,hu=!1}function Uu(e,t,n){if((au&(Za|eu))!==Xa)throw a(Error(327));if(e.firstPendingTime<t)return null;if(n&&e.finishedExpirationTime===t)return $u.bind(null,e);if(qu(),e!==uu||t!==cu)Bu(e,t);else if(su===iu)if(hu)Bu(e,t);else{var r=e.lastPendingTime;if(r<t)return Uu.bind(null,e,r)}if(null!==lu){r=au,au|=Za;var i=Ka.current;if(null===i&&(i=Jo),Ka.current=Jo,n){if(1073741823!==t){var o=Ou();if(o<t)return au=r,Ei(),Ka.current=i,Uu.bind(null,e,o)}}else Pu=0;for(;;)try{if(n)for(;null!==lu;)lu=Vu(lu);else for(;null!==lu&&!Qr();)lu=Vu(lu);break}catch(n){if(Ei(),Uo(),null===(o=lu)||null===o.return)throw Bu(e,t),au=r,n;e:{var u=e,l=o.return,c=o,s=n,f=cu;if(c.effectTag|=1024,c.firstEffect=c.lastEffect=null,null!==s&&"object"===typeof s&&"function"===typeof s.then){var d=s,p=0!==(ho.current&fo);s=l;do{var h;if((h=13===s.tag)&&(null!==s.memoizedState?h=!1:h=void 0!==(h=s.memoizedProps).fallback&&(!0!==h.unstable_avoidThisFallback||!p)),h){if(null===(l=s.updateQueue)?((l=new Set).add(d),s.updateQueue=l):l.add(d),0===(2&s.mode)){s.effectTag|=64,c.effectTag&=-1957,1===c.tag&&(null===c.alternate?c.tag=17:((f=Ii(1073741823,null)).tag=2,ji(c,f))),c.expirationTime=1073741823;break e}c=u,u=f,null===(p=c.pingCache)?(p=c.pingCache=new $a,l=new Set,p.set(d,l)):void 0===(l=p.get(d))&&(l=new Set,p.set(d,l)),l.has(u)||(l.add(u),c=Xu.bind(null,c,d,u),d.then(c,c)),s.effectTag|=2048,s.expirationTime=f;break e}s=s.return}while(null!==s);s=Error((st(c.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display."+ft(c))}su!==ou&&(su=nu),s=Ra(s,c),c=l;do{switch(c.tag){case 3:c.effectTag|=2048,c.expirationTime=f,Mi(c,f=Ga(c,s,f));break e;case 1:if(d=s,u=c.type,l=c.stateNode,0===(64&c.effectTag)&&("function"===typeof u.getDerivedStateFromError||null!==l&&"function"===typeof l.componentDidCatch&&(null===wu||!wu.has(l)))){c.effectTag|=2048,c.expirationTime=f,Mi(c,f=qa(c,d,f));break e}}c=c.return}while(null!==c)}lu=Hu(o)}if(au=r,Ei(),Ka.current=i,null!==lu)return Uu.bind(null,e,t)}if(e.finishedWork=e.current.alternate,e.finishedExpirationTime=t,function(e,t){var n=e.firstBatch;return!!(null!==n&&n._defer&&n._expirationTime>=t)&&(pi(97,(function(){return n._onComplete(),null})),!0)}(e,t))return null;switch(uu=null,su){case tu:throw a(Error(328));case nu:return(r=e.lastPendingTime)<t?Uu.bind(null,e,r):n?$u.bind(null,e):(Bu(e,t),hi(Uu.bind(null,e,t)),null);case ru:return 1073741823===fu&&!n&&10<(n=mu+vu-ci())?hu?(Bu(e,t),Uu.bind(null,e,t)):(r=e.lastPendingTime)<t?Uu.bind(null,e,r):(e.timeoutHandle=Cr($u.bind(null,e),n),null):$u.bind(null,e);case iu:if(!n){if(hu)return Bu(e,t),Uu.bind(null,e,t);if((n=e.lastPendingTime)<t)return Uu.bind(null,e,n);if(1073741823!==du?n=10*(1073741821-du)-ci():1073741823===fu?n=0:(n=10*(1073741821-fu)-5e3,0>(n=(r=ci())-n)&&(n=0),(t=10*(1073741821-t)-r)<(n=(120>n?120:480>n?480:1080>n?1080:1920>n?1920:3e3>n?3e3:4320>n?4320:1960*Qa(n/1960))-n)&&(n=t)),10<n)return e.timeoutHandle=Cr($u.bind(null,e),n),null}return $u.bind(null,e);case ou:return!n&&1073741823!==fu&&null!==pu&&(r=fu,0>=(t=0|(i=pu).busyMinDurationMs)?t=0:(n=0|i.busyDelayMs,t=(r=ci()-(10*(1073741821-r)-(0|i.timeoutMs||5e3)))<=n?0:n+t-r),10<t)?(e.timeoutHandle=Cr($u.bind(null,e),t),null):$u.bind(null,e);default:throw a(Error(329))}}function Wu(e,t){e<fu&&1<e&&(fu=e),null!==t&&e<du&&1<e&&(du=e,pu=t)}function Vu(e){var t=Zu(e.alternate,e,cu);return e.memoizedProps=e.pendingProps,null===t&&(t=Hu(e)),Ya.current=null,t}function Hu(e){lu=e;do{var t=lu.alternate;if(e=lu.return,0===(1024&lu.effectTag)){e:{var n=t,r=cu,o=(t=lu).pendingProps;switch(t.tag){case 2:case 16:break;case 15:case 0:break;case 1:Fr(t.type)&&zr();break;case 3:uo(),Br(),(r=t.stateNode).pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==n&&null!==n.child||(la(t),t.effectTag&=-3),Pa(t);break;case 5:co(t),r=oo(io.current);var u=t.type;if(null!==n&&null!=t.stateNode)Oa(n,t,u,o,r),n.ref!==t.ref&&(t.effectTag|=128);else if(o){var l=oo(no.current);if(la(t)){o=void 0,u=(n=t).stateNode;var c=n.type,s=n.memoizedProps;switch(u[j]=n,u[M]=s,c){case"iframe":case"object":case"embed":Mn("load",u);break;case"video":case"audio":for(var f=0;f<ne.length;f++)Mn(ne[f],u);break;case"source":Mn("error",u);break;case"img":case"image":case"link":Mn("error",u),Mn("load",u);break;case"form":Mn("reset",u),Mn("submit",u);break;case"details":Mn("toggle",u);break;case"input":Et(u,s),Mn("invalid",u),wr(r,"onChange");break;case"select":u._wrapperState={wasMultiple:!!s.multiple},Mn("invalid",u),wr(r,"onChange");break;case"textarea":ir(u,s),Mn("invalid",u),wr(r,"onChange")}for(o in yr(c,s),f=null,s)s.hasOwnProperty(o)&&(l=s[o],"children"===o?"string"===typeof l?u.textContent!==l&&(f=["children",l]):"number"===typeof l&&u.textContent!==""+l&&(f=["children",""+l]):p.hasOwnProperty(o)&&null!=l&&wr(r,o));switch(c){case"input":He(u),Ct(u,s,!0);break;case"textarea":He(u),ar(u);break;case"select":case"option":break;default:"function"===typeof s.onClick&&(u.onclick=xr)}r=f,n.updateQueue=r,null!==r&&Ca(t)}else{s=u,n=o,c=t,f=9===r.nodeType?r:r.ownerDocument,l===ur.html&&(l=lr(s)),l===ur.html?"script"===s?((s=f.createElement("div")).innerHTML="<script><\/script>",f=s.removeChild(s.firstChild)):"string"===typeof n.is?f=f.createElement(s,{is:n.is}):(f=f.createElement(s),"select"===s&&(s=f,n.multiple?s.multiple=!0:n.size&&(s.size=n.size))):f=f.createElementNS(l,s),(s=f)[j]=c,s[M]=n,Ta(n=s,t,!1,!1),c=n;var d=r,h=br(u,o);switch(u){case"iframe":case"object":case"embed":Mn("load",c),r=o;break;case"video":case"audio":for(r=0;r<ne.length;r++)Mn(ne[r],c);r=o;break;case"source":Mn("error",c),r=o;break;case"img":case"image":case"link":Mn("error",c),Mn("load",c),r=o;break;case"form":Mn("reset",c),Mn("submit",c),r=o;break;case"details":Mn("toggle",c),r=o;break;case"input":Et(c,o),r=_t(c,o),Mn("invalid",c),wr(d,"onChange");break;case"option":r=tr(c,o);break;case"select":c._wrapperState={wasMultiple:!!o.multiple},r=i({},o,{value:void 0}),Mn("invalid",c),wr(d,"onChange");break;case"textarea":ir(c,o),r=rr(c,o),Mn("invalid",c),wr(d,"onChange");break;default:r=o}yr(u,r),s=void 0,f=u,l=c;var m=r;for(s in m)if(m.hasOwnProperty(s)){var v=m[s];"style"===s?vr(l,v):"dangerouslySetInnerHTML"===s?null!=(v=v?v.__html:void 0)&&fr(l,v):"children"===s?"string"===typeof v?("textarea"!==f||""!==v)&&dr(l,v):"number"===typeof v&&dr(l,""+v):"suppressContentEditableWarning"!==s&&"suppressHydrationWarning"!==s&&"autoFocus"!==s&&(p.hasOwnProperty(s)?null!=v&&wr(d,s):null!=v&&wt(l,s,v,h))}switch(u){case"input":He(c),Ct(c,o,!1);break;case"textarea":He(c),ar(c);break;case"option":null!=o.value&&c.setAttribute("value",""+xt(o.value));break;case"select":r=c,c=o,r.multiple=!!c.multiple,null!=(s=c.value)?nr(r,!!c.multiple,s,!1):null!=c.defaultValue&&nr(r,!!c.multiple,c.defaultValue,!0);break;default:"function"===typeof r.onClick&&(c.onclick=xr)}kr(u,o)&&Ca(t),t.stateNode=n}null!==t.ref&&(t.effectTag|=128)}else if(null===t.stateNode)throw a(Error(166));break;case 6:if(n&&null!=t.stateNode)Da(n,t,n.memoizedProps,o);else{if("string"!==typeof o&&null===t.stateNode)throw a(Error(166));n=oo(io.current),oo(no.current),la(t)?(r=t.stateNode,n=t.memoizedProps,r[j]=t,r.nodeValue!==n&&Ca(t)):(r=t,(n=(9===n.nodeType?n:n.ownerDocument).createTextNode(o))[j]=t,r.stateNode=n)}break;case 11:break;case 13:if(Nr(ho),o=t.memoizedState,0!==(64&t.effectTag)){t.expirationTime=r;break e}r=null!==o,o=!1,null===n?la(t):(o=null!==(u=n.memoizedState),r||null===u||null!==(u=n.child.sibling)&&(null!==(c=t.firstEffect)?(t.firstEffect=u,u.nextEffect=c):(t.firstEffect=t.lastEffect=u,u.nextEffect=null),u.effectTag=8)),r&&!o&&0!==(2&t.mode)&&(null===n&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!==(ho.current&fo)?su===tu&&(su=ru):su!==tu&&su!==ru||(su=iu)),(r||o)&&(t.effectTag|=4);break;case 7:case 8:case 12:break;case 4:uo(),Pa(t);break;case 10:Si(t);break;case 9:case 14:break;case 17:Fr(t.type)&&zr();break;case 18:break;case 19:if(Nr(ho),null===(o=t.memoizedState))break;if(u=0!==(64&t.effectTag),null===(c=o.rendering)){if(u)Na(o,!1);else if(su!==tu||null!==n&&0!==(64&n.effectTag))for(n=t.child;null!==n;){if(null!==(c=mo(n))){for(t.effectTag|=64,Na(o,!1),null!==(n=c.updateQueue)&&(t.updateQueue=n,t.effectTag|=4),t.firstEffect=t.lastEffect=null,n=t.child;null!==n;)u=r,(o=n).effectTag&=2,o.nextEffect=null,o.firstEffect=null,o.lastEffect=null,null===(c=o.alternate)?(o.childExpirationTime=0,o.expirationTime=u,o.child=null,o.memoizedProps=null,o.memoizedState=null,o.updateQueue=null,o.dependencies=null):(o.childExpirationTime=c.childExpirationTime,o.expirationTime=c.expirationTime,o.child=c.child,o.memoizedProps=c.memoizedProps,o.memoizedState=c.memoizedState,o.updateQueue=c.updateQueue,u=c.dependencies,o.dependencies=null===u?null:{expirationTime:u.expirationTime,firstContext:u.firstContext,responders:u.responders}),n=n.sibling;Ir(ho,ho.current&so|po),t=t.child;break e}n=n.sibling}}else{if(!u)if(null!==(n=mo(c))){if(t.effectTag|=64,u=!0,Na(o,!0),null===o.tail&&"hidden"===o.tailMode){null!==(r=n.updateQueue)&&(t.updateQueue=r,t.effectTag|=4),null!==(t=t.lastEffect=o.lastEffect)&&(t.nextEffect=null);break}}else ci()>o.tailExpiration&&1<r&&(t.effectTag|=64,u=!0,Na(o,!1),t.expirationTime=t.childExpirationTime=r-1);o.isBackwards?(c.sibling=t.child,t.child=c):(null!==(r=o.last)?r.sibling=c:t.child=c,o.last=c)}if(null!==o.tail){0===o.tailExpiration&&(o.tailExpiration=ci()+500),r=o.tail,o.rendering=r,o.tail=r.sibling,o.lastEffect=t.lastEffect,r.sibling=null,n=ho.current,Ir(ho,n=u?n&so|po:n&so),t=r;break e}break;case 20:break;default:throw a(Error(156))}t=null}if(r=lu,1===cu||1!==r.childExpirationTime){for(n=0,o=r.child;null!==o;)(u=o.expirationTime)>n&&(n=u),(c=o.childExpirationTime)>n&&(n=c),o=o.sibling;r.childExpirationTime=n}if(null!==t)return t;null!==e&&0===(1024&e.effectTag)&&(null===e.firstEffect&&(e.firstEffect=lu.firstEffect),null!==lu.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=lu.firstEffect),e.lastEffect=lu.lastEffect),1<lu.effectTag&&(null!==e.lastEffect?e.lastEffect.nextEffect=lu:e.firstEffect=lu,e.lastEffect=lu))}else{if(null!==(t=Ia(lu)))return t.effectTag&=1023,t;null!==e&&(e.firstEffect=e.lastEffect=null,e.effectTag|=1024)}if(null!==(t=lu.sibling))return t;lu=e}while(null!==lu);return su===tu&&(su=ou),null}function $u(e){var t=si();return di(99,Gu.bind(null,e,t)),null!==_u&&pi(97,(function(){return qu(),null})),null}function Gu(e,t){if(qu(),(au&(Za|eu))!==Xa)throw a(Error(327));var n=e.finishedWork,r=e.finishedExpirationTime;if(null===n)return null;if(e.finishedWork=null,e.finishedExpirationTime=0,n===e.current)throw a(Error(177));e.callbackNode=null,e.callbackExpirationTime=0;var i=n.expirationTime,o=n.childExpirationTime;if(i=o>i?o:i,e.firstPendingTime=i,i<e.lastPendingTime&&(e.lastPendingTime=i),e===uu&&(lu=uu=null,cu=0),1<n.effectTag?null!==n.lastEffect?(n.lastEffect.nextEffect=n,i=n.firstEffect):i=n:i=n.firstEffect,null!==i){o=au,au|=eu,Ya.current=null,_r=jn;var u=$n();if(Gn(u)){if("selectionStart"in u)var l={start:u.selectionStart,end:u.selectionEnd};else e:{var c=(l=(l=u.ownerDocument)&&l.defaultView||window).getSelection&&l.getSelection();if(c&&0!==c.rangeCount){l=c.anchorNode;var s=c.anchorOffset,f=c.focusNode;c=c.focusOffset;try{l.nodeType,f.nodeType}catch(e){l=null;break e}var d=0,p=-1,h=-1,m=0,v=0,g=u,y=null;t:for(;;){for(var b;g!==l||0!==s&&3!==g.nodeType||(p=d+s),g!==f||0!==c&&3!==g.nodeType||(h=d+c),3===g.nodeType&&(d+=g.nodeValue.length),null!==(b=g.firstChild);)y=g,g=b;for(;;){if(g===u)break t;if(y===l&&++m===s&&(p=d),y===f&&++v===c&&(h=d),null!==(b=g.nextSibling))break;y=(g=y).parentNode}g=b}l=-1===p||-1===h?null:{start:p,end:h}}else l=null}l=l||{start:0,end:0}}else l=null;Er={focusedElem:u,selectionRange:l},jn=!1,gu=i;do{try{for(;null!==gu;){if(0!==(256&gu.effectTag)){var w=gu.alternate;switch((u=gu).tag){case 0:case 11:case 15:La(go,vo,u);break;case 1:if(256&u.effectTag&&null!==w){var x=w.memoizedProps,_=w.memoizedState,E=u.stateNode,k=E.getSnapshotBeforeUpdate(u.elementType===u.type?x:yi(u.type,x),_);E.__reactInternalSnapshotBeforeUpdate=k}break;case 3:case 5:case 6:case 4:case 17:break;default:throw a(Error(163))}}gu=gu.nextEffect}}catch(e){if(null===gu)throw a(Error(330));Yu(gu,e),gu=gu.nextEffect}}while(null!==gu);gu=i;do{try{for(w=t;null!==gu;){var S=gu.effectTag;if(16&S&&dr(gu.stateNode,""),128&S){var C=gu.alternate;if(null!==C){var T=C.ref;null!==T&&("function"===typeof T?T(null):T.current=null)}}switch(14&S){case 2:Ua(gu),gu.effectTag&=-3;break;case 6:Ua(gu),gu.effectTag&=-3,Va(gu.alternate,gu);break;case 4:Va(gu.alternate,gu);break;case 8:Wa(x=gu,w),x.return=null,x.child=null,x.memoizedState=null,x.updateQueue=null,x.dependencies=null;var P=x.alternate;null!==P&&(P.return=null,P.child=null,P.memoizedState=null,P.updateQueue=null,P.dependencies=null)}gu=gu.nextEffect}}catch(e){if(null===gu)throw a(Error(330));Yu(gu,e),gu=gu.nextEffect}}while(null!==gu);if(T=Er,C=$n(),S=T.focusedElem,w=T.selectionRange,C!==S&&S&&S.ownerDocument&&function e(t,n){return!(!t||!n)&&(t===n||(!t||3!==t.nodeType)&&(n&&3===n.nodeType?e(t,n.parentNode):"contains"in t?t.contains(n):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(n))))}(S.ownerDocument.documentElement,S)){null!==w&&Gn(S)&&(C=w.start,void 0===(T=w.end)&&(T=C),"selectionStart"in S?(S.selectionStart=C,S.selectionEnd=Math.min(T,S.value.length)):(T=(C=S.ownerDocument||document)&&C.defaultView||window).getSelection&&(T=T.getSelection(),x=S.textContent.length,P=Math.min(w.start,x),w=void 0===w.end?P:Math.min(w.end,x),!T.extend&&P>w&&(x=w,w=P,P=x),x=Hn(S,P),_=Hn(S,w),x&&_&&(1!==T.rangeCount||T.anchorNode!==x.node||T.anchorOffset!==x.offset||T.focusNode!==_.node||T.focusOffset!==_.offset)&&((C=C.createRange()).setStart(x.node,x.offset),T.removeAllRanges(),P>w?(T.addRange(C),T.extend(_.node,_.offset)):(C.setEnd(_.node,_.offset),T.addRange(C))))),C=[];for(T=S;T=T.parentNode;)1===T.nodeType&&C.push({element:T,left:T.scrollLeft,top:T.scrollTop});for("function"===typeof S.focus&&S.focus(),S=0;S<C.length;S++)(T=C[S]).element.scrollLeft=T.left,T.element.scrollTop=T.top}Er=null,jn=!!_r,_r=null,e.current=n,gu=i;do{try{for(S=r;null!==gu;){var O=gu.effectTag;if(36&O){var D=gu.alternate;switch(T=S,(C=gu).tag){case 0:case 11:case 15:La(wo,xo,C);break;case 1:var N=C.stateNode;if(4&C.effectTag)if(null===D)N.componentDidMount();else{var I=C.elementType===C.type?D.memoizedProps:yi(C.type,D.memoizedProps);N.componentDidUpdate(I,D.memoizedState,N.__reactInternalSnapshotBeforeUpdate)}var R=C.updateQueue;null!==R&&zi(0,R,N);break;case 3:var j=C.updateQueue;if(null!==j){if(P=null,null!==C.child)switch(C.child.tag){case 5:P=C.child.stateNode;break;case 1:P=C.child.stateNode}zi(0,j,P)}break;case 5:var M=C.stateNode;null===D&&4&C.effectTag&&(T=M,kr(C.type,C.memoizedProps)&&T.focus());break;case 6:case 4:case 12:break;case 13:case 19:case 17:case 20:break;default:throw a(Error(163))}}if(128&O){var A=gu.ref;if(null!==A){var L=gu.stateNode;switch(gu.tag){case 5:var F=L;break;default:F=L}"function"===typeof A?A(F):A.current=F}}512&O&&(xu=!0),gu=gu.nextEffect}}catch(e){if(null===gu)throw a(Error(330));Yu(gu,e),gu=gu.nextEffect}}while(null!==gu);gu=null,ii(),au=o}else e.current=n;if(xu)xu=!1,_u=e,ku=r,Eu=t;else for(gu=i;null!==gu;)t=gu.nextEffect,gu.nextEffect=null,gu=t;if(0!==(t=e.firstPendingTime)?ju(e,O=gi(O=Ou(),t),t):wu=null,"function"===typeof el&&el(n.stateNode,r),1073741823===t?e===Tu?Cu++:(Cu=0,Tu=e):Cu=0,yu)throw yu=!1,e=bu,bu=null,e;return(au&Ja)!==Xa?null:(mi(),null)}function qu(){if(null===_u)return!1;var e=_u,t=ku,n=Eu;return _u=null,ku=0,Eu=90,di(97<n?97:n,Qu.bind(null,e,t))}function Qu(e){if((au&(Za|eu))!==Xa)throw a(Error(331));var t=au;for(au|=eu,e=e.current.firstEffect;null!==e;){try{var n=e;if(0!==(512&n.effectTag))switch(n.tag){case 0:case 11:case 15:La(Eo,vo,n),La(vo,_o,n)}}catch(t){if(null===e)throw a(Error(330));Yu(e,t)}n=e.nextEffect,e.nextEffect=null,e=n}return au=t,mi(),!0}function Ku(e,t,n){ji(e,t=Ga(e,t=Ra(n,t),1073741823)),null!==(e=Ru(e,1073741823))&&ju(e,99,1073741823)}function Yu(e,t){if(3===e.tag)Ku(e,e,t);else for(var n=e.return;null!==n;){if(3===n.tag){Ku(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"===typeof n.type.getDerivedStateFromError||"function"===typeof r.componentDidCatch&&(null===wu||!wu.has(r))){ji(n,e=qa(n,e=Ra(t,e),1073741823)),null!==(n=Ru(n,1073741823))&&ju(n,99,1073741823);break}}n=n.return}}function Xu(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),uu===e&&cu===n?su===iu||su===ru&&1073741823===fu&&ci()-mu<vu?Bu(e,cu):hu=!0:e.lastPendingTime<n||(0!==(t=e.pingTime)&&t<n||(e.pingTime=n,e.finishedExpirationTime===n&&(e.finishedExpirationTime=0,e.finishedWork=null),ju(e,t=gi(t=Ou(),n),n)))}function Ju(e,t){var n=e.stateNode;null!==n&&n.delete(t),n=gi(n=Ou(),t=Du(n,e,null)),null!==(e=Ru(e,t))&&ju(e,n,t)}var Zu=void 0;Zu=function(e,t,n){var r=t.expirationTime;if(null!==e){var i=t.pendingProps;if(e.memoizedProps!==i||Mr.current)fa=!0;else if(r<n){switch(fa=!1,t.tag){case 3:wa(t),ca();break;case 5:if(lo(t),4&t.mode&&1!==n&&i.hidden)return t.expirationTime=t.childExpirationTime=1,null;break;case 1:Fr(t.type)&&Vr(t);break;case 4:ao(t,t.stateNode.containerInfo);break;case 10:ki(t,t.memoizedProps.value);break;case 13:if(null!==t.memoizedState)return 0!==(r=t.child.childExpirationTime)&&r>=n?_a(e,t,n):(Ir(ho,ho.current&so),null!==(t=Sa(e,t,n))?t.sibling:null);Ir(ho,ho.current&so);break;case 19:if(r=t.childExpirationTime>=n,0!==(64&e.effectTag)){if(r)return ka(e,t,n);t.effectTag|=64}if(null!==(i=t.memoizedState)&&(i.rendering=null,i.tail=null),Ir(ho,ho.current),!r)return null}return Sa(e,t,n)}}else fa=!1;switch(t.expirationTime=0,t.tag){case 2:if(r=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps,i=Lr(t,jr.current),Ti(t,n),i=Bo(null,t,r,e,i,n),t.effectTag|=1,"object"===typeof i&&null!==i&&"function"===typeof i.render&&void 0===i.$$typeof){if(t.tag=1,Uo(),Fr(r)){var o=!0;Vr(t)}else o=!1;t.memoizedState=null!==i.state&&void 0!==i.state?i.state:null;var u=r.getDerivedStateFromProps;"function"===typeof u&&Vi(t,r,u,e),i.updater=Hi,t.stateNode=i,i._reactInternalFiber=t,Qi(t,r,e,n),t=ba(null,t,r,!0,o,n)}else t.tag=0,da(null,t,i,n),t=t.child;return t;case 16:switch(i=t.elementType,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps,i=function(e){var t=e._result;switch(e._status){case 1:return t;case 2:case 0:throw t;default:switch(e._status=0,(t=(t=e._ctor)()).then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)})),e._status){case 1:return e._result;case 2:throw e._result}throw e._result=t,t}}(i),t.type=i,o=t.tag=function(e){if("function"===typeof e)return il(e)?1:0;if(void 0!==e&&null!==e){if((e=e.$$typeof)===rt)return 11;if(e===at)return 14}return 2}(i),e=yi(i,e),o){case 0:t=ga(null,t,i,e,n);break;case 1:t=ya(null,t,i,e,n);break;case 11:t=pa(null,t,i,e,n);break;case 14:t=ha(null,t,i,yi(i.type,e),r,n);break;default:throw a(Error(306),i,"")}return t;case 0:return r=t.type,i=t.pendingProps,ga(e,t,r,i=t.elementType===r?i:yi(r,i),n);case 1:return r=t.type,i=t.pendingProps,ya(e,t,r,i=t.elementType===r?i:yi(r,i),n);case 3:if(wa(t),null===(r=t.updateQueue))throw a(Error(282));return i=null!==(i=t.memoizedState)?i.element:null,Fi(t,r,t.pendingProps,null,n),(r=t.memoizedState.element)===i?(ca(),t=Sa(e,t,n)):(i=t.stateNode,(i=(null===e||null===e.child)&&i.hydrate)&&(na=Pr(t.stateNode.containerInfo.firstChild),ta=t,i=ra=!0),i?(t.effectTag|=2,t.child=eo(t,null,r,n)):(da(e,t,r,n),ca()),t=t.child),t;case 5:return lo(t),null===e&&aa(t),r=t.type,i=t.pendingProps,o=null!==e?e.memoizedProps:null,u=i.children,Sr(r,i)?u=null:null!==o&&Sr(r,o)&&(t.effectTag|=16),va(e,t),4&t.mode&&1!==n&&i.hidden?(t.expirationTime=t.childExpirationTime=1,t=null):(da(e,t,u,n),t=t.child),t;case 6:return null===e&&aa(t),null;case 13:return _a(e,t,n);case 4:return ao(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Zi(t,null,r,n):da(e,t,r,n),t.child;case 11:return r=t.type,i=t.pendingProps,pa(e,t,r,i=t.elementType===r?i:yi(r,i),n);case 7:return da(e,t,t.pendingProps,n),t.child;case 8:case 12:return da(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,i=t.pendingProps,u=t.memoizedProps,ki(t,o=i.value),null!==u){var l=u.value;if(0===(o=tn(l,o)?0:0|("function"===typeof r._calculateChangedBits?r._calculateChangedBits(l,o):1073741823))){if(u.children===i.children&&!Mr.current){t=Sa(e,t,n);break e}}else for(null!==(l=t.child)&&(l.return=t);null!==l;){var c=l.dependencies;if(null!==c){u=l.child;for(var s=c.firstContext;null!==s;){if(s.context===r&&0!==(s.observedBits&o)){1===l.tag&&((s=Ii(n,null)).tag=2,ji(l,s)),l.expirationTime<n&&(l.expirationTime=n),null!==(s=l.alternate)&&s.expirationTime<n&&(s.expirationTime=n),Ci(l.return,n),c.expirationTime<n&&(c.expirationTime=n);break}s=s.next}}else u=10===l.tag&&l.type===t.type?null:l.child;if(null!==u)u.return=l;else for(u=l;null!==u;){if(u===t){u=null;break}if(null!==(l=u.sibling)){l.return=u.return,u=l;break}u=u.return}l=u}}da(e,t,i.children,n),t=t.child}return t;case 9:return i=t.type,r=(o=t.pendingProps).children,Ti(t,n),r=r(i=Pi(i,o.unstable_observedBits)),t.effectTag|=1,da(e,t,r,n),t.child;case 14:return o=yi(i=t.type,t.pendingProps),ha(e,t,i,o=yi(i.type,o),r,n);case 15:return ma(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,i=t.pendingProps,i=t.elementType===r?i:yi(r,i),null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),t.tag=1,Fr(r)?(e=!0,Vr(t)):e=!1,Ti(t,n),Gi(t,r,i),Qi(t,r,i,n),ba(null,t,r,!0,e,n);case 19:return ka(e,t,n)}throw a(Error(156))};var el=null,tl=null;function nl(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childExpirationTime=this.expirationTime=0,this.alternate=null}function rl(e,t,n,r){return new nl(e,t,n,r)}function il(e){return!(!(e=e.prototype)||!e.isReactComponent)}function ol(e,t){var n=e.alternate;return null===n?((n=rl(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.effectTag=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childExpirationTime=e.childExpirationTime,n.expirationTime=e.expirationTime,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{expirationTime:t.expirationTime,firstContext:t.firstContext,responders:t.responders},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function al(e,t,n,r,i,o){var u=2;if(r=e,"function"===typeof e)il(e)&&(u=1);else if("string"===typeof e)u=5;else e:switch(e){case Xe:return ul(n.children,i,o,t);case nt:u=8,i|=7;break;case Je:u=8,i|=1;break;case Ze:return(e=rl(12,n,t,8|i)).elementType=Ze,e.type=Ze,e.expirationTime=o,e;case it:return(e=rl(13,n,t,i)).type=it,e.elementType=it,e.expirationTime=o,e;case ot:return(e=rl(19,n,t,i)).elementType=ot,e.expirationTime=o,e;default:if("object"===typeof e&&null!==e)switch(e.$$typeof){case et:u=10;break e;case tt:u=9;break e;case rt:u=11;break e;case at:u=14;break e;case ut:u=16,r=null;break e}throw a(Error(130),null==e?e:typeof e,"")}return(t=rl(u,n,t,i)).elementType=e,t.type=r,t.expirationTime=o,t}function ul(e,t,n,r){return(e=rl(7,e,r,t)).expirationTime=n,e}function ll(e,t,n){return(e=rl(6,e,null,t)).expirationTime=n,e}function cl(e,t,n){return(t=rl(4,null!==e.children?e.children:[],e.key,t)).expirationTime=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function sl(e,t,n){this.tag=t,this.current=null,this.containerInfo=e,this.pingCache=this.pendingChildren=null,this.finishedExpirationTime=0,this.finishedWork=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=this.firstBatch=null,this.pingTime=this.lastPendingTime=this.firstPendingTime=this.callbackExpirationTime=0}function fl(e,t,n){return e=new sl(e,t,n),t=rl(3,null,null,2===t?7:1===t?3:0),e.current=t,t.stateNode=e}function dl(e,t,n,r,i,o){var u=t.current;e:if(n){t:{if(2!==an(n=n._reactInternalFiber)||1!==n.tag)throw a(Error(170));var l=n;do{switch(l.tag){case 3:l=l.stateNode.context;break t;case 1:if(Fr(l.type)){l=l.stateNode.__reactInternalMemoizedMergedChildContext;break t}}l=l.return}while(null!==l);throw a(Error(171))}if(1===n.tag){var c=n.type;if(Fr(c)){n=Wr(n,c,l);break e}}n=l}else n=Rr;return null===t.context?t.context=n:t.pendingContext=n,t=o,(i=Ii(r,i)).payload={element:e},null!==(t=void 0===t?null:t)&&(i.callback=t),ji(u,i),Iu(u,r),r}function pl(e,t,n,r){var i=t.current,o=Ou(),a=Ui.suspense;return dl(e,t,n,i=Du(o,i,a),a,r)}function hl(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function ml(e){var t=1073741821-25*(1+((1073741821-Ou()+500)/25|0));t<=Nu&&--t,this._expirationTime=Nu=t,this._root=e,this._callbacks=this._next=null,this._hasChildren=this._didComplete=!1,this._children=null,this._defer=!0}function vl(){this._callbacks=null,this._didCommit=!1,this._onCommit=this._onCommit.bind(this)}function gl(e,t,n){this._internalRoot=fl(e,t,n)}function yl(e,t){this._internalRoot=fl(e,2,t)}function bl(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function wl(e,t,n,r,i){var o=n._reactRootContainer,a=void 0;if(o){if(a=o._internalRoot,"function"===typeof i){var u=i;i=function(){var e=hl(a);u.call(e)}}pl(t,a,e,i)}else{if(o=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new gl(e,0,t)}(n,r),a=o._internalRoot,"function"===typeof i){var l=i;i=function(){var e=hl(a);l.call(e)}}zu((function(){pl(t,a,e,i)}))}return hl(a)}function xl(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!bl(t))throw a(Error(200));return function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:Ye,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)}Te=function(e,t,n){switch(t){case"input":if(St(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var i=z(r);if(!i)throw a(Error(90));$e(r),St(r,i)}}}break;case"textarea":or(e,n);break;case"select":null!=(t=n.value)&&nr(e,!!n.multiple,t,!1)}},ml.prototype.render=function(e){if(!this._defer)throw a(Error(250));this._hasChildren=!0,this._children=e;var t=this._root._internalRoot,n=this._expirationTime,r=new vl;return dl(e,t,null,n,null,r._onCommit),r},ml.prototype.then=function(e){if(this._didComplete)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},ml.prototype.commit=function(){var e=this._root._internalRoot,t=e.firstBatch;if(!this._defer||null===t)throw a(Error(251));if(this._hasChildren){var n=this._expirationTime;if(t!==this){this._hasChildren&&(n=this._expirationTime=t._expirationTime,this.render(this._children));for(var r=null,i=t;i!==this;)r=i,i=i._next;if(null===r)throw a(Error(251));r._next=i._next,this._next=t,e.firstBatch=this}if(this._defer=!1,t=n,(au&(Za|eu))!==Xa)throw a(Error(253));hi(Uu.bind(null,e,t)),mi(),t=this._next,this._next=null,null!==(t=e.firstBatch=t)&&t._hasChildren&&t.render(t._children)}else this._next=null,this._defer=!1},ml.prototype._onComplete=function(){if(!this._didComplete){this._didComplete=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++)(0,e[t])()}},vl.prototype.then=function(e){if(this._didCommit)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},vl.prototype._onCommit=function(){if(!this._didCommit){this._didCommit=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++){var n=e[t];if("function"!==typeof n)throw a(Error(191),n);n()}}},yl.prototype.render=gl.prototype.render=function(e,t){var n=this._internalRoot,r=new vl;return null!==(t=void 0===t?null:t)&&r.then(t),pl(e,n,null,r._onCommit),r},yl.prototype.unmount=gl.prototype.unmount=function(e){var t=this._internalRoot,n=new vl;return null!==(e=void 0===e?null:e)&&n.then(e),pl(null,t,null,n._onCommit),n},yl.prototype.createBatch=function(){var e=new ml(this),t=e._expirationTime,n=this._internalRoot,r=n.firstBatch;if(null===r)n.firstBatch=e,e._next=null;else{for(n=null;null!==r&&r._expirationTime>=t;)n=r,r=r._next;e._next=r,null!==n&&(n._next=e)}return e},Re=Lu,je=Fu,Me=Au,Ae=function(e,t){var n=au;au|=2;try{return e(t)}finally{(au=n)===Xa&&mi()}};var _l={createPortal:xl,findDOMNode:function(e){if(null==e)e=null;else if(1!==e.nodeType){var t=e._reactInternalFiber;if(void 0===t){if("function"===typeof e.render)throw a(Error(188));throw a(Error(268),Object.keys(e))}e=null===(e=ln(t))?null:e.stateNode}return e},hydrate:function(e,t,n){if(!bl(t))throw a(Error(200));return wl(null,e,t,!0,n)},render:function(e,t,n){if(!bl(t))throw a(Error(200));return wl(null,e,t,!1,n)},unstable_renderSubtreeIntoContainer:function(e,t,n,r){if(!bl(n))throw a(Error(200));if(null==e||void 0===e._reactInternalFiber)throw a(Error(38));return wl(e,t,n,!1,r)},unmountComponentAtNode:function(e){if(!bl(e))throw a(Error(40));return!!e._reactRootContainer&&(zu((function(){wl(null,null,e,!1,(function(){e._reactRootContainer=null}))})),!0)},unstable_createPortal:function(){return xl.apply(void 0,arguments)},unstable_batchedUpdates:Lu,unstable_interactiveUpdates:function(e,t,n,r){return Au(),Fu(e,t,n,r)},unstable_discreteUpdates:Fu,unstable_flushDiscreteUpdates:Au,flushSync:function(e,t){if((au&(Za|eu))!==Xa)throw a(Error(187));var n=au;au|=1;try{return di(99,e.bind(null,t))}finally{au=n,mi()}},unstable_createRoot:function(e,t){if(!bl(e))throw a(Error(299),"unstable_createRoot");return new yl(e,null!=t&&!0===t.hydrate)},unstable_createSyncRoot:function(e,t){if(!bl(e))throw a(Error(299),"unstable_createRoot");return new gl(e,1,null!=t&&!0===t.hydrate)},unstable_flushControlled:function(e){var t=au;au|=1;try{di(99,e)}finally{(au=t)===Xa&&mi()}},__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{Events:[L,F,z,N.injectEventPluginsByName,d,$,function(e){T(e,H)},Ne,Ie,zn,D,qu,{current:!1}]}};!function(e){var t=e.findFiberByHostInstance;(function(e){if("undefined"===typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled||!t.supportsFiber)return!0;try{var n=t.inject(e);el=function(e){try{t.onCommitFiberRoot(n,e,void 0,64===(64&e.current.effectTag))}catch(e){}},tl=function(e){try{t.onCommitFiberUnmount(n,e)}catch(e){}}}catch(e){}})(i({},e,{overrideHookState:null,overrideProps:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:Ge.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=ln(e))?null:e.stateNode},findFiberByHostInstance:function(e){return t?t(e):null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null}))}({findFiberByHostInstance:A,bundleType:0,version:"16.9.0",rendererPackageName:"react-dom"});var El={default:_l},kl=El&&_l||El;e.exports=kl.default||kl},function(e,t,n){"use strict";e.exports=n(123)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=void 0,i=void 0,o=void 0,a=void 0,u=void 0;if(t.unstable_now=void 0,t.unstable_forceFrameRate=void 0,"undefined"===typeof window||"function"!==typeof MessageChannel){var l=null,c=null,s=function(){if(null!==l)try{var e=t.unstable_now();l(!0,e),l=null}catch(e){throw setTimeout(s,0),e}};t.unstable_now=function(){return Date.now()},r=function(e){null!==l?setTimeout(r,0,e):(l=e,setTimeout(s,0))},i=function(e,t){c=setTimeout(e,t)},o=function(){clearTimeout(c)},a=function(){return!1},u=t.unstable_forceFrameRate=function(){}}else{var f=window.performance,d=window.Date,p=window.setTimeout,h=window.clearTimeout,m=window.requestAnimationFrame,v=window.cancelAnimationFrame;"undefined"!==typeof console&&("function"!==typeof m&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"),"function"!==typeof v&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills")),t.unstable_now="object"===typeof f&&"function"===typeof f.now?function(){return f.now()}:function(){return d.now()};var g=!1,y=null,b=-1,w=-1,x=33.33,_=-1,E=-1,k=0,S=!1;a=function(){return t.unstable_now()>=k},u=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing framerates higher than 125 fps is not unsupported"):0<e?(x=Math.floor(1e3/e),S=!0):(x=33.33,S=!1)};var C=function(){if(null!==y){var e=t.unstable_now(),n=0<k-e;try{y(n,e)||(y=null)}catch(e){throw P.postMessage(null),e}}},T=new MessageChannel,P=T.port2;T.port1.onmessage=C;var O=function(e){if(null===y)E=_=-1,g=!1;else{g=!0,m((function(e){h(b),O(e)}));var n=function(){k=t.unstable_now()+x/2,C(),b=p(n,3*x)};if(b=p(n,3*x),-1!==_&&.1<e-_){var r=e-_;!S&&-1!==E&&r<x&&E<x&&(8.33>(x=r<E?E:r)&&(x=8.33)),E=r}_=e,k=e+x,P.postMessage(null)}};r=function(e){y=e,g||(g=!0,m((function(e){O(e)})))},i=function(e,n){w=p((function(){e(t.unstable_now())}),n)},o=function(){h(w),w=-1}}var D=null,N=null,I=null,R=3,j=!1,M=!1,A=!1;function L(e,t){var n=e.next;if(n===e)D=null;else{e===D&&(D=n);var r=e.previous;r.next=n,n.previous=r}e.next=e.previous=null,n=e.callback,r=R;var i=I;R=e.priorityLevel,I=e;try{var o=e.expirationTime<=t;switch(R){case 1:var a=n(o);break;case 2:case 3:case 4:a=n(o);break;case 5:a=n(o)}}catch(e){throw e}finally{R=r,I=i}if("function"===typeof a)if(t=e.expirationTime,e.callback=a,null===D)D=e.next=e.previous=e;else{a=null,o=D;do{if(t<=o.expirationTime){a=o;break}o=o.next}while(o!==D);null===a?a=D:a===D&&(D=e),(t=a.previous).next=a.previous=e,e.next=a,e.previous=t}}function F(e){if(null!==N&&N.startTime<=e)do{var t=N,n=t.next;if(t===n)N=null;else{N=n;var r=t.previous;r.next=n,n.previous=r}t.next=t.previous=null,W(t,t.expirationTime)}while(null!==N&&N.startTime<=e)}function z(e){A=!1,F(e),M||(null!==D?(M=!0,r(B)):null!==N&&i(z,N.startTime-e))}function B(e,n){M=!1,A&&(A=!1,o()),F(n),j=!0;try{if(e){if(null!==D)do{L(D,n),F(n=t.unstable_now())}while(null!==D&&!a())}else for(;null!==D&&D.expirationTime<=n;)L(D,n),F(n=t.unstable_now());return null!==D||(null!==N&&i(z,N.startTime-n),!1)}finally{j=!1}}function U(e){switch(e){case 1:return-1;case 2:return 250;case 5:return 1073741823;case 4:return 1e4;default:return 5e3}}function W(e,t){if(null===D)D=e.next=e.previous=e;else{var n=null,r=D;do{if(t<r.expirationTime){n=r;break}r=r.next}while(r!==D);null===n?n=D:n===D&&(D=e),(t=n.previous).next=n.previous=e,e.next=n,e.previous=t}}var V=u;t.unstable_ImmediatePriority=1,t.unstable_UserBlockingPriority=2,t.unstable_NormalPriority=3,t.unstable_IdlePriority=5,t.unstable_LowPriority=4,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=R;R=e;try{return t()}finally{R=n}},t.unstable_next=function(e){switch(R){case 1:case 2:case 3:var t=3;break;default:t=R}var n=R;R=t;try{return e()}finally{R=n}},t.unstable_scheduleCallback=function(e,n,a){var u=t.unstable_now();if("object"===typeof a&&null!==a){var l=a.delay;l="number"===typeof l&&0<l?u+l:u,a="number"===typeof a.timeout?a.timeout:U(e)}else a=U(e),l=u;if(e={callback:n,priorityLevel:e,startTime:l,expirationTime:a=l+a,next:null,previous:null},l>u){if(a=l,null===N)N=e.next=e.previous=e;else{n=null;var c=N;do{if(a<c.startTime){n=c;break}c=c.next}while(c!==N);null===n?n=N:n===N&&(N=e),(a=n.previous).next=n.previous=e,e.next=n,e.previous=a}null===D&&N===e&&(A?o():A=!0,i(z,l-u))}else W(e,a),M||j||(M=!0,r(B));return e},t.unstable_cancelCallback=function(e){var t=e.next;if(null!==t){if(e===t)e===D?D=null:e===N&&(N=null);else{e===D?D=t:e===N&&(N=t);var n=e.previous;n.next=t,t.previous=n}e.next=e.previous=null}},t.unstable_wrapCallback=function(e){var t=R;return function(){var n=R;R=t;try{return e.apply(this,arguments)}finally{R=n}}},t.unstable_getCurrentPriorityLevel=function(){return R},t.unstable_shouldYield=function(){var e=t.unstable_now();return F(e),null!==I&&null!==D&&D.startTime<=e&&D.expirationTime<I.expirationTime||a()},t.unstable_requestPaint=V,t.unstable_continueExecution=function(){M||j||(M=!0,r(B))},t.unstable_pauseExecution=function(){},t.unstable_getFirstCallbackNode=function(){return D}},function(e,t,n){"use strict";var r=n(12),i=n(8),o=n(41),a=n(39),u=n(20),l=n(18),c=n(66),s=n(52),f=n(17)("species"),d=[].slice,p=Math.max;r({target:"Array",proto:!0,forced:!s("slice")},{slice:function(e,t){var n,r,s,h=l(this),m=u(h.length),v=a(e,m),g=a(void 0===t?m:t,m);if(o(h)&&("function"!=typeof(n=h.constructor)||n!==Array&&!o(n.prototype)?i(n)&&null===(n=n[f])&&(n=void 0):n=void 0,n===Array||void 0===n))return d.call(h,v,g);for(r=new(void 0===n?Array:n)(p(g-v,0)),s=0;v<g;v++,s++)v in h&&c(r,s,h[v]);return r.length=s,r}})},function(e,t){function n(e){return(n="function"===typeof Symbol&&"symbol"===typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"===typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function r(t){return"function"===typeof Symbol&&"symbol"===n(Symbol.iterator)?e.exports=r=function(e){return n(e)}:e.exports=r=function(e){return e&&"function"===typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":n(e)},r(t)}e.exports=r},function(e,t){function n(t,r){return e.exports=n=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},n(t,r)}e.exports=n},function(e,t,n){"use strict";var r=Object.prototype.hasOwnProperty,i=Array.isArray,o=function(){for(var e=[],t=0;t<256;++t)e.push("%"+((t<16?"0":"")+t.toString(16)).toUpperCase());return e}(),a=function(e,t){for(var n=t&&t.plainObjects?Object.create(null):{},r=0;r<e.length;++r)"undefined"!==typeof e[r]&&(n[r]=e[r]);return n};e.exports={arrayToObject:a,assign:function(e,t){return Object.keys(t).reduce((function(e,n){return e[n]=t[n],e}),e)},combine:function(e,t){return[].concat(e,t)},compact:function(e){for(var t=[{obj:{o:e},prop:"o"}],n=[],r=0;r<t.length;++r)for(var o=t[r],a=o.obj[o.prop],u=Object.keys(a),l=0;l<u.length;++l){var c=u[l],s=a[c];"object"===typeof s&&null!==s&&-1===n.indexOf(s)&&(t.push({obj:a,prop:c}),n.push(s))}return function(e){for(;e.length>1;){var t=e.pop(),n=t.obj[t.prop];if(i(n)){for(var r=[],o=0;o<n.length;++o)"undefined"!==typeof n[o]&&r.push(n[o]);t.obj[t.prop]=r}}}(t),e},decode:function(e,t,n){var r=e.replace(/\+/g," ");if("iso-8859-1"===n)return r.replace(/%[0-9a-f]{2}/gi,unescape);try{return decodeURIComponent(r)}catch(e){return r}},encode:function(e,t,n){if(0===e.length)return e;var r=e;if("symbol"===typeof e?r=Symbol.prototype.toString.call(e):"string"!==typeof e&&(r=String(e)),"iso-8859-1"===n)return escape(r).replace(/%u[0-9a-f]{4}/gi,(function(e){return"%26%23"+parseInt(e.slice(2),16)+"%3B"}));for(var i="",a=0;a<r.length;++a){var u=r.charCodeAt(a);45===u||46===u||95===u||126===u||u>=48&&u<=57||u>=65&&u<=90||u>=97&&u<=122?i+=r.charAt(a):u<128?i+=o[u]:u<2048?i+=o[192|u>>6]+o[128|63&u]:u<55296||u>=57344?i+=o[224|u>>12]+o[128|u>>6&63]+o[128|63&u]:(a+=1,u=65536+((1023&u)<<10|1023&r.charCodeAt(a)),i+=o[240|u>>18]+o[128|u>>12&63]+o[128|u>>6&63]+o[128|63&u])}return i},isBuffer:function(e){return!(!e||"object"!==typeof e)&&!!(e.constructor&&e.constructor.isBuffer&&e.constructor.isBuffer(e))},isRegExp:function(e){return"[object RegExp]"===Object.prototype.toString.call(e)},merge:function e(t,n,o){if(!n)return t;if("object"!==typeof n){if(i(t))t.push(n);else{if(!t||"object"!==typeof t)return[t,n];(o&&(o.plainObjects||o.allowPrototypes)||!r.call(Object.prototype,n))&&(t[n]=!0)}return t}if(!t||"object"!==typeof t)return[t].concat(n);var u=t;return i(t)&&!i(n)&&(u=a(t,o)),i(t)&&i(n)?(n.forEach((function(n,i){if(r.call(t,i)){var a=t[i];a&&"object"===typeof a&&n&&"object"===typeof n?t[i]=e(a,n,o):t.push(n)}else t[i]=n})),t):Object.keys(n).reduce((function(t,i){var a=n[i];return r.call(t,i)?t[i]=e(t[i],a,o):t[i]=a,t}),u)}}},function(e,t,n){var r=n(100);e.exports=function(e){if(!r(e))throw TypeError(e+" is not an object!");return e}},function(e,t,n){var r=n(140),i=n(141);e.exports=function(e){return r(i(e))}},function(e,t,n){var r;!function(){"use strict";var i={not_string:/[^s]/,not_bool:/[^t]/,not_type:/[^T]/,not_primitive:/[^v]/,number:/[diefg]/,numeric_arg:/[bcdiefguxX]/,json:/[j]/,not_json:/[^j]/,text:/^[^\x25]+/,modulo:/^\x25{2}/,placeholder:/^\x25(?:([1-9]\d*)\$|\(([^)]+)\))?(\+)?(0|'[^$])?(-)?(\d+)?(?:\.(\d+))?([b-gijostTuvxX])/,key:/^([a-z_][a-z_\d]*)/i,key_access:/^\.([a-z_][a-z_\d]*)/i,index_access:/^\[(\d+)\]/,sign:/^[+-]/};function o(e){return function(e,t){var n,r,a,u,l,c,s,f,d,p=1,h=e.length,m="";for(r=0;r<h;r++)if("string"===typeof e[r])m+=e[r];else if("object"===typeof e[r]){if((u=e[r]).keys)for(n=t[p],a=0;a<u.keys.length;a++){if(void 0==n)throw new Error(o('[sprintf] Cannot access property "%s" of undefined value "%s"',u.keys[a],u.keys[a-1]));n=n[u.keys[a]]}else n=u.param_no?t[u.param_no]:t[p++];if(i.not_type.test(u.type)&&i.not_primitive.test(u.type)&&n instanceof Function&&(n=n()),i.numeric_arg.test(u.type)&&"number"!==typeof n&&isNaN(n))throw new TypeError(o("[sprintf] expecting number but found %T",n));switch(i.number.test(u.type)&&(f=n>=0),u.type){case"b":n=parseInt(n,10).toString(2);break;case"c":n=String.fromCharCode(parseInt(n,10));break;case"d":case"i":n=parseInt(n,10);break;case"j":n=JSON.stringify(n,null,u.width?parseInt(u.width):0);break;case"e":n=u.precision?parseFloat(n).toExponential(u.precision):parseFloat(n).toExponential();break;case"f":n=u.precision?parseFloat(n).toFixed(u.precision):parseFloat(n);break;case"g":n=u.precision?String(Number(n.toPrecision(u.precision))):parseFloat(n);break;case"o":n=(parseInt(n,10)>>>0).toString(8);break;case"s":n=String(n),n=u.precision?n.substring(0,u.precision):n;break;case"t":n=String(!!n),n=u.precision?n.substring(0,u.precision):n;break;case"T":n=Object.prototype.toString.call(n).slice(8,-1).toLowerCase(),n=u.precision?n.substring(0,u.precision):n;break;case"u":n=parseInt(n,10)>>>0;break;case"v":n=n.valueOf(),n=u.precision?n.substring(0,u.precision):n;break;case"x":n=(parseInt(n,10)>>>0).toString(16);break;case"X":n=(parseInt(n,10)>>>0).toString(16).toUpperCase()}i.json.test(u.type)?m+=n:(!i.number.test(u.type)||f&&!u.sign?d="":(d=f?"+":"-",n=n.toString().replace(i.sign,"")),c=u.pad_char?"0"===u.pad_char?"0":u.pad_char.charAt(1):" ",s=u.width-(d+n).length,l=u.width&&s>0?c.repeat(s):"",m+=u.align?d+n+l:"0"===c?d+l+n:l+d+n)}return m}(function(e){if(u[e])return u[e];var t,n=e,r=[],o=0;for(;n;){if(null!==(t=i.text.exec(n)))r.push(t[0]);else if(null!==(t=i.modulo.exec(n)))r.push("%");else{if(null===(t=i.placeholder.exec(n)))throw new SyntaxError("[sprintf] unexpected placeholder");if(t[2]){o|=1;var a=[],l=t[2],c=[];if(null===(c=i.key.exec(l)))throw new SyntaxError("[sprintf] failed to parse named argument key");for(a.push(c[1]);""!==(l=l.substring(c[0].length));)if(null!==(c=i.key_access.exec(l)))a.push(c[1]);else{if(null===(c=i.index_access.exec(l)))throw new SyntaxError("[sprintf] failed to parse named argument key");a.push(c[1])}t[2]=a}else o|=2;if(3===o)throw new Error("[sprintf] mixing positional and named placeholders is not (yet) supported");r.push({placeholder:t[0],param_no:t[1],keys:t[2],sign:t[3],pad_char:t[4],align:t[5],width:t[6],precision:t[7],type:t[8]})}n=n.substring(t[0].length)}return u[e]=r}(e),arguments)}function a(e,t){return o.apply(null,[e].concat(t||[]))}var u=Object.create(null);t.sprintf=o,t.vsprintf=a,"undefined"!==typeof window&&(window.sprintf=o,window.vsprintf=a,void 0===(r=function(){return{sprintf:o,vsprintf:a}}.call(t,n,t,e))||(e.exports=r))}()},function(e,t,n){e.exports=n(304)},function(e,t,n){var r;!function(){"use strict";var i={not_string:/[^s]/,not_bool:/[^t]/,not_type:/[^T]/,not_primitive:/[^v]/,number:/[diefg]/,numeric_arg:/[bcdiefguxX]/,json:/[j]/,not_json:/[^j]/,text:/^[^\x25]+/,modulo:/^\x25{2}/,placeholder:/^\x25(?:([1-9]\d*)\$|\(([^)]+)\))?(\+)?(0|'[^$])?(-)?(\d+)?(?:\.(\d+))?([b-gijostTuvxX])/,key:/^([a-z_][a-z_\d]*)/i,key_access:/^\.([a-z_][a-z_\d]*)/i,index_access:/^\[(\d+)\]/,sign:/^[+-]/};function o(e){return function(e,t){var n,r,a,u,l,c,s,f,d,p=1,h=e.length,m="";for(r=0;r<h;r++)if("string"===typeof e[r])m+=e[r];else if("object"===typeof e[r]){if((u=e[r]).keys)for(n=t[p],a=0;a<u.keys.length;a++){if(void 0==n)throw new Error(o('[sprintf] Cannot access property "%s" of undefined value "%s"',u.keys[a],u.keys[a-1]));n=n[u.keys[a]]}else n=u.param_no?t[u.param_no]:t[p++];if(i.not_type.test(u.type)&&i.not_primitive.test(u.type)&&n instanceof Function&&(n=n()),i.numeric_arg.test(u.type)&&"number"!==typeof n&&isNaN(n))throw new TypeError(o("[sprintf] expecting number but found %T",n));switch(i.number.test(u.type)&&(f=n>=0),u.type){case"b":n=parseInt(n,10).toString(2);break;case"c":n=String.fromCharCode(parseInt(n,10));break;case"d":case"i":n=parseInt(n,10);break;case"j":n=JSON.stringify(n,null,u.width?parseInt(u.width):0);break;case"e":n=u.precision?parseFloat(n).toExponential(u.precision):parseFloat(n).toExponential();break;case"f":n=u.precision?parseFloat(n).toFixed(u.precision):parseFloat(n);break;case"g":n=u.precision?String(Number(n.toPrecision(u.precision))):parseFloat(n);break;case"o":n=(parseInt(n,10)>>>0).toString(8);break;case"s":n=String(n),n=u.precision?n.substring(0,u.precision):n;break;case"t":n=String(!!n),n=u.precision?n.substring(0,u.precision):n;break;case"T":n=Object.prototype.toString.call(n).slice(8,-1).toLowerCase(),n=u.precision?n.substring(0,u.precision):n;break;case"u":n=parseInt(n,10)>>>0;break;case"v":n=n.valueOf(),n=u.precision?n.substring(0,u.precision):n;break;case"x":n=(parseInt(n,10)>>>0).toString(16);break;case"X":n=(parseInt(n,10)>>>0).toString(16).toUpperCase()}i.json.test(u.type)?m+=n:(!i.number.test(u.type)||f&&!u.sign?d="":(d=f?"+":"-",n=n.toString().replace(i.sign,"")),c=u.pad_char?"0"===u.pad_char?"0":u.pad_char.charAt(1):" ",s=u.width-(d+n).length,l=u.width&&s>0?c.repeat(s):"",m+=u.align?d+n+l:"0"===c?d+l+n:l+d+n)}return m}(function(e){if(u[e])return u[e];var t,n=e,r=[],o=0;for(;n;){if(null!==(t=i.text.exec(n)))r.push(t[0]);else if(null!==(t=i.modulo.exec(n)))r.push("%");else{if(null===(t=i.placeholder.exec(n)))throw new SyntaxError("[sprintf] unexpected placeholder");if(t[2]){o|=1;var a=[],l=t[2],c=[];if(null===(c=i.key.exec(l)))throw new SyntaxError("[sprintf] failed to parse named argument key");for(a.push(c[1]);""!==(l=l.substring(c[0].length));)if(null!==(c=i.key_access.exec(l)))a.push(c[1]);else{if(null===(c=i.index_access.exec(l)))throw new SyntaxError("[sprintf] failed to parse named argument key");a.push(c[1])}t[2]=a}else o|=2;if(3===o)throw new Error("[sprintf] mixing positional and named placeholders is not (yet) supported");r.push({placeholder:t[0],param_no:t[1],keys:t[2],sign:t[3],pad_char:t[4],align:t[5],width:t[6],precision:t[7],type:t[8]})}n=n.substring(t[0].length)}return u[e]=r}(e),arguments)}function a(e,t){return o.apply(null,[e].concat(t||[]))}var u=Object.create(null);t.sprintf=o,t.vsprintf=a,"undefined"!==typeof window&&(window.sprintf=o,window.vsprintf=a,void 0===(r=function(){return{sprintf:o,vsprintf:a}}.call(t,n,t,e))||(e.exports=r))}()},function(e,t,n){"use strict";var r=n(332),i={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},o={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},a={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},u={};function l(e){return r.isMemo(e)?a:u[e.$$typeof]||i}u[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0};var c=Object.defineProperty,s=Object.getOwnPropertyNames,f=Object.getOwnPropertySymbols,d=Object.getOwnPropertyDescriptor,p=Object.getPrototypeOf,h=Object.prototype;e.exports=function e(t,n,r){if("string"!==typeof n){if(h){var i=p(n);i&&i!==h&&e(t,i,r)}var a=s(n);f&&(a=a.concat(f(n)));for(var u=l(t),m=l(n),v=0;v<a.length;++v){var g=a[v];if(!o[g]&&(!r||!r[g])&&(!m||!m[g])&&(!u||!u[g])){var y=d(n,g);try{c(t,g,y)}catch(e){}}}return t}return t}},function(e,t,n){"use strict";(function(e,r){var i,o=n(277);i="undefined"!==typeof self?self:"undefined"!==typeof window?window:"undefined"!==typeof e?e:r;var a=Object(o.a)(i);t.a=a}).call(this,n(43),n(335)(e))},function(e,t,n){e.exports=n(342)},function(e,t,n){"use strict";var r=String.prototype.replace,i=/%20/g,o=n(127),a={RFC1738:"RFC1738",RFC3986:"RFC3986"};e.exports=o.assign({default:a.RFC3986,formatters:{RFC1738:function(e){return r.call(e,i,"+")},RFC3986:function(e){return String(e)}}},a)},function(e,t,n){var r=n(128),i=n(312),o=n(313),a=Object.defineProperty;t.f=n(82)?Object.defineProperty:function(e,t,n){if(r(e),t=o(t,!0),r(n),i)try{return a(e,t,n)}catch(e){}if("get"in n||"set"in n)throw TypeError("Accessors not supported!");return"value"in n&&(e[t]=n.value),e}},function(e,t,n){var r=n(100),i=n(99).document,o=r(i)&&r(i.createElement);e.exports=function(e){return o?i.createElement(e):{}}},function(e,t){var n={}.hasOwnProperty;e.exports=function(e,t){return n.call(e,t)}},function(e,t,n){var r=n(317);e.exports=Object("z").propertyIsEnumerable(0)?Object:function(e){return"String"==r(e)?e.split(""):Object(e)}},function(e,t){e.exports=function(e){if(void 0==e)throw TypeError("Can't call method on  "+e);return e}},function(e,t){var n=Math.ceil,r=Math.floor;e.exports=function(e){return isNaN(e=+e)?0:(e>0?r:n)(e)}},function(e,t,n){var r=n(321)("keys"),i=n(323);e.exports=function(e){return r[e]||(r[e]=i(e))}},function(e,t){e.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},function(e,t){t.f={}.propertyIsEnumerable},function(e,t,n){var r=n(141);e.exports=function(e){return Object(r(e))}},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(e,t,n){var r=n(301),i=n(302),o=n(303);e.exports=function(e,t){return r(e)||i(e,t)||o()}},function(e,t,n){e.exports=n(325)},function(e,t,n){"use strict";e.exports=n(334)},function(e,t,n){"use strict";function r(e){var t,n=e.Symbol;return"function"===typeof n?n.observable?t=n.observable:(t=n("observable"),n.observable=t):t="@@observable",t}n.d(t,"a",(function(){return r}))},function(e,t,n){e.exports=n(336)},function(e,t,n){e.exports=n(344)},,,,,,,,,,,,,,,,,function(e,t,n){"use strict";var r=n(77),i="function"===typeof Symbol&&Symbol.for,o=i?Symbol.for("react.element"):60103,a=i?Symbol.for("react.portal"):60106,u=i?Symbol.for("react.fragment"):60107,l=i?Symbol.for("react.strict_mode"):60108,c=i?Symbol.for("react.profiler"):60114,s=i?Symbol.for("react.provider"):60109,f=i?Symbol.for("react.context"):60110,d=i?Symbol.for("react.forward_ref"):60112,p=i?Symbol.for("react.suspense"):60113,h=i?Symbol.for("react.suspense_list"):60120,m=i?Symbol.for("react.memo"):60115,v=i?Symbol.for("react.lazy"):60116;i&&Symbol.for("react.fundamental"),i&&Symbol.for("react.responder");var g="function"===typeof Symbol&&Symbol.iterator;function y(e){for(var t=e.message,n="https://reactjs.org/docs/error-decoder.html?invariant="+t,r=1;r<arguments.length;r++)n+="&args[]="+encodeURIComponent(arguments[r]);return e.message="Minified React error #"+t+"; visit "+n+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",e}var b={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},w={};function x(e,t,n){this.props=e,this.context=t,this.refs=w,this.updater=n||b}function _(){}function E(e,t,n){this.props=e,this.context=t,this.refs=w,this.updater=n||b}x.prototype.isReactComponent={},x.prototype.setState=function(e,t){if("object"!==typeof e&&"function"!==typeof e&&null!=e)throw y(Error(85));this.updater.enqueueSetState(this,e,t,"setState")},x.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},_.prototype=x.prototype;var k=E.prototype=new _;k.constructor=E,r(k,x.prototype),k.isPureReactComponent=!0;var S={current:null},C={suspense:null},T={current:null},P=Object.prototype.hasOwnProperty,O={key:!0,ref:!0,__self:!0,__source:!0};function D(e,t,n){var r=void 0,i={},a=null,u=null;if(null!=t)for(r in void 0!==t.ref&&(u=t.ref),void 0!==t.key&&(a=""+t.key),t)P.call(t,r)&&!O.hasOwnProperty(r)&&(i[r]=t[r]);var l=arguments.length-2;if(1===l)i.children=n;else if(1<l){for(var c=Array(l),s=0;s<l;s++)c[s]=arguments[s+2];i.children=c}if(e&&e.defaultProps)for(r in l=e.defaultProps)void 0===i[r]&&(i[r]=l[r]);return{$$typeof:o,type:e,key:a,ref:u,props:i,_owner:T.current}}function N(e){return"object"===typeof e&&null!==e&&e.$$typeof===o}var I=/\/+/g,R=[];function j(e,t,n,r){if(R.length){var i=R.pop();return i.result=e,i.keyPrefix=t,i.func=n,i.context=r,i.count=0,i}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function M(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>R.length&&R.push(e)}function A(e,t,n){return null==e?0:function e(t,n,r,i){var u=typeof t;"undefined"!==u&&"boolean"!==u||(t=null);var l=!1;if(null===t)l=!0;else switch(u){case"string":case"number":l=!0;break;case"object":switch(t.$$typeof){case o:case a:l=!0}}if(l)return r(i,t,""===n?"."+L(t,0):n),1;if(l=0,n=""===n?".":n+":",Array.isArray(t))for(var c=0;c<t.length;c++){var s=n+L(u=t[c],c);l+=e(u,s,r,i)}else if(null===t||"object"!==typeof t?s=null:s="function"===typeof(s=g&&t[g]||t["@@iterator"])?s:null,"function"===typeof s)for(t=s.call(t),c=0;!(u=t.next()).done;)l+=e(u=u.value,s=n+L(u,c++),r,i);else if("object"===u)throw r=""+t,y(Error(31),"[object Object]"===r?"object with keys {"+Object.keys(t).join(", ")+"}":r,"");return l}(e,"",t,n)}function L(e,t){return"object"===typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,(function(e){return t[e]}))}(e.key):t.toString(36)}function F(e,t){e.func.call(e.context,t,e.count++)}function z(e,t,n){var r=e.result,i=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?B(e,r,n,(function(e){return e})):null!=e&&(N(e)&&(e=function(e,t){return{$$typeof:o,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(e,i+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(I,"$&/")+"/")+n)),r.push(e))}function B(e,t,n,r,i){var o="";null!=n&&(o=(""+n).replace(I,"$&/")+"/"),A(e,z,t=j(t,o,r,i)),M(t)}function U(){var e=S.current;if(null===e)throw y(Error(321));return e}var W={Children:{map:function(e,t,n){if(null==e)return e;var r=[];return B(e,r,null,t,n),r},forEach:function(e,t,n){if(null==e)return e;A(e,F,t=j(null,null,t,n)),M(t)},count:function(e){return A(e,(function(){return null}),null)},toArray:function(e){var t=[];return B(e,t,null,(function(e){return e})),t},only:function(e){if(!N(e))throw y(Error(143));return e}},createRef:function(){return{current:null}},Component:x,PureComponent:E,createContext:function(e,t){return void 0===t&&(t=null),(e={$$typeof:f,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:s,_context:e},e.Consumer=e},forwardRef:function(e){return{$$typeof:d,render:e}},lazy:function(e){return{$$typeof:v,_ctor:e,_status:-1,_result:null}},memo:function(e,t){return{$$typeof:m,type:e,compare:void 0===t?null:t}},useCallback:function(e,t){return U().useCallback(e,t)},useContext:function(e,t){return U().useContext(e,t)},useEffect:function(e,t){return U().useEffect(e,t)},useImperativeHandle:function(e,t,n){return U().useImperativeHandle(e,t,n)},useDebugValue:function(){},useLayoutEffect:function(e,t){return U().useLayoutEffect(e,t)},useMemo:function(e,t){return U().useMemo(e,t)},useReducer:function(e,t,n){return U().useReducer(e,t,n)},useRef:function(e){return U().useRef(e)},useState:function(e){return U().useState(e)},Fragment:u,Profiler:c,StrictMode:l,Suspense:p,unstable_SuspenseList:h,createElement:D,cloneElement:function(e,t,n){if(null===e||void 0===e)throw y(Error(267),e);var i=void 0,a=r({},e.props),u=e.key,l=e.ref,c=e._owner;if(null!=t){void 0!==t.ref&&(l=t.ref,c=T.current),void 0!==t.key&&(u=""+t.key);var s=void 0;for(i in e.type&&e.type.defaultProps&&(s=e.type.defaultProps),t)P.call(t,i)&&!O.hasOwnProperty(i)&&(a[i]=void 0===t[i]&&void 0!==s?s[i]:t[i])}if(1===(i=arguments.length-2))a.children=n;else if(1<i){s=Array(i);for(var f=0;f<i;f++)s[f]=arguments[f+2];a.children=s}return{$$typeof:o,type:e.type,key:u,ref:l,props:a,_owner:c}},createFactory:function(e){var t=D.bind(null,e);return t.type=e,t},isValidElement:N,version:"16.9.0",unstable_withSuspenseConfig:function(e,t){var n=C.suspense;C.suspense=void 0===t?null:t;try{e()}finally{C.suspense=n}},__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentDispatcher:S,ReactCurrentBatchConfig:C,ReactCurrentOwner:T,IsSomeRendererActing:{current:!1},assign:r}},V={default:W},H=V&&W||V;e.exports=H.default||H},function(e,t,n){"use strict";var r=n(1),i=n(77),o=n(298);function a(e){for(var t=e.message,n="https://reactjs.org/docs/error-decoder.html?invariant="+t,r=1;r<arguments.length;r++)n+="&args[]="+encodeURIComponent(arguments[r]);return e.message="Minified React error #"+t+"; visit "+n+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",e}if(!r)throw a(Error(227));var u=null,l={};function c(){if(u)for(var e in l){var t=l[e],n=u.indexOf(e);if(!(-1<n))throw a(Error(96),e);if(!f[n]){if(!t.extractEvents)throw a(Error(97),e);for(var r in f[n]=t,n=t.eventTypes){var i=void 0,o=n[r],c=t,p=r;if(d.hasOwnProperty(p))throw a(Error(99),p);d[p]=o;var h=o.phasedRegistrationNames;if(h){for(i in h)h.hasOwnProperty(i)&&s(h[i],c,p);i=!0}else o.registrationName?(s(o.registrationName,c,p),i=!0):i=!1;if(!i)throw a(Error(98),r,e)}}}}function s(e,t,n){if(p[e])throw a(Error(100),e);p[e]=t,h[e]=t.eventTypes[n].dependencies}var f=[],d={},p={},h={};function m(e,t,n,r,i,o,a,u,l){var c=Array.prototype.slice.call(arguments,3);try{t.apply(n,c)}catch(e){this.onError(e)}}var v=!1,g=null,y=!1,b=null,w={onError:function(e){v=!0,g=e}};function x(e,t,n,r,i,o,a,u,l){v=!1,g=null,m.apply(w,arguments)}var _=null,E=null,k=null;function S(e,t,n){var r=e.type||"unknown-event";e.currentTarget=k(n),function(e,t,n,r,i,o,u,l,c){if(x.apply(this,arguments),v){if(!v)throw a(Error(198));var s=g;v=!1,g=null,y||(y=!0,b=s)}}(r,t,void 0,e),e.currentTarget=null}function C(e,t){if(null==t)throw a(Error(30));return null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}function T(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)}var P=null;function O(e){if(e){var t=e._dispatchListeners,n=e._dispatchInstances;if(Array.isArray(t))for(var r=0;r<t.length&&!e.isPropagationStopped();r++)S(e,t[r],n[r]);else t&&S(e,t,n);e._dispatchListeners=null,e._dispatchInstances=null,e.isPersistent()||e.constructor.release(e)}}function D(e){if(null!==e&&(P=C(P,e)),e=P,P=null,e){if(T(e,O),P)throw a(Error(95));if(y)throw e=b,y=!1,b=null,e}}var N={injectEventPluginOrder:function(e){if(u)throw a(Error(101));u=Array.prototype.slice.call(e),c()},injectEventPluginsByName:function(e){var t,n=!1;for(t in e)if(e.hasOwnProperty(t)){var r=e[t];if(!l.hasOwnProperty(t)||l[t]!==r){if(l[t])throw a(Error(102),t);l[t]=r,n=!0}}n&&c()}};function I(e,t){var n=e.stateNode;if(!n)return null;var r=_(n);if(!r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!==typeof n)throw a(Error(231),t,typeof n);return n}var R=Math.random().toString(36).slice(2),j="__reactInternalInstance$"+R,M="__reactEventHandlers$"+R;function A(e){if(e[j])return e[j];for(;!e[j];){if(!e.parentNode)return null;e=e.parentNode}return 5===(e=e[j]).tag||6===e.tag?e:null}function L(e){return!(e=e[j])||5!==e.tag&&6!==e.tag?null:e}function F(e){if(5===e.tag||6===e.tag)return e.stateNode;throw a(Error(33))}function z(e){return e[M]||null}function B(e){do{e=e.return}while(e&&5!==e.tag);return e||null}function U(e,t,n){(t=I(e,n.dispatchConfig.phasedRegistrationNames[t]))&&(n._dispatchListeners=C(n._dispatchListeners,t),n._dispatchInstances=C(n._dispatchInstances,e))}function W(e){if(e&&e.dispatchConfig.phasedRegistrationNames){for(var t=e._targetInst,n=[];t;)n.push(t),t=B(t);for(t=n.length;0<t--;)U(n[t],"captured",e);for(t=0;t<n.length;t++)U(n[t],"bubbled",e)}}function V(e,t,n){e&&n&&n.dispatchConfig.registrationName&&(t=I(e,n.dispatchConfig.registrationName))&&(n._dispatchListeners=C(n._dispatchListeners,t),n._dispatchInstances=C(n._dispatchInstances,e))}function H(e){e&&e.dispatchConfig.registrationName&&V(e._targetInst,null,e)}function $(e){T(e,W)}var G=!("undefined"===typeof window||"undefined"===typeof window.document||"undefined"===typeof window.document.createElement);function q(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var Q={animationend:q("Animation","AnimationEnd"),animationiteration:q("Animation","AnimationIteration"),animationstart:q("Animation","AnimationStart"),transitionend:q("Transition","TransitionEnd")},K={},Y={};function X(e){if(K[e])return K[e];if(!Q[e])return e;var t,n=Q[e];for(t in n)if(n.hasOwnProperty(t)&&t in Y)return K[e]=n[t];return e}G&&(Y=document.createElement("div").style,"AnimationEvent"in window||(delete Q.animationend.animation,delete Q.animationiteration.animation,delete Q.animationstart.animation),"TransitionEvent"in window||delete Q.transitionend.transition);var J=X("animationend"),Z=X("animationiteration"),ee=X("animationstart"),te=X("transitionend"),ne="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),re=null,ie=null,oe=null;function ae(){if(oe)return oe;var e,t,n=ie,r=n.length,i="value"in re?re.value:re.textContent,o=i.length;for(e=0;e<r&&n[e]===i[e];e++);var a=r-e;for(t=1;t<=a&&n[r-t]===i[o-t];t++);return oe=i.slice(e,1<t?1-t:void 0)}function ue(){return!0}function le(){return!1}function ce(e,t,n,r){for(var i in this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=n,e=this.constructor.Interface)e.hasOwnProperty(i)&&((t=e[i])?this[i]=t(n):"target"===i?this.target=r:this[i]=n[i]);return this.isDefaultPrevented=(null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue)?ue:le,this.isPropagationStopped=le,this}function se(e,t,n,r){if(this.eventPool.length){var i=this.eventPool.pop();return this.call(i,e,t,n,r),i}return new this(e,t,n,r)}function fe(e){if(!(e instanceof this))throw a(Error(279));e.destructor(),10>this.eventPool.length&&this.eventPool.push(e)}function de(e){e.eventPool=[],e.getPooled=se,e.release=fe}i(ce.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!==typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=ue)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!==typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=ue)},persist:function(){this.isPersistent=ue},isPersistent:le,destructor:function(){var e,t=this.constructor.Interface;for(e in t)this[e]=null;this.nativeEvent=this._targetInst=this.dispatchConfig=null,this.isPropagationStopped=this.isDefaultPrevented=le,this._dispatchInstances=this._dispatchListeners=null}}),ce.Interface={type:null,target:null,currentTarget:function(){return null},eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null},ce.extend=function(e){function t(){}function n(){return r.apply(this,arguments)}var r=this;t.prototype=r.prototype;var o=new t;return i(o,n.prototype),n.prototype=o,n.prototype.constructor=n,n.Interface=i({},r.Interface,e),n.extend=r.extend,de(n),n},de(ce);var pe=ce.extend({data:null}),he=ce.extend({data:null}),me=[9,13,27,32],ve=G&&"CompositionEvent"in window,ge=null;G&&"documentMode"in document&&(ge=document.documentMode);var ye=G&&"TextEvent"in window&&!ge,be=G&&(!ve||ge&&8<ge&&11>=ge),we=String.fromCharCode(32),xe={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["compositionend","keypress","textInput","paste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"blur compositionend keydown keypress keyup mousedown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"blur compositionstart keydown keypress keyup mousedown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"blur compositionupdate keydown keypress keyup mousedown".split(" ")}},_e=!1;function Ee(e,t){switch(e){case"keyup":return-1!==me.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"blur":return!0;default:return!1}}function ke(e){return"object"===typeof(e=e.detail)&&"data"in e?e.data:null}var Se=!1;var Ce={eventTypes:xe,extractEvents:function(e,t,n,r){var i=void 0,o=void 0;if(ve)e:{switch(e){case"compositionstart":i=xe.compositionStart;break e;case"compositionend":i=xe.compositionEnd;break e;case"compositionupdate":i=xe.compositionUpdate;break e}i=void 0}else Se?Ee(e,n)&&(i=xe.compositionEnd):"keydown"===e&&229===n.keyCode&&(i=xe.compositionStart);return i?(be&&"ko"!==n.locale&&(Se||i!==xe.compositionStart?i===xe.compositionEnd&&Se&&(o=ae()):(ie="value"in(re=r)?re.value:re.textContent,Se=!0)),i=pe.getPooled(i,t,n,r),o?i.data=o:null!==(o=ke(n))&&(i.data=o),$(i),o=i):o=null,(e=ye?function(e,t){switch(e){case"compositionend":return ke(t);case"keypress":return 32!==t.which?null:(_e=!0,we);case"textInput":return(e=t.data)===we&&_e?null:e;default:return null}}(e,n):function(e,t){if(Se)return"compositionend"===e||!ve&&Ee(e,t)?(e=ae(),oe=ie=re=null,Se=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return be&&"ko"!==t.locale?null:t.data;default:return null}}(e,n))?((t=he.getPooled(xe.beforeInput,t,n,r)).data=e,$(t)):t=null,null===o?t:null===t?o:[o,t]}},Te=null,Pe=null,Oe=null;function De(e){if(e=E(e)){if("function"!==typeof Te)throw a(Error(280));var t=_(e.stateNode);Te(e.stateNode,e.type,t)}}function Ne(e){Pe?Oe?Oe.push(e):Oe=[e]:Pe=e}function Ie(){if(Pe){var e=Pe,t=Oe;if(Oe=Pe=null,De(e),t)for(e=0;e<t.length;e++)De(t[e])}}function Re(e,t){return e(t)}function je(e,t,n,r){return e(t,n,r)}function Me(){}var Ae=Re,Le=!1;function Fe(){null===Pe&&null===Oe||(Me(),Ie())}var ze={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Be(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!ze[e.type]:"textarea"===t}function Ue(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}function We(e){if(!G)return!1;var t=(e="on"+e)in document;return t||((t=document.createElement("div")).setAttribute(e,"return;"),t="function"===typeof t[e]),t}function Ve(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function He(e){e._valueTracker||(e._valueTracker=function(e){var t=Ve(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&"undefined"!==typeof n&&"function"===typeof n.get&&"function"===typeof n.set){var i=n.get,o=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return i.call(this)},set:function(e){r=""+e,o.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function $e(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=Ve(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}var Ge=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;Ge.hasOwnProperty("ReactCurrentDispatcher")||(Ge.ReactCurrentDispatcher={current:null}),Ge.hasOwnProperty("ReactCurrentBatchConfig")||(Ge.ReactCurrentBatchConfig={suspense:null});var qe=/^(.*)[\\\/]/,Qe="function"===typeof Symbol&&Symbol.for,Ke=Qe?Symbol.for("react.element"):60103,Ye=Qe?Symbol.for("react.portal"):60106,Xe=Qe?Symbol.for("react.fragment"):60107,Je=Qe?Symbol.for("react.strict_mode"):60108,Ze=Qe?Symbol.for("react.profiler"):60114,et=Qe?Symbol.for("react.provider"):60109,tt=Qe?Symbol.for("react.context"):60110,nt=Qe?Symbol.for("react.concurrent_mode"):60111,rt=Qe?Symbol.for("react.forward_ref"):60112,it=Qe?Symbol.for("react.suspense"):60113,ot=Qe?Symbol.for("react.suspense_list"):60120,at=Qe?Symbol.for("react.memo"):60115,ut=Qe?Symbol.for("react.lazy"):60116;Qe&&Symbol.for("react.fundamental"),Qe&&Symbol.for("react.responder");var lt="function"===typeof Symbol&&Symbol.iterator;function ct(e){return null===e||"object"!==typeof e?null:"function"===typeof(e=lt&&e[lt]||e["@@iterator"])?e:null}function st(e){if(null==e)return null;if("function"===typeof e)return e.displayName||e.name||null;if("string"===typeof e)return e;switch(e){case Xe:return"Fragment";case Ye:return"Portal";case Ze:return"Profiler";case Je:return"StrictMode";case it:return"Suspense";case ot:return"SuspenseList"}if("object"===typeof e)switch(e.$$typeof){case tt:return"Context.Consumer";case et:return"Context.Provider";case rt:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case at:return st(e.type);case ut:if(e=1===e._status?e._result:null)return st(e)}return null}function ft(e){var t="";do{e:switch(e.tag){case 3:case 4:case 6:case 7:case 10:case 9:var n="";break e;default:var r=e._debugOwner,i=e._debugSource,o=st(e.type);n=null,r&&(n=st(r.type)),r=o,o="",i?o=" (at "+i.fileName.replace(qe,"")+":"+i.lineNumber+")":n&&(o=" (created by "+n+")"),n="\n    in "+(r||"Unknown")+o}t+=n,e=e.return}while(e);return t}var dt=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,pt=Object.prototype.hasOwnProperty,ht={},mt={};function vt(e,t,n,r,i,o){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=i,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=o}var gt={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){gt[e]=new vt(e,0,!1,e,null,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];gt[t]=new vt(t,1,!1,e[1],null,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){gt[e]=new vt(e,2,!1,e.toLowerCase(),null,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){gt[e]=new vt(e,2,!1,e,null,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){gt[e]=new vt(e,3,!1,e.toLowerCase(),null,!1)})),["checked","multiple","muted","selected"].forEach((function(e){gt[e]=new vt(e,3,!0,e,null,!1)})),["capture","download"].forEach((function(e){gt[e]=new vt(e,4,!1,e,null,!1)})),["cols","rows","size","span"].forEach((function(e){gt[e]=new vt(e,6,!1,e,null,!1)})),["rowSpan","start"].forEach((function(e){gt[e]=new vt(e,5,!1,e.toLowerCase(),null,!1)}));var yt=/[\-:]([a-z])/g;function bt(e){return e[1].toUpperCase()}function wt(e,t,n,r){var i=gt.hasOwnProperty(t)?gt[t]:null;(null!==i?0===i.type:!r&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(function(e,t,n,r){if(null===t||"undefined"===typeof t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,i,r)&&(n=null),r||null===i?function(e){return!!pt.call(mt,e)||!pt.call(ht,e)&&(dt.test(e)?mt[e]=!0:(ht[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):i.mustUseProperty?e[i.propertyName]=null===n?3!==i.type&&"":n:(t=i.attributeName,r=i.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(i=i.type)||4===i&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}function xt(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function _t(e,t){var n=t.checked;return i({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function Et(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=xt(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function kt(e,t){null!=(t=t.checked)&&wt(e,"checked",t,!1)}function St(e,t){kt(e,t);var n=xt(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?Tt(e,t.type,n):t.hasOwnProperty("defaultValue")&&Tt(e,t.type,xt(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function Ct(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!e.defaultChecked,e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function Tt(e,t,n){"number"===t&&e.ownerDocument.activeElement===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(yt,bt);gt[t]=new vt(t,1,!1,e,null,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(yt,bt);gt[t]=new vt(t,1,!1,e,"http://www.w3.org/1999/xlink",!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(yt,bt);gt[t]=new vt(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1)})),["tabIndex","crossOrigin"].forEach((function(e){gt[e]=new vt(e,1,!1,e.toLowerCase(),null,!1)})),gt.xlinkHref=new vt("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0),["src","href","action","formAction"].forEach((function(e){gt[e]=new vt(e,1,!1,e.toLowerCase(),null,!0)}));var Pt={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"blur change click focus input keydown keyup selectionchange".split(" ")}};function Ot(e,t,n){return(e=ce.getPooled(Pt.change,e,t,n)).type="change",Ne(n),$(e),e}var Dt=null,Nt=null;function It(e){D(e)}function Rt(e){if($e(F(e)))return e}function jt(e,t){if("change"===e)return t}var Mt=!1;function At(){Dt&&(Dt.detachEvent("onpropertychange",Lt),Nt=Dt=null)}function Lt(e){if("value"===e.propertyName&&Rt(Nt))if(e=Ot(Nt,e,Ue(e)),Le)D(e);else{Le=!0;try{Re(It,e)}finally{Le=!1,Fe()}}}function Ft(e,t,n){"focus"===e?(At(),Nt=n,(Dt=t).attachEvent("onpropertychange",Lt)):"blur"===e&&At()}function zt(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Rt(Nt)}function Bt(e,t){if("click"===e)return Rt(t)}function Ut(e,t){if("input"===e||"change"===e)return Rt(t)}G&&(Mt=We("input")&&(!document.documentMode||9<document.documentMode));var Wt={eventTypes:Pt,_isInputEventSupported:Mt,extractEvents:function(e,t,n,r){var i=t?F(t):window,o=void 0,a=void 0,u=i.nodeName&&i.nodeName.toLowerCase();if("select"===u||"input"===u&&"file"===i.type?o=jt:Be(i)?Mt?o=Ut:(o=zt,a=Ft):(u=i.nodeName)&&"input"===u.toLowerCase()&&("checkbox"===i.type||"radio"===i.type)&&(o=Bt),o&&(o=o(e,t)))return Ot(o,n,r);a&&a(e,i,t),"blur"===e&&(e=i._wrapperState)&&e.controlled&&"number"===i.type&&Tt(i,"number",i.value)}},Vt=ce.extend({view:null,detail:null}),Ht={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function $t(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Ht[e])&&!!t[e]}function Gt(){return $t}var qt=0,Qt=0,Kt=!1,Yt=!1,Xt=Vt.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:Gt,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)},movementX:function(e){if("movementX"in e)return e.movementX;var t=qt;return qt=e.screenX,Kt?"mousemove"===e.type?e.screenX-t:0:(Kt=!0,0)},movementY:function(e){if("movementY"in e)return e.movementY;var t=Qt;return Qt=e.screenY,Yt?"mousemove"===e.type?e.screenY-t:0:(Yt=!0,0)}}),Jt=Xt.extend({pointerId:null,width:null,height:null,pressure:null,tangentialPressure:null,tiltX:null,tiltY:null,twist:null,pointerType:null,isPrimary:null}),Zt={mouseEnter:{registrationName:"onMouseEnter",dependencies:["mouseout","mouseover"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["mouseout","mouseover"]},pointerEnter:{registrationName:"onPointerEnter",dependencies:["pointerout","pointerover"]},pointerLeave:{registrationName:"onPointerLeave",dependencies:["pointerout","pointerover"]}},en={eventTypes:Zt,extractEvents:function(e,t,n,r){var i="mouseover"===e||"pointerover"===e,o="mouseout"===e||"pointerout"===e;if(i&&(n.relatedTarget||n.fromElement)||!o&&!i)return null;if(i=r.window===r?r:(i=r.ownerDocument)?i.defaultView||i.parentWindow:window,o?(o=t,t=(t=n.relatedTarget||n.toElement)?A(t):null):o=null,o===t)return null;var a=void 0,u=void 0,l=void 0,c=void 0;"mouseout"===e||"mouseover"===e?(a=Xt,u=Zt.mouseLeave,l=Zt.mouseEnter,c="mouse"):"pointerout"!==e&&"pointerover"!==e||(a=Jt,u=Zt.pointerLeave,l=Zt.pointerEnter,c="pointer");var s=null==o?i:F(o);if(i=null==t?i:F(t),(e=a.getPooled(u,o,n,r)).type=c+"leave",e.target=s,e.relatedTarget=i,(n=a.getPooled(l,t,n,r)).type=c+"enter",n.target=i,n.relatedTarget=s,r=t,o&&r)e:{for(i=r,c=0,a=t=o;a;a=B(a))c++;for(a=0,l=i;l;l=B(l))a++;for(;0<c-a;)t=B(t),c--;for(;0<a-c;)i=B(i),a--;for(;c--;){if(t===i||t===i.alternate)break e;t=B(t),i=B(i)}t=null}else t=null;for(i=t,t=[];o&&o!==i&&(null===(c=o.alternate)||c!==i);)t.push(o),o=B(o);for(o=[];r&&r!==i&&(null===(c=r.alternate)||c!==i);)o.push(r),r=B(r);for(r=0;r<t.length;r++)V(t[r],"bubbled",e);for(r=o.length;0<r--;)V(o[r],"captured",n);return[e,n]}};function tn(e,t){return e===t&&(0!==e||1/e===1/t)||e!==e&&t!==t}var nn=Object.prototype.hasOwnProperty;function rn(e,t){if(tn(e,t))return!0;if("object"!==typeof e||null===e||"object"!==typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!nn.call(t,n[r])||!tn(e[n[r]],t[n[r]]))return!1;return!0}function on(e,t){return{responder:e,props:t}}function an(e){var t=e;if(e.alternate)for(;t.return;)t=t.return;else{if(0!==(2&t.effectTag))return 1;for(;t.return;)if(0!==(2&(t=t.return).effectTag))return 1}return 3===t.tag?2:3}function un(e){if(2!==an(e))throw a(Error(188))}function ln(e){if(!(e=function(e){var t=e.alternate;if(!t){if(3===(t=an(e)))throw a(Error(188));return 1===t?null:e}for(var n=e,r=t;;){var i=n.return;if(null===i)break;var o=i.alternate;if(null===o){if(null!==(r=i.return)){n=r;continue}break}if(i.child===o.child){for(o=i.child;o;){if(o===n)return un(i),e;if(o===r)return un(i),t;o=o.sibling}throw a(Error(188))}if(n.return!==r.return)n=i,r=o;else{for(var u=!1,l=i.child;l;){if(l===n){u=!0,n=i,r=o;break}if(l===r){u=!0,r=i,n=o;break}l=l.sibling}if(!u){for(l=o.child;l;){if(l===n){u=!0,n=o,r=i;break}if(l===r){u=!0,r=o,n=i;break}l=l.sibling}if(!u)throw a(Error(189))}}if(n.alternate!==r)throw a(Error(190))}if(3!==n.tag)throw a(Error(188));return n.stateNode.current===n?e:t}(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}new Map,new Map,new Set,new Map;var cn=ce.extend({animationName:null,elapsedTime:null,pseudoElement:null}),sn=ce.extend({clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),fn=Vt.extend({relatedTarget:null});function dn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}for(var pn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},hn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},mn=Vt.extend({key:function(e){if(e.key){var t=pn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=dn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?hn[e.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:Gt,charCode:function(e){return"keypress"===e.type?dn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?dn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),vn=Xt.extend({dataTransfer:null}),gn=Vt.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:Gt}),yn=ce.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),bn=Xt.extend({deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null}),wn=[["blur","blur",0],["cancel","cancel",0],["click","click",0],["close","close",0],["contextmenu","contextMenu",0],["copy","copy",0],["cut","cut",0],["auxclick","auxClick",0],["dblclick","doubleClick",0],["dragend","dragEnd",0],["dragstart","dragStart",0],["drop","drop",0],["focus","focus",0],["input","input",0],["invalid","invalid",0],["keydown","keyDown",0],["keypress","keyPress",0],["keyup","keyUp",0],["mousedown","mouseDown",0],["mouseup","mouseUp",0],["paste","paste",0],["pause","pause",0],["play","play",0],["pointercancel","pointerCancel",0],["pointerdown","pointerDown",0],["pointerup","pointerUp",0],["ratechange","rateChange",0],["reset","reset",0],["seeked","seeked",0],["submit","submit",0],["touchcancel","touchCancel",0],["touchend","touchEnd",0],["touchstart","touchStart",0],["volumechange","volumeChange",0],["drag","drag",1],["dragenter","dragEnter",1],["dragexit","dragExit",1],["dragleave","dragLeave",1],["dragover","dragOver",1],["mousemove","mouseMove",1],["mouseout","mouseOut",1],["mouseover","mouseOver",1],["pointermove","pointerMove",1],["pointerout","pointerOut",1],["pointerover","pointerOver",1],["scroll","scroll",1],["toggle","toggle",1],["touchmove","touchMove",1],["wheel","wheel",1],["abort","abort",2],[J,"animationEnd",2],[Z,"animationIteration",2],[ee,"animationStart",2],["canplay","canPlay",2],["canplaythrough","canPlayThrough",2],["durationchange","durationChange",2],["emptied","emptied",2],["encrypted","encrypted",2],["ended","ended",2],["error","error",2],["gotpointercapture","gotPointerCapture",2],["load","load",2],["loadeddata","loadedData",2],["loadedmetadata","loadedMetadata",2],["loadstart","loadStart",2],["lostpointercapture","lostPointerCapture",2],["playing","playing",2],["progress","progress",2],["seeking","seeking",2],["stalled","stalled",2],["suspend","suspend",2],["timeupdate","timeUpdate",2],[te,"transitionEnd",2],["waiting","waiting",2]],xn={},_n={},En=0;En<wn.length;En++){var kn=wn[En],Sn=kn[0],Cn=kn[1],Tn=kn[2],Pn="on"+(Cn[0].toUpperCase()+Cn.slice(1)),On={phasedRegistrationNames:{bubbled:Pn,captured:Pn+"Capture"},dependencies:[Sn],eventPriority:Tn};xn[Cn]=On,_n[Sn]=On}var Dn={eventTypes:xn,getEventPriority:function(e){return void 0!==(e=_n[e])?e.eventPriority:2},extractEvents:function(e,t,n,r){var i=_n[e];if(!i)return null;switch(e){case"keypress":if(0===dn(n))return null;case"keydown":case"keyup":e=mn;break;case"blur":case"focus":e=fn;break;case"click":if(2===n.button)return null;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":e=Xt;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":e=vn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":e=gn;break;case J:case Z:case ee:e=cn;break;case te:e=yn;break;case"scroll":e=Vt;break;case"wheel":e=bn;break;case"copy":case"cut":case"paste":e=sn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":e=Jt;break;default:e=ce}return $(t=e.getPooled(i,t,n,r)),t}},Nn=Dn.getEventPriority,In=[];function Rn(e){var t=e.targetInst,n=t;do{if(!n){e.ancestors.push(n);break}var r;for(r=n;r.return;)r=r.return;if(!(r=3!==r.tag?null:r.stateNode.containerInfo))break;e.ancestors.push(n),n=A(r)}while(n);for(n=0;n<e.ancestors.length;n++){t=e.ancestors[n];var i=Ue(e.nativeEvent);r=e.topLevelType;for(var o=e.nativeEvent,a=null,u=0;u<f.length;u++){var l=f[u];l&&(l=l.extractEvents(r,t,o,i))&&(a=C(a,l))}D(a)}}var jn=!0;function Mn(e,t){An(t,e,!1)}function An(e,t,n){switch(Nn(t)){case 0:var r=Ln.bind(null,t,1);break;case 1:r=Fn.bind(null,t,1);break;default:r=zn.bind(null,t,1)}n?e.addEventListener(t,r,!0):e.addEventListener(t,r,!1)}function Ln(e,t,n){Le||Me();var r=zn,i=Le;Le=!0;try{je(r,e,t,n)}finally{(Le=i)||Fe()}}function Fn(e,t,n){zn(e,t,n)}function zn(e,t,n){if(jn){if(null===(t=A(t=Ue(n)))||"number"!==typeof t.tag||2===an(t)||(t=null),In.length){var r=In.pop();r.topLevelType=e,r.nativeEvent=n,r.targetInst=t,e=r}else e={topLevelType:e,nativeEvent:n,targetInst:t,ancestors:[]};try{if(n=e,Le)Rn(n);else{Le=!0;try{Ae(Rn,n,void 0)}finally{Le=!1,Fe()}}}finally{e.topLevelType=null,e.nativeEvent=null,e.targetInst=null,e.ancestors.length=0,10>In.length&&In.push(e)}}}var Bn=new("function"===typeof WeakMap?WeakMap:Map);function Un(e){var t=Bn.get(e);return void 0===t&&(t=new Set,Bn.set(e,t)),t}function Wn(e){if("undefined"===typeof(e=e||("undefined"!==typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function Vn(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function Hn(e,t){var n,r=Vn(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=Vn(r)}}function $n(){for(var e=window,t=Wn();t instanceof e.HTMLIFrameElement;){try{var n="string"===typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=Wn((e=t.contentWindow).document)}return t}function Gn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var qn=G&&"documentMode"in document&&11>=document.documentMode,Qn={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"blur contextmenu dragend focus keydown keyup mousedown mouseup selectionchange".split(" ")}},Kn=null,Yn=null,Xn=null,Jn=!1;function Zn(e,t){var n=t.window===t?t.document:9===t.nodeType?t:t.ownerDocument;return Jn||null==Kn||Kn!==Wn(n)?null:("selectionStart"in(n=Kn)&&Gn(n)?n={start:n.selectionStart,end:n.selectionEnd}:n={anchorNode:(n=(n.ownerDocument&&n.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset},Xn&&rn(Xn,n)?null:(Xn=n,(e=ce.getPooled(Qn.select,Yn,e,t)).type="select",e.target=Kn,$(e),e))}var er={eventTypes:Qn,extractEvents:function(e,t,n,r){var i,o=r.window===r?r.document:9===r.nodeType?r:r.ownerDocument;if(!(i=!o)){e:{o=Un(o),i=h.onSelect;for(var a=0;a<i.length;a++)if(!o.has(i[a])){o=!1;break e}o=!0}i=!o}if(i)return null;switch(o=t?F(t):window,e){case"focus":(Be(o)||"true"===o.contentEditable)&&(Kn=o,Yn=t,Xn=null);break;case"blur":Xn=Yn=Kn=null;break;case"mousedown":Jn=!0;break;case"contextmenu":case"mouseup":case"dragend":return Jn=!1,Zn(n,r);case"selectionchange":if(qn)break;case"keydown":case"keyup":return Zn(n,r)}return null}};function tr(e,t){return e=i({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(t.children))&&(e.children=t),e}function nr(e,t,n,r){if(e=e.options,t){t={};for(var i=0;i<n.length;i++)t["$"+n[i]]=!0;for(n=0;n<e.length;n++)i=t.hasOwnProperty("$"+e[n].value),e[n].selected!==i&&(e[n].selected=i),i&&r&&(e[n].defaultSelected=!0)}else{for(n=""+xt(n),t=null,i=0;i<e.length;i++){if(e[i].value===n)return e[i].selected=!0,void(r&&(e[i].defaultSelected=!0));null!==t||e[i].disabled||(t=e[i])}null!==t&&(t.selected=!0)}}function rr(e,t){if(null!=t.dangerouslySetInnerHTML)throw a(Error(91));return i({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function ir(e,t){var n=t.value;if(null==n){if(n=t.defaultValue,null!=(t=t.children)){if(null!=n)throw a(Error(92));if(Array.isArray(t)){if(!(1>=t.length))throw a(Error(93));t=t[0]}n=t}null==n&&(n="")}e._wrapperState={initialValue:xt(n)}}function or(e,t){var n=xt(t.value),r=xt(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function ar(e){var t=e.textContent;t===e._wrapperState.initialValue&&(e.value=t)}N.injectEventPluginOrder("ResponderEventPlugin SimpleEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),_=z,E=L,k=F,N.injectEventPluginsByName({SimpleEventPlugin:Dn,EnterLeaveEventPlugin:en,ChangeEventPlugin:Wt,SelectEventPlugin:er,BeforeInputEventPlugin:Ce});var ur={html:"http://www.w3.org/1999/xhtml",mathml:"http://www.w3.org/1998/Math/MathML",svg:"http://www.w3.org/2000/svg"};function lr(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function cr(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?lr(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var sr=void 0,fr=function(e){return"undefined"!==typeof MSApp&&MSApp.execUnsafeLocalFunction?function(t,n,r,i){MSApp.execUnsafeLocalFunction((function(){return e(t,n)}))}:e}((function(e,t){if(e.namespaceURI!==ur.svg||"innerHTML"in e)e.innerHTML=t;else{for((sr=sr||document.createElement("div")).innerHTML="<svg>"+t+"</svg>",t=sr.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}}));function dr(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var pr={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},hr=["Webkit","ms","Moz","O"];function mr(e,t,n){return null==t||"boolean"===typeof t||""===t?"":n||"number"!==typeof t||0===t||pr.hasOwnProperty(e)&&pr[e]?(""+t).trim():t+"px"}function vr(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),i=mr(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,i):e[n]=i}}Object.keys(pr).forEach((function(e){hr.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),pr[t]=pr[e]}))}));var gr=i({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function yr(e,t){if(t){if(gr[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw a(Error(137),e,"");if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw a(Error(60));if(!("object"===typeof t.dangerouslySetInnerHTML&&"__html"in t.dangerouslySetInnerHTML))throw a(Error(61))}if(null!=t.style&&"object"!==typeof t.style)throw a(Error(62),"")}}function br(e,t){if(-1===e.indexOf("-"))return"string"===typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function wr(e,t){var n=Un(e=9===e.nodeType||11===e.nodeType?e:e.ownerDocument);t=h[t];for(var r=0;r<t.length;r++){var i=t[r];if(!n.has(i)){switch(i){case"scroll":An(e,"scroll",!0);break;case"focus":case"blur":An(e,"focus",!0),An(e,"blur",!0),n.add("blur"),n.add("focus");break;case"cancel":case"close":We(i)&&An(e,i,!0);break;case"invalid":case"submit":case"reset":break;default:-1===ne.indexOf(i)&&Mn(i,e)}n.add(i)}}}function xr(){}var _r=null,Er=null;function kr(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function Sr(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"===typeof t.children||"number"===typeof t.children||"object"===typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var Cr="function"===typeof setTimeout?setTimeout:void 0,Tr="function"===typeof clearTimeout?clearTimeout:void 0;function Pr(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}new Set;var Or=[],Dr=-1;function Nr(e){0>Dr||(e.current=Or[Dr],Or[Dr]=null,Dr--)}function Ir(e,t){Or[++Dr]=e.current,e.current=t}var Rr={},jr={current:Rr},Mr={current:!1},Ar=Rr;function Lr(e,t){var n=e.type.contextTypes;if(!n)return Rr;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var i,o={};for(i in n)o[i]=t[i];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=o),o}function Fr(e){return null!==(e=e.childContextTypes)&&void 0!==e}function zr(e){Nr(Mr),Nr(jr)}function Br(e){Nr(Mr),Nr(jr)}function Ur(e,t,n){if(jr.current!==Rr)throw a(Error(168));Ir(jr,t),Ir(Mr,n)}function Wr(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!==typeof r.getChildContext)return n;for(var o in r=r.getChildContext())if(!(o in e))throw a(Error(108),st(t)||"Unknown",o);return i({},n,r)}function Vr(e){var t=e.stateNode;return t=t&&t.__reactInternalMemoizedMergedChildContext||Rr,Ar=jr.current,Ir(jr,t),Ir(Mr,Mr.current),!0}function Hr(e,t,n){var r=e.stateNode;if(!r)throw a(Error(169));n?(t=Wr(e,t,Ar),r.__reactInternalMemoizedMergedChildContext=t,Nr(Mr),Nr(jr),Ir(jr,t)):Nr(Mr),Ir(Mr,n)}var $r=o.unstable_runWithPriority,Gr=o.unstable_scheduleCallback,qr=o.unstable_cancelCallback,Qr=o.unstable_shouldYield,Kr=o.unstable_requestPaint,Yr=o.unstable_now,Xr=o.unstable_getCurrentPriorityLevel,Jr=o.unstable_ImmediatePriority,Zr=o.unstable_UserBlockingPriority,ei=o.unstable_NormalPriority,ti=o.unstable_LowPriority,ni=o.unstable_IdlePriority,ri={},ii=void 0!==Kr?Kr:function(){},oi=null,ai=null,ui=!1,li=Yr(),ci=1e4>li?Yr:function(){return Yr()-li};function si(){switch(Xr()){case Jr:return 99;case Zr:return 98;case ei:return 97;case ti:return 96;case ni:return 95;default:throw a(Error(332))}}function fi(e){switch(e){case 99:return Jr;case 98:return Zr;case 97:return ei;case 96:return ti;case 95:return ni;default:throw a(Error(332))}}function di(e,t){return e=fi(e),$r(e,t)}function pi(e,t,n){return e=fi(e),Gr(e,t,n)}function hi(e){return null===oi?(oi=[e],ai=Gr(Jr,vi)):oi.push(e),ri}function mi(){null!==ai&&qr(ai),vi()}function vi(){if(!ui&&null!==oi){ui=!0;var e=0;try{var t=oi;di(99,(function(){for(;e<t.length;e++){var n=t[e];do{n=n(!0)}while(null!==n)}})),oi=null}catch(t){throw null!==oi&&(oi=oi.slice(e+1)),Gr(Jr,mi),t}finally{ui=!1}}}function gi(e,t){return 1073741823===t?99:1===t?95:0>=(e=10*(1073741821-t)-10*(1073741821-e))?99:250>=e?98:5250>=e?97:95}function yi(e,t){if(e&&e.defaultProps)for(var n in t=i({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}var bi={current:null},wi=null,xi=null,_i=null;function Ei(){_i=xi=wi=null}function ki(e,t){var n=e.type._context;Ir(bi,n._currentValue),n._currentValue=t}function Si(e){var t=bi.current;Nr(bi),e.type._context._currentValue=t}function Ci(e,t){for(;null!==e;){var n=e.alternate;if(e.childExpirationTime<t)e.childExpirationTime=t,null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t);else{if(!(null!==n&&n.childExpirationTime<t))break;n.childExpirationTime=t}e=e.return}}function Ti(e,t){wi=e,_i=xi=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(e.expirationTime>=t&&(fa=!0),e.firstContext=null)}function Pi(e,t){if(_i!==e&&!1!==t&&0!==t)if("number"===typeof t&&1073741823!==t||(_i=e,t=1073741823),t={context:e,observedBits:t,next:null},null===xi){if(null===wi)throw a(Error(308));xi=t,wi.dependencies={expirationTime:0,firstContext:t,responders:null}}else xi=xi.next=t;return e._currentValue}var Oi=!1;function Di(e){return{baseState:e,firstUpdate:null,lastUpdate:null,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function Ni(e){return{baseState:e.baseState,firstUpdate:e.firstUpdate,lastUpdate:e.lastUpdate,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function Ii(e,t){return{expirationTime:e,suspenseConfig:t,tag:0,payload:null,callback:null,next:null,nextEffect:null}}function Ri(e,t){null===e.lastUpdate?e.firstUpdate=e.lastUpdate=t:(e.lastUpdate.next=t,e.lastUpdate=t)}function ji(e,t){var n=e.alternate;if(null===n){var r=e.updateQueue,i=null;null===r&&(r=e.updateQueue=Di(e.memoizedState))}else r=e.updateQueue,i=n.updateQueue,null===r?null===i?(r=e.updateQueue=Di(e.memoizedState),i=n.updateQueue=Di(n.memoizedState)):r=e.updateQueue=Ni(i):null===i&&(i=n.updateQueue=Ni(r));null===i||r===i?Ri(r,t):null===r.lastUpdate||null===i.lastUpdate?(Ri(r,t),Ri(i,t)):(Ri(r,t),i.lastUpdate=t)}function Mi(e,t){var n=e.updateQueue;null===(n=null===n?e.updateQueue=Di(e.memoizedState):Ai(e,n)).lastCapturedUpdate?n.firstCapturedUpdate=n.lastCapturedUpdate=t:(n.lastCapturedUpdate.next=t,n.lastCapturedUpdate=t)}function Ai(e,t){var n=e.alternate;return null!==n&&t===n.updateQueue&&(t=e.updateQueue=Ni(t)),t}function Li(e,t,n,r,o,a){switch(n.tag){case 1:return"function"===typeof(e=n.payload)?e.call(a,r,o):e;case 3:e.effectTag=-2049&e.effectTag|64;case 0:if(null===(o="function"===typeof(e=n.payload)?e.call(a,r,o):e)||void 0===o)break;return i({},r,o);case 2:Oi=!0}return r}function Fi(e,t,n,r,i){Oi=!1;for(var o=(t=Ai(e,t)).baseState,a=null,u=0,l=t.firstUpdate,c=o;null!==l;){var s=l.expirationTime;s<i?(null===a&&(a=l,o=c),u<s&&(u=s)):(Wu(s,l.suspenseConfig),c=Li(e,0,l,c,n,r),null!==l.callback&&(e.effectTag|=32,l.nextEffect=null,null===t.lastEffect?t.firstEffect=t.lastEffect=l:(t.lastEffect.nextEffect=l,t.lastEffect=l))),l=l.next}for(s=null,l=t.firstCapturedUpdate;null!==l;){var f=l.expirationTime;f<i?(null===s&&(s=l,null===a&&(o=c)),u<f&&(u=f)):(c=Li(e,0,l,c,n,r),null!==l.callback&&(e.effectTag|=32,l.nextEffect=null,null===t.lastCapturedEffect?t.firstCapturedEffect=t.lastCapturedEffect=l:(t.lastCapturedEffect.nextEffect=l,t.lastCapturedEffect=l))),l=l.next}null===a&&(t.lastUpdate=null),null===s?t.lastCapturedUpdate=null:e.effectTag|=32,null===a&&null===s&&(o=c),t.baseState=o,t.firstUpdate=a,t.firstCapturedUpdate=s,e.expirationTime=u,e.memoizedState=c}function zi(e,t,n){null!==t.firstCapturedUpdate&&(null!==t.lastUpdate&&(t.lastUpdate.next=t.firstCapturedUpdate,t.lastUpdate=t.lastCapturedUpdate),t.firstCapturedUpdate=t.lastCapturedUpdate=null),Bi(t.firstEffect,n),t.firstEffect=t.lastEffect=null,Bi(t.firstCapturedEffect,n),t.firstCapturedEffect=t.lastCapturedEffect=null}function Bi(e,t){for(;null!==e;){var n=e.callback;if(null!==n){e.callback=null;var r=t;if("function"!==typeof n)throw a(Error(191),n);n.call(r)}e=e.nextEffect}}var Ui=Ge.ReactCurrentBatchConfig,Wi=(new r.Component).refs;function Vi(e,t,n,r){n=null===(n=n(r,t=e.memoizedState))||void 0===n?t:i({},t,n),e.memoizedState=n,null!==(r=e.updateQueue)&&0===e.expirationTime&&(r.baseState=n)}var Hi={isMounted:function(e){return!!(e=e._reactInternalFiber)&&2===an(e)},enqueueSetState:function(e,t,n){e=e._reactInternalFiber;var r=Ou(),i=Ui.suspense;(i=Ii(r=Du(r,e,i),i)).payload=t,void 0!==n&&null!==n&&(i.callback=n),ji(e,i),Iu(e,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternalFiber;var r=Ou(),i=Ui.suspense;(i=Ii(r=Du(r,e,i),i)).tag=1,i.payload=t,void 0!==n&&null!==n&&(i.callback=n),ji(e,i),Iu(e,r)},enqueueForceUpdate:function(e,t){e=e._reactInternalFiber;var n=Ou(),r=Ui.suspense;(r=Ii(n=Du(n,e,r),r)).tag=2,void 0!==t&&null!==t&&(r.callback=t),ji(e,r),Iu(e,n)}};function $i(e,t,n,r,i,o,a){return"function"===typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,o,a):!t.prototype||!t.prototype.isPureReactComponent||(!rn(n,r)||!rn(i,o))}function Gi(e,t,n){var r=!1,i=Rr,o=t.contextType;return"object"===typeof o&&null!==o?o=Pi(o):(i=Fr(t)?Ar:jr.current,o=(r=null!==(r=t.contextTypes)&&void 0!==r)?Lr(e,i):Rr),t=new t(n,o),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=Hi,e.stateNode=t,t._reactInternalFiber=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=i,e.__reactInternalMemoizedMaskedChildContext=o),t}function qi(e,t,n,r){e=t.state,"function"===typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"===typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&Hi.enqueueReplaceState(t,t.state,null)}function Qi(e,t,n,r){var i=e.stateNode;i.props=n,i.state=e.memoizedState,i.refs=Wi;var o=t.contextType;"object"===typeof o&&null!==o?i.context=Pi(o):(o=Fr(t)?Ar:jr.current,i.context=Lr(e,o)),null!==(o=e.updateQueue)&&(Fi(e,o,n,i,r),i.state=e.memoizedState),"function"===typeof(o=t.getDerivedStateFromProps)&&(Vi(e,t,o,n),i.state=e.memoizedState),"function"===typeof t.getDerivedStateFromProps||"function"===typeof i.getSnapshotBeforeUpdate||"function"!==typeof i.UNSAFE_componentWillMount&&"function"!==typeof i.componentWillMount||(t=i.state,"function"===typeof i.componentWillMount&&i.componentWillMount(),"function"===typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount(),t!==i.state&&Hi.enqueueReplaceState(i,i.state,null),null!==(o=e.updateQueue)&&(Fi(e,o,n,i,r),i.state=e.memoizedState)),"function"===typeof i.componentDidMount&&(e.effectTag|=4)}var Ki=Array.isArray;function Yi(e,t,n){if(null!==(e=n.ref)&&"function"!==typeof e&&"object"!==typeof e){if(n._owner){n=n._owner;var r=void 0;if(n){if(1!==n.tag)throw a(Error(309));r=n.stateNode}if(!r)throw a(Error(147),e);var i=""+e;return null!==t&&null!==t.ref&&"function"===typeof t.ref&&t.ref._stringRef===i?t.ref:((t=function(e){var t=r.refs;t===Wi&&(t=r.refs={}),null===e?delete t[i]:t[i]=e})._stringRef=i,t)}if("string"!==typeof e)throw a(Error(284));if(!n._owner)throw a(Error(290),e)}return e}function Xi(e,t){if("textarea"!==e.type)throw a(Error(31),"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t,"")}function Ji(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.effectTag=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function i(e,t,n){return(e=ol(e,t)).index=0,e.sibling=null,e}function o(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.effectTag=2,n):r:(t.effectTag=2,n):n}function u(t){return e&&null===t.alternate&&(t.effectTag=2),t}function l(e,t,n,r){return null===t||6!==t.tag?((t=ll(n,e.mode,r)).return=e,t):((t=i(t,n)).return=e,t)}function c(e,t,n,r){return null!==t&&t.elementType===n.type?((r=i(t,n.props)).ref=Yi(e,t,n),r.return=e,r):((r=al(n.type,n.key,n.props,null,e.mode,r)).ref=Yi(e,t,n),r.return=e,r)}function s(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=cl(n,e.mode,r)).return=e,t):((t=i(t,n.children||[])).return=e,t)}function f(e,t,n,r,o){return null===t||7!==t.tag?((t=ul(n,e.mode,r,o)).return=e,t):((t=i(t,n)).return=e,t)}function d(e,t,n){if("string"===typeof t||"number"===typeof t)return(t=ll(""+t,e.mode,n)).return=e,t;if("object"===typeof t&&null!==t){switch(t.$$typeof){case Ke:return(n=al(t.type,t.key,t.props,null,e.mode,n)).ref=Yi(e,null,t),n.return=e,n;case Ye:return(t=cl(t,e.mode,n)).return=e,t}if(Ki(t)||ct(t))return(t=ul(t,e.mode,n,null)).return=e,t;Xi(e,t)}return null}function p(e,t,n,r){var i=null!==t?t.key:null;if("string"===typeof n||"number"===typeof n)return null!==i?null:l(e,t,""+n,r);if("object"===typeof n&&null!==n){switch(n.$$typeof){case Ke:return n.key===i?n.type===Xe?f(e,t,n.props.children,r,i):c(e,t,n,r):null;case Ye:return n.key===i?s(e,t,n,r):null}if(Ki(n)||ct(n))return null!==i?null:f(e,t,n,r,null);Xi(e,n)}return null}function h(e,t,n,r,i){if("string"===typeof r||"number"===typeof r)return l(t,e=e.get(n)||null,""+r,i);if("object"===typeof r&&null!==r){switch(r.$$typeof){case Ke:return e=e.get(null===r.key?n:r.key)||null,r.type===Xe?f(t,e,r.props.children,i,r.key):c(t,e,r,i);case Ye:return s(t,e=e.get(null===r.key?n:r.key)||null,r,i)}if(Ki(r)||ct(r))return f(t,e=e.get(n)||null,r,i,null);Xi(t,r)}return null}function m(i,a,u,l){for(var c=null,s=null,f=a,m=a=0,v=null;null!==f&&m<u.length;m++){f.index>m?(v=f,f=null):v=f.sibling;var g=p(i,f,u[m],l);if(null===g){null===f&&(f=v);break}e&&f&&null===g.alternate&&t(i,f),a=o(g,a,m),null===s?c=g:s.sibling=g,s=g,f=v}if(m===u.length)return n(i,f),c;if(null===f){for(;m<u.length;m++)null!==(f=d(i,u[m],l))&&(a=o(f,a,m),null===s?c=f:s.sibling=f,s=f);return c}for(f=r(i,f);m<u.length;m++)null!==(v=h(f,i,m,u[m],l))&&(e&&null!==v.alternate&&f.delete(null===v.key?m:v.key),a=o(v,a,m),null===s?c=v:s.sibling=v,s=v);return e&&f.forEach((function(e){return t(i,e)})),c}function v(i,u,l,c){var s=ct(l);if("function"!==typeof s)throw a(Error(150));if(null==(l=s.call(l)))throw a(Error(151));for(var f=s=null,m=u,v=u=0,g=null,y=l.next();null!==m&&!y.done;v++,y=l.next()){m.index>v?(g=m,m=null):g=m.sibling;var b=p(i,m,y.value,c);if(null===b){null===m&&(m=g);break}e&&m&&null===b.alternate&&t(i,m),u=o(b,u,v),null===f?s=b:f.sibling=b,f=b,m=g}if(y.done)return n(i,m),s;if(null===m){for(;!y.done;v++,y=l.next())null!==(y=d(i,y.value,c))&&(u=o(y,u,v),null===f?s=y:f.sibling=y,f=y);return s}for(m=r(i,m);!y.done;v++,y=l.next())null!==(y=h(m,i,v,y.value,c))&&(e&&null!==y.alternate&&m.delete(null===y.key?v:y.key),u=o(y,u,v),null===f?s=y:f.sibling=y,f=y);return e&&m.forEach((function(e){return t(i,e)})),s}return function(e,r,o,l){var c="object"===typeof o&&null!==o&&o.type===Xe&&null===o.key;c&&(o=o.props.children);var s="object"===typeof o&&null!==o;if(s)switch(o.$$typeof){case Ke:e:{for(s=o.key,c=r;null!==c;){if(c.key===s){if(7===c.tag?o.type===Xe:c.elementType===o.type){n(e,c.sibling),(r=i(c,o.type===Xe?o.props.children:o.props)).ref=Yi(e,c,o),r.return=e,e=r;break e}n(e,c);break}t(e,c),c=c.sibling}o.type===Xe?((r=ul(o.props.children,e.mode,l,o.key)).return=e,e=r):((l=al(o.type,o.key,o.props,null,e.mode,l)).ref=Yi(e,r,o),l.return=e,e=l)}return u(e);case Ye:e:{for(c=o.key;null!==r;){if(r.key===c){if(4===r.tag&&r.stateNode.containerInfo===o.containerInfo&&r.stateNode.implementation===o.implementation){n(e,r.sibling),(r=i(r,o.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=cl(o,e.mode,l)).return=e,e=r}return u(e)}if("string"===typeof o||"number"===typeof o)return o=""+o,null!==r&&6===r.tag?(n(e,r.sibling),(r=i(r,o)).return=e,e=r):(n(e,r),(r=ll(o,e.mode,l)).return=e,e=r),u(e);if(Ki(o))return m(e,r,o,l);if(ct(o))return v(e,r,o,l);if(s&&Xi(e,o),"undefined"===typeof o&&!c)switch(e.tag){case 1:case 0:throw e=e.type,a(Error(152),e.displayName||e.name||"Component")}return n(e,r)}}var Zi=Ji(!0),eo=Ji(!1),to={},no={current:to},ro={current:to},io={current:to};function oo(e){if(e===to)throw a(Error(174));return e}function ao(e,t){Ir(io,t),Ir(ro,e),Ir(no,to);var n=t.nodeType;switch(n){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:cr(null,"");break;default:t=cr(t=(n=8===n?t.parentNode:t).namespaceURI||null,n=n.tagName)}Nr(no),Ir(no,t)}function uo(e){Nr(no),Nr(ro),Nr(io)}function lo(e){oo(io.current);var t=oo(no.current),n=cr(t,e.type);t!==n&&(Ir(ro,e),Ir(no,n))}function co(e){ro.current===e&&(Nr(no),Nr(ro))}var so=1,fo=1,po=2,ho={current:0};function mo(e){for(var t=e;null!==t;){if(13===t.tag){if(null!==t.memoizedState)return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!==(64&t.effectTag))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var vo=0,go=2,yo=4,bo=8,wo=16,xo=32,_o=64,Eo=128,ko=Ge.ReactCurrentDispatcher,So=0,Co=null,To=null,Po=null,Oo=null,Do=null,No=null,Io=0,Ro=null,jo=0,Mo=!1,Ao=null,Lo=0;function Fo(){throw a(Error(321))}function zo(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!tn(e[n],t[n]))return!1;return!0}function Bo(e,t,n,r,i,o){if(So=o,Co=t,Po=null!==e?e.memoizedState:null,ko.current=null===Po?Zo:ea,t=n(r,i),Mo){do{Mo=!1,Lo+=1,Po=null!==e?e.memoizedState:null,No=Oo,Ro=Do=To=null,ko.current=ea,t=n(r,i)}while(Mo);Ao=null,Lo=0}if(ko.current=Jo,(e=Co).memoizedState=Oo,e.expirationTime=Io,e.updateQueue=Ro,e.effectTag|=jo,e=null!==To&&null!==To.next,So=0,No=Do=Oo=Po=To=Co=null,Io=0,Ro=null,jo=0,e)throw a(Error(300));return t}function Uo(){ko.current=Jo,So=0,No=Do=Oo=Po=To=Co=null,Io=0,Ro=null,jo=0,Mo=!1,Ao=null,Lo=0}function Wo(){var e={memoizedState:null,baseState:null,queue:null,baseUpdate:null,next:null};return null===Do?Oo=Do=e:Do=Do.next=e,Do}function Vo(){if(null!==No)No=(Do=No).next,Po=null!==(To=Po)?To.next:null;else{if(null===Po)throw a(Error(310));var e={memoizedState:(To=Po).memoizedState,baseState:To.baseState,queue:To.queue,baseUpdate:To.baseUpdate,next:null};Do=null===Do?Oo=e:Do.next=e,Po=To.next}return Do}function Ho(e,t){return"function"===typeof t?t(e):t}function $o(e){var t=Vo(),n=t.queue;if(null===n)throw a(Error(311));if(n.lastRenderedReducer=e,0<Lo){var r=n.dispatch;if(null!==Ao){var i=Ao.get(n);if(void 0!==i){Ao.delete(n);var o=t.memoizedState;do{o=e(o,i.action),i=i.next}while(null!==i);return tn(o,t.memoizedState)||(fa=!0),t.memoizedState=o,t.baseUpdate===n.last&&(t.baseState=o),n.lastRenderedState=o,[o,r]}}return[t.memoizedState,r]}r=n.last;var u=t.baseUpdate;if(o=t.baseState,null!==u?(null!==r&&(r.next=null),r=u.next):r=null!==r?r.next:null,null!==r){var l=i=null,c=r,s=!1;do{var f=c.expirationTime;f<So?(s||(s=!0,l=u,i=o),f>Io&&(Io=f)):(Wu(f,c.suspenseConfig),o=c.eagerReducer===e?c.eagerState:e(o,c.action)),u=c,c=c.next}while(null!==c&&c!==r);s||(l=u,i=o),tn(o,t.memoizedState)||(fa=!0),t.memoizedState=o,t.baseUpdate=l,t.baseState=i,n.lastRenderedState=o}return[t.memoizedState,n.dispatch]}function Go(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===Ro?(Ro={lastEffect:null}).lastEffect=e.next=e:null===(t=Ro.lastEffect)?Ro.lastEffect=e.next=e:(n=t.next,t.next=e,e.next=n,Ro.lastEffect=e),e}function qo(e,t,n,r){var i=Wo();jo|=e,i.memoizedState=Go(t,n,void 0,void 0===r?null:r)}function Qo(e,t,n,r){var i=Vo();r=void 0===r?null:r;var o=void 0;if(null!==To){var a=To.memoizedState;if(o=a.destroy,null!==r&&zo(r,a.deps))return void Go(vo,n,o,r)}jo|=e,i.memoizedState=Go(t,n,o,r)}function Ko(e,t){return"function"===typeof t?(e=e(),t(e),function(){t(null)}):null!==t&&void 0!==t?(e=e(),t.current=e,function(){t.current=null}):void 0}function Yo(){}function Xo(e,t,n){if(!(25>Lo))throw a(Error(301));var r=e.alternate;if(e===Co||null!==r&&r===Co)if(Mo=!0,e={expirationTime:So,suspenseConfig:null,action:n,eagerReducer:null,eagerState:null,next:null},null===Ao&&(Ao=new Map),void 0===(n=Ao.get(t)))Ao.set(t,e);else{for(t=n;null!==t.next;)t=t.next;t.next=e}else{var i=Ou(),o=Ui.suspense;o={expirationTime:i=Du(i,e,o),suspenseConfig:o,action:n,eagerReducer:null,eagerState:null,next:null};var u=t.last;if(null===u)o.next=o;else{var l=u.next;null!==l&&(o.next=l),u.next=o}if(t.last=o,0===e.expirationTime&&(null===r||0===r.expirationTime)&&null!==(r=t.lastRenderedReducer))try{var c=t.lastRenderedState,s=r(c,n);if(o.eagerReducer=r,o.eagerState=s,tn(s,c))return}catch(e){}Iu(e,i)}}var Jo={readContext:Pi,useCallback:Fo,useContext:Fo,useEffect:Fo,useImperativeHandle:Fo,useLayoutEffect:Fo,useMemo:Fo,useReducer:Fo,useRef:Fo,useState:Fo,useDebugValue:Fo,useResponder:Fo},Zo={readContext:Pi,useCallback:function(e,t){return Wo().memoizedState=[e,void 0===t?null:t],e},useContext:Pi,useEffect:function(e,t){return qo(516,Eo|_o,e,t)},useImperativeHandle:function(e,t,n){return n=null!==n&&void 0!==n?n.concat([e]):null,qo(4,yo|xo,Ko.bind(null,t,e),n)},useLayoutEffect:function(e,t){return qo(4,yo|xo,e,t)},useMemo:function(e,t){var n=Wo();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=Wo();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={last:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=Xo.bind(null,Co,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},Wo().memoizedState=e},useState:function(e){var t=Wo();return"function"===typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={last:null,dispatch:null,lastRenderedReducer:Ho,lastRenderedState:e}).dispatch=Xo.bind(null,Co,e),[t.memoizedState,e]},useDebugValue:Yo,useResponder:on},ea={readContext:Pi,useCallback:function(e,t){var n=Vo();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&zo(t,r[1])?r[0]:(n.memoizedState=[e,t],e)},useContext:Pi,useEffect:function(e,t){return Qo(516,Eo|_o,e,t)},useImperativeHandle:function(e,t,n){return n=null!==n&&void 0!==n?n.concat([e]):null,Qo(4,yo|xo,Ko.bind(null,t,e),n)},useLayoutEffect:function(e,t){return Qo(4,yo|xo,e,t)},useMemo:function(e,t){var n=Vo();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&zo(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)},useReducer:$o,useRef:function(){return Vo().memoizedState},useState:function(e){return $o(Ho)},useDebugValue:Yo,useResponder:on},ta=null,na=null,ra=!1;function ia(e,t){var n=rl(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.effectTag=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function oa(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);case 13:default:return!1}}function aa(e){if(ra){var t=na;if(t){var n=t;if(!oa(e,t)){if(!(t=Pr(n.nextSibling))||!oa(e,t))return e.effectTag|=2,ra=!1,void(ta=e);ia(ta,n)}ta=e,na=Pr(t.firstChild)}else e.effectTag|=2,ra=!1,ta=e}}function ua(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&18!==e.tag;)e=e.return;ta=e}function la(e){if(e!==ta)return!1;if(!ra)return ua(e),ra=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!Sr(t,e.memoizedProps))for(t=na;t;)ia(e,t),t=Pr(t.nextSibling);return ua(e),na=ta?Pr(e.stateNode.nextSibling):null,!0}function ca(){na=ta=null,ra=!1}var sa=Ge.ReactCurrentOwner,fa=!1;function da(e,t,n,r){t.child=null===e?eo(t,null,n,r):Zi(t,e.child,n,r)}function pa(e,t,n,r,i){n=n.render;var o=t.ref;return Ti(t,i),r=Bo(e,t,n,r,o,i),null===e||fa?(t.effectTag|=1,da(e,t,r,i),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=i&&(e.expirationTime=0),Sa(e,t,i))}function ha(e,t,n,r,i,o){if(null===e){var a=n.type;return"function"!==typeof a||il(a)||void 0!==a.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=al(n.type,null,r,null,t.mode,o)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=a,ma(e,t,a,r,i,o))}return a=e.child,i<o&&(i=a.memoizedProps,(n=null!==(n=n.compare)?n:rn)(i,r)&&e.ref===t.ref)?Sa(e,t,o):(t.effectTag|=1,(e=ol(a,r)).ref=t.ref,e.return=t,t.child=e)}function ma(e,t,n,r,i,o){return null!==e&&rn(e.memoizedProps,r)&&e.ref===t.ref&&(fa=!1,i<o)?Sa(e,t,o):ga(e,t,n,r,o)}function va(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.effectTag|=128)}function ga(e,t,n,r,i){var o=Fr(n)?Ar:jr.current;return o=Lr(t,o),Ti(t,i),n=Bo(e,t,n,r,o,i),null===e||fa?(t.effectTag|=1,da(e,t,n,i),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=i&&(e.expirationTime=0),Sa(e,t,i))}function ya(e,t,n,r,i){if(Fr(n)){var o=!0;Vr(t)}else o=!1;if(Ti(t,i),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),Gi(t,n,r),Qi(t,n,r,i),r=!0;else if(null===e){var a=t.stateNode,u=t.memoizedProps;a.props=u;var l=a.context,c=n.contextType;"object"===typeof c&&null!==c?c=Pi(c):c=Lr(t,c=Fr(n)?Ar:jr.current);var s=n.getDerivedStateFromProps,f="function"===typeof s||"function"===typeof a.getSnapshotBeforeUpdate;f||"function"!==typeof a.UNSAFE_componentWillReceiveProps&&"function"!==typeof a.componentWillReceiveProps||(u!==r||l!==c)&&qi(t,a,r,c),Oi=!1;var d=t.memoizedState;l=a.state=d;var p=t.updateQueue;null!==p&&(Fi(t,p,r,a,i),l=t.memoizedState),u!==r||d!==l||Mr.current||Oi?("function"===typeof s&&(Vi(t,n,s,r),l=t.memoizedState),(u=Oi||$i(t,n,u,r,d,l,c))?(f||"function"!==typeof a.UNSAFE_componentWillMount&&"function"!==typeof a.componentWillMount||("function"===typeof a.componentWillMount&&a.componentWillMount(),"function"===typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"===typeof a.componentDidMount&&(t.effectTag|=4)):("function"===typeof a.componentDidMount&&(t.effectTag|=4),t.memoizedProps=r,t.memoizedState=l),a.props=r,a.state=l,a.context=c,r=u):("function"===typeof a.componentDidMount&&(t.effectTag|=4),r=!1)}else a=t.stateNode,u=t.memoizedProps,a.props=t.type===t.elementType?u:yi(t.type,u),l=a.context,"object"===typeof(c=n.contextType)&&null!==c?c=Pi(c):c=Lr(t,c=Fr(n)?Ar:jr.current),(f="function"===typeof(s=n.getDerivedStateFromProps)||"function"===typeof a.getSnapshotBeforeUpdate)||"function"!==typeof a.UNSAFE_componentWillReceiveProps&&"function"!==typeof a.componentWillReceiveProps||(u!==r||l!==c)&&qi(t,a,r,c),Oi=!1,l=t.memoizedState,d=a.state=l,null!==(p=t.updateQueue)&&(Fi(t,p,r,a,i),d=t.memoizedState),u!==r||l!==d||Mr.current||Oi?("function"===typeof s&&(Vi(t,n,s,r),d=t.memoizedState),(s=Oi||$i(t,n,u,r,l,d,c))?(f||"function"!==typeof a.UNSAFE_componentWillUpdate&&"function"!==typeof a.componentWillUpdate||("function"===typeof a.componentWillUpdate&&a.componentWillUpdate(r,d,c),"function"===typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(r,d,c)),"function"===typeof a.componentDidUpdate&&(t.effectTag|=4),"function"===typeof a.getSnapshotBeforeUpdate&&(t.effectTag|=256)):("function"!==typeof a.componentDidUpdate||u===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=4),"function"!==typeof a.getSnapshotBeforeUpdate||u===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=256),t.memoizedProps=r,t.memoizedState=d),a.props=r,a.state=d,a.context=c,r=s):("function"!==typeof a.componentDidUpdate||u===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=4),"function"!==typeof a.getSnapshotBeforeUpdate||u===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=256),r=!1);return ba(e,t,n,r,o,i)}function ba(e,t,n,r,i,o){va(e,t);var a=0!==(64&t.effectTag);if(!r&&!a)return i&&Hr(t,n,!1),Sa(e,t,o);r=t.stateNode,sa.current=t;var u=a&&"function"!==typeof n.getDerivedStateFromError?null:r.render();return t.effectTag|=1,null!==e&&a?(t.child=Zi(t,e.child,null,o),t.child=Zi(t,null,u,o)):da(e,t,u,o),t.memoizedState=r.state,i&&Hr(t,n,!0),t.child}function wa(e){var t=e.stateNode;t.pendingContext?Ur(0,t.pendingContext,t.pendingContext!==t.context):t.context&&Ur(0,t.context,!1),ao(e,t.containerInfo)}var xa={};function _a(e,t,n){var r,i=t.mode,o=t.pendingProps,a=ho.current,u=null,l=!1;if((r=0!==(64&t.effectTag))||(r=0!==(a&po)&&(null===e||null!==e.memoizedState)),r?(u=xa,l=!0,t.effectTag&=-65):null!==e&&null===e.memoizedState||void 0===o.fallback||!0===o.unstable_avoidThisFallback||(a|=fo),Ir(ho,a&=so),null===e)if(l){if(o=o.fallback,(e=ul(null,i,0,null)).return=t,0===(2&t.mode))for(l=null!==t.memoizedState?t.child.child:t.child,e.child=l;null!==l;)l.return=e,l=l.sibling;(n=ul(o,i,n,null)).return=t,e.sibling=n,i=e}else i=n=eo(t,null,o.children,n);else{if(null!==e.memoizedState)if(i=(a=e.child).sibling,l){if(o=o.fallback,(n=ol(a,a.pendingProps)).return=t,0===(2&t.mode)&&(l=null!==t.memoizedState?t.child.child:t.child)!==a.child)for(n.child=l;null!==l;)l.return=n,l=l.sibling;(o=ol(i,o,i.expirationTime)).return=t,n.sibling=o,i=n,n.childExpirationTime=0,n=o}else i=n=Zi(t,a.child,o.children,n);else if(a=e.child,l){if(l=o.fallback,(o=ul(null,i,0,null)).return=t,o.child=a,null!==a&&(a.return=o),0===(2&t.mode))for(a=null!==t.memoizedState?t.child.child:t.child,o.child=a;null!==a;)a.return=o,a=a.sibling;(n=ul(l,i,n,null)).return=t,o.sibling=n,n.effectTag|=2,i=o,o.childExpirationTime=0}else n=i=Zi(t,a,o.children,n);t.stateNode=e.stateNode}return t.memoizedState=u,t.child=i,n}function Ea(e,t,n,r,i){var o=e.memoizedState;null===o?e.memoizedState={isBackwards:t,rendering:null,last:r,tail:n,tailExpiration:0,tailMode:i}:(o.isBackwards=t,o.rendering=null,o.last=r,o.tail=n,o.tailExpiration=0,o.tailMode=i)}function ka(e,t,n){var r=t.pendingProps,i=r.revealOrder,o=r.tail;if(da(e,t,r.children,n),0!==((r=ho.current)&po))r=r&so|po,t.effectTag|=64;else{if(null!==e&&0!==(64&e.effectTag))e:for(e=t.child;null!==e;){if(13===e.tag){if(null!==e.memoizedState){e.expirationTime<n&&(e.expirationTime=n);var a=e.alternate;null!==a&&a.expirationTime<n&&(a.expirationTime=n),Ci(e.return,n)}}else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=so}if(Ir(ho,r),0===(2&t.mode))t.memoizedState=null;else switch(i){case"forwards":for(n=t.child,i=null;null!==n;)null!==(r=n.alternate)&&null===mo(r)&&(i=n),n=n.sibling;null===(n=i)?(i=t.child,t.child=null):(i=n.sibling,n.sibling=null),Ea(t,!1,i,n,o);break;case"backwards":for(n=null,i=t.child,t.child=null;null!==i;){if(null!==(r=i.alternate)&&null===mo(r)){t.child=i;break}r=i.sibling,i.sibling=n,n=i,i=r}Ea(t,!0,n,null,o);break;case"together":Ea(t,!1,null,null,void 0);break;default:t.memoizedState=null}return t.child}function Sa(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),t.childExpirationTime<n)return null;if(null!==e&&t.child!==e.child)throw a(Error(153));if(null!==t.child){for(n=ol(e=t.child,e.pendingProps,e.expirationTime),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=ol(e,e.pendingProps,e.expirationTime)).return=t;n.sibling=null}return t.child}function Ca(e){e.effectTag|=4}var Ta=void 0,Pa=void 0,Oa=void 0,Da=void 0;function Na(e,t){switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function Ia(e){switch(e.tag){case 1:Fr(e.type)&&zr();var t=e.effectTag;return 2048&t?(e.effectTag=-2049&t|64,e):null;case 3:if(uo(),Br(),0!==(64&(t=e.effectTag)))throw a(Error(285));return e.effectTag=-2049&t|64,e;case 5:return co(e),null;case 13:return Nr(ho),2048&(t=e.effectTag)?(e.effectTag=-2049&t|64,e):null;case 18:return null;case 19:return Nr(ho),null;case 4:return uo(),null;case 10:return Si(e),null;default:return null}}function Ra(e,t){return{value:e,source:t,stack:ft(t)}}Ta=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(20===n.tag)e.appendChild(n.stateNode.instance);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Pa=function(){},Oa=function(e,t,n,r,o){var a=e.memoizedProps;if(a!==r){var u=t.stateNode;switch(oo(no.current),e=null,n){case"input":a=_t(u,a),r=_t(u,r),e=[];break;case"option":a=tr(u,a),r=tr(u,r),e=[];break;case"select":a=i({},a,{value:void 0}),r=i({},r,{value:void 0}),e=[];break;case"textarea":a=rr(u,a),r=rr(u,r),e=[];break;default:"function"!==typeof a.onClick&&"function"===typeof r.onClick&&(u.onclick=xr)}yr(n,r),u=n=void 0;var l=null;for(n in a)if(!r.hasOwnProperty(n)&&a.hasOwnProperty(n)&&null!=a[n])if("style"===n){var c=a[n];for(u in c)c.hasOwnProperty(u)&&(l||(l={}),l[u]="")}else"dangerouslySetInnerHTML"!==n&&"children"!==n&&"suppressContentEditableWarning"!==n&&"suppressHydrationWarning"!==n&&"autoFocus"!==n&&(p.hasOwnProperty(n)?e||(e=[]):(e=e||[]).push(n,null));for(n in r){var s=r[n];if(c=null!=a?a[n]:void 0,r.hasOwnProperty(n)&&s!==c&&(null!=s||null!=c))if("style"===n)if(c){for(u in c)!c.hasOwnProperty(u)||s&&s.hasOwnProperty(u)||(l||(l={}),l[u]="");for(u in s)s.hasOwnProperty(u)&&c[u]!==s[u]&&(l||(l={}),l[u]=s[u])}else l||(e||(e=[]),e.push(n,l)),l=s;else"dangerouslySetInnerHTML"===n?(s=s?s.__html:void 0,c=c?c.__html:void 0,null!=s&&c!==s&&(e=e||[]).push(n,""+s)):"children"===n?c===s||"string"!==typeof s&&"number"!==typeof s||(e=e||[]).push(n,""+s):"suppressContentEditableWarning"!==n&&"suppressHydrationWarning"!==n&&(p.hasOwnProperty(n)?(null!=s&&wr(o,n),e||c===s||(e=[])):(e=e||[]).push(n,s))}l&&(e=e||[]).push("style",l),o=e,(t.updateQueue=o)&&Ca(t)}},Da=function(e,t,n,r){n!==r&&Ca(t)};var ja="function"===typeof WeakSet?WeakSet:Set;function Ma(e,t){var n=t.source,r=t.stack;null===r&&null!==n&&(r=ft(n)),null!==n&&st(n.type),t=t.value,null!==e&&1===e.tag&&st(e.type);try{console.error(t)}catch(e){setTimeout((function(){throw e}))}}function Aa(e){var t=e.ref;if(null!==t)if("function"===typeof t)try{t(null)}catch(t){Yu(e,t)}else t.current=null}function La(e,t,n){if(null!==(n=null!==(n=n.updateQueue)?n.lastEffect:null)){var r=n=n.next;do{if((r.tag&e)!==vo){var i=r.destroy;r.destroy=void 0,void 0!==i&&i()}(r.tag&t)!==vo&&(i=r.create,r.destroy=i()),r=r.next}while(r!==n)}}function Fa(e,t){switch("function"===typeof tl&&tl(e),e.tag){case 0:case 11:case 14:case 15:var n=e.updateQueue;if(null!==n&&null!==(n=n.lastEffect)){var r=n.next;di(97<t?97:t,(function(){var t=r;do{var n=t.destroy;if(void 0!==n){var i=e;try{n()}catch(e){Yu(i,e)}}t=t.next}while(t!==r)}))}break;case 1:Aa(e),"function"===typeof(t=e.stateNode).componentWillUnmount&&function(e,t){try{t.props=e.memoizedProps,t.state=e.memoizedState,t.componentWillUnmount()}catch(t){Yu(e,t)}}(e,t);break;case 5:Aa(e);break;case 4:Wa(e,t)}}function za(e,t){for(var n=e;;)if(Fa(n,t),null!==n.child&&4!==n.tag)n.child.return=n,n=n.child;else{if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return;n=n.return}n.sibling.return=n.return,n=n.sibling}}function Ba(e){return 5===e.tag||3===e.tag||4===e.tag}function Ua(e){e:{for(var t=e.return;null!==t;){if(Ba(t)){var n=t;break e}t=t.return}throw a(Error(160))}switch(t=n.stateNode,n.tag){case 5:var r=!1;break;case 3:case 4:t=t.containerInfo,r=!0;break;default:throw a(Error(161))}16&n.effectTag&&(dr(t,""),n.effectTag&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||Ba(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.effectTag)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.effectTag)){n=n.stateNode;break e}}for(var i=e;;){var o=5===i.tag||6===i.tag;if(o||20===i.tag){var u=o?i.stateNode:i.stateNode.instance;if(n)if(r){var l=u;u=n,8===(o=t).nodeType?o.parentNode.insertBefore(l,u):o.insertBefore(l,u)}else t.insertBefore(u,n);else r?(8===(l=t).nodeType?(o=l.parentNode).insertBefore(u,l):(o=l).appendChild(u),null!==(l=l._reactRootContainer)&&void 0!==l||null!==o.onclick||(o.onclick=xr)):t.appendChild(u)}else if(4!==i.tag&&null!==i.child){i.child.return=i,i=i.child;continue}if(i===e)break;for(;null===i.sibling;){if(null===i.return||i.return===e)return;i=i.return}i.sibling.return=i.return,i=i.sibling}}function Wa(e,t){for(var n=e,r=!1,i=void 0,o=void 0;;){if(!r){r=n.return;e:for(;;){if(null===r)throw a(Error(160));switch(i=r.stateNode,r.tag){case 5:o=!1;break e;case 3:case 4:i=i.containerInfo,o=!0;break e}r=r.return}r=!0}if(5===n.tag||6===n.tag)if(za(n,t),o){var u=i,l=n.stateNode;8===u.nodeType?u.parentNode.removeChild(l):u.removeChild(l)}else i.removeChild(n.stateNode);else if(20===n.tag)l=n.stateNode.instance,za(n,t),o?8===(u=i).nodeType?u.parentNode.removeChild(l):u.removeChild(l):i.removeChild(l);else if(4===n.tag){if(null!==n.child){i=n.stateNode.containerInfo,o=!0,n.child.return=n,n=n.child;continue}}else if(Fa(n,t),null!==n.child){n.child.return=n,n=n.child;continue}if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return;4===(n=n.return).tag&&(r=!1)}n.sibling.return=n.return,n=n.sibling}}function Va(e,t){switch(t.tag){case 0:case 11:case 14:case 15:La(yo,bo,t);break;case 1:break;case 5:var n=t.stateNode;if(null!=n){var r=t.memoizedProps,i=null!==e?e.memoizedProps:r;e=t.type;var o=t.updateQueue;if(t.updateQueue=null,null!==o){for(n[M]=r,"input"===e&&"radio"===r.type&&null!=r.name&&kt(n,r),br(e,i),t=br(e,r),i=0;i<o.length;i+=2){var u=o[i],l=o[i+1];"style"===u?vr(n,l):"dangerouslySetInnerHTML"===u?fr(n,l):"children"===u?dr(n,l):wt(n,u,l,t)}switch(e){case"input":St(n,r);break;case"textarea":or(n,r);break;case"select":t=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(e=r.value)?nr(n,!!r.multiple,e,!1):t!==!!r.multiple&&(null!=r.defaultValue?nr(n,!!r.multiple,r.defaultValue,!0):nr(n,!!r.multiple,r.multiple?[]:"",!1))}}}break;case 6:if(null===t.stateNode)throw a(Error(162));t.stateNode.nodeValue=t.memoizedProps;break;case 3:case 12:break;case 13:if(n=t,null===t.memoizedState?r=!1:(r=!0,n=t.child,mu=ci()),null!==n)e:for(e=n;;){if(5===e.tag)o=e.stateNode,r?"function"===typeof(o=o.style).setProperty?o.setProperty("display","none","important"):o.display="none":(o=e.stateNode,i=void 0!==(i=e.memoizedProps.style)&&null!==i&&i.hasOwnProperty("display")?i.display:null,o.style.display=mr("display",i));else if(6===e.tag)e.stateNode.nodeValue=r?"":e.memoizedProps;else{if(13===e.tag&&null!==e.memoizedState){(o=e.child.sibling).return=e,e=o;continue}if(null!==e.child){e.child.return=e,e=e.child;continue}}if(e===n)break e;for(;null===e.sibling;){if(null===e.return||e.return===n)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}Ha(t);break;case 19:Ha(t);break;case 17:case 20:break;default:throw a(Error(163))}}function Ha(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new ja),t.forEach((function(t){var r=Ju.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}var $a="function"===typeof WeakMap?WeakMap:Map;function Ga(e,t,n){(n=Ii(n,null)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){yu||(yu=!0,bu=r),Ma(e,t)},n}function qa(e,t,n){(n=Ii(n,null)).tag=3;var r=e.type.getDerivedStateFromError;if("function"===typeof r){var i=t.value;n.payload=function(){return Ma(e,t),r(i)}}var o=e.stateNode;return null!==o&&"function"===typeof o.componentDidCatch&&(n.callback=function(){"function"!==typeof r&&(null===wu?wu=new Set([this]):wu.add(this),Ma(e,t));var n=t.stack;this.componentDidCatch(t.value,{componentStack:null!==n?n:""})}),n}var Qa=Math.ceil,Ka=Ge.ReactCurrentDispatcher,Ya=Ge.ReactCurrentOwner,Xa=0,Ja=8,Za=16,eu=32,tu=0,nu=1,ru=2,iu=3,ou=4,au=Xa,uu=null,lu=null,cu=0,su=tu,fu=1073741823,du=1073741823,pu=null,hu=!1,mu=0,vu=500,gu=null,yu=!1,bu=null,wu=null,xu=!1,_u=null,Eu=90,ku=0,Su=null,Cu=0,Tu=null,Pu=0;function Ou(){return(au&(Za|eu))!==Xa?1073741821-(ci()/10|0):0!==Pu?Pu:Pu=1073741821-(ci()/10|0)}function Du(e,t,n){if(0===(2&(t=t.mode)))return 1073741823;var r=si();if(0===(4&t))return 99===r?1073741823:1073741822;if((au&Za)!==Xa)return cu;if(null!==n)e=1073741821-25*(1+((1073741821-e+(0|n.timeoutMs||5e3)/10)/25|0));else switch(r){case 99:e=1073741823;break;case 98:e=1073741821-10*(1+((1073741821-e+15)/10|0));break;case 97:case 96:e=1073741821-25*(1+((1073741821-e+500)/25|0));break;case 95:e=1;break;default:throw a(Error(326))}return null!==uu&&e===cu&&--e,e}var Nu=0;function Iu(e,t){if(50<Cu)throw Cu=0,Tu=null,a(Error(185));if(null!==(e=Ru(e,t))){e.pingTime=0;var n=si();if(1073741823===t)if((au&Ja)!==Xa&&(au&(Za|eu))===Xa)for(var r=Uu(e,1073741823,!0);null!==r;)r=r(!0);else ju(e,99,1073741823),au===Xa&&mi();else ju(e,n,t);(4&au)===Xa||98!==n&&99!==n||(null===Su?Su=new Map([[e,t]]):(void 0===(n=Su.get(e))||n>t)&&Su.set(e,t))}}function Ru(e,t){e.expirationTime<t&&(e.expirationTime=t);var n=e.alternate;null!==n&&n.expirationTime<t&&(n.expirationTime=t);var r=e.return,i=null;if(null===r&&3===e.tag)i=e.stateNode;else for(;null!==r;){if(n=r.alternate,r.childExpirationTime<t&&(r.childExpirationTime=t),null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t),null===r.return&&3===r.tag){i=r.stateNode;break}r=r.return}return null!==i&&(t>i.firstPendingTime&&(i.firstPendingTime=t),0===(e=i.lastPendingTime)||t<e)&&(i.lastPendingTime=t),i}function ju(e,t,n){if(e.callbackExpirationTime<n){var r=e.callbackNode;null!==r&&r!==ri&&qr(r),e.callbackExpirationTime=n,1073741823===n?e.callbackNode=hi(Mu.bind(null,e,Uu.bind(null,e,n))):(r=null,1!==n&&(r={timeout:10*(1073741821-n)-ci()}),e.callbackNode=pi(t,Mu.bind(null,e,Uu.bind(null,e,n)),r))}}function Mu(e,t,n){var r=e.callbackNode,i=null;try{return null!==(i=t(n))?Mu.bind(null,e,i):null}finally{null===i&&r===e.callbackNode&&(e.callbackNode=null,e.callbackExpirationTime=0)}}function Au(){(au&(1|Za|eu))===Xa&&(function(){if(null!==Su){var e=Su;Su=null,e.forEach((function(e,t){hi(Uu.bind(null,t,e))})),mi()}}(),qu())}function Lu(e,t){var n=au;au|=1;try{return e(t)}finally{(au=n)===Xa&&mi()}}function Fu(e,t,n,r){var i=au;au|=4;try{return di(98,e.bind(null,t,n,r))}finally{(au=i)===Xa&&mi()}}function zu(e,t){var n=au;au&=-2,au|=Ja;try{return e(t)}finally{(au=n)===Xa&&mi()}}function Bu(e,t){e.finishedWork=null,e.finishedExpirationTime=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,Tr(n)),null!==lu)for(n=lu.return;null!==n;){var r=n;switch(r.tag){case 1:var i=r.type.childContextTypes;null!==i&&void 0!==i&&zr();break;case 3:uo(),Br();break;case 5:co(r);break;case 4:uo();break;case 13:case 19:Nr(ho);break;case 10:Si(r)}n=n.return}uu=e,lu=ol(e.current,null),cu=t,su=tu,du=fu=1073741823,pu=null,hu=!1}function Uu(e,t,n){if((au&(Za|eu))!==Xa)throw a(Error(327));if(e.firstPendingTime<t)return null;if(n&&e.finishedExpirationTime===t)return $u.bind(null,e);if(qu(),e!==uu||t!==cu)Bu(e,t);else if(su===iu)if(hu)Bu(e,t);else{var r=e.lastPendingTime;if(r<t)return Uu.bind(null,e,r)}if(null!==lu){r=au,au|=Za;var i=Ka.current;if(null===i&&(i=Jo),Ka.current=Jo,n){if(1073741823!==t){var o=Ou();if(o<t)return au=r,Ei(),Ka.current=i,Uu.bind(null,e,o)}}else Pu=0;for(;;)try{if(n)for(;null!==lu;)lu=Vu(lu);else for(;null!==lu&&!Qr();)lu=Vu(lu);break}catch(n){if(Ei(),Uo(),null===(o=lu)||null===o.return)throw Bu(e,t),au=r,n;e:{var u=e,l=o.return,c=o,s=n,f=cu;if(c.effectTag|=1024,c.firstEffect=c.lastEffect=null,null!==s&&"object"===typeof s&&"function"===typeof s.then){var d=s,p=0!==(ho.current&fo);s=l;do{var h;if((h=13===s.tag)&&(null!==s.memoizedState?h=!1:h=void 0!==(h=s.memoizedProps).fallback&&(!0!==h.unstable_avoidThisFallback||!p)),h){if(null===(l=s.updateQueue)?((l=new Set).add(d),s.updateQueue=l):l.add(d),0===(2&s.mode)){s.effectTag|=64,c.effectTag&=-1957,1===c.tag&&(null===c.alternate?c.tag=17:((f=Ii(1073741823,null)).tag=2,ji(c,f))),c.expirationTime=1073741823;break e}c=u,u=f,null===(p=c.pingCache)?(p=c.pingCache=new $a,l=new Set,p.set(d,l)):void 0===(l=p.get(d))&&(l=new Set,p.set(d,l)),l.has(u)||(l.add(u),c=Xu.bind(null,c,d,u),d.then(c,c)),s.effectTag|=2048,s.expirationTime=f;break e}s=s.return}while(null!==s);s=Error((st(c.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display."+ft(c))}su!==ou&&(su=nu),s=Ra(s,c),c=l;do{switch(c.tag){case 3:c.effectTag|=2048,c.expirationTime=f,Mi(c,f=Ga(c,s,f));break e;case 1:if(d=s,u=c.type,l=c.stateNode,0===(64&c.effectTag)&&("function"===typeof u.getDerivedStateFromError||null!==l&&"function"===typeof l.componentDidCatch&&(null===wu||!wu.has(l)))){c.effectTag|=2048,c.expirationTime=f,Mi(c,f=qa(c,d,f));break e}}c=c.return}while(null!==c)}lu=Hu(o)}if(au=r,Ei(),Ka.current=i,null!==lu)return Uu.bind(null,e,t)}if(e.finishedWork=e.current.alternate,e.finishedExpirationTime=t,function(e,t){var n=e.firstBatch;return!!(null!==n&&n._defer&&n._expirationTime>=t)&&(pi(97,(function(){return n._onComplete(),null})),!0)}(e,t))return null;switch(uu=null,su){case tu:throw a(Error(328));case nu:return(r=e.lastPendingTime)<t?Uu.bind(null,e,r):n?$u.bind(null,e):(Bu(e,t),hi(Uu.bind(null,e,t)),null);case ru:return 1073741823===fu&&!n&&10<(n=mu+vu-ci())?hu?(Bu(e,t),Uu.bind(null,e,t)):(r=e.lastPendingTime)<t?Uu.bind(null,e,r):(e.timeoutHandle=Cr($u.bind(null,e),n),null):$u.bind(null,e);case iu:if(!n){if(hu)return Bu(e,t),Uu.bind(null,e,t);if((n=e.lastPendingTime)<t)return Uu.bind(null,e,n);if(1073741823!==du?n=10*(1073741821-du)-ci():1073741823===fu?n=0:(n=10*(1073741821-fu)-5e3,0>(n=(r=ci())-n)&&(n=0),(t=10*(1073741821-t)-r)<(n=(120>n?120:480>n?480:1080>n?1080:1920>n?1920:3e3>n?3e3:4320>n?4320:1960*Qa(n/1960))-n)&&(n=t)),10<n)return e.timeoutHandle=Cr($u.bind(null,e),n),null}return $u.bind(null,e);case ou:return!n&&1073741823!==fu&&null!==pu&&(r=fu,0>=(t=0|(i=pu).busyMinDurationMs)?t=0:(n=0|i.busyDelayMs,t=(r=ci()-(10*(1073741821-r)-(0|i.timeoutMs||5e3)))<=n?0:n+t-r),10<t)?(e.timeoutHandle=Cr($u.bind(null,e),t),null):$u.bind(null,e);default:throw a(Error(329))}}function Wu(e,t){e<fu&&1<e&&(fu=e),null!==t&&e<du&&1<e&&(du=e,pu=t)}function Vu(e){var t=Zu(e.alternate,e,cu);return e.memoizedProps=e.pendingProps,null===t&&(t=Hu(e)),Ya.current=null,t}function Hu(e){lu=e;do{var t=lu.alternate;if(e=lu.return,0===(1024&lu.effectTag)){e:{var n=t,r=cu,o=(t=lu).pendingProps;switch(t.tag){case 2:case 16:break;case 15:case 0:break;case 1:Fr(t.type)&&zr();break;case 3:uo(),Br(),(r=t.stateNode).pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==n&&null!==n.child||(la(t),t.effectTag&=-3),Pa(t);break;case 5:co(t),r=oo(io.current);var u=t.type;if(null!==n&&null!=t.stateNode)Oa(n,t,u,o,r),n.ref!==t.ref&&(t.effectTag|=128);else if(o){var l=oo(no.current);if(la(t)){o=void 0,u=(n=t).stateNode;var c=n.type,s=n.memoizedProps;switch(u[j]=n,u[M]=s,c){case"iframe":case"object":case"embed":Mn("load",u);break;case"video":case"audio":for(var f=0;f<ne.length;f++)Mn(ne[f],u);break;case"source":Mn("error",u);break;case"img":case"image":case"link":Mn("error",u),Mn("load",u);break;case"form":Mn("reset",u),Mn("submit",u);break;case"details":Mn("toggle",u);break;case"input":Et(u,s),Mn("invalid",u),wr(r,"onChange");break;case"select":u._wrapperState={wasMultiple:!!s.multiple},Mn("invalid",u),wr(r,"onChange");break;case"textarea":ir(u,s),Mn("invalid",u),wr(r,"onChange")}for(o in yr(c,s),f=null,s)s.hasOwnProperty(o)&&(l=s[o],"children"===o?"string"===typeof l?u.textContent!==l&&(f=["children",l]):"number"===typeof l&&u.textContent!==""+l&&(f=["children",""+l]):p.hasOwnProperty(o)&&null!=l&&wr(r,o));switch(c){case"input":He(u),Ct(u,s,!0);break;case"textarea":He(u),ar(u);break;case"select":case"option":break;default:"function"===typeof s.onClick&&(u.onclick=xr)}r=f,n.updateQueue=r,null!==r&&Ca(t)}else{s=u,n=o,c=t,f=9===r.nodeType?r:r.ownerDocument,l===ur.html&&(l=lr(s)),l===ur.html?"script"===s?((s=f.createElement("div")).innerHTML="<script><\/script>",f=s.removeChild(s.firstChild)):"string"===typeof n.is?f=f.createElement(s,{is:n.is}):(f=f.createElement(s),"select"===s&&(s=f,n.multiple?s.multiple=!0:n.size&&(s.size=n.size))):f=f.createElementNS(l,s),(s=f)[j]=c,s[M]=n,Ta(n=s,t,!1,!1),c=n;var d=r,h=br(u,o);switch(u){case"iframe":case"object":case"embed":Mn("load",c),r=o;break;case"video":case"audio":for(r=0;r<ne.length;r++)Mn(ne[r],c);r=o;break;case"source":Mn("error",c),r=o;break;case"img":case"image":case"link":Mn("error",c),Mn("load",c),r=o;break;case"form":Mn("reset",c),Mn("submit",c),r=o;break;case"details":Mn("toggle",c),r=o;break;case"input":Et(c,o),r=_t(c,o),Mn("invalid",c),wr(d,"onChange");break;case"option":r=tr(c,o);break;case"select":c._wrapperState={wasMultiple:!!o.multiple},r=i({},o,{value:void 0}),Mn("invalid",c),wr(d,"onChange");break;case"textarea":ir(c,o),r=rr(c,o),Mn("invalid",c),wr(d,"onChange");break;default:r=o}yr(u,r),s=void 0,f=u,l=c;var m=r;for(s in m)if(m.hasOwnProperty(s)){var v=m[s];"style"===s?vr(l,v):"dangerouslySetInnerHTML"===s?null!=(v=v?v.__html:void 0)&&fr(l,v):"children"===s?"string"===typeof v?("textarea"!==f||""!==v)&&dr(l,v):"number"===typeof v&&dr(l,""+v):"suppressContentEditableWarning"!==s&&"suppressHydrationWarning"!==s&&"autoFocus"!==s&&(p.hasOwnProperty(s)?null!=v&&wr(d,s):null!=v&&wt(l,s,v,h))}switch(u){case"input":He(c),Ct(c,o,!1);break;case"textarea":He(c),ar(c);break;case"option":null!=o.value&&c.setAttribute("value",""+xt(o.value));break;case"select":r=c,c=o,r.multiple=!!c.multiple,null!=(s=c.value)?nr(r,!!c.multiple,s,!1):null!=c.defaultValue&&nr(r,!!c.multiple,c.defaultValue,!0);break;default:"function"===typeof r.onClick&&(c.onclick=xr)}kr(u,o)&&Ca(t),t.stateNode=n}null!==t.ref&&(t.effectTag|=128)}else if(null===t.stateNode)throw a(Error(166));break;case 6:if(n&&null!=t.stateNode)Da(n,t,n.memoizedProps,o);else{if("string"!==typeof o&&null===t.stateNode)throw a(Error(166));n=oo(io.current),oo(no.current),la(t)?(r=t.stateNode,n=t.memoizedProps,r[j]=t,r.nodeValue!==n&&Ca(t)):(r=t,(n=(9===n.nodeType?n:n.ownerDocument).createTextNode(o))[j]=t,r.stateNode=n)}break;case 11:break;case 13:if(Nr(ho),o=t.memoizedState,0!==(64&t.effectTag)){t.expirationTime=r;break e}r=null!==o,o=!1,null===n?la(t):(o=null!==(u=n.memoizedState),r||null===u||null!==(u=n.child.sibling)&&(null!==(c=t.firstEffect)?(t.firstEffect=u,u.nextEffect=c):(t.firstEffect=t.lastEffect=u,u.nextEffect=null),u.effectTag=8)),r&&!o&&0!==(2&t.mode)&&(null===n&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!==(ho.current&fo)?su===tu&&(su=ru):su!==tu&&su!==ru||(su=iu)),(r||o)&&(t.effectTag|=4);break;case 7:case 8:case 12:break;case 4:uo(),Pa(t);break;case 10:Si(t);break;case 9:case 14:break;case 17:Fr(t.type)&&zr();break;case 18:break;case 19:if(Nr(ho),null===(o=t.memoizedState))break;if(u=0!==(64&t.effectTag),null===(c=o.rendering)){if(u)Na(o,!1);else if(su!==tu||null!==n&&0!==(64&n.effectTag))for(n=t.child;null!==n;){if(null!==(c=mo(n))){for(t.effectTag|=64,Na(o,!1),null!==(n=c.updateQueue)&&(t.updateQueue=n,t.effectTag|=4),t.firstEffect=t.lastEffect=null,n=t.child;null!==n;)u=r,(o=n).effectTag&=2,o.nextEffect=null,o.firstEffect=null,o.lastEffect=null,null===(c=o.alternate)?(o.childExpirationTime=0,o.expirationTime=u,o.child=null,o.memoizedProps=null,o.memoizedState=null,o.updateQueue=null,o.dependencies=null):(o.childExpirationTime=c.childExpirationTime,o.expirationTime=c.expirationTime,o.child=c.child,o.memoizedProps=c.memoizedProps,o.memoizedState=c.memoizedState,o.updateQueue=c.updateQueue,u=c.dependencies,o.dependencies=null===u?null:{expirationTime:u.expirationTime,firstContext:u.firstContext,responders:u.responders}),n=n.sibling;Ir(ho,ho.current&so|po),t=t.child;break e}n=n.sibling}}else{if(!u)if(null!==(n=mo(c))){if(t.effectTag|=64,u=!0,Na(o,!0),null===o.tail&&"hidden"===o.tailMode){null!==(r=n.updateQueue)&&(t.updateQueue=r,t.effectTag|=4),null!==(t=t.lastEffect=o.lastEffect)&&(t.nextEffect=null);break}}else ci()>o.tailExpiration&&1<r&&(t.effectTag|=64,u=!0,Na(o,!1),t.expirationTime=t.childExpirationTime=r-1);o.isBackwards?(c.sibling=t.child,t.child=c):(null!==(r=o.last)?r.sibling=c:t.child=c,o.last=c)}if(null!==o.tail){0===o.tailExpiration&&(o.tailExpiration=ci()+500),r=o.tail,o.rendering=r,o.tail=r.sibling,o.lastEffect=t.lastEffect,r.sibling=null,n=ho.current,Ir(ho,n=u?n&so|po:n&so),t=r;break e}break;case 20:break;default:throw a(Error(156))}t=null}if(r=lu,1===cu||1!==r.childExpirationTime){for(n=0,o=r.child;null!==o;)(u=o.expirationTime)>n&&(n=u),(c=o.childExpirationTime)>n&&(n=c),o=o.sibling;r.childExpirationTime=n}if(null!==t)return t;null!==e&&0===(1024&e.effectTag)&&(null===e.firstEffect&&(e.firstEffect=lu.firstEffect),null!==lu.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=lu.firstEffect),e.lastEffect=lu.lastEffect),1<lu.effectTag&&(null!==e.lastEffect?e.lastEffect.nextEffect=lu:e.firstEffect=lu,e.lastEffect=lu))}else{if(null!==(t=Ia(lu)))return t.effectTag&=1023,t;null!==e&&(e.firstEffect=e.lastEffect=null,e.effectTag|=1024)}if(null!==(t=lu.sibling))return t;lu=e}while(null!==lu);return su===tu&&(su=ou),null}function $u(e){var t=si();return di(99,Gu.bind(null,e,t)),null!==_u&&pi(97,(function(){return qu(),null})),null}function Gu(e,t){if(qu(),(au&(Za|eu))!==Xa)throw a(Error(327));var n=e.finishedWork,r=e.finishedExpirationTime;if(null===n)return null;if(e.finishedWork=null,e.finishedExpirationTime=0,n===e.current)throw a(Error(177));e.callbackNode=null,e.callbackExpirationTime=0;var i=n.expirationTime,o=n.childExpirationTime;if(i=o>i?o:i,e.firstPendingTime=i,i<e.lastPendingTime&&(e.lastPendingTime=i),e===uu&&(lu=uu=null,cu=0),1<n.effectTag?null!==n.lastEffect?(n.lastEffect.nextEffect=n,i=n.firstEffect):i=n:i=n.firstEffect,null!==i){o=au,au|=eu,Ya.current=null,_r=jn;var u=$n();if(Gn(u)){if("selectionStart"in u)var l={start:u.selectionStart,end:u.selectionEnd};else e:{var c=(l=(l=u.ownerDocument)&&l.defaultView||window).getSelection&&l.getSelection();if(c&&0!==c.rangeCount){l=c.anchorNode;var s=c.anchorOffset,f=c.focusNode;c=c.focusOffset;try{l.nodeType,f.nodeType}catch(e){l=null;break e}var d=0,p=-1,h=-1,m=0,v=0,g=u,y=null;t:for(;;){for(var b;g!==l||0!==s&&3!==g.nodeType||(p=d+s),g!==f||0!==c&&3!==g.nodeType||(h=d+c),3===g.nodeType&&(d+=g.nodeValue.length),null!==(b=g.firstChild);)y=g,g=b;for(;;){if(g===u)break t;if(y===l&&++m===s&&(p=d),y===f&&++v===c&&(h=d),null!==(b=g.nextSibling))break;y=(g=y).parentNode}g=b}l=-1===p||-1===h?null:{start:p,end:h}}else l=null}l=l||{start:0,end:0}}else l=null;Er={focusedElem:u,selectionRange:l},jn=!1,gu=i;do{try{for(;null!==gu;){if(0!==(256&gu.effectTag)){var w=gu.alternate;switch((u=gu).tag){case 0:case 11:case 15:La(go,vo,u);break;case 1:if(256&u.effectTag&&null!==w){var x=w.memoizedProps,_=w.memoizedState,E=u.stateNode,k=E.getSnapshotBeforeUpdate(u.elementType===u.type?x:yi(u.type,x),_);E.__reactInternalSnapshotBeforeUpdate=k}break;case 3:case 5:case 6:case 4:case 17:break;default:throw a(Error(163))}}gu=gu.nextEffect}}catch(e){if(null===gu)throw a(Error(330));Yu(gu,e),gu=gu.nextEffect}}while(null!==gu);gu=i;do{try{for(w=t;null!==gu;){var S=gu.effectTag;if(16&S&&dr(gu.stateNode,""),128&S){var C=gu.alternate;if(null!==C){var T=C.ref;null!==T&&("function"===typeof T?T(null):T.current=null)}}switch(14&S){case 2:Ua(gu),gu.effectTag&=-3;break;case 6:Ua(gu),gu.effectTag&=-3,Va(gu.alternate,gu);break;case 4:Va(gu.alternate,gu);break;case 8:Wa(x=gu,w),x.return=null,x.child=null,x.memoizedState=null,x.updateQueue=null,x.dependencies=null;var P=x.alternate;null!==P&&(P.return=null,P.child=null,P.memoizedState=null,P.updateQueue=null,P.dependencies=null)}gu=gu.nextEffect}}catch(e){if(null===gu)throw a(Error(330));Yu(gu,e),gu=gu.nextEffect}}while(null!==gu);if(T=Er,C=$n(),S=T.focusedElem,w=T.selectionRange,C!==S&&S&&S.ownerDocument&&function e(t,n){return!(!t||!n)&&(t===n||(!t||3!==t.nodeType)&&(n&&3===n.nodeType?e(t,n.parentNode):"contains"in t?t.contains(n):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(n))))}(S.ownerDocument.documentElement,S)){null!==w&&Gn(S)&&(C=w.start,void 0===(T=w.end)&&(T=C),"selectionStart"in S?(S.selectionStart=C,S.selectionEnd=Math.min(T,S.value.length)):(T=(C=S.ownerDocument||document)&&C.defaultView||window).getSelection&&(T=T.getSelection(),x=S.textContent.length,P=Math.min(w.start,x),w=void 0===w.end?P:Math.min(w.end,x),!T.extend&&P>w&&(x=w,w=P,P=x),x=Hn(S,P),_=Hn(S,w),x&&_&&(1!==T.rangeCount||T.anchorNode!==x.node||T.anchorOffset!==x.offset||T.focusNode!==_.node||T.focusOffset!==_.offset)&&((C=C.createRange()).setStart(x.node,x.offset),T.removeAllRanges(),P>w?(T.addRange(C),T.extend(_.node,_.offset)):(C.setEnd(_.node,_.offset),T.addRange(C))))),C=[];for(T=S;T=T.parentNode;)1===T.nodeType&&C.push({element:T,left:T.scrollLeft,top:T.scrollTop});for("function"===typeof S.focus&&S.focus(),S=0;S<C.length;S++)(T=C[S]).element.scrollLeft=T.left,T.element.scrollTop=T.top}Er=null,jn=!!_r,_r=null,e.current=n,gu=i;do{try{for(S=r;null!==gu;){var O=gu.effectTag;if(36&O){var D=gu.alternate;switch(T=S,(C=gu).tag){case 0:case 11:case 15:La(wo,xo,C);break;case 1:var N=C.stateNode;if(4&C.effectTag)if(null===D)N.componentDidMount();else{var I=C.elementType===C.type?D.memoizedProps:yi(C.type,D.memoizedProps);N.componentDidUpdate(I,D.memoizedState,N.__reactInternalSnapshotBeforeUpdate)}var R=C.updateQueue;null!==R&&zi(0,R,N);break;case 3:var j=C.updateQueue;if(null!==j){if(P=null,null!==C.child)switch(C.child.tag){case 5:P=C.child.stateNode;break;case 1:P=C.child.stateNode}zi(0,j,P)}break;case 5:var M=C.stateNode;null===D&&4&C.effectTag&&(T=M,kr(C.type,C.memoizedProps)&&T.focus());break;case 6:case 4:case 12:break;case 13:case 19:case 17:case 20:break;default:throw a(Error(163))}}if(128&O){var A=gu.ref;if(null!==A){var L=gu.stateNode;switch(gu.tag){case 5:var F=L;break;default:F=L}"function"===typeof A?A(F):A.current=F}}512&O&&(xu=!0),gu=gu.nextEffect}}catch(e){if(null===gu)throw a(Error(330));Yu(gu,e),gu=gu.nextEffect}}while(null!==gu);gu=null,ii(),au=o}else e.current=n;if(xu)xu=!1,_u=e,ku=r,Eu=t;else for(gu=i;null!==gu;)t=gu.nextEffect,gu.nextEffect=null,gu=t;if(0!==(t=e.firstPendingTime)?ju(e,O=gi(O=Ou(),t),t):wu=null,"function"===typeof el&&el(n.stateNode,r),1073741823===t?e===Tu?Cu++:(Cu=0,Tu=e):Cu=0,yu)throw yu=!1,e=bu,bu=null,e;return(au&Ja)!==Xa?null:(mi(),null)}function qu(){if(null===_u)return!1;var e=_u,t=ku,n=Eu;return _u=null,ku=0,Eu=90,di(97<n?97:n,Qu.bind(null,e,t))}function Qu(e){if((au&(Za|eu))!==Xa)throw a(Error(331));var t=au;for(au|=eu,e=e.current.firstEffect;null!==e;){try{var n=e;if(0!==(512&n.effectTag))switch(n.tag){case 0:case 11:case 15:La(Eo,vo,n),La(vo,_o,n)}}catch(t){if(null===e)throw a(Error(330));Yu(e,t)}n=e.nextEffect,e.nextEffect=null,e=n}return au=t,mi(),!0}function Ku(e,t,n){ji(e,t=Ga(e,t=Ra(n,t),1073741823)),null!==(e=Ru(e,1073741823))&&ju(e,99,1073741823)}function Yu(e,t){if(3===e.tag)Ku(e,e,t);else for(var n=e.return;null!==n;){if(3===n.tag){Ku(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"===typeof n.type.getDerivedStateFromError||"function"===typeof r.componentDidCatch&&(null===wu||!wu.has(r))){ji(n,e=qa(n,e=Ra(t,e),1073741823)),null!==(n=Ru(n,1073741823))&&ju(n,99,1073741823);break}}n=n.return}}function Xu(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),uu===e&&cu===n?su===iu||su===ru&&1073741823===fu&&ci()-mu<vu?Bu(e,cu):hu=!0:e.lastPendingTime<n||(0!==(t=e.pingTime)&&t<n||(e.pingTime=n,e.finishedExpirationTime===n&&(e.finishedExpirationTime=0,e.finishedWork=null),ju(e,t=gi(t=Ou(),n),n)))}function Ju(e,t){var n=e.stateNode;null!==n&&n.delete(t),n=gi(n=Ou(),t=Du(n,e,null)),null!==(e=Ru(e,t))&&ju(e,n,t)}var Zu=void 0;Zu=function(e,t,n){var r=t.expirationTime;if(null!==e){var i=t.pendingProps;if(e.memoizedProps!==i||Mr.current)fa=!0;else if(r<n){switch(fa=!1,t.tag){case 3:wa(t),ca();break;case 5:if(lo(t),4&t.mode&&1!==n&&i.hidden)return t.expirationTime=t.childExpirationTime=1,null;break;case 1:Fr(t.type)&&Vr(t);break;case 4:ao(t,t.stateNode.containerInfo);break;case 10:ki(t,t.memoizedProps.value);break;case 13:if(null!==t.memoizedState)return 0!==(r=t.child.childExpirationTime)&&r>=n?_a(e,t,n):(Ir(ho,ho.current&so),null!==(t=Sa(e,t,n))?t.sibling:null);Ir(ho,ho.current&so);break;case 19:if(r=t.childExpirationTime>=n,0!==(64&e.effectTag)){if(r)return ka(e,t,n);t.effectTag|=64}if(null!==(i=t.memoizedState)&&(i.rendering=null,i.tail=null),Ir(ho,ho.current),!r)return null}return Sa(e,t,n)}}else fa=!1;switch(t.expirationTime=0,t.tag){case 2:if(r=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps,i=Lr(t,jr.current),Ti(t,n),i=Bo(null,t,r,e,i,n),t.effectTag|=1,"object"===typeof i&&null!==i&&"function"===typeof i.render&&void 0===i.$$typeof){if(t.tag=1,Uo(),Fr(r)){var o=!0;Vr(t)}else o=!1;t.memoizedState=null!==i.state&&void 0!==i.state?i.state:null;var u=r.getDerivedStateFromProps;"function"===typeof u&&Vi(t,r,u,e),i.updater=Hi,t.stateNode=i,i._reactInternalFiber=t,Qi(t,r,e,n),t=ba(null,t,r,!0,o,n)}else t.tag=0,da(null,t,i,n),t=t.child;return t;case 16:switch(i=t.elementType,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps,i=function(e){var t=e._result;switch(e._status){case 1:return t;case 2:case 0:throw t;default:switch(e._status=0,(t=(t=e._ctor)()).then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)})),e._status){case 1:return e._result;case 2:throw e._result}throw e._result=t,t}}(i),t.type=i,o=t.tag=function(e){if("function"===typeof e)return il(e)?1:0;if(void 0!==e&&null!==e){if((e=e.$$typeof)===rt)return 11;if(e===at)return 14}return 2}(i),e=yi(i,e),o){case 0:t=ga(null,t,i,e,n);break;case 1:t=ya(null,t,i,e,n);break;case 11:t=pa(null,t,i,e,n);break;case 14:t=ha(null,t,i,yi(i.type,e),r,n);break;default:throw a(Error(306),i,"")}return t;case 0:return r=t.type,i=t.pendingProps,ga(e,t,r,i=t.elementType===r?i:yi(r,i),n);case 1:return r=t.type,i=t.pendingProps,ya(e,t,r,i=t.elementType===r?i:yi(r,i),n);case 3:if(wa(t),null===(r=t.updateQueue))throw a(Error(282));return i=null!==(i=t.memoizedState)?i.element:null,Fi(t,r,t.pendingProps,null,n),(r=t.memoizedState.element)===i?(ca(),t=Sa(e,t,n)):(i=t.stateNode,(i=(null===e||null===e.child)&&i.hydrate)&&(na=Pr(t.stateNode.containerInfo.firstChild),ta=t,i=ra=!0),i?(t.effectTag|=2,t.child=eo(t,null,r,n)):(da(e,t,r,n),ca()),t=t.child),t;case 5:return lo(t),null===e&&aa(t),r=t.type,i=t.pendingProps,o=null!==e?e.memoizedProps:null,u=i.children,Sr(r,i)?u=null:null!==o&&Sr(r,o)&&(t.effectTag|=16),va(e,t),4&t.mode&&1!==n&&i.hidden?(t.expirationTime=t.childExpirationTime=1,t=null):(da(e,t,u,n),t=t.child),t;case 6:return null===e&&aa(t),null;case 13:return _a(e,t,n);case 4:return ao(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Zi(t,null,r,n):da(e,t,r,n),t.child;case 11:return r=t.type,i=t.pendingProps,pa(e,t,r,i=t.elementType===r?i:yi(r,i),n);case 7:return da(e,t,t.pendingProps,n),t.child;case 8:case 12:return da(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,i=t.pendingProps,u=t.memoizedProps,ki(t,o=i.value),null!==u){var l=u.value;if(0===(o=tn(l,o)?0:0|("function"===typeof r._calculateChangedBits?r._calculateChangedBits(l,o):1073741823))){if(u.children===i.children&&!Mr.current){t=Sa(e,t,n);break e}}else for(null!==(l=t.child)&&(l.return=t);null!==l;){var c=l.dependencies;if(null!==c){u=l.child;for(var s=c.firstContext;null!==s;){if(s.context===r&&0!==(s.observedBits&o)){1===l.tag&&((s=Ii(n,null)).tag=2,ji(l,s)),l.expirationTime<n&&(l.expirationTime=n),null!==(s=l.alternate)&&s.expirationTime<n&&(s.expirationTime=n),Ci(l.return,n),c.expirationTime<n&&(c.expirationTime=n);break}s=s.next}}else u=10===l.tag&&l.type===t.type?null:l.child;if(null!==u)u.return=l;else for(u=l;null!==u;){if(u===t){u=null;break}if(null!==(l=u.sibling)){l.return=u.return,u=l;break}u=u.return}l=u}}da(e,t,i.children,n),t=t.child}return t;case 9:return i=t.type,r=(o=t.pendingProps).children,Ti(t,n),r=r(i=Pi(i,o.unstable_observedBits)),t.effectTag|=1,da(e,t,r,n),t.child;case 14:return o=yi(i=t.type,t.pendingProps),ha(e,t,i,o=yi(i.type,o),r,n);case 15:return ma(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,i=t.pendingProps,i=t.elementType===r?i:yi(r,i),null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),t.tag=1,Fr(r)?(e=!0,Vr(t)):e=!1,Ti(t,n),Gi(t,r,i),Qi(t,r,i,n),ba(null,t,r,!0,e,n);case 19:return ka(e,t,n)}throw a(Error(156))};var el=null,tl=null;function nl(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childExpirationTime=this.expirationTime=0,this.alternate=null}function rl(e,t,n,r){return new nl(e,t,n,r)}function il(e){return!(!(e=e.prototype)||!e.isReactComponent)}function ol(e,t){var n=e.alternate;return null===n?((n=rl(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.effectTag=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childExpirationTime=e.childExpirationTime,n.expirationTime=e.expirationTime,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{expirationTime:t.expirationTime,firstContext:t.firstContext,responders:t.responders},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function al(e,t,n,r,i,o){var u=2;if(r=e,"function"===typeof e)il(e)&&(u=1);else if("string"===typeof e)u=5;else e:switch(e){case Xe:return ul(n.children,i,o,t);case nt:u=8,i|=7;break;case Je:u=8,i|=1;break;case Ze:return(e=rl(12,n,t,8|i)).elementType=Ze,e.type=Ze,e.expirationTime=o,e;case it:return(e=rl(13,n,t,i)).type=it,e.elementType=it,e.expirationTime=o,e;case ot:return(e=rl(19,n,t,i)).elementType=ot,e.expirationTime=o,e;default:if("object"===typeof e&&null!==e)switch(e.$$typeof){case et:u=10;break e;case tt:u=9;break e;case rt:u=11;break e;case at:u=14;break e;case ut:u=16,r=null;break e}throw a(Error(130),null==e?e:typeof e,"")}return(t=rl(u,n,t,i)).elementType=e,t.type=r,t.expirationTime=o,t}function ul(e,t,n,r){return(e=rl(7,e,r,t)).expirationTime=n,e}function ll(e,t,n){return(e=rl(6,e,null,t)).expirationTime=n,e}function cl(e,t,n){return(t=rl(4,null!==e.children?e.children:[],e.key,t)).expirationTime=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function sl(e,t,n){this.tag=t,this.current=null,this.containerInfo=e,this.pingCache=this.pendingChildren=null,this.finishedExpirationTime=0,this.finishedWork=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=this.firstBatch=null,this.pingTime=this.lastPendingTime=this.firstPendingTime=this.callbackExpirationTime=0}function fl(e,t,n){return e=new sl(e,t,n),t=rl(3,null,null,2===t?7:1===t?3:0),e.current=t,t.stateNode=e}function dl(e,t,n,r,i,o){var u=t.current;e:if(n){t:{if(2!==an(n=n._reactInternalFiber)||1!==n.tag)throw a(Error(170));var l=n;do{switch(l.tag){case 3:l=l.stateNode.context;break t;case 1:if(Fr(l.type)){l=l.stateNode.__reactInternalMemoizedMergedChildContext;break t}}l=l.return}while(null!==l);throw a(Error(171))}if(1===n.tag){var c=n.type;if(Fr(c)){n=Wr(n,c,l);break e}}n=l}else n=Rr;return null===t.context?t.context=n:t.pendingContext=n,t=o,(i=Ii(r,i)).payload={element:e},null!==(t=void 0===t?null:t)&&(i.callback=t),ji(u,i),Iu(u,r),r}function pl(e,t,n,r){var i=t.current,o=Ou(),a=Ui.suspense;return dl(e,t,n,i=Du(o,i,a),a,r)}function hl(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function ml(e){var t=1073741821-25*(1+((1073741821-Ou()+500)/25|0));t<=Nu&&--t,this._expirationTime=Nu=t,this._root=e,this._callbacks=this._next=null,this._hasChildren=this._didComplete=!1,this._children=null,this._defer=!0}function vl(){this._callbacks=null,this._didCommit=!1,this._onCommit=this._onCommit.bind(this)}function gl(e,t,n){this._internalRoot=fl(e,t,n)}function yl(e,t){this._internalRoot=fl(e,2,t)}function bl(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function wl(e,t,n,r,i){var o=n._reactRootContainer,a=void 0;if(o){if(a=o._internalRoot,"function"===typeof i){var u=i;i=function(){var e=hl(a);u.call(e)}}pl(t,a,e,i)}else{if(o=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new gl(e,0,t)}(n,r),a=o._internalRoot,"function"===typeof i){var l=i;i=function(){var e=hl(a);l.call(e)}}zu((function(){pl(t,a,e,i)}))}return hl(a)}function xl(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!bl(t))throw a(Error(200));return function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:Ye,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)}Te=function(e,t,n){switch(t){case"input":if(St(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var i=z(r);if(!i)throw a(Error(90));$e(r),St(r,i)}}}break;case"textarea":or(e,n);break;case"select":null!=(t=n.value)&&nr(e,!!n.multiple,t,!1)}},ml.prototype.render=function(e){if(!this._defer)throw a(Error(250));this._hasChildren=!0,this._children=e;var t=this._root._internalRoot,n=this._expirationTime,r=new vl;return dl(e,t,null,n,null,r._onCommit),r},ml.prototype.then=function(e){if(this._didComplete)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},ml.prototype.commit=function(){var e=this._root._internalRoot,t=e.firstBatch;if(!this._defer||null===t)throw a(Error(251));if(this._hasChildren){var n=this._expirationTime;if(t!==this){this._hasChildren&&(n=this._expirationTime=t._expirationTime,this.render(this._children));for(var r=null,i=t;i!==this;)r=i,i=i._next;if(null===r)throw a(Error(251));r._next=i._next,this._next=t,e.firstBatch=this}if(this._defer=!1,t=n,(au&(Za|eu))!==Xa)throw a(Error(253));hi(Uu.bind(null,e,t)),mi(),t=this._next,this._next=null,null!==(t=e.firstBatch=t)&&t._hasChildren&&t.render(t._children)}else this._next=null,this._defer=!1},ml.prototype._onComplete=function(){if(!this._didComplete){this._didComplete=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++)(0,e[t])()}},vl.prototype.then=function(e){if(this._didCommit)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},vl.prototype._onCommit=function(){if(!this._didCommit){this._didCommit=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++){var n=e[t];if("function"!==typeof n)throw a(Error(191),n);n()}}},yl.prototype.render=gl.prototype.render=function(e,t){var n=this._internalRoot,r=new vl;return null!==(t=void 0===t?null:t)&&r.then(t),pl(e,n,null,r._onCommit),r},yl.prototype.unmount=gl.prototype.unmount=function(e){var t=this._internalRoot,n=new vl;return null!==(e=void 0===e?null:e)&&n.then(e),pl(null,t,null,n._onCommit),n},yl.prototype.createBatch=function(){var e=new ml(this),t=e._expirationTime,n=this._internalRoot,r=n.firstBatch;if(null===r)n.firstBatch=e,e._next=null;else{for(n=null;null!==r&&r._expirationTime>=t;)n=r,r=r._next;e._next=r,null!==n&&(n._next=e)}return e},Re=Lu,je=Fu,Me=Au,Ae=function(e,t){var n=au;au|=2;try{return e(t)}finally{(au=n)===Xa&&mi()}};var _l={createPortal:xl,findDOMNode:function(e){if(null==e)e=null;else if(1!==e.nodeType){var t=e._reactInternalFiber;if(void 0===t){if("function"===typeof e.render)throw a(Error(188));throw a(Error(268),Object.keys(e))}e=null===(e=ln(t))?null:e.stateNode}return e},hydrate:function(e,t,n){if(!bl(t))throw a(Error(200));return wl(null,e,t,!0,n)},render:function(e,t,n){if(!bl(t))throw a(Error(200));return wl(null,e,t,!1,n)},unstable_renderSubtreeIntoContainer:function(e,t,n,r){if(!bl(n))throw a(Error(200));if(null==e||void 0===e._reactInternalFiber)throw a(Error(38));return wl(e,t,n,!1,r)},unmountComponentAtNode:function(e){if(!bl(e))throw a(Error(40));return!!e._reactRootContainer&&(zu((function(){wl(null,null,e,!1,(function(){e._reactRootContainer=null}))})),!0)},unstable_createPortal:function(){return xl.apply(void 0,arguments)},unstable_batchedUpdates:Lu,unstable_interactiveUpdates:function(e,t,n,r){return Au(),Fu(e,t,n,r)},unstable_discreteUpdates:Fu,unstable_flushDiscreteUpdates:Au,flushSync:function(e,t){if((au&(Za|eu))!==Xa)throw a(Error(187));var n=au;au|=1;try{return di(99,e.bind(null,t))}finally{au=n,mi()}},unstable_createRoot:function(e,t){if(!bl(e))throw a(Error(299),"unstable_createRoot");return new yl(e,null!=t&&!0===t.hydrate)},unstable_createSyncRoot:function(e,t){if(!bl(e))throw a(Error(299),"unstable_createRoot");return new gl(e,1,null!=t&&!0===t.hydrate)},unstable_flushControlled:function(e){var t=au;au|=1;try{di(99,e)}finally{(au=t)===Xa&&mi()}},__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{Events:[L,F,z,N.injectEventPluginsByName,d,$,function(e){T(e,H)},Ne,Ie,zn,D,qu,{current:!1}]}};!function(e){var t=e.findFiberByHostInstance;(function(e){if("undefined"===typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled||!t.supportsFiber)return!0;try{var n=t.inject(e);el=function(e){try{t.onCommitFiberRoot(n,e,void 0,64===(64&e.current.effectTag))}catch(e){}},tl=function(e){try{t.onCommitFiberUnmount(n,e)}catch(e){}}}catch(e){}})(i({},e,{overrideHookState:null,overrideProps:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:Ge.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=ln(e))?null:e.stateNode},findFiberByHostInstance:function(e){return t?t(e):null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null}))}({findFiberByHostInstance:A,bundleType:0,version:"16.9.0",rendererPackageName:"react-dom"});var El={default:_l},kl=El&&_l||El;e.exports=kl.default||kl},function(e,t,n){"use strict";e.exports=n(299)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=void 0,i=void 0,o=void 0,a=void 0,u=void 0;if(t.unstable_now=void 0,t.unstable_forceFrameRate=void 0,"undefined"===typeof window||"function"!==typeof MessageChannel){var l=null,c=null,s=function(){if(null!==l)try{var e=t.unstable_now();l(!0,e),l=null}catch(e){throw setTimeout(s,0),e}};t.unstable_now=function(){return Date.now()},r=function(e){null!==l?setTimeout(r,0,e):(l=e,setTimeout(s,0))},i=function(e,t){c=setTimeout(e,t)},o=function(){clearTimeout(c)},a=function(){return!1},u=t.unstable_forceFrameRate=function(){}}else{var f=window.performance,d=window.Date,p=window.setTimeout,h=window.clearTimeout,m=window.requestAnimationFrame,v=window.cancelAnimationFrame;"undefined"!==typeof console&&("function"!==typeof m&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"),"function"!==typeof v&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills")),t.unstable_now="object"===typeof f&&"function"===typeof f.now?function(){return f.now()}:function(){return d.now()};var g=!1,y=null,b=-1,w=-1,x=33.33,_=-1,E=-1,k=0,S=!1;a=function(){return t.unstable_now()>=k},u=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing framerates higher than 125 fps is not unsupported"):0<e?(x=Math.floor(1e3/e),S=!0):(x=33.33,S=!1)};var C=function(){if(null!==y){var e=t.unstable_now(),n=0<k-e;try{y(n,e)||(y=null)}catch(e){throw P.postMessage(null),e}}},T=new MessageChannel,P=T.port2;T.port1.onmessage=C;var O=function(e){if(null===y)E=_=-1,g=!1;else{g=!0,m((function(e){h(b),O(e)}));var n=function(){k=t.unstable_now()+x/2,C(),b=p(n,3*x)};if(b=p(n,3*x),-1!==_&&.1<e-_){var r=e-_;!S&&-1!==E&&r<x&&E<x&&(8.33>(x=r<E?E:r)&&(x=8.33)),E=r}_=e,k=e+x,P.postMessage(null)}};r=function(e){y=e,g||(g=!0,m((function(e){O(e)})))},i=function(e,n){w=p((function(){e(t.unstable_now())}),n)},o=function(){h(w),w=-1}}var D=null,N=null,I=null,R=3,j=!1,M=!1,A=!1;function L(e,t){var n=e.next;if(n===e)D=null;else{e===D&&(D=n);var r=e.previous;r.next=n,n.previous=r}e.next=e.previous=null,n=e.callback,r=R;var i=I;R=e.priorityLevel,I=e;try{var o=e.expirationTime<=t;switch(R){case 1:var a=n(o);break;case 2:case 3:case 4:a=n(o);break;case 5:a=n(o)}}catch(e){throw e}finally{R=r,I=i}if("function"===typeof a)if(t=e.expirationTime,e.callback=a,null===D)D=e.next=e.previous=e;else{a=null,o=D;do{if(t<=o.expirationTime){a=o;break}o=o.next}while(o!==D);null===a?a=D:a===D&&(D=e),(t=a.previous).next=a.previous=e,e.next=a,e.previous=t}}function F(e){if(null!==N&&N.startTime<=e)do{var t=N,n=t.next;if(t===n)N=null;else{N=n;var r=t.previous;r.next=n,n.previous=r}t.next=t.previous=null,W(t,t.expirationTime)}while(null!==N&&N.startTime<=e)}function z(e){A=!1,F(e),M||(null!==D?(M=!0,r(B)):null!==N&&i(z,N.startTime-e))}function B(e,n){M=!1,A&&(A=!1,o()),F(n),j=!0;try{if(e){if(null!==D)do{L(D,n),F(n=t.unstable_now())}while(null!==D&&!a())}else for(;null!==D&&D.expirationTime<=n;)L(D,n),F(n=t.unstable_now());return null!==D||(null!==N&&i(z,N.startTime-n),!1)}finally{j=!1}}function U(e){switch(e){case 1:return-1;case 2:return 250;case 5:return 1073741823;case 4:return 1e4;default:return 5e3}}function W(e,t){if(null===D)D=e.next=e.previous=e;else{var n=null,r=D;do{if(t<r.expirationTime){n=r;break}r=r.next}while(r!==D);null===n?n=D:n===D&&(D=e),(t=n.previous).next=n.previous=e,e.next=n,e.previous=t}}var V=u;t.unstable_ImmediatePriority=1,t.unstable_UserBlockingPriority=2,t.unstable_NormalPriority=3,t.unstable_IdlePriority=5,t.unstable_LowPriority=4,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=R;R=e;try{return t()}finally{R=n}},t.unstable_next=function(e){switch(R){case 1:case 2:case 3:var t=3;break;default:t=R}var n=R;R=t;try{return e()}finally{R=n}},t.unstable_scheduleCallback=function(e,n,a){var u=t.unstable_now();if("object"===typeof a&&null!==a){var l=a.delay;l="number"===typeof l&&0<l?u+l:u,a="number"===typeof a.timeout?a.timeout:U(e)}else a=U(e),l=u;if(e={callback:n,priorityLevel:e,startTime:l,expirationTime:a=l+a,next:null,previous:null},l>u){if(a=l,null===N)N=e.next=e.previous=e;else{n=null;var c=N;do{if(a<c.startTime){n=c;break}c=c.next}while(c!==N);null===n?n=N:n===N&&(N=e),(a=n.previous).next=n.previous=e,e.next=n,e.previous=a}null===D&&N===e&&(A?o():A=!0,i(z,l-u))}else W(e,a),M||j||(M=!0,r(B));return e},t.unstable_cancelCallback=function(e){var t=e.next;if(null!==t){if(e===t)e===D?D=null:e===N&&(N=null);else{e===D?D=t:e===N&&(N=t);var n=e.previous;n.next=t,t.previous=n}e.next=e.previous=null}},t.unstable_wrapCallback=function(e){var t=R;return function(){var n=R;R=t;try{return e.apply(this,arguments)}finally{R=n}}},t.unstable_getCurrentPriorityLevel=function(){return R},t.unstable_shouldYield=function(){var e=t.unstable_now();return F(e),null!==I&&null!==D&&D.startTime<=e&&D.expirationTime<I.expirationTime||a()},t.unstable_requestPaint=V,t.unstable_continueExecution=function(){M||j||(M=!0,r(B))},t.unstable_pauseExecution=function(){},t.unstable_getFirstCallbackNode=function(){return D}},function(e,t,n){"use strict";var r=n(12),i=n(48).indexOf,o=n(69),a=[].indexOf,u=!!a&&1/[1].indexOf(1,-0)<0,l=o("indexOf");r({target:"Array",proto:!0,forced:u||l},{indexOf:function(e){return u?a.apply(this,arguments)||0:i(this,e,arguments.length>1?arguments[1]:void 0)}})},function(e,t){e.exports=function(e){if(Array.isArray(e))return e}},function(e,t){e.exports=function(e,t){var n=[],r=!0,i=!1,o=void 0;try{for(var a,u=e[Symbol.iterator]();!(r=(a=u.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){i=!0,o=e}finally{try{r||null==u.return||u.return()}finally{if(i)throw o}}return n}},function(e,t){e.exports=function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}},function(e,t,n){var r=function(e){"use strict";var t,n=Object.prototype,r=n.hasOwnProperty,i="function"===typeof Symbol?Symbol:{},o=i.iterator||"@@iterator",a=i.asyncIterator||"@@asyncIterator",u=i.toStringTag||"@@toStringTag";function l(e,t,n,r){var i=t&&t.prototype instanceof m?t:m,o=Object.create(i.prototype),a=new T(r||[]);return o._invoke=function(e,t,n){var r=s;return function(i,o){if(r===d)throw new Error("Generator is already running");if(r===p){if("throw"===i)throw o;return O()}for(n.method=i,n.arg=o;;){var a=n.delegate;if(a){var u=k(a,n);if(u){if(u===h)continue;return u}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(r===s)throw r=p,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r=d;var l=c(e,t,n);if("normal"===l.type){if(r=n.done?p:f,l.arg===h)continue;return{value:l.arg,done:n.done}}"throw"===l.type&&(r=p,n.method="throw",n.arg=l.arg)}}}(e,n,a),o}function c(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}e.wrap=l;var s="suspendedStart",f="suspendedYield",d="executing",p="completed",h={};function m(){}function v(){}function g(){}var y={};y[o]=function(){return this};var b=Object.getPrototypeOf,w=b&&b(b(P([])));w&&w!==n&&r.call(w,o)&&(y=w);var x=g.prototype=m.prototype=Object.create(y);function _(e){["next","throw","return"].forEach((function(t){e[t]=function(e){return this._invoke(t,e)}}))}function E(e){var t;this._invoke=function(n,i){function o(){return new Promise((function(t,o){!function t(n,i,o,a){var u=c(e[n],e,i);if("throw"!==u.type){var l=u.arg,s=l.value;return s&&"object"===typeof s&&r.call(s,"__await")?Promise.resolve(s.__await).then((function(e){t("next",e,o,a)}),(function(e){t("throw",e,o,a)})):Promise.resolve(s).then((function(e){l.value=e,o(l)}),(function(e){return t("throw",e,o,a)}))}a(u.arg)}(n,i,t,o)}))}return t=t?t.then(o,o):o()}}function k(e,n){var r=e.iterator[n.method];if(r===t){if(n.delegate=null,"throw"===n.method){if(e.iterator.return&&(n.method="return",n.arg=t,k(e,n),"throw"===n.method))return h;n.method="throw",n.arg=new TypeError("The iterator does not provide a 'throw' method")}return h}var i=c(r,e.iterator,n.arg);if("throw"===i.type)return n.method="throw",n.arg=i.arg,n.delegate=null,h;var o=i.arg;return o?o.done?(n[e.resultName]=o.value,n.next=e.nextLoc,"return"!==n.method&&(n.method="next",n.arg=t),n.delegate=null,h):o:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,h)}function S(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function C(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function T(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(S,this),this.reset(!0)}function P(e){if(e){var n=e[o];if(n)return n.call(e);if("function"===typeof e.next)return e;if(!isNaN(e.length)){var i=-1,a=function n(){for(;++i<e.length;)if(r.call(e,i))return n.value=e[i],n.done=!1,n;return n.value=t,n.done=!0,n};return a.next=a}}return{next:O}}function O(){return{value:t,done:!0}}return v.prototype=x.constructor=g,g.constructor=v,g[u]=v.displayName="GeneratorFunction",e.isGeneratorFunction=function(e){var t="function"===typeof e&&e.constructor;return!!t&&(t===v||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,g):(e.__proto__=g,u in e||(e[u]="GeneratorFunction")),e.prototype=Object.create(x),e},e.awrap=function(e){return{__await:e}},_(E.prototype),E.prototype[a]=function(){return this},e.AsyncIterator=E,e.async=function(t,n,r,i){var o=new E(l(t,n,r,i));return e.isGeneratorFunction(n)?o:o.next().then((function(e){return e.done?e.value:o.next()}))},_(x),x[u]="Generator",x[o]=function(){return this},x.toString=function(){return"[object Generator]"},e.keys=function(e){var t=[];for(var n in e)t.push(n);return t.reverse(),function n(){for(;t.length;){var r=t.pop();if(r in e)return n.value=r,n.done=!1,n}return n.done=!0,n}},e.values=P,T.prototype={constructor:T,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(C),!e)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=t)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var n=this;function i(r,i){return u.type="throw",u.arg=e,n.next=r,i&&(n.method="next",n.arg=t),!!i}for(var o=this.tryEntries.length-1;o>=0;--o){var a=this.tryEntries[o],u=a.completion;if("root"===a.tryLoc)return i("end");if(a.tryLoc<=this.prev){var l=r.call(a,"catchLoc"),c=r.call(a,"finallyLoc");if(l&&c){if(this.prev<a.catchLoc)return i(a.catchLoc,!0);if(this.prev<a.finallyLoc)return i(a.finallyLoc)}else if(l){if(this.prev<a.catchLoc)return i(a.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return i(a.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var i=this.tryEntries[n];if(i.tryLoc<=this.prev&&r.call(i,"finallyLoc")&&this.prev<i.finallyLoc){var o=i;break}}o&&("break"===e||"continue"===e)&&o.tryLoc<=t&&t<=o.finallyLoc&&(o=null);var a=o?o.completion:{};return a.type=e,a.arg=t,o?(this.method="next",this.next=o.finallyLoc,h):this.complete(a)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),h},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),C(n),h}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var i=r.arg;C(n)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(e,n,r){return this.delegate={iterator:P(e),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=t),h}},e}(e.exports);try{regeneratorRuntime=r}catch(e){Function("r","regeneratorRuntime = r")(r)}},function(e,t,n){"use strict";var r=n(127),i=n(136),o=Object.prototype.hasOwnProperty,a={brackets:function(e){return e+"[]"},comma:"comma",indices:function(e,t){return e+"["+t+"]"},repeat:function(e){return e}},u=Array.isArray,l=Array.prototype.push,c=function(e,t){l.apply(e,u(t)?t:[t])},s=Date.prototype.toISOString,f=i.default,d={addQueryPrefix:!1,allowDots:!1,charset:"utf-8",charsetSentinel:!1,delimiter:"&",encode:!0,encoder:r.encode,encodeValuesOnly:!1,format:f,formatter:i.formatters[f],indices:!1,serializeDate:function(e){return s.call(e)},skipNulls:!1,strictNullHandling:!1},p=function e(t,n,i,o,a,l,s,f,p,h,m,v,g){var y,b=t;if("function"===typeof s?b=s(n,b):b instanceof Date?b=h(b):"comma"===i&&u(b)&&(b=b.join(",")),null===b){if(o)return l&&!v?l(n,d.encoder,g,"key"):n;b=""}if("string"===typeof(y=b)||"number"===typeof y||"boolean"===typeof y||"symbol"===typeof y||"bigint"===typeof y||r.isBuffer(b))return l?[m(v?n:l(n,d.encoder,g,"key"))+"="+m(l(b,d.encoder,g,"value"))]:[m(n)+"="+m(String(b))];var w,x=[];if("undefined"===typeof b)return x;if(u(s))w=s;else{var _=Object.keys(b);w=f?_.sort(f):_}for(var E=0;E<w.length;++E){var k=w[E];a&&null===b[k]||(u(b)?c(x,e(b[k],"function"===typeof i?i(n,k):n,i,o,a,l,s,f,p,h,m,v,g)):c(x,e(b[k],n+(p?"."+k:"["+k+"]"),i,o,a,l,s,f,p,h,m,v,g)))}return x};e.exports=function(e,t){var n,r=e,l=function(e){if(!e)return d;if(null!==e.encoder&&void 0!==e.encoder&&"function"!==typeof e.encoder)throw new TypeError("Encoder has to be a function.");var t=e.charset||d.charset;if("undefined"!==typeof e.charset&&"utf-8"!==e.charset&&"iso-8859-1"!==e.charset)throw new TypeError("The charset option must be either utf-8, iso-8859-1, or undefined");var n=i.default;if("undefined"!==typeof e.format){if(!o.call(i.formatters,e.format))throw new TypeError("Unknown format option provided.");n=e.format}var r=i.formatters[n],a=d.filter;return("function"===typeof e.filter||u(e.filter))&&(a=e.filter),{addQueryPrefix:"boolean"===typeof e.addQueryPrefix?e.addQueryPrefix:d.addQueryPrefix,allowDots:"undefined"===typeof e.allowDots?d.allowDots:!!e.allowDots,charset:t,charsetSentinel:"boolean"===typeof e.charsetSentinel?e.charsetSentinel:d.charsetSentinel,delimiter:"undefined"===typeof e.delimiter?d.delimiter:e.delimiter,encode:"boolean"===typeof e.encode?e.encode:d.encode,encoder:"function"===typeof e.encoder?e.encoder:d.encoder,encodeValuesOnly:"boolean"===typeof e.encodeValuesOnly?e.encodeValuesOnly:d.encodeValuesOnly,filter:a,formatter:r,serializeDate:"function"===typeof e.serializeDate?e.serializeDate:d.serializeDate,skipNulls:"boolean"===typeof e.skipNulls?e.skipNulls:d.skipNulls,sort:"function"===typeof e.sort?e.sort:null,strictNullHandling:"boolean"===typeof e.strictNullHandling?e.strictNullHandling:d.strictNullHandling}}(t);"function"===typeof l.filter?r=(0,l.filter)("",r):u(l.filter)&&(n=l.filter);var s,f=[];if("object"!==typeof r||null===r)return"";s=t&&t.arrayFormat in a?t.arrayFormat:t&&"indices"in t?t.indices?"indices":"repeat":"indices";var h=a[s];n||(n=Object.keys(r)),l.sort&&n.sort(l.sort);for(var m=0;m<n.length;++m){var v=n[m];l.skipNulls&&null===r[v]||c(f,p(r[v],v,h,l.strictNullHandling,l.skipNulls,l.encode?l.encoder:null,l.filter,l.sort,l.allowDots,l.serializeDate,l.formatter,l.encodeValuesOnly,l.charset))}var g=f.join(l.delimiter),y=!0===l.addQueryPrefix?"?":"";return l.charsetSentinel&&("iso-8859-1"===l.charset?y+="utf8=%26%2310003%3B&":y+="utf8=%E2%9C%93&"),g.length>0?y+g:""}},function(e,t,n){"use strict";var r=n(127),i=Object.prototype.hasOwnProperty,o={allowDots:!1,allowPrototypes:!1,arrayLimit:20,charset:"utf-8",charsetSentinel:!1,comma:!1,decoder:r.decode,delimiter:"&",depth:5,ignoreQueryPrefix:!1,interpretNumericEntities:!1,parameterLimit:1e3,parseArrays:!0,plainObjects:!1,strictNullHandling:!1},a=function(e){return e.replace(/&#(\d+);/g,(function(e,t){return String.fromCharCode(parseInt(t,10))}))},u=function(e,t,n){if(e){var r=n.allowDots?e.replace(/\.([^.[]+)/g,"[$1]"):e,o=/(\[[^[\]]*])/g,a=n.depth>0&&/(\[[^[\]]*])/.exec(r),u=a?r.slice(0,a.index):r,l=[];if(u){if(!n.plainObjects&&i.call(Object.prototype,u)&&!n.allowPrototypes)return;l.push(u)}for(var c=0;n.depth>0&&null!==(a=o.exec(r))&&c<n.depth;){if(c+=1,!n.plainObjects&&i.call(Object.prototype,a[1].slice(1,-1))&&!n.allowPrototypes)return;l.push(a[1])}return a&&l.push("["+r.slice(a.index)+"]"),function(e,t,n){for(var r=t,i=e.length-1;i>=0;--i){var o,a=e[i];if("[]"===a&&n.parseArrays)o=[].concat(r);else{o=n.plainObjects?Object.create(null):{};var u="["===a.charAt(0)&&"]"===a.charAt(a.length-1)?a.slice(1,-1):a,l=parseInt(u,10);n.parseArrays||""!==u?!isNaN(l)&&a!==u&&String(l)===u&&l>=0&&n.parseArrays&&l<=n.arrayLimit?(o=[])[l]=r:o[u]=r:o={0:r}}r=o}return r}(l,t,n)}};e.exports=function(e,t){var n=function(e){if(!e)return o;if(null!==e.decoder&&void 0!==e.decoder&&"function"!==typeof e.decoder)throw new TypeError("Decoder has to be a function.");if("undefined"!==typeof e.charset&&"utf-8"!==e.charset&&"iso-8859-1"!==e.charset)throw new Error("The charset option must be either utf-8, iso-8859-1, or undefined");var t="undefined"===typeof e.charset?o.charset:e.charset;return{allowDots:"undefined"===typeof e.allowDots?o.allowDots:!!e.allowDots,allowPrototypes:"boolean"===typeof e.allowPrototypes?e.allowPrototypes:o.allowPrototypes,arrayLimit:"number"===typeof e.arrayLimit?e.arrayLimit:o.arrayLimit,charset:t,charsetSentinel:"boolean"===typeof e.charsetSentinel?e.charsetSentinel:o.charsetSentinel,comma:"boolean"===typeof e.comma?e.comma:o.comma,decoder:"function"===typeof e.decoder?e.decoder:o.decoder,delimiter:"string"===typeof e.delimiter||r.isRegExp(e.delimiter)?e.delimiter:o.delimiter,depth:"number"===typeof e.depth||!1===e.depth?+e.depth:o.depth,ignoreQueryPrefix:!0===e.ignoreQueryPrefix,interpretNumericEntities:"boolean"===typeof e.interpretNumericEntities?e.interpretNumericEntities:o.interpretNumericEntities,parameterLimit:"number"===typeof e.parameterLimit?e.parameterLimit:o.parameterLimit,parseArrays:!1!==e.parseArrays,plainObjects:"boolean"===typeof e.plainObjects?e.plainObjects:o.plainObjects,strictNullHandling:"boolean"===typeof e.strictNullHandling?e.strictNullHandling:o.strictNullHandling}}(t);if(""===e||null===e||"undefined"===typeof e)return n.plainObjects?Object.create(null):{};for(var l="string"===typeof e?function(e,t){var n,u={},l=t.ignoreQueryPrefix?e.replace(/^\?/,""):e,c=t.parameterLimit===1/0?void 0:t.parameterLimit,s=l.split(t.delimiter,c),f=-1,d=t.charset;if(t.charsetSentinel)for(n=0;n<s.length;++n)0===s[n].indexOf("utf8=")&&("utf8=%E2%9C%93"===s[n]?d="utf-8":"utf8=%26%2310003%3B"===s[n]&&(d="iso-8859-1"),f=n,n=s.length);for(n=0;n<s.length;++n)if(n!==f){var p,h,m=s[n],v=m.indexOf("]="),g=-1===v?m.indexOf("="):v+1;-1===g?(p=t.decoder(m,o.decoder,d,"key"),h=t.strictNullHandling?null:""):(p=t.decoder(m.slice(0,g),o.decoder,d,"key"),h=t.decoder(m.slice(g+1),o.decoder,d,"value")),h&&t.interpretNumericEntities&&"iso-8859-1"===d&&(h=a(h)),h&&t.comma&&h.indexOf(",")>-1&&(h=h.split(",")),i.call(u,p)?u[p]=r.combine(u[p],h):u[p]=h}return u}(e,n):e,c=n.plainObjects?Object.create(null):{},s=Object.keys(l),f=0;f<s.length;++f){var d=s[f],p=u(d,l[d],n);c=r.merge(c,p,n)}return r.compact(c)}},function(e,t,n){n(308),e.exports=n(67).Object.assign},function(e,t,n){var r=n(81);r(r.S+r.F,"Object",{assign:n(315)})},function(e,t,n){var r=n(310);e.exports=function(e,t,n){if(r(e),void 0===t)return e;switch(n){case 1:return function(n){return e.call(t,n)};case 2:return function(n,r){return e.call(t,n,r)};case 3:return function(n,r,i){return e.call(t,n,r,i)}}return function(){return e.apply(t,arguments)}}},function(e,t){e.exports=function(e){if("function"!=typeof e)throw TypeError(e+" is not a function!");return e}},function(e,t,n){var r=n(137),i=n(314);e.exports=n(82)?function(e,t,n){return r.f(e,t,i(1,n))}:function(e,t,n){return e[t]=n,e}},function(e,t,n){e.exports=!n(82)&&!n(101)((function(){return 7!=Object.defineProperty(n(138)("div"),"a",{get:function(){return 7}}).a}))},function(e,t,n){var r=n(100);e.exports=function(e,t){if(!r(e))return e;var n,i;if(t&&"function"==typeof(n=e.toString)&&!r(i=n.call(e)))return i;if("function"==typeof(n=e.valueOf)&&!r(i=n.call(e)))return i;if(!t&&"function"==typeof(n=e.toString)&&!r(i=n.call(e)))return i;throw TypeError("Can't convert object to primitive value")}},function(e,t){e.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},function(e,t,n){"use strict";var r=n(82),i=n(102),o=n(324),a=n(145),u=n(146),l=n(140),c=Object.assign;e.exports=!c||n(101)((function(){var e={},t={},n=Symbol(),r="abcdefghijklmnopqrst";return e[n]=7,r.split("").forEach((function(e){t[e]=e})),7!=c({},e)[n]||Object.keys(c({},t)).join("")!=r}))?function(e,t){for(var n=u(e),c=arguments.length,s=1,f=o.f,d=a.f;c>s;)for(var p,h=l(arguments[s++]),m=f?i(h).concat(f(h)):i(h),v=m.length,g=0;v>g;)p=m[g++],r&&!d.call(h,p)||(n[p]=h[p]);return n}:c},function(e,t,n){var r=n(139),i=n(129),o=n(318)(!1),a=n(143)("IE_PROTO");e.exports=function(e,t){var n,u=i(e),l=0,c=[];for(n in u)n!=a&&r(u,n)&&c.push(n);for(;t.length>l;)r(u,n=t[l++])&&(~o(c,n)||c.push(n));return c}},function(e,t){var n={}.toString;e.exports=function(e){return n.call(e).slice(8,-1)}},function(e,t,n){var r=n(129),i=n(319),o=n(320);e.exports=function(e){return function(t,n,a){var u,l=r(t),c=i(l.length),s=o(a,c);if(e&&n!=n){for(;c>s;)if((u=l[s++])!=u)return!0}else for(;c>s;s++)if((e||s in l)&&l[s]===n)return e||s||0;return!e&&-1}}},function(e,t,n){var r=n(142),i=Math.min;e.exports=function(e){return e>0?i(r(e),9007199254740991):0}},function(e,t,n){var r=n(142),i=Math.max,o=Math.min;e.exports=function(e,t){return(e=r(e))<0?i(e+t,0):o(e,t)}},function(e,t,n){var r=n(67),i=n(99),o=i["__core-js_shared__"]||(i["__core-js_shared__"]={});(e.exports=function(e,t){return o[e]||(o[e]=void 0!==t?t:{})})("versions",[]).push({version:r.version,mode:n(322)?"pure":"global",copyright:"© 2019 Denis Pushkarev (zloirock.ru)"})},function(e,t){e.exports=!0},function(e,t){var n=0,r=Math.random();e.exports=function(e){return"Symbol(".concat(void 0===e?"":e,")_",(++n+r).toString(36))}},function(e,t){t.f=Object.getOwnPropertySymbols},function(e,t,n){n(326);var r=n(67).Object;e.exports=function(e,t){return r.create(e,t)}},function(e,t,n){var r=n(81);r(r.S,"Object",{create:n(327)})},function(e,t,n){var r=n(128),i=n(328),o=n(144),a=n(143)("IE_PROTO"),u=function(){},l=function(){var e,t=n(138)("iframe"),r=o.length;for(t.style.display="none",n(329).appendChild(t),t.src="javascript:",(e=t.contentWindow.document).open(),e.write("<script>document.F=Object<\/script>"),e.close(),l=e.F;r--;)delete l.prototype[o[r]];return l()};e.exports=Object.create||function(e,t){var n;return null!==e?(u.prototype=r(e),n=new u,u.prototype=null,n[a]=e):n=l(),void 0===t?n:i(n,t)}},function(e,t,n){var r=n(137),i=n(128),o=n(102);e.exports=n(82)?Object.defineProperties:function(e,t){i(e);for(var n,a=o(t),u=a.length,l=0;u>l;)r.f(e,n=a[l++],t[n]);return e}},function(e,t,n){var r=n(99).document;e.exports=r&&r.documentElement},function(e,t,n){"use strict";var r=n(331);function i(){}function o(){}o.resetWarningCache=i,e.exports=function(){function e(e,t,n,i,o,a){if(a!==r){var u=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw u.name="Invariant Violation",u}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:o,resetWarningCache:i};return n.PropTypes=n,n}},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,n){"use strict";e.exports=n(333)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r="function"===typeof Symbol&&Symbol.for,i=r?Symbol.for("react.element"):60103,o=r?Symbol.for("react.portal"):60106,a=r?Symbol.for("react.fragment"):60107,u=r?Symbol.for("react.strict_mode"):60108,l=r?Symbol.for("react.profiler"):60114,c=r?Symbol.for("react.provider"):60109,s=r?Symbol.for("react.context"):60110,f=r?Symbol.for("react.async_mode"):60111,d=r?Symbol.for("react.concurrent_mode"):60111,p=r?Symbol.for("react.forward_ref"):60112,h=r?Symbol.for("react.suspense"):60113,m=r?Symbol.for("react.memo"):60115,v=r?Symbol.for("react.lazy"):60116;function g(e){if("object"===typeof e&&null!==e){var t=e.$$typeof;switch(t){case i:switch(e=e.type){case f:case d:case a:case l:case u:case h:return e;default:switch(e=e&&e.$$typeof){case s:case p:case c:return e;default:return t}}case v:case m:case o:return t}}}function y(e){return g(e)===d}t.typeOf=g,t.AsyncMode=f,t.ConcurrentMode=d,t.ContextConsumer=s,t.ContextProvider=c,t.Element=i,t.ForwardRef=p,t.Fragment=a,t.Lazy=v,t.Memo=m,t.Portal=o,t.Profiler=l,t.StrictMode=u,t.Suspense=h,t.isValidElementType=function(e){return"string"===typeof e||"function"===typeof e||e===a||e===d||e===l||e===u||e===h||"object"===typeof e&&null!==e&&(e.$$typeof===v||e.$$typeof===m||e.$$typeof===c||e.$$typeof===s||e.$$typeof===p)},t.isAsyncMode=function(e){return y(e)||g(e)===f},t.isConcurrentMode=y,t.isContextConsumer=function(e){return g(e)===s},t.isContextProvider=function(e){return g(e)===c},t.isElement=function(e){return"object"===typeof e&&null!==e&&e.$$typeof===i},t.isForwardRef=function(e){return g(e)===p},t.isFragment=function(e){return g(e)===a},t.isLazy=function(e){return g(e)===v},t.isMemo=function(e){return g(e)===m},t.isPortal=function(e){return g(e)===o},t.isProfiler=function(e){return g(e)===l},t.isStrictMode=function(e){return g(e)===u},t.isSuspense=function(e){return g(e)===h}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r="function"===typeof Symbol&&Symbol.for,i=r?Symbol.for("react.element"):60103,o=r?Symbol.for("react.portal"):60106,a=r?Symbol.for("react.fragment"):60107,u=r?Symbol.for("react.strict_mode"):60108,l=r?Symbol.for("react.profiler"):60114,c=r?Symbol.for("react.provider"):60109,s=r?Symbol.for("react.context"):60110,f=r?Symbol.for("react.async_mode"):60111,d=r?Symbol.for("react.concurrent_mode"):60111,p=r?Symbol.for("react.forward_ref"):60112,h=r?Symbol.for("react.suspense"):60113,m=r?Symbol.for("react.suspense_list"):60120,v=r?Symbol.for("react.memo"):60115,g=r?Symbol.for("react.lazy"):60116,y=r?Symbol.for("react.fundamental"):60117,b=r?Symbol.for("react.responder"):60118;function w(e){if("object"===typeof e&&null!==e){var t=e.$$typeof;switch(t){case i:switch(e=e.type){case f:case d:case a:case l:case u:case h:return e;default:switch(e=e&&e.$$typeof){case s:case p:case c:return e;default:return t}}case g:case v:case o:return t}}}function x(e){return w(e)===d}t.typeOf=w,t.AsyncMode=f,t.ConcurrentMode=d,t.ContextConsumer=s,t.ContextProvider=c,t.Element=i,t.ForwardRef=p,t.Fragment=a,t.Lazy=g,t.Memo=v,t.Portal=o,t.Profiler=l,t.StrictMode=u,t.Suspense=h,t.isValidElementType=function(e){return"string"===typeof e||"function"===typeof e||e===a||e===d||e===l||e===u||e===h||e===m||"object"===typeof e&&null!==e&&(e.$$typeof===g||e.$$typeof===v||e.$$typeof===c||e.$$typeof===s||e.$$typeof===p||e.$$typeof===y||e.$$typeof===b)},t.isAsyncMode=function(e){return x(e)||w(e)===f},t.isConcurrentMode=x,t.isContextConsumer=function(e){return w(e)===s},t.isContextProvider=function(e){return w(e)===c},t.isElement=function(e){return"object"===typeof e&&null!==e&&e.$$typeof===i},t.isForwardRef=function(e){return w(e)===p},t.isFragment=function(e){return w(e)===a},t.isLazy=function(e){return w(e)===g},t.isMemo=function(e){return w(e)===v},t.isPortal=function(e){return w(e)===o},t.isProfiler=function(e){return w(e)===l},t.isStrictMode=function(e){return w(e)===u},t.isSuspense=function(e){return w(e)===h}},function(e,t){e.exports=function(e){if(!e.webpackPolyfill){var t=Object.create(e);t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),Object.defineProperty(t,"exports",{enumerable:!0}),t.webpackPolyfill=1}return t}},function(e,t,n){n(337),e.exports=n(67).Object.values},function(e,t,n){var r=n(81),i=n(338)(!1);r(r.S,"Object",{values:function(e){return i(e)}})},function(e,t,n){var r=n(82),i=n(102),o=n(129),a=n(145).f;e.exports=function(e){return function(t){for(var n,u=o(t),l=i(u),c=l.length,s=0,f=[];c>s;)n=l[s++],r&&!a.call(u,n)||f.push(e?[n,u[n]]:u[n]);return f}}},function(e,t,n){n(340),e.exports=n(67).Object.keys},function(e,t,n){var r=n(146),i=n(102);n(341)("keys",(function(){return function(e){return i(r(e))}}))},function(e,t,n){var r=n(81),i=n(67),o=n(101);e.exports=function(e,t){var n=(i.Object||{})[e]||Object[e],a={};a[e]=t(n),r(r.S+r.F*o((function(){n(1)})),"Object",a)}},function(e,t,n){n(343),e.exports=n(67).Date.now},function(e,t,n){var r=n(81);r(r.S,"Date",{now:function(){return(new Date).getTime()}})},function(e,t,n){n(345),e.exports=n(67).Number.isInteger},function(e,t,n){var r=n(81);r(r.S,"Number",{isInteger:n(346)})},function(e,t,n){var r=n(100),i=Math.floor;e.exports=function(e){return!r(e)&&isFinite(e)&&i(e)===e}},,,,,,,,,,,,,,,,function(e,t,n){"use strict";n.r(t);var r,i,o,a,u=n(3),l=n(1),c=n.n(l),s=n(103),f=n.n(s),d=(n(108),n(300),n(79),n(124),n(109),n(110),n(112),n(115),n(97)),p=n.n(d),h=n(274),m=n.n(h),v=n(92),g=n.n(v),y=n(93),b=n.n(y),w=n(94),x=n.n(w),_=n(95),E=n.n(_),k=n(49),S=n.n(k),C=n(96),T=n.n(C),P=n(64),O=n.n(P),D=n(14),N=n(42);r={"(":9,"!":8,"*":7,"/":7,"%":7,"+":6,"-":6,"<":5,"<=":5,">":5,">=":5,"==":4,"!=":4,"&&":3,"||":2,"?":1,"?:":1},i=["(","?"],o={")":["("],":":["?","?:"]},a=/<=|>=|==|!=|&&|\|\||\?:|\(|!|\*|\/|%|\+|-|<|>|\?|\)|:/;var I={"!":function(e){return!e},"*":function(e,t){return e*t},"/":function(e,t){return e/t},"%":function(e,t){return e%t},"+":function(e,t){return e+t},"-":function(e,t){return e-t},"<":function(e,t){return e<t},"<=":function(e,t){return e<=t},">":function(e,t){return e>t},">=":function(e,t){return e>=t},"==":function(e,t){return e===t},"!=":function(e,t){return e!==t},"&&":function(e,t){return e&&t},"||":function(e,t){return e||t},"?:":function(e,t,n){if(e)throw t;return n}};function R(e){var t=function(e){for(var t,n,u,l,c=[],s=[];t=e.match(a);){for(n=t[0],(u=e.substr(0,t.index).trim())&&c.push(u);l=s.pop();){if(o[n]){if(o[n][0]===l){n=o[n][1]||n;break}}else if(i.indexOf(l)>=0||r[l]<r[n]){s.push(l);break}c.push(l)}o[n]||s.push(n),e=e.substr(t.index+n.length)}return(e=e.trim())&&c.push(e),c.concat(s.reverse())}(e);return function(e){return function(e,t){var n,r,i,o,a,u,l=[];for(n=0;n<e.length;n++){if(a=e[n],o=I[a]){for(r=o.length,i=Array(r);r--;)i[r]=l.pop();try{u=o.apply(null,i)}catch(e){return e}}else u=t.hasOwnProperty(a)?t[a]:+a;l.push(u)}return l[0]}(t,e)}}var j={contextDelimiter:"",onMissingKey:null};function M(e,t){var n;for(n in this.data=e,this.pluralForms={},t=t||{},this.options={},j)this.options[n]=t[n]||j[n]}M.prototype.getPluralForm=function(e,t){var n,r,i,o=this.pluralForms[e];return o||("function"!==typeof(i=(n=this.data[e][""])["Plural-Forms"]||n["plural-forms"]||n.plural_forms)&&(r=function(e){var t,n,r;for(t=e.split(";"),n=0;n<t.length;n++)if(0===(r=t[n].trim()).indexOf("plural="))return r.substr(7)}(n["Plural-Forms"]||n["plural-forms"]||n.plural_forms),i=function(e){var t=R(e);return function(e){return+t({n:e})}}(r)),o=this.pluralForms[e]=i),o(t)},M.prototype.dcnpgettext=function(e,t,n,r,i){var o,a,u;return o=void 0===i?0:this.getPluralForm(e,i),a=n,t&&(a=t+this.options.contextDelimiter+n),(u=this.data[e][a])&&u[o]?u[o]:(this.options.onMissingKey&&this.options.onMissingKey(n,e),0===o?n:r)};var A=n(104),L=n.n(A),F=(n(130),{"":{plural_forms:function(e){return 1===e?0:1}}}),z=(L()(console.error),new M({}));function B(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"default",t=arguments.length>1?arguments[1]:void 0,n=arguments.length>2?arguments[2]:void 0,r=arguments.length>3?arguments[3]:void 0,i=arguments.length>4?arguments[4]:void 0;return z.data[e]||function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"default";z.data[t]=Object(D.a)({},F,z.data[t],e),z.data[t][""]=Object(D.a)({},F[""],z.data[t][""])}(void 0,e),z.dcnpgettext(e,t,n,r,i)}function U(e,t){return B(t,void 0,e)}var W=function(e){function t(e,n){var r=e.headers,i=void 0===r?{}:r;for(var o in i)if("x-wp-nonce"===o.toLowerCase())return n(e);return n(Object(D.a)({},e,{headers:Object(D.a)({},i,{"X-WP-Nonce":t.nonce})}))}return t.nonce=e,t},V=function(e,t){var n,r,i=e.path;return"string"===typeof e.namespace&&"string"===typeof e.endpoint&&(n=e.namespace.replace(/^\/|\/$/g,""),i=(r=e.endpoint.replace(/^\//,""))?n+"/"+r:n),delete e.namespace,delete e.endpoint,t(Object(D.a)({},e,{path:i}))},H=function(e){return function(t,n){return V(t,(function(t){var r,i=t.url,o=t.path;return"string"===typeof o&&(r=e,-1!==e.indexOf("?")&&(o=o.replace("?","&")),o=o.replace(/^\//,""),"string"===typeof r&&-1!==r.indexOf("?")&&(o=o.replace("?","&")),i=r+o),n(Object(D.a)({},t,{url:i}))}))}},$=function(e){return function(t,n){var r=t.parse,i=void 0===r||r;if("string"===typeof t.path){var o=t.method||"GET",a=function(e){var t=e.split("?"),n=t[1],r=t[0];return n?r+"?"+n.split("&").map((function(e){return e.split("=")})).sort((function(e,t){return e[0].localeCompare(t[0])})).map((function(e){return e.join("=")})).join("&"):r}(t.path);if(i&&"GET"===o&&e[a])return Promise.resolve(e[a].body);if("OPTIONS"===o&&e[o]&&e[o][a])return Promise.resolve(e[o][a])}return n(t)}},G=n(131),q=n.n(G);function Q(e,t,n,r,i,o,a){try{var u=e[o](a),l=u.value}catch(e){return void n(e)}u.done?t(l):Promise.resolve(l).then(r,i)}var K=n(83);function Y(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",t=arguments.length>1?arguments[1]:void 0;if(!t||!Object.keys(t).length)return e;var n=e,r=e.indexOf("?");return-1!==r&&(t=Object.assign(Object(K.parse)(e.substr(r+1)),t),n=n.substr(0,r)),n+"?"+Object(K.stringify)(t)}function X(e,t){return void 0!==function(e,t){var n=e.indexOf("?");return(-1!==n?Object(K.parse)(e.substr(n+1)):{})[t]}(e,t)}var J=function(e,t){var n=e.path,r=e.url,i=Object(N.a)(e,["path","url"]);return Object(D.a)({},i,{url:r&&Y(r,t),path:n&&Y(n,t)})},Z=function(e){return e.json?e.json():Promise.reject(e)},ee=function(e){return function(e){if(!e)return{};var t=e.match(/<([^>]+)>; rel="next"/);return t?{next:t[1]}:{}}(e.headers.get("link")).next},te=function(e){var t=e.path&&-1!==e.path.indexOf("per_page=-1"),n=e.url&&-1!==e.url.indexOf("per_page=-1");return t||n},ne=function(){var e,t=(e=q.a.mark((function e(t,n){var r,i,o,a,u,l;return q.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!1!==t.parse){e.next=2;break}return e.abrupt("return",n(t));case 2:if(te(t)){e.next=4;break}return e.abrupt("return",n(t));case 4:return e.next=6,n(Object(D.a)({},J(t,{per_page:100}),{parse:!1}));case 6:return r=e.sent,e.next=9,Z(r);case 9:if(i=e.sent,Array.isArray(i)){e.next=12;break}return e.abrupt("return",i);case 12:if(o=ee(r)){e.next=15;break}return e.abrupt("return",i);case 15:a=[].concat(i);case 16:if(!o){e.next=27;break}return e.next=19,n(Object(D.a)({},t,{path:void 0,url:o,parse:!1}));case 19:return u=e.sent,e.next=22,Z(u);case 22:l=e.sent,a=a.concat(l),o=ee(u),e.next=16;break;case 27:return e.abrupt("return",a);case 28:case"end":return e.stop()}}),e)})),function(){var t=this,n=arguments;return new Promise((function(r,i){var o=e.apply(t,n);function a(e){Q(o,r,i,a,u,"next",e)}function u(e){Q(o,r,i,a,u,"throw",e)}a(void 0)}))});return function(e,n){return t.apply(this,arguments)}}(),re=new Set(["PATCH","PUT","DELETE"]),ie="GET";var oe={Accept:"application/json, */*;q=0.1"},ae={credentials:"include"},ue=[function(e,t){return"string"!==typeof e.url||X(e.url,"_locale")||(e.url=Y(e.url,{_locale:"user"})),"string"!==typeof e.path||X(e.path,"_locale")||(e.path=Y(e.path,{_locale:"user"})),t(e,t)},V,function(e,t){var n=e.method,r=void 0===n?ie:n;return re.has(r.toUpperCase())&&(e=Object(D.a)({},e,{headers:Object(D.a)({},e.headers,{"X-HTTP-Method-Override":r,"Content-Type":"application/json"}),method:"POST"})),t(e,t)},ne];var le=function(e){if(e.status>=200&&e.status<300)return e;throw e},ce=function(e){var t=e.url,n=e.path,r=e.data,i=e.parse,o=void 0===i||i,a=Object(N.a)(e,["url","path","data","parse"]),u=e.body,l=e.headers;l=Object(D.a)({},oe,l),r&&(u=JSON.stringify(r),l["Content-Type"]="application/json");return window.fetch(t||n,Object(D.a)({},ae,a,{body:u,headers:l})).then(le).then((function(e){return o?204===e.status?null:e.json?e.json():Promise.reject(e):e})).catch((function(e){if(!o)throw e;var t={code:"invalid_json",message:U("The response is not a valid JSON response.")};if(!e||!e.json)throw t;return e.json().catch((function(){throw t})).then((function(e){var t={code:"unknown_error",message:U("An unknown error occurred.")};throw e||t}))}))};function se(e){var t=[].concat(ue,[ce]);return new Promise((function(n,r){(function e(n){return function(r){var i=t[n];return n===t.length-1?i(r):i(r,e(n+1))}})(0)(e).then(n).catch((function(t){if("rest_cookie_invalid_nonce"!==t.code)return r(t);window.fetch(se.nonceEndpoint).then(le).then((function(e){return e.text()})).then((function(t){se.nonceMiddleware.nonce=t,se(e).then(n).catch(r)})).catch(r)}))}))}se.use=function(e){ue.unshift(e)},se.setFetchHandler=function(e){ce=e},se.createNonceMiddleware=W,se.createPreloadingMiddleware=$,se.createRootURLMiddleware=H,se.fetchAllMiddleware=ne;var fe=se;function de(e,t){var n;return function(){var r=this,i=arguments,o=function(){n=null,e.apply(r,i)};clearTimeout(n),n=setTimeout(o,t)}}var pe=n(105),he=n.n(pe);function me(){return(me=he.a||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function ve(e,t){var n=Object(l.useState)((function(){return{inputs:t,result:e()}}))[0],r=Object(l.useRef)(n),i=Boolean(t&&r.current.inputs&&function(e,t){if(e.length!==t.length)return!1;for(var n=0;n<e.length;n++)if(e[n]!==t[n])return!1;return!0}(t,r.current.inputs))?r.current:{inputs:t,result:e()};return Object(l.useEffect)((function(){r.current=i}),[i]),i.result}var ge=ve,ye=function(e,t){return ve((function(){return e}),t)},be=n(275),we=n.n(be);function xe(e,t){e.prototype=we()(t.prototype),e.prototype.constructor=e,e.__proto__=t}var _e=!0,Ee="Invariant failed";var ke=function(e,t){if(!e)throw _e?new Error(Ee):new Error(Ee+": "+(t||""))},Se=n(134),Ce=function(){return Math.random().toString(36).substring(7).split("").join(".")},Te={INIT:"@@redux/INIT"+Ce(),REPLACE:"@@redux/REPLACE"+Ce(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+Ce()}};function Pe(e){if("object"!==typeof e||null===e)return!1;for(var t=e;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}function Oe(e,t,n){var r;if("function"===typeof t&&"function"===typeof n||"function"===typeof n&&"function"===typeof arguments[3])throw new Error("It looks like you are passing several store enhancers to createStore(). This is not supported. Instead, compose them together to a single function.");if("function"===typeof t&&"undefined"===typeof n&&(n=t,t=void 0),"undefined"!==typeof n){if("function"!==typeof n)throw new Error("Expected the enhancer to be a function.");return n(Oe)(e,t)}if("function"!==typeof e)throw new Error("Expected the reducer to be a function.");var i=e,o=t,a=[],u=a,l=!1;function c(){u===a&&(u=a.slice())}function s(){if(l)throw new Error("You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");return o}function f(e){if("function"!==typeof e)throw new Error("Expected the listener to be a function.");if(l)throw new Error("You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api-reference/store#subscribe(listener) for more details.");var t=!0;return c(),u.push(e),function(){if(t){if(l)throw new Error("You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api-reference/store#subscribe(listener) for more details.");t=!1,c();var n=u.indexOf(e);u.splice(n,1)}}}function d(e){if(!Pe(e))throw new Error("Actions must be plain objects. Use custom middleware for async actions.");if("undefined"===typeof e.type)throw new Error('Actions may not have an undefined "type" property. Have you misspelled a constant?');if(l)throw new Error("Reducers may not dispatch actions.");try{l=!0,o=i(o,e)}finally{l=!1}for(var t=a=u,n=0;n<t.length;n++){(0,t[n])()}return e}return d({type:Te.INIT}),(r={dispatch:d,subscribe:f,getState:s,replaceReducer:function(e){if("function"!==typeof e)throw new Error("Expected the nextReducer to be a function.");i=e,d({type:Te.REPLACE})}})[Se.a]=function(){var e,t=f;return(e={subscribe:function(e){if("object"!==typeof e||null===e)throw new TypeError("Expected the observer to be an object.");function n(){e.next&&e.next(s())}return n(),{unsubscribe:t(n)}}})[Se.a]=function(){return this},e},r}function De(e,t){return function(){return t(e.apply(this,arguments))}}function Ne(e,t){if("function"===typeof e)return De(e,t);if("object"!==typeof e||null===e)throw new Error("bindActionCreators expected an object or a function, instead received "+(null===e?"null":typeof e)+'. Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');var n={};for(var r in e){var i=e[r];"function"===typeof i&&(n[r]=De(i,t))}return n}function Ie(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Re(e,t){var n=Object.keys(e);return Object.getOwnPropertySymbols&&n.push.apply(n,Object.getOwnPropertySymbols(e)),t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n}function je(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Re(n,!0).forEach((function(t){Ie(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Re(n).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Me(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return 0===t.length?function(e){return e}:1===t.length?t[0]:t.reduce((function(e,t){return function(){return e(t.apply(void 0,arguments))}}))}var Ae=n(78),Le=n.n(Ae),Fe=c.a.createContext(null);var ze=function(e){e()},Be=function(){return ze},Ue=null,We={notify:function(){}};var Ve=function(){function e(e,t){this.store=e,this.parentSub=t,this.unsubscribe=null,this.listeners=We,this.handleChangeWrapper=this.handleChangeWrapper.bind(this)}var t=e.prototype;return t.addNestedSub=function(e){return this.trySubscribe(),this.listeners.subscribe(e)},t.notifyNestedSubs=function(){this.listeners.notify()},t.handleChangeWrapper=function(){this.onStateChange&&this.onStateChange()},t.isSubscribed=function(){return Boolean(this.unsubscribe)},t.trySubscribe=function(){this.unsubscribe||(this.unsubscribe=this.parentSub?this.parentSub.addNestedSub(this.handleChangeWrapper):this.store.subscribe(this.handleChangeWrapper),this.listeners=function(){var e=Be(),t=[],n=[];return{clear:function(){n=Ue,t=Ue},notify:function(){var r=t=n;e((function(){for(var e=0;e<r.length;e++)r[e]()}))},get:function(){return n},subscribe:function(e){var r=!0;return n===t&&(n=t.slice()),n.push(e),function(){r&&t!==Ue&&(r=!1,n===t&&(n=t.slice()),n.splice(n.indexOf(e),1))}}}}())},t.tryUnsubscribe=function(){this.unsubscribe&&(this.unsubscribe(),this.unsubscribe=null,this.listeners.clear(),this.listeners=We)},e}();function He(e){var t=e.store,n=e.context,r=e.children,i=Object(l.useMemo)((function(){var e=new Ve(t);return e.onStateChange=e.notifyNestedSubs,{store:t,subscription:e}}),[t]),o=Object(l.useMemo)((function(){return t.getState()}),[t]);Object(l.useEffect)((function(){var e=i.subscription;return e.trySubscribe(),o!==t.getState()&&e.notifyNestedSubs(),function(){e.tryUnsubscribe(),e.onStateChange=null}}),[i,o]);var a=n||Fe;return c.a.createElement(a.Provider,{value:i},r)}He.propTypes={store:Le.a.shape({subscribe:Le.a.func.isRequired,dispatch:Le.a.func.isRequired,getState:Le.a.func.isRequired}),context:Le.a.object,children:Le.a.any};var $e=He;function Ge(){return(Ge=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function qe(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}var Qe=n(133),Ke=n.n(Qe),Ye=n(68),Xe=n.n(Ye),Je=n(276),Ze=[],et=[null,null];function tt(e,t){var n=e[1];return[t.payload,n+1]}var nt=function(){return[null,0]},rt="undefined"!==typeof window&&"undefined"!==typeof window.document&&"undefined"!==typeof window.document.createElement?l.useLayoutEffect:l.useEffect;function it(e,t){void 0===t&&(t={});var n=t,r=n.getDisplayName,i=void 0===r?function(e){return"ConnectAdvanced("+e+")"}:r,o=n.methodName,a=void 0===o?"connectAdvanced":o,u=n.renderCountProp,s=void 0===u?void 0:u,f=n.shouldHandleStateChanges,d=void 0===f||f,p=n.storeKey,h=void 0===p?"store":p,m=n.withRef,v=void 0!==m&&m,g=n.forwardRef,y=void 0!==g&&g,b=n.context,w=void 0===b?Fe:b,x=qe(n,["getDisplayName","methodName","renderCountProp","shouldHandleStateChanges","storeKey","withRef","forwardRef","context"]);Xe()(void 0===s,"renderCountProp is removed. render counting is built into the latest React Dev Tools profiling extension"),Xe()(!v,"withRef is removed. To access the wrapped instance, use a ref on the connected component");Xe()("store"===h,"storeKey has been removed and does not do anything. To use a custom Redux store for specific components, create a custom React context with React.createContext(), and pass the context object to React Redux's Provider and specific components like: <Provider context={MyContext}><ConnectedComponent context={MyContext} /></Provider>. You may also pass a {context : MyContext} option to connect");var _=w;return function(t){var n=t.displayName||t.name||"Component",r=i(n),o=Ge({},x,{getDisplayName:i,methodName:a,renderCountProp:s,shouldHandleStateChanges:d,storeKey:h,displayName:r,wrappedComponentName:n,WrappedComponent:t}),u=x.pure;var f=u?l.useMemo:function(e){return e()};function p(n){var i=Object(l.useMemo)((function(){var e=n.forwardedRef,t=qe(n,["forwardedRef"]);return[n.context,e,t]}),[n]),a=i[0],u=i[1],s=i[2],p=Object(l.useMemo)((function(){return a&&a.Consumer&&Object(Je.isContextConsumer)(c.a.createElement(a.Consumer,null))?a:_}),[a,_]),h=Object(l.useContext)(p),m=Boolean(n.store),v=Boolean(h)&&Boolean(h.store);Xe()(m||v,'Could not find "store" in the context of "'+r+'". Either wrap the root component in a <Provider>, or pass a custom React context provider to <Provider> and the corresponding React context consumer to '+r+" in connect options.");var g=n.store||h.store,y=Object(l.useMemo)((function(){return function(t){return e(t.dispatch,o)}(g)}),[g]),b=Object(l.useMemo)((function(){if(!d)return et;var e=new Ve(g,m?null:h.subscription),t=e.notifyNestedSubs.bind(e);return[e,t]}),[g,m,h]),w=b[0],x=b[1],E=Object(l.useMemo)((function(){return m?h:Ge({},h,{subscription:w})}),[m,h,w]),k=Object(l.useReducer)(tt,Ze,nt),S=k[0][0],C=k[1];if(S&&S.error)throw S.error;var T=Object(l.useRef)(),P=Object(l.useRef)(s),O=Object(l.useRef)(),D=Object(l.useRef)(!1),N=f((function(){return O.current&&s===P.current?O.current:y(g.getState(),s)}),[g,S,s]);rt((function(){P.current=s,T.current=N,D.current=!1,O.current&&(O.current=null,x())})),rt((function(){if(d){var e=!1,t=null,n=function(){if(!e){var n,r,i=g.getState();try{n=y(i,P.current)}catch(e){r=e,t=e}r||(t=null),n===T.current?D.current||x():(T.current=n,O.current=n,D.current=!0,C({type:"STORE_UPDATED",payload:{latestStoreState:i,error:r}}))}};w.onStateChange=n,w.trySubscribe(),n();return function(){if(e=!0,w.tryUnsubscribe(),w.onStateChange=null,t)throw t}}}),[g,w,y]);var I=Object(l.useMemo)((function(){return c.a.createElement(t,Ge({},N,{ref:u}))}),[u,t,N]);return Object(l.useMemo)((function(){return d?c.a.createElement(p.Provider,{value:E},I):I}),[p,I,E])}var m=u?c.a.memo(p):p;if(m.WrappedComponent=t,m.displayName=r,y){var v=c.a.forwardRef((function(e,t){return c.a.createElement(m,Ge({},e,{forwardedRef:t}))}));return v.displayName=r,v.WrappedComponent=t,Ke()(v,t)}return Ke()(m,t)}}var ot=Object.prototype.hasOwnProperty;function at(e,t){return e===t?0!==e||0!==t||1/e===1/t:e!==e&&t!==t}function ut(e,t){if(at(e,t))return!0;if("object"!==typeof e||null===e||"object"!==typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(var i=0;i<n.length;i++)if(!ot.call(t,n[i])||!at(e[n[i]],t[n[i]]))return!1;return!0}function lt(e){return function(t,n){var r=e(t,n);function i(){return r}return i.dependsOnOwnProps=!1,i}}function ct(e){return null!==e.dependsOnOwnProps&&void 0!==e.dependsOnOwnProps?Boolean(e.dependsOnOwnProps):1!==e.length}function st(e,t){return function(t,n){n.displayName;var r=function(e,t){return r.dependsOnOwnProps?r.mapToProps(e,t):r.mapToProps(e)};return r.dependsOnOwnProps=!0,r.mapToProps=function(t,n){r.mapToProps=e,r.dependsOnOwnProps=ct(e);var i=r(t,n);return"function"===typeof i&&(r.mapToProps=i,r.dependsOnOwnProps=ct(i),i=r(t,n)),i},r}}var ft=[function(e){return"function"===typeof e?st(e):void 0},function(e){return e?void 0:lt((function(e){return{dispatch:e}}))},function(e){return e&&"object"===typeof e?lt((function(t){return Ne(e,t)})):void 0}];var dt=[function(e){return"function"===typeof e?st(e):void 0},function(e){return e?void 0:lt((function(){return{}}))}];function pt(e,t,n){return Ge({},n,{},e,{},t)}var ht=[function(e){return"function"===typeof e?function(e){return function(t,n){n.displayName;var r,i=n.pure,o=n.areMergedPropsEqual,a=!1;return function(t,n,u){var l=e(t,n,u);return a?i&&o(l,r)||(r=l):(a=!0,r=l),r}}}(e):void 0},function(e){return e?void 0:function(){return pt}}];function mt(e,t,n,r){return function(i,o){return n(e(i,o),t(r,o),o)}}function vt(e,t,n,r,i){var o,a,u,l,c,s=i.areStatesEqual,f=i.areOwnPropsEqual,d=i.areStatePropsEqual,p=!1;function h(i,p){var h=!f(p,a),m=!s(i,o);return o=i,a=p,h&&m?(u=e(o,a),t.dependsOnOwnProps&&(l=t(r,a)),c=n(u,l,a)):h?(e.dependsOnOwnProps&&(u=e(o,a)),t.dependsOnOwnProps&&(l=t(r,a)),c=n(u,l,a)):m?function(){var t=e(o,a),r=!d(t,u);return u=t,r&&(c=n(u,l,a)),c}():c}return function(i,s){return p?h(i,s):(u=e(o=i,a=s),l=t(r,a),c=n(u,l,a),p=!0,c)}}function gt(e,t){var n=t.initMapStateToProps,r=t.initMapDispatchToProps,i=t.initMergeProps,o=qe(t,["initMapStateToProps","initMapDispatchToProps","initMergeProps"]),a=n(e,o),u=r(e,o),l=i(e,o);return(o.pure?vt:mt)(a,u,l,e,o)}function yt(e,t,n){for(var r=t.length-1;r>=0;r--){var i=t[r](e);if(i)return i}return function(t,r){throw new Error("Invalid value of type "+typeof e+" for "+n+" argument when connecting component "+r.wrappedComponentName+".")}}function bt(e,t){return e===t}var wt=function(e){var t=void 0===e?{}:e,n=t.connectHOC,r=void 0===n?it:n,i=t.mapStateToPropsFactories,o=void 0===i?dt:i,a=t.mapDispatchToPropsFactories,u=void 0===a?ft:a,l=t.mergePropsFactories,c=void 0===l?ht:l,s=t.selectorFactory,f=void 0===s?gt:s;return function(e,t,n,i){void 0===i&&(i={});var a=i,l=a.pure,s=void 0===l||l,d=a.areStatesEqual,p=void 0===d?bt:d,h=a.areOwnPropsEqual,m=void 0===h?ut:h,v=a.areStatePropsEqual,g=void 0===v?ut:v,y=a.areMergedPropsEqual,b=void 0===y?ut:y,w=qe(a,["pure","areStatesEqual","areOwnPropsEqual","areStatePropsEqual","areMergedPropsEqual"]),x=yt(e,o,"mapStateToProps"),_=yt(t,u,"mapDispatchToProps"),E=yt(n,c,"mergeProps");return r(f,Ge({methodName:"connect",getDisplayName:function(e){return"Connect("+e+")"},shouldHandleStateChanges:Boolean(e),initMapStateToProps:x,initMapDispatchToProps:_,initMergeProps:E,pure:s,areStatesEqual:p,areOwnPropsEqual:m,areStatePropsEqual:g,areMergedPropsEqual:b},w))}}();function xt(){var e=Object(l.useContext)(Fe);return Xe()(e,"could not find react-redux context value; please ensure the component is wrapped in a <Provider>"),e}function _t(e){void 0===e&&(e=Fe);var t=e===Fe?xt:function(){return Object(l.useContext)(e)};return function(){return t().store}}var Et=_t();!function(e){void 0===e&&(e=Fe);var t=e===Fe?Et:_t(e)}();var kt="undefined"!==typeof window?l.useLayoutEffect:l.useEffect,St=function(e,t){return e===t};var Ct;!function(e){void 0===e&&(e=Fe);var t=e===Fe?xt:function(){return Object(l.useContext)(e)}}();Ct=s.unstable_batchedUpdates,ze=Ct;var Tt=function(e){var t=e.top,n=e.right,r=e.bottom,i=e.left;return{top:t,right:n,bottom:r,left:i,width:n-i,height:r-t,x:i,y:t,center:{x:(n+i)/2,y:(r+t)/2}}},Pt=function(e,t){return{top:e.top-t.top,left:e.left-t.left,bottom:e.bottom+t.bottom,right:e.right+t.right}},Ot=function(e,t){return{top:e.top+t.top,left:e.left+t.left,bottom:e.bottom-t.bottom,right:e.right-t.right}},Dt={top:0,right:0,bottom:0,left:0},Nt=function(e){var t=e.borderBox,n=e.margin,r=void 0===n?Dt:n,i=e.border,o=void 0===i?Dt:i,a=e.padding,u=void 0===a?Dt:a,l=Tt(Pt(t,r)),c=Tt(Ot(t,o)),s=Tt(Ot(c,u));return{marginBox:l,borderBox:Tt(t),paddingBox:c,contentBox:s,margin:r,border:o,padding:u}},It=function(e){var t=e.slice(0,-2);if("px"!==e.slice(-2))return 0;var n=Number(t);return isNaN(n)&&ke(!1),n},Rt=function(e,t){var n,r,i=e.borderBox,o=e.border,a=e.margin,u=e.padding,l=(r=t,{top:(n=i).top+r.y,left:n.left+r.x,bottom:n.bottom+r.y,right:n.right+r.x});return Nt({borderBox:l,border:o,margin:a,padding:u})},jt=function(e,t){return void 0===t&&(t={x:window.pageXOffset,y:window.pageYOffset}),Rt(e,t)},Mt=function(e,t){var n={top:It(t.marginTop),right:It(t.marginRight),bottom:It(t.marginBottom),left:It(t.marginLeft)},r={top:It(t.paddingTop),right:It(t.paddingRight),bottom:It(t.paddingBottom),left:It(t.paddingLeft)},i={top:It(t.borderTopWidth),right:It(t.borderRightWidth),bottom:It(t.borderBottomWidth),left:It(t.borderLeftWidth)};return Nt({borderBox:e,margin:n,padding:r,border:i})},At=function(e){var t=e.getBoundingClientRect(),n=window.getComputedStyle(e);return Mt(t,n)};function Lt(e,t){if(e.length!==t.length)return!1;for(var n=0;n<e.length;n++)if(e[n]!==t[n])return!1;return!0}var Ft=function(e,t){var n;void 0===t&&(t=Lt);var r,i=[],o=!1;return function(){for(var a=[],u=0;u<arguments.length;u++)a[u]=arguments[u];return o&&n===this&&t(a,i)?r:(r=e.apply(this,a),o=!0,n=this,i=a,r)}},zt=n(278),Bt=n.n(zt),Ut=n(106),Wt=n.n(Ut),Vt=n(135),Ht=n.n(Vt),$t=function(e){var t=[],n=null,r=function(){for(var r=arguments.length,i=new Array(r),o=0;o<r;o++)i[o]=arguments[o];t=i,n||(n=requestAnimationFrame((function(){n=null,e.apply(void 0,t)})))};return r.cancel=function(){n&&(cancelAnimationFrame(n),n=null)},r};n(279);function Gt(e){return-1!==e.message.indexOf("Invariant failed")}var qt=function(e){function t(){for(var t,n=arguments.length,r=new Array(n),i=0;i<n;i++)r[i]=arguments[i];return(t=e.call.apply(e,[this].concat(r))||this).onError=void 0,t.setOnError=function(e){t.onError=e},t.onFatalError=function(e){t.onError&&t.onError(),Gt(e)&&t.setState({})},t}xe(t,e);var n=t.prototype;return n.componentDidMount=function(){window.addEventListener("error",this.onFatalError)},n.componentWillUnmount=function(){window.removeEventListener("error",this.onFatalError)},n.componentDidCatch=function(e){if(this.onFatalError(e),!Gt(e))throw e},n.render=function(){return this.props.children(this.setOnError)},t}(c.a.Component),Qt={x:0,y:0},Kt=function(e,t){return{x:e.x+t.x,y:e.y+t.y}},Yt=function(e,t){return{x:e.x-t.x,y:e.y-t.y}},Xt=function(e,t){return e.x===t.x&&e.y===t.y},Jt=function(e){return{x:0!==e.x?-e.x:0,y:0!==e.y?-e.y:0}},Zt=function(e,t,n){var r;return void 0===n&&(n=0),(r={})[e]=t,r["x"===e?"y":"x"]=n,r},en=function(e,t){return Math.sqrt(Math.pow(t.x-e.x,2)+Math.pow(t.y-e.y,2))},tn=function(e,t){return Math.min.apply(Math,t.map((function(t){return en(e,t)})))},nn=function(e){return function(t){return{x:e(t.x),y:e(t.y)}}},rn=function(e,t){return{top:e.top+t.y,left:e.left+t.x,bottom:e.bottom+t.y,right:e.right+t.x}},on=function(e){return[{x:e.left,y:e.top},{x:e.right,y:e.top},{x:e.left,y:e.bottom},{x:e.right,y:e.bottom}]},an=function(e,t){return t&&t.shouldClipSubject?function(e,t){var n=Tt({top:Math.max(t.top,e.top),right:Math.min(t.right,e.right),bottom:Math.min(t.bottom,e.bottom),left:Math.max(t.left,e.left)});return n.width<=0||n.height<=0?null:n}(t.pageMarginBox,e):Tt(e)},un=function(e){var t=e.page,n=e.withPlaceholder,r=e.axis,i=e.frame,o=function(e,t,n){var r;return n&&n.increasedBy?me({},e,((r={})[t.end]=e[t.end]+n.increasedBy[t.line],r)):e}(function(e,t){return t?rn(e,t.scroll.diff.displacement):e}(t.marginBox,i),r,n);return{page:t,withPlaceholder:n,active:an(o,i)}},ln=function(e,t){e.frame||ke(!1);var n=e.frame,r=Yt(t,n.scroll.initial),i=Jt(r),o=me({},n,{scroll:{initial:n.scroll.initial,current:t,diff:{value:r,displacement:i},max:n.scroll.max}});return me({},e,{frame:o,subject:un({page:e.subject.page,withPlaceholder:e.subject.withPlaceholder,axis:e.axis,frame:o})})},cn=function(e){},sn=function(e){},fn=function(e){var t=e.merge,n=e.destination;return n?n.droppableId:t?t.combine.droppableId:null};function dn(e){return Bt()(e)}function pn(e,t){if(e.findIndex)return e.findIndex(t);for(var n=0;n<e.length;n++)if(t(e[n]))return n;return-1}function hn(e,t){if(e.find)return e.find(t);var n=pn(e,t);return-1!==n?e[n]:void 0}var mn=Ft((function(e){return e.reduce((function(e,t){return e[t.descriptor.id]=t,e}),{})})),vn=Ft((function(e){return e.reduce((function(e,t){return e[t.descriptor.id]=t,e}),{})})),gn=Ft((function(e){return dn(e)})),yn=Ft((function(e){return dn(e)})),bn=function(e,t){return function(n){return e<=n&&n<=t}},wn=function(e){var t=bn(e.top,e.bottom),n=bn(e.left,e.right);return function(e){return t(e.y)&&t(e.y)&&n(e.x)&&n(e.x)}},xn=Ft((function(e,t){return yn(t).filter((function(t){return e===t.descriptor.droppableId})).sort((function(e,t){return e.descriptor.index-t.descriptor.index}))})),_n={direction:"vertical",line:"y",crossAxisLine:"x",start:"top",end:"bottom",size:"height",crossAxisStart:"left",crossAxisEnd:"right",crossAxisSize:"width"},En={direction:"horizontal",line:"x",crossAxisLine:"y",start:"left",end:"right",size:"width",crossAxisStart:"top",crossAxisEnd:"bottom",crossAxisSize:"height"},kn=function(e,t){return e===_n?"down"===t.vertical:"right"===t.horizontal},Sn=function(e,t){return Boolean(t.wasDisplaced[e])},Cn=function(e){var t=e.displaced,n=e.onLift,r=e.combineWith,i=e.displacedBy,o=Boolean(t[r]);return Sn(r,n)?o?Qt:Jt(i.point):o?i.point:Qt},Tn=function(e,t,n){return n?e!==n.combine.draggableId?t:n.whenEntered:t},Pn=function(e){var t=e.pageBorderBoxCenterWithDroppableScrollChange,n=e.previousImpact,r=e.destination,i=e.insideDestinationWithoutDraggable,o=e.userDirection,a=e.onLift;if(!r.isCombineEnabled)return null;var u=r.axis,l=n.movement.map,c=n.movement.displacedBy,s=n.merge,f=hn(i,(function(e){var n=e.descriptor.id,r=Cn({displaced:l,onLift:a,combineWith:n,displacedBy:c});return function(e){var t=e.id,n=e.currentCenter,r=e.axis,i=e.borderBox,o=e.displaceBy,a=e.currentUserDirection,u=e.oldMerge,l=i[r.start]+o[r.line],c=i[r.end]+o[r.line],s=.666*i[r.size],f=Tn(t,a,u),d=kn(r,f),p=n[r.line];return d?bn(l,l+s)(p):bn(c-s,c)(p)}({id:n,currentCenter:t,axis:u,borderBox:e.page.borderBox,displaceBy:r,currentUserDirection:o,oldMerge:s})}));return f?me({},n,{destination:null,merge:{whenEntered:Tn(f.descriptor.id,o,s),combine:{draggableId:f.descriptor.id,droppableId:r.descriptor.id}}}):null},On=function(e){var t=bn(e.top,e.bottom),n=bn(e.left,e.right);return function(r){if(t(r.top)&&t(r.bottom)&&n(r.left)&&n(r.right))return!0;var i=t(r.top)||t(r.bottom),o=n(r.left)||n(r.right);if(i&&o)return!0;var a=r.top<e.top&&r.bottom>e.bottom,u=r.left<e.left&&r.right>e.right;return!(!a||!u)||(a&&o||u&&i)}},Dn=function(e){var t=bn(e.top,e.bottom),n=bn(e.left,e.right);return function(e){return t(e.top)&&t(e.bottom)&&n(e.left)&&n(e.right)}},Nn=function(e){var t=e.target,n=e.destination,r=e.viewport,i=e.withDroppableDisplacement,o=e.isVisibleThroughFrameFn,a=i?function(e,t){var n=t.frame?t.frame.scroll.diff.displacement:Qt;return rn(e,n)}(t,n):t;return function(e,t,n){return!!t.subject.active&&n(t.subject.active)(e)}(a,n,o)&&function(e,t,n){return n(t)(e)}(a,r,o)},In=function(e){return Nn(me({},e,{isVisibleThroughFrameFn:On}))},Rn=function(e){return Nn(me({},e,{isVisibleThroughFrameFn:Dn}))},jn=function(e){var t=e.draggable,n=e.destination,r=e.previousImpact,i=e.viewport,o=e.onLift,a=e.forceShouldAnimate,u=t.descriptor.id,l=r.movement.map,c=function(e,t){var n=e.page.marginBox;if(!Sn(e.descriptor.id,t))return n;var r={top:t.displacedBy.point.y,right:0,bottom:0,left:t.displacedBy.point.x};return Tt(Pt(n,r))}(t,o),s=In({target:c,destination:n,viewport:i,withDroppableDisplacement:!0});return{draggableId:u,isVisible:s,shouldAnimate:function(e,t,n){return"boolean"===typeof e?e:!!t&&(!n||n.shouldAnimate)}(a,s,l[u])}},Mn=Ft((function(e){return e.reduce((function(e,t){return e[t.draggableId]=t,e}),{})})),An=Ft((function(e,t){var n=t[e.line];return{value:n,point:Zt(e.line,n)}})),Ln={displaced:[],map:{},displacedBy:{point:Qt,value:0}},Fn={movement:Ln,destination:null,merge:null},zn=Ft((function(e,t){return t.filter((function(t){return t.descriptor.id!==e.descriptor.id}))})),Bn=function(e){var t=e.pageBorderBoxCenter,n=e.draggable,r=e.draggables,i=e.droppables,o=e.previousImpact,a=e.viewport,u=e.userDirection,l=e.onLift,c=function(e){var t=e.target,n=e.droppables,r=hn(gn(n),(function(e){if(!e.isEnabled)return!1;var n=e.subject.active;return!!n&&wn(n)(t)}));return r?r.descriptor.id:null}({target:t,droppables:i});if(!c)return Fn;var s=i[c],f=xn(s.descriptor.id,r),d=zn(n,f),p=function(e,t){var n=e.frame;return n?Kt(t,n.scroll.diff.value):t}(s,t),h=Pn({pageBorderBoxCenterWithDroppableScrollChange:p,previousImpact:o,destination:s,insideDestinationWithoutDraggable:d,userDirection:u,onLift:l});return h||function(e){var t=e.pageBorderBoxCenterWithDroppableScrollChange,n=e.draggable,r=e.destination,i=e.insideDestinationWithoutDraggable,o=e.previousImpact,a=e.viewport,u=e.userDirection,l=e.onLift,c=r.axis,s=kn(r.axis,u),f=An(r.axis,n.displaceBy),d=t[c.line],p=f.value,h=i.filter((function(e){var t=e.page.borderBox,n=t[c.start],r=t[c.end],i=Sn(e.descriptor.id,l);return s?i?d<n:d<n+p:i?d<=r-p:d<=r})).map((function(e){return jn({draggable:e,destination:r,previousImpact:o,viewport:a.frame,onLift:l})})),m=i.length-h.length;return{movement:{displacedBy:f,displaced:h,map:Mn(h)},destination:{droppableId:r.descriptor.id,index:m},merge:null}}({pageBorderBoxCenterWithDroppableScrollChange:p,destination:s,draggable:n,insideDestinationWithoutDraggable:d,previousImpact:o,viewport:a,userDirection:u,onLift:l})},Un=function(e){var t,n=e.draggable,r=e.home,i=e.draggables,o=e.viewport,a=An(r.axis,n.displaceBy),u=xn(r.descriptor.id,i).slice(n.descriptor.index+1),l={displacedBy:a,wasDisplaced:u.reduce((function(e,t){return e[t.descriptor.id]=!0,e}),{})},c=u.map((function(e){return jn({draggable:e,destination:r,previousImpact:Fn,viewport:o.frame,forceShouldAnimate:!1,onLift:l})}));return{impact:{movement:{displaced:c,map:Mn(c),displacedBy:a},destination:(t=n.descriptor,{index:t.index,droppableId:t.droppableId}),merge:null},onLift:l}},Wn=function(e){var t=e.draggable,n=e.offset,r=e.initialWindowScroll,i=Rt(t.client,n),o=jt(i,r);return me({},t,{placeholder:me({},t.placeholder,{client:i}),client:i,page:o})},Vn=function(e){var t=e.updatedDroppables,n=e.criticalId,r=e.existing,i=e.additions,o=e.removals,a=e.viewport,u=function(e){var t=e.existing,n=e.droppables,r=e.additions,i=e.removals,o=e.viewport,a={};return gn(n).forEach((function(e){var n=e.axis,u=xn(e.descriptor.id,t),l={},c=function(e,t){var n=l[e];l[e]=n?{indexChange:n.indexChange+t.indexChange,offset:Kt(n.offset,t.offset)}:t},s=vn(i.map((function(e){var n=t[e];return n||ke(!1),n})).filter((function(t){return t.descriptor.droppableId===e.descriptor.id}))),f=u.filter((function(e,t){if(!Boolean(s[e.descriptor.id]))return!0;var r=Jt(Zt(n.line,e.displaceBy[n.line]));return u.slice(t).forEach((function(e){s[e.descriptor.id]||c(e.descriptor.id,{indexChange:-1,offset:r})})),!1})),d=r.filter((function(t){return t.descriptor.droppableId===e.descriptor.id})),p=f.slice(0);d.forEach((function(e){p.splice(e.descriptor.index,0,e)}));var h=vn(d);p.forEach((function(e,t){if(Boolean(h[e.descriptor.id])){var r=Zt(n.line,e.client.marginBox[n.size]);p.slice(t).forEach((function(e){h[e.descriptor.id]||c(e.descriptor.id,{indexChange:1,offset:r})}))}})),p.forEach((function(e){if(!h[e.descriptor.id]){var t=l[e.descriptor.id];if(t){var n=Wn({draggable:e,offset:t.offset,initialWindowScroll:o.scroll.initial}),r=e.descriptor.index+t.indexChange,i=me({},n,{descriptor:me({},e.descriptor,{index:r})});a[n.descriptor.id]=i}}}))})),me({},t,a)}({droppables:t,existing:r,additions:i,removals:o,viewport:a}),l=u[n],c=t[l.descriptor.droppableId],s=function(e){var t=e.additions,n=e.dragging,r=e.home,i=e.viewport,o=An(r.axis,n.displaceBy);return t.map((function(e){return e.descriptor.droppableId!==r.descriptor.id?e:e.descriptor.index<n.descriptor.index?e:Wn({draggable:e,offset:o.point,initialWindowScroll:i.scroll.initial})}))}({additions:function(e){var t=e.additions,n=e.updatedDroppables,r=e.viewport,i=r.scroll.diff.value;return t.map((function(e){var t=e.descriptor.droppableId,o=n[t].frame;o||ke(!1);var a=o.scroll.diff.value,u=Kt(i,a);return Wn({draggable:e,offset:u,initialWindowScroll:r.scroll.initial})}))}({additions:i,updatedDroppables:t,viewport:a}),dragging:l,home:c,viewport:a}),f=me({},u,vn(s));return o.forEach((function(e){delete f[e]})),f},Hn=function(e){var t=e.scrollHeight,n=e.scrollWidth,r=e.height,i=e.width,o=Yt({x:n,y:t},{x:i,y:r});return{x:Math.max(0,o.x),y:Math.max(0,o.y)}},$n=function(e){var t=e.descriptor,n=e.isEnabled,r=e.isCombineEnabled,i=e.isFixedOnPage,o=e.direction,a=e.client,u=e.page,l=e.closest,c=function(){if(!l)return null;var e=l.scrollSize,t=l.client,n=Hn({scrollHeight:e.scrollHeight,scrollWidth:e.scrollWidth,height:t.paddingBox.height,width:t.paddingBox.width});return{pageMarginBox:l.page.marginBox,frameClient:t,scrollSize:e,shouldClipSubject:l.shouldClipSubject,scroll:{initial:l.scroll,current:l.scroll,max:n,diff:{value:Qt,displacement:Qt}}}}(),s="vertical"===o?_n:En;return{descriptor:t,isCombineEnabled:r,isFixedOnPage:i,axis:s,isEnabled:n,client:a,page:u,frame:c,subject:un({page:u,withPlaceholder:null,axis:s,frame:c})}},Gn=function(e,t){return e.descriptor.droppableId===t.descriptor.id},qn=function(e,t){return me({},e,{scroll:me({},e.scroll,{max:t})})},Qn=function(e,t,n){var r=e.frame;Gn(t,e)&&ke(!1),e.subject.withPlaceholder&&ke(!1);var i=An(e.axis,t.displaceBy).point,o=function(e,t,n){var r=e.axis,i=e.subject.page.contentBox[r.size],o=xn(e.descriptor.id,n).reduce((function(e,t){return e+t.client.marginBox[r.size]}),0)+t[r.line]-i;return o<=0?null:Zt(r.line,o)}(e,i,n),a={placeholderSize:i,increasedBy:o,oldFrameMaxScroll:e.frame?e.frame.scroll.max:null};if(!r)return me({},e,{subject:un({page:e.subject.page,withPlaceholder:a,axis:e.axis,frame:e.frame})});var u=o?Kt(r.scroll.max,o):r.scroll.max,l=qn(r,u);return me({},e,{subject:un({page:e.subject.page,withPlaceholder:a,axis:e.axis,frame:l}),frame:l})},Kn=function(e){var t=e.subject.withPlaceholder;t||ke(!1);var n=e.frame;if(!n)return me({},e,{subject:un({page:e.subject.page,axis:e.axis,frame:null,withPlaceholder:null})});var r=t.oldFrameMaxScroll;r||ke(!1);var i=qn(n,r);return me({},e,{subject:un({page:e.subject.page,axis:e.axis,frame:i,withPlaceholder:null}),frame:i})},Yn=function(e){var t=e.frame;return t||ke(!1),t},Xn=function(e,t){var n;return me({},e,((n={})[t.descriptor.id]=t,n))},Jn=function(e){var t=e.draggable,n=e.draggables,r=e.droppables,i=e.previousImpact,o=e.impact,a=function(e){var t=e.previousImpact,n=e.impact,r=e.droppables,i=fn(t),o=fn(n);if(!i)return r;if(i===o)return r;var a=r[i];if(!a.subject.withPlaceholder)return r;var u=Kn(a);return Xn(r,u)}({previousImpact:i,impact:o,droppables:r}),u=fn(o);if(!u)return a;var l=r[u];if(Gn(t,l))return a;if(l.subject.withPlaceholder)return a;var c=Qn(l,t,n);return Xn(a,c)},Zn=function(e){var t,n,r=e.state,i=e.published;cn("Processing dynamic changes");var o=function(e){var t=e.modified,n=e.existing,r=e.viewport;if(!t.length)return n;var i=t.map((function(e){var t=n[e.descriptor.id];t||ke(!1);var i,o,a=Boolean(t.subject.withPlaceholder)?Kn(t):t,u=a.client,l=e.client,c=Yn(a),s=Yn(e),f=Nt({borderBox:(a.axis,i=u.borderBox,o=l.borderBox,{top:i.top,left:i.left,right:i.left+o.width,bottom:i.top+o.height}),margin:u.margin,border:u.border,padding:u.padding}),d={client:c.frameClient,page:jt(c.frameClient,r.scroll.initial),shouldClipSubject:c.shouldClipSubject,scrollSize:s.scrollSize,scroll:c.scroll.initial},p=$n({descriptor:e.descriptor,isEnabled:e.isEnabled,isCombineEnabled:e.isCombineEnabled,isFixedOnPage:e.isFixedOnPage,direction:e.axis.direction,client:f,page:jt(f,r.scroll.initial),closest:d});return ln(p,s.scroll.current)}));return me({},n,mn(i))}({modified:i.modified,existing:r.dimensions.droppables,viewport:r.viewport}),a=Vn({updatedDroppables:o,criticalId:r.critical.draggable.id,existing:r.dimensions.draggables,additions:i.additions,removals:i.removals,viewport:r.viewport}),u={draggable:a[r.critical.draggable.id].descriptor,droppable:o[r.critical.droppable.id].descriptor},l=r.dimensions.draggables[u.draggable.id],c=a[u.draggable.id],s={draggables:a,droppables:Jn({draggable:c,draggables:a,droppables:o,previousImpact:r.impact,impact:r.impact})},f=function(e){var t=e.initial,n=e.current,r=e.oldClientBorderBoxCenter,i=e.newClientBorderBoxCenter,o=e.viewport,a=Yt(i,r),u=function(){var e={selection:Kt(t.client.selection,a),borderBoxCenter:i,offset:Qt};return{client:e,page:{selection:Kt(e.selection,o.scroll.initial),borderBoxCenter:Kt(e.selection,o.scroll.initial)}}}();return{current:function(){var e=Jt(a),t=Kt(n.client.offset,e),r={selection:Kt(u.client.selection,t),borderBoxCenter:Kt(u.client.borderBoxCenter,t),offset:t},i={selection:Kt(r.selection,o.scroll.current),borderBoxCenter:Kt(r.borderBoxCenter,o.scroll.current)};return Xt(n.client.borderBoxCenter,r.borderBoxCenter)||ke(!1),{client:r,page:i}}(),initial:u}}({initial:r.initial,current:r.current,oldClientBorderBoxCenter:l.client.borderBox.center,newClientBorderBoxCenter:c.client.borderBox.center,viewport:r.viewport}),d=f.initial,p=f.current,h=Un({draggable:c,home:s.droppables[u.droppable.id],draggables:s.draggables,viewport:r.viewport}),m=h.impact,v=h.onLift,g=function(e){var t=e.movement.displaced;if(!t.length)return e;var n=t.map((function(e){return e.isVisible&&e.shouldAnimate?me({},e,{shouldAnimate:!1}):e}));return me({},e,{movement:me({},e.movement,{displaced:n,map:Mn(n)})})}(Bn({pageBorderBoxCenter:p.page.borderBoxCenter,draggable:c,draggables:s.draggables,droppables:s.droppables,previousImpact:m,viewport:r.viewport,userDirection:r.userDirection,onLift:v}));Boolean("SNAP"===r.movementMode&&!fn(g))&&ke(!1),sn("Processing dynamic changes");var y=me({phase:"DRAGGING"},r,((t={}).phase="DRAGGING",t.critical=u,t.current=p,t.initial=d,t.impact=g,t.dimensions=s,t.onLift=v,t.onLiftImpact=m,t.forceShouldAnimate=!1,t));return"COLLECTING"===r.phase?y:me({phase:"DROP_PENDING"},y,((n={}).phase="DROP_PENDING",n.reason=r.reason,n.isWaiting=!1,n))},er={vertical:"down",horizontal:"right"},tr={vertical:"up",horizontal:"left"},nr=function(e){var t=e.isMovingForward,n=e.isInHomeList,r=e.draggable,i=e.draggables,o=e.destination,a=e.insideDestination,u=e.previousImpact,l=e.onLift,c=u.destination?function(e){var t=e.isMovingForward,n=e.isInHomeList,r=e.draggable,i=e.insideDestination,o=e.location,a=i.slice(),u=o.index;!n&&a.splice(o.index,0,r);var l=t?u+1:u-1;return l<0?null:l>a.length-1?null:{proposedIndex:l,modifyDisplacement:!0}}({isMovingForward:t,isInHomeList:n,draggable:r,location:u.destination,insideDestination:a}):u.merge?function(e){var t=e.isMovingForward,n=e.destination,r=e.previousImpact,i=e.draggables,o=e.merge,a=e.onLift;if(!n.isCombineEnabled)return null;var u=r.movement,l=o.combine.draggableId,c=i[l].descriptor.index;return Sn(l,a)?u.map[l]?t?{proposedIndex:c,modifyDisplacement:!0}:{proposedIndex:c-1,modifyDisplacement:!1}:t?{proposedIndex:c,modifyDisplacement:!1}:{proposedIndex:c-1,modifyDisplacement:!0}:Boolean(u.map[l])?t?{proposedIndex:c+1,modifyDisplacement:!0}:{proposedIndex:c,modifyDisplacement:!1}:t?{proposedIndex:c+1,modifyDisplacement:!1}:{proposedIndex:c,modifyDisplacement:!0}}({isMovingForward:t,destination:o,previousImpact:u,draggables:i,merge:u.merge,onLift:l}):null;if(null==c)return null;var s=c.proposedIndex,f=c.modifyDisplacement,d=An(o.axis,r.displaceBy),p=function(){var e=u.movement.displaced;return f?t?function(e){return e.slice(1)}(e):function(e,t){return[{draggableId:e.descriptor.id,isVisible:!0,shouldAnimate:!0}].concat(t)}(zn(r,a)[s],e):e}();return{movement:{displacedBy:d,displaced:p,map:Mn(p)},destination:{droppableId:o.descriptor.id,index:s},merge:null}},rr=function(e,t){return t.margin[e.start]+t.borderBox[e.size]/2},ir=function(e,t,n){return t[e.crossAxisStart]+n.margin[e.crossAxisStart]+n.borderBox[e.crossAxisSize]/2},or=function(e){var t=e.axis,n=e.moveRelativeTo,r=e.isMoving;return Zt(t.line,n.marginBox[t.end]+rr(t,r),ir(t,n.marginBox,r))},ar=function(e){var t=e.axis,n=e.moveRelativeTo,r=e.isMoving;return Zt(t.line,n.marginBox[t.start]-function(e,t){return t.margin[e.end]+t.borderBox[e.size]/2}(t,r),ir(t,n.marginBox,r))},ur=function(e){var t=e.movement,n=e.draggable,r=e.draggables,i=e.droppable,o=e.onLift,a=xn(i.descriptor.id,r),u=n.page,l=i.axis;if(!a.length)return function(e){var t=e.axis,n=e.moveInto,r=e.isMoving;return Zt(t.line,n.contentBox[t.start]+rr(t,r),ir(t,n.contentBox,r))}({axis:l,moveInto:i.page,isMoving:u});var c=t.displaced,s=t.displacedBy;if(c.length){var f=r[c[0].draggableId];if(Sn(f.descriptor.id,o))return ar({axis:l,moveRelativeTo:f.page,isMoving:u});var d=Rt(f.page,s.point);return ar({axis:l,moveRelativeTo:d,isMoving:u})}var p=a[a.length-1];if(p.descriptor.id===n.descriptor.id)return u.borderBox.center;if(Sn(p.descriptor.id,o)){var h=Rt(p.page,Jt(o.displacedBy.point));return or({axis:l,moveRelativeTo:h,isMoving:u})}return or({axis:l,moveRelativeTo:p.page,isMoving:u})},lr=function(e,t){var n=e.frame;return n?Kt(t,n.scroll.diff.displacement):t},cr=function(e){var t=e.impact,n=e.draggable,r=e.droppable,i=e.draggables,o=e.onLift,a=t.merge,u=t.destination,l=n.page.borderBox.center;return r?u?ur({movement:t.movement,draggable:n,draggables:i,droppable:r,onLift:o}):a?function(e){var t=e.combine,n=e.onLift,r=e.movement,i=e.draggables,o=t.draggableId,a=i[o].page.borderBox.center,u=Cn({displaced:r.map,onLift:n,combineWith:o,displacedBy:r.displacedBy});return Kt(a,u)}({movement:t.movement,combine:a.combine,draggables:i,onLift:o}):l:l},sr=function(e){var t=cr(e),n=e.droppable;return n?lr(n,t):t},fr=function(e,t){var n=Yt(t,e.scroll.initial),r=Jt(n);return{frame:Tt({top:t.y,bottom:t.y+e.frame.height,left:t.x,right:t.x+e.frame.width}),scroll:{initial:e.scroll.initial,max:e.scroll.max,current:t,diff:{value:n,displacement:r}}}},dr=function(e,t){return me({},e,{movement:me({},e.movement,{displaced:t,map:Mn(t)})})},pr=function(e){var t=e.pageBorderBoxCenter,n=e.draggable,r=function(e,t){return Kt(e.scroll.diff.displacement,t)}(e.viewport,t),i=Yt(r,n.page.borderBox.center);return Kt(n.client.borderBox.center,i)},hr=function(e){var t=e.draggable,n=e.destination,r=e.newPageBorderBoxCenter,i=e.viewport,o=e.withDroppableDisplacement,a=e.onlyOnMainAxis,u=void 0!==a&&a,l=Yt(r,t.page.borderBox.center),c={target:rn(t.page.borderBox,l),destination:n,withDroppableDisplacement:o,viewport:i};return u?function(e){return Nn(me({},e,{isVisibleThroughFrameFn:(t=e.destination.axis,function(e){var n=bn(e.top,e.bottom),r=bn(e.left,e.right);return function(e){return t===_n?n(e.top)&&n(e.bottom):r(e.left)&&r(e.right)}})}));var t}(c):Rn(c)},mr=function(e){var t=e.isMovingForward,n=e.draggable,r=e.destination,i=e.draggables,o=e.previousImpact,a=e.viewport,u=e.previousPageBorderBoxCenter,l=e.previousClientSelection,c=e.onLift;if(!r.isEnabled)return null;var s=xn(r.descriptor.id,i),f=Gn(n,r),d=function(e){var t=e.isMovingForward,n=e.isInHomeList,r=e.draggable,i=e.destination,o=e.insideDestination,a=e.previousImpact;if(!i.isCombineEnabled)return null;if(a.merge)return null;var u=a.destination;u||ke(!1);var l=u.index,c=function(){var e=o.slice();return n&&e.splice(r.descriptor.index,1),e.splice(u.index,0,r),e}(),s=t?l+1:l-1;if(s<0)return null;if(s>c.length-1)return null;var f=c[s];f===r&&ke(!1);var d={whenEntered:t?er:tr,combine:{draggableId:f.descriptor.id,droppableId:i.descriptor.id}};return{movement:a.movement,destination:null,merge:d}}({isInHomeList:f,isMovingForward:t,draggable:n,destination:r,insideDestination:s,previousImpact:o})||nr({isMovingForward:t,isInHomeList:f,draggable:n,draggables:i,destination:r,insideDestination:s,previousImpact:o,onLift:c});if(!d)return null;var p=sr({impact:d,draggable:n,droppable:r,draggables:i,onLift:c});if(hr({draggable:n,destination:r,newPageBorderBoxCenter:p,viewport:a.frame,withDroppableDisplacement:!1,onlyOnMainAxis:!0}))return{clientSelection:pr({pageBorderBoxCenter:p,draggable:n,viewport:a}),impact:d,scrollJumpRequest:null};var h=Yt(p,u);return{clientSelection:l,impact:function(e){var t=e.impact,n=e.viewport,r=e.destination,i=e.draggables,o=e.maxScrollChange,a=e.onLift,u=t.movement.displaced,l=fr(n,Kt(n.scroll.current,o)),c=r.frame?ln(r,Kt(r.frame.scroll.current,o)):r,s=u.map((function(e){if(e.isVisible)return e;var o=i[e.draggableId],u=jn({draggable:o,destination:r,previousImpact:t,viewport:l.frame,onLift:a,forceShouldAnimate:!1});if(u.isVisible)return u;var s=jn({draggable:o,destination:c,previousImpact:t,viewport:n.frame,onLift:a,forceShouldAnimate:!1});return s.isVisible?s:e}));return dr(t,s)}({impact:d,viewport:a,destination:r,draggables:i,maxScrollChange:h,onLift:c}),scrollJumpRequest:h}},vr=function(e){var t=e.subject.active;return t||ke(!1),t},gr=function(e,t){var n=e.page.borderBox.center;return Sn(e.descriptor.id,t)?Yt(n,t.displacedBy.point):n},yr=function(e,t){var n=e.page.borderBox;return Sn(e.descriptor.id,t)?rn(n,Jt(t.displacedBy.point)):n},br=function(e){var t=e.isMovingForward,n=e.previousPageBorderBoxCenter,r=e.draggable,i=e.isOver,o=e.draggables,a=e.droppables,u=e.previousImpact,l=e.viewport,c=e.onLift,s=function(e){var t=e.isMovingForward,n=e.pageBorderBoxCenter,r=e.source,i=e.droppables,o=e.viewport,a=r.subject.active;if(!a)return null;var u=r.axis,l=bn(a[u.start],a[u.end]),c=gn(i).filter((function(e){return e!==r})).filter((function(e){return e.isEnabled})).filter((function(e){return Boolean(e.subject.active)})).filter((function(e){return On(o.frame)(vr(e))})).filter((function(e){var n=vr(e);return t?a[u.crossAxisEnd]<n[u.crossAxisEnd]:n[u.crossAxisStart]<a[u.crossAxisStart]})).filter((function(e){var t=vr(e),n=bn(t[u.start],t[u.end]);return l(t[u.start])||l(t[u.end])||n(a[u.start])||n(a[u.end])})).sort((function(e,n){var r=vr(e)[u.crossAxisStart],i=vr(n)[u.crossAxisStart];return t?r-i:i-r})).filter((function(e,t,n){return vr(e)[u.crossAxisStart]===vr(n[0])[u.crossAxisStart]}));if(!c.length)return null;if(1===c.length)return c[0];var s=c.filter((function(e){return bn(vr(e)[u.start],vr(e)[u.end])(n[u.line])}));return 1===s.length?s[0]:s.length>1?s.sort((function(e,t){return vr(e)[u.start]-vr(t)[u.start]}))[0]:c.sort((function(e,t){var r=tn(n,on(vr(e))),i=tn(n,on(vr(t)));return r!==i?r-i:vr(e)[u.start]-vr(t)[u.start]}))[0]}({isMovingForward:t,pageBorderBoxCenter:n,source:i,droppables:a,viewport:l});if(!s)return null;var f=xn(s.descriptor.id,o),d=function(e){var t=e.previousPageBorderBoxCenter,n=e.moveRelativeTo,r=e.insideDestination,i=e.draggable,o=e.draggables,a=e.destination,u=e.previousImpact,l=e.viewport,c=e.onLift;if(!n){if(r.length)return null;var s={movement:Ln,destination:{droppableId:a.descriptor.id,index:0},merge:null},f=sr({impact:s,draggable:i,droppable:a,draggables:o,onLift:c}),d=Gn(i,a)?a:Qn(a,i,o);return hr({draggable:i,destination:d,newPageBorderBoxCenter:f,viewport:l.frame,withDroppableDisplacement:!1,onlyOnMainAxis:!0})?s:null}var p=Boolean(t[a.axis.line]<n.page.borderBox.center[a.axis.line]),h=r.indexOf(n);-1===h&&ke(!1);var m=n.descriptor.id===i.descriptor.id?h:p?h:h+1,v=zn(i,r).slice(m).map((function(e){return jn({draggable:e,destination:a,viewport:l.frame,previousImpact:u,onLift:c})}));return{movement:{displacedBy:An(a.axis,i.displaceBy),displaced:v,map:Mn(v)},destination:{droppableId:a.descriptor.id,index:m},merge:null}}({previousPageBorderBoxCenter:n,destination:s,draggable:r,draggables:o,moveRelativeTo:function(e){var t=e.pageBorderBoxCenter,n=e.viewport,r=e.destination,i=e.insideDestination,o=e.onLift;return i.filter((function(e){return Rn({target:yr(e,o),destination:r,viewport:n.frame,withDroppableDisplacement:!0})})).sort((function(e,n){var i=en(t,lr(r,gr(e,o))),a=en(t,lr(r,gr(n,o)));return i<a?-1:a<i?1:e.descriptor.index-n.descriptor.index}))[0]||null}({pageBorderBoxCenter:n,viewport:l,destination:s,insideDestination:f,onLift:c}),insideDestination:f,previousImpact:u,viewport:l,onLift:c});if(!d)return null;var p=sr({impact:d,draggable:r,droppable:s,draggables:o,onLift:c});return{clientSelection:pr({pageBorderBoxCenter:p,draggable:r,viewport:l}),impact:d,scrollJumpRequest:null}},wr=function(e){var t=e.state,n=e.type,r=function(e,t){var n=fn(e);return n?t[n]:null}(t.impact,t.dimensions.droppables),i=Boolean(r),o=t.dimensions.droppables[t.critical.droppable.id],a=r||o,u=a.axis.direction,l="vertical"===u&&("MOVE_UP"===n||"MOVE_DOWN"===n)||"horizontal"===u&&("MOVE_LEFT"===n||"MOVE_RIGHT"===n);if(l&&!i)return null;var c="MOVE_DOWN"===n||"MOVE_RIGHT"===n,s=t.dimensions.draggables[t.critical.draggable.id],f=t.current.page.borderBoxCenter,d=t.dimensions,p=d.draggables,h=d.droppables;return l?mr({isMovingForward:c,previousPageBorderBoxCenter:f,draggable:s,destination:a,draggables:p,viewport:t.viewport,previousClientSelection:t.current.client.selection,previousImpact:t.impact,onLift:t.onLift}):br({isMovingForward:c,previousPageBorderBoxCenter:f,draggable:s,isOver:a,draggables:p,droppables:h,previousImpact:t.impact,viewport:t.viewport,onLift:t.onLift})};function xr(e){return"DRAGGING"===e.phase||"COLLECTING"===e.phase}var _r=function(e,t){return 0===t?e:t>0?"down":"up"},Er=function(e,t){return 0===t?e:t>0?"right":"left"},kr=function(e){var t=e.state,n=e.clientSelection,r=e.dimensions,i=e.viewport,o=e.impact,a=e.scrollJumpRequest,u=i||t.viewport,l=u.scroll.current,c=r||t.dimensions,s=n||t.current.client.selection,f=Yt(s,t.initial.client.selection),d={offset:f,selection:s,borderBoxCenter:Kt(t.initial.client.borderBoxCenter,f)},p={selection:Kt(d.selection,l),borderBoxCenter:Kt(d.borderBoxCenter,l)},h={client:d,page:p},m=function(e,t,n){var r=Yt(n,t);return{horizontal:Er(e.horizontal,r.x),vertical:_r(e.vertical,r.y)}}(t.userDirection,t.current.page.borderBoxCenter,h.page.borderBoxCenter);if("COLLECTING"===t.phase)return me({phase:"COLLECTING"},t,{dimensions:c,viewport:u,current:h,userDirection:m});var v=c.draggables[t.critical.draggable.id],g=o||Bn({pageBorderBoxCenter:p.borderBoxCenter,draggable:v,draggables:c.draggables,droppables:c.droppables,previousImpact:t.impact,viewport:u,userDirection:m,onLift:t.onLift}),y=Jn({draggable:v,impact:g,previousImpact:t.impact,draggables:c.draggables,droppables:c.droppables});return me({},t,{current:h,userDirection:m,dimensions:{draggables:c.draggables,droppables:y},impact:g,viewport:u,scrollJumpRequest:a||null,forceShouldAnimate:!a&&null})},Sr=function(e){var t=e.impact,n=e.viewport,r=e.destination,i=e.draggables,o=e.onLift,a=e.forceShouldAnimate,u=t.movement.displaced.map((function(e){return jn({draggable:i[e.draggableId],destination:r,previousImpact:t,viewport:n.frame,onLift:o,forceShouldAnimate:a})}));return dr(t,u)},Cr=function(e){var t=e.impact,n=e.draggable,r=e.droppable,i=e.draggables,o=e.viewport,a=e.onLift,u=sr({impact:t,draggable:n,draggables:i,droppable:r,onLift:a});return pr({pageBorderBoxCenter:u,draggable:n,viewport:o})},Tr=function(e){var t=e.state,n=e.dimensions,r=e.viewport;"SNAP"!==t.movementMode&&ke(!1);var i=t.impact,o=r||t.viewport,a=n||t.dimensions,u=a.draggables,l=a.droppables,c=u[t.critical.draggable.id],s=fn(i);s||ke(!1);var f=l[s],d=Sr({impact:i,viewport:o,destination:f,draggables:u,onLift:t.onLift}),p=Cr({impact:d,draggable:c,droppable:f,draggables:u,viewport:o,onLift:t.onLift});return kr({impact:d,clientSelection:p,state:t,dimensions:a,viewport:o})},Pr=function(e){return"SNAP"===e.movementMode},Or=function(e,t,n){var r=function(e,t){return{draggables:e.draggables,droppables:Xn(e.droppables,t)}}(e.dimensions,t);return!Pr(e)||n?kr({state:e,dimensions:r}):Tr({state:e,dimensions:r})},Dr={phase:"IDLE",completed:null,shouldFlush:!1},Nr=function(e,t){if(void 0===e&&(e=Dr),"CLEAN"===t.type)return me({},Dr,{shouldFlush:t.payload.shouldFlush});if("INITIAL_PUBLISH"===t.type){"IDLE"!==e.phase&&ke(!1);var n=t.payload,r=n.critical,i=n.clientSelection,o=n.viewport,a=n.dimensions,u=n.movementMode,l=a.draggables[r.draggable.id],c=a.droppables[r.droppable.id],s={selection:i,borderBoxCenter:l.client.borderBox.center,offset:Qt},f={client:s,page:{selection:Kt(s.selection,o.scroll.initial),borderBoxCenter:Kt(s.selection,o.scroll.initial)}},d=gn(a.droppables).every((function(e){return!e.isFixedOnPage})),p=Un({draggable:l,home:c,draggables:a.draggables,viewport:o}),h=p.impact;return{phase:"DRAGGING",isDragging:!0,critical:r,movementMode:u,dimensions:a,initial:f,current:f,isWindowScrollAllowed:d,impact:h,onLift:p.onLift,onLiftImpact:h,viewport:o,userDirection:er,scrollJumpRequest:null,forceShouldAnimate:null}}var m;if("COLLECTION_STARTING"===t.type)return"COLLECTING"===e.phase||"DROP_PENDING"===e.phase?e:("DRAGGING"!==e.phase&&ke(!1),me({phase:"COLLECTING"},e,((m={}).phase="COLLECTING",m)));if("PUBLISH_WHILE_DRAGGING"===t.type)return"COLLECTING"!==e.phase&&"DROP_PENDING"!==e.phase&&ke(!1),Zn({state:e,published:t.payload});if("MOVE"===t.type){if("DROP_PENDING"===e.phase)return e;xr(e)||ke(!1);var v=t.payload.client;return Xt(v,e.current.client.selection)?e:kr({state:e,clientSelection:v,impact:Pr(e)?e.impact:null})}if("UPDATE_DROPPABLE_SCROLL"===t.type){if("DROP_PENDING"===e.phase)return e;if("COLLECTING"===e.phase)return e;xr(e)||ke(!1);var g=t.payload,y=g.id,b=g.offset,w=e.dimensions.droppables[y];if(!w)return e;var x=ln(w,b);return Or(e,x,!1)}if("UPDATE_DROPPABLE_IS_ENABLED"===t.type){if("DROP_PENDING"===e.phase)return e;xr(e)||ke(!1);var _=t.payload,E=_.id,k=_.isEnabled,S=e.dimensions.droppables[E];S||ke(!1),S.isEnabled===k&&ke(!1);var C=me({},S,{isEnabled:k});return Or(e,C,!0)}if("UPDATE_DROPPABLE_IS_COMBINE_ENABLED"===t.type){if("DROP_PENDING"===e.phase)return e;xr(e)||ke(!1);var T=t.payload,P=T.id,O=T.isCombineEnabled,D=e.dimensions.droppables[P];D||ke(!1),D.isCombineEnabled===O&&ke(!1);var N=me({},D,{isCombineEnabled:O});return Or(e,N,!0)}if("MOVE_BY_WINDOW_SCROLL"===t.type){if("DROP_PENDING"===e.phase||"DROP_ANIMATING"===e.phase)return e;xr(e)||ke(!1),e.isWindowScrollAllowed||ke(!1);var I=t.payload.newScroll;if(Xt(e.viewport.scroll.current,I))return e;var R=fr(e.viewport,I);return Pr(e)?Tr({state:e,viewport:R}):kr({state:e,viewport:R})}if("UPDATE_VIEWPORT_MAX_SCROLL"===t.type){if(!xr(e))return e;var j=t.payload.maxScroll;if(Xt(j,e.viewport.scroll.max))return e;var M=me({},e.viewport,{scroll:me({},e.viewport.scroll,{max:j})});return me({phase:"DRAGGING"},e,{viewport:M})}if("MOVE_UP"===t.type||"MOVE_DOWN"===t.type||"MOVE_LEFT"===t.type||"MOVE_RIGHT"===t.type){if("COLLECTING"===e.phase||"DROP_PENDING"===e.phase)return e;"DRAGGING"!==e.phase&&ke(!1);var A=wr({state:e,type:t.type});return A?kr({state:e,impact:A.impact,clientSelection:A.clientSelection,scrollJumpRequest:A.scrollJumpRequest}):e}if("DROP_PENDING"===t.type){var L,F=t.payload.reason;return"COLLECTING"!==e.phase&&ke(!1),me({phase:"DROP_PENDING"},e,((L={}).phase="DROP_PENDING",L.isWaiting=!0,L.reason=F,L))}if("DROP_ANIMATE"===t.type){var z=t.payload,B=z.completed,U=z.dropDuration,W=z.newHomeClientOffset;return"DRAGGING"!==e.phase&&"DROP_PENDING"!==e.phase&&ke(!1),{phase:"DROP_ANIMATING",dimensions:e.dimensions,completed:B,dropDuration:U,newHomeClientOffset:W}}if("DROP_COMPLETE"===t.type){var V=t.payload;return{phase:"IDLE",completed:V.completed,shouldFlush:V.shouldFlush}}return e},Ir=function(e){return{type:"PUBLISH_WHILE_DRAGGING",payload:e}},Rr=function(){return{type:"COLLECTION_STARTING",payload:null}},jr=function(e){return{type:"UPDATE_DROPPABLE_SCROLL",payload:e}},Mr=function(e){return{type:"UPDATE_DROPPABLE_IS_ENABLED",payload:e}},Ar=function(e){return{type:"UPDATE_DROPPABLE_IS_COMBINE_ENABLED",payload:e}},Lr=function(e){return{type:"MOVE",payload:e}},Fr=function(e){return void 0===e&&(e={shouldFlush:!1}),{type:"CLEAN",payload:e}},zr=function(e){return{type:"DROP_COMPLETE",payload:e}},Br=function(e){return{type:"DROP",payload:e}},Ur="cubic-bezier(.2,1,.1,1)",Wr={drop:0,combining:.7},Vr={drop:.75},Hr=.2+"s "+"cubic-bezier(0.2, 0, 0, 1)",$r={fluid:"opacity "+Hr,snap:"transform "+Hr+", opacity "+Hr,drop:function(e){var t=e+"s "+Ur;return"transform "+t+", opacity "+t},outOfTheWay:"transform "+Hr,placeholder:"height "+Hr+", width "+Hr+", margin "+Hr},Gr=function(e){return Xt(e,Qt)?null:"translate("+e.x+"px, "+e.y+"px)"},qr={moveTo:Gr,drop:function(e,t){var n=Gr(e);return n?t?n+" scale("+Vr.drop+")":n:null}},Qr=.33,Kr=.55,Yr=Kr-Qr,Xr=function(e){var t=e.getState,n=e.dispatch;return function(e){return function(r){if("DROP"===r.type){var i=t(),o=r.payload.reason;if("COLLECTING"!==i.phase){if("IDLE"!==i.phase){"DROP_PENDING"===i.phase&&i.isWaiting&&ke(!1),"DRAGGING"!==i.phase&&"DROP_PENDING"!==i.phase&&ke(!1);var a=i.critical,u=i.dimensions,l=function(e){var t=e.reason,n=e.lastImpact,r=e.home,i=e.viewport,o=e.draggables,a=e.onLiftImpact,u=e.onLift,l="DROP"===t&&Boolean(fn(n));return l?n.destination?{impact:n,didDropInsideDroppable:l}:{impact:me({},n,{movement:Ln}),didDropInsideDroppable:l}:{impact:Sr({impact:a,destination:r,viewport:i,draggables:o,onLift:u,forceShouldAnimate:!0}),didDropInsideDroppable:l}}({reason:o,lastImpact:i.impact,onLift:i.onLift,onLiftImpact:i.onLiftImpact,home:i.dimensions.droppables[i.critical.droppable.id],viewport:i.viewport,draggables:i.dimensions.draggables}),c=l.impact,s=l.didDropInsideDroppable,f=u.draggables[i.critical.draggable.id],d=s?c.destination:null,p=s&&c.merge?c.merge.combine:null,h={index:a.draggable.index,droppableId:a.droppable.id},m={draggableId:f.descriptor.id,type:f.descriptor.type,source:h,reason:o,mode:i.movementMode,destination:d,combine:p},v=function(e){var t=e.impact,n=e.draggable,r=e.dimensions,i=e.viewport,o=e.onLift,a=r.draggables,u=r.droppables,l=fn(t),c=l?u[l]:null,s=u[n.descriptor.droppableId],f=Cr({impact:t,draggable:n,draggables:a,onLift:o,droppable:c||s,viewport:i}),d=Yt(f,n.client.borderBox.center),p=t.merge;return p&&Sn(p.combine.draggableId,o)?Yt(d,o.displacedBy.point):d}({impact:c,draggable:f,dimensions:u,viewport:i.viewport,onLift:i.onLift}),g={critical:i.critical,result:m,impact:c};if(!Xt(i.current.client.offset,v)||Boolean(m.combine)){var y=function(e){var t=e.current,n=e.destination,r=e.reason,i=en(t,n);if(i<=0)return Qr;if(i>=1500)return Kr;var o=Qr+Yr*(i/1500);return Number(("CANCEL"===r?.6*o:o).toFixed(2))}({current:i.current.client.offset,destination:v,reason:o});n(function(e){return{type:"DROP_ANIMATE",payload:e}}({newHomeClientOffset:v,dropDuration:y,completed:g}))}else n(zr({completed:g,shouldFlush:!1}))}}else n(function(e){return{type:"DROP_PENDING",payload:e}}({reason:o}))}else e(r)}}},Jr=function(e){return e+1},Zr=function(e,t){var n=e.droppableId===t.droppableId,r=Jr(e.index),i=Jr(t.index);return n?"\n      You have moved the item from position "+r+"\n      to position "+i+"\n    ":"\n    You have moved the item from position "+r+"\n    in list "+e.droppableId+"\n    to list "+t.droppableId+"\n    in position "+i+"\n  "},ei=function(e,t,n){return t.droppableId===n.droppableId?"\n      The item "+e+"\n      has been combined with "+n.draggableId:"\n      The item "+e+"\n      in list "+t.droppableId+"\n      has been combined with "+n.draggableId+"\n      in list "+n.droppableId+"\n    "},ti=function(e){return"\n  The item has returned to its starting position\n  of "+Jr(e.index)+"\n"},ni=function(e){return"\n  You have lifted an item in position "+Jr(e.source.index)+".\n  Use the arrow keys to move, space bar to drop, and escape to cancel.\n"},ri=function(e){var t=e.destination;if(t)return Zr(e.source,t);var n=e.combine;return n?ei(e.draggableId,e.source,n):"You are over an area that cannot be dropped on"},ii=function(e){if("CANCEL"===e.reason)return"\n      Movement cancelled.\n      "+ti(e.source)+"\n    ";var t=e.destination,n=e.combine;return t?"\n      You have dropped the item.\n      "+Zr(e.source,t)+"\n    ":n?"\n      You have dropped the item.\n      "+ei(e.draggableId,e.source,n)+"\n    ":"\n    The item has been dropped while not over a drop area.\n    "+ti(e.source)+"\n  "},oi=function(){var e=[];return{add:function(t){var n=setTimeout((function(){return function(t){var n=pn(e,(function(e){return e.timerId===t}));-1===n&&ke(!1),e.splice(n,1)[0].callback()}(n)})),r={timerId:n,callback:t};e.push(r)},flush:function(){if(e.length){var t=[].concat(e);e.length=0,t.forEach((function(e){clearTimeout(e.timerId),e.callback()}))}}}},ai=function(e,t){cn(e),t(),sn(e)},ui=function(e,t){return{draggableId:e.draggable.id,type:e.droppable.type,source:{droppableId:e.droppable.id,index:e.draggable.index},mode:t}},li=function(e,t,n,r){if(e){var i=function(e){var t=!1,n=!1,r=setTimeout((function(){n=!0})),i=function(i){t||n||(t=!0,e(i),clearTimeout(r))};return i.wasCalled=function(){return t},i}(n);e(t,{announce:i}),i.wasCalled()||n(r(t))}else n(r(t))},ci=function(e,t){var n=function(e,t){var n=oi(),r=null,i=function(n){r||ke(!1),r=null,ai("onDragEnd",(function(){return li(e().onDragEnd,n,t,ii)}))};return{beforeStart:function(t,n){r&&ke(!1),ai("onBeforeDragStart",(function(){var r=e().onBeforeDragStart;r&&r(ui(t,n))}))},start:function(i,o){r&&ke(!1);var a=ui(i,o);r={mode:o,lastCritical:i,lastLocation:a.source,lastCombine:null},n.add((function(){ai("onDragStart",(function(){return li(e().onDragStart,a,t,ni)}))}))},update:function(i,o){var a=o.destination,u=o.merge?o.merge.combine:null;r||ke(!1);var l=!function(e,t){if(e===t)return!0;var n=e.draggable.id===t.draggable.id&&e.draggable.droppableId===t.draggable.droppableId&&e.draggable.type===t.draggable.type&&e.draggable.index===t.draggable.index,r=e.droppable.id===t.droppable.id&&e.droppable.type===t.droppable.type;return n&&r}(i,r.lastCritical);l&&(r.lastCritical=i);var c,s,f=(c=r.lastLocation,s=a,!(null==c&&null==s||null!=c&&null!=s&&c.droppableId===s.droppableId&&c.index===s.index));f&&(r.lastLocation=a);var d=!function(e,t){return null==e&&null==t||null!=e&&null!=t&&(e.draggableId===t.draggableId&&e.droppableId===t.droppableId)}(r.lastCombine,u);if(d&&(r.lastCombine=u),l||f||d){var p=me({},ui(i,r.mode),{combine:u,destination:a});n.add((function(){ai("onDragUpdate",(function(){return li(e().onDragUpdate,p,t,ri)}))}))}},flush:function(){r||ke(!1),n.flush()},drop:i,abort:function(){if(r){var e=me({},ui(r.lastCritical,r.mode),{combine:null,destination:null,reason:"CANCEL"});i(e)}}}}(e,t);return function(e){return function(t){return function(r){if("INITIAL_PUBLISH"===r.type){var i=r.payload.critical;return n.beforeStart(i,r.payload.movementMode),t(r),void n.start(i,r.payload.movementMode)}if("DROP_COMPLETE"===r.type){var o=r.payload.completed.result;return n.flush(),t(r),void n.drop(o)}if(t(r),"CLEAN"!==r.type){var a=e.getState();"DRAGGING"===a.phase&&n.update(a.critical,a.impact)}else n.abort()}}}},si=function(e){return function(t){return function(n){if("DROP_ANIMATION_FINISHED"===n.type){var r=e.getState();"DROP_ANIMATING"!==r.phase&&ke(!1),e.dispatch(zr({completed:r.completed,shouldFlush:!1}))}else t(n)}}},fi=function(e){return function(t){return function(n){if(t(n),"PUBLISH_WHILE_DRAGGING"===n.type){var r=e.getState();"DROP_PENDING"===r.phase&&(r.isWaiting||e.dispatch(Br({reason:r.reason})))}}}},di=Me,pi=function(e){var t,n=e.dimensionMarshal,r=e.styleMarshal,i=e.getResponders,o=e.announce,a=e.autoScroller;return Oe(Nr,di(function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(e){return function(){var n=e.apply(void 0,arguments),r=function(){throw new Error("Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.")},i={getState:n.getState,dispatch:function(){return r.apply(void 0,arguments)}},o=t.map((function(e){return e(i)}));return je({},n,{dispatch:r=Me.apply(void 0,o)(n.dispatch)})}}}((t=r,function(){return function(e){return function(n){"INITIAL_PUBLISH"===n.type&&t.dragging(),"DROP_ANIMATE"===n.type&&t.dropping(n.payload.completed.result.reason),"CLEAN"!==n.type&&"DROP_COMPLETE"!==n.type||t.resting(),e(n)}}}),function(e){return function(){return function(t){return function(n){"DROP_COMPLETE"!==n.type&&"CLEAN"!==n.type&&"DROP_ANIMATE"!==n.type||e.stopPublishing(),t(n)}}}}(n),function(e){return function(t){var n=t.getState,r=t.dispatch;return function(t){return function(i){if("LIFT"===i.type){var o=i.payload,a=o.id,u=o.clientSelection,l=o.movementMode,c=n();"DROP_ANIMATING"===c.phase&&r(zr({completed:c.completed,shouldFlush:!0})),"IDLE"!==n().phase&&ke(!1);var s={draggableId:a,scrollOptions:{shouldPublishImmediately:"SNAP"===l}},f=e.startPublishing(s),d=f.critical,p=f.dimensions,h=f.viewport;r({type:"INITIAL_PUBLISH",payload:{critical:d,dimensions:p,clientSelection:u,movementMode:l,viewport:h}})}else t(i)}}}}(n),Xr,si,fi,function(e){return function(t){return function(n){return function(r){if(function(e){return"DROP_COMPLETE"===e.type||"DROP_ANIMATE"===e.type||"CLEAN"===e.type}(r))return e.stop(),void n(r);if(function(e){return"COLLECTION_STARTING"===e.type}(r))return e.cancelPending(),void n(r);if("INITIAL_PUBLISH"===r.type){n(r);var i=t.getState();return"DRAGGING"!==i.phase&&ke(!1),void e.start(i)}n(r),e.scroll(t.getState())}}}}(a),ci(i,o))))},hi=function(){return{x:window.pageXOffset,y:window.pageYOffset}},mi=function(){var e=document.documentElement;return e||ke(!1),e},vi=function(){var e=mi();return Hn({scrollHeight:e.scrollHeight,scrollWidth:e.scrollWidth,width:e.clientWidth,height:e.clientHeight})},gi=function(e){var t=e.critical,n=e.scrollOptions,r=e.entries;cn("Initial collection from DOM");var i=function(){var e=hi(),t=vi(),n=e.y,r=e.x,i=mi(),o=i.clientWidth,a=i.clientHeight;return{frame:Tt({top:n,left:r,right:r+o,bottom:n+a}),scroll:{initial:e,current:e,max:t,diff:{value:Qt,displacement:Qt}}}}(),o=i.scroll.current,a=t.droppable,u=dn(r.droppables).filter((function(e){return e.descriptor.type===a.type})).map((function(e){return e.callbacks.getDimensionAndWatchScroll(o,n)})),l=dn(r.draggables).filter((function(e){return e.descriptor.type===t.draggable.type})).map((function(e){return e.getDimension(o)})),c={draggables:vn(l),droppables:mn(u)};return sn("Initial collection from DOM"),{dimensions:c,critical:t,viewport:i}},yi=function(e,t){e.critical.draggable.type!==t.type&&ke(!1)},bi=function(e){var t={droppables:{},draggables:{}},n=null,r=function(e){var t=e.getEntries,n=e.callbacks,r=function(){},i={additions:{},removals:{},modified:{}},o=null,a=function(){r(),o||(o=requestAnimationFrame((function(){o=null,n.collectionStarting();var e=n.getCritical();cn("Publish collection from DOM");var r=t(),a=i,u=a.additions,l=a.removals,c=a.modified,s=Wt()(u).map((function(e){return r.draggables[e].getDimension(Qt)})).sort((function(e,t){return e.descriptor.index-t.descriptor.index})),f=Wt()(c).map((function(t){var n=r.droppables[t];n||ke(!1);var i={withoutPlaceholder:!(n.descriptor.id===e.droppable.id)};return n.callbacks.recollect(i)})),d={additions:s,removals:Wt()(l),modified:f};i={additions:{},removals:{},modified:{}},sn("Publish collection from DOM"),n.publish(d)})))};return{add:function(e){i.additions[e.id]=e,i.modified[e.droppableId]=!0,i.removals[e.id]&&delete i.removals[e.id],a()},remove:function(e){i.removals[e.id]=e,i.modified[e.droppableId]=!0,i.additions[e.id]&&delete i.additions[e.id],a()},stop:function(){o&&(cancelAnimationFrame(o),o=null,i={additions:{},removals:{},modified:{}})}}}({callbacks:{publish:e.publishWhileDragging,collectionStarting:e.collectionStarting,getCritical:function(){return n||ke(!1),n.critical}},getEntries:function(){return t}});return{registerDraggable:function(e,i){var o={descriptor:e,getDimension:i};t.draggables[e.id]=o,n&&(yi(n,e),r.add(e))},updateDraggable:function(e,n,r){var i=t.draggables[e.id];i||ke(!1),i.descriptor===e&&delete t.draggables[e.id];var o={descriptor:n,getDimension:r};t.draggables[n.id]=o},unregisterDraggable:function(e){var i=t.draggables[e.id];i||ke(!1),i.descriptor===e&&(delete t.draggables[e.id],n&&(n.critical.draggable.id===e.id&&ke(!1),yi(n,e),r.remove(e)))},registerDroppable:function(e,r){var i=e.id;t.droppables[i]={descriptor:e,callbacks:r},n&&ke(!1)},unregisterDroppable:function(e){var r=t.droppables[e.id];r||ke(!1),r.descriptor===e&&(delete t.droppables[e.id],n&&ke(!1))},updateDroppableIsEnabled:function(r,i){t.droppables[r]||ke(!1),n&&e.updateDroppableIsEnabled({id:r,isEnabled:i})},updateDroppableIsCombineEnabled:function(r,i){t.droppables[r]||ke(!1),n&&e.updateDroppableIsCombineEnabled({id:r,isCombineEnabled:i})},scrollDroppable:function(e,r){var i=t.droppables[e];i||ke(!1),n&&i.callbacks.scroll(r)},updateDroppableScroll:function(r,i){t.droppables[r]||ke(!1),n&&e.updateDroppableScroll({id:r,offset:i})},startPublishing:function(e){n&&ke(!1);var r=t.draggables[e.draggableId];r||ke(!1);var i=t.droppables[r.descriptor.droppableId];i||ke(!1);var o={draggable:r.descriptor,droppable:i.descriptor};return n={critical:o},gi({critical:o,entries:t,scrollOptions:e.scrollOptions})},stopPublishing:function(){if(n){r.stop();var e=n.critical.droppable;dn(t.droppables).filter((function(t){return t.descriptor.type===e.type})).forEach((function(e){return e.callbacks.dragStopped()})),n=null}}}},wi=function(e,t){return"IDLE"===e.phase||"DROP_ANIMATING"===e.phase&&(e.completed.result.draggableId!==t&&"DROP"===e.completed.result.reason)},xi=function(e){window.scrollBy(e.x,e.y)},_i=Ft((function(e){return gn(e).filter((function(e){return!!e.isEnabled&&!!e.frame}))})),Ei=function(e){var t=e.center,n=e.destination,r=e.droppables;if(n){var i=r[n];return i.frame?i:null}return function(e,t){return hn(_i(t),(function(t){return t.frame||ke(!1),wn(t.frame.pageMarginBox)(e)}))}(t,r)},ki=.25,Si=.05,Ci=28,Ti=function(e){return Math.pow(e,2)},Pi={stopDampeningAt:1200,accelerateAt:360},Oi=function(e){var t=e.startOfRange,n=e.endOfRange,r=e.current,i=n-t;return 0===i?0:(r-t)/i},Di=Pi.accelerateAt,Ni=Pi.stopDampeningAt,Ii=function(e){var t=e.distanceToEdge,n=e.thresholds,r=e.dragStartTime,i=e.shouldUseTimeDampening,o=function(e,t){if(e>t.startScrollingFrom)return 0;if(e<=t.maxScrollValueAt)return Ci;if(e===t.startScrollingFrom)return 1;var n=Oi({startOfRange:t.maxScrollValueAt,endOfRange:t.startScrollingFrom,current:e}),r=Ci*Ti(1-n);return Math.ceil(r)}(t,n);return 0===o?0:i?Math.max(function(e,t){var n=t,r=Ni,i=Ht()()-n;if(i>=Ni)return e;if(i<Di)return 1;var o=Oi({startOfRange:Di,endOfRange:r,current:i}),a=e*Ti(o);return Math.ceil(a)}(o,r),1):o},Ri=function(e){var t=e.container,n=e.distanceToEdges,r=e.dragStartTime,i=e.axis,o=e.shouldUseTimeDampening,a=function(e,t){return{startScrollingFrom:e[t.size]*ki,maxScrollValueAt:e[t.size]*Si}}(t,i);return n[i.end]<n[i.start]?Ii({distanceToEdge:n[i.end],thresholds:a,dragStartTime:r,shouldUseTimeDampening:o}):-1*Ii({distanceToEdge:n[i.start],thresholds:a,dragStartTime:r,shouldUseTimeDampening:o})},ji=nn((function(e){return 0===e?0:e})),Mi=function(e){var t=e.dragStartTime,n=e.container,r=e.subject,i=e.center,o=e.shouldUseTimeDampening,a={top:i.y-n.top,right:n.right-i.x,bottom:n.bottom-i.y,left:i.x-n.left},u=Ri({container:n,distanceToEdges:a,dragStartTime:t,axis:_n,shouldUseTimeDampening:o}),l=Ri({container:n,distanceToEdges:a,dragStartTime:t,axis:En,shouldUseTimeDampening:o}),c=ji({x:l,y:u});if(Xt(c,Qt))return null;var s=function(e){var t=e.container,n=e.subject,r=e.proposedScroll,i=n.height>t.height,o=n.width>t.width;return o||i?o&&i?null:{x:o?0:r.x,y:i?0:r.y}:r}({container:n,subject:r,proposedScroll:c});return s?Xt(s,Qt)?null:s:null},Ai=nn((function(e){return 0===e?0:e>0?1:-1})),Li=function(){var e=function(e,t){return e<0?e:e>t?e-t:0};return function(t){var n=t.current,r=t.max,i=t.change,o=Kt(n,i),a={x:e(o.x,r.x),y:e(o.y,r.y)};return Xt(a,Qt)?null:a}}(),Fi=function(e){var t=e.max,n=e.current,r=e.change,i={x:Math.max(n.x,t.x),y:Math.max(n.y,t.y)},o=Ai(r),a=Li({max:i,current:n,change:o});return!a||(0!==o.x&&0===a.x||0!==o.y&&0===a.y)},zi=function(e,t){return Fi({current:e.scroll.current,max:e.scroll.max,change:t})},Bi=function(e,t){var n=e.frame;return!!n&&Fi({current:n.scroll.current,max:n.scroll.max,change:t})},Ui=function(e){var t=e.state,n=e.dragStartTime,r=e.shouldUseTimeDampening,i=e.scrollWindow,o=e.scrollDroppable,a=t.current.page.borderBoxCenter,u=t.dimensions.draggables[t.critical.draggable.id].page.marginBox;if(t.isWindowScrollAllowed){var l=function(e){var t=e.viewport,n=e.subject,r=e.center,i=e.dragStartTime,o=e.shouldUseTimeDampening,a=Mi({dragStartTime:i,container:t.frame,subject:n,center:r,shouldUseTimeDampening:o});return a&&zi(t,a)?a:null}({dragStartTime:n,viewport:t.viewport,subject:u,center:a,shouldUseTimeDampening:r});if(l)return void i(l)}var c=Ei({center:a,destination:fn(t.impact),droppables:t.dimensions.droppables});if(c){var s=function(e){var t=e.droppable,n=e.subject,r=e.center,i=e.dragStartTime,o=e.shouldUseTimeDampening,a=t.frame;if(!a)return null;var u=Mi({dragStartTime:i,container:a.pageMarginBox,subject:n,center:r,shouldUseTimeDampening:o});return u&&Bi(t,u)?u:null}({dragStartTime:n,droppable:c,subject:u,center:a,shouldUseTimeDampening:r});s&&o(c.descriptor.id,s)}},Wi=function(e){var t=e.move,n=e.scrollDroppable,r=e.scrollWindow,i=function(e,t){if(!Bi(e,t))return t;var r=function(e,t){var n=e.frame;return n&&Bi(e,t)?Li({current:n.scroll.current,max:n.scroll.max,change:t}):null}(e,t);if(!r)return n(e.descriptor.id,t),null;var i=Yt(t,r);return n(e.descriptor.id,i),Yt(t,i)},o=function(e,t,n){if(!e)return n;if(!zi(t,n))return n;var i=function(e,t){if(!zi(e,t))return null;var n=e.scroll.max,r=e.scroll.current;return Li({current:r,max:n,change:t})}(t,n);if(!i)return r(n),null;var o=Yt(n,i);return r(o),Yt(n,o)};return function(e){var n=e.scrollJumpRequest;if(n){var r=fn(e.impact);r||ke(!1);var a=i(e.dimensions.droppables[r],n);if(a){var u=e.viewport,l=o(e.isWindowScrollAllowed,u,a);l&&function(e,n){var r=Kt(e.current.client.selection,n);t({client:r})}(e,l)}}}},Vi=function(e){var t=e.scrollDroppable,n=e.scrollWindow,r=e.move,i=function(e){var t=e.scrollWindow,n=e.scrollDroppable,r=$t(t),i=$t(n),o=null,a=function(e){o||ke(!1);var t=o,n=t.shouldUseTimeDampening,a=t.dragStartTime;Ui({state:e,scrollWindow:r,scrollDroppable:i,dragStartTime:a,shouldUseTimeDampening:n})},u=function(){o||ke(!1),r.cancel(),i.cancel()};return{start:function(e){cn("starting fluid scroller"),o&&ke(!1);var t=Ht()(),n=!1,r=function(){n=!0};Ui({state:e,dragStartTime:0,shouldUseTimeDampening:!1,scrollWindow:r,scrollDroppable:r}),o={dragStartTime:t,shouldUseTimeDampening:n},sn("starting fluid scroller"),n&&a(e)},stop:function(){o&&(u(),o=null)},cancelPending:u,scroll:a}}({scrollWindow:n,scrollDroppable:t}),o=Wi({move:r,scrollWindow:n,scrollDroppable:t});return{scroll:function(e){"DRAGGING"===e.phase&&("FLUID"!==e.movementMode?e.scrollJumpRequest&&o(e):i.scroll(e))},cancelPending:i.cancelPending,start:i.start,stop:i.stop}},Hi="data-react-beautiful-dnd",$i=Hi+"-drag-handle",Gi=Hi+"-draggable",qi=Hi+"-droppable",Qi=function(e,t){return e.map((function(e){var n=e.styles[t];return n?e.selector+" { "+n+" }":""})).join(" ")},Ki=function(e){var t,n=(t=e,function(e){return"["+e+'="'+t+'"]'}),r=function(){var e="\n      cursor: -webkit-grab;\n      cursor: grab;\n    ";return{selector:n($i),styles:{always:"\n          -webkit-touch-callout: none;\n          -webkit-tap-highlight-color: rgba(0,0,0,0);\n          touch-action: manipulation;\n        ",resting:e,dragging:"pointer-events: none;",dropAnimating:e}}}(),i=[function(){var e="\n      transition: "+$r.outOfTheWay+";\n    ";return{selector:n(Gi),styles:{dragging:e,dropAnimating:e,userCancel:e}}}(),r,{selector:n(qi),styles:{always:"overflow-anchor: none;"}},{selector:"body",styles:{dragging:"\n        cursor: grabbing;\n        cursor: -webkit-grabbing;\n        user-select: none;\n        -webkit-user-select: none;\n        -moz-user-select: none;\n        -ms-user-select: none;\n        overflow-anchor: none;\n      "}}];return{always:Qi(i,"always"),resting:Qi(i,"resting"),dragging:Qi(i,"dragging"),dropAnimating:Qi(i,"dropAnimating"),userCancel:Qi(i,"userCancel")}},Yi="undefined"!==typeof window?l.useLayoutEffect:l.useEffect,Xi=function(){var e=document.querySelector("head");return e||ke(!1),e},Ji=function(){var e=document.createElement("style");return e.type="text/css",e};var Zi=c.a.createContext(null),eo=function(){var e=document.body;return e||ke(!1),e},to={position:"absolute",width:"1px",height:"1px",margin:"-1px",border:"0",padding:"0",overflow:"hidden",clip:"rect(0 0 0 0)","clip-path":"inset(100%)"},no=function(e){return"react-beautiful-dnd-announcement-"+e};var ro=c.a.createContext(null);function io(e){var t=Object(l.useRef)(e);return Object(l.useEffect)((function(){t.current=e})),t}var oo=function(e){return{onBeforeDragStart:e.onBeforeDragStart,onDragStart:e.onDragStart,onDragEnd:e.onDragEnd,onDragUpdate:e.onDragUpdate}};function ao(e){return e.current||ke(!1),e.current}function uo(e){var t=e.uniqueId,n=e.setOnError,r=Object(l.useRef)(null);Object(l.useEffect)((function(){}),[]);var i=io(e),o=ye((function(){return oo(i.current)}),[i]),a=function(e){var t=ge((function(){return no(e)}),[e]),n=Object(l.useRef)(null);return Object(l.useEffect)((function(){n.current&&ke(!1);var e=document.createElement("div");return n.current=e,e.id=t,e.setAttribute("aria-live","assertive"),e.setAttribute("role","log"),e.setAttribute("aria-atomic","true"),he()(e.style,to),eo().appendChild(e),function(){var e=n.current;e||ke(!1),eo().removeChild(e),n.current=null}}),[t]),ye((function(e){var t=n.current;t&&(t.textContent=e)}),[])}(t),u=function(e){var t=ge((function(){return""+e}),[e]),n=ge((function(){return Ki(t)}),[t]),r=Object(l.useRef)(null),i=Object(l.useRef)(null),o=ye(Ft((function(e){var t=i.current;t||ke(!1),t.textContent=e})),[]),a=ye((function(e){var t=r.current;t||ke(!1),t.textContent=e}),[]);Yi((function(){(r.current||i.current)&&ke(!1);var e=Ji(),u=Ji();return r.current=e,i.current=u,e.setAttribute(Hi+"-always",t),u.setAttribute(Hi+"-dynamic",t),Xi().appendChild(e),Xi().appendChild(u),a(n.always),o(n.resting),function(){var e=function(e){var t=e.current;t||ke(!1),Xi().removeChild(t),e.current=null};e(r),e(i)}}),[a,o,n.always,n.resting,t]);var u=ye((function(){return o(n.dragging)}),[o,n.dragging]),c=ye((function(e){o("DROP"!==e?n.userCancel:n.dropAnimating)}),[o,n.dropAnimating,n.userCancel]),s=ye((function(){i.current&&o(n.resting)}),[o,n.resting]);return ge((function(){return{dragging:u,dropping:c,resting:s,styleContext:t}}),[u,c,s,t])}(t),s=ye((function(e){ao(r).dispatch(e)}),[]),f=ge((function(){return Ne({publishWhileDragging:Ir,updateDroppableScroll:jr,updateDroppableIsEnabled:Mr,updateDroppableIsCombineEnabled:Ar,collectionStarting:Rr},s)}),[s]),d=ge((function(){return bi(f)}),[f]),p=ge((function(){return Vi(me({scrollWindow:xi,scrollDroppable:d.scrollDroppable},Ne({move:Lr},s)))}),[d.scrollDroppable,s]),h=ge((function(){return pi({dimensionMarshal:d,styleMarshal:u,announce:a,autoScroller:p,getResponders:o})}),[a,p,d,o,u]);r.current=h;var m=ye((function(){var e=ao(r);"IDLE"!==e.getState().phase&&e.dispatch(Fr({shouldFlush:!0}))}),[]);n(m);var v=ye((function(e){return wi(ao(r).getState(),e)}),[]),g=ye((function(){return xr(ao(r).getState())}),[]),y=ge((function(){return{marshal:d,style:u.styleContext,canLift:v,isMovementAllowed:g}}),[d,v,g,u.styleContext]);return Object(l.useEffect)((function(){return m}),[m]),c.a.createElement(ro.Provider,{value:y},c.a.createElement($e,{context:Zi,store:h},e.children))}var lo=0;function co(e){var t=ge((function(){return lo++}),[]);return c.a.createElement(qt,null,(function(n){return c.a.createElement(uo,me({setOnError:n,uniqueId:t},e),e.children)}))}var so=function(e){return function(t){return e===t}},fo=so("scroll"),po=so("auto"),ho=(so("visible"),function(e,t){return t(e.overflowX)||t(e.overflowY)}),mo=function(e){var t=window.getComputedStyle(e),n={overflowX:t.overflowX,overflowY:t.overflowY};return ho(n,fo)||ho(n,po)},vo=function e(t){return null==t?null:t===document.body?null:t===document.documentElement?null:mo(t)?t:e(t.parentElement)},go=function(e){return{x:e.scrollLeft,y:e.scrollTop}},yo=function(e){return{closestScrollable:vo(e),isFixedOnPage:function e(t){return!!t&&("fixed"===window.getComputedStyle(t).position||e(t.parentElement))}(e)}},bo=function(e){var t=e.ref,n=e.descriptor,r=e.env,i=e.windowScroll,o=e.direction,a=e.isDropDisabled,u=e.isCombineEnabled,l=e.shouldClipSubject,c=r.closestScrollable,s=function(e,t){var n=At(e);if(!t)return n;if(e!==t)return n;var r=n.paddingBox.top-t.scrollTop,i=n.paddingBox.left-t.scrollLeft,o=r+t.scrollHeight,a=i+t.scrollWidth,u=Pt({top:r,right:a,bottom:o,left:i},n.border);return Nt({borderBox:u,margin:n.margin,border:n.border,padding:n.padding})}(t,c),f=jt(s,i),d=function(){if(!c)return null;var e=At(c),t={scrollHeight:c.scrollHeight,scrollWidth:c.scrollWidth};return{client:e,page:jt(e,i),scroll:go(c),scrollSize:t,shouldClipSubject:l}}();return $n({descriptor:n,isEnabled:!a,isCombineEnabled:u,isFixedOnPage:r.isFixedOnPage,direction:o,client:s,page:f,closest:d})};var wo={passive:!1},xo={passive:!0},_o=function(e){return e.shouldPublishImmediately?wo:xo};function Eo(e){var t=Object(l.useContext)(e);return t||ke(!1),t}var ko=function(e){return e&&e.env.closestScrollable||null};function So(){}var Co={width:0,height:0,margin:{top:0,right:0,bottom:0,left:0}},To=function(e){var t=e.isAnimatingOpenOnMount,n=e.placeholder,r=function(e){var t=e.isAnimatingOpenOnMount,n=e.placeholder,r=e.animate;return t?Co:"close"===r?Co:{height:n.client.borderBox.height,width:n.client.borderBox.width,margin:n.client.margin}}({isAnimatingOpenOnMount:t,placeholder:n,animate:e.animate});return{display:n.display,boxSizing:"border-box",width:r.width,height:r.height,marginTop:r.margin.top,marginRight:r.margin.right,marginBottom:r.margin.bottom,marginLeft:r.margin.left,flexShrink:"0",flexGrow:"0",pointerEvents:"none",transition:$r.placeholder}};var Po=c.a.memo((function(e){var t=Object(l.useRef)(null),n=ye((function(){t.current&&(clearTimeout(t.current),t.current=null)}),[]),r=e.animate,i=e.onTransitionEnd,o=e.onClose,a=e.styleContext,u=Object(l.useState)("open"===e.animate),s=u[0],f=u[1];Object(l.useEffect)((function(){return s?"open"!==r?(n(),f(!1),So):t.current?So:(t.current=setTimeout((function(){t.current=null,f(!1)})),n):So}),[r,s,n]);var d=ye((function(e){"height"===e.propertyName&&(i(),"close"===r&&o())}),[r,o,i]),p=To({isAnimatingOpenOnMount:s,animate:e.animate,placeholder:e.placeholder});return c.a.createElement(e.placeholder.tagName,{style:p,"data-react-beautiful-dnd-placeholder":a,onTransitionEnd:d,ref:e.innerRef})})),Oo=c.a.createContext(null),Do=function(e){return e&&e.ownerDocument?e.ownerDocument.defaultView:window};function No(e){return e instanceof Do(e).HTMLElement}var Io=function(e){function t(){for(var t,n=arguments.length,r=new Array(n),i=0;i<n;i++)r[i]=arguments[i];return(t=e.call.apply(e,[this].concat(r))||this).state={isVisible:Boolean(t.props.on),data:t.props.on,animate:t.props.shouldAnimate&&t.props.on?"open":"none"},t.onClose=function(){"close"===t.state.animate&&t.setState({isVisible:!1})},t}return xe(t,e),t.getDerivedStateFromProps=function(e,t){return e.shouldAnimate?e.on?{isVisible:!0,data:e.on,animate:"open"}:t.isVisible?{isVisible:!0,data:t.data,animate:"close"}:{isVisible:!1,animate:"close",data:null}:{isVisible:Boolean(e.on),data:e.on,animate:"none"}},t.prototype.render=function(){if(!this.state.isVisible)return null;var e={onClose:this.onClose,data:this.state.data,animate:this.state.animate};return this.props.children(e)},t}(c.a.PureComponent);var Ro=function(e,t){return e===t},jo=function(e){var t=e.combine,n=e.destination;return n?n.droppableId:t?t.droppableId:null},Mo=function(e,t){return e===t.droppable.type},Ao=function(e,t){return t.draggables[e.draggable.id]},Lo=wt((function(){var e={placeholder:null,shouldAnimatePlaceholder:!0,snapshot:{isDraggingOver:!1,draggingOverWith:null,draggingFromThisWith:null}},t=me({},e,{shouldAnimatePlaceholder:!1}),n=Ft((function(t,n,r,i){return r.descriptor.droppableId===t?{placeholder:r.placeholder,shouldAnimatePlaceholder:!1,snapshot:i}:n?{placeholder:r.placeholder,shouldAnimatePlaceholder:!0,snapshot:i}:e})),r=Ft((function(e,t,n){var r=n.descriptor.id;return{isDraggingOver:t,draggingOverWith:t?r:null,draggingFromThisWith:n.descriptor.droppableId===e?r:null}}));return function(i,o){var a=o.droppableId,u=o.type;if(i.isDragging){var l=i.critical;if(!Mo(u,l))return e;var c=Ao(l,i.dimensions),s=fn(i.impact)===a,f=r(a,s,c);return n(a,s,c,f)}if("DROP_ANIMATING"===i.phase){var d=i.completed;if(!Mo(u,d.critical))return e;var p=Ao(d.critical,i.dimensions),h=r(a,jo(d.result)===a,p);return n(a,fn(d.impact)===a,p,h)}if("IDLE"===i.phase&&!i.completed&&i.shouldFlush)return t;if("IDLE"===i.phase&&i.completed){var m=i.completed;if(!Mo(u,m.critical))return e;var v=fn(m.impact)===a,g=Boolean(m.impact.merge);return i.shouldFlush?t:v?g?e:t:e}return e}}),{updateViewportMaxScroll:function(e){return{type:"UPDATE_VIEWPORT_MAX_SCROLL",payload:e}}},null,{context:Zi,pure:!0,areStatePropsEqual:Ro})((function(e){var t=Object(l.useContext)(ro);t||ke(!1);var n=t.style,r=t.isMovementAllowed,i=Object(l.useRef)(null),o=Object(l.useRef)(null),a=e.children,u=e.droppableId,s=e.type,f=e.direction,d=e.ignoreContainerClipping,p=e.isDropDisabled,h=e.isCombineEnabled,m=e.snapshot,v=e.updateViewportMaxScroll,g=ye((function(){return i.current}),[]),y=ye((function(){return o.current}),[]),b=ye((function(e){i.current=e}),[]),w=ye((function(e){o.current=e}),[]),x=ye((function(){r()&&v({maxScroll:vi()})}),[r,v]);!function(e){var t=Object(l.useRef)(null),n=Eo(ro).marshal,r=io(e),i=ge((function(){return{id:e.droppableId,type:e.type}}),[e.droppableId,e.type]),o=Object(l.useRef)(i),a=ge((function(){return Ft((function(e,r){t.current||ke(!1);var o={x:e,y:r};n.updateDroppableScroll(i.id,o)}))}),[i.id,n]),u=ye((function(){var e=t.current;return e&&e.env.closestScrollable?go(e.env.closestScrollable):Qt}),[]),c=ye((function(){var e=u();a(e.x,e.y)}),[u,a]),s=ge((function(){return $t(c)}),[c]),f=ye((function(){var e=t.current,n=ko(e);e&&n||ke(!1),e.scrollOptions.shouldPublishImmediately?c():s()}),[s,c]),d=ye((function(e,n){t.current&&ke(!1);var o=r.current,a=o.getDroppableRef();a||ke(!1);var u=yo(a),l={ref:a,descriptor:i,env:u,scrollOptions:n};t.current=l;var c=bo({ref:a,descriptor:i,env:u,windowScroll:e,direction:o.direction,isDropDisabled:o.isDropDisabled,isCombineEnabled:o.isCombineEnabled,shouldClipSubject:!o.ignoreContainerClipping});return u.closestScrollable&&u.closestScrollable.addEventListener("scroll",f,_o(l.scrollOptions)),c}),[i,f,r]),p=ye((function(e){var n=t.current,i=ko(n);n&&i||ke(!1);var o=r.current,a=function(){return bo({ref:n.ref,descriptor:n.descriptor,env:n.env,windowScroll:Qt,direction:o.direction,isDropDisabled:o.isDropDisabled,isCombineEnabled:o.isCombineEnabled,shouldClipSubject:!o.ignoreContainerClipping})};return e.withoutPlaceholder?function(e,t){if(!e)return t();var n=e.style.display;e.style.display="none";var r=t();return e.style.display=n,r}(o.getPlaceholderRef(),a):a()}),[r]),h=ye((function(){var e=t.current;e||ke(!1);var n=ko(e);t.current=null,n&&(s.cancel(),n.removeEventListener("scroll",f,_o(e.scrollOptions)))}),[f,s]),m=ye((function(e){var n=t.current;n||ke(!1);var r=ko(n);r||ke(!1),r.scrollTop+=e.y,r.scrollLeft+=e.x}),[]),v=ge((function(){return{getDimensionAndWatchScroll:d,recollect:p,dragStopped:h,scroll:m}}),[h,d,p,m]);Yi((function(){return o.current=i,n.registerDroppable(i,v),function(){t.current&&h(),n.unregisterDroppable(i)}}),[v,i,h,n]),Yi((function(){t.current&&n.updateDroppableIsEnabled(o.current.id,!e.isDropDisabled)}),[e.isDropDisabled,n]),Yi((function(){t.current&&n.updateDroppableIsCombineEnabled(o.current.id,e.isCombineEnabled)}),[e.isCombineEnabled,n])}({droppableId:u,type:s,direction:f,isDropDisabled:p,isCombineEnabled:h,ignoreContainerClipping:d,getDroppableRef:g,getPlaceholderRef:y});var _,E=c.a.createElement(Io,{on:e.placeholder,shouldAnimate:e.shouldAnimatePlaceholder},(function(e){var t=e.onClose,r=e.data,i=e.animate;return c.a.createElement(Po,{placeholder:r,onClose:t,innerRef:w,animate:i,styleContext:n,onTransitionEnd:x})})),k=ge((function(){return{innerRef:b,placeholder:E,droppableProps:{"data-react-beautiful-dnd-droppable":n}}}),[E,b,n]),S=ge((function(){return{droppableId:u,type:s}}),[u,s]);return(_={props:e,getDroppableRef:function(){return i.current},getPlaceholderRef:function(){return o.current}}).props,_.getDroppableRef,_.getPlaceholderRef,Object(l.useEffect)((function(){})),c.a.createElement(Oo.Provider,{value:S},a(k,m))}));Lo.defaultProps={type:"DEFAULT",direction:"vertical",isDropDisabled:!1,isCombineEnabled:!1,ignoreContainerClipping:!1};var Fo={dragging:5e3,dropAnimating:4500},zo=function(e,t){return t?$r.drop(t.duration):e?$r.snap:$r.fluid},Bo=function(e,t){return e?t?Wr.drop:Wr.combining:null},Uo=function(e){return null!=e.forceShouldAnimate?e.forceShouldAnimate:"SNAP"===e.mode};function Wo(e){return"DRAGGING"===e.type?function(e){var t=e.dimension.client,n=e.offset,r=e.combineWith,i=e.dropping,o=Boolean(r),a=Uo(e),u=Boolean(i),l=u?qr.drop(n,o):qr.moveTo(n);return{position:"fixed",top:t.marginBox.top,left:t.marginBox.left,boxSizing:"border-box",width:t.borderBox.width,height:t.borderBox.height,transition:zo(a,i),transform:l,opacity:Bo(o,u),zIndex:u?Fo.dropAnimating:Fo.dragging,pointerEvents:"none"}}(e):(t=e,{transform:qr.moveTo(t.offset),transition:t.shouldAnimateDisplacement?null:"none"});var t}var Vo,Ho=function(){var e=!1;return{handle:function(){e&&ke(!1),e=!0},isHandled:function(){return e},reset:function(){e=!1}}},$o=function(e,t){return me({},e,t)},Go=function(e,t,n){t.forEach((function(t){var r=$o(n,t.options);e.addEventListener(t.eventName,t.fn,r)}))},qo=function(e,t,n){t.forEach((function(t){var r=$o(n,t.options);e.removeEventListener(t.eventName,t.fn,r)}))},Qo=function(e){var t=Ft((function(t,n){var r={x:t,y:n};e.onMove(r)})),n=$t((function(e){return t(e.x,e.y)})),r=$t(e.onMoveUp),i=$t(e.onMoveDown),o=$t(e.onMoveRight),a=$t(e.onMoveLeft),u=$t(e.onWindowScroll);return{move:n,moveUp:r,moveDown:i,moveRight:o,moveLeft:a,windowScrollMove:u,cancel:function(){n.cancel(),r.cancel(),i.cancel(),o.cancel(),a.cancel(),u.cancel()}}},Ko=27,Yo=32,Xo=37,Jo=38,Zo=39,ea=40,ta=function(){var e="visibilitychange";return"undefined"===typeof document?e:hn([e,"ms"+e,"webkit"+e,"moz"+e,"o"+e],(function(e){return"on"+e in document}))||e}(),na={capture:!0},ra=function(e){var t=!1,n=function(){t&&(t=!1,qo(e(),r,na))},r=[{eventName:"click",fn:function(e){e.preventDefault(),n()}},{eventName:"mousedown",fn:n},{eventName:"touchstart",fn:n}];return{preventNext:function(){t&&n(),t||(t=!0,Go(e(),r,na))},abort:n}},ia=function(e,t){return Math.abs(t.x-e.x)>=5||Math.abs(t.y-e.y)>=5},oa=((Vo={})[13]=!0,Vo[9]=!0,Vo),aa=function(e){oa[e.keyCode]&&e.preventDefault()},ua=0,la=function(){},ca=Ho();function sa(e){return e instanceof Do(e).Element}var fa,da={input:!0,button:!0,textarea:!0,select:!0,option:!0,optgroup:!0,video:!0,audio:!0},pa=function(e,t){if(t)return!0;var n=e.target,r=e.currentTarget;return!sa(n)||!sa(r)||!function e(t,n){if(null==n)return!1;if(Boolean(da[n.tagName.toLowerCase()]))return!0;var r=n.getAttribute("contenteditable");return"true"===r||""===r||n!==t&&e(t,n.parentElement)}(r,n)},ha=function(e){return Tt(e.getBoundingClientRect()).center},ma=((fa={})[34]=!0,fa[33]=!0,fa[36]=!0,fa[35]=!0,fa);function va(){}var ga=120,ya=.15,ba=Ho(),wa=function(){};var xa="["+$i+"]",_a=function(e){!function(e){return Boolean(Do(e).SVGElement)&&e instanceof Do(e).SVGElement}(e)||ke(!1)},Ea=function(e){if(e.hasAttribute($i))return _a(e),e;var t=e.querySelector(xa);return _a(e),t||ke(!1),No(t)||ke(!1),t};var ka=null,Sa={capture:!0},Ca=function(){var e=!1,t=function(){e&&(e=!1,window.removeEventListener("focus",n,Sa))},n=function(){t(),ka=null},r=function(){e||(e=!0,window.addEventListener("focus",n,Sa))};return r.cancel=function(){return t()},r}(),Ta={retain:function(e){ka=e,Ca()},tryRestoreFocus:function(e,t){if(ka&&e===ka){ka=null,Ca.cancel();var n=Ea(t);n&&n.focus()}}};function Pa(){}function Oa(e){e.preventDefault()}function Da(e){var t=Object(l.useRef)(null),n=ye((function(e){t.current&&ke(!1),t.current={abort:e}}),[]),r=ye((function(){t.current||ke(!1),t.current=null}),[]),i=ye((function(){t.current||ke(!1),t.current.abort()}),[]),o=Eo(ro),a=o.canLift,u=o.style,c=e.isDragging,s=e.isEnabled,f=e.draggableId,d=e.callbacks,p=e.getDraggableRef,h=e.getShouldRespectForcePress,m=e.canDragInteractiveElements,v=io(e);!function(e){var t=e.isEnabled,n=e.getDraggableRef;Object(l.useEffect)((function(){}),[n,t])}({isEnabled:s,getDraggableRef:p});var g=ye((function(){return Do(p())}),[p]),y=ye((function(e){return!!s&&(!t.current&&(!!a(f)&&pa(e,m)))}),[m,a,f,s]),b=function(e){var t=Object(l.useRef)(!1),n=io(e),r=e.getDraggableRef,i=ye((function(){t.current=!0}),[]),o=ye((function(){t.current=!1}),[]);Yi((function(){var e=n.current;if(!e.isEnabled)return Pa;var i=r();i||ke(!1);var o=Ea(i);return Ta.tryRestoreFocus(e.draggableId,o),function(){var e=n.current;!!e.isEnabled&&!!t.current&&(e.isDragging||e.isDropAnimating)&&Ta.retain(e.draggableId)}}),[r,n]);var a=Object(l.useRef)(null);return Yi((function(){if(a.current){var e=r();e&&e!==a.current&&t.current&&n.current.isEnabled&&Ea(e).focus()}})),Yi((function(){a.current=r()})),{onBlur:o,onFocus:i}}(e),w=b.onBlur,x=b.onFocus,_=function(e){var t=e.canStartCapturing,n=e.getWindow,r=e.callbacks,i=e.onCaptureStart,o=e.onCaptureEnd,a=Object(l.useRef)(null),u=Object(l.useRef)(!1),c=Object(l.useRef)(la),s=ye((function(){return Boolean(a.current||u.current)}),[]),f=ge((function(){return s()&&ke(!1),Qo(r)}),[r,s]),d=ge((function(){return ra(n)}),[n]),p=ye((function(){if(s()){f.cancel(),c.current();var e=u.current;ca.reset(),e&&d.preventNext(),a.current=null,u.current=!1,o()}}),[s,o,d,f]),h=ye((function(){var e=u.current;p(),e&&r.onCancel()}),[r,p]),m=ye((function(){u.current&&ke(!1);var e=a.current;e||ke(!1),a.current=null,u.current=!0,r.onLift({clientSelection:e,movementMode:"FLUID"})}),[r]),v=ge((function(){return s()&&ke(!1),[{eventName:"mousemove",fn:function(e){var t=e.button,n=e.clientX,r=e.clientY;if(t===ua){var i={x:n,y:r};if(u.current)return e.preventDefault(),void f.move(i);var o=a.current;o||(p(),ke(!1)),ia(o,i)&&(e.preventDefault(),m())}}},{eventName:"mouseup",fn:function(e){var t=u.current;p(),t&&(e.preventDefault(),r.onDrop())}},{eventName:"mousedown",fn:function(e){u.current&&e.preventDefault(),h()}},{eventName:"keydown",fn:function(e){if(!a.current)return e.keyCode===Ko?(e.preventDefault(),void h()):void aa(e);p()}},{eventName:"resize",fn:h},{eventName:"scroll",options:{passive:!0,capture:!1},fn:function(e){e.currentTarget===n()&&(a.current?p():f.windowScrollMove())}},{eventName:"webkitmouseforcedown",fn:function(){h()}},{eventName:ta,fn:h}]}),[s,h,m,f,p,r,n]),g=ye((function(){var e=n(),t={capture:!0};c.current=function(){return qo(e,v,t)},Go(e,v,t)}),[n,v]),y=ye((function(e){a.current&&ke(!1),a.current=e,i(p),g()}),[g,i,p]);return ye((function(e){if(!ca.isHandled()&&(s()&&ke(!1),t(e)&&e.button===ua&&!(e.ctrlKey||e.metaKey||e.shiftKey||e.altKey))){ca.handle(),e.preventDefault();var n={x:e.clientX,y:e.clientY};y(n)}}),[t,s,y])}(ge((function(){return{callbacks:d,getDraggableRef:p,getWindow:g,canStartCapturing:y,onCaptureStart:n,onCaptureEnd:r,getShouldRespectForcePress:h}}),[d,p,g,y,n,r,h])),E=function(e){var t=e.canStartCapturing,n=e.getWindow,r=e.callbacks,i=e.onCaptureStart,o=e.onCaptureEnd,a=e.getDraggableRef,u=Object(l.useRef)(!1),c=Object(l.useRef)(va),s=ye((function(){return u.current}),[]),f=ge((function(){return s()&&ke(!1),Qo(r)}),[r,s]),d=ye((function(){s()&&(f.cancel(),c.current(),u.current=!1,o())}),[s,o,f]),p=ye((function(){var e=u.current;d(),e&&r.onCancel()}),[r,d]),h=ge((function(){return s()&&ke(!1),[{eventName:"mousedown",fn:p},{eventName:"mouseup",fn:p},{eventName:"click",fn:p},{eventName:"touchstart",fn:p},{eventName:"resize",fn:p},{eventName:"wheel",fn:p,options:{passive:!0}},{eventName:"scroll",options:{capture:!1},fn:function(e){e.currentTarget===n()&&r.onWindowScroll()}},{eventName:ta,fn:p}]}),[r,p,s,n]),m=ye((function(){var e=n(),t={capture:!0};c.current=function(){return qo(e,h,t)},Go(e,h,t)}),[n,h]),v=ye((function(){u.current&&ke(!1);var e=a();e||ke(!1),u.current=!0,i(d),m();var t=ha(e);r.onLift({clientSelection:t,movementMode:"SNAP"})}),[m,r,a,i,d]);return ye((function(e){if(!s()){if(e.defaultPrevented)return;if(!t(e))return;if(e.keyCode!==Yo)return;return e.preventDefault(),void v()}return e.keyCode===Ko?(e.preventDefault(),void p()):e.keyCode===Yo?(e.preventDefault(),d(),void r.onDrop()):e.keyCode===ea?(e.preventDefault(),void f.moveDown()):e.keyCode===Jo?(e.preventDefault(),void f.moveUp()):e.keyCode===Zo?(e.preventDefault(),void f.moveRight()):e.keyCode===Xo?(e.preventDefault(),void f.moveLeft()):void(ma[e.keyCode]?e.preventDefault():aa(e))}),[r,t,p,s,f,v,d])}(ge((function(){return{callbacks:d,getDraggableRef:p,getWindow:g,canStartCapturing:y,onCaptureStart:n,onCaptureEnd:r}}),[d,y,p,g,r,n])),k=function(e){var t=e.callbacks,n=e.getWindow,r=e.canStartCapturing,i=e.getShouldRespectForcePress,o=e.onCaptureStart,a=e.onCaptureEnd,u=Object(l.useRef)(null),c=Object(l.useRef)(!1),s=Object(l.useRef)(!1),f=Object(l.useRef)(wa),d=ye((function(){return Boolean(u.current||c.current)}),[]),p=ge((function(){return ra(n)}),[n]),h=ge((function(){return d()&&ke(!1),Qo(t)}),[t,d]),m=ye((function(){if(d()){if(h.cancel(),f.current(),ba.reset(),s.current=!1,a(),c.current)return p.preventNext(),void(c.current=!1);var e=u.current;e||ke(!1),clearTimeout(e.longPressTimerId),u.current=null}}),[d,a,p,h]),v=ye((function(){var e=c.current;m(),e&&t.onCancel()}),[t,m]),g=ge((function(){return d()&&ke(!1),[{eventName:"touchmove",options:{passive:!1,capture:!1},fn:function(e){if(c.current){s.current||(s.current=!0);var t=e.touches[0];if(t){var n={x:t.clientX,y:t.clientY};e.preventDefault(),h.move(n)}}else m()}},{eventName:"touchend",fn:function(e){c.current?(e.preventDefault(),m(),t.onDrop()):m()}},{eventName:"touchcancel",fn:function(e){c.current?(e.preventDefault(),v()):m()}},{eventName:"touchstart",fn:v},{eventName:"orientationchange",fn:v},{eventName:"resize",fn:v},{eventName:"scroll",options:{passive:!0,capture:!1},fn:function(){u.current?m():h.windowScrollMove()}},{eventName:"contextmenu",fn:function(e){e.preventDefault()}},{eventName:"keydown",fn:function(e){c.current?(e.keyCode===Ko&&e.preventDefault(),v()):v()}},{eventName:"touchforcechange",fn:function(e){if(e.touches[0].force>=ya){var t=i();if(!u.current)return t?s.current?void e.preventDefault():void v():void e.preventDefault();t&&v()}}},{eventName:ta,fn:v}]}),[t,v,d,i,h,m]),y=ye((function(){var e=n(),t={capture:!0};f.current=function(){return qo(e,g,t)},Go(e,g,t)}),[n,g]),b=ye((function(){var e=u.current;e||ke(!1),c.current=!0,u.current=null,s.current=!1,t.onLift({clientSelection:e.point,movementMode:"FLUID"})}),[t]),w=ye((function(e){u.current&&ke(!1);var t=e.touches[0],n={point:{x:t.clientX,y:t.clientY},longPressTimerId:setTimeout(b,ga)};u.current=n,o(m),y()}),[y,o,b,m]);return Yi((function(){return Go(window,[{eventName:"touchmove",fn:wa,options:{capture:!1,passive:!1}}])}),[]),function(e){ba.isHandled()||(d()&&ke(!1),r(e)&&(ba.handle(),w(e)))}}(ge((function(){return{callbacks:d,getDraggableRef:p,getWindow:g,canStartCapturing:y,getShouldRespectForcePress:h,onCaptureStart:n,onCaptureEnd:r}}),[d,p,g,y,h,n,r]));return Yi((function(){return function(){t.current&&(i(),v.current.isDragging&&v.current.callbacks.onCancel())}}),[]),!s&&t.current&&(i(),v.current.isDragging&&d.onCancel()),Yi((function(){!c&&t.current&&i()}),[i,c]),ge((function(){return s?{onMouseDown:_,onKeyDown:E,onTouchStart:k,onFocus:x,onBlur:w,tabIndex:0,"data-react-beautiful-dnd-drag-handle":u,"aria-roledescription":"Draggable item. Press space bar to lift",draggable:!1,onDragStart:Oa}:null}),[s,w,x,E,_,k,u])}function Na(e){var t=e.draggableId,n=e.index,r=e.getDraggableRef,i=Eo(ro).marshal,o=Eo(Oo),a=o.droppableId,u=o.type,c=ge((function(){return{id:t,droppableId:a,type:u,index:n}}),[t,a,n,u]),s=Object(l.useRef)(c),f=ye((function(e){var t=s.current,n=r();return n||ke(!1),function(e,t,n){void 0===n&&(n=Qt);var r=window.getComputedStyle(t),i=t.getBoundingClientRect(),o=Mt(i,r),a=jt(o,n);return{descriptor:e,placeholder:{client:o,tagName:t.tagName.toLowerCase(),display:r.display},displaceBy:{x:o.marginBox.width,y:o.marginBox.height},client:o,page:a}}(t,n,e)}),[r]);Yi((function(){return i.registerDraggable(s.current,f),function(){return i.unregisterDraggable(s.current)}}),[f,i]),Yi((function(){if(s.current!==c){var e=s.current;s.current=c,i.updateDraggable(e,c,f)}}),[c,f,i])}var Ia=wt((function(){var e=Ft((function(e,t,n,r){return{isDragging:!0,isDropAnimating:Boolean(r),dropAnimation:r,mode:e,draggingOver:t,combineWith:n,combineTargetFor:null}})),t=Ft((function(e){return{isDragging:!1,isDropAnimating:!1,dropAnimation:null,mode:null,draggingOver:null,combineTargetFor:e,combineWith:null}})),n={mapped:{type:"SECONDARY",offset:Qt,combineTargetFor:null,shouldAnimateDisplacement:!0,snapshot:t(null)}},r=Ft((function(e,t){return{x:e,y:t}})),i=Ft((function(t,n,r,i,o,a){return{mapped:{type:"DRAGGING",dropping:null,draggingOver:i,combineWith:o,mode:n,offset:t,dimension:r,forceShouldAnimate:a,snapshot:e(n,i,o,null)}}})),o=Ft((function(e,n,r){return void 0===n&&(n=null),{mapped:{type:"SECONDARY",offset:e,combineTargetFor:n,shouldAnimateDisplacement:r,snapshot:t(n)}}})),a=function(e,t,n){var i=n.movement.map[e],a=n.movement,u=n.merge,l=Boolean(u&&u.combine.draggableId===e),c=a.displacedBy.point,s=r(c.x,c.y);return l?o(i?s:Qt,t,!i||i.shouldAnimate):i&&i.isVisible?o(s,null,i.shouldAnimate):null};return function(t,o){return function(t,n){if(t.isDragging){if(t.critical.draggable.id!==n.draggableId)return null;var o=t.current.client.offset,a=t.dimensions.draggables[n.draggableId],u=t.movementMode,l=fn(t.impact),c=(f=t.impact).merge?f.merge.combine.draggableId:null,s=t.forceShouldAnimate;return i(r(o.x,o.y),u,a,l,c,s)}var f;if("DROP_ANIMATING"===t.phase){var d=t.completed;if(d.result.draggableId!==n.draggableId)return null;var p=t.dimensions.draggables[n.draggableId],h=d.result,m=h.mode,v=jo(h),g=function(e){return e.combine?e.combine.draggableId:null}(h),y={duration:t.dropDuration,curve:Ur,moveTo:t.newHomeClientOffset,opacity:g?Wr.drop:null,scale:g?Vr.drop:null};return{mapped:{type:"DRAGGING",offset:t.newHomeClientOffset,dimension:p,dropping:y,draggingOver:v,combineWith:g,mode:m,forceShouldAnimate:null,snapshot:e(m,v,g,y)}}}return null}(t,o)||function(e,t){if(e.isDragging)return e.critical.draggable.id===t.draggableId?null:a(t.draggableId,e.critical.draggable.id,e.impact);if("DROP_ANIMATING"===e.phase){var n=e.completed;return n.result.draggableId===t.draggableId?null:a(t.draggableId,n.result.draggableId,n.impact)}return null}(t,o)||n}}),{lift:function(e){return{type:"LIFT",payload:e}},move:Lr,moveUp:function(){return{type:"MOVE_UP",payload:null}},moveDown:function(){return{type:"MOVE_DOWN",payload:null}},moveLeft:function(){return{type:"MOVE_LEFT",payload:null}},moveRight:function(){return{type:"MOVE_RIGHT",payload:null}},moveByWindowScroll:function(e){return{type:"MOVE_BY_WINDOW_SCROLL",payload:e}},drop:Br,dropAnimationFinished:function(){return{type:"DROP_ANIMATION_FINISHED",payload:null}}},null,{context:Zi,pure:!0,areStatePropsEqual:Ro})((function(e){var t=Object(l.useRef)(null),n=ye((function(e){t.current=e}),[]),r=ye((function(){return t.current}),[]),i=Eo(ro);Object(l.useEffect)((function(){}));var o=e.children,a=e.draggableId,u=e.isDragDisabled,c=e.shouldRespectForcePress,s=e.disableInteractiveElementBlocking,f=e.index,d=e.mapped,p=e.moveUp,h=e.move,m=e.drop,v=e.moveDown,g=e.moveRight,y=e.moveLeft,b=e.moveByWindowScroll,w=e.lift,x=e.dropAnimationFinished;Na(ge((function(){return{draggableId:a,index:f,getDraggableRef:r}}),[a,r,f]));var _=ye((function(e){cn("LIFT"),t.current||ke(!1),u&&ke(!1);var n=e.clientSelection,r=e.movementMode;w({id:a,clientSelection:n,movementMode:r}),sn("LIFT")}),[a,u,w]),E=ye((function(){return c}),[c]),k=ge((function(){return{onLift:_,onMove:function(e){return h({client:e})},onDrop:function(){return m({reason:"DROP"})},onCancel:function(){return m({reason:"CANCEL"})},onMoveUp:p,onMoveDown:v,onMoveRight:g,onMoveLeft:y,onWindowScroll:function(){return b({newScroll:hi()})}}}),[m,h,b,v,y,g,p,_]),S="DRAGGING"===d.type,C="DRAGGING"===d.type&&Boolean(d.dropping),T=Da(ge((function(){return{draggableId:a,isDragging:S,isDropAnimating:C,isEnabled:!u,callbacks:k,getDraggableRef:r,canDragInteractiveElements:s,getShouldRespectForcePress:E}}),[k,s,a,r,E,u,S,C])),P=ye((function(e){"DRAGGING"===d.type&&d.dropping&&"transform"===e.propertyName&&x()}),[x,d]);return o(ge((function(){var e=Wo(d),t="DRAGGING"===d.type&&d.dropping?P:null;return{innerRef:n,draggableProps:{"data-react-beautiful-dnd-draggable":i.style,style:e,onTransitionEnd:t},dragHandleProps:T}}),[i.style,T,d,P,n]),d.snapshot)}));Ia.defaultProps={isDragDisabled:!1,disableInteractiveElementBlocking:!1,shouldRespectForcePress:!1};n(132);var Ra={"":{plural_forms:"plural=(n!=1)"}},ja=(L()(console.error),new M({}));function Ma(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"default",t=arguments.length>1?arguments[1]:void 0,n=arguments.length>2?arguments[2]:void 0,r=arguments.length>3?arguments[3]:void 0,i=arguments.length>4?arguments[4]:void 0;return ja.data[e]||function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"default";ja.data[t]=Object(D.a)({},Ra,ja.data[t],e),ja.data[t][""]=Object(D.a)({},Ra[""],ja.data[t][""])}(void 0,e),ja.dcnpgettext(e,t,n,r,i)}function Aa(e,t){return Ma(t,void 0,e)}fe.use(fe.createRootURLMiddleware(window.epOrdering.restApiRoot));var La=function(e){function t(e){var n;return g()(this,t),n=x()(this,E()(t).call(this,e)),O()(S()(n),"titleInput",null),O()(S()(n),"handleTitleChange",(function(){n.setState({title:n.titleInput.value}),n.debouncedDefaultResults()})),O()(S()(n),"debouncedDefaultResults",de((function(){n.getDefaultResults()}),200)),O()(S()(n),"getDefaultResults",(function(){var e=n.state.title;fe({path:"/elasticpress/v1/pointer_preview?s=".concat(e)}).then((function(t){var r=n.state.defaultResults;r[e]=t,n.setState({defaultResults:r})}))})),O()(S()(n),"removePointer",(function(e){var t=n.state.pointers;delete t[t.indexOf(e)],t=t.filter((function(e){return null!==e})),n.setState({pointers:t})})),O()(S()(n),"getMergedPosts",(function(){var e=n.state.defaultResults[n.state.title].slice(),t=n.state.pointers,r={};return e.map((function(e){r[e.ID]=e})),(t=t.sort((function(e,t){return e.order>t.order?1:-1}))).map((function(t){r[t.ID]&&(delete e[e.indexOf(r[t.ID])],e=e.filter((function(e){return e}))),e.splice(parseInt(t.order,10)-1,0,t)})),e})),O()(S()(n),"doSearch",de((function(){var e=n.state.searchText,t=n.state.searchResults;t[e]=!1,n.setState({searchResults:t}),fe({path:"/elasticpress/v1/pointer_search?s=".concat(e)}).then((function(t){var r=n.state.searchResults;r[e]=t,n.setState({searchResults:r})}))}),200)),O()(S()(n),"getNextAvailablePosition",(function(){for(var e=n.state.pointers,t={},r=1;r<=window.epOrdering.postsPerPage;r++)t[r]=!0;e.map((function(e){delete t[e.order]}));var i=Object.keys(t);return 0!==i.length&&parseInt(i[0],10)})),O()(S()(n),"addPointer",(function(e){var t=e.ID,r=n.state,i=r.posts,o=r.pointers;i[t]||(i[t]=e,n.setState({posts:i}));var a=n.getNextAvailablePosition();if(!a)return window.alert(Aa("You have added the maximum number of custom results.","elasticpress")),!1;o.push({ID:t,order:a}),n.setState({pointers:o})})),O()(S()(n),"onDragComplete",(function(e){if(e.destination){var t=n.getMergedPosts(),r=parseInt(window.epOrdering.postsPerPage,10),i=e.source.index>=r?e.source.index-1:e.source.index,o=e.destination.index>r?e.destination.index-1:e.destination.index,a=t.splice(i,1),u=m()(a,1)[0];t.splice(o,0,u);var l=[];t.map((function(t,n){t.order?l.push({ID:t.ID,order:n+1}):t.ID===e.draggableId&&l.push({ID:t.ID,order:n+1})})),n.setState({pointers:l})}})),O()(S()(n),"searchResults",(function(e){if(""!==n.state.searchText)return!1===e?Object(u.a)("div",{className:"loading"},Object(u.a)("div",{className:"spinner is-active"}),"Loading..."):0===e.length?Object(u.a)("div",{className:"no-results"},Aa("No results found.","elasticpress")):e.map((function(e){return Object(u.a)("div",{className:"pointer-result",key:e.ID},Object(u.a)("span",{className:"title"},e.post_title),Object(u.a)("span",{className:"dashicons dashicons-plus add-pointer",onClick:function(t){t.preventDefault(),n.addPointer(e)}},Object(u.a)("span",{className:"screen-reader-text"},Aa("Add Post","elasticpress"))))}))})),n.titleInput=document.getElementById("title"),n.state={pointers:window.epOrdering.pointers,posts:window.epOrdering.posts,title:n.titleInput.value,defaultResults:{},searchText:"",searchResults:{}},n.titleInput.addEventListener("keyup",de(n.handleTitleChange,200)),0<n.state.title.length&&n.getDefaultResults(),n}return T()(t,e),b()(t,[{key:"render",value:function(){var e=this,t=this.state,n=t.posts,r=t.defaultResults;if(0===this.state.title.length)return Object(u.a)("div",{className:"new-post"},Object(u.a)("p",null,Aa("Enter your search query above to preview the results.","elasticpress")));if(!r[this.state.title])return Object(u.a)("div",{className:"loading"},Object(u.a)("div",{className:"spinner is-active"}),Object(u.a)("span",null,Aa("Loading Result Preview...","elasticpress")));var i={};r[this.state.title].map((function(e){i[e.ID]=e}));var o,a,l=this.getMergedPosts(),s=(o=this.state.pointers,a="ID",o.map((function(e){return e[a]}))),f=!!this.state.searchResults[this.state.searchText]&&this.state.searchResults[this.state.searchText].filter((function(e){return-1===s.indexOf(e.ID)}));return Object(u.a)("div",null,Object(u.a)("input",{type:"hidden",name:"search-ordering-nonce",value:window.epOrdering.nonce}),Object(u.a)("input",{type:"hidden",name:"ordered_posts",value:JSON.stringify(this.state.pointers)}),Object(u.a)(co,{onDragEnd:this.onDragComplete},Object(u.a)(Lo,{droppableId:"droppable"},(function(t){return Object(u.a)("div",p()({className:"pointers"},t.droppableProps,{ref:t.innerRef}),l.map((function(t,r){var o=parseInt(window.epOrdering.postsPerPage,10)<=r?r+1:r,a=t.title;void 0===a&&(a=void 0!==n[t.ID]?n[t.ID].post_title:i[t.ID].post_title);var l=void 0!==i[t.ID],s=Aa(!0===l?"Return to original position":"Remove custom result from results list","elasticpress");return Object(u.a)(c.a.Fragment,{key:r},parseInt(window.epOrdering.postsPerPage,10)===r&&Object(u.a)(Ia,{key:"divider",draggableId:"divider",index:r,isDragDisabled:!1},(function(e){return Object(u.a)("div",p()({className:"next-page-notice ".concat(r),ref:e.innerRef},e.draggableProps,e.dragHandleProps),Object(u.a)("span",null,Aa("The following posts have been displaced to the next page of search results.","elasticpress")))})),Object(u.a)(Ia,{key:t.ID,draggableId:t.ID,index:o},(function(n){return Object(u.a)("div",p()({className:"pointer ".concat(o),ref:n.innerRef},n.draggableProps),t.order&&!0===l&&Object(u.a)("span",{className:"pointer-type"},"RD"),t.order&&!1===l&&Object(u.a)("span",{className:"pointer-type"},"CR"),Object(u.a)("strong",{className:"title"},a),Object(u.a)("div",{className:"pointer-actions"},Object(u.a)("span",p()({className:"dashicons dashicons-menu-alt handle"},n.dragHandleProps,{title:Aa("Drag post up or down to reposition","elasticpress")})),t.order&&Object(u.a)("span",{title:s,className:"dashicons dashicons-undo delete-pointer",onClick:function(n){n.preventDefault(),e.removePointer(t)}},Object(u.a)("span",{className:"screen-reader-text"},"Remove Post"))))})))})),t.placeholder)}))),Object(u.a)("div",{className:"legend"},Object(u.a)("div",{className:"legend-item"},Object(u.a)("span",{className:"pointer-type"},"CR"),Object(u.a)("span",{className:"type-description"},Aa("Custom Result (manually added to list)","elasticpress"))),Object(u.a)("div",{className:"legend-item"},Object(u.a)("span",{className:"pointer-type"},"RD"),Object(u.a)("span",{className:"type-description"},Aa("Reordered Default (originally in results, but repositioned)","elasticpress")))),Object(u.a)("div",{className:"pointer-search"},Object(u.a)("h2",{className:"section-title"},Aa("Add to results","elasticpress")),Object(u.a)("div",{className:"search-wrapper"},Object(u.a)("div",{className:"input-wrap"},Object(u.a)("input",{type:"text",className:"widefat search-pointers",placeholder:"Search for Post",value:this.state.searchText,onChange:function(t){e.setState({searchText:t.target.value}),e.doSearch()}})),Object(u.a)("div",{className:"pointer-results"},this.searchResults(f)))))}}]),t}(l.Component);f.a.render(Object(u.a)(La,null),document.getElementById("ordering-app"))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B3b3JkcHJlc3MvZWxlbWVudC9idWlsZC1tb2R1bGUvc2VyaWFsaXplLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9Ad29yZHByZXNzL2VsZW1lbnQvYnVpbGQtbW9kdWxlL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9mYWlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHdvcmRwcmVzcy9lbGVtZW50L25vZGVfbW9kdWxlcy9yZWFjdC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9kZXNjcmlwdG9ycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaGlkZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaGFzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9leHBvcnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FuLW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZGVmaW5lUHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFNwcmVhZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc2hhcmVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8tbGVuZ3RoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvbG9kYXNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1pbnRlZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zZXQtZ2xvYmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jbGFzc29mLXJhdy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8tb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8tcHJpbWl0aXZlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9oaWRkZW4ta2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZW51bS1idWcta2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaW5kZXhlZC1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2llOC1kb20tZGVmaW5lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9mdW5jdGlvbi10by1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3VpZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWtleXMtaW50ZXJuYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2RvY3VtZW50LWNyZWF0ZS1lbGVtZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zaGFyZWQta2V5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9nZXQtYnVpbHQtaW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLWFic29sdXRlLWluZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1zcGVjaWVzLWNyZWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlLmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1wcm9wZXJ0eS1pcy1lbnVtZXJhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9yZWRlZmluZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hLWZ1bmN0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1pbmNsdWRlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LXN5bWJvbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1tZXRob2QtaGFzLXNwZWNpZXMtc3VwcG9ydC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtcHVyZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL25hdGl2ZS13ZWFrLW1hcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY29weS1jb25zdHJ1Y3Rvci1wcm9wZXJ0aWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vd24ta2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcGF0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLWZvcmNlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYmluZC1jb250ZXh0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9uYXRpdmUtc3ltYm9sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9Ad29yZHByZXNzL2VsZW1lbnQvbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS1jb3JlanMyL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fY29yZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaW52YXJpYW50L2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3Nsb3BweS1hcnJheS1tZXRob2QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3doaXRlc3BhY2VzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9vYmplY3QtYXNzaWduL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkubWFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS1jb3JlanMyL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZXhwb3J0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS1jb3JlanMyL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZGVzY3JpcHRvcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3FzL2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc3RyaW5nLXRyaW0uanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL21vZHVsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lLWNvcmVqczIvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lLWNvcmVqczIvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pcy1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lLWNvcmVqczIvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19mYWlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21lbWl6ZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9jb3JlLWpzL29iamVjdC9hc3NpZ24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lLWNvcmVqczIvY29yZS1qcy9vYmplY3Qva2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZpbHRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnNvcnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5zcGxpY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3Qua2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnBhcnNlLWludC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcGFyc2UtaW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9Ad29yZHByZXNzL2VsZW1lbnQvbm9kZV9tb2R1bGVzL3JlYWN0L2Nqcy9yZWFjdC5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHdvcmRwcmVzcy9lbGVtZW50L25vZGVfbW9kdWxlcy9yZWFjdC1kb20vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHdvcmRwcmVzcy9lbGVtZW50L25vZGVfbW9kdWxlcy9zY2hlZHVsZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B3b3JkcHJlc3MvZWxlbWVudC9ub2RlX21vZHVsZXMvc2NoZWR1bGVyL2Nqcy9zY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5zbGljZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy90eXBlb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvc2V0UHJvdG90eXBlT2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3FzL2xpYi91dGlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2FuLW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3RvLWlvYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B3b3JkcHJlc3MvYXBpLWZldGNoL25vZGVfbW9kdWxlcy9zcHJpbnRmLWpzL3NyYy9zcHJpbnRmLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9yZWdlbmVyYXRvci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHdvcmRwcmVzcy9pMThuL25vZGVfbW9kdWxlcy9zcHJpbnRmLWpzL3NyYy9zcHJpbnRmLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9ob2lzdC1ub24tcmVhY3Qtc3RhdGljcy9kaXN0L2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzLmNqcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3ltYm9sLW9ic2VydmFibGUvZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lLWNvcmVqczIvY29yZS1qcy9kYXRlL25vdy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcXMvbGliL2Zvcm1hdHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lLWNvcmVqczIvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtZHAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lLWNvcmVqczIvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19kb20tY3JlYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS1jb3JlanMyL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faGFzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS1jb3JlanMyL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2RlZmluZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lLWNvcmVqczIvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190by1pbnRlZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS1jb3JlanMyL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fc2hhcmVkLWtleS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2VudW0tYnVnLWtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lLWNvcmVqczIvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtcGllLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS1jb3JlanMyL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fdG8tb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL3NsaWNlZFRvQXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lLWNvcmVqczIvY29yZS1qcy9vYmplY3QvY3JlYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9ub2RlX21vZHVsZXMvcmVhY3QtaXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N5bWJvbC1vYnNlcnZhYmxlL2VzL3BvbnlmaWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS1jb3JlanMyL2NvcmUtanMvb2JqZWN0L3ZhbHVlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9jb3JlLWpzL251bWJlci9pcy1pbnRlZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9janMvcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zY2hlZHVsZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NjaGVkdWxlci9janMvc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuaW5kZXgtb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXJyYXlXaXRoSG9sZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvaXRlcmFibGVUb0FycmF5TGltaXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvbm9uSXRlcmFibGVSZXN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9ub2RlX21vZHVsZXMvcmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9xcy9saWIvc3RyaW5naWZ5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9xcy9saWIvcGFyc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lLWNvcmVqczIvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvYXNzaWduLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS1jb3JlanMyL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYub2JqZWN0LmFzc2lnbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2N0eC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2EtZnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lLWNvcmVqczIvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19oaWRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS1jb3JlanMyL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faWU4LWRvbS1kZWZpbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lLWNvcmVqczIvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190by1wcmltaXRpdmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lLWNvcmVqczIvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19wcm9wZXJ0eS1kZXNjLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS1jb3JlanMyL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWFzc2lnbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1rZXlzLWludGVybmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS1jb3JlanMyL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fY29mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS1jb3JlanMyL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fYXJyYXktaW5jbHVkZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lLWNvcmVqczIvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190by1sZW5ndGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lLWNvcmVqczIvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190by1hYnNvbHV0ZS1pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3NoYXJlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2xpYnJhcnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lLWNvcmVqczIvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL191aWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lLWNvcmVqczIvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtZ29wcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lLWNvcmVqczIvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5vYmplY3QuY3JlYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS1jb3JlanMyL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWNyZWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1kcHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lLWNvcmVqczIvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19odG1sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2ZhY3RvcnlXaXRoVGhyb3dpbmdTaGltcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1pcy9janMvcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L25vZGVfbW9kdWxlcy9yZWFjdC1pcy9janMvcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2hhcm1vbnktbW9kdWxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS1jb3JlanMyL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L3ZhbHVlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM3Lm9iamVjdC52YWx1ZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lLWNvcmVqczIvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtdG8tYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lLWNvcmVqczIvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9mbi9vYmplY3Qva2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM2Lm9iamVjdC5rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS1jb3JlanMyL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LXNhcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L2ZuL2RhdGUvbm93LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS1jb3JlanMyL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYuZGF0ZS5ub3cuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lLWNvcmVqczIvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9mbi9udW1iZXIvaXMtaW50ZWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM2Lm51bWJlci5pcy1pbnRlZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS1jb3JlanMyL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXMtaW50ZWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHRhbm5pbi9wb3N0Zml4L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AdGFubmluL2V2YWx1YXRlL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AdGFubmluL2NvbXBpbGUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Rhbm5pbi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHRhbm5pbi9wbHVyYWwtZm9ybXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B3b3JkcHJlc3MvYXBpLWZldGNoL25vZGVfbW9kdWxlcy9Ad29yZHByZXNzL2kxOG4vYnVpbGQtbW9kdWxlL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9Ad29yZHByZXNzL2FwaS1mZXRjaC9idWlsZC1tb2R1bGUvbWlkZGxld2FyZXMvbm9uY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B3b3JkcHJlc3MvYXBpLWZldGNoL2J1aWxkLW1vZHVsZS9taWRkbGV3YXJlcy9uYW1lc3BhY2UtZW5kcG9pbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B3b3JkcHJlc3MvYXBpLWZldGNoL2J1aWxkLW1vZHVsZS9taWRkbGV3YXJlcy9yb290LXVybC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHdvcmRwcmVzcy9hcGktZmV0Y2gvYnVpbGQtbW9kdWxlL21pZGRsZXdhcmVzL3ByZWxvYWRpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FzeW5jVG9HZW5lcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B3b3JkcHJlc3MvdXJsL2J1aWxkLW1vZHVsZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHdvcmRwcmVzcy9hcGktZmV0Y2gvYnVpbGQtbW9kdWxlL21pZGRsZXdhcmVzL2ZldGNoLWFsbC1taWRkbGV3YXJlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9Ad29yZHByZXNzL2FwaS1mZXRjaC9idWlsZC1tb2R1bGUvbWlkZGxld2FyZXMvaHR0cC12MS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHdvcmRwcmVzcy9hcGktZmV0Y2gvYnVpbGQtbW9kdWxlL21pZGRsZXdhcmVzL3VzZXItbG9jYWxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9Ad29yZHByZXNzL2FwaS1mZXRjaC9idWlsZC1tb2R1bGUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vYXNzZXRzL2pzL3V0aWxzL2RlYm91bmNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXNtL2V4dGVuZHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3VzZS1tZW1vLW9uZS9kaXN0L3VzZS1tZW1vLW9uZS5lc20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdGlueS1pbnZhcmlhbnQvZGlzdC90aW55LWludmFyaWFudC5lc20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlZHV4L2VzL3JlZHV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb21wb25lbnRzL0NvbnRleHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL3V0aWxzL2JhdGNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy91dGlscy9TdWJzY3JpcHRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2NvbXBvbmVudHMvUHJvdmlkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29tcG9uZW50cy9jb25uZWN0QWR2YW5jZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL3V0aWxzL3NoYWxsb3dFcXVhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29ubmVjdC93cmFwTWFwVG9Qcm9wcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29ubmVjdC9tYXBEaXNwYXRjaFRvUHJvcHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2Nvbm5lY3QvbWFwU3RhdGVUb1Byb3BzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb25uZWN0L21lcmdlUHJvcHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2Nvbm5lY3Qvc2VsZWN0b3JGYWN0b3J5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb25uZWN0L2Nvbm5lY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2hvb2tzL3VzZVJlZHV4Q29udGV4dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvaG9va3MvdXNlU3RvcmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2hvb2tzL3VzZURpc3BhdGNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9ob29rcy91c2VTZWxlY3Rvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Nzcy1ib3gtbW9kZWwvZGlzdC9jc3MtYm94LW1vZGVsLmVzbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbWVtb2l6ZS1vbmUvZGlzdC9tZW1vaXplLW9uZS5lc20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JhZi1zY2hkL2Rpc3QvcmFmLXNjaGQuZXNtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1iZWF1dGlmdWwtZG5kL2Rpc3QvcmVhY3QtYmVhdXRpZnVsLWRuZC5lc20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B3b3JkcHJlc3MvaTE4bi9idWlsZC1tb2R1bGUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vYXNzZXRzL2pzL29yZGVyaW5nL3BvaW50ZXJzLmpzIiwid2VicGFjazovLy8uL2Fzc2V0cy9qcy91dGlscy9wbHVjay5qcyIsIndlYnBhY2s6Ly8vLi9hc3NldHMvanMvb3JkZXJpbmcvaW5kZXguanMiXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJjaGVjayIsIml0IiwiTWF0aCIsImdsb2JhbFRoaXMiLCJPIiwid2luZG93Iiwic2VsZiIsImdsb2JhbCIsIkZ1bmN0aW9uIiwiX2NyZWF0ZUNvbnRleHQiLCJQcm92aWRlciIsIkNvbnN1bWVyIiwiU2V0IiwiZXhlYyIsImVycm9yIiwiZmFpbHMiLCJhIiwiREVTQ1JJUFRPUlMiLCJkZWZpbmVQcm9wZXJ0eU1vZHVsZSIsImNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciIsImYiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJoaWRlIiwicmVkZWZpbmUiLCJzZXRHbG9iYWwiLCJjb3B5Q29uc3RydWN0b3JQcm9wZXJ0aWVzIiwiaXNGb3JjZWQiLCJvcHRpb25zIiwic291cmNlIiwidGFyZ2V0IiwidGFyZ2V0UHJvcGVydHkiLCJzb3VyY2VQcm9wZXJ0eSIsImRlc2NyaXB0b3IiLCJUQVJHRVQiLCJHTE9CQUwiLCJTVEFUSUMiLCJzdGF0Iiwibm9UYXJnZXRHZXQiLCJmb3JjZWQiLCJ1bmRlZmluZWQiLCJzaGFtIiwiaXNPYmplY3QiLCJUeXBlRXJyb3IiLCJTdHJpbmciLCJfZGVmaW5lUHJvcGVydHkiLCJvYmoiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIl9vYmplY3RTcHJlYWQiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJvd25LZXlzIiwia2V5cyIsImdldE93blByb3BlcnR5U3ltYm9scyIsImNvbmNhdCIsImZpbHRlciIsInN5bSIsImZvckVhY2giLCJJU19QVVJFIiwic3RvcmUiLCJwdXNoIiwidmVyc2lvbiIsImNvcHlyaWdodCIsInNoYXJlZCIsInVpZCIsIk5BVElWRV9TWU1CT0wiLCJJbmRleGVkT2JqZWN0IiwicmVxdWlyZU9iamVjdENvZXJjaWJsZSIsIklFOF9ET01fREVGSU5FIiwiYW5PYmplY3QiLCJ0b1ByaW1pdGl2ZSIsIm5hdGl2ZURlZmluZVByb3BlcnR5IiwiUCIsIkF0dHJpYnV0ZXMiLCJ0b0ludGVnZXIiLCJtaW4iLCJhcmd1bWVudCIsIkxBUkdFX0FSUkFZX1NJWkUiLCJDT1JFX0VSUk9SX1RFWFQiLCJGVU5DX0VSUk9SX1RFWFQiLCJIQVNIX1VOREVGSU5FRCIsIk1BWF9NRU1PSVpFX1NJWkUiLCJQTEFDRUhPTERFUiIsIkNMT05FX0RFRVBfRkxBRyIsIkNMT05FX0ZMQVRfRkxBRyIsIkNMT05FX1NZTUJPTFNfRkxBRyIsIkNPTVBBUkVfUEFSVElBTF9GTEFHIiwiQ09NUEFSRV9VTk9SREVSRURfRkxBRyIsIldSQVBfQklORF9GTEFHIiwiV1JBUF9CSU5EX0tFWV9GTEFHIiwiV1JBUF9DVVJSWV9CT1VORF9GTEFHIiwiV1JBUF9DVVJSWV9GTEFHIiwiV1JBUF9DVVJSWV9SSUdIVF9GTEFHIiwiV1JBUF9QQVJUSUFMX0ZMQUciLCJXUkFQX1BBUlRJQUxfUklHSFRfRkxBRyIsIldSQVBfQVJZX0ZMQUciLCJXUkFQX1JFQVJHX0ZMQUciLCJXUkFQX0ZMSVBfRkxBRyIsIkRFRkFVTFRfVFJVTkNfTEVOR1RIIiwiREVGQVVMVF9UUlVOQ19PTUlTU0lPTiIsIkhPVF9DT1VOVCIsIkhPVF9TUEFOIiwiTEFaWV9GSUxURVJfRkxBRyIsIkxBWllfTUFQX0ZMQUciLCJJTkZJTklUWSIsIk1BWF9TQUZFX0lOVEVHRVIiLCJNQVhfSU5URUdFUiIsIk5BTiIsIk1BWF9BUlJBWV9MRU5HVEgiLCJNQVhfQVJSQVlfSU5ERVgiLCJIQUxGX01BWF9BUlJBWV9MRU5HVEgiLCJ3cmFwRmxhZ3MiLCJhcmdzVGFnIiwiYXJyYXlUYWciLCJhc3luY1RhZyIsImJvb2xUYWciLCJkYXRlVGFnIiwiZG9tRXhjVGFnIiwiZXJyb3JUYWciLCJmdW5jVGFnIiwiZ2VuVGFnIiwibWFwVGFnIiwibnVtYmVyVGFnIiwibnVsbFRhZyIsIm9iamVjdFRhZyIsInByb3h5VGFnIiwicmVnZXhwVGFnIiwic2V0VGFnIiwic3RyaW5nVGFnIiwic3ltYm9sVGFnIiwidW5kZWZpbmVkVGFnIiwid2Vha01hcFRhZyIsIndlYWtTZXRUYWciLCJhcnJheUJ1ZmZlclRhZyIsImRhdGFWaWV3VGFnIiwiZmxvYXQzMlRhZyIsImZsb2F0NjRUYWciLCJpbnQ4VGFnIiwiaW50MTZUYWciLCJpbnQzMlRhZyIsInVpbnQ4VGFnIiwidWludDhDbGFtcGVkVGFnIiwidWludDE2VGFnIiwidWludDMyVGFnIiwicmVFbXB0eVN0cmluZ0xlYWRpbmciLCJyZUVtcHR5U3RyaW5nTWlkZGxlIiwicmVFbXB0eVN0cmluZ1RyYWlsaW5nIiwicmVFc2NhcGVkSHRtbCIsInJlVW5lc2NhcGVkSHRtbCIsInJlSGFzRXNjYXBlZEh0bWwiLCJSZWdFeHAiLCJyZUhhc1VuZXNjYXBlZEh0bWwiLCJyZUVzY2FwZSIsInJlRXZhbHVhdGUiLCJyZUludGVycG9sYXRlIiwicmVJc0RlZXBQcm9wIiwicmVJc1BsYWluUHJvcCIsInJlUHJvcE5hbWUiLCJyZVJlZ0V4cENoYXIiLCJyZUhhc1JlZ0V4cENoYXIiLCJyZVRyaW0iLCJyZVRyaW1TdGFydCIsInJlVHJpbUVuZCIsInJlV3JhcENvbW1lbnQiLCJyZVdyYXBEZXRhaWxzIiwicmVTcGxpdERldGFpbHMiLCJyZUFzY2lpV29yZCIsInJlRXNjYXBlQ2hhciIsInJlRXNUZW1wbGF0ZSIsInJlRmxhZ3MiLCJyZUlzQmFkSGV4IiwicmVJc0JpbmFyeSIsInJlSXNIb3N0Q3RvciIsInJlSXNPY3RhbCIsInJlSXNVaW50IiwicmVMYXRpbiIsInJlTm9NYXRjaCIsInJlVW5lc2NhcGVkU3RyaW5nIiwicnNDb21ib1JhbmdlIiwicnNDb21ib01hcmtzUmFuZ2UiLCJyc0JyZWFrUmFuZ2UiLCJyc01hdGhPcFJhbmdlIiwicnNBc3RyYWwiLCJyc0JyZWFrIiwicnNDb21ibyIsInJzRGlnaXRzIiwicnNEaW5nYmF0IiwicnNMb3dlciIsInJzTWlzYyIsInJzRml0eiIsInJzTm9uQXN0cmFsIiwicnNSZWdpb25hbCIsInJzU3VyclBhaXIiLCJyc1VwcGVyIiwicnNNaXNjTG93ZXIiLCJyc01pc2NVcHBlciIsInJlT3B0TW9kIiwicnNTZXEiLCJqb2luIiwicnNFbW9qaSIsInJzU3ltYm9sIiwicmVBcG9zIiwicmVDb21ib01hcmsiLCJyZVVuaWNvZGUiLCJyZVVuaWNvZGVXb3JkIiwicmVIYXNVbmljb2RlIiwicmVIYXNVbmljb2RlV29yZCIsImNvbnRleHRQcm9wcyIsInRlbXBsYXRlQ291bnRlciIsInR5cGVkQXJyYXlUYWdzIiwiY2xvbmVhYmxlVGFncyIsInN0cmluZ0VzY2FwZXMiLCJmcmVlUGFyc2VGbG9hdCIsInBhcnNlRmxvYXQiLCJmcmVlUGFyc2VJbnQiLCJwYXJzZUludCIsImZyZWVHbG9iYWwiLCJmcmVlU2VsZiIsInJvb3QiLCJmcmVlRXhwb3J0cyIsIm5vZGVUeXBlIiwiZnJlZU1vZHVsZSIsIm1vZHVsZUV4cG9ydHMiLCJmcmVlUHJvY2VzcyIsInByb2Nlc3MiLCJub2RlVXRpbCIsInR5cGVzIiwicmVxdWlyZSIsImJpbmRpbmciLCJlIiwibm9kZUlzQXJyYXlCdWZmZXIiLCJpc0FycmF5QnVmZmVyIiwibm9kZUlzRGF0ZSIsImlzRGF0ZSIsIm5vZGVJc01hcCIsImlzTWFwIiwibm9kZUlzUmVnRXhwIiwiaXNSZWdFeHAiLCJub2RlSXNTZXQiLCJpc1NldCIsIm5vZGVJc1R5cGVkQXJyYXkiLCJpc1R5cGVkQXJyYXkiLCJhcHBseSIsImZ1bmMiLCJ0aGlzQXJnIiwiYXJncyIsImFycmF5QWdncmVnYXRvciIsImFycmF5Iiwic2V0dGVyIiwiaXRlcmF0ZWUiLCJhY2N1bXVsYXRvciIsImluZGV4IiwiYXJyYXlFYWNoIiwiYXJyYXlFYWNoUmlnaHQiLCJhcnJheUV2ZXJ5IiwicHJlZGljYXRlIiwiYXJyYXlGaWx0ZXIiLCJyZXNJbmRleCIsInJlc3VsdCIsImFycmF5SW5jbHVkZXMiLCJiYXNlSW5kZXhPZiIsImFycmF5SW5jbHVkZXNXaXRoIiwiY29tcGFyYXRvciIsImFycmF5TWFwIiwiQXJyYXkiLCJhcnJheVB1c2giLCJ2YWx1ZXMiLCJvZmZzZXQiLCJhcnJheVJlZHVjZSIsImluaXRBY2N1bSIsImFycmF5UmVkdWNlUmlnaHQiLCJhcnJheVNvbWUiLCJhc2NpaVNpemUiLCJiYXNlUHJvcGVydHkiLCJiYXNlRmluZEtleSIsImNvbGxlY3Rpb24iLCJlYWNoRnVuYyIsImJhc2VGaW5kSW5kZXgiLCJmcm9tSW5kZXgiLCJmcm9tUmlnaHQiLCJzdHJpY3RJbmRleE9mIiwiYmFzZUlzTmFOIiwiYmFzZUluZGV4T2ZXaXRoIiwiYmFzZU1lYW4iLCJiYXNlU3VtIiwiYmFzZVByb3BlcnR5T2YiLCJiYXNlUmVkdWNlIiwiY3VycmVudCIsImJhc2VUaW1lcyIsImJhc2VVbmFyeSIsImJhc2VWYWx1ZXMiLCJwcm9wcyIsImNhY2hlSGFzIiwiY2FjaGUiLCJoYXMiLCJjaGFyc1N0YXJ0SW5kZXgiLCJzdHJTeW1ib2xzIiwiY2hyU3ltYm9scyIsImNoYXJzRW5kSW5kZXgiLCJkZWJ1cnJMZXR0ZXIiLCJlc2NhcGVIdG1sQ2hhciIsImVzY2FwZVN0cmluZ0NoYXIiLCJjaHIiLCJoYXNVbmljb2RlIiwic3RyaW5nIiwidGVzdCIsIm1hcFRvQXJyYXkiLCJtYXAiLCJzaXplIiwib3ZlckFyZyIsInRyYW5zZm9ybSIsImFyZyIsInJlcGxhY2VIb2xkZXJzIiwicGxhY2Vob2xkZXIiLCJzZXRUb0FycmF5Iiwic2V0Iiwic2V0VG9QYWlycyIsInN0cmluZ1NpemUiLCJsYXN0SW5kZXgiLCJ1bmljb2RlU2l6ZSIsInN0cmluZ1RvQXJyYXkiLCJtYXRjaCIsInVuaWNvZGVUb0FycmF5Iiwic3BsaXQiLCJhc2NpaVRvQXJyYXkiLCJ1bmVzY2FwZUh0bWxDaGFyIiwiXyIsInJ1bkluQ29udGV4dCIsImNvbnRleHQiLCJkZWZhdWx0cyIsInBpY2siLCJEYXRlIiwiRXJyb3IiLCJhcnJheVByb3RvIiwiZnVuY1Byb3RvIiwib2JqZWN0UHJvdG8iLCJjb3JlSnNEYXRhIiwiZnVuY1RvU3RyaW5nIiwidG9TdHJpbmciLCJpZENvdW50ZXIiLCJtYXNrU3JjS2V5IiwiSUVfUFJPVE8iLCJuYXRpdmVPYmplY3RUb1N0cmluZyIsIm9iamVjdEN0b3JTdHJpbmciLCJvbGREYXNoIiwicmVJc05hdGl2ZSIsInJlcGxhY2UiLCJCdWZmZXIiLCJVaW50OEFycmF5IiwiYWxsb2NVbnNhZmUiLCJnZXRQcm90b3R5cGUiLCJnZXRQcm90b3R5cGVPZiIsIm9iamVjdENyZWF0ZSIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwic3BsaWNlIiwic3ByZWFkYWJsZVN5bWJvbCIsImlzQ29uY2F0U3ByZWFkYWJsZSIsInN5bUl0ZXJhdG9yIiwiaXRlcmF0b3IiLCJzeW1Ub1N0cmluZ1RhZyIsImdldE5hdGl2ZSIsImN0eENsZWFyVGltZW91dCIsImNsZWFyVGltZW91dCIsImN0eE5vdyIsIm5vdyIsImN0eFNldFRpbWVvdXQiLCJzZXRUaW1lb3V0IiwibmF0aXZlQ2VpbCIsImNlaWwiLCJuYXRpdmVGbG9vciIsImZsb29yIiwibmF0aXZlR2V0U3ltYm9scyIsIm5hdGl2ZUlzQnVmZmVyIiwiaXNCdWZmZXIiLCJuYXRpdmVJc0Zpbml0ZSIsImlzRmluaXRlIiwibmF0aXZlSm9pbiIsIm5hdGl2ZUtleXMiLCJuYXRpdmVNYXgiLCJtYXgiLCJuYXRpdmVNaW4iLCJuYXRpdmVOb3ciLCJuYXRpdmVQYXJzZUludCIsIm5hdGl2ZVJhbmRvbSIsInJhbmRvbSIsIm5hdGl2ZVJldmVyc2UiLCJyZXZlcnNlIiwiRGF0YVZpZXciLCJNYXAiLCJQcm9taXNlIiwiV2Vha01hcCIsIm5hdGl2ZUNyZWF0ZSIsIm1ldGFNYXAiLCJyZWFsTmFtZXMiLCJkYXRhVmlld0N0b3JTdHJpbmciLCJ0b1NvdXJjZSIsIm1hcEN0b3JTdHJpbmciLCJwcm9taXNlQ3RvclN0cmluZyIsInNldEN0b3JTdHJpbmciLCJ3ZWFrTWFwQ3RvclN0cmluZyIsInN5bWJvbFByb3RvIiwic3ltYm9sVmFsdWVPZiIsInZhbHVlT2YiLCJzeW1ib2xUb1N0cmluZyIsImxvZGFzaCIsImlzT2JqZWN0TGlrZSIsImlzQXJyYXkiLCJMYXp5V3JhcHBlciIsIkxvZGFzaFdyYXBwZXIiLCJ3cmFwcGVyQ2xvbmUiLCJiYXNlQ3JlYXRlIiwicHJvdG8iLCJiYXNlTG9kYXNoIiwiY2hhaW5BbGwiLCJ0aGlzIiwiX193cmFwcGVkX18iLCJfX2FjdGlvbnNfXyIsIl9fY2hhaW5fXyIsIl9faW5kZXhfXyIsIl9fdmFsdWVzX18iLCJfX2Rpcl9fIiwiX19maWx0ZXJlZF9fIiwiX19pdGVyYXRlZXNfXyIsIl9fdGFrZUNvdW50X18iLCJfX3ZpZXdzX18iLCJIYXNoIiwiZW50cmllcyIsImNsZWFyIiwiZW50cnkiLCJMaXN0Q2FjaGUiLCJNYXBDYWNoZSIsIlNldENhY2hlIiwiX19kYXRhX18iLCJhZGQiLCJTdGFjayIsImRhdGEiLCJhcnJheUxpa2VLZXlzIiwiaW5oZXJpdGVkIiwiaXNBcnIiLCJpc0FyZyIsImlzQXJndW1lbnRzIiwiaXNCdWZmIiwiaXNUeXBlIiwic2tpcEluZGV4ZXMiLCJpc0luZGV4IiwiYXJyYXlTYW1wbGUiLCJiYXNlUmFuZG9tIiwiYXJyYXlTYW1wbGVTaXplIiwic2h1ZmZsZVNlbGYiLCJjb3B5QXJyYXkiLCJiYXNlQ2xhbXAiLCJhcnJheVNodWZmbGUiLCJhc3NpZ25NZXJnZVZhbHVlIiwiZXEiLCJiYXNlQXNzaWduVmFsdWUiLCJhc3NpZ25WYWx1ZSIsIm9ialZhbHVlIiwiYXNzb2NJbmRleE9mIiwiYmFzZUFnZ3JlZ2F0b3IiLCJiYXNlRWFjaCIsImJhc2VBc3NpZ24iLCJjb3B5T2JqZWN0IiwiYmFzZUF0IiwicGF0aHMiLCJza2lwIiwibnVtYmVyIiwibG93ZXIiLCJ1cHBlciIsImJhc2VDbG9uZSIsImJpdG1hc2siLCJjdXN0b21pemVyIiwic3RhY2siLCJpc0RlZXAiLCJpc0ZsYXQiLCJpc0Z1bGwiLCJjb25zdHJ1Y3RvciIsImlucHV0IiwiaW5pdENsb25lQXJyYXkiLCJ0YWciLCJnZXRUYWciLCJpc0Z1bmMiLCJjbG9uZUJ1ZmZlciIsImluaXRDbG9uZU9iamVjdCIsImdldFN5bWJvbHNJbiIsImNvcHlTeW1ib2xzSW4iLCJrZXlzSW4iLCJiYXNlQXNzaWduSW4iLCJnZXRTeW1ib2xzIiwiY29weVN5bWJvbHMiLCJDdG9yIiwiY2xvbmVBcnJheUJ1ZmZlciIsImRhdGFWaWV3IiwiYnVmZmVyIiwiYnl0ZU9mZnNldCIsImJ5dGVMZW5ndGgiLCJjbG9uZURhdGFWaWV3IiwiY2xvbmVUeXBlZEFycmF5IiwicmVnZXhwIiwiY2xvbmVSZWdFeHAiLCJzeW1ib2wiLCJpbml0Q2xvbmVCeVRhZyIsInN0YWNrZWQiLCJzdWJWYWx1ZSIsImdldEFsbEtleXNJbiIsImdldEFsbEtleXMiLCJiYXNlQ29uZm9ybXNUbyIsImJhc2VEZWxheSIsIndhaXQiLCJiYXNlRGlmZmVyZW5jZSIsImluY2x1ZGVzIiwiaXNDb21tb24iLCJ2YWx1ZXNMZW5ndGgiLCJvdXRlciIsImNvbXB1dGVkIiwidmFsdWVzSW5kZXgiLCJ0ZW1wbGF0ZVNldHRpbmdzIiwicG9wIiwiZ2V0TWFwRGF0YSIsInBhaXJzIiwiY3JlYXRlQmFzZUVhY2giLCJiYXNlRm9yT3duIiwiYmFzZUVhY2hSaWdodCIsImJhc2VGb3JPd25SaWdodCIsImJhc2VFdmVyeSIsImJhc2VFeHRyZW11bSIsImlzU3ltYm9sIiwiYmFzZUZpbHRlciIsImJhc2VGbGF0dGVuIiwiZGVwdGgiLCJpc1N0cmljdCIsImlzRmxhdHRlbmFibGUiLCJiYXNlRm9yIiwiY3JlYXRlQmFzZUZvciIsImJhc2VGb3JSaWdodCIsImJhc2VGdW5jdGlvbnMiLCJpc0Z1bmN0aW9uIiwiYmFzZUdldCIsInBhdGgiLCJjYXN0UGF0aCIsInRvS2V5IiwiYmFzZUdldEFsbEtleXMiLCJrZXlzRnVuYyIsInN5bWJvbHNGdW5jIiwiYmFzZUdldFRhZyIsImlzT3duIiwidW5tYXNrZWQiLCJnZXRSYXdUYWciLCJvYmplY3RUb1N0cmluZyIsImJhc2VHdCIsIm90aGVyIiwiYmFzZUhhcyIsImJhc2VIYXNJbiIsImJhc2VJbnRlcnNlY3Rpb24iLCJhcnJheXMiLCJvdGhMZW5ndGgiLCJvdGhJbmRleCIsImNhY2hlcyIsIm1heExlbmd0aCIsIkluZmluaXR5Iiwic2VlbiIsImJhc2VJbnZva2UiLCJwYXJlbnQiLCJsYXN0IiwiYmFzZUlzQXJndW1lbnRzIiwiYmFzZUlzRXF1YWwiLCJlcXVhbEZ1bmMiLCJvYmpJc0FyciIsIm90aElzQXJyIiwib2JqVGFnIiwib3RoVGFnIiwib2JqSXNPYmoiLCJvdGhJc09iaiIsImlzU2FtZVRhZyIsImVxdWFsQXJyYXlzIiwibWVzc2FnZSIsImNvbnZlcnQiLCJpc1BhcnRpYWwiLCJlcXVhbEJ5VGFnIiwib2JqSXNXcmFwcGVkIiwib3RoSXNXcmFwcGVkIiwib2JqVW53cmFwcGVkIiwib3RoVW53cmFwcGVkIiwib2JqUHJvcHMiLCJvYmpMZW5ndGgiLCJza2lwQ3RvciIsIm90aFZhbHVlIiwiY29tcGFyZWQiLCJvYmpDdG9yIiwib3RoQ3RvciIsImVxdWFsT2JqZWN0cyIsImJhc2VJc0VxdWFsRGVlcCIsImJhc2VJc01hdGNoIiwibWF0Y2hEYXRhIiwibm9DdXN0b21pemVyIiwic3JjVmFsdWUiLCJiYXNlSXNOYXRpdmUiLCJiYXNlSXRlcmF0ZWUiLCJpZGVudGl0eSIsImJhc2VNYXRjaGVzUHJvcGVydHkiLCJiYXNlTWF0Y2hlcyIsImJhc2VLZXlzIiwiaXNQcm90b3R5cGUiLCJiYXNlS2V5c0luIiwibmF0aXZlS2V5c0luIiwiaXNQcm90byIsImJhc2VMdCIsImJhc2VNYXAiLCJpc0FycmF5TGlrZSIsImdldE1hdGNoRGF0YSIsIm1hdGNoZXNTdHJpY3RDb21wYXJhYmxlIiwiaXNLZXkiLCJpc1N0cmljdENvbXBhcmFibGUiLCJoYXNJbiIsImJhc2VNZXJnZSIsInNyY0luZGV4IiwibWVyZ2VGdW5jIiwic2FmZUdldCIsIm5ld1ZhbHVlIiwiaXNUeXBlZCIsImlzQXJyYXlMaWtlT2JqZWN0IiwiaXNQbGFpbk9iamVjdCIsInRvUGxhaW5PYmplY3QiLCJiYXNlTWVyZ2VEZWVwIiwiYmFzZU50aCIsImJhc2VPcmRlckJ5IiwiaXRlcmF0ZWVzIiwib3JkZXJzIiwiZ2V0SXRlcmF0ZWUiLCJjb21wYXJlciIsInNvcnQiLCJiYXNlU29ydEJ5Iiwib2JqQ3JpdGVyaWEiLCJjcml0ZXJpYSIsIm90aENyaXRlcmlhIiwib3JkZXJzTGVuZ3RoIiwiY29tcGFyZUFzY2VuZGluZyIsIm9yZGVyIiwiY29tcGFyZU11bHRpcGxlIiwiYmFzZVBpY2tCeSIsImJhc2VTZXQiLCJiYXNlUHVsbEFsbCIsImluZGV4T2YiLCJiYXNlUHVsbEF0IiwiaW5kZXhlcyIsInByZXZpb3VzIiwiYmFzZVVuc2V0IiwiYmFzZVJlcGVhdCIsImJhc2VSZXN0Iiwic3RhcnQiLCJzZXRUb1N0cmluZyIsIm92ZXJSZXN0IiwiYmFzZVNhbXBsZSIsImJhc2VTYW1wbGVTaXplIiwibmVzdGVkIiwiYmFzZVNldERhdGEiLCJiYXNlU2V0VG9TdHJpbmciLCJjb25zdGFudCIsImJhc2VTaHVmZmxlIiwiYmFzZVNsaWNlIiwiZW5kIiwiYmFzZVNvbWUiLCJiYXNlU29ydGVkSW5kZXgiLCJyZXRIaWdoZXN0IiwibG93IiwiaGlnaCIsIm1pZCIsImJhc2VTb3J0ZWRJbmRleEJ5IiwidmFsSXNOYU4iLCJ2YWxJc051bGwiLCJ2YWxJc1N5bWJvbCIsInZhbElzVW5kZWZpbmVkIiwib3RoSXNEZWZpbmVkIiwib3RoSXNOdWxsIiwib3RoSXNSZWZsZXhpdmUiLCJvdGhJc1N5bWJvbCIsInNldExvdyIsImJhc2VTb3J0ZWRVbmlxIiwiYmFzZVRvTnVtYmVyIiwiYmFzZVRvU3RyaW5nIiwiYmFzZVVuaXEiLCJjcmVhdGVTZXQiLCJzZWVuSW5kZXgiLCJiYXNlVXBkYXRlIiwidXBkYXRlciIsImJhc2VXaGlsZSIsImlzRHJvcCIsImJhc2VXcmFwcGVyVmFsdWUiLCJhY3Rpb25zIiwiYWN0aW9uIiwiYmFzZVhvciIsImJhc2VaaXBPYmplY3QiLCJhc3NpZ25GdW5jIiwidmFsc0xlbmd0aCIsImNhc3RBcnJheUxpa2VPYmplY3QiLCJjYXN0RnVuY3Rpb24iLCJzdHJpbmdUb1BhdGgiLCJjYXN0UmVzdCIsImNhc3RTbGljZSIsImlkIiwic2xpY2UiLCJjb3B5IiwiYXJyYXlCdWZmZXIiLCJ0eXBlZEFycmF5IiwidmFsSXNEZWZpbmVkIiwidmFsSXNSZWZsZXhpdmUiLCJjb21wb3NlQXJncyIsInBhcnRpYWxzIiwiaG9sZGVycyIsImlzQ3VycmllZCIsImFyZ3NJbmRleCIsImFyZ3NMZW5ndGgiLCJob2xkZXJzTGVuZ3RoIiwibGVmdEluZGV4IiwibGVmdExlbmd0aCIsInJhbmdlTGVuZ3RoIiwiaXNVbmN1cnJpZWQiLCJjb21wb3NlQXJnc1JpZ2h0IiwiaG9sZGVyc0luZGV4IiwicmlnaHRJbmRleCIsInJpZ2h0TGVuZ3RoIiwiaXNOZXciLCJjcmVhdGVBZ2dyZWdhdG9yIiwiaW5pdGlhbGl6ZXIiLCJjcmVhdGVBc3NpZ25lciIsImFzc2lnbmVyIiwic291cmNlcyIsImd1YXJkIiwiaXNJdGVyYXRlZUNhbGwiLCJpdGVyYWJsZSIsImNyZWF0ZUNhc2VGaXJzdCIsIm1ldGhvZE5hbWUiLCJjaGFyQXQiLCJ0cmFpbGluZyIsImNyZWF0ZUNvbXBvdW5kZXIiLCJjYWxsYmFjayIsIndvcmRzIiwiZGVidXJyIiwiY3JlYXRlQ3RvciIsInRoaXNCaW5kaW5nIiwiY3JlYXRlRmluZCIsImZpbmRJbmRleEZ1bmMiLCJjcmVhdGVGbG93IiwiZmxhdFJlc3QiLCJmdW5jcyIsInByZXJlcSIsInRocnUiLCJ3cmFwcGVyIiwiZ2V0RnVuY05hbWUiLCJmdW5jTmFtZSIsImdldERhdGEiLCJpc0xhemlhYmxlIiwicGxhbnQiLCJjcmVhdGVIeWJyaWQiLCJwYXJ0aWFsc1JpZ2h0IiwiaG9sZGVyc1JpZ2h0IiwiYXJnUG9zIiwiYXJ5IiwiYXJpdHkiLCJpc0FyeSIsImlzQmluZCIsImlzQmluZEtleSIsImlzRmxpcCIsImdldEhvbGRlciIsImhvbGRlcnNDb3VudCIsImNvdW50SG9sZGVycyIsIm5ld0hvbGRlcnMiLCJjcmVhdGVSZWN1cnJ5IiwiZm4iLCJhcnJMZW5ndGgiLCJvbGRBcnJheSIsInJlb3JkZXIiLCJjcmVhdGVJbnZlcnRlciIsInRvSXRlcmF0ZWUiLCJiYXNlSW52ZXJ0ZXIiLCJjcmVhdGVNYXRoT3BlcmF0aW9uIiwib3BlcmF0b3IiLCJkZWZhdWx0VmFsdWUiLCJjcmVhdGVPdmVyIiwiYXJyYXlGdW5jIiwiY3JlYXRlUGFkZGluZyIsImNoYXJzIiwiY2hhcnNMZW5ndGgiLCJjcmVhdGVSYW5nZSIsInN0ZXAiLCJ0b0Zpbml0ZSIsImJhc2VSYW5nZSIsImNyZWF0ZVJlbGF0aW9uYWxPcGVyYXRpb24iLCJ0b051bWJlciIsIndyYXBGdW5jIiwiaXNDdXJyeSIsIm5ld0RhdGEiLCJzZXREYXRhIiwic2V0V3JhcFRvU3RyaW5nIiwiY3JlYXRlUm91bmQiLCJwcmVjaXNpb24iLCJwYWlyIiwibm9vcCIsImNyZWF0ZVRvUGFpcnMiLCJiYXNlVG9QYWlycyIsImNyZWF0ZVdyYXAiLCJzcmNCaXRtYXNrIiwibmV3Qml0bWFzayIsImlzQ29tYm8iLCJtZXJnZURhdGEiLCJjcmVhdGVDdXJyeSIsImNyZWF0ZVBhcnRpYWwiLCJjcmVhdGVCaW5kIiwiY3VzdG9tRGVmYXVsdHNBc3NpZ25JbiIsImN1c3RvbURlZmF1bHRzTWVyZ2UiLCJjdXN0b21PbWl0Q2xvbmUiLCJhcnJWYWx1ZSIsImZsYXR0ZW4iLCJvdGhlckZ1bmMiLCJ0eXBlIiwiaXNLZXlhYmxlIiwiZ2V0VmFsdWUiLCJzdHViQXJyYXkiLCJoYXNQYXRoIiwiaGFzRnVuYyIsImlzTGVuZ3RoIiwiQXJyYXlCdWZmZXIiLCJyZXNvbHZlIiwiY3RvclN0cmluZyIsImlzTWFza2FibGUiLCJzdHViRmFsc2UiLCJvdGhlckFyZ3MiLCJzaG9ydE91dCIsInJlZmVyZW5jZSIsImRldGFpbHMiLCJpbnNlcnRXcmFwRGV0YWlscyIsInVwZGF0ZVdyYXBEZXRhaWxzIiwiZ2V0V3JhcERldGFpbHMiLCJjb3VudCIsImxhc3RDYWxsZWQiLCJzdGFtcCIsInJlbWFpbmluZyIsInJhbmQiLCJtZW1vaXplIiwibWVtb2l6ZUNhcHBlZCIsImNoYXJDb2RlQXQiLCJxdW90ZSIsInN1YlN0cmluZyIsImNsb25lIiwiZGlmZmVyZW5jZSIsImRpZmZlcmVuY2VCeSIsImRpZmZlcmVuY2VXaXRoIiwiZmluZEluZGV4IiwiZmluZExhc3RJbmRleCIsImhlYWQiLCJpbnRlcnNlY3Rpb24iLCJtYXBwZWQiLCJpbnRlcnNlY3Rpb25CeSIsImludGVyc2VjdGlvbldpdGgiLCJwdWxsIiwicHVsbEFsbCIsInB1bGxBdCIsInVuaW9uIiwidW5pb25CeSIsInVuaW9uV2l0aCIsInVuemlwIiwiZ3JvdXAiLCJ1bnppcFdpdGgiLCJ3aXRob3V0IiwieG9yIiwieG9yQnkiLCJ4b3JXaXRoIiwiemlwIiwiemlwV2l0aCIsImNoYWluIiwiaW50ZXJjZXB0b3IiLCJ3cmFwcGVyQXQiLCJjb3VudEJ5IiwiZmluZCIsImZpbmRMYXN0IiwiZm9yRWFjaFJpZ2h0IiwiZ3JvdXBCeSIsImludm9rZU1hcCIsImtleUJ5IiwicGFydGl0aW9uIiwic29ydEJ5IiwiYmVmb3JlIiwiYmluZEtleSIsImRlYm91bmNlIiwibGFzdEFyZ3MiLCJsYXN0VGhpcyIsIm1heFdhaXQiLCJ0aW1lcklkIiwibGFzdENhbGxUaW1lIiwibGFzdEludm9rZVRpbWUiLCJsZWFkaW5nIiwibWF4aW5nIiwiaW52b2tlRnVuYyIsInRpbWUiLCJzaG91bGRJbnZva2UiLCJ0aW1lU2luY2VMYXN0Q2FsbCIsInRpbWVyRXhwaXJlZCIsInRyYWlsaW5nRWRnZSIsInRpbWVXYWl0aW5nIiwicmVtYWluaW5nV2FpdCIsImRlYm91bmNlZCIsImlzSW52b2tpbmciLCJsZWFkaW5nRWRnZSIsImNhbmNlbCIsImZsdXNoIiwiZGVmZXIiLCJkZWxheSIsInJlc29sdmVyIiwibWVtb2l6ZWQiLCJDYWNoZSIsIm5lZ2F0ZSIsIm92ZXJBcmdzIiwidHJhbnNmb3JtcyIsImZ1bmNzTGVuZ3RoIiwicGFydGlhbCIsInBhcnRpYWxSaWdodCIsInJlYXJnIiwiZ3QiLCJndGUiLCJpc0Vycm9yIiwiaXNJbnRlZ2VyIiwiaXNOdW1iZXIiLCJpc1N0cmluZyIsImx0IiwibHRlIiwidG9BcnJheSIsIm5leHQiLCJkb25lIiwiaXRlcmF0b3JUb0FycmF5IiwicmVtYWluZGVyIiwidG9MZW5ndGgiLCJpc0JpbmFyeSIsImFzc2lnbiIsImFzc2lnbkluIiwiYXNzaWduSW5XaXRoIiwiYXNzaWduV2l0aCIsImF0IiwicHJvcHNJbmRleCIsInByb3BzTGVuZ3RoIiwiZGVmYXVsdHNEZWVwIiwibWVyZ2VXaXRoIiwiaW52ZXJ0IiwiaW52ZXJ0QnkiLCJpbnZva2UiLCJtZXJnZSIsIm9taXQiLCJiYXNlUGljayIsInBpY2tCeSIsInByb3AiLCJ0b1BhaXJzIiwidG9QYWlyc0luIiwiY2FtZWxDYXNlIiwid29yZCIsInRvTG93ZXJDYXNlIiwiY2FwaXRhbGl6ZSIsInVwcGVyRmlyc3QiLCJrZWJhYkNhc2UiLCJsb3dlckNhc2UiLCJsb3dlckZpcnN0Iiwic25ha2VDYXNlIiwic3RhcnRDYXNlIiwidXBwZXJDYXNlIiwidG9VcHBlckNhc2UiLCJwYXR0ZXJuIiwiaGFzVW5pY29kZVdvcmQiLCJ1bmljb2RlV29yZHMiLCJhc2NpaVdvcmRzIiwiYXR0ZW1wdCIsImJpbmRBbGwiLCJtZXRob2ROYW1lcyIsImZsb3ciLCJmbG93UmlnaHQiLCJtZXRob2QiLCJtZXRob2RPZiIsIm1peGluIiwib3ZlciIsIm92ZXJFdmVyeSIsIm92ZXJTb21lIiwiYmFzZVByb3BlcnR5RGVlcCIsInJhbmdlIiwicmFuZ2VSaWdodCIsImF1Z2VuZCIsImFkZGVuZCIsImRpdmlkZSIsImRpdmlkZW5kIiwiZGl2aXNvciIsIm11bHRpcGx5IiwibXVsdGlwbGllciIsIm11bHRpcGxpY2FuZCIsInJvdW5kIiwic3VidHJhY3QiLCJtaW51ZW5kIiwic3VidHJhaGVuZCIsImFmdGVyIiwiY2FzdEFycmF5IiwiY2h1bmsiLCJjb21wYWN0IiwiY29uZCIsImNvbmZvcm1zIiwiYmFzZUNvbmZvcm1zIiwicHJvcGVydGllcyIsImN1cnJ5IiwiY3VycnlSaWdodCIsImRyb3AiLCJkcm9wUmlnaHQiLCJkcm9wUmlnaHRXaGlsZSIsImRyb3BXaGlsZSIsImZpbGwiLCJiYXNlRmlsbCIsImZsYXRNYXAiLCJmbGF0TWFwRGVlcCIsImZsYXRNYXBEZXB0aCIsImZsYXR0ZW5EZWVwIiwiZmxhdHRlbkRlcHRoIiwiZmxpcCIsImZyb21QYWlycyIsImZ1bmN0aW9ucyIsImZ1bmN0aW9uc0luIiwiaW5pdGlhbCIsIm1hcEtleXMiLCJtYXBWYWx1ZXMiLCJtYXRjaGVzIiwibWF0Y2hlc1Byb3BlcnR5IiwibnRoQXJnIiwib21pdEJ5Iiwib25jZSIsIm9yZGVyQnkiLCJwcm9wZXJ0eU9mIiwicHVsbEFsbEJ5IiwicHVsbEFsbFdpdGgiLCJyZWplY3QiLCJyZW1vdmUiLCJyZXN0Iiwic2FtcGxlU2l6ZSIsInNldFdpdGgiLCJzaHVmZmxlIiwic29ydGVkVW5pcSIsInNvcnRlZFVuaXFCeSIsInNlcGFyYXRvciIsImxpbWl0Iiwic3ByZWFkIiwidGFpbCIsInRha2UiLCJ0YWtlUmlnaHQiLCJ0YWtlUmlnaHRXaGlsZSIsInRha2VXaGlsZSIsInRhcCIsInRocm90dGxlIiwidG9QYXRoIiwiaXNBcnJMaWtlIiwidW5hcnkiLCJ1bmlxIiwidW5pcUJ5IiwidW5pcVdpdGgiLCJ1bnNldCIsInVwZGF0ZSIsInVwZGF0ZVdpdGgiLCJ2YWx1ZXNJbiIsIndyYXAiLCJ6aXBPYmplY3QiLCJ6aXBPYmplY3REZWVwIiwiZW50cmllc0luIiwiZXh0ZW5kIiwiZXh0ZW5kV2l0aCIsImNsYW1wIiwiY2xvbmVEZWVwIiwiY2xvbmVEZWVwV2l0aCIsImNsb25lV2l0aCIsImNvbmZvcm1zVG8iLCJkZWZhdWx0VG8iLCJlbmRzV2l0aCIsInBvc2l0aW9uIiwiZXNjYXBlIiwiZXNjYXBlUmVnRXhwIiwiZXZlcnkiLCJmaW5kS2V5IiwiZmluZExhc3RLZXkiLCJmb3JJbiIsImZvckluUmlnaHQiLCJmb3JPd24iLCJmb3JPd25SaWdodCIsImluUmFuZ2UiLCJiYXNlSW5SYW5nZSIsImlzQm9vbGVhbiIsImlzRWxlbWVudCIsImlzRW1wdHkiLCJpc0VxdWFsIiwiaXNFcXVhbFdpdGgiLCJpc01hdGNoIiwiaXNNYXRjaFdpdGgiLCJpc05hTiIsImlzTmF0aXZlIiwiaXNOaWwiLCJpc051bGwiLCJpc1NhZmVJbnRlZ2VyIiwiaXNVbmRlZmluZWQiLCJpc1dlYWtNYXAiLCJpc1dlYWtTZXQiLCJsYXN0SW5kZXhPZiIsInN0cmljdExhc3RJbmRleE9mIiwibWF4QnkiLCJtZWFuIiwibWVhbkJ5IiwibWluQnkiLCJzdHViT2JqZWN0Iiwic3R1YlN0cmluZyIsInN0dWJUcnVlIiwibnRoIiwibm9Db25mbGljdCIsInBhZCIsInN0ckxlbmd0aCIsInBhZEVuZCIsInBhZFN0YXJ0IiwicmFkaXgiLCJmbG9hdGluZyIsInRlbXAiLCJyZWR1Y2UiLCJyZWR1Y2VSaWdodCIsInJlcGVhdCIsInNhbXBsZSIsInNvbWUiLCJzb3J0ZWRJbmRleCIsInNvcnRlZEluZGV4QnkiLCJzb3J0ZWRJbmRleE9mIiwic29ydGVkTGFzdEluZGV4Iiwic29ydGVkTGFzdEluZGV4QnkiLCJzb3J0ZWRMYXN0SW5kZXhPZiIsInN0YXJ0c1dpdGgiLCJzdW0iLCJzdW1CeSIsInRlbXBsYXRlIiwic2V0dGluZ3MiLCJpc0VzY2FwaW5nIiwiaXNFdmFsdWF0aW5nIiwiaW1wb3J0cyIsImltcG9ydHNLZXlzIiwiaW1wb3J0c1ZhbHVlcyIsImludGVycG9sYXRlIiwicmVEZWxpbWl0ZXJzIiwiZXZhbHVhdGUiLCJzb3VyY2VVUkwiLCJlc2NhcGVWYWx1ZSIsImludGVycG9sYXRlVmFsdWUiLCJlc1RlbXBsYXRlVmFsdWUiLCJldmFsdWF0ZVZhbHVlIiwidmFyaWFibGUiLCJ0aW1lcyIsInRvTG93ZXIiLCJ0b1NhZmVJbnRlZ2VyIiwidG9VcHBlciIsInRyaW0iLCJ0cmltRW5kIiwidHJpbVN0YXJ0IiwidHJ1bmNhdGUiLCJvbWlzc2lvbiIsInNlYXJjaCIsInN1YnN0cmluZyIsIm5ld0VuZCIsInVuZXNjYXBlIiwidW5pcXVlSWQiLCJwcmVmaXgiLCJlYWNoIiwiZWFjaFJpZ2h0IiwiZmlyc3QiLCJWRVJTSU9OIiwiaXNGaWx0ZXIiLCJ0YWtlTmFtZSIsImRyb3BOYW1lIiwiY2hlY2tJdGVyYXRlZSIsImlzVGFrZXIiLCJsb2Rhc2hGdW5jIiwicmV0VW53cmFwcGVkIiwiaXNMYXp5IiwidXNlTGF6eSIsImlzSHlicmlkIiwiaXNVbndyYXBwZWQiLCJvbmx5TGF6eSIsImNoYWluTmFtZSIsImRpciIsImlzUmlnaHQiLCJ2aWV3IiwiZ2V0VmlldyIsIml0ZXJMZW5ndGgiLCJ0YWtlQ291bnQiLCJpdGVySW5kZXgiLCJjb21taXQiLCJ3cmFwcGVkIiwidG9KU09OIiwiYml0bWFwIiwiUFJFRkVSUkVEX1NUUklORyIsInZhbCIsImNsYXNzb2YiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZU1vZHVsZSIsInRvSW5kZXhlZE9iamVjdCIsIm5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImNyZWF0ZUVsZW1lbnQiLCJwb3N0Zml4IiwiaGlkZGVuS2V5cyIsIm5hbWVzIiwiZG9jdW1lbnQiLCJFWElTVFMiLCJhRnVuY3Rpb24iLCJuYW1lc3BhY2UiLCJpbnRlZ2VyIiwiU1BFQ0lFUyIsIndlbGxLbm93blN5bWJvbCIsIm9yaWdpbmFsQXJyYXkiLCJDIiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIiwiZXhjbHVkZWQiLCJzb3VyY2VLZXlzIiwic291cmNlU3ltYm9sS2V5cyIsImciLCJuYXRpdmVQcm9wZXJ0eUlzRW51bWVyYWJsZSIsIk5BU0hPUk5fQlVHIiwiMSIsIlYiLCJuYXRpdmVGdW5jdGlvblRvU3RyaW5nIiwiSW50ZXJuYWxTdGF0ZU1vZHVsZSIsImdldEludGVybmFsU3RhdGUiLCJlbmZvcmNlSW50ZXJuYWxTdGF0ZSIsImVuZm9yY2UiLCJURU1QTEFURSIsInVuc2FmZSIsInNpbXBsZSIsInRvT2JqZWN0IiwiYXJyYXlTcGVjaWVzQ3JlYXRlIiwiY3JlYXRlTWV0aG9kIiwiVFlQRSIsIklTX01BUCIsIklTX0ZJTFRFUiIsIklTX1NPTUUiLCJJU19FVkVSWSIsIklTX0ZJTkRfSU5ERVgiLCJOT19IT0xFUyIsIiR0aGlzIiwiY2FsbGJhY2tmbiIsInRoYXQiLCJzcGVjaWZpY0NyZWF0ZSIsImJvdW5kRnVuY3Rpb24iLCJ0b0Fic29sdXRlSW5kZXgiLCJJU19JTkNMVURFUyIsImVsIiwiUmVmZXJlbmNlRXJyb3IiLCJpbnRlcm5hbE9iamVjdEtleXMiLCJlbnVtQnVnS2V5cyIsIk1FVEhPRF9OQU1FIiwiZm9vIiwiQm9vbGVhbiIsIk5BVElWRV9XRUFLX01BUCIsIm9iamVjdEhhcyIsInNoYXJlZEtleSIsIndtZ2V0Iiwid21oYXMiLCJ3bXNldCIsIm1ldGFkYXRhIiwiU1RBVEUiLCJnZXR0ZXJGb3IiLCJzdGF0ZSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZSIsImdldEJ1aWx0SW4iLCJnZXRPd25Qcm9wZXJ0eU5hbWVzTW9kdWxlIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsInJlcGxhY2VtZW50IiwiZmVhdHVyZSIsImRldGVjdGlvbiIsIm5vcm1hbGl6ZSIsIlBPTFlGSUxMIiwiTkFUSVZFIiwiYiIsImNoZWNrRENFIiwiX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fIiwiZXJyIiwiY29uc29sZSIsInByb3BlcnR5S2V5IiwiY29yZSIsIl9fZSIsImNvbmRpdGlvbiIsImZvcm1hdCIsImFyZ0luZGV4IiwiZnJhbWVzVG9Qb3AiLCJwcm9wSXNFbnVtZXJhYmxlIiwidGVzdDEiLCJ0ZXN0MiIsImZyb21DaGFyQ29kZSIsInRlc3QzIiwibGV0dGVyIiwic2hvdWxkVXNlTmF0aXZlIiwiZnJvbSIsInN5bWJvbHMiLCJ0byIsIiQiLCIkbWFwIiwiYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCIsImN0eCIsIiRleHBvcnQiLCJvd24iLCJvdXQiLCJJU19GT1JDRUQiLCJGIiwiSVNfR0xPQkFMIiwiRyIsIklTX1NUQVRJQyIsIlMiLCJJU19QUk9UTyIsIklTX0JJTkQiLCJCIiwiSVNfV1JBUCIsIlciLCJleHBQcm90byIsInZpcnR1YWwiLCJSIiwiVSIsInN0cmluZ2lmeSIsInBhcnNlIiwiZm9ybWF0cyIsIndoaXRlc3BhY2UiLCJsdHJpbSIsInJ0cmltIiwid2VicGFja1BvbHlmaWxsIiwiZGVwcmVjYXRlIiwiY2hpbGRyZW4iLCJpbnN0YW5jZSIsIkNvbnN0cnVjdG9yIiwiX2RlZmluZVByb3BlcnRpZXMiLCJwcm90b1Byb3BzIiwic3RhdGljUHJvcHMiLCJfdHlwZW9mIiwiYXNzZXJ0VGhpc0luaXRpYWxpemVkIiwiX2dldFByb3RvdHlwZU9mIiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJfZXh0ZW5kcyIsIl9fZyIsIiRrZXlzIiwibWF4U2l6ZSIsIm5vZGUiLCJsZW4iLCJzZWFyY2hDYWNoZSIsInByZXYiLCIkZmlsdGVyIiwic2xvcHB5QXJyYXlNZXRob2QiLCJuYXRpdmVTb3J0IiwiRkFJTFNfT05fVU5ERUZJTkVEIiwiRkFJTFNfT05fTlVMTCIsIlNMT1BQWV9NRVRIT0QiLCJjb21wYXJlZm4iLCJjcmVhdGVQcm9wZXJ0eSIsImRlbGV0ZUNvdW50IiwiaW5zZXJ0Q291bnQiLCJhY3R1YWxEZWxldGVDb3VudCIsIkEiLCJrIiwiYWN0dWFsU3RhcnQiLCJhcmd1bWVudHNMZW5ndGgiLCJwYXJzZUludEltcGxlbWVudGF0aW9uIiwid2hpdGVzcGFjZXMiLCJoZXgiLCJGT1JDRUQiLCJoIiwiZm9yIiwicSIsInUiLCJ2IiwidyIsIngiLCJ5IiwiYWEiLCJiYSIsImNhIiwieiIsImVuY29kZVVSSUNvbXBvbmVudCIsImlzTW91bnRlZCIsImVucXVldWVGb3JjZVVwZGF0ZSIsImVucXVldWVSZXBsYWNlU3RhdGUiLCJlbnF1ZXVlU2V0U3RhdGUiLCJEIiwicmVmcyIsIkUiLCJpc1JlYWN0Q29tcG9uZW50Iiwic2V0U3RhdGUiLCJmb3JjZVVwZGF0ZSIsImlzUHVyZVJlYWN0Q29tcG9uZW50IiwiSCIsIkkiLCJzdXNwZW5zZSIsIkoiLCJLIiwiTCIsInJlZiIsIl9fc2VsZiIsIl9fc291cmNlIiwiTSIsImRlZmF1bHRQcm9wcyIsIiQkdHlwZW9mIiwiX293bmVyIiwiTiIsIlEiLCJrZXlQcmVmaXgiLCJUIiwiZWEiLCJmYSIsImRhIiwiWCIsIkNoaWxkcmVuIiwib25seSIsImNyZWF0ZVJlZiIsIkNvbXBvbmVudCIsIlB1cmVDb21wb25lbnQiLCJjcmVhdGVDb250ZXh0IiwiX2NhbGN1bGF0ZUNoYW5nZWRCaXRzIiwiX2N1cnJlbnRWYWx1ZSIsIl9jdXJyZW50VmFsdWUyIiwiX3RocmVhZENvdW50IiwiX2NvbnRleHQiLCJmb3J3YXJkUmVmIiwicmVuZGVyIiwibGF6eSIsIl9jdG9yIiwiX3N0YXR1cyIsIl9yZXN1bHQiLCJtZW1vIiwiY29tcGFyZSIsInVzZUNhbGxiYWNrIiwidXNlQ29udGV4dCIsInVzZUVmZmVjdCIsInVzZUltcGVyYXRpdmVIYW5kbGUiLCJ1c2VEZWJ1Z1ZhbHVlIiwidXNlTGF5b3V0RWZmZWN0IiwidXNlTWVtbyIsInVzZVJlZHVjZXIiLCJ1c2VSZWYiLCJ1c2VTdGF0ZSIsIkZyYWdtZW50IiwiUHJvZmlsZXIiLCJTdHJpY3RNb2RlIiwiU3VzcGVuc2UiLCJ1bnN0YWJsZV9TdXNwZW5zZUxpc3QiLCJjbG9uZUVsZW1lbnQiLCJjcmVhdGVGYWN0b3J5IiwiaXNWYWxpZEVsZW1lbnQiLCJ1bnN0YWJsZV93aXRoU3VzcGVuc2VDb25maWciLCJfX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRCIsIlJlYWN0Q3VycmVudERpc3BhdGNoZXIiLCJSZWFjdEN1cnJlbnRCYXRjaENvbmZpZyIsIlJlYWN0Q3VycmVudE93bmVyIiwiSXNTb21lUmVuZGVyZXJBY3RpbmciLCJZIiwiZGVmYXVsdCIsIloiLCJleHRyYWN0RXZlbnRzIiwiZXZlbnRUeXBlcyIsInBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzIiwiaGEiLCJyZWdpc3RyYXRpb25OYW1lIiwiaWEiLCJqYSIsImRlcGVuZGVuY2llcyIsImthIiwib25FcnJvciIsImxhIiwibWEiLCJuYSIsIm9hIiwicGEiLCJxYSIsInNhIiwidGEiLCJ2YSIsIndhIiwiY3VycmVudFRhcmdldCIsInJhIiwieGEiLCJ5YSIsInphIiwiQWEiLCJfZGlzcGF0Y2hMaXN0ZW5lcnMiLCJfZGlzcGF0Y2hJbnN0YW5jZXMiLCJpc1Byb3BhZ2F0aW9uU3RvcHBlZCIsImlzUGVyc2lzdGVudCIsInJlbGVhc2UiLCJCYSIsIkNhIiwiaW5qZWN0RXZlbnRQbHVnaW5PcmRlciIsImluamVjdEV2ZW50UGx1Z2luc0J5TmFtZSIsIkRhIiwic3RhdGVOb2RlIiwiZGlzYWJsZWQiLCJFYSIsIkZhIiwiR2EiLCJIYSIsInBhcmVudE5vZGUiLCJJYSIsIkphIiwiS2EiLCJMYSIsInJldHVybiIsIk1hIiwiZGlzcGF0Y2hDb25maWciLCJOYSIsIl90YXJnZXRJbnN0IiwiT2EiLCJQYSIsIlFhIiwiUmEiLCJTYSIsIlRhIiwiYW5pbWF0aW9uZW5kIiwiYW5pbWF0aW9uaXRlcmF0aW9uIiwiYW5pbWF0aW9uc3RhcnQiLCJ0cmFuc2l0aW9uZW5kIiwiVWEiLCJWYSIsIldhIiwic3R5bGUiLCJhbmltYXRpb24iLCJ0cmFuc2l0aW9uIiwiWGEiLCJZYSIsIlphIiwiYWIiLCJiYiIsImNiIiwiZGIiLCJlYiIsImZiIiwidGV4dENvbnRlbnQiLCJnYiIsImhiIiwibmF0aXZlRXZlbnQiLCJJbnRlcmZhY2UiLCJpc0RlZmF1bHRQcmV2ZW50ZWQiLCJkZWZhdWx0UHJldmVudGVkIiwicmV0dXJuVmFsdWUiLCJqYiIsImV2ZW50UG9vbCIsImtiIiwiZGVzdHJ1Y3RvciIsImliIiwiZ2V0UG9vbGVkIiwicHJldmVudERlZmF1bHQiLCJzdG9wUHJvcGFnYXRpb24iLCJjYW5jZWxCdWJibGUiLCJwZXJzaXN0IiwiZXZlbnRQaGFzZSIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwidGltZVN0YW1wIiwiaXNUcnVzdGVkIiwibGIiLCJtYiIsIm5iIiwib2IiLCJwYiIsImRvY3VtZW50TW9kZSIsInFiIiwic2IiLCJ0YiIsInViIiwiYmVmb3JlSW5wdXQiLCJidWJibGVkIiwiY2FwdHVyZWQiLCJjb21wb3NpdGlvbkVuZCIsImNvbXBvc2l0aW9uU3RhcnQiLCJjb21wb3NpdGlvblVwZGF0ZSIsInZiIiwid2IiLCJrZXlDb2RlIiwieGIiLCJkZXRhaWwiLCJ5YiIsIkNiIiwibG9jYWxlIiwid2hpY2giLCJBYiIsImN0cmxLZXkiLCJhbHRLZXkiLCJtZXRhS2V5IiwiY2hhciIsIkJiIiwiRGIiLCJFYiIsIkZiIiwiR2IiLCJIYiIsIkliIiwiSmIiLCJLYiIsIkxiIiwiTWIiLCJOYiIsIk9iIiwiUGIiLCJjb2xvciIsImRhdGUiLCJkYXRldGltZSIsImVtYWlsIiwibW9udGgiLCJwYXNzd29yZCIsInRlbCIsInRleHQiLCJ1cmwiLCJ3ZWVrIiwiUWIiLCJub2RlTmFtZSIsIlJiIiwic3JjRWxlbWVudCIsImNvcnJlc3BvbmRpbmdVc2VFbGVtZW50IiwiU2IiLCJzZXRBdHRyaWJ1dGUiLCJUYiIsIlZiIiwiX3ZhbHVlVHJhY2tlciIsInNldFZhbHVlIiwic3RvcFRyYWNraW5nIiwiVWIiLCJXYiIsImNoZWNrZWQiLCJYYiIsIlliIiwiWmIiLCIkYiIsImFjIiwiYmMiLCJjYyIsImRjIiwiZWMiLCJmYyIsImdjIiwiaGMiLCJpYyIsImpjIiwia2MiLCJsYyIsIm1jIiwib2MiLCJkaXNwbGF5TmFtZSIsInBjIiwiX2RlYnVnT3duZXIiLCJfZGVidWdTb3VyY2UiLCJmaWxlTmFtZSIsImxpbmVOdW1iZXIiLCJxYyIsInJjIiwic2MiLCJ0YyIsImFjY2VwdHNCb29sZWFucyIsImF0dHJpYnV0ZU5hbWUiLCJhdHRyaWJ1dGVOYW1lc3BhY2UiLCJtdXN0VXNlUHJvcGVydHkiLCJwcm9wZXJ0eU5hbWUiLCJzYW5pdGl6ZVVSTCIsInhjIiwieWMiLCJ6YyIsInZjIiwid2MiLCJ1YyIsInJlbW92ZUF0dHJpYnV0ZSIsInNldEF0dHJpYnV0ZU5TIiwiQWMiLCJCYyIsImRlZmF1bHRDaGVja2VkIiwiX3dyYXBwZXJTdGF0ZSIsImluaXRpYWxDaGVja2VkIiwiQ2MiLCJpbml0aWFsVmFsdWUiLCJjb250cm9sbGVkIiwiRGMiLCJFYyIsIkZjIiwiR2MiLCJvd25lckRvY3VtZW50IiwiYWN0aXZlRWxlbWVudCIsInhsaW5rSHJlZiIsIkhjIiwiY2hhbmdlIiwiSWMiLCJKYyIsIktjIiwiTGMiLCJNYyIsIk5jIiwiT2MiLCJQYyIsImRldGFjaEV2ZW50IiwiUWMiLCJSYyIsImF0dGFjaEV2ZW50IiwiU2MiLCJUYyIsIlVjIiwiVmMiLCJfaXNJbnB1dEV2ZW50U3VwcG9ydGVkIiwiV2MiLCJYYyIsIkFsdCIsIkNvbnRyb2wiLCJNZXRhIiwiU2hpZnQiLCJZYyIsImdldE1vZGlmaWVyU3RhdGUiLCJaYyIsIiRjIiwiYWQiLCJiZCIsImNkIiwiZGQiLCJzY3JlZW5YIiwic2NyZWVuWSIsImNsaWVudFgiLCJjbGllbnRZIiwicGFnZVgiLCJwYWdlWSIsInNoaWZ0S2V5IiwiYnV0dG9uIiwiYnV0dG9ucyIsInJlbGF0ZWRUYXJnZXQiLCJmcm9tRWxlbWVudCIsInRvRWxlbWVudCIsIm1vdmVtZW50WCIsIm1vdmVtZW50WSIsImVkIiwicG9pbnRlcklkIiwid2lkdGgiLCJoZWlnaHQiLCJwcmVzc3VyZSIsInRhbmdlbnRpYWxQcmVzc3VyZSIsInRpbHRYIiwidGlsdFkiLCJ0d2lzdCIsInBvaW50ZXJUeXBlIiwiaXNQcmltYXJ5IiwiZmQiLCJtb3VzZUVudGVyIiwibW91c2VMZWF2ZSIsInBvaW50ZXJFbnRlciIsInBvaW50ZXJMZWF2ZSIsImdkIiwiZGVmYXVsdFZpZXciLCJwYXJlbnRXaW5kb3ciLCJhbHRlcm5hdGUiLCJoZCIsImpkIiwia2QiLCJyZXNwb25kZXIiLCJsZCIsImVmZmVjdFRhZyIsIm9kIiwicWQiLCJjaGlsZCIsInNpYmxpbmciLCJwZCIsInJkIiwiYW5pbWF0aW9uTmFtZSIsImVsYXBzZWRUaW1lIiwicHNldWRvRWxlbWVudCIsInNkIiwiY2xpcGJvYXJkRGF0YSIsInRkIiwidWQiLCJjaGFyQ29kZSIsInZkIiwiRXNjIiwiU3BhY2ViYXIiLCJMZWZ0IiwiVXAiLCJSaWdodCIsIkRvd24iLCJEZWwiLCJXaW4iLCJNZW51IiwiQXBwcyIsIlNjcm9sbCIsIk1velByaW50YWJsZUtleSIsIndkIiwiOCIsIjkiLCIxMiIsIjEzIiwiMTYiLCIxNyIsIjE4IiwiMTkiLCIyMCIsIjI3IiwiMzIiLCIzMyIsIjM0IiwiMzUiLCIzNiIsIjM3IiwiMzgiLCIzOSIsIjQwIiwiNDUiLCI0NiIsIjExMiIsIjExMyIsIjExNCIsIjExNSIsIjExNiIsIjExNyIsIjExOCIsIjExOSIsIjEyMCIsIjEyMSIsIjEyMiIsIjEyMyIsIjE0NCIsIjE0NSIsIjIyNCIsInhkIiwibG9jYXRpb24iLCJ5ZCIsImRhdGFUcmFuc2ZlciIsInpkIiwidG91Y2hlcyIsInRhcmdldFRvdWNoZXMiLCJjaGFuZ2VkVG91Y2hlcyIsIkFkIiwiQmQiLCJkZWx0YVgiLCJ3aGVlbERlbHRhWCIsImRlbHRhWSIsIndoZWVsRGVsdGFZIiwid2hlZWxEZWx0YSIsImRlbHRhWiIsImRlbHRhTW9kZSIsIkNkIiwiRGQiLCJFZCIsIkZkIiwiR2QiLCJIZCIsIklkIiwiSmQiLCJLZCIsIkxkIiwiZXZlbnRQcmlvcml0eSIsIk1kIiwiZ2V0RXZlbnRQcmlvcml0eSIsIk5kIiwiT2QiLCJQZCIsInRhcmdldEluc3QiLCJhbmNlc3RvcnMiLCJjb250YWluZXJJbmZvIiwidG9wTGV2ZWxUeXBlIiwiUWQiLCJSZCIsIlNkIiwiVGQiLCJVZCIsImFkZEV2ZW50TGlzdGVuZXIiLCJWZCIsIldkIiwiWGQiLCJib2R5IiwiWWQiLCJmaXJzdENoaWxkIiwiWmQiLCJuZXh0U2libGluZyIsImFlIiwiSFRNTElGcmFtZUVsZW1lbnQiLCJjb250ZW50V2luZG93IiwiaHJlZiIsImJlIiwiY29udGVudEVkaXRhYmxlIiwiY2UiLCJkZSIsInNlbGVjdCIsImVlIiwiZmUiLCJnZSIsImhlIiwiaWUiLCJzZWxlY3Rpb25TdGFydCIsInNlbGVjdGlvbkVuZCIsImFuY2hvck5vZGUiLCJnZXRTZWxlY3Rpb24iLCJhbmNob3JPZmZzZXQiLCJmb2N1c05vZGUiLCJmb2N1c09mZnNldCIsImplIiwib25TZWxlY3QiLCJsZSIsImtlIiwibWUiLCJzZWxlY3RlZCIsImRlZmF1bHRTZWxlY3RlZCIsIm5lIiwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwiLCJvZSIsInBlIiwicWUiLCJTaW1wbGVFdmVudFBsdWdpbiIsIkVudGVyTGVhdmVFdmVudFBsdWdpbiIsIkNoYW5nZUV2ZW50UGx1Z2luIiwiU2VsZWN0RXZlbnRQbHVnaW4iLCJCZWZvcmVJbnB1dEV2ZW50UGx1Z2luIiwicmUiLCJodG1sIiwibWF0aG1sIiwic3ZnIiwic2UiLCJ0ZSIsInVlIiwidmUiLCJNU0FwcCIsImV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uIiwibmFtZXNwYWNlVVJJIiwiaW5uZXJIVE1MIiwicmVtb3ZlQ2hpbGQiLCJhcHBlbmRDaGlsZCIsIndlIiwibGFzdENoaWxkIiwibm9kZVZhbHVlIiwieGUiLCJhbmltYXRpb25JdGVyYXRpb25Db3VudCIsImJvcmRlckltYWdlT3V0c2V0IiwiYm9yZGVySW1hZ2VTbGljZSIsImJvcmRlckltYWdlV2lkdGgiLCJib3hGbGV4IiwiYm94RmxleEdyb3VwIiwiYm94T3JkaW5hbEdyb3VwIiwiY29sdW1uQ291bnQiLCJjb2x1bW5zIiwiZmxleCIsImZsZXhHcm93IiwiZmxleFBvc2l0aXZlIiwiZmxleFNocmluayIsImZsZXhOZWdhdGl2ZSIsImZsZXhPcmRlciIsImdyaWRBcmVhIiwiZ3JpZFJvdyIsImdyaWRSb3dFbmQiLCJncmlkUm93U3BhbiIsImdyaWRSb3dTdGFydCIsImdyaWRDb2x1bW4iLCJncmlkQ29sdW1uRW5kIiwiZ3JpZENvbHVtblNwYW4iLCJncmlkQ29sdW1uU3RhcnQiLCJmb250V2VpZ2h0IiwibGluZUNsYW1wIiwibGluZUhlaWdodCIsIm9wYWNpdHkiLCJvcnBoYW5zIiwidGFiU2l6ZSIsIndpZG93cyIsInpJbmRleCIsInpvb20iLCJmaWxsT3BhY2l0eSIsImZsb29kT3BhY2l0eSIsInN0b3BPcGFjaXR5Iiwic3Ryb2tlRGFzaGFycmF5Iiwic3Ryb2tlRGFzaG9mZnNldCIsInN0cm9rZU1pdGVybGltaXQiLCJzdHJva2VPcGFjaXR5Iiwic3Ryb2tlV2lkdGgiLCJ5ZSIsInplIiwiQWUiLCJzZXRQcm9wZXJ0eSIsIkNlIiwibWVudWl0ZW0iLCJhcmVhIiwiYmFzZSIsImJyIiwiY29sIiwiZW1iZWQiLCJociIsImltZyIsImtleWdlbiIsImxpbmsiLCJtZXRhIiwicGFyYW0iLCJ0cmFjayIsIndiciIsIkRlIiwiRWUiLCJpcyIsIkZlIiwiR2UiLCJIZSIsIkllIiwiSmUiLCJhdXRvRm9jdXMiLCJLZSIsIl9faHRtbCIsIkxlIiwiTWUiLCJOZSIsIk9lIiwiUGUiLCJRZSIsIlJlIiwiU2UiLCJjb250ZXh0VHlwZXMiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0IiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQiLCJjaGlsZENvbnRleHRUeXBlcyIsIlRlIiwiVWUiLCJWZSIsIldlIiwiZ2V0Q2hpbGRDb250ZXh0IiwiWGUiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dCIsIlllIiwiWmUiLCJ1bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHkiLCIkZSIsInVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2siLCJhZiIsInVuc3RhYmxlX2NhbmNlbENhbGxiYWNrIiwiYmYiLCJ1bnN0YWJsZV9zaG91bGRZaWVsZCIsImNmIiwidW5zdGFibGVfcmVxdWVzdFBhaW50IiwiZGYiLCJ1bnN0YWJsZV9ub3ciLCJlZiIsInVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsIiwiZmYiLCJ1bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eSIsImhmIiwidW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHkiLCJqZiIsInVuc3RhYmxlX05vcm1hbFByaW9yaXR5Iiwia2YiLCJ1bnN0YWJsZV9Mb3dQcmlvcml0eSIsImxmIiwidW5zdGFibGVfSWRsZVByaW9yaXR5IiwibWYiLCJuZiIsIm9mIiwicGYiLCJxZiIsInJmIiwic2YiLCJ0ZiIsInVmIiwidmYiLCJ3ZiIsInhmIiwieWYiLCJ6ZiIsIkFmIiwiQ2YiLCJEZiIsIkVmIiwiRmYiLCJHZiIsIkhmIiwiSWYiLCJKZiIsImNoaWxkRXhwaXJhdGlvblRpbWUiLCJLZiIsImZpcnN0Q29udGV4dCIsImV4cGlyYXRpb25UaW1lIiwiTGYiLCJNZiIsIm9ic2VydmVkQml0cyIsInJlc3BvbmRlcnMiLCJOZiIsIk9mIiwiYmFzZVN0YXRlIiwiZmlyc3RVcGRhdGUiLCJsYXN0VXBkYXRlIiwiZmlyc3RDYXB0dXJlZFVwZGF0ZSIsImxhc3RDYXB0dXJlZFVwZGF0ZSIsImZpcnN0RWZmZWN0IiwibGFzdEVmZmVjdCIsImZpcnN0Q2FwdHVyZWRFZmZlY3QiLCJsYXN0Q2FwdHVyZWRFZmZlY3QiLCJQZiIsIlFmIiwic3VzcGVuc2VDb25maWciLCJwYXlsb2FkIiwibmV4dEVmZmVjdCIsIlJmIiwiU2YiLCJ1cGRhdGVRdWV1ZSIsIm1lbW9pemVkU3RhdGUiLCJUZiIsIlVmIiwiVmYiLCJXZiIsIlhmIiwiWWYiLCJaZiIsIiRmIiwiYWciLCJiZyIsImZnIiwiX3JlYWN0SW50ZXJuYWxGaWJlciIsImNnIiwiZGciLCJlZyIsImdnIiwic2hvdWxkQ29tcG9uZW50VXBkYXRlIiwiaGciLCJjb250ZXh0VHlwZSIsImlnIiwiY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsIlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwiamciLCJnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMiLCJnZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSIsIlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQiLCJjb21wb25lbnRXaWxsTW91bnQiLCJjb21wb25lbnREaWRNb3VudCIsImtnIiwibGciLCJfc3RyaW5nUmVmIiwibWciLCJuZyIsIm9nIiwicGciLCJlbGVtZW50VHlwZSIsInFnIiwiaW1wbGVtZW50YXRpb24iLCJyZyIsInNnIiwicmIiLCJkZWxldGUiLCJCZSIsInRnIiwidWciLCJ2ZyIsIndnIiwieGciLCJ5ZyIsInpnIiwiQWciLCJkb2N1bWVudEVsZW1lbnQiLCJ0YWdOYW1lIiwiQmciLCJDZyIsIkRnIiwiRWciLCJGZyIsIkdnIiwiSGciLCJtZW1vaXplZFByb3BzIiwicmV2ZWFsT3JkZXIiLCJJZyIsIkpnIiwiS2ciLCJMZyIsIk1nIiwiTmciLCJPZyIsIlBnIiwiUWciLCJSZyIsIlNnIiwiVGciLCJVZyIsIlZnIiwiV2ciLCJYZyIsIllnIiwiWmciLCIkZyIsImFoIiwiYmgiLCJjaCIsImRoIiwiZWgiLCJmaCIsImhoIiwiaWgiLCJqaCIsInF1ZXVlIiwia2giLCJsaCIsIm1oIiwibGFzdFJlbmRlcmVkUmVkdWNlciIsImRpc3BhdGNoIiwibGFzdFJlbmRlcmVkU3RhdGUiLCJlYWdlclJlZHVjZXIiLCJlYWdlclN0YXRlIiwibmgiLCJkZXN0cm95IiwiZGVwcyIsIm9oIiwicGgiLCJxaCIsInJoIiwic2giLCJyZWFkQ29udGV4dCIsInVzZVJlc3BvbmRlciIsInRoIiwidWgiLCJ2aCIsIndoIiwieGgiLCJ5aCIsInBlbmRpbmdQcm9wcyIsInpoIiwiQWgiLCJCaCIsIkNoIiwiRGgiLCJFaCIsIkZoIiwiR2giLCJIaCIsIkloIiwiSmgiLCJLaCIsIkxoIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUiLCJjb21wb25lbnRXaWxsVXBkYXRlIiwiY29tcG9uZW50RGlkVXBkYXRlIiwiTWgiLCJnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3IiLCJOaCIsInBlbmRpbmdDb250ZXh0IiwiT2giLCJQaCIsImZhbGxiYWNrIiwidW5zdGFibGVfYXZvaWRUaGlzRmFsbGJhY2siLCJRaCIsImlzQmFja3dhcmRzIiwicmVuZGVyaW5nIiwidGFpbEV4cGlyYXRpb24iLCJ0YWlsTW9kZSIsIlJoIiwiU2giLCJUaCIsIlVoIiwiVmgiLCJXaCIsIiRoIiwiYWkiLCJiaSIsIm9uQ2xpY2siLCJvbmNsaWNrIiwiY2kiLCJXZWFrU2V0IiwiZGkiLCJnaSIsImZpIiwiaGkiLCJpaSIsImppIiwiY29tcG9uZW50V2lsbFVubW91bnQiLCJlaSIsImtpIiwibGkiLCJtaSIsIm5pIiwiaW5zZXJ0QmVmb3JlIiwiX3JlYWN0Um9vdENvbnRhaW5lciIsIm9pIiwid2FzTXVsdGlwbGUiLCJtdWx0aXBsZSIsInBpIiwiZGlzcGxheSIsInFpIiwicmkiLCJ0aGVuIiwic2kiLCJ0aSIsImVsZW1lbnQiLCJ1aSIsInZpIiwid2kiLCJjb21wb25lbnREaWRDYXRjaCIsInhpIiwiY29tcG9uZW50U3RhY2siLCJ5aSIsInppIiwiQWkiLCJCaSIsIkNpIiwiRGkiLCJFaSIsIkZpIiwiR2kiLCJIaSIsIklpIiwiSmkiLCJLaSIsIkxpIiwiTWkiLCJOaSIsIk9pIiwiUGkiLCJRaSIsIlJpIiwiU2kiLCJUaSIsIlVpIiwiVmkiLCJXaSIsInRpbWVvdXRNcyIsIlhpIiwiWWkiLCJwaW5nVGltZSIsIlppIiwiZmlyc3RQZW5kaW5nVGltZSIsImxhc3RQZW5kaW5nVGltZSIsImNhbGxiYWNrRXhwaXJhdGlvblRpbWUiLCJjYWxsYmFja05vZGUiLCIkaSIsInRpbWVvdXQiLCJhaiIsImJqIiwiY2oiLCJlaiIsImZqIiwiZ2oiLCJoaiIsImZpbmlzaGVkV29yayIsImZpbmlzaGVkRXhwaXJhdGlvblRpbWUiLCJ0aW1lb3V0SGFuZGxlIiwiaWoiLCJqaiIsInBpbmdDYWNoZSIsImtqIiwibGoiLCJmaXJzdEJhdGNoIiwiX2RlZmVyIiwiX2V4cGlyYXRpb25UaW1lIiwiX29uQ29tcGxldGUiLCJkaiIsImJ1c3lNaW5EdXJhdGlvbk1zIiwiYnVzeURlbGF5TXMiLCJtaiIsImNyZWF0ZUVsZW1lbnROUyIsImNyZWF0ZVRleHROb2RlIiwibmoiLCJyYW5nZUNvdW50IiwiemIiLCJmb2N1c2VkRWxlbSIsInNlbGVjdGlvblJhbmdlIiwidWEiLCJnaCIsIm9qIiwiX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUiLCIkZCIsImNvbnRhaW5zIiwiY29tcGFyZURvY3VtZW50UG9zaXRpb24iLCJzZXRTdGFydCIsInJlbW92ZUFsbFJhbmdlcyIsImFkZFJhbmdlIiwic2V0RW5kIiwibGVmdCIsInNjcm9sbExlZnQiLCJ0b3AiLCJzY3JvbGxUb3AiLCJmb2N1cyIsIiRhIiwibmMiLCJtZCIsIkZqIiwiWGgiLCJZaCIsIkdqIiwibmQiLCJaaCIsImdmIiwicGoiLCJxaiIsInJqIiwiaGlkZGVuIiwiQmYiLCJzaiIsImh5ZHJhdGUiLCJ1bnN0YWJsZV9vYnNlcnZlZEJpdHMiLCJ1aiIsInBlbmRpbmdDaGlsZHJlbiIsInZqIiwid2oiLCJ4aiIsInlqIiwiemoiLCJCaiIsIl9yb290IiwiX2NhbGxiYWNrcyIsIl9uZXh0IiwiX2hhc0NoaWxkcmVuIiwiX2RpZENvbXBsZXRlIiwiX2NoaWxkcmVuIiwiQ2oiLCJfZGlkQ29tbWl0IiwiX29uQ29tbWl0IiwiRGoiLCJfaW50ZXJuYWxSb290IiwiRWoiLCJIaiIsIkpqIiwiaGFzQXR0cmlidXRlIiwiSWoiLCJLaiIsIkFqIiwicXVlcnlTZWxlY3RvckFsbCIsIkpTT04iLCJmb3JtIiwidW5tb3VudCIsImNyZWF0ZUJhdGNoIiwiTmoiLCJjcmVhdGVQb3J0YWwiLCJmaW5kRE9NTm9kZSIsInVuc3RhYmxlX3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyIiwidW5tb3VudENvbXBvbmVudEF0Tm9kZSIsInVuc3RhYmxlX2NyZWF0ZVBvcnRhbCIsInVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzIiwidW5zdGFibGVfaW50ZXJhY3RpdmVVcGRhdGVzIiwidW5zdGFibGVfZGlzY3JldGVVcGRhdGVzIiwidW5zdGFibGVfZmx1c2hEaXNjcmV0ZVVwZGF0ZXMiLCJmbHVzaFN5bmMiLCJ1bnN0YWJsZV9jcmVhdGVSb290IiwidW5zdGFibGVfY3JlYXRlU3luY1Jvb3QiLCJ1bnN0YWJsZV9mbHVzaENvbnRyb2xsZWQiLCJFdmVudHMiLCJmaW5kRmliZXJCeUhvc3RJbnN0YW5jZSIsImlzRGlzYWJsZWQiLCJzdXBwb3J0c0ZpYmVyIiwiaW5qZWN0Iiwib25Db21taXRGaWJlclJvb3QiLCJvbkNvbW1pdEZpYmVyVW5tb3VudCIsInRqIiwib3ZlcnJpZGVIb29rU3RhdGUiLCJvdmVycmlkZVByb3BzIiwic2V0U3VzcGVuc2VIYW5kbGVyIiwic2NoZWR1bGVVcGRhdGUiLCJjdXJyZW50RGlzcGF0Y2hlclJlZiIsImZpbmRIb3N0SW5zdGFuY2VCeUZpYmVyIiwiZmluZEhvc3RJbnN0YW5jZXNGb3JSZWZyZXNoIiwic2NoZWR1bGVSZWZyZXNoIiwic2NoZWR1bGVSb290Iiwic2V0UmVmcmVzaEhhbmRsZXIiLCJnZXRDdXJyZW50RmliZXIiLCJidW5kbGVUeXBlIiwicmVuZGVyZXJQYWNrYWdlTmFtZSIsIk9qIiwiUGoiLCJ1bnN0YWJsZV9mb3JjZUZyYW1lUmF0ZSIsIk1lc3NhZ2VDaGFubmVsIiwicGVyZm9ybWFuY2UiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsInBvc3RNZXNzYWdlIiwicG9ydDIiLCJwb3J0MSIsIm9ubWVzc2FnZSIsInByaW9yaXR5TGV2ZWwiLCJzdGFydFRpbWUiLCJ1bnN0YWJsZV9uZXh0IiwidW5zdGFibGVfd3JhcENhbGxiYWNrIiwidW5zdGFibGVfY29udGludWVFeGVjdXRpb24iLCJ1bnN0YWJsZV9wYXVzZUV4ZWN1dGlvbiIsInVuc3RhYmxlX2dldEZpcnN0Q2FsbGJhY2tOb2RlIiwibmF0aXZlU2xpY2UiLCJmaW4iLCJfdHlwZW9mMiIsIl9zZXRQcm90b3R5cGVPZiIsImhleFRhYmxlIiwiYXJyYXlUb09iamVjdCIsInBsYWluT2JqZWN0cyIsImFjYyIsImNvbWJpbmUiLCJpdGVtIiwiaiIsImNvbXBhY3RlZCIsImNvbXBhY3RRdWV1ZSIsImRlY29kZSIsInN0ciIsImRlY29kZXIiLCJjaGFyc2V0Iiwic3RyV2l0aG91dFBsdXMiLCJkZWNvZGVVUklDb21wb25lbnQiLCJlbmNvZGUiLCJkZWZhdWx0RW5jb2RlciIsIiQwIiwiYWxsb3dQcm90b3R5cGVzIiwibWVyZ2VUYXJnZXQiLCJ0YXJnZXRJdGVtIiwiSU9iamVjdCIsImRlZmluZWQiLCJub3Rfc3RyaW5nIiwibm90X2Jvb2wiLCJub3RfdHlwZSIsIm5vdF9wcmltaXRpdmUiLCJudW1lcmljX2FyZyIsImpzb24iLCJub3RfanNvbiIsIm1vZHVsbyIsImtleV9hY2Nlc3MiLCJpbmRleF9hY2Nlc3MiLCJzaWduIiwic3ByaW50ZiIsInBhcnNlX3RyZWUiLCJhcmd2IiwicGFkX2NoYXJhY3RlciIsInBhZF9sZW5ndGgiLCJpc19wb3NpdGl2ZSIsImN1cnNvciIsInRyZWVfbGVuZ3RoIiwib3V0cHV0IiwicGFyYW1fbm8iLCJ0b0V4cG9uZW50aWFsIiwidG9GaXhlZCIsIk51bWJlciIsInRvUHJlY2lzaW9uIiwicGFkX2NoYXIiLCJhbGlnbiIsInNwcmludGZfZm9ybWF0IiwiZm10Iiwic3ByaW50Zl9jYWNoZSIsIl9mbXQiLCJhcmdfbmFtZXMiLCJTeW50YXhFcnJvciIsImZpZWxkX2xpc3QiLCJyZXBsYWNlbWVudF9maWVsZCIsImZpZWxkX21hdGNoIiwic3ByaW50Zl9wYXJzZSIsInZzcHJpbnRmIiwiUmVhY3RJcyIsIlJFQUNUX1NUQVRJQ1MiLCJnZXREZWZhdWx0UHJvcHMiLCJtaXhpbnMiLCJwcm9wVHlwZXMiLCJLTk9XTl9TVEFUSUNTIiwiY2FsbGVyIiwiY2FsbGVlIiwiTUVNT19TVEFUSUNTIiwiVFlQRV9TVEFUSUNTIiwiZ2V0U3RhdGljcyIsImNvbXBvbmVudCIsImlzTWVtbyIsIkZvcndhcmRSZWYiLCJvYmplY3RQcm90b3R5cGUiLCJob2lzdE5vblJlYWN0U3RhdGljcyIsInRhcmdldENvbXBvbmVudCIsInNvdXJjZUNvbXBvbmVudCIsImJsYWNrbGlzdCIsImluaGVyaXRlZENvbXBvbmVudCIsInRhcmdldFN0YXRpY3MiLCJzb3VyY2VTdGF0aWNzIiwicGVyY2VudFR3ZW50aWVzIiwidXRpbCIsIkZvcm1hdCIsIlJGQzE3MzgiLCJSRkMzOTg2IiwiZm9ybWF0dGVycyIsImRQIiwiY29mIiwiYXJyYXlXaXRoSG9sZXMiLCJpdGVyYWJsZVRvQXJyYXlMaW1pdCIsIm5vbkl0ZXJhYmxlUmVzdCIsImFyciIsInN5bWJvbE9ic2VydmFibGVQb255ZmlsbCIsIm9ic2VydmFibGUiLCIkaW5kZXhPZiIsIm5hdGl2ZUluZGV4T2YiLCJORUdBVElWRV9aRVJPIiwic2VhcmNoRWxlbWVudCIsIl9hcnIiLCJfbiIsIl9kIiwiX2UiLCJfcyIsIl9pIiwicnVudGltZSIsIk9wIiwiaGFzT3duIiwiJFN5bWJvbCIsIml0ZXJhdG9yU3ltYm9sIiwiYXN5bmNJdGVyYXRvclN5bWJvbCIsImFzeW5jSXRlcmF0b3IiLCJ0b1N0cmluZ1RhZ1N5bWJvbCIsImlubmVyRm4iLCJvdXRlckZuIiwidHJ5TG9jc0xpc3QiLCJwcm90b0dlbmVyYXRvciIsIkdlbmVyYXRvciIsImdlbmVyYXRvciIsIkNvbnRleHQiLCJfaW52b2tlIiwiR2VuU3RhdGVTdXNwZW5kZWRTdGFydCIsIkdlblN0YXRlRXhlY3V0aW5nIiwiR2VuU3RhdGVDb21wbGV0ZWQiLCJkb25lUmVzdWx0IiwiZGVsZWdhdGUiLCJkZWxlZ2F0ZVJlc3VsdCIsIm1heWJlSW52b2tlRGVsZWdhdGUiLCJDb250aW51ZVNlbnRpbmVsIiwic2VudCIsIl9zZW50IiwiZGlzcGF0Y2hFeGNlcHRpb24iLCJhYnJ1cHQiLCJyZWNvcmQiLCJ0cnlDYXRjaCIsIkdlblN0YXRlU3VzcGVuZGVkWWllbGQiLCJtYWtlSW52b2tlTWV0aG9kIiwiR2VuZXJhdG9yRnVuY3Rpb24iLCJHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSIsIkl0ZXJhdG9yUHJvdG90eXBlIiwiZ2V0UHJvdG8iLCJOYXRpdmVJdGVyYXRvclByb3RvdHlwZSIsIkdwIiwiZGVmaW5lSXRlcmF0b3JNZXRob2RzIiwiQXN5bmNJdGVyYXRvciIsInByZXZpb3VzUHJvbWlzZSIsImNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnIiwiX19hd2FpdCIsInVud3JhcHBlZCIsImluZm8iLCJyZXN1bHROYW1lIiwibmV4dExvYyIsInB1c2hUcnlFbnRyeSIsImxvY3MiLCJ0cnlMb2MiLCJjYXRjaExvYyIsImZpbmFsbHlMb2MiLCJhZnRlckxvYyIsInRyeUVudHJpZXMiLCJyZXNldFRyeUVudHJ5IiwiY29tcGxldGlvbiIsInJlc2V0IiwiaXRlcmF0b3JNZXRob2QiLCJpc0dlbmVyYXRvckZ1bmN0aW9uIiwiZ2VuRnVuIiwiY3RvciIsIm1hcmsiLCJhd3JhcCIsImFzeW5jIiwiaXRlciIsInNraXBUZW1wUmVzZXQiLCJzdG9wIiwicm9vdFJlY29yZCIsInJ2YWwiLCJleGNlcHRpb24iLCJoYW5kbGUiLCJsb2MiLCJjYXVnaHQiLCJoYXNDYXRjaCIsImhhc0ZpbmFsbHkiLCJmaW5hbGx5RW50cnkiLCJjb21wbGV0ZSIsImZpbmlzaCIsInRocm93biIsImRlbGVnYXRlWWllbGQiLCJyZWdlbmVyYXRvclJ1bnRpbWUiLCJhY2NpZGVudGFsU3RyaWN0TW9kZSIsInV0aWxzIiwiYXJyYXlQcmVmaXhHZW5lcmF0b3JzIiwiYnJhY2tldHMiLCJjb21tYSIsImluZGljZXMiLCJwdXNoVG9BcnJheSIsInZhbHVlT3JBcnJheSIsInRvSVNPIiwidG9JU09TdHJpbmciLCJkZWZhdWx0Rm9ybWF0IiwiYWRkUXVlcnlQcmVmaXgiLCJhbGxvd0RvdHMiLCJjaGFyc2V0U2VudGluZWwiLCJkZWxpbWl0ZXIiLCJlbmNvZGVyIiwiZW5jb2RlVmFsdWVzT25seSIsImZvcm1hdHRlciIsInNlcmlhbGl6ZURhdGUiLCJza2lwTnVsbHMiLCJzdHJpY3ROdWxsSGFuZGxpbmciLCJnZW5lcmF0ZUFycmF5UHJlZml4Iiwib2JqS2V5cyIsIm9wdHMiLCJub3JtYWxpemVTdHJpbmdpZnlPcHRpb25zIiwiYXJyYXlGb3JtYXQiLCJqb2luZWQiLCJhcnJheUxpbWl0IiwiaWdub3JlUXVlcnlQcmVmaXgiLCJpbnRlcnByZXROdW1lcmljRW50aXRpZXMiLCJwYXJhbWV0ZXJMaW1pdCIsInBhcnNlQXJyYXlzIiwibnVtYmVyU3RyIiwicGFyc2VLZXlzIiwiZ2l2ZW5LZXkiLCJzZWdtZW50IiwibGVhZiIsImNsZWFuUm9vdCIsIjAiLCJwYXJzZU9iamVjdCIsIm5vcm1hbGl6ZVBhcnNlT3B0aW9ucyIsInRlbXBPYmoiLCJjbGVhblN0ciIsInBhcnRzIiwic2tpcEluZGV4IiwicGFydCIsImJyYWNrZXRFcXVhbHNQb3MiLCJwb3MiLCJwYXJzZVZhbHVlcyIsIm5ld09iaiIsImNyZWF0ZURlc2MiLCJnZXRLZXlzIiwiZ09QUyIsInBJRSIsIiRhc3NpZ24iLCJhTGVuIiwiaXNFbnVtIiwidG9JT2JqZWN0IiwiYXJyYXlJbmRleE9mIiwicHgiLCIkT2JqZWN0IiwiZFBzIiwiRW1wdHkiLCJjcmVhdGVEaWN0IiwiaWZyYW1lRG9jdW1lbnQiLCJpZnJhbWUiLCJzcmMiLCJvcGVuIiwid3JpdGUiLCJjbG9zZSIsIlByb3BlcnRpZXMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiUmVhY3RQcm9wVHlwZXNTZWNyZXQiLCJlbXB0eUZ1bmN0aW9uIiwiZW1wdHlGdW5jdGlvbldpdGhSZXNldCIsInJlc2V0V2FybmluZ0NhY2hlIiwic2hpbSIsInByb3BOYW1lIiwiY29tcG9uZW50TmFtZSIsInByb3BGdWxsTmFtZSIsInNlY3JldCIsImdldFNoaW0iLCJpc1JlcXVpcmVkIiwiUmVhY3RQcm9wVHlwZXMiLCJib29sIiwiYW55IiwiYXJyYXlPZiIsImluc3RhbmNlT2YiLCJvYmplY3RPZiIsIm9uZU9mIiwib25lT2ZUeXBlIiwic2hhcGUiLCJleGFjdCIsImNoZWNrUHJvcFR5cGVzIiwiUHJvcFR5cGVzIiwidHlwZU9mIiwiQXN5bmNNb2RlIiwiQ29uY3VycmVudE1vZGUiLCJDb250ZXh0Q29uc3VtZXIiLCJDb250ZXh0UHJvdmlkZXIiLCJFbGVtZW50IiwiTGF6eSIsIk1lbW8iLCJQb3J0YWwiLCJpc1ZhbGlkRWxlbWVudFR5cGUiLCJpc0FzeW5jTW9kZSIsImlzQ29uY3VycmVudE1vZGUiLCJpc0NvbnRleHRDb25zdW1lciIsImlzQ29udGV4dFByb3ZpZGVyIiwiaXNGb3J3YXJkUmVmIiwiaXNGcmFnbWVudCIsImlzUG9ydGFsIiwiaXNQcm9maWxlciIsImlzU3RyaWN0TW9kZSIsImlzU3VzcGVuc2UiLCJvcmlnaW5hbE1vZHVsZSIsIiR2YWx1ZXMiLCJpc0VudHJpZXMiLCJLRVkiLCJleHAiLCJnZXRUaW1lIiwiUFJFQ0VERU5DRSIsIk9QRU5FUlMiLCJURVJNSU5BVE9SUyIsIlBBVFRFUk4iLCJPUEVSQVRPUlMiLCJjb21waWxlIiwiZXhwcmVzc2lvbiIsInRlcm1zIiwidGVybSIsInN1YnN0ciIsInZhcmlhYmxlcyIsImdldE9wZXJhdG9yUmVzdWx0IiwiZWFybHlSZXR1cm4iLCJERUZBVUxUX09QVElPTlMiLCJjb250ZXh0RGVsaW1pdGVyIiwib25NaXNzaW5nS2V5IiwiVGFubmluIiwicGx1cmFsRm9ybXMiLCJnZXRQbHVyYWxGb3JtIiwiZG9tYWluIiwiY29uZmlnIiwicGx1cmFsIiwicGx1cmFsX2Zvcm1zIiwiZ2V0UGx1cmFsRXhwcmVzc2lvbiIsImRjbnBnZXR0ZXh0Iiwic2luZ3VsYXIiLCJERUZBVUxUX0xPQ0FMRV9EQVRBIiwiaTE4biIsInNpbmdsZSIsInNldExvY2FsZURhdGEiLCJfXyIsIm5vbmNlIiwibWlkZGxld2FyZSIsIl9vcHRpb25zJGhlYWRlcnMiLCJoZWFkZXJzIiwiaGVhZGVyTmFtZSIsIm5hbWVzcGFjZVRyaW1tZWQiLCJlbmRwb2ludFRyaW1tZWQiLCJlbmRwb2ludCIsInJvb3RVUkwiLCJvcHRpb25zV2l0aFBhdGgiLCJhcGlSb290IiwicHJlbG9hZGVkRGF0YSIsIl9vcHRpb25zJHBhcnNlIiwic3BsaXR0ZWQiLCJxdWVyeSIsImxvY2FsZUNvbXBhcmUiLCJnZXRTdGFibGVQYXRoIiwiYXN5bmNHZW5lcmF0b3JTdGVwIiwiZ2VuIiwiX3Rocm93IiwiYWRkUXVlcnlBcmdzIiwiYmFzZVVybCIsInF1ZXJ5U3RyaW5nSW5kZXgiLCJoYXNRdWVyeUFyZyIsImdldFF1ZXJ5QXJnIiwiX3JlZiIsInF1ZXJ5QXJncyIsInJlc3BvbnNlIiwiZ2V0TmV4dFBhZ2VVcmwiLCJsaW5rSGVhZGVyIiwicGFyc2VMaW5rSGVhZGVyIiwicmVxdWVzdENvbnRhaW5zVW5ib3VuZGVkUXVlcnkiLCJwYXRoSXNVbmJvdW5kZWQiLCJ1cmxJc1VuYm91bmRlZCIsIl9yZWYyIiwiX2NhbGxlZSIsInJlc3VsdHMiLCJuZXh0UGFnZSIsIm1lcmdlZFJlc3VsdHMiLCJuZXh0UmVzcG9uc2UiLCJuZXh0UmVzdWx0cyIsInBlcl9wYWdlIiwiX3giLCJfeDIiLCJPVkVSUklERV9NRVRIT0RTIiwiREVGQVVMVF9NRVRIT0QiLCJERUZBVUxUX0hFQURFUlMiLCJBY2NlcHQiLCJjcmVkZW50aWFscyIsIm1pZGRsZXdhcmVzIiwiX2xvY2FsZSIsIl9vcHRpb25zJG1ldGhvZCIsImNoZWNrU3RhdHVzIiwic3RhdHVzIiwiZmV0Y2hIYW5kbGVyIiwibmV4dE9wdGlvbnMiLCJfbmV4dE9wdGlvbnMkcGFyc2UiLCJyZW1haW5pbmdPcHRpb25zIiwiZmV0Y2giLCJjYXRjaCIsImludmFsaWRKc29uRXJyb3IiLCJjb2RlIiwidW5rbm93bkVycm9yIiwiYXBpRmV0Y2giLCJzdGVwcyIsImNyZWF0ZVJ1blN0ZXAiLCJ3b3JraW5nT3B0aW9ucyIsIm5vbmNlRW5kcG9pbnQiLCJub25jZU1pZGRsZXdhcmUiLCJ1c2UiLCJ1bnNoaWZ0Iiwic2V0RmV0Y2hIYW5kbGVyIiwibmV3RmV0Y2hIYW5kbGVyIiwiY3JlYXRlTm9uY2VNaWRkbGV3YXJlIiwiY3JlYXRlUHJlbG9hZGluZ01pZGRsZXdhcmUiLCJjcmVhdGVSb290VVJMTWlkZGxld2FyZSIsImZldGNoQWxsTWlkZGxld2FyZSIsImxhdGVyIiwidXNlTWVtb09uZSIsImdldFJlc3VsdCIsImlucHV0cyIsImNvbW1pdHRlZCIsIm5ld0lucHV0cyIsImxhc3RJbnB1dHMiLCJhcmVJbnB1dHNFcXVhbCIsIl9pbmhlcml0c0xvb3NlIiwiaXNQcm9kdWN0aW9uIiwicmFuZG9tU3RyaW5nIiwiQWN0aW9uVHlwZXMiLCJJTklUIiwiUkVQTEFDRSIsIlBST0JFX1VOS05PV05fQUNUSU9OIiwiY3JlYXRlU3RvcmUiLCJyZWR1Y2VyIiwicHJlbG9hZGVkU3RhdGUiLCJlbmhhbmNlciIsImN1cnJlbnRSZWR1Y2VyIiwiY3VycmVudFN0YXRlIiwiY3VycmVudExpc3RlbmVycyIsIm5leHRMaXN0ZW5lcnMiLCJpc0Rpc3BhdGNoaW5nIiwiZW5zdXJlQ2FuTXV0YXRlTmV4dExpc3RlbmVycyIsImdldFN0YXRlIiwic3Vic2NyaWJlIiwibGlzdGVuZXIiLCJpc1N1YnNjcmliZWQiLCJsaXN0ZW5lcnMiLCJyZXBsYWNlUmVkdWNlciIsIm5leHRSZWR1Y2VyIiwib3V0ZXJTdWJzY3JpYmUiLCJvYnNlcnZlciIsIm9ic2VydmVTdGF0ZSIsInVuc3Vic2NyaWJlIiwiYmluZEFjdGlvbkNyZWF0b3IiLCJhY3Rpb25DcmVhdG9yIiwiYmluZEFjdGlvbkNyZWF0b3JzIiwiYWN0aW9uQ3JlYXRvcnMiLCJib3VuZEFjdGlvbkNyZWF0b3JzIiwiZW51bWVyYWJsZU9ubHkiLCJfb2JqZWN0U3ByZWFkMiIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJjb21wb3NlIiwiX2xlbiIsIl9rZXkiLCJSZWFjdFJlZHV4Q29udGV4dCIsImdldEJhdGNoIiwiQ0xFQVJFRCIsIm51bGxMaXN0ZW5lcnMiLCJub3RpZnkiLCJTdWJzY3JpcHRpb24iLCJwYXJlbnRTdWIiLCJoYW5kbGVDaGFuZ2VXcmFwcGVyIiwiX3Byb3RvIiwiYWRkTmVzdGVkU3ViIiwidHJ5U3Vic2NyaWJlIiwibm90aWZ5TmVzdGVkU3VicyIsIm9uU3RhdGVDaGFuZ2UiLCJiYXRjaCIsImNyZWF0ZUxpc3RlbmVyQ29sbGVjdGlvbiIsInRyeVVuc3Vic2NyaWJlIiwiY29udGV4dFZhbHVlIiwic3Vic2NyaXB0aW9uIiwicHJldmlvdXNTdGF0ZSIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIiwiRU1QVFlfQVJSQVkiLCJOT19TVUJTQ1JJUFRJT05fQVJSQVkiLCJzdG9yZVN0YXRlVXBkYXRlc1JlZHVjZXIiLCJ1cGRhdGVDb3VudCIsImluaXRTdGF0ZVVwZGF0ZXMiLCJ1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0IiwiY29ubmVjdEFkdmFuY2VkIiwic2VsZWN0b3JGYWN0b3J5IiwiX3JlZjIkZ2V0RGlzcGxheU5hbWUiLCJnZXREaXNwbGF5TmFtZSIsIl9yZWYyJG1ldGhvZE5hbWUiLCJfcmVmMiRyZW5kZXJDb3VudFByb3AiLCJyZW5kZXJDb3VudFByb3AiLCJfcmVmMiRzaG91bGRIYW5kbGVTdGEiLCJzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMiLCJfcmVmMiRzdG9yZUtleSIsInN0b3JlS2V5IiwiX3JlZjIkd2l0aFJlZiIsIndpdGhSZWYiLCJfcmVmMiRmb3J3YXJkUmVmIiwiX3JlZjIkY29udGV4dCIsImNvbm5lY3RPcHRpb25zIiwiV3JhcHBlZENvbXBvbmVudCIsIndyYXBwZWRDb21wb25lbnROYW1lIiwic2VsZWN0b3JGYWN0b3J5T3B0aW9ucyIsInB1cmUiLCJ1c2VQdXJlT25seU1lbW8iLCJDb25uZWN0RnVuY3Rpb24iLCJfdXNlTWVtbyIsImZvcndhcmRlZFJlZiIsIndyYXBwZXJQcm9wcyIsInByb3BzQ29udGV4dCIsIkNvbnRleHRUb1VzZSIsImRpZFN0b3JlQ29tZUZyb21Qcm9wcyIsImRpZFN0b3JlQ29tZUZyb21Db250ZXh0IiwiY2hpbGRQcm9wc1NlbGVjdG9yIiwiY3JlYXRlQ2hpbGRTZWxlY3RvciIsIl91c2VNZW1vMiIsIm92ZXJyaWRkZW5Db250ZXh0VmFsdWUiLCJfdXNlUmVkdWNlciIsInByZXZpb3VzU3RhdGVVcGRhdGVSZXN1bHQiLCJmb3JjZUNvbXBvbmVudFVwZGF0ZURpc3BhdGNoIiwibGFzdENoaWxkUHJvcHMiLCJsYXN0V3JhcHBlclByb3BzIiwiY2hpbGRQcm9wc0Zyb21TdG9yZVVwZGF0ZSIsInJlbmRlcklzU2NoZWR1bGVkIiwiYWN0dWFsQ2hpbGRQcm9wcyIsImRpZFVuc3Vic2NyaWJlIiwibGFzdFRocm93bkVycm9yIiwiY2hlY2tGb3JVcGRhdGVzIiwibmV3Q2hpbGRQcm9wcyIsImxhdGVzdFN0b3JlU3RhdGUiLCJyZW5kZXJlZFdyYXBwZWRDb21wb25lbnQiLCJDb25uZWN0IiwiZm9yd2FyZGVkIiwic2hhbGxvd0VxdWFsIiwib2JqQSIsIm9iakIiLCJrZXlzQSIsImtleXNCIiwid3JhcE1hcFRvUHJvcHNDb25zdGFudCIsImdldENvbnN0YW50IiwiY29uc3RhbnRTZWxlY3RvciIsImRlcGVuZHNPbk93blByb3BzIiwiZ2V0RGVwZW5kc09uT3duUHJvcHMiLCJtYXBUb1Byb3BzIiwid3JhcE1hcFRvUHJvcHNGdW5jIiwicHJveHkiLCJzdGF0ZU9yRGlzcGF0Y2giLCJvd25Qcm9wcyIsIm1hcERpc3BhdGNoVG9Qcm9wcyIsIm1hcFN0YXRlVG9Qcm9wcyIsImRlZmF1bHRNZXJnZVByb3BzIiwic3RhdGVQcm9wcyIsImRpc3BhdGNoUHJvcHMiLCJtZXJnZVByb3BzIiwibWVyZ2VkUHJvcHMiLCJhcmVNZXJnZWRQcm9wc0VxdWFsIiwiaGFzUnVuT25jZSIsIm5leHRNZXJnZWRQcm9wcyIsIndyYXBNZXJnZVByb3BzRnVuYyIsImltcHVyZUZpbmFsUHJvcHNTZWxlY3RvckZhY3RvcnkiLCJwdXJlRmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeSIsImFyZVN0YXRlc0VxdWFsIiwiYXJlT3duUHJvcHNFcXVhbCIsImFyZVN0YXRlUHJvcHNFcXVhbCIsImhhc1J1bkF0TGVhc3RPbmNlIiwiaGFuZGxlU3Vic2VxdWVudENhbGxzIiwibmV4dFN0YXRlIiwibmV4dE93blByb3BzIiwicHJvcHNDaGFuZ2VkIiwic3RhdGVDaGFuZ2VkIiwibmV4dFN0YXRlUHJvcHMiLCJzdGF0ZVByb3BzQ2hhbmdlZCIsImhhbmRsZU5ld1N0YXRlIiwiZmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeSIsImluaXRNYXBTdGF0ZVRvUHJvcHMiLCJpbml0TWFwRGlzcGF0Y2hUb1Byb3BzIiwiaW5pdE1lcmdlUHJvcHMiLCJmYWN0b3JpZXMiLCJzdHJpY3RFcXVhbCIsIl90ZW1wIiwiX3JlZiRjb25uZWN0SE9DIiwiY29ubmVjdEhPQyIsIl9yZWYkbWFwU3RhdGVUb1Byb3BzRiIsIm1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcyIsIl9yZWYkbWFwRGlzcGF0Y2hUb1BybyIsIm1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcmllcyIsIl9yZWYkbWVyZ2VQcm9wc0ZhY3RvciIsIm1lcmdlUHJvcHNGYWN0b3JpZXMiLCJfcmVmJHNlbGVjdG9yRmFjdG9yeSIsIl9yZWYzIiwiX3JlZjMkcHVyZSIsIl9yZWYzJGFyZVN0YXRlc0VxdWFsIiwiX3JlZjMkYXJlT3duUHJvcHNFcXVhIiwiX3JlZjMkYXJlU3RhdGVQcm9wc0VxIiwiX3JlZjMkYXJlTWVyZ2VkUHJvcHNFIiwiZXh0cmFPcHRpb25zIiwiY3JlYXRlU3RvcmVIb29rIiwidXNlUmVkdXhDb250ZXh0IiwidXNlU3RvcmUiLCJjcmVhdGVEaXNwYXRjaEhvb2siLCJyZWZFcXVhbGl0eSIsIm5ld0JhdGNoIiwiY3JlYXRlU2VsZWN0b3JIb29rIiwiZ2V0UmVjdCIsInJpZ2h0IiwiYm90dG9tIiwiY2VudGVyIiwiZXhwYW5kIiwiZXhwYW5kQnkiLCJzaHJpbmsiLCJzaHJpbmtCeSIsIm5vU3BhY2luZyIsImNyZWF0ZUJveCIsImJvcmRlckJveCIsIl9yZWYyJG1hcmdpbiIsIm1hcmdpbiIsIl9yZWYyJGJvcmRlciIsImJvcmRlciIsIl9yZWYyJHBhZGRpbmciLCJwYWRkaW5nIiwibWFyZ2luQm94IiwicGFkZGluZ0JveCIsImNvbnRlbnRCb3giLCJyYXciLCJvcmlnaW5hbCIsInNoaWZ0QnkiLCJzaGlmdGVkIiwid2l0aFNjcm9sbCIsInNjcm9sbCIsInBhZ2VYT2Zmc2V0IiwicGFnZVlPZmZzZXQiLCJjYWxjdWxhdGVCb3giLCJzdHlsZXMiLCJtYXJnaW5Ub3AiLCJtYXJnaW5SaWdodCIsIm1hcmdpbkJvdHRvbSIsIm1hcmdpbkxlZnQiLCJwYWRkaW5nVG9wIiwicGFkZGluZ1JpZ2h0IiwicGFkZGluZ0JvdHRvbSIsInBhZGRpbmdMZWZ0IiwiYm9yZGVyVG9wV2lkdGgiLCJib3JkZXJSaWdodFdpZHRoIiwiYm9yZGVyQm90dG9tV2lkdGgiLCJib3JkZXJMZWZ0V2lkdGgiLCJnZXRCb3giLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJnZXRDb21wdXRlZFN0eWxlIiwicmVzdWx0Rm4iLCJsYXN0UmVzdWx0IiwiY2FsbGVkT25jZSIsIm5ld0FyZ3MiLCJmcmFtZUlkIiwid3JhcHBlckZuIiwic2hvdWxkUmVjb3ZlciIsIl9SZWFjdCRDb21wb25lbnQiLCJFcnJvckJvdW5kYXJ5IiwiX3RoaXMiLCJzZXRPbkVycm9yIiwib25GYXRhbEVycm9yIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsIm9yaWdpbiIsInBvaW50MSIsInBvaW50MiIsInBvaW50IiwibGluZSIsIm90aGVyVmFsdWUiLCJkaXN0YW5jZSIsInNxcnQiLCJwb3ciLCJwb2ludHMiLCJvZmZzZXRCeVBvc2l0aW9uIiwic3BhY2luZyIsImdldENvcm5lcnMiLCJmcmFtZSIsInNob3VsZENsaXBTdWJqZWN0Iiwic3ViamVjdCIsImV4ZWN1dGVDbGlwIiwicGFnZU1hcmdpbkJveCIsImdldFN1YmplY3QiLCJwYWdlIiwid2l0aFBsYWNlaG9sZGVyIiwiYXhpcyIsImluY3JlYXNlZCIsIl9leHRlbmRzMiIsImluY3JlYXNlZEJ5IiwiZGlmZiIsImRpc3BsYWNlbWVudCIsImFjdGl2ZSIsImRyb3BwYWJsZSIsIm5ld1Njcm9sbCIsInNjcm9sbGFibGUiLCJzY3JvbGxEaWZmIiwic2Nyb2xsRGlzcGxhY2VtZW50Iiwid2hhdElzRHJhZ2dlZE92ZXIiLCJpbXBhY3QiLCJkZXN0aW5hdGlvbiIsImRyb3BwYWJsZUlkIiwibGlzdCIsInRvRHJvcHBhYmxlTWFwIiwiZHJvcHBhYmxlcyIsInRvRHJhZ2dhYmxlTWFwIiwiZHJhZ2dhYmxlcyIsInRvRHJvcHBhYmxlTGlzdCIsInRvRHJhZ2dhYmxlTGlzdCIsImlzV2l0aGluIiwibG93ZXJCb3VuZCIsInVwcGVyQm91bmQiLCJpc1Bvc2l0aW9uSW5GcmFtZSIsImlzV2l0aGluVmVydGljYWwiLCJpc1dpdGhpbkhvcml6b250YWwiLCJnZXREcmFnZ2FibGVzSW5zaWRlRHJvcHBhYmxlIiwiZHJhZ2dhYmxlIiwidmVydGljYWwiLCJkaXJlY3Rpb24iLCJjcm9zc0F4aXNMaW5lIiwiY3Jvc3NBeGlzU3RhcnQiLCJjcm9zc0F4aXNFbmQiLCJjcm9zc0F4aXNTaXplIiwiaG9yaXpvbnRhbCIsImlzVXNlck1vdmluZ0ZvcndhcmQiLCJkaWRTdGFydERpc3BsYWNlZCIsImRyYWdnYWJsZUlkIiwib25MaWZ0Iiwid2FzRGlzcGxhY2VkIiwiZ2V0Q29tYmluZWRJdGVtRGlzcGxhY2VtZW50IiwiZGlzcGxhY2VkIiwiY29tYmluZVdpdGgiLCJkaXNwbGFjZWRCeSIsImlzRGlzcGxhY2VkIiwiZ2V0V2hlbkVudGVyZWQiLCJvbGRNZXJnZSIsIndoZW5FbnRlcmVkIiwiZ2V0Q29tYmluZUltcGFjdCIsImN1cnJlbnRDZW50ZXIiLCJwYWdlQm9yZGVyQm94Q2VudGVyV2l0aERyb3BwYWJsZVNjcm9sbENoYW5nZSIsInByZXZpb3VzSW1wYWN0IiwiaW5zaWRlRGVzdGluYXRpb25XaXRob3V0RHJhZ2dhYmxlIiwidXNlckRpcmVjdGlvbiIsImlzQ29tYmluZUVuYWJsZWQiLCJtb3ZlbWVudCIsImNhbkJlRGlzcGxhY2VkQnkiLCJkaXNwbGFjZUJ5IiwiY3VycmVudFVzZXJEaXJlY3Rpb24iLCJ0d29UaGlyZHNPZlNpemUiLCJpc01vdmluZ0ZvcndhcmQiLCJ0YXJnZXRDZW50ZXIiLCJpc0NvbWJpbmluZ1dpdGgiLCJpc1BhcnRpYWxseVZpc2libGVUaHJvdWdoRnJhbWUiLCJpc1BhcnRpYWxseVZpc2libGVWZXJ0aWNhbGx5IiwiaXNQYXJ0aWFsbHlWaXNpYmxlSG9yaXpvbnRhbGx5IiwiaXNCaWdnZXJWZXJ0aWNhbGx5IiwiaXNCaWdnZXJIb3Jpem9udGFsbHkiLCJpc1RvdGFsbHlWaXNpYmxlVGhyb3VnaEZyYW1lIiwiaXNWaXNpYmxlIiwidG9CZURpc3BsYWNlZCIsInZpZXdwb3J0Iiwid2l0aERyb3BwYWJsZURpc3BsYWNlbWVudCIsImlzVmlzaWJsZVRocm91Z2hGcmFtZUZuIiwiZGlzcGxhY2VkVGFyZ2V0IiwiZ2V0RHJvcHBhYmxlRGlzcGxhY2VkIiwiaXNWaXNpYmxlSW5Ecm9wcGFibGUiLCJpc1Zpc2libGVJblZpZXdwb3J0IiwiZ2V0RGlzcGxhY2VtZW50IiwiZm9yY2VTaG91bGRBbmltYXRlIiwic2hvdWxkQW5pbWF0ZSIsImdldFNob3VsZEFuaW1hdGUiLCJnZXREaXNwbGFjZW1lbnRNYXAiLCJnZXREaXNwbGFjZWRCeSIsIm5vTW92ZW1lbnQiLCJub0ltcGFjdCIsInJlbW92ZURyYWdnYWJsZUZyb21MaXN0IiwiZ2V0RHJhZ0ltcGFjdCIsInBhZ2VCb3JkZXJCb3hDZW50ZXIiLCJkZXN0aW5hdGlvbklkIiwibWF5YmUiLCJpc0VuYWJsZWQiLCJnZXREcm9wcGFibGVPdmVyIiwiaW5zaWRlRGVzdGluYXRpb24iLCJ3aXRoRHJvcHBhYmxlU2Nyb2xsIiwid2l0aE1lcmdlIiwiZGlkU3RhcnREaXNwbGFjZWQkMSIsImRpbWVuc2lvbiIsIm5ld0luZGV4IiwiZ2V0UmVvcmRlckltcGFjdCIsImdldEhvbWVPbkxpZnQiLCJob21lIiwib3JpZ2luYWxseURpc3BsYWNlZCIsIm9mZnNldERyYWdnYWJsZSIsIm9mZnNldCQxIiwiaW5pdGlhbFdpbmRvd1Njcm9sbCIsImNsaWVudCIsInVwZGF0ZURyYWdnYWJsZXMiLCJ1cGRhdGVkRHJvcHBhYmxlcyIsImNyaXRpY2FsSWQiLCJ1bm1vZGlmaWVkRXhpc3RpbmciLCJleGlzdGluZyIsInVubW9kaWZpZWRBZGRpdGlvbnMiLCJhZGRpdGlvbnMiLCJyZW1vdmFscyIsImFkZGVkRHJhZ2dhYmxlcyIsInJlbW92ZWREcmFnZ2FibGVzIiwidG9TaGlmdCIsImFkZFNoaWZ0Iiwic2hpZnQiLCJpbmRleENoYW5nZSIsIndpdGhSZW1vdmFscyIsIndpdGhBZGRpdGlvbnMiLCJhZGRpdGlvbk1hcCIsIm1vdmVkIiwidXBkYXRlZCIsImFkanVzdEV4aXN0aW5nRm9yQWRkaXRpb25zQW5kUmVtb3ZhbHMiLCJkcmFnZ2luZyIsImFkanVzdEFkZGl0aW9uc0ZvckNvbGxhcHNlZEhvbWUiLCJ3aW5kb3dTY3JvbGxDaGFuZ2UiLCJkcm9wcGFibGVTY3JvbGxDaGFuZ2UiLCJ0b3RhbENoYW5nZSIsImFkanVzdEFkZGl0aW9uc0ZvclNjcm9sbENoYW5nZXMiLCJnZXRNYXhTY3JvbGwiLCJzY3JvbGxIZWlnaHQiLCJzY3JvbGxXaWR0aCIsIm1heFNjcm9sbCIsImdldERyb3BwYWJsZURpbWVuc2lvbiIsImlzRml4ZWRPblBhZ2UiLCJjbG9zZXN0Iiwic2Nyb2xsU2l6ZSIsImZyYW1lQ2xpZW50IiwiaXNIb21lT2YiLCJwbGFjZWhvbGRlclNpemUiLCJyZXF1aXJlZEdyb3d0aCIsImF2YWlsYWJsZVNwYWNlIiwibmVlZHNUb0dyb3dCeSIsImdldFJlcXVpcmVkR3Jvd3RoRm9yUGxhY2Vob2xkZXIiLCJhZGRlZCIsIm9sZEZyYW1lTWF4U2Nyb2xsIiwibmV3RnJhbWUiLCJvbGRNYXhTY3JvbGwiLCJnZXRGcmFtZSIsInBhdGNoRHJvcHBhYmxlTWFwIiwicmVjb21wdXRlUGxhY2Vob2xkZXJzIiwiY2xlYW5lZCIsImxhc3REcm9wcGFibGUiLCJjbGVhclVudXNlZFBsYWNlaG9sZGVyIiwiaXNPdmVyIiwicGF0Y2hlZCIsInB1Ymxpc2hXaGlsZURyYWdnaW5nIiwiX2V4dGVuZHMzIiwicHVibGlzaGVkIiwibW9kaWZpZWQiLCJhZGp1c3RlZCIsInByb3ZpZGVkIiwib2xkIiwiZnJlc2giLCJvbGRDbGllbnQiLCJuZXdDbGllbnQiLCJvbGRTY3JvbGxhYmxlIiwibmV3U2Nyb2xsYWJsZSIsIndpdGhTaXplQ2hhbmdlZCIsInVwZGF0ZURyb3BwYWJsZXMiLCJkaW1lbnNpb25zIiwiY3JpdGljYWwiLCJfZ2V0RHJhZ1Bvc2l0aW9ucyIsIm9sZEluaXRpYWwiLCJvbGRDdXJyZW50Iiwib2xkQ2xpZW50Qm9yZGVyQm94Q2VudGVyIiwibmV3Q2xpZW50Qm9yZGVyQm94Q2VudGVyIiwic2VsZWN0aW9uIiwiYm9yZGVyQm94Q2VudGVyIiwiZ2V0RHJhZ1Bvc2l0aW9ucyIsIl9nZXRIb21lT25MaWZ0IiwiaG9tZUltcGFjdCIsIndpdGhvdXRBbmltYXRpb24iLCJ3aXRoTm9BbmltYXRlZERpc3BsYWNlbWVudCIsIm1vdmVtZW50TW9kZSIsImRyYWdnaW5nU3RhdGUiLCJwaGFzZSIsIm9uTGlmdEltcGFjdCIsInJlYXNvbiIsImlzV2FpdGluZyIsImZvcndhcmQiLCJiYWNrd2FyZCIsIm1vdmVUb05leHRJbmRleCIsImlzSW5Ib21lTGlzdCIsImluc3RydWN0aW9uIiwiaW5pdGlhbEluc2lkZSIsImN1cnJlbnRJbmRleCIsInByb3Bvc2VkSW5kZXgiLCJtb2RpZnlEaXNwbGFjZW1lbnQiLCJmcm9tUmVvcmRlciIsImNvbWJpbmVJZCIsImNvbWJpbmVJbmRleCIsImZyb21Db21iaW5lIiwibGFzdERpc3BsYWNlZCIsInJlbW92ZUNsb3Nlc3QiLCJhZGRDbG9zZXN0IiwiZGlzdGFuY2VGcm9tU3RhcnRUb0JvcmRlckJveENlbnRlciIsImJveCIsImdldENyb3NzQXhpc0JvcmRlckJveENlbnRlciIsImlzTW92aW5nIiwiZ29BZnRlciIsIm1vdmVSZWxhdGl2ZVRvIiwiZ29CZWZvcmUiLCJkaXN0YW5jZUZyb21FbmRUb0JvcmRlckJveENlbnRlciIsIndoZW5SZW9yZGVyaW5nIiwiZHJhZ2dhYmxlUGFnZSIsIm1vdmVJbnRvIiwiZ29JbnRvU3RhcnQiLCJjbG9zZXN0QWZ0ZXIiLCJ3aXRoRGlzcGxhY2VtZW50IiwiZ2V0UmVzdWx0V2l0aG91dERyb3BwYWJsZURpc3BsYWNlbWVudCIsIndoZW5Db21iaW5pbmciLCJnZXRQYWdlQm9yZGVyQm94Q2VudGVyRnJvbUltcGFjdCIsIndpdGhvdXREaXNwbGFjZW1lbnQiLCJzY3JvbGxWaWV3cG9ydCIsIndpdGhOZXdEaXNwbGFjZW1lbnQiLCJnZXRDbGllbnRGcm9tUGFnZUJvcmRlckJveENlbnRlciIsIndpdGhvdXRQYWdlU2Nyb2xsQ2hhbmdlIiwid2l0aFZpZXdwb3J0RGlzcGxhY2VtZW50IiwiaXNUb3RhbGx5VmlzaWJsZUluTmV3TG9jYXRpb24iLCJuZXdQYWdlQm9yZGVyQm94Q2VudGVyIiwiX3JlZiRvbmx5T25NYWluQXhpcyIsIm9ubHlPbk1haW5BeGlzIiwiY2hhbmdlTmVlZGVkIiwibW92ZVRvTmV4dFBsYWNlIiwicHJldmlvdXNQYWdlQm9yZGVyQm94Q2VudGVyIiwicHJldmlvdXNDbGllbnRTZWxlY3Rpb24iLCJvcmlnaW5hbEluc2lkZURlc3RpbmF0aW9uIiwiY3VycmVudEluc2lkZURlc3RpbmF0aW9uIiwic2hhbGxvdyIsInRhcmdldEluZGV4IiwibW92ZVRvTmV4dENvbWJpbmUiLCJjbGllbnRTZWxlY3Rpb24iLCJzY3JvbGxKdW1wUmVxdWVzdCIsIm1heFNjcm9sbENoYW5nZSIsInNjcm9sbGVkVmlld3BvcnQiLCJzY3JvbGxlZERyb3BwYWJsZSIsIndpdGhTY3JvbGxlZFZpZXdwb3J0Iiwid2l0aFNjcm9sbGVkRHJvcHBhYmxlIiwic3BlY3VsYXRpdmVseUluY3JlYXNlIiwicmVjdCIsImdldEN1cnJlbnRQYWdlQm9yZGVyQm94Q2VudGVyIiwiZ2V0Q3VycmVudFBhZ2VCb3JkZXJCb3giLCJtb3ZlQ3Jvc3NBeGlzIiwiaXNCZXR3ZWVuU291cmNlQ2xpcHBlZCIsImNhbmRpZGF0ZXMiLCJhY3RpdmVPZlRhcmdldCIsImlzQmV0d2VlbkRlc3RpbmF0aW9uQ2xpcHBlZCIsInNlY29uZCIsImlzV2l0aGluRHJvcHBhYmxlIiwiZ2V0QmVzdENyb3NzQXhpc0Ryb3BwYWJsZSIsInByb3Bvc2VkIiwicHJvcG9zZWRQYWdlQm9yZGVyQm94Q2VudGVyIiwiaXNHb2luZ0JlZm9yZVRhcmdldCIsIm1vdmVUb05ld0Ryb3BwYWJsZSIsImRpc3RhbmNlVG9BIiwiZGlzdGFuY2VUb0IiLCJnZXRDbG9zZXN0RHJhZ2dhYmxlIiwibW92ZUluRGlyZWN0aW9uIiwiaXNBY3R1YWxseU92ZXIiLCJnZXREcm9wcGFibGVPdmVyJDEiLCJpc01haW5BeGlzTW92ZW1lbnRBbGxvd2VkIiwiaXNNb3ZpbmdPbk1haW5BeGlzIiwiX3N0YXRlJGRpbWVuc2lvbnMiLCJnZXRWZXJ0aWNhbCIsImdldEhvcml6b250YWwiLCJmb3JjZWRDbGllbnRTZWxlY3Rpb24iLCJmb3JjZWREaW1lbnNpb25zIiwiZm9yY2VkVmlld3BvcnQiLCJmb3JjZWRJbXBhY3QiLCJjdXJyZW50V2luZG93U2Nyb2xsIiwib2xkUGFnZUJvcmRlckJveENlbnRlciIsImdldFVzZXJEaXJlY3Rpb24iLCJuZXdJbXBhY3QiLCJ3aXRoVXBkYXRlZFBsYWNlaG9sZGVycyIsInJlY29tcHV0ZSIsImdldENsaWVudEJvcmRlckJveENlbnRlciIsInJlZnJlc2hTbmFwIiwibmVlZHNWaXNpYmlsaXR5Q2hlY2siLCJpc1NuYXBwaW5nIiwicG9zdERyb3BwYWJsZUNoYW5nZSIsImlzRW5hYmxlZENoYW5naW5nIiwicGF0Y2hEaW1lbnNpb25NYXAiLCJjb21wbGV0ZWQiLCJzaG91bGRGbHVzaCIsIl9hY3Rpb24kcGF5bG9hZCIsImlzV2luZG93U2Nyb2xsQWxsb3dlZCIsImlzRHJhZ2dpbmciLCJfY2xpZW50U2VsZWN0aW9uIiwiX2FjdGlvbiRwYXlsb2FkMiIsInNjcm9sbGVkIiwiX2FjdGlvbiRwYXlsb2FkMyIsIl9pZCIsIl90YXJnZXQiLCJfYWN0aW9uJHBheWxvYWQ0IiwiX2lkMiIsIl90YXJnZXQyIiwiX3VwZGF0ZWQiLCJfdmlld3BvcnQiLCJ3aXRoTWF4U2Nyb2xsIiwiX3Jlc3VsdDIiLCJfYWN0aW9uJHBheWxvYWQ1IiwiZHJvcER1cmF0aW9uIiwibmV3SG9tZUNsaWVudE9mZnNldCIsIl9hY3Rpb24kcGF5bG9hZDYiLCJwdWJsaXNoV2hpbGVEcmFnZ2luZyQxIiwiY29sbGVjdGlvblN0YXJ0aW5nIiwiY2xlYW4kMSIsImNvbXBsZXRlRHJvcCIsImN1cnZlcyIsImNvbWJpbmluZyIsIm91dE9mVGhlV2F5VGltaW5nIiwidHJhbnNpdGlvbnMiLCJmbHVpZCIsInNuYXAiLCJkdXJhdGlvbiIsInRpbWluZyIsIm91dE9mVGhlV2F5IiwibW92ZVRvIiwiaXNDb21iaW5pbmciLCJ0cmFuc2xhdGUiLCJtaW5Ecm9wVGltZSIsIm1heERyb3BUaW1lIiwiZHJvcFRpbWVSYW5nZSIsImRyb3AkMSIsIl9nZXREcm9wSW1wYWN0IiwibGFzdEltcGFjdCIsImRpZERyb3BJbnNpZGVEcm9wcGFibGUiLCJnZXREcm9wSW1wYWN0IiwibmV3Q2xpZW50Q2VudGVyIiwiZ2V0TmV3SG9tZUNsaWVudE9mZnNldCIsImRpc3RhbmNlJDEiLCJnZXREcm9wRHVyYXRpb24iLCJhbmltYXRlRHJvcCIsIndpdGhMb2NhdGlvbiIsInN0YXJ0UG9zaXRpb24iLCJlbmRQb3NpdGlvbiIsIndpdGhDb21iaW5lIiwicmV0dXJuZWRUb1N0YXJ0IiwicHJlc2V0IiwiZ2V0QXN5bmNNYXJzaGFsIiwiZXhlY3V0ZSIsIndpdGhUaW1pbmdzIiwiZ2V0RHJhZ1N0YXJ0IiwiYW5ub3VuY2UiLCJnZXREZWZhdWx0TWVzc2FnZSIsIndpbGxFeHBpcmUiLCJ3YXNDYWxsZWQiLCJpc0V4cGlyZWQiLCJ0aW1lb3V0SWQiLCJnZXRFeHBpcmluZ0Fubm91bmNlIiwiZ2V0UmVzcG9uZGVycyIsInB1Ymxpc2hlciIsImFzeW5jTWFyc2hhbCIsIm9uRHJhZ0VuZCIsImJlZm9yZVN0YXJ0Iiwib25CZWZvcmVEcmFnU3RhcnQiLCJsYXN0Q3JpdGljYWwiLCJsYXN0TG9jYXRpb24iLCJsYXN0Q29tYmluZSIsIm9uRHJhZ1N0YXJ0IiwiaGFzQ3JpdGljYWxDaGFuZ2VkIiwiaXNEcmFnZ2FibGVFcXVhbCIsImlzRHJvcHBhYmxlRXF1YWwiLCJpc0NyaXRpY2FsRXF1YWwiLCJoYXNMb2NhdGlvbkNoYW5nZWQiLCJoYXNHcm91cGluZ0NoYW5nZWQiLCJpc0NvbWJpbmVFcXVhbCIsIm9uRHJhZ1VwZGF0ZSIsImFib3J0IiwiZ2V0UHVibGlzaGVyIiwiZHJvcEFuaW1hdGlvbkZpbmlzaCIsInBlbmRpbmdEcm9wIiwicG9zdEFjdGlvblN0YXRlIiwiY29tcG9zZUVuaGFuY2VycyIsIm1hcnNoYWwiLCJkaW1lbnNpb25NYXJzaGFsIiwic3R5bGVNYXJzaGFsIiwiYXV0b1Njcm9sbGVyIiwiX2Rpc3BhdGNoIiwibWlkZGxld2FyZUFQSSIsImFwcGx5TWlkZGxld2FyZSIsImRyb3BwaW5nIiwicmVzdGluZyIsInN0b3BQdWJsaXNoaW5nIiwiZGltZW5zaW9uTWFyc2hhbFN0b3BwZXIiLCJyZXF1ZXN0Iiwic2Nyb2xsT3B0aW9ucyIsInNob3VsZFB1Ymxpc2hJbW1lZGlhdGVseSIsIl9tYXJzaGFsJHN0YXJ0UHVibGlzaCIsInN0YXJ0UHVibGlzaGluZyIsImxpZnQkMSIsInNob3VsZEVuZCIsInNob3VsZENhbmNlbFBlbmRpbmciLCJjYW5jZWxQZW5kaW5nIiwiYXV0b1Njcm9sbCIsImdldERvY3VtZW50RWxlbWVudCIsImRvYyIsImdldE1heFdpbmRvd1Njcm9sbCIsImNsaWVudFdpZHRoIiwiY2xpZW50SGVpZ2h0IiwiZ2V0SW5pdGlhbFB1Ymxpc2giLCJnZXRWaWV3cG9ydCIsIndpbmRvd1Njcm9sbCIsImNhbGxiYWNrcyIsImdldERpbWVuc2lvbkFuZFdhdGNoU2Nyb2xsIiwiZ2V0RGltZW5zaW9uIiwiY3JlYXRlRGltZW5zaW9uTWFyc2hhbCIsImdldEVudHJpZXMiLCJhZHZhbmNlZFVzYWdlV2FybmluZyIsInN0YWdpbmciLCJjb2xsZWN0IiwiZ2V0Q3JpdGljYWwiLCJfc3RhZ2luZyIsIndpdGhvdXRQbGFjZWhvbGRlciIsInJlY29sbGVjdCIsInB1Ymxpc2giLCJjcmVhdGVQdWJsaXNoZXIiLCJyZWdpc3RlckRyYWdnYWJsZSIsInVwZGF0ZURyYWdnYWJsZSIsInVucmVnaXN0ZXJEcmFnZ2FibGUiLCJyZWdpc3RlckRyb3BwYWJsZSIsImRyb3BwYWJsZUNhbGxiYWNrcyIsInVucmVnaXN0ZXJEcm9wcGFibGUiLCJ1cGRhdGVEcm9wcGFibGVJc0VuYWJsZWQiLCJ1cGRhdGVEcm9wcGFibGVJc0NvbWJpbmVFbmFibGVkIiwic2Nyb2xsRHJvcHBhYmxlIiwidXBkYXRlRHJvcHBhYmxlU2Nyb2xsIiwiZHJhZ1N0b3BwZWQiLCJjYW5TdGFydERyYWciLCJzY3JvbGxCeSIsImdldFNjcm9sbGFibGVEcm9wcGFibGVzIiwiZ2V0QmVzdFNjcm9sbGFibGVEcm9wcGFibGUiLCJfZGltZW5zaW9uIiwicGVyY2VudGFnZSIsInN0b3BEYW1wZW5pbmdBdCIsImFjY2VsZXJhdGVBdCIsImdldFBlcmNlbnRhZ2UiLCJzdGFydE9mUmFuZ2UiLCJlbmRPZlJhbmdlIiwic3RvcEF0IiwiZGlzdGFuY2VUb0VkZ2UiLCJ0aHJlc2hvbGRzIiwiZHJhZ1N0YXJ0VGltZSIsInNob3VsZFVzZVRpbWVEYW1wZW5pbmciLCJzdGFydFNjcm9sbGluZ0Zyb20iLCJtYXhTY3JvbGxWYWx1ZUF0IiwicGVyY2VudGFnZUZyb21NYXhTY3JvbGxWYWx1ZUF0IiwiZ2V0VmFsdWVGcm9tRGlzdGFuY2UiLCJwcm9wb3NlZFNjcm9sbCIsInJ1blRpbWUiLCJiZXR3ZWVuQWNjZWxlcmF0ZUF0QW5kU3RvcEF0UGVyY2VudGFnZSIsImRhbXBlblZhbHVlQnlUaW1lIiwiZ2V0U2Nyb2xsT25BeGlzIiwiY29udGFpbmVyIiwiZGlzdGFuY2VUb0VkZ2VzIiwiZ2V0RGlzdGFuY2VUaHJlc2hvbGRzIiwiY2xlYW4kMyIsImdldFNjcm9sbCIsInJlcXVpcmVkIiwibGltaXRlZCIsImlzVG9vQmlnVmVydGljYWxseSIsImlzVG9vQmlnSG9yaXpvbnRhbGx5IiwiYWRqdXN0Rm9yU2l6ZUxpbWl0cyIsInNtYWxsZXN0U2lnbmVkIiwiZ2V0T3ZlcmxhcCIsImdldFJlbWFpbmRlciIsInRhcmdldFNjcm9sbCIsIm92ZXJsYXAiLCJjYW5QYXJ0aWFsbHlTY3JvbGwiLCJyYXdNYXgiLCJzbWFsbGVzdENoYW5nZSIsImNhblNjcm9sbFdpbmRvdyIsImNhblNjcm9sbERyb3BwYWJsZSIsInNjcm9sbCQxIiwic2Nyb2xsV2luZG93IiwiX2NoYW5nZSIsImdldFdpbmRvd1Njcm9sbENoYW5nZSIsImdldERyb3BwYWJsZVNjcm9sbENoYW5nZSIsImNyZWF0ZUp1bXBTY3JvbGxlciIsIm1vdmUiLCJzY3JvbGxEcm9wcGFibGVBc011Y2hBc0l0Q2FuIiwiZ2V0RHJvcHBhYmxlT3ZlcmxhcCIsIndoYXRUaGVEcm9wcGFibGVDYW5TY3JvbGwiLCJzY3JvbGxXaW5kb3dBc011Y2hBc0l0Q2FuIiwiZ2V0V2luZG93T3ZlcmxhcCIsIndoYXRUaGVXaW5kb3dDYW5TY3JvbGwiLCJkcm9wcGFibGVSZW1haW5kZXIiLCJ3aW5kb3dSZW1haW5kZXIiLCJtb3ZlQnlPZmZzZXQiLCJjcmVhdGVBdXRvU2Nyb2xsZXIiLCJmbHVpZFNjcm9sbGVyIiwic2NoZWR1bGVXaW5kb3dTY3JvbGwiLCJzY2hlZHVsZURyb3BwYWJsZVNjcm9sbCIsInRyeVNjcm9sbCIsIl9kcmFnZ2luZyIsIndhc1Njcm9sbE5lZWRlZCIsImZha2VTY3JvbGxDYWxsYmFjayIsImNyZWF0ZUZsdWlkU2Nyb2xsZXIiLCJqdW1wU2Nyb2xsIiwiZ2V0U3R5bGVzIiwicnVsZXMiLCJydWxlIiwic2VsZWN0b3IiLCJnZXRTdHlsZXMkMSIsInVuaXF1ZUNvbnRleHQiLCJnZXRTZWxlY3RvciIsImF0dHJpYnV0ZSIsImRyYWdIYW5kbGUkMSIsImdyYWJDdXJzb3IiLCJhbHdheXMiLCJkcm9wQW5pbWF0aW5nIiwidXNlckNhbmNlbCIsInF1ZXJ5U2VsZWN0b3IiLCJjcmVhdGVTdHlsZUVsIiwiU3RvcmVDb250ZXh0IiwiZ2V0Qm9keUVsZW1lbnQiLCJ2aXN1YWxseUhpZGRlbiIsIm92ZXJmbG93IiwiY2xpcCIsImdldElkIiwiQXBwQ29udGV4dCIsInVzZVByZXZpb3VzIiwiY3JlYXRlUmVzcG9uZGVycyIsImdldFN0b3JlIiwibGF6eVJlZiIsIkFwcCIsImxhenlTdG9yZVJlZiIsImxhc3RQcm9wc1JlZiIsInRvQmVSZW1vdmVkIiwidXNlQW5ub3VuY2VyIiwiYWx3YXlzUmVmIiwiZHluYW1pY1JlZiIsInNldER5bmFtaWNTdHlsZSIsInNldEFsd2F5c1N0eWxlIiwiZHluYW1pYyIsInN0eWxlQ29udGV4dCIsInVzZVN0eWxlTWFyc2hhbCIsImxhenlEaXNwYXRjaCIsInRyeVJlc2V0U3RvcmUiLCJnZXRDYW5MaWZ0IiwiZ2V0SXNNb3ZlbWVudEFsbG93ZWQiLCJhcHBDb250ZXh0IiwiY2FuTGlmdCIsImlzTW92ZW1lbnRBbGxvd2VkIiwiaW5zdGFuY2VDb3VudCIsIkRyYWdEcm9wQ29udGV4dCIsImlzRXF1YWwkMiIsImlzU2Nyb2xsIiwiaXNBdXRvIiwiaXNFaXRoZXIiLCJvdmVyZmxvd1giLCJvdmVyZmxvd1kiLCJpc0VsZW1lbnRTY3JvbGxhYmxlIiwiZ2V0Q2xvc2VzdFNjcm9sbGFibGUiLCJwYXJlbnRFbGVtZW50IiwiZ2V0U2Nyb2xsJDEiLCJnZXRFbnYiLCJjbG9zZXN0U2Nyb2xsYWJsZSIsImdldElzRml4ZWQiLCJlbnYiLCJpc0Ryb3BEaXNhYmxlZCIsInRhcmdldFJlZiIsImltbWVkaWF0ZSIsInBhc3NpdmUiLCJkZWxheWVkIiwiZ2V0TGlzdGVuZXJPcHRpb25zIiwidXNlUmVxdWlyZWRDb250ZXh0IiwiZ2V0Q2xvc2VzdFNjcm9sbGFibGVGcm9tRHJhZyIsImVtcHR5IiwiZ2V0U3R5bGUiLCJpc0FuaW1hdGluZ09wZW5Pbk1vdW50IiwiYW5pbWF0ZSIsImdldFNpemUiLCJib3hTaXppbmciLCJwb2ludGVyRXZlbnRzIiwiUGxhY2Vob2xkZXIkMSIsImFuaW1hdGVPcGVuVGltZXJSZWYiLCJ0cnlDbGVhckFuaW1hdGVPcGVuVGltZXIiLCJvblRyYW5zaXRpb25FbmQiLCJvbkNsb3NlIiwiX3VzZVN0YXRlIiwic2V0SXNBbmltYXRpbmdPcGVuT25Nb3VudCIsIm9uU2l6ZUNoYW5nZUVuZCIsImV2ZW50IiwiaW5uZXJSZWYiLCJEcm9wcGFibGVDb250ZXh0IiwiZ2V0V2luZG93RnJvbUVsIiwiaXNIdG1sRWxlbWVudCIsIkhUTUxFbGVtZW50IiwiX1JlYWN0JFB1cmVDb21wb25lbnQiLCJBbmltYXRlSW5PdXQiLCJvbiIsImlzU3RyaWN0RXF1YWwiLCJ3aGF0SXNEcmFnZ2VkT3ZlckZyb21SZXN1bHQiLCJpc01hdGNoaW5nVHlwZSIsImdldERyYWdnYWJsZSIsIkNvbm5lY3RlZERyb3BwYWJsZSIsImlkbGUiLCJzaG91bGRBbmltYXRlUGxhY2Vob2xkZXIiLCJzbmFwc2hvdCIsImlzRHJhZ2dpbmdPdmVyIiwiZHJhZ2dpbmdPdmVyV2l0aCIsImRyYWdnaW5nRnJvbVRoaXNXaXRoIiwiaWRsZVdpdGhvdXRBbmltYXRpb24iLCJnZXRNYXBQcm9wcyIsImdldFNuYXBzaG90IiwiX3NuYXBzaG90IiwiX2NvbXBsZXRlZCIsIndhc092ZXIiLCJ3YXNDb21iaW5pbmciLCJ1cGRhdGVWaWV3cG9ydE1heFNjcm9sbCIsImRyb3BwYWJsZVJlZiIsInBsYWNlaG9sZGVyUmVmIiwiaWdub3JlQ29udGFpbmVyQ2xpcHBpbmciLCJnZXREcm9wcGFibGVSZWYiLCJnZXRQbGFjZWhvbGRlclJlZiIsInNldERyb3BwYWJsZVJlZiIsInNldFBsYWNlaG9sZGVyUmVmIiwib25QbGFjZWhvbGRlclRyYW5zaXRpb25FbmQiLCJ3aGlsZURyYWdnaW5nUmVmIiwicHJldmlvdXNSZWYiLCJwdWJsaXNoZWREZXNjcmlwdG9yUmVmIiwibWVtb2l6ZWRVcGRhdGVTY3JvbGwiLCJnZXRDbG9zZXN0U2Nyb2xsIiwidXBkYXRlU2Nyb2xsIiwic2NoZWR1bGVTY3JvbGxVcGRhdGUiLCJvbkNsb3Nlc3RTY3JvbGwiLCJ1c2VEcm9wcGFibGVEaW1lbnNpb25QdWJsaXNoZXIiLCJkcm9wcGFibGVQcm9wcyIsImRyb3BwYWJsZUNvbnRleHQiLCJ6SW5kZXhPcHRpb25zIiwiZ2V0RHJhZ2dpbmdUcmFuc2l0aW9uIiwic2hvdWxkQW5pbWF0ZURyYWdNb3ZlbWVudCIsImdldERyYWdnaW5nT3BhY2l0eSIsImlzRHJvcEFuaW1hdGluZyIsImdldFNob3VsZERyYWdnaW5nQW5pbWF0ZSIsImdldFN0eWxlJDEiLCJnZXREcmFnZ2luZ1N0eWxlIiwic2Vjb25kYXJ5Iiwic2hvdWxkQW5pbWF0ZURpc3BsYWNlbWVudCIsIl9wcmV2ZW50ZWRLZXlzIiwiY3JlYXRlRXZlbnRNYXJzaGFsIiwiaXNNb3VzZURvd25IYW5kbGVkIiwiaXNIYW5kbGVkIiwiZnJvbUJpbmRpbmciLCJiaW5kRXZlbnRzIiwiYmluZGluZ3MiLCJzaGFyZWRPcHRpb25zIiwiZXZlbnROYW1lIiwidW5iaW5kRXZlbnRzIiwiY3JlYXRlU2NoZWR1bGVyIiwibWVtb2l6ZWRNb3ZlIiwib25Nb3ZlIiwibW92ZVVwIiwib25Nb3ZlVXAiLCJtb3ZlRG93biIsIm9uTW92ZURvd24iLCJtb3ZlUmlnaHQiLCJvbk1vdmVSaWdodCIsIm1vdmVMZWZ0Iiwib25Nb3ZlTGVmdCIsIndpbmRvd1Njcm9sbE1vdmUiLCJvbldpbmRvd1Njcm9sbCIsInNwYWNlIiwiYXJyb3dMZWZ0IiwiYXJyb3dVcCIsImFycm93UmlnaHQiLCJhcnJvd0Rvd24iLCJzdXBwb3J0ZWRFdmVudE5hbWUiLCJjYXB0dXJlIiwiY3JlYXRlUG9zdERyYWdFdmVudFByZXZlbnRlciIsImdldFdpbmRvdyIsImlzQm91bmQiLCJ1bmJpbmQiLCJwcmV2ZW50TmV4dCIsImlzU2xvcHB5Q2xpY2tUaHJlc2hvbGRFeGNlZWRlZCIsImFicyIsInByZXZlbnRlZEtleXMiLCJwcmV2ZW50U3RhbmRhcmRLZXlFdmVudHMiLCJwcmltYXJ5QnV0dG9uIiwibm9vcCQxIiwibW91c2VEb3duTWFyc2hhbCIsIl9zY3JvbGxKdW1wS2V5cyIsImludGVyYWN0aXZlVGFnTmFtZXMiLCJ0ZXh0YXJlYSIsIm9wdGlvbiIsIm9wdGdyb3VwIiwidmlkZW8iLCJhdWRpbyIsInNob3VsZEFsbG93RHJhZ2dpbmdGcm9tVGFyZ2V0IiwiY2FuRHJhZ0ludGVyYWN0aXZlRWxlbWVudHMiLCJpc0FuSW50ZXJhY3RpdmVFbGVtZW50IiwiZ2V0QXR0cmlidXRlIiwiZ2V0Qm9yZGVyQm94Q2VudGVyUG9zaXRpb24iLCJzY3JvbGxKdW1wS2V5cyIsIm5vb3AkMiIsInRpbWVGb3JMb25nUHJlc3MiLCJmb3JjZVByZXNzVGhyZXNob2xkIiwidG91Y2hTdGFydE1hcnNoYWwiLCJub29wJDMiLCJTVkdFbGVtZW50IiwiaXNTdmdFbGVtZW50IiwiZHJhZ2dhYmxlUmVmIiwicmV0YWluaW5nRm9jdXNGb3IiLCJsaXN0ZW5lck9wdGlvbnMiLCJjbGVhclJldGVudGlvbk9uRm9jdXNDaGFuZ2UiLCJvbldpbmRvd0ZvY3VzQ2hhbmdlIiwicmV0YWluZXIiLCJyZXRhaW4iLCJ0cnlSZXN0b3JlRm9jdXMiLCJkcmFnSGFuZGxlUmVmIiwibm9vcCQ0IiwicHJldmVudEh0bWw1RG5kIiwidXNlRHJhZ0hhbmRsZSIsImNhcHR1cmluZ1JlZiIsIm9uQ2FwdHVyZVN0YXJ0Iiwib25DYXB0dXJlRW5kIiwiYWJvcnRDYXB0dXJlIiwiX3VzZVJlcXVpcmVkQ29udGV4dCIsImdldERyYWdnYWJsZVJlZiIsImdldFNob3VsZFJlc3BlY3RGb3JjZVByZXNzIiwibGFzdEFyZ3NSZWYiLCJ1c2VWYWxpZGF0aW9uJDEiLCJjYW5TdGFydENhcHR1cmluZyIsIl91c2VGb2N1c1JldGFpbmVyIiwiaXNGb2N1c2VkUmVmIiwib25Gb2N1cyIsIm9uQmx1ciIsImRyYWdIYW5kbGUiLCJsYXN0RHJhZ2dhYmxlUmVmIiwidXNlRm9jdXNSZXRhaW5lciIsIm9uTW91c2VEb3duIiwicGVuZGluZ1JlZiIsImlzRHJhZ2dpbmdSZWYiLCJ1bmJpbmRXaW5kb3dFdmVudHNSZWYiLCJnZXRJc0NhcHR1cmluZyIsInNjaGVkdWxlIiwicG9zdERyYWdFdmVudFByZXZlbnRlciIsInNob3VsZEJsb2NrQ2xpY2siLCJ3YXNEcmFnZ2luZyIsIm9uQ2FuY2VsIiwic3RhcnREcmFnZ2luZyIsInBlbmRpbmciLCJ3aW5kb3dCaW5kaW5ncyIsIm9uRHJvcCIsImJpbmRXaW5kb3dFdmVudHMiLCJ3aW4iLCJzdGFydFBlbmRpbmdEcmFnIiwidXNlTW91c2VTZW5zb3IiLCJvbktleURvd24iLCJnZXRJc0RyYWdnaW5nIiwidXNlS2V5Ym9hcmRTZW5zb3IiLCJvblRvdWNoU3RhcnQiLCJoYXNNb3ZlZFJlZiIsInBvc3REcmFnQ2xpY2tQcmV2ZW50ZXIiLCJsb25nUHJlc3NUaW1lcklkIiwidG91Y2giLCJmb3JjZSIsInNob3VsZFJlc3BlY3QiLCJ1c2VUb3VjaFNlbnNvciIsInRhYkluZGV4IiwidXNlRHJhZ2dhYmxlRGltZW5zaW9uUHVibGlzaGVyIiwibWFrZURpbWVuc2lvbiIsImxhdGVzdCIsImNvbXB1dGVkU3R5bGVzIiwiZ2V0RGltZW5zaW9uJDEiLCJDb25uZWN0ZWREcmFnZ2FibGUiLCJnZXREcmFnZ2luZ1NuYXBzaG90IiwiZHJhZ2dpbmdPdmVyIiwiZHJvcEFuaW1hdGlvbiIsImNvbWJpbmVUYXJnZXRGb3IiLCJnZXRTZWNvbmRhcnlTbmFwc2hvdCIsImRlZmF1bHRNYXBQcm9wcyIsIm1lbW9pemVkT2Zmc2V0IiwiZ2V0RHJhZ2dpbmdQcm9wcyIsImdldFNlY29uZGFyeVByb3BzIiwiZ2V0U2Vjb25kYXJ5TW92ZW1lbnQiLCJvd25JZCIsImRyYWdnaW5nSWQiLCJpc0NvbWJpbmVkV2l0aCIsIl9tb2RlIiwiX2RyYWdnaW5nT3ZlciIsIl9jb21iaW5lV2l0aCIsImdldENvbWJpbmVXaXRoRnJvbVJlc3VsdCIsImN1cnZlIiwic2NhbGUiLCJkcmFnZ2luZ1NlbGVjdG9yIiwic2Vjb25kYXJ5U2VsZWN0b3IiLCJsaWZ0IiwibW92ZUJ5V2luZG93U2Nyb2xsIiwiZHJvcEFuaW1hdGlvbkZpbmlzaGVkIiwic2V0UmVmIiwiZ2V0UmVmIiwiaXNEcmFnRGlzYWJsZWQiLCJzaG91bGRSZXNwZWN0Rm9yY2VQcmVzcyIsImRpc2FibGVJbnRlcmFjdGl2ZUVsZW1lbnRCbG9ja2luZyIsIm1vdmVVcEFjdGlvbiIsIm1vdmVBY3Rpb24iLCJkcm9wQWN0aW9uIiwibW92ZURvd25BY3Rpb24iLCJtb3ZlUmlnaHRBY3Rpb24iLCJtb3ZlTGVmdEFjdGlvbiIsIm1vdmVCeVdpbmRvd1Njcm9sbEFjdGlvbiIsImxpZnRBY3Rpb24iLCJkcm9wQW5pbWF0aW9uRmluaXNoZWRBY3Rpb24iLCJkcmFnSGFuZGxlUHJvcHMiLCJvbk1vdmVFbmQiLCJkcmFnZ2FibGVQcm9wcyIsImVwT3JkZXJpbmciLCJyZXN0QXBpUm9vdCIsIlBvaW50ZXJzIiwidGl0bGUiLCJ0aXRsZUlucHV0IiwiZGVib3VuY2VkRGVmYXVsdFJlc3VsdHMiLCJnZXREZWZhdWx0UmVzdWx0cyIsInNlYXJjaFRlcm0iLCJkZWZhdWx0UmVzdWx0cyIsInBvaW50ZXIiLCJwb2ludGVycyIsIm1lcmdlZCIsInNldElkcyIsIklEIiwic2VhcmNoVGV4dCIsInNlYXJjaFJlc3VsdHMiLCJhdmFpbGFibGVQb3NpdGlvbnMiLCJwb3N0c1BlclBhZ2UiLCJwb3N0IiwicG9zdHMiLCJnZXROZXh0QXZhaWxhYmxlUG9zaXRpb24iLCJhbGVydCIsIml0ZW1zIiwiZ2V0TWVyZ2VkUG9zdHMiLCJwcHAiLCJzdGFydEluZGV4IiwiZW5kSW5kZXgiLCJyZW1vdmVkIiwiY2xhc3NOYW1lIiwicG9zdF90aXRsZSIsImFkZFBvaW50ZXIiLCJnZXRFbGVtZW50QnlJZCIsImhhbmRsZVRpdGxlQ2hhbmdlIiwiZGVmYXVsdFJlc3VsdHNCeUlkIiwibWVyZ2VkUG9zdHMiLCJyZW5kZXJlZElkcyIsIm9uRHJhZ0NvbXBsZXRlIiwiZHJhZ2dhYmxlSW5kZXgiLCJpc0RlZmF1bHRSZXN1bHQiLCJ0b29sdGlwVGV4dCIsInJlbW92ZVBvaW50ZXIiLCJvbkNoYW5nZSIsImRvU2VhcmNoIiwiUmVhY3RET00iXSwibWFwcGluZ3MiOiJhQUNFLElBQUlBLEVBQW1CLEdBR3ZCLFNBQVNDLEVBQW9CQyxHQUc1QixHQUFHRixFQUFpQkUsR0FDbkIsT0FBT0YsRUFBaUJFLEdBQVVDLFFBR25DLElBQUlDLEVBQVNKLEVBQWlCRSxHQUFZLENBQ3pDRyxFQUFHSCxFQUNISSxHQUFHLEVBQ0hILFFBQVMsSUFVVixPQU5BSSxFQUFRTCxHQUFVTSxLQUFLSixFQUFPRCxRQUFTQyxFQUFRQSxFQUFPRCxRQUFTRixHQUcvREcsRUFBT0UsR0FBSSxFQUdKRixFQUFPRCxRQUtmRixFQUFvQlEsRUFBSUYsRUFHeEJOLEVBQW9CUyxFQUFJVixFQUd4QkMsRUFBb0JVLEVBQUksU0FBU1IsRUFBU1MsRUFBTUMsR0FDM0NaLEVBQW9CYSxFQUFFWCxFQUFTUyxJQUNsQ0csT0FBT0MsZUFBZWIsRUFBU1MsRUFBTSxDQUFFSyxZQUFZLEVBQU1DLElBQUtMLEtBS2hFWixFQUFvQmtCLEVBQUksU0FBU2hCLEdBQ1gscUJBQVhpQixRQUEwQkEsT0FBT0MsYUFDMUNOLE9BQU9DLGVBQWViLEVBQVNpQixPQUFPQyxZQUFhLENBQUVDLE1BQU8sV0FFN0RQLE9BQU9DLGVBQWViLEVBQVMsYUFBYyxDQUFFbUIsT0FBTyxLQVF2RHJCLEVBQW9Cc0IsRUFBSSxTQUFTRCxFQUFPRSxHQUV2QyxHQURVLEVBQVBBLElBQVVGLEVBQVFyQixFQUFvQnFCLElBQy9CLEVBQVBFLEVBQVUsT0FBT0YsRUFDcEIsR0FBVyxFQUFQRSxHQUE4QixrQkFBVkYsR0FBc0JBLEdBQVNBLEVBQU1HLFdBQVksT0FBT0gsRUFDaEYsSUFBSUksRUFBS1gsT0FBT1ksT0FBTyxNQUd2QixHQUZBMUIsRUFBb0JrQixFQUFFTyxHQUN0QlgsT0FBT0MsZUFBZVUsRUFBSSxVQUFXLENBQUVULFlBQVksRUFBTUssTUFBT0EsSUFDdEQsRUFBUEUsR0FBNEIsaUJBQVRG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QVUsSUFBSyxJQUFVLElBQ3hELElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUFLLElBQVUsSUFDeEQsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUFLLElBQVUsSUFDdkUsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUFLLElBQVUsSUFDdkUsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUN4RCxJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQ3hELElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUFLLElBQVUsSUFDeEQsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUFLLElBQVUsSUFDdkUsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUFLLElBQVUsSUFDdkUsSUFBVSxJQUFNLElBQVUsSUFDMUIsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQ3pDLElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQ3ZFLElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQ3ZFLElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUFLLElBQVUsSUFDeEQsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUN4RCxJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFDekMsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQ3pDLElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUN6QyxJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFDekMsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUN4RCxJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQ3hELElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUN6QyxJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFDekMsSUFBVSxJQUFN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QWEsQ0FDWixJQUFLLEVBQ0wsSUFBSyxFQUNMLElBQUssRUFDTCxJQUFLLEVBQ0wsSUFBSyxFQUNMLElBQUssRUFDTCxJQUFLLEVBQ0wsSUFBSyxFQUNMLEtBQU0sRUFDTixJQUFLLEVBQ0wsS0FBTSxFQUNOLEtBQU0sRUFDTixLQUFNLEVBQ04sS0FBTSxFQUNOLEtBQU0sRUFDTixJQUFLLEVBQ0wsS0FBTSxHQVFQQyxFQUFVLENBQUUsSUFBSyxLQVNqQkMsRUFBYyxDQUNiLElBQUssQ0FBRSxLQUNQLElBQUssQ0FBRSxJQUFLLE9BUWJDLEVBQVUsd0RDOUNWLElBQUlDLEVBQVksQ0FDZixJQUFLLFNBQVUxc0YsR0FDZCxPQUFTQSxHQUVWLElBQUssU0FBVUEsRUFBR3F1QyxHQUNqQixPQUFPcnVDLEVBQUlxdUMsR0FFWixJQUFLLFNBQVVydUMsRUFBR3F1QyxHQUNqQixPQUFPcnVDLEVBQUlxdUMsR0FFWixJQUFLLFNBQVVydUMsRUFBR3F1QyxHQUNqQixPQUFPcnVDLEVBQUlxdUMsR0FFWixJQUFLLFNBQVVydUMsRUFBR3F1QyxHQUNqQixPQUFPcnVDLEVBQUlxdUMsR0FFWixJQUFLLFNBQVVydUMsRUFBR3F1QyxHQUNqQixPQUFPcnVDLEVBQUlxdUMsR0FFWixJQUFLLFNBQVVydUMsRUFBR3F1QyxHQUNqQixPQUFPcnVDLEVBQUlxdUMsR0FFWixLQUFNLFNBQVVydUMsRUFBR3F1QyxHQUNsQixPQUFPcnVDLEdBQUtxdUMsR0FFYixJQUFLLFNBQVVydUMsRUFBR3F1QyxHQUNqQixPQUFPcnVDLEVBQUlxdUMsR0FFWixLQUFNLFNBQVVydUMsRUFBR3F1QyxHQUNsQixPQUFPcnVDLEdBQUtxdUMsR0FFYixLQUFNLFNBQVVydUMsRUFBR3F1QyxHQUNsQixPQUFPcnVDLElBQU1xdUMsR0FFZCxLQUFNLFNBQVVydUMsRUFBR3F1QyxHQUNsQixPQUFPcnVDLElBQU1xdUMsR0FFZCxLQUFNLFNBQVVydUMsRUFBR3F1QyxHQUNsQixPQUFPcnVDLEdBQUtxdUMsR0FFYixLQUFNLFNBQVVydUMsRUFBR3F1QyxH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QzFuRyxLQUFLLE9BQ0wwbkcsVUFBVSwwQkFDVjltSCxZQUFZLGtCQUNaeFUsTUFBUTZhLEtBQUsyMEIsTUFBTWdyRixXQUNuQjJCLFNBQVcsU0FBQS9zSCxHQUNWLEVBQUtpb0MsU0FBVSxDQUFFbWpGLFdBQVlwckgsRUFBRXhNLE9BQU81QyxRQUN0QyxFQUFLbzhILGVBSVIsbUJBQUtkLFVBQVUsbUJBQ1p6Z0gsS0FBSzQvRyxjQUFlQSxXQWpXN0IsR0FBOEJ6aEYsYUVSOUJxakYsSUFBUzVpRixPQUNSLFlBQUMsR0FBRCxNQUNBNU4sU0FBUzR2RixlQUFnQiIsImZpbGUiOiJqcy9vcmRlcmluZy1zY3JpcHQubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDM2Mik7XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsInZhciBPID0gJ29iamVjdCc7XG52YXIgY2hlY2sgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ICYmIGl0Lk1hdGggPT0gTWF0aCAmJiBpdDtcbn07XG5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy84NiNpc3N1ZWNvbW1lbnQtMTE1NzU5MDI4XG5tb2R1bGUuZXhwb3J0cyA9XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICBjaGVjayh0eXBlb2YgZ2xvYmFsVGhpcyA9PSBPICYmIGdsb2JhbFRoaXMpIHx8XG4gIGNoZWNrKHR5cGVvZiB3aW5kb3cgPT0gTyAmJiB3aW5kb3cpIHx8XG4gIGNoZWNrKHR5cGVvZiBzZWxmID09IE8gJiYgc2VsZikgfHxcbiAgY2hlY2sodHlwZW9mIGdsb2JhbCA9PSBPICYmIGdsb2JhbCkgfHxcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jXG4gIEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG4iLCJpbXBvcnQgX29iamVjdFNwcmVhZCBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0U3ByZWFkXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0IF90eXBlb2YgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3R5cGVvZlwiO1xuXG4vKipcbiAqIFBhcnRzIG9mIHRoaXMgc291cmNlIHdlcmUgZGVyaXZlZCBhbmQgbW9kaWZpZWQgZnJvbSBmYXN0LXJlYWN0LXJlbmRlcixcbiAqIHJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbiAqXG4gKiBodHRwczovL2dpdGh1Yi5jb20vYWx0LWovZmFzdC1yZWFjdC1yZW5kZXJcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTYgQW5kcmV5IE1vcm96b3ZcbiAqXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gKiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4gKiBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4gKiB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4gKiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbiAqIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4gKlxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbiAqIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICpcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiAqIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuICogRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gKiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gKiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuICogT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuICogVEhFIFNPRlRXQVJFLlxuICovXG5cbi8qKlxuICogRXh0ZXJuYWwgZGVwZW5kZW5jaWVzXG4gKi9cbmltcG9ydCB7IGlzRW1wdHksIGNhc3RBcnJheSwgb21pdCwgc3RhcnRzV2l0aCwga2ViYWJDYXNlLCBpc1BsYWluT2JqZWN0IH0gZnJvbSAnbG9kYXNoJztcbi8qKlxuICogV29yZFByZXNzIGRlcGVuZGVuY2llc1xuICovXG5cbmltcG9ydCB7IGVzY2FwZUhUTUwsIGVzY2FwZUF0dHJpYnV0ZSwgaXNWYWxpZEF0dHJpYnV0ZU5hbWUgfSBmcm9tICdAd29yZHByZXNzL2VzY2FwZS1odG1sJztcbi8qKlxuICogSW50ZXJuYWwgZGVwZW5kZW5jaWVzXG4gKi9cblxuaW1wb3J0IHsgY3JlYXRlQ29udGV4dCwgRnJhZ21lbnQsIFN0cmljdE1vZGUsIGZvcndhcmRSZWYgfSBmcm9tICcuL3JlYWN0JztcbmltcG9ydCBSYXdIVE1MIGZyb20gJy4vcmF3LWh0bWwnO1xuXG52YXIgX2NyZWF0ZUNvbnRleHQgPSBjcmVhdGVDb250ZXh0KCksXG4gICAgUHJvdmlkZXIgPSBfY3JlYXRlQ29udGV4dC5Qcm92aWRlcixcbiAgICBDb25zdW1lciA9IF9jcmVhdGVDb250ZXh0LkNvbnN1bWVyO1xuXG52YXIgRm9yd2FyZFJlZiA9IGZvcndhcmRSZWYoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gbnVsbDtcbn0pO1xuLyoqXG4gKiBWYWxpZCBhdHRyaWJ1dGUgdHlwZXMuXG4gKlxuICogQHR5cGUge1NldH1cbiAqL1xuXG52YXIgQVRUUklCVVRFU19UWVBFUyA9IG5ldyBTZXQoWydzdHJpbmcnLCAnYm9vbGVhbicsICdudW1iZXInXSk7XG4vKipcbiAqIEVsZW1lbnQgdGFncyB3aGljaCBjYW4gYmUgc2VsZi1jbG9zaW5nLlxuICpcbiAqIEB0eXBlIHtTZXR9XG4gKi9cblxudmFyIFNFTEZfQ0xPU0lOR19UQUdTID0gbmV3IFNldChbJ2FyZWEnLCAnYmFzZScsICdicicsICdjb2wnLCAnY29tbWFuZCcsICdlbWJlZCcsICdocicsICdpbWcnLCAnaW5wdXQnLCAna2V5Z2VuJywgJ2xpbmsnLCAnbWV0YScsICdwYXJhbScsICdzb3VyY2UnLCAndHJhY2snLCAnd2JyJ10pO1xuLyoqXG4gKiBCb29sZWFuIGF0dHJpYnV0ZXMgYXJlIGF0dHJpYnV0ZXMgd2hvc2UgcHJlc2VuY2UgYXMgYmVpbmcgYXNzaWduZWQgaXNcbiAqIG1lYW5pbmdmdWwsIGV2ZW4gaWYgb25seSBlbXB0eS5cbiAqXG4gKiBTZWU6IGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2NvbW1vbi1taWNyb3N5bnRheGVzLmh0bWwjYm9vbGVhbi1hdHRyaWJ1dGVzXG4gKiBFeHRyYWN0ZWQgZnJvbTogaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvaW5kaWNlcy5odG1sI2F0dHJpYnV0ZXMtM1xuICpcbiAqIE9iamVjdC5rZXlzKCBbIC4uLmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoICcjYXR0cmlidXRlcy0xID4gdGJvZHkgPiB0cicgKSBdXG4gKiAgICAgLmZpbHRlciggKCB0ciApID0+IHRyLmxhc3RDaGlsZC50ZXh0Q29udGVudC5pbmRleE9mKCAnQm9vbGVhbiBhdHRyaWJ1dGUnICkgIT09IC0xIClcbiAqICAgICAucmVkdWNlKCAoIHJlc3VsdCwgdHIgKSA9PiBPYmplY3QuYXNzaWduKCByZXN1bHQsIHtcbiAqICAgICAgICAgWyB0ci5maXJzdENoaWxkLnRleHRDb250ZW50LnRyaW0oKSBdOiB0cnVlXG4gKiAgICAgfSApLCB7fSApICkuc29ydCgpO1xuICpcbiAqIEB0eXBlIHtTZXR9XG4gKi9cblxudmFyIEJPT0xFQU5fQVRUUklCVVRFUyA9IG5ldyBTZXQoWydhbGxvd2Z1bGxzY3JlZW4nLCAnYWxsb3dwYXltZW50cmVxdWVzdCcsICdhbGxvd3VzZXJtZWRpYScsICdhc3luYycsICdhdXRvZm9jdXMnLCAnYXV0b3BsYXknLCAnY2hlY2tlZCcsICdjb250cm9scycsICdkZWZhdWx0JywgJ2RlZmVyJywgJ2Rpc2FibGVkJywgJ2Rvd25sb2FkJywgJ2Zvcm1ub3ZhbGlkYXRlJywgJ2hpZGRlbicsICdpc21hcCcsICdpdGVtc2NvcGUnLCAnbG9vcCcsICdtdWx0aXBsZScsICdtdXRlZCcsICdub21vZHVsZScsICdub3ZhbGlkYXRlJywgJ29wZW4nLCAncGxheXNpbmxpbmUnLCAncmVhZG9ubHknLCAncmVxdWlyZWQnLCAncmV2ZXJzZWQnLCAnc2VsZWN0ZWQnLCAndHlwZW11c3RtYXRjaCddKTtcbi8qKlxuICogRW51bWVyYXRlZCBhdHRyaWJ1dGVzIGFyZSBhdHRyaWJ1dGVzIHdoaWNoIG11c3QgYmUgb2YgYSBzcGVjaWZpYyB2YWx1ZSBmb3JtLlxuICogTGlrZSBib29sZWFuIGF0dHJpYnV0ZXMsIHRoZXNlIGFyZSBtZWFuaW5nZnVsIGlmIHNwZWNpZmllZCwgZXZlbiBpZiBub3Qgb2YgYVxuICogdmFsaWQgZW51bWVyYXRlZCB2YWx1ZS5cbiAqXG4gKiBTZWU6IGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2NvbW1vbi1taWNyb3N5bnRheGVzLmh0bWwjZW51bWVyYXRlZC1hdHRyaWJ1dGVcbiAqIEV4dHJhY3RlZCBmcm9tOiBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9pbmRpY2VzLmh0bWwjYXR0cmlidXRlcy0zXG4gKlxuICogT2JqZWN0LmtleXMoIFsgLi4uZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCggJyNhdHRyaWJ1dGVzLTEgPiB0Ym9keSA+IHRyJyApIF1cbiAqICAgICAuZmlsdGVyKCAoIHRyICkgPT4gL14oXCIoLis/KVwiOz9cXHMqKSsvLnRlc3QoIHRyLmxhc3RDaGlsZC50ZXh0Q29udGVudC50cmltKCkgKSApXG4gKiAgICAgLnJlZHVjZSggKCByZXN1bHQsIHRyICkgPT4gT2JqZWN0LmFzc2lnbiggcmVzdWx0LCB7XG4gKiAgICAgICAgIFsgdHIuZmlyc3RDaGlsZC50ZXh0Q29udGVudC50cmltKCkgXTogdHJ1ZVxuICogICAgIH0gKSwge30gKSApLnNvcnQoKTtcbiAqXG4gKiBTb21lIG5vdGFibGUgb21pc3Npb25zOlxuICpcbiAqICAtIGBhbHRgOiBodHRwczovL2Jsb2cud2hhdHdnLm9yZy9vbWl0LWFsdFxuICpcbiAqIEB0eXBlIHtTZXR9XG4gKi9cblxudmFyIEVOVU1FUkFURURfQVRUUklCVVRFUyA9IG5ldyBTZXQoWydhdXRvY2FwaXRhbGl6ZScsICdhdXRvY29tcGxldGUnLCAnY2hhcnNldCcsICdjb250ZW50ZWRpdGFibGUnLCAnY3Jvc3NvcmlnaW4nLCAnZGVjb2RpbmcnLCAnZGlyJywgJ2RyYWdnYWJsZScsICdlbmN0eXBlJywgJ2Zvcm1lbmN0eXBlJywgJ2Zvcm1tZXRob2QnLCAnaHR0cC1lcXVpdicsICdpbnB1dG1vZGUnLCAna2luZCcsICdtZXRob2QnLCAncHJlbG9hZCcsICdzY29wZScsICdzaGFwZScsICdzcGVsbGNoZWNrJywgJ3RyYW5zbGF0ZScsICd0eXBlJywgJ3dyYXAnXSk7XG4vKipcbiAqIFNldCBvZiBDU1Mgc3R5bGUgcHJvcGVydGllcyB3aGljaCBzdXBwb3J0IGFzc2lnbm1lbnQgb2YgdW5pdGxlc3MgbnVtYmVycy5cbiAqIFVzZWQgaW4gcmVuZGVyaW5nIG9mIHN0eWxlIHByb3BlcnRpZXMsIHdoZXJlIGBweGAgdW5pdCBpcyBhc3N1bWVkIHVubGVzc1xuICogcHJvcGVydHkgaXMgaW5jbHVkZWQgaW4gdGhpcyBzZXQgb3IgdmFsdWUgaXMgemVyby5cbiAqXG4gKiBHZW5lcmF0ZWQgdmlhOlxuICpcbiAqIE9iamVjdC5lbnRyaWVzKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCAnZGl2JyApLnN0eWxlIClcbiAqICAgICAuZmlsdGVyKCAoIFsga2V5IF0gKSA9PiAoXG4gKiAgICAgICAgICEgL14od2Via2l0fG1zfG1veikvLnRlc3QoIGtleSApICYmXG4gKiAgICAgICAgICggZS5zdHlsZVsga2V5IF0gPSAxMCApICYmXG4gKiAgICAgICAgIGUuc3R5bGVbIGtleSBdID09PSAnMTAnXG4gKiAgICAgKSApXG4gKiAgICAgLm1hcCggKCBbIGtleSBdICkgPT4ga2V5IClcbiAqICAgICAuc29ydCgpO1xuICpcbiAqIEB0eXBlIHtTZXR9XG4gKi9cblxudmFyIENTU19QUk9QRVJUSUVTX1NVUFBPUlRTX1VOSVRMRVNTID0gbmV3IFNldChbJ2FuaW1hdGlvbicsICdhbmltYXRpb25JdGVyYXRpb25Db3VudCcsICdiYXNlbGluZVNoaWZ0JywgJ2JvcmRlckltYWdlT3V0c2V0JywgJ2JvcmRlckltYWdlU2xpY2UnLCAnYm9yZGVySW1hZ2VXaWR0aCcsICdjb2x1bW5Db3VudCcsICdjeCcsICdjeScsICdmaWxsT3BhY2l0eScsICdmbGV4R3JvdycsICdmbGV4U2hyaW5rJywgJ2Zsb29kT3BhY2l0eScsICdmb250V2VpZ2h0JywgJ2dyaWRDb2x1bW5FbmQnLCAnZ3JpZENvbHVtblN0YXJ0JywgJ2dyaWRSb3dFbmQnLCAnZ3JpZFJvd1N0YXJ0JywgJ2xpbmVIZWlnaHQnLCAnb3BhY2l0eScsICdvcmRlcicsICdvcnBoYW5zJywgJ3InLCAncngnLCAncnknLCAnc2hhcGVJbWFnZVRocmVzaG9sZCcsICdzdG9wT3BhY2l0eScsICdzdHJva2VEYXNoYXJyYXknLCAnc3Ryb2tlRGFzaG9mZnNldCcsICdzdHJva2VNaXRlcmxpbWl0JywgJ3N0cm9rZU9wYWNpdHknLCAnc3Ryb2tlV2lkdGgnLCAndGFiU2l6ZScsICd3aWRvd3MnLCAneCcsICd5JywgJ3pJbmRleCcsICd6b29tJ10pO1xuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIHNwZWNpZmllZCBzdHJpbmcgaXMgcHJlZml4ZWQgYnkgb25lIG9mIGFuIGFycmF5IG9mXG4gKiBwb3NzaWJsZSBwcmVmaXhlcy5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gICBzdHJpbmcgICBTdHJpbmcgdG8gY2hlY2suXG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBwcmVmaXhlcyBQb3NzaWJsZSBwcmVmaXhlcy5cbiAqXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHN0cmluZyBoYXMgcHJlZml4LlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBoYXNQcmVmaXgoc3RyaW5nLCBwcmVmaXhlcykge1xuICByZXR1cm4gcHJlZml4ZXMuc29tZShmdW5jdGlvbiAocHJlZml4KSB7XG4gICAgcmV0dXJuIHN0cmluZy5pbmRleE9mKHByZWZpeCkgPT09IDA7XG4gIH0pO1xufVxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIGdpdmVuIHByb3AgbmFtZSBzaG91bGQgYmUgaWdub3JlZCBpbiBhdHRyaWJ1dGVzXG4gKiBzZXJpYWxpemF0aW9uLCBvciBmYWxzZSBvdGhlcndpc2UuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGF0dHJpYnV0ZSBBdHRyaWJ1dGUgdG8gY2hlY2suXG4gKlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciBhdHRyaWJ1dGUgc2hvdWxkIGJlIGlnbm9yZWQuXG4gKi9cblxuZnVuY3Rpb24gaXNJbnRlcm5hbEF0dHJpYnV0ZShhdHRyaWJ1dGUpIHtcbiAgcmV0dXJuICdrZXknID09PSBhdHRyaWJ1dGUgfHwgJ2NoaWxkcmVuJyA9PT0gYXR0cmlidXRlO1xufVxuLyoqXG4gKiBSZXR1cm5zIHRoZSBub3JtYWwgZm9ybSBvZiB0aGUgZWxlbWVudCdzIGF0dHJpYnV0ZSB2YWx1ZSBmb3IgSFRNTC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYXR0cmlidXRlIEF0dHJpYnV0ZSBuYW1lLlxuICogQHBhcmFtIHsqfSAgICAgIHZhbHVlICAgICBOb24tbm9ybWFsaXplZCBhdHRyaWJ1dGUgdmFsdWUuXG4gKlxuICogQHJldHVybiB7c3RyaW5nfSBOb3JtYWxpemVkIGF0dHJpYnV0ZSB2YWx1ZS5cbiAqL1xuXG5cbmZ1bmN0aW9uIGdldE5vcm1hbEF0dHJpYnV0ZVZhbHVlKGF0dHJpYnV0ZSwgdmFsdWUpIHtcbiAgc3dpdGNoIChhdHRyaWJ1dGUpIHtcbiAgICBjYXNlICdzdHlsZSc6XG4gICAgICByZXR1cm4gcmVuZGVyU3R5bGUodmFsdWUpO1xuICB9XG5cbiAgcmV0dXJuIHZhbHVlO1xufVxuLyoqXG4gKiBSZXR1cm5zIHRoZSBub3JtYWwgZm9ybSBvZiB0aGUgZWxlbWVudCdzIGF0dHJpYnV0ZSBuYW1lIGZvciBIVE1MLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBhdHRyaWJ1dGUgTm9uLW5vcm1hbGl6ZWQgYXR0cmlidXRlIG5hbWUuXG4gKlxuICogQHJldHVybiB7c3RyaW5nfSBOb3JtYWxpemVkIGF0dHJpYnV0ZSBuYW1lLlxuICovXG5cblxuZnVuY3Rpb24gZ2V0Tm9ybWFsQXR0cmlidXRlTmFtZShhdHRyaWJ1dGUpIHtcbiAgc3dpdGNoIChhdHRyaWJ1dGUpIHtcbiAgICBjYXNlICdodG1sRm9yJzpcbiAgICAgIHJldHVybiAnZm9yJztcblxuICAgIGNhc2UgJ2NsYXNzTmFtZSc6XG4gICAgICByZXR1cm4gJ2NsYXNzJztcbiAgfVxuXG4gIHJldHVybiBhdHRyaWJ1dGUudG9Mb3dlckNhc2UoKTtcbn1cbi8qKlxuICogUmV0dXJucyB0aGUgbm9ybWFsIGZvcm0gb2YgdGhlIHN0eWxlIHByb3BlcnR5IG5hbWUgZm9yIEhUTUwuXG4gKlxuICogLSBDb252ZXJ0cyBwcm9wZXJ0eSBuYW1lcyB0byBrZWJhYi1jYXNlLCBlLmcuICdiYWNrZ3JvdW5kQ29sb3InIOKGkiAnYmFja2dyb3VuZC1jb2xvcidcbiAqIC0gTGVhdmVzIGN1c3RvbSBhdHRyaWJ1dGVzIGFsb25lLCBlLmcuICctLW15QmFja2dyb3VuZENvbG9yJyDihpIgJy0tbXlCYWNrZ3JvdW5kQ29sb3InXG4gKiAtIENvbnZlcnRzIHZlbmRvci1wcmVmaXhlZCBwcm9wZXJ0eSBuYW1lcyB0byAta2ViYWItY2FzZSwgZS5nLiAnTW96VHJhbnNmb3JtJyDihpIgJy1tb3otdHJhbnNmb3JtJ1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wZXJ0eSBQcm9wZXJ0eSBuYW1lLlxuICpcbiAqIEByZXR1cm4ge3N0cmluZ30gTm9ybWFsaXplZCBwcm9wZXJ0eSBuYW1lLlxuICovXG5cblxuZnVuY3Rpb24gZ2V0Tm9ybWFsU3R5bGVQcm9wZXJ0eU5hbWUocHJvcGVydHkpIHtcbiAgaWYgKHN0YXJ0c1dpdGgocHJvcGVydHksICctLScpKSB7XG4gICAgcmV0dXJuIHByb3BlcnR5O1xuICB9XG5cbiAgaWYgKGhhc1ByZWZpeChwcm9wZXJ0eSwgWydtcycsICdPJywgJ01veicsICdXZWJraXQnXSkpIHtcbiAgICByZXR1cm4gJy0nICsga2ViYWJDYXNlKHByb3BlcnR5KTtcbiAgfVxuXG4gIHJldHVybiBrZWJhYkNhc2UocHJvcGVydHkpO1xufVxuLyoqXG4gKiBSZXR1cm5zIHRoZSBub3JtYWwgZm9ybSBvZiB0aGUgc3R5bGUgcHJvcGVydHkgdmFsdWUgZm9yIEhUTUwuIEFwcGVuZHMgYVxuICogZGVmYXVsdCBwaXhlbCB1bml0IGlmIG51bWVyaWMsIG5vdCBhIHVuaXRsZXNzIHByb3BlcnR5LCBhbmQgbm90IHplcm8uXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHByb3BlcnR5IFByb3BlcnR5IG5hbWUuXG4gKiBAcGFyYW0geyp9ICAgICAgdmFsdWUgICAgTm9uLW5vcm1hbGl6ZWQgcHJvcGVydHkgdmFsdWUuXG4gKlxuICogQHJldHVybiB7Kn0gTm9ybWFsaXplZCBwcm9wZXJ0eSB2YWx1ZS5cbiAqL1xuXG5cbmZ1bmN0aW9uIGdldE5vcm1hbFN0eWxlUHJvcGVydHlWYWx1ZShwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgJiYgMCAhPT0gdmFsdWUgJiYgIUNTU19QUk9QRVJUSUVTX1NVUFBPUlRTX1VOSVRMRVNTLmhhcyhwcm9wZXJ0eSkpIHtcbiAgICByZXR1cm4gdmFsdWUgKyAncHgnO1xuICB9XG5cbiAgcmV0dXJuIHZhbHVlO1xufVxuLyoqXG4gKiBTZXJpYWxpemVzIGEgUmVhY3QgZWxlbWVudCB0byBzdHJpbmcuXG4gKlxuICogQHBhcmFtIHtXUEVsZW1lbnR9IGVsZW1lbnQgICAgICAgRWxlbWVudCB0byBzZXJpYWxpemUuXG4gKiBAcGFyYW0gez9PYmplY3R9ICAgY29udGV4dCAgICAgICBDb250ZXh0IG9iamVjdC5cbiAqIEBwYXJhbSB7P09iamVjdH0gICBsZWdhY3lDb250ZXh0IExlZ2FjeSBjb250ZXh0IG9iamVjdC5cbiAqXG4gKiBAcmV0dXJuIHtzdHJpbmd9IFNlcmlhbGl6ZWQgZWxlbWVudC5cbiAqL1xuXG5cbmV4cG9ydCBmdW5jdGlvbiByZW5kZXJFbGVtZW50KGVsZW1lbnQsIGNvbnRleHQpIHtcbiAgdmFyIGxlZ2FjeUNvbnRleHQgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IHt9O1xuXG4gIGlmIChudWxsID09PSBlbGVtZW50IHx8IHVuZGVmaW5lZCA9PT0gZWxlbWVudCB8fCBmYWxzZSA9PT0gZWxlbWVudCkge1xuICAgIHJldHVybiAnJztcbiAgfVxuXG4gIGlmIChBcnJheS5pc0FycmF5KGVsZW1lbnQpKSB7XG4gICAgcmV0dXJuIHJlbmRlckNoaWxkcmVuKGVsZW1lbnQsIGNvbnRleHQsIGxlZ2FjeUNvbnRleHQpO1xuICB9XG5cbiAgc3dpdGNoIChfdHlwZW9mKGVsZW1lbnQpKSB7XG4gICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgIHJldHVybiBlc2NhcGVIVE1MKGVsZW1lbnQpO1xuXG4gICAgY2FzZSAnbnVtYmVyJzpcbiAgICAgIHJldHVybiBlbGVtZW50LnRvU3RyaW5nKCk7XG4gIH1cblxuICB2YXIgdHlwZSA9IGVsZW1lbnQudHlwZSxcbiAgICAgIHByb3BzID0gZWxlbWVudC5wcm9wcztcblxuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlIFN0cmljdE1vZGU6XG4gICAgY2FzZSBGcmFnbWVudDpcbiAgICAgIHJldHVybiByZW5kZXJDaGlsZHJlbihwcm9wcy5jaGlsZHJlbiwgY29udGV4dCwgbGVnYWN5Q29udGV4dCk7XG5cbiAgICBjYXNlIFJhd0hUTUw6XG4gICAgICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgICAgICB3cmFwcGVyUHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImNoaWxkcmVuXCJdKTtcblxuICAgICAgcmV0dXJuIHJlbmRlck5hdGl2ZUNvbXBvbmVudChpc0VtcHR5KHdyYXBwZXJQcm9wcykgPyBudWxsIDogJ2RpdicsIF9vYmplY3RTcHJlYWQoe30sIHdyYXBwZXJQcm9wcywge1xuICAgICAgICBkYW5nZXJvdXNseVNldElubmVySFRNTDoge1xuICAgICAgICAgIF9faHRtbDogY2hpbGRyZW5cbiAgICAgICAgfVxuICAgICAgfSksIGNvbnRleHQsIGxlZ2FjeUNvbnRleHQpO1xuICB9XG5cbiAgc3dpdGNoIChfdHlwZW9mKHR5cGUpKSB7XG4gICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgIHJldHVybiByZW5kZXJOYXRpdmVDb21wb25lbnQodHlwZSwgcHJvcHMsIGNvbnRleHQsIGxlZ2FjeUNvbnRleHQpO1xuXG4gICAgY2FzZSAnZnVuY3Rpb24nOlxuICAgICAgaWYgKHR5cGUucHJvdG90eXBlICYmIHR5cGVvZiB0eXBlLnByb3RvdHlwZS5yZW5kZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIHJlbmRlckNvbXBvbmVudCh0eXBlLCBwcm9wcywgY29udGV4dCwgbGVnYWN5Q29udGV4dCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZW5kZXJFbGVtZW50KHR5cGUocHJvcHMsIGxlZ2FjeUNvbnRleHQpLCBjb250ZXh0LCBsZWdhY3lDb250ZXh0KTtcbiAgfVxuXG4gIHN3aXRjaCAodHlwZSAmJiB0eXBlLiQkdHlwZW9mKSB7XG4gICAgY2FzZSBQcm92aWRlci4kJHR5cGVvZjpcbiAgICAgIHJldHVybiByZW5kZXJDaGlsZHJlbihwcm9wcy5jaGlsZHJlbiwgcHJvcHMudmFsdWUsIGxlZ2FjeUNvbnRleHQpO1xuXG4gICAgY2FzZSBDb25zdW1lci4kJHR5cGVvZjpcbiAgICAgIHJldHVybiByZW5kZXJFbGVtZW50KHByb3BzLmNoaWxkcmVuKGNvbnRleHQgfHwgdHlwZS5fY3VycmVudFZhbHVlKSwgY29udGV4dCwgbGVnYWN5Q29udGV4dCk7XG5cbiAgICBjYXNlIEZvcndhcmRSZWYuJCR0eXBlb2Y6XG4gICAgICByZXR1cm4gcmVuZGVyRWxlbWVudCh0eXBlLnJlbmRlcihwcm9wcyksIGNvbnRleHQsIGxlZ2FjeUNvbnRleHQpO1xuICB9XG5cbiAgcmV0dXJuICcnO1xufVxuLyoqXG4gKiBTZXJpYWxpemVzIGEgbmF0aXZlIGNvbXBvbmVudCB0eXBlIHRvIHN0cmluZy5cbiAqXG4gKiBAcGFyYW0gez9zdHJpbmd9IHR5cGUgICAgICAgICAgTmF0aXZlIGNvbXBvbmVudCB0eXBlIHRvIHNlcmlhbGl6ZSwgb3IgbnVsbCBpZlxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbmRlcmluZyBhcyBmcmFnbWVudCBvZiBjaGlsZHJlbiBjb250ZW50LlxuICogQHBhcmFtIHtPYmplY3R9ICBwcm9wcyAgICAgICAgIFByb3BzIG9iamVjdC5cbiAqIEBwYXJhbSB7P09iamVjdH0gY29udGV4dCAgICAgICBDb250ZXh0IG9iamVjdC5cbiAqIEBwYXJhbSB7P09iamVjdH0gbGVnYWN5Q29udGV4dCBMZWdhY3kgY29udGV4dCBvYmplY3QuXG4gKlxuICogQHJldHVybiB7c3RyaW5nfSBTZXJpYWxpemVkIGVsZW1lbnQuXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHJlbmRlck5hdGl2ZUNvbXBvbmVudCh0eXBlLCBwcm9wcywgY29udGV4dCkge1xuICB2YXIgbGVnYWN5Q29udGV4dCA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDoge307XG4gIHZhciBjb250ZW50ID0gJyc7XG5cbiAgaWYgKHR5cGUgPT09ICd0ZXh0YXJlYScgJiYgcHJvcHMuaGFzT3duUHJvcGVydHkoJ3ZhbHVlJykpIHtcbiAgICAvLyBUZXh0YXJlYSBjaGlsZHJlbiBjYW4gYmUgYXNzaWduZWQgYXMgdmFsdWUgcHJvcC4gSWYgaXQgaXMsIHJlbmRlciBpblxuICAgIC8vIHBsYWNlIG9mIGNoaWxkcmVuLiBFbnN1cmUgdG8gb21pdCBzbyBpdCBpcyBub3QgYXNzaWduZWQgYXMgYXR0cmlidXRlXG4gICAgLy8gYXMgd2VsbC5cbiAgICBjb250ZW50ID0gcmVuZGVyQ2hpbGRyZW4ocHJvcHMudmFsdWUsIGNvbnRleHQsIGxlZ2FjeUNvbnRleHQpO1xuICAgIHByb3BzID0gb21pdChwcm9wcywgJ3ZhbHVlJyk7XG4gIH0gZWxzZSBpZiAocHJvcHMuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwgJiYgdHlwZW9mIHByb3BzLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MLl9faHRtbCA9PT0gJ3N0cmluZycpIHtcbiAgICAvLyBEYW5nZXJvdXMgY29udGVudCBpcyBsZWZ0IHVuZXNjYXBlZC5cbiAgICBjb250ZW50ID0gcHJvcHMuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwuX19odG1sO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBwcm9wcy5jaGlsZHJlbiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBjb250ZW50ID0gcmVuZGVyQ2hpbGRyZW4ocHJvcHMuY2hpbGRyZW4sIGNvbnRleHQsIGxlZ2FjeUNvbnRleHQpO1xuICB9XG5cbiAgaWYgKCF0eXBlKSB7XG4gICAgcmV0dXJuIGNvbnRlbnQ7XG4gIH1cblxuICB2YXIgYXR0cmlidXRlcyA9IHJlbmRlckF0dHJpYnV0ZXMocHJvcHMpO1xuXG4gIGlmIChTRUxGX0NMT1NJTkdfVEFHUy5oYXModHlwZSkpIHtcbiAgICByZXR1cm4gJzwnICsgdHlwZSArIGF0dHJpYnV0ZXMgKyAnLz4nO1xuICB9XG5cbiAgcmV0dXJuICc8JyArIHR5cGUgKyBhdHRyaWJ1dGVzICsgJz4nICsgY29udGVudCArICc8LycgKyB0eXBlICsgJz4nO1xufVxuLyoqXG4gKiBTZXJpYWxpemVzIGEgbm9uLW5hdGl2ZSBjb21wb25lbnQgdHlwZSB0byBzdHJpbmcuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gQ29tcG9uZW50ICAgICBDb21wb25lbnQgdHlwZSB0byBzZXJpYWxpemUuXG4gKiBAcGFyYW0ge09iamVjdH0gICBwcm9wcyAgICAgICAgIFByb3BzIG9iamVjdC5cbiAqIEBwYXJhbSB7P09iamVjdH0gIGNvbnRleHQgICAgICAgQ29udGV4dCBvYmplY3QuXG4gKiBAcGFyYW0gez9PYmplY3R9ICBsZWdhY3lDb250ZXh0IExlZ2FjeSBjb250ZXh0IG9iamVjdC5cbiAqXG4gKiBAcmV0dXJuIHtzdHJpbmd9IFNlcmlhbGl6ZWQgZWxlbWVudFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiByZW5kZXJDb21wb25lbnQoQ29tcG9uZW50LCBwcm9wcywgY29udGV4dCkge1xuICB2YXIgbGVnYWN5Q29udGV4dCA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDoge307XG4gIHZhciBpbnN0YW5jZSA9IG5ldyBDb21wb25lbnQocHJvcHMsIGxlZ2FjeUNvbnRleHQpO1xuXG4gIGlmICh0eXBlb2YgaW5zdGFuY2UuZ2V0Q2hpbGRDb250ZXh0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgT2JqZWN0LmFzc2lnbihsZWdhY3lDb250ZXh0LCBpbnN0YW5jZS5nZXRDaGlsZENvbnRleHQoKSk7XG4gIH1cblxuICB2YXIgaHRtbCA9IHJlbmRlckVsZW1lbnQoaW5zdGFuY2UucmVuZGVyKCksIGNvbnRleHQsIGxlZ2FjeUNvbnRleHQpO1xuICByZXR1cm4gaHRtbDtcbn1cbi8qKlxuICogU2VyaWFsaXplcyBhbiBhcnJheSBvZiBjaGlsZHJlbiB0byBzdHJpbmcuXG4gKlxuICogQHBhcmFtIHtBcnJheX0gICBjaGlsZHJlbiAgICAgIENoaWxkcmVuIHRvIHNlcmlhbGl6ZS5cbiAqIEBwYXJhbSB7P09iamVjdH0gY29udGV4dCAgICAgICBDb250ZXh0IG9iamVjdC5cbiAqIEBwYXJhbSB7P09iamVjdH0gbGVnYWN5Q29udGV4dCBMZWdhY3kgY29udGV4dCBvYmplY3QuXG4gKlxuICogQHJldHVybiB7c3RyaW5nfSBTZXJpYWxpemVkIGNoaWxkcmVuLlxuICovXG5cbmZ1bmN0aW9uIHJlbmRlckNoaWxkcmVuKGNoaWxkcmVuLCBjb250ZXh0KSB7XG4gIHZhciBsZWdhY3lDb250ZXh0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiB7fTtcbiAgdmFyIHJlc3VsdCA9ICcnO1xuICBjaGlsZHJlbiA9IGNhc3RBcnJheShjaGlsZHJlbik7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgIHZhciBjaGlsZCA9IGNoaWxkcmVuW2ldO1xuICAgIHJlc3VsdCArPSByZW5kZXJFbGVtZW50KGNoaWxkLCBjb250ZXh0LCBsZWdhY3lDb250ZXh0KTtcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG4vKipcbiAqIFJlbmRlcnMgYSBwcm9wcyBvYmplY3QgYXMgYSBzdHJpbmcgb2YgSFRNTCBhdHRyaWJ1dGVzLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBwcm9wcyBQcm9wcyBvYmplY3QuXG4gKlxuICogQHJldHVybiB7c3RyaW5nfSBBdHRyaWJ1dGVzIHN0cmluZy5cbiAqL1xuXG5cbmV4cG9ydCBmdW5jdGlvbiByZW5kZXJBdHRyaWJ1dGVzKHByb3BzKSB7XG4gIHZhciByZXN1bHQgPSAnJztcblxuICBmb3IgKHZhciBrZXkgaW4gcHJvcHMpIHtcbiAgICB2YXIgYXR0cmlidXRlID0gZ2V0Tm9ybWFsQXR0cmlidXRlTmFtZShrZXkpO1xuXG4gICAgaWYgKCFpc1ZhbGlkQXR0cmlidXRlTmFtZShhdHRyaWJ1dGUpKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICB2YXIgdmFsdWUgPSBnZXROb3JtYWxBdHRyaWJ1dGVWYWx1ZShrZXksIHByb3BzW2tleV0pOyAvLyBJZiB2YWx1ZSBpcyBub3Qgb2Ygc2VyaWFsaXplYWJsZSB0eXBlLCBza2lwLlxuXG4gICAgaWYgKCFBVFRSSUJVVEVTX1RZUEVTLmhhcyhfdHlwZW9mKHZhbHVlKSkpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH0gLy8gRG9uJ3QgcmVuZGVyIGludGVybmFsIGF0dHJpYnV0ZSBuYW1lcy5cblxuXG4gICAgaWYgKGlzSW50ZXJuYWxBdHRyaWJ1dGUoa2V5KSkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgdmFyIGlzQm9vbGVhbkF0dHJpYnV0ZSA9IEJPT0xFQU5fQVRUUklCVVRFUy5oYXMoYXR0cmlidXRlKTsgLy8gQm9vbGVhbiBhdHRyaWJ1dGUgc2hvdWxkIGJlIG9taXR0ZWQgb3V0cmlnaHQgaWYgaXRzIHZhbHVlIGlzIGZhbHNlLlxuXG4gICAgaWYgKGlzQm9vbGVhbkF0dHJpYnV0ZSAmJiB2YWx1ZSA9PT0gZmFsc2UpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIHZhciBpc01lYW5pbmdmdWxBdHRyaWJ1dGUgPSBpc0Jvb2xlYW5BdHRyaWJ1dGUgfHwgaGFzUHJlZml4KGtleSwgWydkYXRhLScsICdhcmlhLSddKSB8fCBFTlVNRVJBVEVEX0FUVFJJQlVURVMuaGFzKGF0dHJpYnV0ZSk7IC8vIE9ubHkgd3JpdGUgYm9vbGVhbiB2YWx1ZSBhcyBhdHRyaWJ1dGUgaWYgbWVhbmluZ2Z1bC5cblxuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdib29sZWFuJyAmJiAhaXNNZWFuaW5nZnVsQXR0cmlidXRlKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICByZXN1bHQgKz0gJyAnICsgYXR0cmlidXRlOyAvLyBCb29sZWFuIGF0dHJpYnV0ZXMgc2hvdWxkIHdyaXRlIGF0dHJpYnV0ZSBuYW1lLCBidXQgd2l0aG91dCB2YWx1ZS5cbiAgICAvLyBNZXJlIHByZXNlbmNlIG9mIGF0dHJpYnV0ZSBuYW1lIGlzIGVmZmVjdGl2ZSB0cnV0aGluZXNzLlxuXG4gICAgaWYgKGlzQm9vbGVhbkF0dHJpYnV0ZSkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHZhbHVlID0gZXNjYXBlQXR0cmlidXRlKHZhbHVlKTtcbiAgICB9XG5cbiAgICByZXN1bHQgKz0gJz1cIicgKyB2YWx1ZSArICdcIic7XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuLyoqXG4gKiBSZW5kZXJzIGEgc3R5bGUgb2JqZWN0IGFzIGEgc3RyaW5nIGF0dHJpYnV0ZSB2YWx1ZS5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gc3R5bGUgU3R5bGUgb2JqZWN0LlxuICpcbiAqIEByZXR1cm4ge3N0cmluZ30gU3R5bGUgYXR0cmlidXRlIHZhbHVlLlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiByZW5kZXJTdHlsZShzdHlsZSkge1xuICAvLyBPbmx5IGdlbmVyYXRlIGZyb20gb2JqZWN0LCBlLmcuIHRvbGVyYXRlIHN0cmluZyB2YWx1ZS5cbiAgaWYgKCFpc1BsYWluT2JqZWN0KHN0eWxlKSkge1xuICAgIHJldHVybiBzdHlsZTtcbiAgfVxuXG4gIHZhciByZXN1bHQ7XG5cbiAgZm9yICh2YXIgcHJvcGVydHkgaW4gc3R5bGUpIHtcbiAgICB2YXIgdmFsdWUgPSBzdHlsZVtwcm9wZXJ0eV07XG5cbiAgICBpZiAobnVsbCA9PT0gdmFsdWUgfHwgdW5kZWZpbmVkID09PSB2YWx1ZSkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgaWYgKHJlc3VsdCkge1xuICAgICAgcmVzdWx0ICs9ICc7JztcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0ID0gJyc7XG4gICAgfVxuXG4gICAgdmFyIG5vcm1hbE5hbWUgPSBnZXROb3JtYWxTdHlsZVByb3BlcnR5TmFtZShwcm9wZXJ0eSk7XG4gICAgdmFyIG5vcm1hbFZhbHVlID0gZ2V0Tm9ybWFsU3R5bGVQcm9wZXJ0eVZhbHVlKHByb3BlcnR5LCB2YWx1ZSk7XG4gICAgcmVzdWx0ICs9IG5vcm1hbE5hbWUgKyAnOicgKyBub3JtYWxWYWx1ZTtcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5leHBvcnQgZGVmYXVsdCByZW5kZXJFbGVtZW50O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2VyaWFsaXplLmpzLm1hcCIsImV4cG9ydCAqIGZyb20gJy4vcmVhY3QnO1xuZXhwb3J0ICogZnJvbSAnLi9yZWFjdC1wbGF0Zm9ybSc7XG5leHBvcnQgKiBmcm9tICcuL3V0aWxzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgcmVuZGVyVG9TdHJpbmcgfSBmcm9tICcuL3NlcmlhbGl6ZSc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIFJhd0hUTUwgfSBmcm9tICcuL3Jhdy1odG1sJztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gISFleGVjKCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0eXBlb2YgaXQgPT09ICdvYmplY3QnID8gaXQgIT09IG51bGwgOiB0eXBlb2YgaXQgPT09ICdmdW5jdGlvbic7XG59O1xuIiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbi8vIFRoYW5rJ3MgSUU4IGZvciBoaXMgZnVubnkgZGVmaW5lUHJvcGVydHlcbm1vZHVsZS5leHBvcnRzID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgJ2EnLCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfSB9KS5hICE9IDc7XG59KTtcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcbnZhciBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcblxubW9kdWxlLmV4cG9ydHMgPSBERVNDUklQVE9SUyA/IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIGRlZmluZVByb3BlcnR5TW9kdWxlLmYob2JqZWN0LCBrZXksIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigxLCB2YWx1ZSkpO1xufSA6IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbiAgcmV0dXJuIG9iamVjdDtcbn07XG4iLCJ2YXIgaGFzT3duUHJvcGVydHkgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIGtleSkge1xuICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChpdCwga2V5KTtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJykuZjtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hpZGUnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZScpO1xudmFyIHNldEdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtZ2xvYmFsJyk7XG52YXIgY29weUNvbnN0cnVjdG9yUHJvcGVydGllcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jb3B5LWNvbnN0cnVjdG9yLXByb3BlcnRpZXMnKTtcbnZhciBpc0ZvcmNlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1mb3JjZWQnKTtcblxuLypcbiAgb3B0aW9ucy50YXJnZXQgICAgICAtIG5hbWUgb2YgdGhlIHRhcmdldCBvYmplY3RcbiAgb3B0aW9ucy5nbG9iYWwgICAgICAtIHRhcmdldCBpcyB0aGUgZ2xvYmFsIG9iamVjdFxuICBvcHRpb25zLnN0YXQgICAgICAgIC0gZXhwb3J0IGFzIHN0YXRpYyBtZXRob2RzIG9mIHRhcmdldFxuICBvcHRpb25zLnByb3RvICAgICAgIC0gZXhwb3J0IGFzIHByb3RvdHlwZSBtZXRob2RzIG9mIHRhcmdldFxuICBvcHRpb25zLnJlYWwgICAgICAgIC0gcmVhbCBwcm90b3R5cGUgbWV0aG9kIGZvciB0aGUgYHB1cmVgIHZlcnNpb25cbiAgb3B0aW9ucy5mb3JjZWQgICAgICAtIGV4cG9ydCBldmVuIGlmIHRoZSBuYXRpdmUgZmVhdHVyZSBpcyBhdmFpbGFibGVcbiAgb3B0aW9ucy5iaW5kICAgICAgICAtIGJpbmQgbWV0aG9kcyB0byB0aGUgdGFyZ2V0LCByZXF1aXJlZCBmb3IgdGhlIGBwdXJlYCB2ZXJzaW9uXG4gIG9wdGlvbnMud3JhcCAgICAgICAgLSB3cmFwIGNvbnN0cnVjdG9ycyB0byBwcmV2ZW50aW5nIGdsb2JhbCBwb2xsdXRpb24sIHJlcXVpcmVkIGZvciB0aGUgYHB1cmVgIHZlcnNpb25cbiAgb3B0aW9ucy51bnNhZmUgICAgICAtIHVzZSB0aGUgc2ltcGxlIGFzc2lnbm1lbnQgb2YgcHJvcGVydHkgaW5zdGVhZCBvZiBkZWxldGUgKyBkZWZpbmVQcm9wZXJ0eVxuICBvcHRpb25zLnNoYW0gICAgICAgIC0gYWRkIGEgZmxhZyB0byBub3QgY29tcGxldGVseSBmdWxsIHBvbHlmaWxsc1xuICBvcHRpb25zLmVudW1lcmFibGUgIC0gZXhwb3J0IGFzIGVudW1lcmFibGUgcHJvcGVydHlcbiAgb3B0aW9ucy5ub1RhcmdldEdldCAtIHByZXZlbnQgY2FsbGluZyBhIGdldHRlciBvbiB0YXJnZXRcbiovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvcHRpb25zLCBzb3VyY2UpIHtcbiAgdmFyIFRBUkdFVCA9IG9wdGlvbnMudGFyZ2V0O1xuICB2YXIgR0xPQkFMID0gb3B0aW9ucy5nbG9iYWw7XG4gIHZhciBTVEFUSUMgPSBvcHRpb25zLnN0YXQ7XG4gIHZhciBGT1JDRUQsIHRhcmdldCwga2V5LCB0YXJnZXRQcm9wZXJ0eSwgc291cmNlUHJvcGVydHksIGRlc2NyaXB0b3I7XG4gIGlmIChHTE9CQUwpIHtcbiAgICB0YXJnZXQgPSBnbG9iYWw7XG4gIH0gZWxzZSBpZiAoU1RBVElDKSB7XG4gICAgdGFyZ2V0ID0gZ2xvYmFsW1RBUkdFVF0gfHwgc2V0R2xvYmFsKFRBUkdFVCwge30pO1xuICB9IGVsc2Uge1xuICAgIHRhcmdldCA9IChnbG9iYWxbVEFSR0VUXSB8fCB7fSkucHJvdG90eXBlO1xuICB9XG4gIGlmICh0YXJnZXQpIGZvciAoa2V5IGluIHNvdXJjZSkge1xuICAgIHNvdXJjZVByb3BlcnR5ID0gc291cmNlW2tleV07XG4gICAgaWYgKG9wdGlvbnMubm9UYXJnZXRHZXQpIHtcbiAgICAgIGRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpO1xuICAgICAgdGFyZ2V0UHJvcGVydHkgPSBkZXNjcmlwdG9yICYmIGRlc2NyaXB0b3IudmFsdWU7XG4gICAgfSBlbHNlIHRhcmdldFByb3BlcnR5ID0gdGFyZ2V0W2tleV07XG4gICAgRk9SQ0VEID0gaXNGb3JjZWQoR0xPQkFMID8ga2V5IDogVEFSR0VUICsgKFNUQVRJQyA/ICcuJyA6ICcjJykgKyBrZXksIG9wdGlvbnMuZm9yY2VkKTtcbiAgICAvLyBjb250YWluZWQgaW4gdGFyZ2V0XG4gICAgaWYgKCFGT1JDRUQgJiYgdGFyZ2V0UHJvcGVydHkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKHR5cGVvZiBzb3VyY2VQcm9wZXJ0eSA9PT0gdHlwZW9mIHRhcmdldFByb3BlcnR5KSBjb250aW51ZTtcbiAgICAgIGNvcHlDb25zdHJ1Y3RvclByb3BlcnRpZXMoc291cmNlUHJvcGVydHksIHRhcmdldFByb3BlcnR5KTtcbiAgICB9XG4gICAgLy8gYWRkIGEgZmxhZyB0byBub3QgY29tcGxldGVseSBmdWxsIHBvbHlmaWxsc1xuICAgIGlmIChvcHRpb25zLnNoYW0gfHwgKHRhcmdldFByb3BlcnR5ICYmIHRhcmdldFByb3BlcnR5LnNoYW0pKSB7XG4gICAgICBoaWRlKHNvdXJjZVByb3BlcnR5LCAnc2hhbScsIHRydWUpO1xuICAgIH1cbiAgICAvLyBleHRlbmQgZ2xvYmFsXG4gICAgcmVkZWZpbmUodGFyZ2V0LCBrZXksIHNvdXJjZVByb3BlcnR5LCBvcHRpb25zKTtcbiAgfVxufTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKCFpc09iamVjdChpdCkpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IoU3RyaW5nKGl0KSArICcgaXMgbm90IGFuIG9iamVjdCcpO1xuICB9IHJldHVybiBpdDtcbn07XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7XG4gIGlmIChrZXkgaW4gb2JqKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWVcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBvYmpba2V5XSA9IHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIG9iajtcbn0iLCJpbXBvcnQgZGVmaW5lUHJvcGVydHkgZnJvbSBcIi4vZGVmaW5lUHJvcGVydHlcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7XG4gIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307XG4gICAgdmFyIG93bktleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpO1xuXG4gICAgaWYgKHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBvd25LZXlzID0gb3duS2V5cy5jb25jYXQoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2UpLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7XG4gICAgICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwgc3ltKS5lbnVtZXJhYmxlO1xuICAgICAgfSkpO1xuICAgIH1cblxuICAgIG93bktleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICBkZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn0iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHNldEdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtZ2xvYmFsJyk7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG5cbnZhciBTSEFSRUQgPSAnX19jb3JlLWpzX3NoYXJlZF9fJztcbnZhciBzdG9yZSA9IGdsb2JhbFtTSEFSRURdIHx8IHNldEdsb2JhbChTSEFSRUQsIHt9KTtcblxuKG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIHN0b3JlW2tleV0gfHwgKHN0b3JlW2tleV0gPSB2YWx1ZSAhPT0gdW5kZWZpbmVkID8gdmFsdWUgOiB7fSk7XG59KSgndmVyc2lvbnMnLCBbXSkucHVzaCh7XG4gIHZlcnNpb246ICczLjIuMScsXG4gIG1vZGU6IElTX1BVUkUgPyAncHVyZScgOiAnZ2xvYmFsJyxcbiAgY29weXJpZ2h0OiAnwqkgMjAxOSBEZW5pcyBQdXNoa2FyZXYgKHpsb2lyb2NrLnJ1KSdcbn0pO1xuIiwiLy8gYFJlcXVpcmVPYmplY3RDb2VyY2libGVgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcmVxdWlyZW9iamVjdGNvZXJjaWJsZVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKGl0ID09IHVuZGVmaW5lZCkgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY2FsbCBtZXRob2Qgb24gXCIgKyBpdCk7XG4gIHJldHVybiBpdDtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdWlkJyk7XG52YXIgTkFUSVZFX1NZTUJPTCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uYXRpdmUtc3ltYm9sJyk7XG5cbnZhciBTeW1ib2wgPSBnbG9iYWwuU3ltYm9sO1xudmFyIHN0b3JlID0gc2hhcmVkKCd3a3MnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4gc3RvcmVbbmFtZV0gfHwgKHN0b3JlW25hbWVdID0gTkFUSVZFX1NZTUJPTCAmJiBTeW1ib2xbbmFtZV1cbiAgICB8fCAoTkFUSVZFX1NZTUJPTCA/IFN5bWJvbCA6IHVpZCkoJ1N5bWJvbC4nICsgbmFtZSkpO1xufTtcbiIsIi8vIHRvT2JqZWN0IHdpdGggZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBzdHJpbmdzXG52YXIgSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbmRleGVkLW9iamVjdCcpO1xudmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBJbmRleGVkT2JqZWN0KHJlcXVpcmVPYmplY3RDb2VyY2libGUoaXQpKTtcbn07XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBJRThfRE9NX0RFRklORSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pZTgtZG9tLWRlZmluZScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXByaW1pdGl2ZScpO1xuXG52YXIgbmF0aXZlRGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG5cbi8vIGBPYmplY3QuZGVmaW5lUHJvcGVydHlgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LmRlZmluZXByb3BlcnR5XG5leHBvcnRzLmYgPSBERVNDUklQVE9SUyA/IG5hdGl2ZURlZmluZVByb3BlcnR5IDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcykge1xuICBhbk9iamVjdChPKTtcbiAgUCA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICBhbk9iamVjdChBdHRyaWJ1dGVzKTtcbiAgaWYgKElFOF9ET01fREVGSU5FKSB0cnkge1xuICAgIHJldHVybiBuYXRpdmVEZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuICBpZiAoJ2dldCcgaW4gQXR0cmlidXRlcyB8fCAnc2V0JyBpbiBBdHRyaWJ1dGVzKSB0aHJvdyBUeXBlRXJyb3IoJ0FjY2Vzc29ycyBub3Qgc3VwcG9ydGVkJyk7XG4gIGlmICgndmFsdWUnIGluIEF0dHJpYnV0ZXMpIE9bUF0gPSBBdHRyaWJ1dGVzLnZhbHVlO1xuICByZXR1cm4gTztcbn07XG4iLCJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWludGVnZXInKTtcblxudmFyIG1pbiA9IE1hdGgubWluO1xuXG4vLyBgVG9MZW5ndGhgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtdG9sZW5ndGhcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIHJldHVybiBhcmd1bWVudCA+IDAgPyBtaW4odG9JbnRlZ2VyKGFyZ3VtZW50KSwgMHgxRkZGRkZGRkZGRkZGRikgOiAwOyAvLyAyICoqIDUzIC0gMSA9PSA5MDA3MTk5MjU0NzQwOTkxXG59O1xuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogTG9kYXNoIDxodHRwczovL2xvZGFzaC5jb20vPlxuICogQ29weXJpZ2h0IE9wZW5KUyBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnMgPGh0dHBzOi8vb3BlbmpzZi5vcmcvPlxuICogUmVsZWFzZWQgdW5kZXIgTUlUIGxpY2Vuc2UgPGh0dHBzOi8vbG9kYXNoLmNvbS9saWNlbnNlPlxuICogQmFzZWQgb24gVW5kZXJzY29yZS5qcyAxLjguMyA8aHR0cDovL3VuZGVyc2NvcmVqcy5vcmcvTElDRU5TRT5cbiAqIENvcHlyaWdodCBKZXJlbXkgQXNoa2VuYXMsIERvY3VtZW50Q2xvdWQgYW5kIEludmVzdGlnYXRpdmUgUmVwb3J0ZXJzICYgRWRpdG9yc1xuICovXG47KGZ1bmN0aW9uKCkge1xuXG4gIC8qKiBVc2VkIGFzIGEgc2FmZSByZWZlcmVuY2UgZm9yIGB1bmRlZmluZWRgIGluIHByZS1FUzUgZW52aXJvbm1lbnRzLiAqL1xuICB2YXIgdW5kZWZpbmVkO1xuXG4gIC8qKiBVc2VkIGFzIHRoZSBzZW1hbnRpYyB2ZXJzaW9uIG51bWJlci4gKi9cbiAgdmFyIFZFUlNJT04gPSAnNC4xNy4xNSc7XG5cbiAgLyoqIFVzZWQgYXMgdGhlIHNpemUgdG8gZW5hYmxlIGxhcmdlIGFycmF5IG9wdGltaXphdGlvbnMuICovXG4gIHZhciBMQVJHRV9BUlJBWV9TSVpFID0gMjAwO1xuXG4gIC8qKiBFcnJvciBtZXNzYWdlIGNvbnN0YW50cy4gKi9cbiAgdmFyIENPUkVfRVJST1JfVEVYVCA9ICdVbnN1cHBvcnRlZCBjb3JlLWpzIHVzZS4gVHJ5IGh0dHBzOi8vbnBtcy5pby9zZWFyY2g/cT1wb255ZmlsbC4nLFxuICAgICAgRlVOQ19FUlJPUl9URVhUID0gJ0V4cGVjdGVkIGEgZnVuY3Rpb24nO1xuXG4gIC8qKiBVc2VkIHRvIHN0YW5kLWluIGZvciBgdW5kZWZpbmVkYCBoYXNoIHZhbHVlcy4gKi9cbiAgdmFyIEhBU0hfVU5ERUZJTkVEID0gJ19fbG9kYXNoX2hhc2hfdW5kZWZpbmVkX18nO1xuXG4gIC8qKiBVc2VkIGFzIHRoZSBtYXhpbXVtIG1lbW9pemUgY2FjaGUgc2l6ZS4gKi9cbiAgdmFyIE1BWF9NRU1PSVpFX1NJWkUgPSA1MDA7XG5cbiAgLyoqIFVzZWQgYXMgdGhlIGludGVybmFsIGFyZ3VtZW50IHBsYWNlaG9sZGVyLiAqL1xuICB2YXIgUExBQ0VIT0xERVIgPSAnX19sb2Rhc2hfcGxhY2Vob2xkZXJfXyc7XG5cbiAgLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgY2xvbmluZy4gKi9cbiAgdmFyIENMT05FX0RFRVBfRkxBRyA9IDEsXG4gICAgICBDTE9ORV9GTEFUX0ZMQUcgPSAyLFxuICAgICAgQ0xPTkVfU1lNQk9MU19GTEFHID0gNDtcblxuICAvKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciB2YWx1ZSBjb21wYXJpc29ucy4gKi9cbiAgdmFyIENPTVBBUkVfUEFSVElBTF9GTEFHID0gMSxcbiAgICAgIENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcgPSAyO1xuXG4gIC8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIGZ1bmN0aW9uIG1ldGFkYXRhLiAqL1xuICB2YXIgV1JBUF9CSU5EX0ZMQUcgPSAxLFxuICAgICAgV1JBUF9CSU5EX0tFWV9GTEFHID0gMixcbiAgICAgIFdSQVBfQ1VSUllfQk9VTkRfRkxBRyA9IDQsXG4gICAgICBXUkFQX0NVUlJZX0ZMQUcgPSA4LFxuICAgICAgV1JBUF9DVVJSWV9SSUdIVF9GTEFHID0gMTYsXG4gICAgICBXUkFQX1BBUlRJQUxfRkxBRyA9IDMyLFxuICAgICAgV1JBUF9QQVJUSUFMX1JJR0hUX0ZMQUcgPSA2NCxcbiAgICAgIFdSQVBfQVJZX0ZMQUcgPSAxMjgsXG4gICAgICBXUkFQX1JFQVJHX0ZMQUcgPSAyNTYsXG4gICAgICBXUkFQX0ZMSVBfRkxBRyA9IDUxMjtcblxuICAvKiogVXNlZCBhcyBkZWZhdWx0IG9wdGlvbnMgZm9yIGBfLnRydW5jYXRlYC4gKi9cbiAgdmFyIERFRkFVTFRfVFJVTkNfTEVOR1RIID0gMzAsXG4gICAgICBERUZBVUxUX1RSVU5DX09NSVNTSU9OID0gJy4uLic7XG5cbiAgLyoqIFVzZWQgdG8gZGV0ZWN0IGhvdCBmdW5jdGlvbnMgYnkgbnVtYmVyIG9mIGNhbGxzIHdpdGhpbiBhIHNwYW4gb2YgbWlsbGlzZWNvbmRzLiAqL1xuICB2YXIgSE9UX0NPVU5UID0gODAwLFxuICAgICAgSE9UX1NQQU4gPSAxNjtcblxuICAvKiogVXNlZCB0byBpbmRpY2F0ZSB0aGUgdHlwZSBvZiBsYXp5IGl0ZXJhdGVlcy4gKi9cbiAgdmFyIExBWllfRklMVEVSX0ZMQUcgPSAxLFxuICAgICAgTEFaWV9NQVBfRkxBRyA9IDIsXG4gICAgICBMQVpZX1dISUxFX0ZMQUcgPSAzO1xuXG4gIC8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL1xuICB2YXIgSU5GSU5JVFkgPSAxIC8gMCxcbiAgICAgIE1BWF9TQUZFX0lOVEVHRVIgPSA5MDA3MTk5MjU0NzQwOTkxLFxuICAgICAgTUFYX0lOVEVHRVIgPSAxLjc5NzY5MzEzNDg2MjMxNTdlKzMwOCxcbiAgICAgIE5BTiA9IDAgLyAwO1xuXG4gIC8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHRoZSBtYXhpbXVtIGxlbmd0aCBhbmQgaW5kZXggb2YgYW4gYXJyYXkuICovXG4gIHZhciBNQVhfQVJSQVlfTEVOR1RIID0gNDI5NDk2NzI5NSxcbiAgICAgIE1BWF9BUlJBWV9JTkRFWCA9IE1BWF9BUlJBWV9MRU5HVEggLSAxLFxuICAgICAgSEFMRl9NQVhfQVJSQVlfTEVOR1RIID0gTUFYX0FSUkFZX0xFTkdUSCA+Pj4gMTtcblxuICAvKiogVXNlZCB0byBhc3NvY2lhdGUgd3JhcCBtZXRob2RzIHdpdGggdGhlaXIgYml0IGZsYWdzLiAqL1xuICB2YXIgd3JhcEZsYWdzID0gW1xuICAgIFsnYXJ5JywgV1JBUF9BUllfRkxBR10sXG4gICAgWydiaW5kJywgV1JBUF9CSU5EX0ZMQUddLFxuICAgIFsnYmluZEtleScsIFdSQVBfQklORF9LRVlfRkxBR10sXG4gICAgWydjdXJyeScsIFdSQVBfQ1VSUllfRkxBR10sXG4gICAgWydjdXJyeVJpZ2h0JywgV1JBUF9DVVJSWV9SSUdIVF9GTEFHXSxcbiAgICBbJ2ZsaXAnLCBXUkFQX0ZMSVBfRkxBR10sXG4gICAgWydwYXJ0aWFsJywgV1JBUF9QQVJUSUFMX0ZMQUddLFxuICAgIFsncGFydGlhbFJpZ2h0JywgV1JBUF9QQVJUSUFMX1JJR0hUX0ZMQUddLFxuICAgIFsncmVhcmcnLCBXUkFQX1JFQVJHX0ZMQUddXG4gIF07XG5cbiAgLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xuICB2YXIgYXJnc1RhZyA9ICdbb2JqZWN0IEFyZ3VtZW50c10nLFxuICAgICAgYXJyYXlUYWcgPSAnW29iamVjdCBBcnJheV0nLFxuICAgICAgYXN5bmNUYWcgPSAnW29iamVjdCBBc3luY0Z1bmN0aW9uXScsXG4gICAgICBib29sVGFnID0gJ1tvYmplY3QgQm9vbGVhbl0nLFxuICAgICAgZGF0ZVRhZyA9ICdbb2JqZWN0IERhdGVdJyxcbiAgICAgIGRvbUV4Y1RhZyA9ICdbb2JqZWN0IERPTUV4Y2VwdGlvbl0nLFxuICAgICAgZXJyb3JUYWcgPSAnW29iamVjdCBFcnJvcl0nLFxuICAgICAgZnVuY1RhZyA9ICdbb2JqZWN0IEZ1bmN0aW9uXScsXG4gICAgICBnZW5UYWcgPSAnW29iamVjdCBHZW5lcmF0b3JGdW5jdGlvbl0nLFxuICAgICAgbWFwVGFnID0gJ1tvYmplY3QgTWFwXScsXG4gICAgICBudW1iZXJUYWcgPSAnW29iamVjdCBOdW1iZXJdJyxcbiAgICAgIG51bGxUYWcgPSAnW29iamVjdCBOdWxsXScsXG4gICAgICBvYmplY3RUYWcgPSAnW29iamVjdCBPYmplY3RdJyxcbiAgICAgIHByb21pc2VUYWcgPSAnW29iamVjdCBQcm9taXNlXScsXG4gICAgICBwcm94eVRhZyA9ICdbb2JqZWN0IFByb3h5XScsXG4gICAgICByZWdleHBUYWcgPSAnW29iamVjdCBSZWdFeHBdJyxcbiAgICAgIHNldFRhZyA9ICdbb2JqZWN0IFNldF0nLFxuICAgICAgc3RyaW5nVGFnID0gJ1tvYmplY3QgU3RyaW5nXScsXG4gICAgICBzeW1ib2xUYWcgPSAnW29iamVjdCBTeW1ib2xdJyxcbiAgICAgIHVuZGVmaW5lZFRhZyA9ICdbb2JqZWN0IFVuZGVmaW5lZF0nLFxuICAgICAgd2Vha01hcFRhZyA9ICdbb2JqZWN0IFdlYWtNYXBdJyxcbiAgICAgIHdlYWtTZXRUYWcgPSAnW29iamVjdCBXZWFrU2V0XSc7XG5cbiAgdmFyIGFycmF5QnVmZmVyVGFnID0gJ1tvYmplY3QgQXJyYXlCdWZmZXJdJyxcbiAgICAgIGRhdGFWaWV3VGFnID0gJ1tvYmplY3QgRGF0YVZpZXddJyxcbiAgICAgIGZsb2F0MzJUYWcgPSAnW29iamVjdCBGbG9hdDMyQXJyYXldJyxcbiAgICAgIGZsb2F0NjRUYWcgPSAnW29iamVjdCBGbG9hdDY0QXJyYXldJyxcbiAgICAgIGludDhUYWcgPSAnW29iamVjdCBJbnQ4QXJyYXldJyxcbiAgICAgIGludDE2VGFnID0gJ1tvYmplY3QgSW50MTZBcnJheV0nLFxuICAgICAgaW50MzJUYWcgPSAnW29iamVjdCBJbnQzMkFycmF5XScsXG4gICAgICB1aW50OFRhZyA9ICdbb2JqZWN0IFVpbnQ4QXJyYXldJyxcbiAgICAgIHVpbnQ4Q2xhbXBlZFRhZyA9ICdbb2JqZWN0IFVpbnQ4Q2xhbXBlZEFycmF5XScsXG4gICAgICB1aW50MTZUYWcgPSAnW29iamVjdCBVaW50MTZBcnJheV0nLFxuICAgICAgdWludDMyVGFnID0gJ1tvYmplY3QgVWludDMyQXJyYXldJztcblxuICAvKiogVXNlZCB0byBtYXRjaCBlbXB0eSBzdHJpbmcgbGl0ZXJhbHMgaW4gY29tcGlsZWQgdGVtcGxhdGUgc291cmNlLiAqL1xuICB2YXIgcmVFbXB0eVN0cmluZ0xlYWRpbmcgPSAvXFxiX19wIFxcKz0gJyc7L2csXG4gICAgICByZUVtcHR5U3RyaW5nTWlkZGxlID0gL1xcYihfX3AgXFwrPSkgJycgXFwrL2csXG4gICAgICByZUVtcHR5U3RyaW5nVHJhaWxpbmcgPSAvKF9fZVxcKC4qP1xcKXxcXGJfX3RcXCkpIFxcK1xcbicnOy9nO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIEhUTUwgZW50aXRpZXMgYW5kIEhUTUwgY2hhcmFjdGVycy4gKi9cbiAgdmFyIHJlRXNjYXBlZEh0bWwgPSAvJig/OmFtcHxsdHxndHxxdW90fCMzOSk7L2csXG4gICAgICByZVVuZXNjYXBlZEh0bWwgPSAvWyY8PlwiJ10vZyxcbiAgICAgIHJlSGFzRXNjYXBlZEh0bWwgPSBSZWdFeHAocmVFc2NhcGVkSHRtbC5zb3VyY2UpLFxuICAgICAgcmVIYXNVbmVzY2FwZWRIdG1sID0gUmVnRXhwKHJlVW5lc2NhcGVkSHRtbC5zb3VyY2UpO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIHRlbXBsYXRlIGRlbGltaXRlcnMuICovXG4gIHZhciByZUVzY2FwZSA9IC88JS0oW1xcc1xcU10rPyklPi9nLFxuICAgICAgcmVFdmFsdWF0ZSA9IC88JShbXFxzXFxTXSs/KSU+L2csXG4gICAgICByZUludGVycG9sYXRlID0gLzwlPShbXFxzXFxTXSs/KSU+L2c7XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggcHJvcGVydHkgbmFtZXMgd2l0aGluIHByb3BlcnR5IHBhdGhzLiAqL1xuICB2YXIgcmVJc0RlZXBQcm9wID0gL1xcLnxcXFsoPzpbXltcXF1dKnwoW1wiJ10pKD86KD8hXFwxKVteXFxcXF18XFxcXC4pKj9cXDEpXFxdLyxcbiAgICAgIHJlSXNQbGFpblByb3AgPSAvXlxcdyokLyxcbiAgICAgIHJlUHJvcE5hbWUgPSAvW14uW1xcXV0rfFxcWyg/OigtP1xcZCsoPzpcXC5cXGQrKT8pfChbXCInXSkoKD86KD8hXFwyKVteXFxcXF18XFxcXC4pKj8pXFwyKVxcXXwoPz0oPzpcXC58XFxbXFxdKSg/OlxcLnxcXFtcXF18JCkpL2c7XG5cbiAgLyoqXG4gICAqIFVzZWQgdG8gbWF0Y2ggYFJlZ0V4cGBcbiAgICogW3N5bnRheCBjaGFyYWN0ZXJzXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1wYXR0ZXJucykuXG4gICAqL1xuICB2YXIgcmVSZWdFeHBDaGFyID0gL1tcXFxcXiQuKis/KClbXFxde318XS9nLFxuICAgICAgcmVIYXNSZWdFeHBDaGFyID0gUmVnRXhwKHJlUmVnRXhwQ2hhci5zb3VyY2UpO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIGxlYWRpbmcgYW5kIHRyYWlsaW5nIHdoaXRlc3BhY2UuICovXG4gIHZhciByZVRyaW0gPSAvXlxccyt8XFxzKyQvZyxcbiAgICAgIHJlVHJpbVN0YXJ0ID0gL15cXHMrLyxcbiAgICAgIHJlVHJpbUVuZCA9IC9cXHMrJC87XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggd3JhcCBkZXRhaWwgY29tbWVudHMuICovXG4gIHZhciByZVdyYXBDb21tZW50ID0gL1xceyg/OlxcblxcL1xcKiBcXFt3cmFwcGVkIHdpdGggLitcXF0gXFwqXFwvKT9cXG4/LyxcbiAgICAgIHJlV3JhcERldGFpbHMgPSAvXFx7XFxuXFwvXFwqIFxcW3dyYXBwZWQgd2l0aCAoLispXFxdIFxcKi8sXG4gICAgICByZVNwbGl0RGV0YWlscyA9IC8sPyAmIC87XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggd29yZHMgY29tcG9zZWQgb2YgYWxwaGFudW1lcmljIGNoYXJhY3RlcnMuICovXG4gIHZhciByZUFzY2lpV29yZCA9IC9bXlxceDAwLVxceDJmXFx4M2EtXFx4NDBcXHg1Yi1cXHg2MFxceDdiLVxceDdmXSsvZztcblxuICAvKiogVXNlZCB0byBtYXRjaCBiYWNrc2xhc2hlcyBpbiBwcm9wZXJ0eSBwYXRocy4gKi9cbiAgdmFyIHJlRXNjYXBlQ2hhciA9IC9cXFxcKFxcXFwpPy9nO1xuXG4gIC8qKlxuICAgKiBVc2VkIHRvIG1hdGNoXG4gICAqIFtFUyB0ZW1wbGF0ZSBkZWxpbWl0ZXJzXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy10ZW1wbGF0ZS1saXRlcmFsLWxleGljYWwtY29tcG9uZW50cykuXG4gICAqL1xuICB2YXIgcmVFc1RlbXBsYXRlID0gL1xcJFxceyhbXlxcXFx9XSooPzpcXFxcLlteXFxcXH1dKikqKVxcfS9nO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIGBSZWdFeHBgIGZsYWdzIGZyb20gdGhlaXIgY29lcmNlZCBzdHJpbmcgdmFsdWVzLiAqL1xuICB2YXIgcmVGbGFncyA9IC9cXHcqJC87XG5cbiAgLyoqIFVzZWQgdG8gZGV0ZWN0IGJhZCBzaWduZWQgaGV4YWRlY2ltYWwgc3RyaW5nIHZhbHVlcy4gKi9cbiAgdmFyIHJlSXNCYWRIZXggPSAvXlstK10weFswLTlhLWZdKyQvaTtcblxuICAvKiogVXNlZCB0byBkZXRlY3QgYmluYXJ5IHN0cmluZyB2YWx1ZXMuICovXG4gIHZhciByZUlzQmluYXJ5ID0gL14wYlswMV0rJC9pO1xuXG4gIC8qKiBVc2VkIHRvIGRldGVjdCBob3N0IGNvbnN0cnVjdG9ycyAoU2FmYXJpKS4gKi9cbiAgdmFyIHJlSXNIb3N0Q3RvciA9IC9eXFxbb2JqZWN0IC4rP0NvbnN0cnVjdG9yXFxdJC87XG5cbiAgLyoqIFVzZWQgdG8gZGV0ZWN0IG9jdGFsIHN0cmluZyB2YWx1ZXMuICovXG4gIHZhciByZUlzT2N0YWwgPSAvXjBvWzAtN10rJC9pO1xuXG4gIC8qKiBVc2VkIHRvIGRldGVjdCB1bnNpZ25lZCBpbnRlZ2VyIHZhbHVlcy4gKi9cbiAgdmFyIHJlSXNVaW50ID0gL14oPzowfFsxLTldXFxkKikkLztcblxuICAvKiogVXNlZCB0byBtYXRjaCBMYXRpbiBVbmljb2RlIGxldHRlcnMgKGV4Y2x1ZGluZyBtYXRoZW1hdGljYWwgb3BlcmF0b3JzKS4gKi9cbiAgdmFyIHJlTGF0aW4gPSAvW1xceGMwLVxceGQ2XFx4ZDgtXFx4ZjZcXHhmOC1cXHhmZlxcdTAxMDAtXFx1MDE3Zl0vZztcblxuICAvKiogVXNlZCB0byBlbnN1cmUgY2FwdHVyaW5nIG9yZGVyIG9mIHRlbXBsYXRlIGRlbGltaXRlcnMuICovXG4gIHZhciByZU5vTWF0Y2ggPSAvKCReKS87XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggdW5lc2NhcGVkIGNoYXJhY3RlcnMgaW4gY29tcGlsZWQgc3RyaW5nIGxpdGVyYWxzLiAqL1xuICB2YXIgcmVVbmVzY2FwZWRTdHJpbmcgPSAvWydcXG5cXHJcXHUyMDI4XFx1MjAyOVxcXFxdL2c7XG5cbiAgLyoqIFVzZWQgdG8gY29tcG9zZSB1bmljb2RlIGNoYXJhY3RlciBjbGFzc2VzLiAqL1xuICB2YXIgcnNBc3RyYWxSYW5nZSA9ICdcXFxcdWQ4MDAtXFxcXHVkZmZmJyxcbiAgICAgIHJzQ29tYm9NYXJrc1JhbmdlID0gJ1xcXFx1MDMwMC1cXFxcdTAzNmYnLFxuICAgICAgcmVDb21ib0hhbGZNYXJrc1JhbmdlID0gJ1xcXFx1ZmUyMC1cXFxcdWZlMmYnLFxuICAgICAgcnNDb21ib1N5bWJvbHNSYW5nZSA9ICdcXFxcdTIwZDAtXFxcXHUyMGZmJyxcbiAgICAgIHJzQ29tYm9SYW5nZSA9IHJzQ29tYm9NYXJrc1JhbmdlICsgcmVDb21ib0hhbGZNYXJrc1JhbmdlICsgcnNDb21ib1N5bWJvbHNSYW5nZSxcbiAgICAgIHJzRGluZ2JhdFJhbmdlID0gJ1xcXFx1MjcwMC1cXFxcdTI3YmYnLFxuICAgICAgcnNMb3dlclJhbmdlID0gJ2EtelxcXFx4ZGYtXFxcXHhmNlxcXFx4ZjgtXFxcXHhmZicsXG4gICAgICByc01hdGhPcFJhbmdlID0gJ1xcXFx4YWNcXFxceGIxXFxcXHhkN1xcXFx4ZjcnLFxuICAgICAgcnNOb25DaGFyUmFuZ2UgPSAnXFxcXHgwMC1cXFxceDJmXFxcXHgzYS1cXFxceDQwXFxcXHg1Yi1cXFxceDYwXFxcXHg3Yi1cXFxceGJmJyxcbiAgICAgIHJzUHVuY3R1YXRpb25SYW5nZSA9ICdcXFxcdTIwMDAtXFxcXHUyMDZmJyxcbiAgICAgIHJzU3BhY2VSYW5nZSA9ICcgXFxcXHRcXFxceDBiXFxcXGZcXFxceGEwXFxcXHVmZWZmXFxcXG5cXFxcclxcXFx1MjAyOFxcXFx1MjAyOVxcXFx1MTY4MFxcXFx1MTgwZVxcXFx1MjAwMFxcXFx1MjAwMVxcXFx1MjAwMlxcXFx1MjAwM1xcXFx1MjAwNFxcXFx1MjAwNVxcXFx1MjAwNlxcXFx1MjAwN1xcXFx1MjAwOFxcXFx1MjAwOVxcXFx1MjAwYVxcXFx1MjAyZlxcXFx1MjA1ZlxcXFx1MzAwMCcsXG4gICAgICByc1VwcGVyUmFuZ2UgPSAnQS1aXFxcXHhjMC1cXFxceGQ2XFxcXHhkOC1cXFxceGRlJyxcbiAgICAgIHJzVmFyUmFuZ2UgPSAnXFxcXHVmZTBlXFxcXHVmZTBmJyxcbiAgICAgIHJzQnJlYWtSYW5nZSA9IHJzTWF0aE9wUmFuZ2UgKyByc05vbkNoYXJSYW5nZSArIHJzUHVuY3R1YXRpb25SYW5nZSArIHJzU3BhY2VSYW5nZTtcblxuICAvKiogVXNlZCB0byBjb21wb3NlIHVuaWNvZGUgY2FwdHVyZSBncm91cHMuICovXG4gIHZhciByc0Fwb3MgPSBcIlsnXFx1MjAxOV1cIixcbiAgICAgIHJzQXN0cmFsID0gJ1snICsgcnNBc3RyYWxSYW5nZSArICddJyxcbiAgICAgIHJzQnJlYWsgPSAnWycgKyByc0JyZWFrUmFuZ2UgKyAnXScsXG4gICAgICByc0NvbWJvID0gJ1snICsgcnNDb21ib1JhbmdlICsgJ10nLFxuICAgICAgcnNEaWdpdHMgPSAnXFxcXGQrJyxcbiAgICAgIHJzRGluZ2JhdCA9ICdbJyArIHJzRGluZ2JhdFJhbmdlICsgJ10nLFxuICAgICAgcnNMb3dlciA9ICdbJyArIHJzTG93ZXJSYW5nZSArICddJyxcbiAgICAgIHJzTWlzYyA9ICdbXicgKyByc0FzdHJhbFJhbmdlICsgcnNCcmVha1JhbmdlICsgcnNEaWdpdHMgKyByc0RpbmdiYXRSYW5nZSArIHJzTG93ZXJSYW5nZSArIHJzVXBwZXJSYW5nZSArICddJyxcbiAgICAgIHJzRml0eiA9ICdcXFxcdWQ4M2NbXFxcXHVkZmZiLVxcXFx1ZGZmZl0nLFxuICAgICAgcnNNb2RpZmllciA9ICcoPzonICsgcnNDb21ibyArICd8JyArIHJzRml0eiArICcpJyxcbiAgICAgIHJzTm9uQXN0cmFsID0gJ1teJyArIHJzQXN0cmFsUmFuZ2UgKyAnXScsXG4gICAgICByc1JlZ2lvbmFsID0gJyg/OlxcXFx1ZDgzY1tcXFxcdWRkZTYtXFxcXHVkZGZmXSl7Mn0nLFxuICAgICAgcnNTdXJyUGFpciA9ICdbXFxcXHVkODAwLVxcXFx1ZGJmZl1bXFxcXHVkYzAwLVxcXFx1ZGZmZl0nLFxuICAgICAgcnNVcHBlciA9ICdbJyArIHJzVXBwZXJSYW5nZSArICddJyxcbiAgICAgIHJzWldKID0gJ1xcXFx1MjAwZCc7XG5cbiAgLyoqIFVzZWQgdG8gY29tcG9zZSB1bmljb2RlIHJlZ2V4ZXMuICovXG4gIHZhciByc01pc2NMb3dlciA9ICcoPzonICsgcnNMb3dlciArICd8JyArIHJzTWlzYyArICcpJyxcbiAgICAgIHJzTWlzY1VwcGVyID0gJyg/OicgKyByc1VwcGVyICsgJ3wnICsgcnNNaXNjICsgJyknLFxuICAgICAgcnNPcHRDb250ckxvd2VyID0gJyg/OicgKyByc0Fwb3MgKyAnKD86ZHxsbHxtfHJlfHN8dHx2ZSkpPycsXG4gICAgICByc09wdENvbnRyVXBwZXIgPSAnKD86JyArIHJzQXBvcyArICcoPzpEfExMfE18UkV8U3xUfFZFKSk/JyxcbiAgICAgIHJlT3B0TW9kID0gcnNNb2RpZmllciArICc/JyxcbiAgICAgIHJzT3B0VmFyID0gJ1snICsgcnNWYXJSYW5nZSArICddPycsXG4gICAgICByc09wdEpvaW4gPSAnKD86JyArIHJzWldKICsgJyg/OicgKyBbcnNOb25Bc3RyYWwsIHJzUmVnaW9uYWwsIHJzU3VyclBhaXJdLmpvaW4oJ3wnKSArICcpJyArIHJzT3B0VmFyICsgcmVPcHRNb2QgKyAnKSonLFxuICAgICAgcnNPcmRMb3dlciA9ICdcXFxcZCooPzoxc3R8Mm5kfDNyZHwoPyFbMTIzXSlcXFxcZHRoKSg/PVxcXFxifFtBLVpfXSknLFxuICAgICAgcnNPcmRVcHBlciA9ICdcXFxcZCooPzoxU1R8Mk5EfDNSRHwoPyFbMTIzXSlcXFxcZFRIKSg/PVxcXFxifFthLXpfXSknLFxuICAgICAgcnNTZXEgPSByc09wdFZhciArIHJlT3B0TW9kICsgcnNPcHRKb2luLFxuICAgICAgcnNFbW9qaSA9ICcoPzonICsgW3JzRGluZ2JhdCwgcnNSZWdpb25hbCwgcnNTdXJyUGFpcl0uam9pbignfCcpICsgJyknICsgcnNTZXEsXG4gICAgICByc1N5bWJvbCA9ICcoPzonICsgW3JzTm9uQXN0cmFsICsgcnNDb21ibyArICc/JywgcnNDb21ibywgcnNSZWdpb25hbCwgcnNTdXJyUGFpciwgcnNBc3RyYWxdLmpvaW4oJ3wnKSArICcpJztcblxuICAvKiogVXNlZCB0byBtYXRjaCBhcG9zdHJvcGhlcy4gKi9cbiAgdmFyIHJlQXBvcyA9IFJlZ0V4cChyc0Fwb3MsICdnJyk7XG5cbiAgLyoqXG4gICAqIFVzZWQgdG8gbWF0Y2ggW2NvbWJpbmluZyBkaWFjcml0aWNhbCBtYXJrc10oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ29tYmluaW5nX0RpYWNyaXRpY2FsX01hcmtzKSBhbmRcbiAgICogW2NvbWJpbmluZyBkaWFjcml0aWNhbCBtYXJrcyBmb3Igc3ltYm9sc10oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ29tYmluaW5nX0RpYWNyaXRpY2FsX01hcmtzX2Zvcl9TeW1ib2xzKS5cbiAgICovXG4gIHZhciByZUNvbWJvTWFyayA9IFJlZ0V4cChyc0NvbWJvLCAnZycpO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIFtzdHJpbmcgc3ltYm9sc10oaHR0cHM6Ly9tYXRoaWFzYnluZW5zLmJlL25vdGVzL2phdmFzY3JpcHQtdW5pY29kZSkuICovXG4gIHZhciByZVVuaWNvZGUgPSBSZWdFeHAocnNGaXR6ICsgJyg/PScgKyByc0ZpdHogKyAnKXwnICsgcnNTeW1ib2wgKyByc1NlcSwgJ2cnKTtcblxuICAvKiogVXNlZCB0byBtYXRjaCBjb21wbGV4IG9yIGNvbXBvdW5kIHdvcmRzLiAqL1xuICB2YXIgcmVVbmljb2RlV29yZCA9IFJlZ0V4cChbXG4gICAgcnNVcHBlciArICc/JyArIHJzTG93ZXIgKyAnKycgKyByc09wdENvbnRyTG93ZXIgKyAnKD89JyArIFtyc0JyZWFrLCByc1VwcGVyLCAnJCddLmpvaW4oJ3wnKSArICcpJyxcbiAgICByc01pc2NVcHBlciArICcrJyArIHJzT3B0Q29udHJVcHBlciArICcoPz0nICsgW3JzQnJlYWssIHJzVXBwZXIgKyByc01pc2NMb3dlciwgJyQnXS5qb2luKCd8JykgKyAnKScsXG4gICAgcnNVcHBlciArICc/JyArIHJzTWlzY0xvd2VyICsgJysnICsgcnNPcHRDb250ckxvd2VyLFxuICAgIHJzVXBwZXIgKyAnKycgKyByc09wdENvbnRyVXBwZXIsXG4gICAgcnNPcmRVcHBlcixcbiAgICByc09yZExvd2VyLFxuICAgIHJzRGlnaXRzLFxuICAgIHJzRW1vamlcbiAgXS5qb2luKCd8JyksICdnJyk7XG5cbiAgLyoqIFVzZWQgdG8gZGV0ZWN0IHN0cmluZ3Mgd2l0aCBbemVyby13aWR0aCBqb2luZXJzIG9yIGNvZGUgcG9pbnRzIGZyb20gdGhlIGFzdHJhbCBwbGFuZXNdKGh0dHA6Ly9lZXYuZWUvYmxvZy8yMDE1LzA5LzEyL2RhcmstY29ybmVycy1vZi11bmljb2RlLykuICovXG4gIHZhciByZUhhc1VuaWNvZGUgPSBSZWdFeHAoJ1snICsgcnNaV0ogKyByc0FzdHJhbFJhbmdlICArIHJzQ29tYm9SYW5nZSArIHJzVmFyUmFuZ2UgKyAnXScpO1xuXG4gIC8qKiBVc2VkIHRvIGRldGVjdCBzdHJpbmdzIHRoYXQgbmVlZCBhIG1vcmUgcm9idXN0IHJlZ2V4cCB0byBtYXRjaCB3b3Jkcy4gKi9cbiAgdmFyIHJlSGFzVW5pY29kZVdvcmQgPSAvW2Etel1bQS1aXXxbQS1aXXsyfVthLXpdfFswLTldW2EtekEtWl18W2EtekEtWl1bMC05XXxbXmEtekEtWjAtOSBdLztcblxuICAvKiogVXNlZCB0byBhc3NpZ24gZGVmYXVsdCBgY29udGV4dGAgb2JqZWN0IHByb3BlcnRpZXMuICovXG4gIHZhciBjb250ZXh0UHJvcHMgPSBbXG4gICAgJ0FycmF5JywgJ0J1ZmZlcicsICdEYXRhVmlldycsICdEYXRlJywgJ0Vycm9yJywgJ0Zsb2F0MzJBcnJheScsICdGbG9hdDY0QXJyYXknLFxuICAgICdGdW5jdGlvbicsICdJbnQ4QXJyYXknLCAnSW50MTZBcnJheScsICdJbnQzMkFycmF5JywgJ01hcCcsICdNYXRoJywgJ09iamVjdCcsXG4gICAgJ1Byb21pc2UnLCAnUmVnRXhwJywgJ1NldCcsICdTdHJpbmcnLCAnU3ltYm9sJywgJ1R5cGVFcnJvcicsICdVaW50OEFycmF5JyxcbiAgICAnVWludDhDbGFtcGVkQXJyYXknLCAnVWludDE2QXJyYXknLCAnVWludDMyQXJyYXknLCAnV2Vha01hcCcsXG4gICAgJ18nLCAnY2xlYXJUaW1lb3V0JywgJ2lzRmluaXRlJywgJ3BhcnNlSW50JywgJ3NldFRpbWVvdXQnXG4gIF07XG5cbiAgLyoqIFVzZWQgdG8gbWFrZSB0ZW1wbGF0ZSBzb3VyY2VVUkxzIGVhc2llciB0byBpZGVudGlmeS4gKi9cbiAgdmFyIHRlbXBsYXRlQ291bnRlciA9IC0xO1xuXG4gIC8qKiBVc2VkIHRvIGlkZW50aWZ5IGB0b1N0cmluZ1RhZ2AgdmFsdWVzIG9mIHR5cGVkIGFycmF5cy4gKi9cbiAgdmFyIHR5cGVkQXJyYXlUYWdzID0ge307XG4gIHR5cGVkQXJyYXlUYWdzW2Zsb2F0MzJUYWddID0gdHlwZWRBcnJheVRhZ3NbZmxvYXQ2NFRhZ10gPVxuICB0eXBlZEFycmF5VGFnc1tpbnQ4VGFnXSA9IHR5cGVkQXJyYXlUYWdzW2ludDE2VGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW2ludDMyVGFnXSA9IHR5cGVkQXJyYXlUYWdzW3VpbnQ4VGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW3VpbnQ4Q2xhbXBlZFRhZ10gPSB0eXBlZEFycmF5VGFnc1t1aW50MTZUYWddID1cbiAgdHlwZWRBcnJheVRhZ3NbdWludDMyVGFnXSA9IHRydWU7XG4gIHR5cGVkQXJyYXlUYWdzW2FyZ3NUYWddID0gdHlwZWRBcnJheVRhZ3NbYXJyYXlUYWddID1cbiAgdHlwZWRBcnJheVRhZ3NbYXJyYXlCdWZmZXJUYWddID0gdHlwZWRBcnJheVRhZ3NbYm9vbFRhZ10gPVxuICB0eXBlZEFycmF5VGFnc1tkYXRhVmlld1RhZ10gPSB0eXBlZEFycmF5VGFnc1tkYXRlVGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW2Vycm9yVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2Z1bmNUYWddID1cbiAgdHlwZWRBcnJheVRhZ3NbbWFwVGFnXSA9IHR5cGVkQXJyYXlUYWdzW251bWJlclRhZ10gPVxuICB0eXBlZEFycmF5VGFnc1tvYmplY3RUYWddID0gdHlwZWRBcnJheVRhZ3NbcmVnZXhwVGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW3NldFRhZ10gPSB0eXBlZEFycmF5VGFnc1tzdHJpbmdUYWddID1cbiAgdHlwZWRBcnJheVRhZ3Nbd2Vha01hcFRhZ10gPSBmYWxzZTtcblxuICAvKiogVXNlZCB0byBpZGVudGlmeSBgdG9TdHJpbmdUYWdgIHZhbHVlcyBzdXBwb3J0ZWQgYnkgYF8uY2xvbmVgLiAqL1xuICB2YXIgY2xvbmVhYmxlVGFncyA9IHt9O1xuICBjbG9uZWFibGVUYWdzW2FyZ3NUYWddID0gY2xvbmVhYmxlVGFnc1thcnJheVRhZ10gPVxuICBjbG9uZWFibGVUYWdzW2FycmF5QnVmZmVyVGFnXSA9IGNsb25lYWJsZVRhZ3NbZGF0YVZpZXdUYWddID1cbiAgY2xvbmVhYmxlVGFnc1tib29sVGFnXSA9IGNsb25lYWJsZVRhZ3NbZGF0ZVRhZ10gPVxuICBjbG9uZWFibGVUYWdzW2Zsb2F0MzJUYWddID0gY2xvbmVhYmxlVGFnc1tmbG9hdDY0VGFnXSA9XG4gIGNsb25lYWJsZVRhZ3NbaW50OFRhZ10gPSBjbG9uZWFibGVUYWdzW2ludDE2VGFnXSA9XG4gIGNsb25lYWJsZVRhZ3NbaW50MzJUYWddID0gY2xvbmVhYmxlVGFnc1ttYXBUYWddID1cbiAgY2xvbmVhYmxlVGFnc1tudW1iZXJUYWddID0gY2xvbmVhYmxlVGFnc1tvYmplY3RUYWddID1cbiAgY2xvbmVhYmxlVGFnc1tyZWdleHBUYWddID0gY2xvbmVhYmxlVGFnc1tzZXRUYWddID1cbiAgY2xvbmVhYmxlVGFnc1tzdHJpbmdUYWddID0gY2xvbmVhYmxlVGFnc1tzeW1ib2xUYWddID1cbiAgY2xvbmVhYmxlVGFnc1t1aW50OFRhZ10gPSBjbG9uZWFibGVUYWdzW3VpbnQ4Q2xhbXBlZFRhZ10gPVxuICBjbG9uZWFibGVUYWdzW3VpbnQxNlRhZ10gPSBjbG9uZWFibGVUYWdzW3VpbnQzMlRhZ10gPSB0cnVlO1xuICBjbG9uZWFibGVUYWdzW2Vycm9yVGFnXSA9IGNsb25lYWJsZVRhZ3NbZnVuY1RhZ10gPVxuICBjbG9uZWFibGVUYWdzW3dlYWtNYXBUYWddID0gZmFsc2U7XG5cbiAgLyoqIFVzZWQgdG8gbWFwIExhdGluIFVuaWNvZGUgbGV0dGVycyB0byBiYXNpYyBMYXRpbiBsZXR0ZXJzLiAqL1xuICB2YXIgZGVidXJyZWRMZXR0ZXJzID0ge1xuICAgIC8vIExhdGluLTEgU3VwcGxlbWVudCBibG9jay5cbiAgICAnXFx4YzAnOiAnQScsICAnXFx4YzEnOiAnQScsICdcXHhjMic6ICdBJywgJ1xceGMzJzogJ0EnLCAnXFx4YzQnOiAnQScsICdcXHhjNSc6ICdBJyxcbiAgICAnXFx4ZTAnOiAnYScsICAnXFx4ZTEnOiAnYScsICdcXHhlMic6ICdhJywgJ1xceGUzJzogJ2EnLCAnXFx4ZTQnOiAnYScsICdcXHhlNSc6ICdhJyxcbiAgICAnXFx4YzcnOiAnQycsICAnXFx4ZTcnOiAnYycsXG4gICAgJ1xceGQwJzogJ0QnLCAgJ1xceGYwJzogJ2QnLFxuICAgICdcXHhjOCc6ICdFJywgICdcXHhjOSc6ICdFJywgJ1xceGNhJzogJ0UnLCAnXFx4Y2InOiAnRScsXG4gICAgJ1xceGU4JzogJ2UnLCAgJ1xceGU5JzogJ2UnLCAnXFx4ZWEnOiAnZScsICdcXHhlYic6ICdlJyxcbiAgICAnXFx4Y2MnOiAnSScsICAnXFx4Y2QnOiAnSScsICdcXHhjZSc6ICdJJywgJ1xceGNmJzogJ0knLFxuICAgICdcXHhlYyc6ICdpJywgICdcXHhlZCc6ICdpJywgJ1xceGVlJzogJ2knLCAnXFx4ZWYnOiAnaScsXG4gICAgJ1xceGQxJzogJ04nLCAgJ1xceGYxJzogJ24nLFxuICAgICdcXHhkMic6ICdPJywgICdcXHhkMyc6ICdPJywgJ1xceGQ0JzogJ08nLCAnXFx4ZDUnOiAnTycsICdcXHhkNic6ICdPJywgJ1xceGQ4JzogJ08nLFxuICAgICdcXHhmMic6ICdvJywgICdcXHhmMyc6ICdvJywgJ1xceGY0JzogJ28nLCAnXFx4ZjUnOiAnbycsICdcXHhmNic6ICdvJywgJ1xceGY4JzogJ28nLFxuICAgICdcXHhkOSc6ICdVJywgICdcXHhkYSc6ICdVJywgJ1xceGRiJzogJ1UnLCAnXFx4ZGMnOiAnVScsXG4gICAgJ1xceGY5JzogJ3UnLCAgJ1xceGZhJzogJ3UnLCAnXFx4ZmInOiAndScsICdcXHhmYyc6ICd1JyxcbiAgICAnXFx4ZGQnOiAnWScsICAnXFx4ZmQnOiAneScsICdcXHhmZic6ICd5JyxcbiAgICAnXFx4YzYnOiAnQWUnLCAnXFx4ZTYnOiAnYWUnLFxuICAgICdcXHhkZSc6ICdUaCcsICdcXHhmZSc6ICd0aCcsXG4gICAgJ1xceGRmJzogJ3NzJyxcbiAgICAvLyBMYXRpbiBFeHRlbmRlZC1BIGJsb2NrLlxuICAgICdcXHUwMTAwJzogJ0EnLCAgJ1xcdTAxMDInOiAnQScsICdcXHUwMTA0JzogJ0EnLFxuICAgICdcXHUwMTAxJzogJ2EnLCAgJ1xcdTAxMDMnOiAnYScsICdcXHUwMTA1JzogJ2EnLFxuICAgICdcXHUwMTA2JzogJ0MnLCAgJ1xcdTAxMDgnOiAnQycsICdcXHUwMTBhJzogJ0MnLCAnXFx1MDEwYyc6ICdDJyxcbiAgICAnXFx1MDEwNyc6ICdjJywgICdcXHUwMTA5JzogJ2MnLCAnXFx1MDEwYic6ICdjJywgJ1xcdTAxMGQnOiAnYycsXG4gICAgJ1xcdTAxMGUnOiAnRCcsICAnXFx1MDExMCc6ICdEJywgJ1xcdTAxMGYnOiAnZCcsICdcXHUwMTExJzogJ2QnLFxuICAgICdcXHUwMTEyJzogJ0UnLCAgJ1xcdTAxMTQnOiAnRScsICdcXHUwMTE2JzogJ0UnLCAnXFx1MDExOCc6ICdFJywgJ1xcdTAxMWEnOiAnRScsXG4gICAgJ1xcdTAxMTMnOiAnZScsICAnXFx1MDExNSc6ICdlJywgJ1xcdTAxMTcnOiAnZScsICdcXHUwMTE5JzogJ2UnLCAnXFx1MDExYic6ICdlJyxcbiAgICAnXFx1MDExYyc6ICdHJywgICdcXHUwMTFlJzogJ0cnLCAnXFx1MDEyMCc6ICdHJywgJ1xcdTAxMjInOiAnRycsXG4gICAgJ1xcdTAxMWQnOiAnZycsICAnXFx1MDExZic6ICdnJywgJ1xcdTAxMjEnOiAnZycsICdcXHUwMTIzJzogJ2cnLFxuICAgICdcXHUwMTI0JzogJ0gnLCAgJ1xcdTAxMjYnOiAnSCcsICdcXHUwMTI1JzogJ2gnLCAnXFx1MDEyNyc6ICdoJyxcbiAgICAnXFx1MDEyOCc6ICdJJywgICdcXHUwMTJhJzogJ0knLCAnXFx1MDEyYyc6ICdJJywgJ1xcdTAxMmUnOiAnSScsICdcXHUwMTMwJzogJ0knLFxuICAgICdcXHUwMTI5JzogJ2knLCAgJ1xcdTAxMmInOiAnaScsICdcXHUwMTJkJzogJ2knLCAnXFx1MDEyZic6ICdpJywgJ1xcdTAxMzEnOiAnaScsXG4gICAgJ1xcdTAxMzQnOiAnSicsICAnXFx1MDEzNSc6ICdqJyxcbiAgICAnXFx1MDEzNic6ICdLJywgICdcXHUwMTM3JzogJ2snLCAnXFx1MDEzOCc6ICdrJyxcbiAgICAnXFx1MDEzOSc6ICdMJywgICdcXHUwMTNiJzogJ0wnLCAnXFx1MDEzZCc6ICdMJywgJ1xcdTAxM2YnOiAnTCcsICdcXHUwMTQxJzogJ0wnLFxuICAgICdcXHUwMTNhJzogJ2wnLCAgJ1xcdTAxM2MnOiAnbCcsICdcXHUwMTNlJzogJ2wnLCAnXFx1MDE0MCc6ICdsJywgJ1xcdTAxNDInOiAnbCcsXG4gICAgJ1xcdTAxNDMnOiAnTicsICAnXFx1MDE0NSc6ICdOJywgJ1xcdTAxNDcnOiAnTicsICdcXHUwMTRhJzogJ04nLFxuICAgICdcXHUwMTQ0JzogJ24nLCAgJ1xcdTAxNDYnOiAnbicsICdcXHUwMTQ4JzogJ24nLCAnXFx1MDE0Yic6ICduJyxcbiAgICAnXFx1MDE0Yyc6ICdPJywgICdcXHUwMTRlJzogJ08nLCAnXFx1MDE1MCc6ICdPJyxcbiAgICAnXFx1MDE0ZCc6ICdvJywgICdcXHUwMTRmJzogJ28nLCAnXFx1MDE1MSc6ICdvJyxcbiAgICAnXFx1MDE1NCc6ICdSJywgICdcXHUwMTU2JzogJ1InLCAnXFx1MDE1OCc6ICdSJyxcbiAgICAnXFx1MDE1NSc6ICdyJywgICdcXHUwMTU3JzogJ3InLCAnXFx1MDE1OSc6ICdyJyxcbiAgICAnXFx1MDE1YSc6ICdTJywgICdcXHUwMTVjJzogJ1MnLCAnXFx1MDE1ZSc6ICdTJywgJ1xcdTAxNjAnOiAnUycsXG4gICAgJ1xcdTAxNWInOiAncycsICAnXFx1MDE1ZCc6ICdzJywgJ1xcdTAxNWYnOiAncycsICdcXHUwMTYxJzogJ3MnLFxuICAgICdcXHUwMTYyJzogJ1QnLCAgJ1xcdTAxNjQnOiAnVCcsICdcXHUwMTY2JzogJ1QnLFxuICAgICdcXHUwMTYzJzogJ3QnLCAgJ1xcdTAxNjUnOiAndCcsICdcXHUwMTY3JzogJ3QnLFxuICAgICdcXHUwMTY4JzogJ1UnLCAgJ1xcdTAxNmEnOiAnVScsICdcXHUwMTZjJzogJ1UnLCAnXFx1MDE2ZSc6ICdVJywgJ1xcdTAxNzAnOiAnVScsICdcXHUwMTcyJzogJ1UnLFxuICAgICdcXHUwMTY5JzogJ3UnLCAgJ1xcdTAxNmInOiAndScsICdcXHUwMTZkJzogJ3UnLCAnXFx1MDE2Zic6ICd1JywgJ1xcdTAxNzEnOiAndScsICdcXHUwMTczJzogJ3UnLFxuICAgICdcXHUwMTc0JzogJ1cnLCAgJ1xcdTAxNzUnOiAndycsXG4gICAgJ1xcdTAxNzYnOiAnWScsICAnXFx1MDE3Nyc6ICd5JywgJ1xcdTAxNzgnOiAnWScsXG4gICAgJ1xcdTAxNzknOiAnWicsICAnXFx1MDE3Yic6ICdaJywgJ1xcdTAxN2QnOiAnWicsXG4gICAgJ1xcdTAxN2EnOiAneicsICAnXFx1MDE3Yyc6ICd6JywgJ1xcdTAxN2UnOiAneicsXG4gICAgJ1xcdTAxMzInOiAnSUonLCAnXFx1MDEzMyc6ICdpaicsXG4gICAgJ1xcdTAxNTInOiAnT2UnLCAnXFx1MDE1Myc6ICdvZScsXG4gICAgJ1xcdTAxNDknOiBcIiduXCIsICdcXHUwMTdmJzogJ3MnXG4gIH07XG5cbiAgLyoqIFVzZWQgdG8gbWFwIGNoYXJhY3RlcnMgdG8gSFRNTCBlbnRpdGllcy4gKi9cbiAgdmFyIGh0bWxFc2NhcGVzID0ge1xuICAgICcmJzogJyZhbXA7JyxcbiAgICAnPCc6ICcmbHQ7JyxcbiAgICAnPic6ICcmZ3Q7JyxcbiAgICAnXCInOiAnJnF1b3Q7JyxcbiAgICBcIidcIjogJyYjMzk7J1xuICB9O1xuXG4gIC8qKiBVc2VkIHRvIG1hcCBIVE1MIGVudGl0aWVzIHRvIGNoYXJhY3RlcnMuICovXG4gIHZhciBodG1sVW5lc2NhcGVzID0ge1xuICAgICcmYW1wOyc6ICcmJyxcbiAgICAnJmx0Oyc6ICc8JyxcbiAgICAnJmd0Oyc6ICc+JyxcbiAgICAnJnF1b3Q7JzogJ1wiJyxcbiAgICAnJiMzOTsnOiBcIidcIlxuICB9O1xuXG4gIC8qKiBVc2VkIHRvIGVzY2FwZSBjaGFyYWN0ZXJzIGZvciBpbmNsdXNpb24gaW4gY29tcGlsZWQgc3RyaW5nIGxpdGVyYWxzLiAqL1xuICB2YXIgc3RyaW5nRXNjYXBlcyA9IHtcbiAgICAnXFxcXCc6ICdcXFxcJyxcbiAgICBcIidcIjogXCInXCIsXG4gICAgJ1xcbic6ICduJyxcbiAgICAnXFxyJzogJ3InLFxuICAgICdcXHUyMDI4JzogJ3UyMDI4JyxcbiAgICAnXFx1MjAyOSc6ICd1MjAyOSdcbiAgfTtcblxuICAvKiogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgd2l0aG91dCBhIGRlcGVuZGVuY3kgb24gYHJvb3RgLiAqL1xuICB2YXIgZnJlZVBhcnNlRmxvYXQgPSBwYXJzZUZsb2F0LFxuICAgICAgZnJlZVBhcnNlSW50ID0gcGFyc2VJbnQ7XG5cbiAgLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBnbG9iYWxgIGZyb20gTm9kZS5qcy4gKi9cbiAgdmFyIGZyZWVHbG9iYWwgPSB0eXBlb2YgZ2xvYmFsID09ICdvYmplY3QnICYmIGdsb2JhbCAmJiBnbG9iYWwuT2JqZWN0ID09PSBPYmplY3QgJiYgZ2xvYmFsO1xuXG4gIC8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgc2VsZmAuICovXG4gIHZhciBmcmVlU2VsZiA9IHR5cGVvZiBzZWxmID09ICdvYmplY3QnICYmIHNlbGYgJiYgc2VsZi5PYmplY3QgPT09IE9iamVjdCAmJiBzZWxmO1xuXG4gIC8qKiBVc2VkIGFzIGEgcmVmZXJlbmNlIHRvIHRoZSBnbG9iYWwgb2JqZWN0LiAqL1xuICB2YXIgcm9vdCA9IGZyZWVHbG9iYWwgfHwgZnJlZVNlbGYgfHwgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblxuICAvKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGV4cG9ydHNgLiAqL1xuICB2YXIgZnJlZUV4cG9ydHMgPSB0eXBlb2YgZXhwb3J0cyA9PSAnb2JqZWN0JyAmJiBleHBvcnRzICYmICFleHBvcnRzLm5vZGVUeXBlICYmIGV4cG9ydHM7XG5cbiAgLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBtb2R1bGVgLiAqL1xuICB2YXIgZnJlZU1vZHVsZSA9IGZyZWVFeHBvcnRzICYmIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlICYmICFtb2R1bGUubm9kZVR5cGUgJiYgbW9kdWxlO1xuXG4gIC8qKiBEZXRlY3QgdGhlIHBvcHVsYXIgQ29tbW9uSlMgZXh0ZW5zaW9uIGBtb2R1bGUuZXhwb3J0c2AuICovXG4gIHZhciBtb2R1bGVFeHBvcnRzID0gZnJlZU1vZHVsZSAmJiBmcmVlTW9kdWxlLmV4cG9ydHMgPT09IGZyZWVFeHBvcnRzO1xuXG4gIC8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgcHJvY2Vzc2AgZnJvbSBOb2RlLmpzLiAqL1xuICB2YXIgZnJlZVByb2Nlc3MgPSBtb2R1bGVFeHBvcnRzICYmIGZyZWVHbG9iYWwucHJvY2VzcztcblxuICAvKiogVXNlZCB0byBhY2Nlc3MgZmFzdGVyIE5vZGUuanMgaGVscGVycy4gKi9cbiAgdmFyIG5vZGVVdGlsID0gKGZ1bmN0aW9uKCkge1xuICAgIHRyeSB7XG4gICAgICAvLyBVc2UgYHV0aWwudHlwZXNgIGZvciBOb2RlLmpzIDEwKy5cbiAgICAgIHZhciB0eXBlcyA9IGZyZWVNb2R1bGUgJiYgZnJlZU1vZHVsZS5yZXF1aXJlICYmIGZyZWVNb2R1bGUucmVxdWlyZSgndXRpbCcpLnR5cGVzO1xuXG4gICAgICBpZiAodHlwZXMpIHtcbiAgICAgICAgcmV0dXJuIHR5cGVzO1xuICAgICAgfVxuXG4gICAgICAvLyBMZWdhY3kgYHByb2Nlc3MuYmluZGluZygndXRpbCcpYCBmb3IgTm9kZS5qcyA8IDEwLlxuICAgICAgcmV0dXJuIGZyZWVQcm9jZXNzICYmIGZyZWVQcm9jZXNzLmJpbmRpbmcgJiYgZnJlZVByb2Nlc3MuYmluZGluZygndXRpbCcpO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG4gIH0oKSk7XG5cbiAgLyogTm9kZS5qcyBoZWxwZXIgcmVmZXJlbmNlcy4gKi9cbiAgdmFyIG5vZGVJc0FycmF5QnVmZmVyID0gbm9kZVV0aWwgJiYgbm9kZVV0aWwuaXNBcnJheUJ1ZmZlcixcbiAgICAgIG5vZGVJc0RhdGUgPSBub2RlVXRpbCAmJiBub2RlVXRpbC5pc0RhdGUsXG4gICAgICBub2RlSXNNYXAgPSBub2RlVXRpbCAmJiBub2RlVXRpbC5pc01hcCxcbiAgICAgIG5vZGVJc1JlZ0V4cCA9IG5vZGVVdGlsICYmIG5vZGVVdGlsLmlzUmVnRXhwLFxuICAgICAgbm9kZUlzU2V0ID0gbm9kZVV0aWwgJiYgbm9kZVV0aWwuaXNTZXQsXG4gICAgICBub2RlSXNUeXBlZEFycmF5ID0gbm9kZVV0aWwgJiYgbm9kZVV0aWwuaXNUeXBlZEFycmF5O1xuXG4gIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gIC8qKlxuICAgKiBBIGZhc3RlciBhbHRlcm5hdGl2ZSB0byBgRnVuY3Rpb24jYXBwbHlgLCB0aGlzIGZ1bmN0aW9uIGludm9rZXMgYGZ1bmNgXG4gICAqIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIGB0aGlzQXJnYCBhbmQgdGhlIGFyZ3VtZW50cyBvZiBgYXJnc2AuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGludm9rZS5cbiAgICogQHBhcmFtIHsqfSB0aGlzQXJnIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgZnVuY2AuXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFyZ3MgVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgYGZ1bmNgIHdpdGguXG4gICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXN1bHQgb2YgYGZ1bmNgLlxuICAgKi9cbiAgZnVuY3Rpb24gYXBwbHkoZnVuYywgdGhpc0FyZywgYXJncykge1xuICAgIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICAgIGNhc2UgMDogcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnKTtcbiAgICAgIGNhc2UgMTogcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnLCBhcmdzWzBdKTtcbiAgICAgIGNhc2UgMjogcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnLCBhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICAgIGNhc2UgMzogcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnLCBhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmMuYXBwbHkodGhpc0FyZywgYXJncyk7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlQWdncmVnYXRvcmAgZm9yIGFycmF5cy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBzZXR0ZXIgVGhlIGZ1bmN0aW9uIHRvIHNldCBgYWNjdW11bGF0b3JgIHZhbHVlcy5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGl0ZXJhdGVlIHRvIHRyYW5zZm9ybSBrZXlzLlxuICAgKiBAcGFyYW0ge09iamVjdH0gYWNjdW11bGF0b3IgVGhlIGluaXRpYWwgYWdncmVnYXRlZCBvYmplY3QuXG4gICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBgYWNjdW11bGF0b3JgLlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlBZ2dyZWdhdG9yKGFycmF5LCBzZXR0ZXIsIGl0ZXJhdGVlLCBhY2N1bXVsYXRvcikge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF07XG4gICAgICBzZXR0ZXIoYWNjdW11bGF0b3IsIHZhbHVlLCBpdGVyYXRlZSh2YWx1ZSksIGFycmF5KTtcbiAgICB9XG4gICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5mb3JFYWNoYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAgICogaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5RWFjaChhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgaWYgKGl0ZXJhdGVlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KSA9PT0gZmFsc2UpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBhcnJheTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uZm9yRWFjaFJpZ2h0YCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAgICogaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5RWFjaFJpZ2h0KGFycmF5LCBpdGVyYXRlZSkge1xuICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcblxuICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgaWYgKGl0ZXJhdGVlKGFycmF5W2xlbmd0aF0sIGxlbmd0aCwgYXJyYXkpID09PSBmYWxzZSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGFycmF5O1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5ldmVyeWAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yXG4gICAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbGwgZWxlbWVudHMgcGFzcyB0aGUgcHJlZGljYXRlIGNoZWNrLFxuICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlFdmVyeShhcnJheSwgcHJlZGljYXRlKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGlmICghcHJlZGljYXRlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5maWx0ZXJgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvclxuICAgKiBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmaWx0ZXJlZCBhcnJheS5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5RmlsdGVyKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGgsXG4gICAgICAgIHJlc0luZGV4ID0gMCxcbiAgICAgICAgcmVzdWx0ID0gW107XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuICAgICAgaWYgKHByZWRpY2F0ZSh2YWx1ZSwgaW5kZXgsIGFycmF5KSkge1xuICAgICAgICByZXN1bHRbcmVzSW5kZXgrK10gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uaW5jbHVkZXNgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvclxuICAgKiBzcGVjaWZ5aW5nIGFuIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0geyp9IHRhcmdldCBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB0YXJnZXRgIGlzIGZvdW5kLCBlbHNlIGBmYWxzZWAuXG4gICAqL1xuICBmdW5jdGlvbiBhcnJheUluY2x1ZGVzKGFycmF5LCB2YWx1ZSkge1xuICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICByZXR1cm4gISFsZW5ndGggJiYgYmFzZUluZGV4T2YoYXJyYXksIHZhbHVlLCAwKSA+IC0xO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgZnVuY3Rpb24gaXMgbGlrZSBgYXJyYXlJbmNsdWRlc2AgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBhIGNvbXBhcmF0b3IuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7Kn0gdGFyZ2V0IFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjb21wYXJhdG9yIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdGFyZ2V0YCBpcyBmb3VuZCwgZWxzZSBgZmFsc2VgLlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlJbmNsdWRlc1dpdGgoYXJyYXksIHZhbHVlLCBjb21wYXJhdG9yKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGlmIChjb21wYXJhdG9yKHZhbHVlLCBhcnJheVtpbmRleF0pKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLm1hcGAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlXG4gICAqIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgbWFwcGVkIGFycmF5LlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlNYXAoYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoLFxuICAgICAgICByZXN1bHQgPSBBcnJheShsZW5ndGgpO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIHJlc3VsdFtpbmRleF0gPSBpdGVyYXRlZShhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQXBwZW5kcyB0aGUgZWxlbWVudHMgb2YgYHZhbHVlc2AgdG8gYGFycmF5YC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSB2YWx1ZXMgdG8gYXBwZW5kLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5UHVzaChhcnJheSwgdmFsdWVzKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IHZhbHVlcy5sZW5ndGgsXG4gICAgICAgIG9mZnNldCA9IGFycmF5Lmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICBhcnJheVtvZmZzZXQgKyBpbmRleF0gPSB2YWx1ZXNbaW5kZXhdO1xuICAgIH1cbiAgICByZXR1cm4gYXJyYXk7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLnJlZHVjZWAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yXG4gICAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHBhcmFtIHsqfSBbYWNjdW11bGF0b3JdIFRoZSBpbml0aWFsIHZhbHVlLlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpbml0QWNjdW1dIFNwZWNpZnkgdXNpbmcgdGhlIGZpcnN0IGVsZW1lbnQgb2YgYGFycmF5YCBhc1xuICAgKiAgdGhlIGluaXRpYWwgdmFsdWUuXG4gICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBhY2N1bXVsYXRlZCB2YWx1ZS5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5UmVkdWNlKGFycmF5LCBpdGVyYXRlZSwgYWNjdW11bGF0b3IsIGluaXRBY2N1bSkge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcblxuICAgIGlmIChpbml0QWNjdW0gJiYgbGVuZ3RoKSB7XG4gICAgICBhY2N1bXVsYXRvciA9IGFycmF5WysraW5kZXhdO1xuICAgIH1cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgYWNjdW11bGF0b3IgPSBpdGVyYXRlZShhY2N1bXVsYXRvciwgYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpO1xuICAgIH1cbiAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLnJlZHVjZVJpZ2h0YCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAgICogaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcGFyYW0geyp9IFthY2N1bXVsYXRvcl0gVGhlIGluaXRpYWwgdmFsdWUuXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2luaXRBY2N1bV0gU3BlY2lmeSB1c2luZyB0aGUgbGFzdCBlbGVtZW50IG9mIGBhcnJheWAgYXNcbiAgICogIHRoZSBpbml0aWFsIHZhbHVlLlxuICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgYWNjdW11bGF0ZWQgdmFsdWUuXG4gICAqL1xuICBmdW5jdGlvbiBhcnJheVJlZHVjZVJpZ2h0KGFycmF5LCBpdGVyYXRlZSwgYWNjdW11bGF0b3IsIGluaXRBY2N1bSkge1xuICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICBpZiAoaW5pdEFjY3VtICYmIGxlbmd0aCkge1xuICAgICAgYWNjdW11bGF0b3IgPSBhcnJheVstLWxlbmd0aF07XG4gICAgfVxuICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgYWNjdW11bGF0b3IgPSBpdGVyYXRlZShhY2N1bXVsYXRvciwgYXJyYXlbbGVuZ3RoXSwgbGVuZ3RoLCBhcnJheSk7XG4gICAgfVxuICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uc29tZWAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlXG4gICAqIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbnkgZWxlbWVudCBwYXNzZXMgdGhlIHByZWRpY2F0ZSBjaGVjayxcbiAgICogIGVsc2UgYGZhbHNlYC5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5U29tZShhcnJheSwgcHJlZGljYXRlKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGlmIChwcmVkaWNhdGUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogR2V0cyB0aGUgc2l6ZSBvZiBhbiBBU0NJSSBgc3RyaW5nYC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIGluc3BlY3QuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHN0cmluZyBzaXplLlxuICAgKi9cbiAgdmFyIGFzY2lpU2l6ZSA9IGJhc2VQcm9wZXJ0eSgnbGVuZ3RoJyk7XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIGFuIEFTQ0lJIGBzdHJpbmdgIHRvIGFuIGFycmF5LlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgYXJyYXkuXG4gICAqL1xuICBmdW5jdGlvbiBhc2NpaVRvQXJyYXkoc3RyaW5nKSB7XG4gICAgcmV0dXJuIHN0cmluZy5zcGxpdCgnJyk7XG4gIH1cblxuICAvKipcbiAgICogU3BsaXRzIGFuIEFTQ0lJIGBzdHJpbmdgIGludG8gYW4gYXJyYXkgb2YgaXRzIHdvcmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHdvcmRzIG9mIGBzdHJpbmdgLlxuICAgKi9cbiAgZnVuY3Rpb24gYXNjaWlXb3JkcyhzdHJpbmcpIHtcbiAgICByZXR1cm4gc3RyaW5nLm1hdGNoKHJlQXNjaWlXb3JkKSB8fCBbXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBtZXRob2RzIGxpa2UgYF8uZmluZEtleWAgYW5kIGBfLmZpbmRMYXN0S2V5YCxcbiAgICogd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLCB3aGljaCBpdGVyYXRlcyBvdmVyIGBjb2xsZWN0aW9uYFxuICAgKiB1c2luZyBgZWFjaEZ1bmNgLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZWFjaEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGl0ZXJhdGUgb3ZlciBgY29sbGVjdGlvbmAuXG4gICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBmb3VuZCBlbGVtZW50IG9yIGl0cyBrZXksIGVsc2UgYHVuZGVmaW5lZGAuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlRmluZEtleShjb2xsZWN0aW9uLCBwcmVkaWNhdGUsIGVhY2hGdW5jKSB7XG4gICAgdmFyIHJlc3VsdDtcbiAgICBlYWNoRnVuYyhjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwga2V5LCBjb2xsZWN0aW9uKSB7XG4gICAgICBpZiAocHJlZGljYXRlKHZhbHVlLCBrZXksIGNvbGxlY3Rpb24pKSB7XG4gICAgICAgIHJlc3VsdCA9IGtleTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZmluZEluZGV4YCBhbmQgYF8uZmluZExhc3RJbmRleGAgd2l0aG91dFxuICAgKiBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBmcm9tSW5kZXggVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtmcm9tUmlnaHRdIFNwZWNpZnkgaXRlcmF0aW5nIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VGaW5kSW5kZXgoYXJyYXksIHByZWRpY2F0ZSwgZnJvbUluZGV4LCBmcm9tUmlnaHQpIHtcbiAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICBpbmRleCA9IGZyb21JbmRleCArIChmcm9tUmlnaHQgPyAxIDogLTEpO1xuXG4gICAgd2hpbGUgKChmcm9tUmlnaHQgPyBpbmRleC0tIDogKytpbmRleCA8IGxlbmd0aCkpIHtcbiAgICAgIGlmIChwcmVkaWNhdGUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpKSB7XG4gICAgICAgIHJldHVybiBpbmRleDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIC0xO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmluZGV4T2ZgIHdpdGhvdXQgYGZyb21JbmRleGAgYm91bmRzIGNoZWNrcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBmcm9tSW5kZXggVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZUluZGV4T2YoYXJyYXksIHZhbHVlLCBmcm9tSW5kZXgpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09IHZhbHVlXG4gICAgICA/IHN0cmljdEluZGV4T2YoYXJyYXksIHZhbHVlLCBmcm9tSW5kZXgpXG4gICAgICA6IGJhc2VGaW5kSW5kZXgoYXJyYXksIGJhc2VJc05hTiwgZnJvbUluZGV4KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIGZ1bmN0aW9uIGlzIGxpa2UgYGJhc2VJbmRleE9mYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGEgY29tcGFyYXRvci5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBmcm9tSW5kZXggVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjb21wYXJhdG9yIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlSW5kZXhPZldpdGgoYXJyYXksIHZhbHVlLCBmcm9tSW5kZXgsIGNvbXBhcmF0b3IpIHtcbiAgICB2YXIgaW5kZXggPSBmcm9tSW5kZXggLSAxLFxuICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgaWYgKGNvbXBhcmF0b3IoYXJyYXlbaW5kZXhdLCB2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gLTE7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNOYU5gIHdpdGhvdXQgc3VwcG9ydCBmb3IgbnVtYmVyIG9iamVjdHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBgTmFOYCwgZWxzZSBgZmFsc2VgLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZUlzTmFOKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlICE9PSB2YWx1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5tZWFuYCBhbmQgYF8ubWVhbkJ5YCB3aXRob3V0IHN1cHBvcnQgZm9yXG4gICAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIG1lYW4uXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlTWVhbihhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgcmV0dXJuIGxlbmd0aCA/IChiYXNlU3VtKGFycmF5LCBpdGVyYXRlZSkgLyBsZW5ndGgpIDogTkFOO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnByb3BlcnR5YCB3aXRob3V0IHN1cHBvcnQgZm9yIGRlZXAgcGF0aHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhY2Nlc3NvciBmdW5jdGlvbi5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VQcm9wZXJ0eShrZXkpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQgOiBvYmplY3Rba2V5XTtcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnByb3BlcnR5T2ZgIHdpdGhvdXQgc3VwcG9ydCBmb3IgZGVlcCBwYXRocy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhY2Nlc3NvciBmdW5jdGlvbi5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VQcm9wZXJ0eU9mKG9iamVjdCkge1xuICAgIHJldHVybiBmdW5jdGlvbihrZXkpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IG9iamVjdFtrZXldO1xuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucmVkdWNlYCBhbmQgYF8ucmVkdWNlUmlnaHRgLCB3aXRob3V0IHN1cHBvcnRcbiAgICogZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMsIHdoaWNoIGl0ZXJhdGVzIG92ZXIgYGNvbGxlY3Rpb25gIHVzaW5nIGBlYWNoRnVuY2AuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHBhcmFtIHsqfSBhY2N1bXVsYXRvciBUaGUgaW5pdGlhbCB2YWx1ZS5cbiAgICogQHBhcmFtIHtib29sZWFufSBpbml0QWNjdW0gU3BlY2lmeSB1c2luZyB0aGUgZmlyc3Qgb3IgbGFzdCBlbGVtZW50IG9mXG4gICAqICBgY29sbGVjdGlvbmAgYXMgdGhlIGluaXRpYWwgdmFsdWUuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGVhY2hGdW5jIFRoZSBmdW5jdGlvbiB0byBpdGVyYXRlIG92ZXIgYGNvbGxlY3Rpb25gLlxuICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgYWNjdW11bGF0ZWQgdmFsdWUuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlUmVkdWNlKGNvbGxlY3Rpb24sIGl0ZXJhdGVlLCBhY2N1bXVsYXRvciwgaW5pdEFjY3VtLCBlYWNoRnVuYykge1xuICAgIGVhY2hGdW5jKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbikge1xuICAgICAgYWNjdW11bGF0b3IgPSBpbml0QWNjdW1cbiAgICAgICAgPyAoaW5pdEFjY3VtID0gZmFsc2UsIHZhbHVlKVxuICAgICAgICA6IGl0ZXJhdGVlKGFjY3VtdWxhdG9yLCB2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pO1xuICAgIH0pO1xuICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zb3J0QnlgIHdoaWNoIHVzZXMgYGNvbXBhcmVyYCB0byBkZWZpbmUgdGhlXG4gICAqIHNvcnQgb3JkZXIgb2YgYGFycmF5YCBhbmQgcmVwbGFjZXMgY3JpdGVyaWEgb2JqZWN0cyB3aXRoIHRoZWlyIGNvcnJlc3BvbmRpbmdcbiAgICogdmFsdWVzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gc29ydC5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY29tcGFyZXIgVGhlIGZ1bmN0aW9uIHRvIGRlZmluZSBzb3J0IG9yZGVyLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VTb3J0QnkoYXJyYXksIGNvbXBhcmVyKSB7XG4gICAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICAgIGFycmF5LnNvcnQoY29tcGFyZXIpO1xuICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgYXJyYXlbbGVuZ3RoXSA9IGFycmF5W2xlbmd0aF0udmFsdWU7XG4gICAgfVxuICAgIHJldHVybiBhcnJheTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zdW1gIGFuZCBgXy5zdW1CeWAgd2l0aG91dCBzdXBwb3J0IGZvclxuICAgKiBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBzdW0uXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlU3VtKGFycmF5LCBpdGVyYXRlZSkge1xuICAgIHZhciByZXN1bHQsXG4gICAgICAgIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICB2YXIgY3VycmVudCA9IGl0ZXJhdGVlKGFycmF5W2luZGV4XSk7XG4gICAgICBpZiAoY3VycmVudCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJlc3VsdCA9IHJlc3VsdCA9PT0gdW5kZWZpbmVkID8gY3VycmVudCA6IChyZXN1bHQgKyBjdXJyZW50KTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy50aW1lc2Agd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzXG4gICAqIG9yIG1heCBhcnJheSBsZW5ndGggY2hlY2tzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgbnVtYmVyIG9mIHRpbWVzIHRvIGludm9rZSBgaXRlcmF0ZWVgLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHJlc3VsdHMuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlVGltZXMobiwgaXRlcmF0ZWUpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgcmVzdWx0ID0gQXJyYXkobik7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IG4pIHtcbiAgICAgIHJlc3VsdFtpbmRleF0gPSBpdGVyYXRlZShpbmRleCk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udG9QYWlyc2AgYW5kIGBfLnRvUGFpcnNJbmAgd2hpY2ggY3JlYXRlcyBhbiBhcnJheVxuICAgKiBvZiBrZXktdmFsdWUgcGFpcnMgZm9yIGBvYmplY3RgIGNvcnJlc3BvbmRpbmcgdG8gdGhlIHByb3BlcnR5IG5hbWVzIG9mIGBwcm9wc2AuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICogQHBhcmFtIHtBcnJheX0gcHJvcHMgVGhlIHByb3BlcnR5IG5hbWVzIHRvIGdldCB2YWx1ZXMgZm9yLlxuICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBrZXktdmFsdWUgcGFpcnMuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlVG9QYWlycyhvYmplY3QsIHByb3BzKSB7XG4gICAgcmV0dXJuIGFycmF5TWFwKHByb3BzLCBmdW5jdGlvbihrZXkpIHtcbiAgICAgIHJldHVybiBba2V5LCBvYmplY3Rba2V5XV07XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udW5hcnlgIHdpdGhvdXQgc3VwcG9ydCBmb3Igc3RvcmluZyBtZXRhZGF0YS5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY2FwIGFyZ3VtZW50cyBmb3IuXG4gICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNhcHBlZCBmdW5jdGlvbi5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VVbmFyeShmdW5jKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXR1cm4gZnVuYyh2YWx1ZSk7XG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy52YWx1ZXNgIGFuZCBgXy52YWx1ZXNJbmAgd2hpY2ggY3JlYXRlcyBhblxuICAgKiBhcnJheSBvZiBgb2JqZWN0YCBwcm9wZXJ0eSB2YWx1ZXMgY29ycmVzcG9uZGluZyB0byB0aGUgcHJvcGVydHkgbmFtZXNcbiAgICogb2YgYHByb3BzYC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgKiBAcGFyYW0ge0FycmF5fSBwcm9wcyBUaGUgcHJvcGVydHkgbmFtZXMgdG8gZ2V0IHZhbHVlcyBmb3IuXG4gICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IHZhbHVlcy5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VWYWx1ZXMob2JqZWN0LCBwcm9wcykge1xuICAgIHJldHVybiBhcnJheU1hcChwcm9wcywgZnVuY3Rpb24oa2V5KSB7XG4gICAgICByZXR1cm4gb2JqZWN0W2tleV07XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIGlmIGEgYGNhY2hlYCB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gY2FjaGUgVGhlIGNhY2hlIHRvIHF1ZXJ5LlxuICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICAgKi9cbiAgZnVuY3Rpb24gY2FjaGVIYXMoY2FjaGUsIGtleSkge1xuICAgIHJldHVybiBjYWNoZS5oYXMoa2V5KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVc2VkIGJ5IGBfLnRyaW1gIGFuZCBgXy50cmltU3RhcnRgIHRvIGdldCB0aGUgaW5kZXggb2YgdGhlIGZpcnN0IHN0cmluZyBzeW1ib2xcbiAgICogdGhhdCBpcyBub3QgZm91bmQgaW4gdGhlIGNoYXJhY3RlciBzeW1ib2xzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBzdHJTeW1ib2xzIFRoZSBzdHJpbmcgc3ltYm9scyB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0ge0FycmF5fSBjaHJTeW1ib2xzIFRoZSBjaGFyYWN0ZXIgc3ltYm9scyB0byBmaW5kLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgZmlyc3QgdW5tYXRjaGVkIHN0cmluZyBzeW1ib2wuXG4gICAqL1xuICBmdW5jdGlvbiBjaGFyc1N0YXJ0SW5kZXgoc3RyU3ltYm9scywgY2hyU3ltYm9scykge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBzdHJTeW1ib2xzLmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoICYmIGJhc2VJbmRleE9mKGNoclN5bWJvbHMsIHN0clN5bWJvbHNbaW5kZXhdLCAwKSA+IC0xKSB7fVxuICAgIHJldHVybiBpbmRleDtcbiAgfVxuXG4gIC8qKlxuICAgKiBVc2VkIGJ5IGBfLnRyaW1gIGFuZCBgXy50cmltRW5kYCB0byBnZXQgdGhlIGluZGV4IG9mIHRoZSBsYXN0IHN0cmluZyBzeW1ib2xcbiAgICogdGhhdCBpcyBub3QgZm91bmQgaW4gdGhlIGNoYXJhY3RlciBzeW1ib2xzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBzdHJTeW1ib2xzIFRoZSBzdHJpbmcgc3ltYm9scyB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0ge0FycmF5fSBjaHJTeW1ib2xzIFRoZSBjaGFyYWN0ZXIgc3ltYm9scyB0byBmaW5kLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbGFzdCB1bm1hdGNoZWQgc3RyaW5nIHN5bWJvbC5cbiAgICovXG4gIGZ1bmN0aW9uIGNoYXJzRW5kSW5kZXgoc3RyU3ltYm9scywgY2hyU3ltYm9scykge1xuICAgIHZhciBpbmRleCA9IHN0clN5bWJvbHMubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGluZGV4LS0gJiYgYmFzZUluZGV4T2YoY2hyU3ltYm9scywgc3RyU3ltYm9sc1tpbmRleF0sIDApID4gLTEpIHt9XG4gICAgcmV0dXJuIGluZGV4O1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIG51bWJlciBvZiBgcGxhY2Vob2xkZXJgIG9jY3VycmVuY2VzIGluIGBhcnJheWAuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0geyp9IHBsYWNlaG9sZGVyIFRoZSBwbGFjZWhvbGRlciB0byBzZWFyY2ggZm9yLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBwbGFjZWhvbGRlciBjb3VudC5cbiAgICovXG4gIGZ1bmN0aW9uIGNvdW50SG9sZGVycyhhcnJheSwgcGxhY2Vob2xkZXIpIHtcbiAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICByZXN1bHQgPSAwO1xuXG4gICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICBpZiAoYXJyYXlbbGVuZ3RoXSA9PT0gcGxhY2Vob2xkZXIpIHtcbiAgICAgICAgKytyZXN1bHQ7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogVXNlZCBieSBgXy5kZWJ1cnJgIHRvIGNvbnZlcnQgTGF0aW4tMSBTdXBwbGVtZW50IGFuZCBMYXRpbiBFeHRlbmRlZC1BXG4gICAqIGxldHRlcnMgdG8gYmFzaWMgTGF0aW4gbGV0dGVycy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IGxldHRlciBUaGUgbWF0Y2hlZCBsZXR0ZXIgdG8gZGVidXJyLlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBkZWJ1cnJlZCBsZXR0ZXIuXG4gICAqL1xuICB2YXIgZGVidXJyTGV0dGVyID0gYmFzZVByb3BlcnR5T2YoZGVidXJyZWRMZXR0ZXJzKTtcblxuICAvKipcbiAgICogVXNlZCBieSBgXy5lc2NhcGVgIHRvIGNvbnZlcnQgY2hhcmFjdGVycyB0byBIVE1MIGVudGl0aWVzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gY2hyIFRoZSBtYXRjaGVkIGNoYXJhY3RlciB0byBlc2NhcGUuXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGVzY2FwZWQgY2hhcmFjdGVyLlxuICAgKi9cbiAgdmFyIGVzY2FwZUh0bWxDaGFyID0gYmFzZVByb3BlcnR5T2YoaHRtbEVzY2FwZXMpO1xuXG4gIC8qKlxuICAgKiBVc2VkIGJ5IGBfLnRlbXBsYXRlYCB0byBlc2NhcGUgY2hhcmFjdGVycyBmb3IgaW5jbHVzaW9uIGluIGNvbXBpbGVkIHN0cmluZyBsaXRlcmFscy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IGNociBUaGUgbWF0Y2hlZCBjaGFyYWN0ZXIgdG8gZXNjYXBlLlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBlc2NhcGVkIGNoYXJhY3Rlci5cbiAgICovXG4gIGZ1bmN0aW9uIGVzY2FwZVN0cmluZ0NoYXIoY2hyKSB7XG4gICAgcmV0dXJuICdcXFxcJyArIHN0cmluZ0VzY2FwZXNbY2hyXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSB2YWx1ZSBhdCBga2V5YCBvZiBgb2JqZWN0YC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcHJvcGVydHkgdmFsdWUuXG4gICAqL1xuICBmdW5jdGlvbiBnZXRWYWx1ZShvYmplY3QsIGtleSkge1xuICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IG9iamVjdFtrZXldO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiBgc3RyaW5nYCBjb250YWlucyBVbmljb2RlIHN5bWJvbHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYSBzeW1ib2wgaXMgZm91bmQsIGVsc2UgYGZhbHNlYC5cbiAgICovXG4gIGZ1bmN0aW9uIGhhc1VuaWNvZGUoc3RyaW5nKSB7XG4gICAgcmV0dXJuIHJlSGFzVW5pY29kZS50ZXN0KHN0cmluZyk7XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIGlmIGBzdHJpbmdgIGNvbnRhaW5zIGEgd29yZCBjb21wb3NlZCBvZiBVbmljb2RlIHN5bWJvbHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYSB3b3JkIGlzIGZvdW5kLCBlbHNlIGBmYWxzZWAuXG4gICAqL1xuICBmdW5jdGlvbiBoYXNVbmljb2RlV29yZChzdHJpbmcpIHtcbiAgICByZXR1cm4gcmVIYXNVbmljb2RlV29yZC50ZXN0KHN0cmluZyk7XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydHMgYGl0ZXJhdG9yYCB0byBhbiBhcnJheS5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IGl0ZXJhdG9yIFRoZSBpdGVyYXRvciB0byBjb252ZXJ0LlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBhcnJheS5cbiAgICovXG4gIGZ1bmN0aW9uIGl0ZXJhdG9yVG9BcnJheShpdGVyYXRvcikge1xuICAgIHZhciBkYXRhLFxuICAgICAgICByZXN1bHQgPSBbXTtcblxuICAgIHdoaWxlICghKGRhdGEgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmUpIHtcbiAgICAgIHJlc3VsdC5wdXNoKGRhdGEudmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIGBtYXBgIHRvIGl0cyBrZXktdmFsdWUgcGFpcnMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBtYXAgVGhlIG1hcCB0byBjb252ZXJ0LlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGtleS12YWx1ZSBwYWlycy5cbiAgICovXG4gIGZ1bmN0aW9uIG1hcFRvQXJyYXkobWFwKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIHJlc3VsdCA9IEFycmF5KG1hcC5zaXplKTtcblxuICAgIG1hcC5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgIHJlc3VsdFsrK2luZGV4XSA9IFtrZXksIHZhbHVlXTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSB1bmFyeSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggaXRzIGFyZ3VtZW50IHRyYW5zZm9ybWVkLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byB3cmFwLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSB0cmFuc2Zvcm0gVGhlIGFyZ3VtZW50IHRyYW5zZm9ybS5cbiAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAqL1xuICBmdW5jdGlvbiBvdmVyQXJnKGZ1bmMsIHRyYW5zZm9ybSkge1xuICAgIHJldHVybiBmdW5jdGlvbihhcmcpIHtcbiAgICAgIHJldHVybiBmdW5jKHRyYW5zZm9ybShhcmcpKTtcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIFJlcGxhY2VzIGFsbCBgcGxhY2Vob2xkZXJgIGVsZW1lbnRzIGluIGBhcnJheWAgd2l0aCBhbiBpbnRlcm5hbCBwbGFjZWhvbGRlclxuICAgKiBhbmQgcmV0dXJucyBhbiBhcnJheSBvZiB0aGVpciBpbmRleGVzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICAgKiBAcGFyYW0geyp9IHBsYWNlaG9sZGVyIFRoZSBwbGFjZWhvbGRlciB0byByZXBsYWNlLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBwbGFjZWhvbGRlciBpbmRleGVzLlxuICAgKi9cbiAgZnVuY3Rpb24gcmVwbGFjZUhvbGRlcnMoYXJyYXksIHBsYWNlaG9sZGVyKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgcmVzSW5kZXggPSAwLFxuICAgICAgICByZXN1bHQgPSBbXTtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF07XG4gICAgICBpZiAodmFsdWUgPT09IHBsYWNlaG9sZGVyIHx8IHZhbHVlID09PSBQTEFDRUhPTERFUikge1xuICAgICAgICBhcnJheVtpbmRleF0gPSBQTEFDRUhPTERFUjtcbiAgICAgICAgcmVzdWx0W3Jlc0luZGV4KytdID0gaW5kZXg7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydHMgYHNldGAgdG8gYW4gYXJyYXkgb2YgaXRzIHZhbHVlcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IHNldCBUaGUgc2V0IHRvIGNvbnZlcnQuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgdmFsdWVzLlxuICAgKi9cbiAgZnVuY3Rpb24gc2V0VG9BcnJheShzZXQpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgcmVzdWx0ID0gQXJyYXkoc2V0LnNpemUpO1xuXG4gICAgc2V0LmZvckVhY2goZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJlc3VsdFsrK2luZGV4XSA9IHZhbHVlO1xuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydHMgYHNldGAgdG8gaXRzIHZhbHVlLXZhbHVlIHBhaXJzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gc2V0IFRoZSBzZXQgdG8gY29udmVydC5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSB2YWx1ZS12YWx1ZSBwYWlycy5cbiAgICovXG4gIGZ1bmN0aW9uIHNldFRvUGFpcnMoc2V0KSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIHJlc3VsdCA9IEFycmF5KHNldC5zaXplKTtcblxuICAgIHNldC5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXN1bHRbKytpbmRleF0gPSBbdmFsdWUsIHZhbHVlXTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5pbmRleE9mYCB3aGljaCBwZXJmb3JtcyBzdHJpY3QgZXF1YWxpdHlcbiAgICogY29tcGFyaXNvbnMgb2YgdmFsdWVzLCBpLmUuIGA9PT1gLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGZyb21JbmRleCBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gICAqL1xuICBmdW5jdGlvbiBzdHJpY3RJbmRleE9mKGFycmF5LCB2YWx1ZSwgZnJvbUluZGV4KSB7XG4gICAgdmFyIGluZGV4ID0gZnJvbUluZGV4IC0gMSxcbiAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGlmIChhcnJheVtpbmRleF0gPT09IHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBpbmRleDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIC0xO1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5sYXN0SW5kZXhPZmAgd2hpY2ggcGVyZm9ybXMgc3RyaWN0IGVxdWFsaXR5XG4gICAqIGNvbXBhcmlzb25zIG9mIHZhbHVlcywgaS5lLiBgPT09YC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBmcm9tSW5kZXggVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICAgKi9cbiAgZnVuY3Rpb24gc3RyaWN0TGFzdEluZGV4T2YoYXJyYXksIHZhbHVlLCBmcm9tSW5kZXgpIHtcbiAgICB2YXIgaW5kZXggPSBmcm9tSW5kZXggKyAxO1xuICAgIHdoaWxlIChpbmRleC0tKSB7XG4gICAgICBpZiAoYXJyYXlbaW5kZXhdID09PSB2YWx1ZSkge1xuICAgICAgICByZXR1cm4gaW5kZXg7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBpbmRleDtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBudW1iZXIgb2Ygc3ltYm9scyBpbiBgc3RyaW5nYC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGluc3BlY3QuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHN0cmluZyBzaXplLlxuICAgKi9cbiAgZnVuY3Rpb24gc3RyaW5nU2l6ZShzdHJpbmcpIHtcbiAgICByZXR1cm4gaGFzVW5pY29kZShzdHJpbmcpXG4gICAgICA/IHVuaWNvZGVTaXplKHN0cmluZylcbiAgICAgIDogYXNjaWlTaXplKHN0cmluZyk7XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydHMgYHN0cmluZ2AgdG8gYW4gYXJyYXkuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBhcnJheS5cbiAgICovXG4gIGZ1bmN0aW9uIHN0cmluZ1RvQXJyYXkoc3RyaW5nKSB7XG4gICAgcmV0dXJuIGhhc1VuaWNvZGUoc3RyaW5nKVxuICAgICAgPyB1bmljb2RlVG9BcnJheShzdHJpbmcpXG4gICAgICA6IGFzY2lpVG9BcnJheShzdHJpbmcpO1xuICB9XG5cbiAgLyoqXG4gICAqIFVzZWQgYnkgYF8udW5lc2NhcGVgIHRvIGNvbnZlcnQgSFRNTCBlbnRpdGllcyB0byBjaGFyYWN0ZXJzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gY2hyIFRoZSBtYXRjaGVkIGNoYXJhY3RlciB0byB1bmVzY2FwZS5cbiAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdW5lc2NhcGVkIGNoYXJhY3Rlci5cbiAgICovXG4gIHZhciB1bmVzY2FwZUh0bWxDaGFyID0gYmFzZVByb3BlcnR5T2YoaHRtbFVuZXNjYXBlcyk7XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIHNpemUgb2YgYSBVbmljb2RlIGBzdHJpbmdgLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgaW5zcGVjdC5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgc3RyaW5nIHNpemUuXG4gICAqL1xuICBmdW5jdGlvbiB1bmljb2RlU2l6ZShzdHJpbmcpIHtcbiAgICB2YXIgcmVzdWx0ID0gcmVVbmljb2RlLmxhc3RJbmRleCA9IDA7XG4gICAgd2hpbGUgKHJlVW5pY29kZS50ZXN0KHN0cmluZykpIHtcbiAgICAgICsrcmVzdWx0O1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIGEgVW5pY29kZSBgc3RyaW5nYCB0byBhbiBhcnJheS5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgY29udmVydGVkIGFycmF5LlxuICAgKi9cbiAgZnVuY3Rpb24gdW5pY29kZVRvQXJyYXkoc3RyaW5nKSB7XG4gICAgcmV0dXJuIHN0cmluZy5tYXRjaChyZVVuaWNvZGUpIHx8IFtdO1xuICB9XG5cbiAgLyoqXG4gICAqIFNwbGl0cyBhIFVuaWNvZGUgYHN0cmluZ2AgaW50byBhbiBhcnJheSBvZiBpdHMgd29yZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBUaGUgc3RyaW5nIHRvIGluc3BlY3QuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgd29yZHMgb2YgYHN0cmluZ2AuXG4gICAqL1xuICBmdW5jdGlvbiB1bmljb2RlV29yZHMoc3RyaW5nKSB7XG4gICAgcmV0dXJuIHN0cmluZy5tYXRjaChyZVVuaWNvZGVXb3JkKSB8fCBbXTtcbiAgfVxuXG4gIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBuZXcgcHJpc3RpbmUgYGxvZGFzaGAgZnVuY3Rpb24gdXNpbmcgdGhlIGBjb250ZXh0YCBvYmplY3QuXG4gICAqXG4gICAqIEBzdGF0aWNcbiAgICogQG1lbWJlck9mIF9cbiAgICogQHNpbmNlIDEuMS4wXG4gICAqIEBjYXRlZ29yeSBVdGlsXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbY29udGV4dD1yb290XSBUaGUgY29udGV4dCBvYmplY3QuXG4gICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBhIG5ldyBgbG9kYXNoYCBmdW5jdGlvbi5cbiAgICogQGV4YW1wbGVcbiAgICpcbiAgICogXy5taXhpbih7ICdmb28nOiBfLmNvbnN0YW50KCdmb28nKSB9KTtcbiAgICpcbiAgICogdmFyIGxvZGFzaCA9IF8ucnVuSW5Db250ZXh0KCk7XG4gICAqIGxvZGFzaC5taXhpbih7ICdiYXInOiBsb2Rhc2guY29uc3RhbnQoJ2JhcicpIH0pO1xuICAgKlxuICAgKiBfLmlzRnVuY3Rpb24oXy5mb28pO1xuICAgKiAvLyA9PiB0cnVlXG4gICAqIF8uaXNGdW5jdGlvbihfLmJhcik7XG4gICAqIC8vID0+IGZhbHNlXG4gICAqXG4gICAqIGxvZGFzaC5pc0Z1bmN0aW9uKGxvZGFzaC5mb28pO1xuICAgKiAvLyA9PiBmYWxzZVxuICAgKiBsb2Rhc2guaXNGdW5jdGlvbihsb2Rhc2guYmFyKTtcbiAgICogLy8gPT4gdHJ1ZVxuICAgKlxuICAgKiAvLyBDcmVhdGUgYSBzdXBlZC11cCBgZGVmZXJgIGluIE5vZGUuanMuXG4gICAqIHZhciBkZWZlciA9IF8ucnVuSW5Db250ZXh0KHsgJ3NldFRpbWVvdXQnOiBzZXRJbW1lZGlhdGUgfSkuZGVmZXI7XG4gICAqL1xuICB2YXIgcnVuSW5Db250ZXh0ID0gKGZ1bmN0aW9uIHJ1bkluQ29udGV4dChjb250ZXh0KSB7XG4gICAgY29udGV4dCA9IGNvbnRleHQgPT0gbnVsbCA/IHJvb3QgOiBfLmRlZmF1bHRzKHJvb3QuT2JqZWN0KCksIGNvbnRleHQsIF8ucGljayhyb290LCBjb250ZXh0UHJvcHMpKTtcblxuICAgIC8qKiBCdWlsdC1pbiBjb25zdHJ1Y3RvciByZWZlcmVuY2VzLiAqL1xuICAgIHZhciBBcnJheSA9IGNvbnRleHQuQXJyYXksXG4gICAgICAgIERhdGUgPSBjb250ZXh0LkRhdGUsXG4gICAgICAgIEVycm9yID0gY29udGV4dC5FcnJvcixcbiAgICAgICAgRnVuY3Rpb24gPSBjb250ZXh0LkZ1bmN0aW9uLFxuICAgICAgICBNYXRoID0gY29udGV4dC5NYXRoLFxuICAgICAgICBPYmplY3QgPSBjb250ZXh0Lk9iamVjdCxcbiAgICAgICAgUmVnRXhwID0gY29udGV4dC5SZWdFeHAsXG4gICAgICAgIFN0cmluZyA9IGNvbnRleHQuU3RyaW5nLFxuICAgICAgICBUeXBlRXJyb3IgPSBjb250ZXh0LlR5cGVFcnJvcjtcblxuICAgIC8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbiAgICB2YXIgYXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZSxcbiAgICAgICAgZnVuY1Byb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlLFxuICAgICAgICBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbiAgICAvKiogVXNlZCB0byBkZXRlY3Qgb3ZlcnJlYWNoaW5nIGNvcmUtanMgc2hpbXMuICovXG4gICAgdmFyIGNvcmVKc0RhdGEgPSBjb250ZXh0WydfX2NvcmUtanNfc2hhcmVkX18nXTtcblxuICAgIC8qKiBVc2VkIHRvIHJlc29sdmUgdGhlIGRlY29tcGlsZWQgc291cmNlIG9mIGZ1bmN0aW9ucy4gKi9cbiAgICB2YXIgZnVuY1RvU3RyaW5nID0gZnVuY1Byb3RvLnRvU3RyaW5nO1xuXG4gICAgLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG4gICAgdmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbiAgICAvKiogVXNlZCB0byBnZW5lcmF0ZSB1bmlxdWUgSURzLiAqL1xuICAgIHZhciBpZENvdW50ZXIgPSAwO1xuXG4gICAgLyoqIFVzZWQgdG8gZGV0ZWN0IG1ldGhvZHMgbWFzcXVlcmFkaW5nIGFzIG5hdGl2ZS4gKi9cbiAgICB2YXIgbWFza1NyY0tleSA9IChmdW5jdGlvbigpIHtcbiAgICAgIHZhciB1aWQgPSAvW14uXSskLy5leGVjKGNvcmVKc0RhdGEgJiYgY29yZUpzRGF0YS5rZXlzICYmIGNvcmVKc0RhdGEua2V5cy5JRV9QUk9UTyB8fCAnJyk7XG4gICAgICByZXR1cm4gdWlkID8gKCdTeW1ib2woc3JjKV8xLicgKyB1aWQpIDogJyc7XG4gICAgfSgpKTtcblxuICAgIC8qKlxuICAgICAqIFVzZWQgdG8gcmVzb2x2ZSB0aGVcbiAgICAgKiBbYHRvU3RyaW5nVGFnYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZylcbiAgICAgKiBvZiB2YWx1ZXMuXG4gICAgICovXG4gICAgdmFyIG5hdGl2ZU9iamVjdFRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7XG5cbiAgICAvKiogVXNlZCB0byBpbmZlciB0aGUgYE9iamVjdGAgY29uc3RydWN0b3IuICovXG4gICAgdmFyIG9iamVjdEN0b3JTdHJpbmcgPSBmdW5jVG9TdHJpbmcuY2FsbChPYmplY3QpO1xuXG4gICAgLyoqIFVzZWQgdG8gcmVzdG9yZSB0aGUgb3JpZ2luYWwgYF9gIHJlZmVyZW5jZSBpbiBgXy5ub0NvbmZsaWN0YC4gKi9cbiAgICB2YXIgb2xkRGFzaCA9IHJvb3QuXztcblxuICAgIC8qKiBVc2VkIHRvIGRldGVjdCBpZiBhIG1ldGhvZCBpcyBuYXRpdmUuICovXG4gICAgdmFyIHJlSXNOYXRpdmUgPSBSZWdFeHAoJ14nICtcbiAgICAgIGZ1bmNUb1N0cmluZy5jYWxsKGhhc093blByb3BlcnR5KS5yZXBsYWNlKHJlUmVnRXhwQ2hhciwgJ1xcXFwkJicpXG4gICAgICAucmVwbGFjZSgvaGFzT3duUHJvcGVydHl8KGZ1bmN0aW9uKS4qPyg/PVxcXFxcXCgpfCBmb3IgLis/KD89XFxcXFxcXSkvZywgJyQxLio/JykgKyAnJCdcbiAgICApO1xuXG4gICAgLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG4gICAgdmFyIEJ1ZmZlciA9IG1vZHVsZUV4cG9ydHMgPyBjb250ZXh0LkJ1ZmZlciA6IHVuZGVmaW5lZCxcbiAgICAgICAgU3ltYm9sID0gY29udGV4dC5TeW1ib2wsXG4gICAgICAgIFVpbnQ4QXJyYXkgPSBjb250ZXh0LlVpbnQ4QXJyYXksXG4gICAgICAgIGFsbG9jVW5zYWZlID0gQnVmZmVyID8gQnVmZmVyLmFsbG9jVW5zYWZlIDogdW5kZWZpbmVkLFxuICAgICAgICBnZXRQcm90b3R5cGUgPSBvdmVyQXJnKE9iamVjdC5nZXRQcm90b3R5cGVPZiwgT2JqZWN0KSxcbiAgICAgICAgb2JqZWN0Q3JlYXRlID0gT2JqZWN0LmNyZWF0ZSxcbiAgICAgICAgcHJvcGVydHlJc0VudW1lcmFibGUgPSBvYmplY3RQcm90by5wcm9wZXJ0eUlzRW51bWVyYWJsZSxcbiAgICAgICAgc3BsaWNlID0gYXJyYXlQcm90by5zcGxpY2UsXG4gICAgICAgIHNwcmVhZGFibGVTeW1ib2wgPSBTeW1ib2wgPyBTeW1ib2wuaXNDb25jYXRTcHJlYWRhYmxlIDogdW5kZWZpbmVkLFxuICAgICAgICBzeW1JdGVyYXRvciA9IFN5bWJvbCA/IFN5bWJvbC5pdGVyYXRvciA6IHVuZGVmaW5lZCxcbiAgICAgICAgc3ltVG9TdHJpbmdUYWcgPSBTeW1ib2wgPyBTeW1ib2wudG9TdHJpbmdUYWcgOiB1bmRlZmluZWQ7XG5cbiAgICB2YXIgZGVmaW5lUHJvcGVydHkgPSAoZnVuY3Rpb24oKSB7XG4gICAgICB0cnkge1xuICAgICAgICB2YXIgZnVuYyA9IGdldE5hdGl2ZShPYmplY3QsICdkZWZpbmVQcm9wZXJ0eScpO1xuICAgICAgICBmdW5jKHt9LCAnJywge30pO1xuICAgICAgICByZXR1cm4gZnVuYztcbiAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgfSgpKTtcblxuICAgIC8qKiBNb2NrZWQgYnVpbHQtaW5zLiAqL1xuICAgIHZhciBjdHhDbGVhclRpbWVvdXQgPSBjb250ZXh0LmNsZWFyVGltZW91dCAhPT0gcm9vdC5jbGVhclRpbWVvdXQgJiYgY29udGV4dC5jbGVhclRpbWVvdXQsXG4gICAgICAgIGN0eE5vdyA9IERhdGUgJiYgRGF0ZS5ub3cgIT09IHJvb3QuRGF0ZS5ub3cgJiYgRGF0ZS5ub3csXG4gICAgICAgIGN0eFNldFRpbWVvdXQgPSBjb250ZXh0LnNldFRpbWVvdXQgIT09IHJvb3Quc2V0VGltZW91dCAmJiBjb250ZXh0LnNldFRpbWVvdXQ7XG5cbiAgICAvKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG4gICAgdmFyIG5hdGl2ZUNlaWwgPSBNYXRoLmNlaWwsXG4gICAgICAgIG5hdGl2ZUZsb29yID0gTWF0aC5mbG9vcixcbiAgICAgICAgbmF0aXZlR2V0U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMsXG4gICAgICAgIG5hdGl2ZUlzQnVmZmVyID0gQnVmZmVyID8gQnVmZmVyLmlzQnVmZmVyIDogdW5kZWZpbmVkLFxuICAgICAgICBuYXRpdmVJc0Zpbml0ZSA9IGNvbnRleHQuaXNGaW5pdGUsXG4gICAgICAgIG5hdGl2ZUpvaW4gPSBhcnJheVByb3RvLmpvaW4sXG4gICAgICAgIG5hdGl2ZUtleXMgPSBvdmVyQXJnKE9iamVjdC5rZXlzLCBPYmplY3QpLFxuICAgICAgICBuYXRpdmVNYXggPSBNYXRoLm1heCxcbiAgICAgICAgbmF0aXZlTWluID0gTWF0aC5taW4sXG4gICAgICAgIG5hdGl2ZU5vdyA9IERhdGUubm93LFxuICAgICAgICBuYXRpdmVQYXJzZUludCA9IGNvbnRleHQucGFyc2VJbnQsXG4gICAgICAgIG5hdGl2ZVJhbmRvbSA9IE1hdGgucmFuZG9tLFxuICAgICAgICBuYXRpdmVSZXZlcnNlID0gYXJyYXlQcm90by5yZXZlcnNlO1xuXG4gICAgLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqL1xuICAgIHZhciBEYXRhVmlldyA9IGdldE5hdGl2ZShjb250ZXh0LCAnRGF0YVZpZXcnKSxcbiAgICAgICAgTWFwID0gZ2V0TmF0aXZlKGNvbnRleHQsICdNYXAnKSxcbiAgICAgICAgUHJvbWlzZSA9IGdldE5hdGl2ZShjb250ZXh0LCAnUHJvbWlzZScpLFxuICAgICAgICBTZXQgPSBnZXROYXRpdmUoY29udGV4dCwgJ1NldCcpLFxuICAgICAgICBXZWFrTWFwID0gZ2V0TmF0aXZlKGNvbnRleHQsICdXZWFrTWFwJyksXG4gICAgICAgIG5hdGl2ZUNyZWF0ZSA9IGdldE5hdGl2ZShPYmplY3QsICdjcmVhdGUnKTtcblxuICAgIC8qKiBVc2VkIHRvIHN0b3JlIGZ1bmN0aW9uIG1ldGFkYXRhLiAqL1xuICAgIHZhciBtZXRhTWFwID0gV2Vha01hcCAmJiBuZXcgV2Vha01hcDtcblxuICAgIC8qKiBVc2VkIHRvIGxvb2t1cCB1bm1pbmlmaWVkIGZ1bmN0aW9uIG5hbWVzLiAqL1xuICAgIHZhciByZWFsTmFtZXMgPSB7fTtcblxuICAgIC8qKiBVc2VkIHRvIGRldGVjdCBtYXBzLCBzZXRzLCBhbmQgd2Vha21hcHMuICovXG4gICAgdmFyIGRhdGFWaWV3Q3RvclN0cmluZyA9IHRvU291cmNlKERhdGFWaWV3KSxcbiAgICAgICAgbWFwQ3RvclN0cmluZyA9IHRvU291cmNlKE1hcCksXG4gICAgICAgIHByb21pc2VDdG9yU3RyaW5nID0gdG9Tb3VyY2UoUHJvbWlzZSksXG4gICAgICAgIHNldEN0b3JTdHJpbmcgPSB0b1NvdXJjZShTZXQpLFxuICAgICAgICB3ZWFrTWFwQ3RvclN0cmluZyA9IHRvU291cmNlKFdlYWtNYXApO1xuXG4gICAgLyoqIFVzZWQgdG8gY29udmVydCBzeW1ib2xzIHRvIHByaW1pdGl2ZXMgYW5kIHN0cmluZ3MuICovXG4gICAgdmFyIHN5bWJvbFByb3RvID0gU3ltYm9sID8gU3ltYm9sLnByb3RvdHlwZSA6IHVuZGVmaW5lZCxcbiAgICAgICAgc3ltYm9sVmFsdWVPZiA9IHN5bWJvbFByb3RvID8gc3ltYm9sUHJvdG8udmFsdWVPZiA6IHVuZGVmaW5lZCxcbiAgICAgICAgc3ltYm9sVG9TdHJpbmcgPSBzeW1ib2xQcm90byA/IHN5bWJvbFByb3RvLnRvU3RyaW5nIDogdW5kZWZpbmVkO1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGBsb2Rhc2hgIG9iamVjdCB3aGljaCB3cmFwcyBgdmFsdWVgIHRvIGVuYWJsZSBpbXBsaWNpdCBtZXRob2RcbiAgICAgKiBjaGFpbiBzZXF1ZW5jZXMuIE1ldGhvZHMgdGhhdCBvcGVyYXRlIG9uIGFuZCByZXR1cm4gYXJyYXlzLCBjb2xsZWN0aW9ucyxcbiAgICAgKiBhbmQgZnVuY3Rpb25zIGNhbiBiZSBjaGFpbmVkIHRvZ2V0aGVyLiBNZXRob2RzIHRoYXQgcmV0cmlldmUgYSBzaW5nbGUgdmFsdWVcbiAgICAgKiBvciBtYXkgcmV0dXJuIGEgcHJpbWl0aXZlIHZhbHVlIHdpbGwgYXV0b21hdGljYWxseSBlbmQgdGhlIGNoYWluIHNlcXVlbmNlXG4gICAgICogYW5kIHJldHVybiB0aGUgdW53cmFwcGVkIHZhbHVlLiBPdGhlcndpc2UsIHRoZSB2YWx1ZSBtdXN0IGJlIHVud3JhcHBlZFxuICAgICAqIHdpdGggYF8jdmFsdWVgLlxuICAgICAqXG4gICAgICogRXhwbGljaXQgY2hhaW4gc2VxdWVuY2VzLCB3aGljaCBtdXN0IGJlIHVud3JhcHBlZCB3aXRoIGBfI3ZhbHVlYCwgbWF5IGJlXG4gICAgICogZW5hYmxlZCB1c2luZyBgXy5jaGFpbmAuXG4gICAgICpcbiAgICAgKiBUaGUgZXhlY3V0aW9uIG9mIGNoYWluZWQgbWV0aG9kcyBpcyBsYXp5LCB0aGF0IGlzLCBpdCdzIGRlZmVycmVkIHVudGlsXG4gICAgICogYF8jdmFsdWVgIGlzIGltcGxpY2l0bHkgb3IgZXhwbGljaXRseSBjYWxsZWQuXG4gICAgICpcbiAgICAgKiBMYXp5IGV2YWx1YXRpb24gYWxsb3dzIHNldmVyYWwgbWV0aG9kcyB0byBzdXBwb3J0IHNob3J0Y3V0IGZ1c2lvbi5cbiAgICAgKiBTaG9ydGN1dCBmdXNpb24gaXMgYW4gb3B0aW1pemF0aW9uIHRvIG1lcmdlIGl0ZXJhdGVlIGNhbGxzOyB0aGlzIGF2b2lkc1xuICAgICAqIHRoZSBjcmVhdGlvbiBvZiBpbnRlcm1lZGlhdGUgYXJyYXlzIGFuZCBjYW4gZ3JlYXRseSByZWR1Y2UgdGhlIG51bWJlciBvZlxuICAgICAqIGl0ZXJhdGVlIGV4ZWN1dGlvbnMuIFNlY3Rpb25zIG9mIGEgY2hhaW4gc2VxdWVuY2UgcXVhbGlmeSBmb3Igc2hvcnRjdXRcbiAgICAgKiBmdXNpb24gaWYgdGhlIHNlY3Rpb24gaXMgYXBwbGllZCB0byBhbiBhcnJheSBhbmQgaXRlcmF0ZWVzIGFjY2VwdCBvbmx5XG4gICAgICogb25lIGFyZ3VtZW50LiBUaGUgaGV1cmlzdGljIGZvciB3aGV0aGVyIGEgc2VjdGlvbiBxdWFsaWZpZXMgZm9yIHNob3J0Y3V0XG4gICAgICogZnVzaW9uIGlzIHN1YmplY3QgdG8gY2hhbmdlLlxuICAgICAqXG4gICAgICogQ2hhaW5pbmcgaXMgc3VwcG9ydGVkIGluIGN1c3RvbSBidWlsZHMgYXMgbG9uZyBhcyB0aGUgYF8jdmFsdWVgIG1ldGhvZCBpc1xuICAgICAqIGRpcmVjdGx5IG9yIGluZGlyZWN0bHkgaW5jbHVkZWQgaW4gdGhlIGJ1aWxkLlxuICAgICAqXG4gICAgICogSW4gYWRkaXRpb24gdG8gbG9kYXNoIG1ldGhvZHMsIHdyYXBwZXJzIGhhdmUgYEFycmF5YCBhbmQgYFN0cmluZ2AgbWV0aG9kcy5cbiAgICAgKlxuICAgICAqIFRoZSB3cmFwcGVyIGBBcnJheWAgbWV0aG9kcyBhcmU6XG4gICAgICogYGNvbmNhdGAsIGBqb2luYCwgYHBvcGAsIGBwdXNoYCwgYHNoaWZ0YCwgYHNvcnRgLCBgc3BsaWNlYCwgYW5kIGB1bnNoaWZ0YFxuICAgICAqXG4gICAgICogVGhlIHdyYXBwZXIgYFN0cmluZ2AgbWV0aG9kcyBhcmU6XG4gICAgICogYHJlcGxhY2VgIGFuZCBgc3BsaXRgXG4gICAgICpcbiAgICAgKiBUaGUgd3JhcHBlciBtZXRob2RzIHRoYXQgc3VwcG9ydCBzaG9ydGN1dCBmdXNpb24gYXJlOlxuICAgICAqIGBhdGAsIGBjb21wYWN0YCwgYGRyb3BgLCBgZHJvcFJpZ2h0YCwgYGRyb3BXaGlsZWAsIGBmaWx0ZXJgLCBgZmluZGAsXG4gICAgICogYGZpbmRMYXN0YCwgYGhlYWRgLCBgaW5pdGlhbGAsIGBsYXN0YCwgYG1hcGAsIGByZWplY3RgLCBgcmV2ZXJzZWAsIGBzbGljZWAsXG4gICAgICogYHRhaWxgLCBgdGFrZWAsIGB0YWtlUmlnaHRgLCBgdGFrZVJpZ2h0V2hpbGVgLCBgdGFrZVdoaWxlYCwgYW5kIGB0b0FycmF5YFxuICAgICAqXG4gICAgICogVGhlIGNoYWluYWJsZSB3cmFwcGVyIG1ldGhvZHMgYXJlOlxuICAgICAqIGBhZnRlcmAsIGBhcnlgLCBgYXNzaWduYCwgYGFzc2lnbkluYCwgYGFzc2lnbkluV2l0aGAsIGBhc3NpZ25XaXRoYCwgYGF0YCxcbiAgICAgKiBgYmVmb3JlYCwgYGJpbmRgLCBgYmluZEFsbGAsIGBiaW5kS2V5YCwgYGNhc3RBcnJheWAsIGBjaGFpbmAsIGBjaHVua2AsXG4gICAgICogYGNvbW1pdGAsIGBjb21wYWN0YCwgYGNvbmNhdGAsIGBjb25mb3Jtc2AsIGBjb25zdGFudGAsIGBjb3VudEJ5YCwgYGNyZWF0ZWAsXG4gICAgICogYGN1cnJ5YCwgYGRlYm91bmNlYCwgYGRlZmF1bHRzYCwgYGRlZmF1bHRzRGVlcGAsIGBkZWZlcmAsIGBkZWxheWAsXG4gICAgICogYGRpZmZlcmVuY2VgLCBgZGlmZmVyZW5jZUJ5YCwgYGRpZmZlcmVuY2VXaXRoYCwgYGRyb3BgLCBgZHJvcFJpZ2h0YCxcbiAgICAgKiBgZHJvcFJpZ2h0V2hpbGVgLCBgZHJvcFdoaWxlYCwgYGV4dGVuZGAsIGBleHRlbmRXaXRoYCwgYGZpbGxgLCBgZmlsdGVyYCxcbiAgICAgKiBgZmxhdE1hcGAsIGBmbGF0TWFwRGVlcGAsIGBmbGF0TWFwRGVwdGhgLCBgZmxhdHRlbmAsIGBmbGF0dGVuRGVlcGAsXG4gICAgICogYGZsYXR0ZW5EZXB0aGAsIGBmbGlwYCwgYGZsb3dgLCBgZmxvd1JpZ2h0YCwgYGZyb21QYWlyc2AsIGBmdW5jdGlvbnNgLFxuICAgICAqIGBmdW5jdGlvbnNJbmAsIGBncm91cEJ5YCwgYGluaXRpYWxgLCBgaW50ZXJzZWN0aW9uYCwgYGludGVyc2VjdGlvbkJ5YCxcbiAgICAgKiBgaW50ZXJzZWN0aW9uV2l0aGAsIGBpbnZlcnRgLCBgaW52ZXJ0QnlgLCBgaW52b2tlTWFwYCwgYGl0ZXJhdGVlYCwgYGtleUJ5YCxcbiAgICAgKiBga2V5c2AsIGBrZXlzSW5gLCBgbWFwYCwgYG1hcEtleXNgLCBgbWFwVmFsdWVzYCwgYG1hdGNoZXNgLCBgbWF0Y2hlc1Byb3BlcnR5YCxcbiAgICAgKiBgbWVtb2l6ZWAsIGBtZXJnZWAsIGBtZXJnZVdpdGhgLCBgbWV0aG9kYCwgYG1ldGhvZE9mYCwgYG1peGluYCwgYG5lZ2F0ZWAsXG4gICAgICogYG50aEFyZ2AsIGBvbWl0YCwgYG9taXRCeWAsIGBvbmNlYCwgYG9yZGVyQnlgLCBgb3ZlcmAsIGBvdmVyQXJnc2AsXG4gICAgICogYG92ZXJFdmVyeWAsIGBvdmVyU29tZWAsIGBwYXJ0aWFsYCwgYHBhcnRpYWxSaWdodGAsIGBwYXJ0aXRpb25gLCBgcGlja2AsXG4gICAgICogYHBpY2tCeWAsIGBwbGFudGAsIGBwcm9wZXJ0eWAsIGBwcm9wZXJ0eU9mYCwgYHB1bGxgLCBgcHVsbEFsbGAsIGBwdWxsQWxsQnlgLFxuICAgICAqIGBwdWxsQWxsV2l0aGAsIGBwdWxsQXRgLCBgcHVzaGAsIGByYW5nZWAsIGByYW5nZVJpZ2h0YCwgYHJlYXJnYCwgYHJlamVjdGAsXG4gICAgICogYHJlbW92ZWAsIGByZXN0YCwgYHJldmVyc2VgLCBgc2FtcGxlU2l6ZWAsIGBzZXRgLCBgc2V0V2l0aGAsIGBzaHVmZmxlYCxcbiAgICAgKiBgc2xpY2VgLCBgc29ydGAsIGBzb3J0QnlgLCBgc3BsaWNlYCwgYHNwcmVhZGAsIGB0YWlsYCwgYHRha2VgLCBgdGFrZVJpZ2h0YCxcbiAgICAgKiBgdGFrZVJpZ2h0V2hpbGVgLCBgdGFrZVdoaWxlYCwgYHRhcGAsIGB0aHJvdHRsZWAsIGB0aHJ1YCwgYHRvQXJyYXlgLFxuICAgICAqIGB0b1BhaXJzYCwgYHRvUGFpcnNJbmAsIGB0b1BhdGhgLCBgdG9QbGFpbk9iamVjdGAsIGB0cmFuc2Zvcm1gLCBgdW5hcnlgLFxuICAgICAqIGB1bmlvbmAsIGB1bmlvbkJ5YCwgYHVuaW9uV2l0aGAsIGB1bmlxYCwgYHVuaXFCeWAsIGB1bmlxV2l0aGAsIGB1bnNldGAsXG4gICAgICogYHVuc2hpZnRgLCBgdW56aXBgLCBgdW56aXBXaXRoYCwgYHVwZGF0ZWAsIGB1cGRhdGVXaXRoYCwgYHZhbHVlc2AsXG4gICAgICogYHZhbHVlc0luYCwgYHdpdGhvdXRgLCBgd3JhcGAsIGB4b3JgLCBgeG9yQnlgLCBgeG9yV2l0aGAsIGB6aXBgLFxuICAgICAqIGB6aXBPYmplY3RgLCBgemlwT2JqZWN0RGVlcGAsIGFuZCBgemlwV2l0aGBcbiAgICAgKlxuICAgICAqIFRoZSB3cmFwcGVyIG1ldGhvZHMgdGhhdCBhcmUgKipub3QqKiBjaGFpbmFibGUgYnkgZGVmYXVsdCBhcmU6XG4gICAgICogYGFkZGAsIGBhdHRlbXB0YCwgYGNhbWVsQ2FzZWAsIGBjYXBpdGFsaXplYCwgYGNlaWxgLCBgY2xhbXBgLCBgY2xvbmVgLFxuICAgICAqIGBjbG9uZURlZXBgLCBgY2xvbmVEZWVwV2l0aGAsIGBjbG9uZVdpdGhgLCBgY29uZm9ybXNUb2AsIGBkZWJ1cnJgLFxuICAgICAqIGBkZWZhdWx0VG9gLCBgZGl2aWRlYCwgYGVhY2hgLCBgZWFjaFJpZ2h0YCwgYGVuZHNXaXRoYCwgYGVxYCwgYGVzY2FwZWAsXG4gICAgICogYGVzY2FwZVJlZ0V4cGAsIGBldmVyeWAsIGBmaW5kYCwgYGZpbmRJbmRleGAsIGBmaW5kS2V5YCwgYGZpbmRMYXN0YCxcbiAgICAgKiBgZmluZExhc3RJbmRleGAsIGBmaW5kTGFzdEtleWAsIGBmaXJzdGAsIGBmbG9vcmAsIGBmb3JFYWNoYCwgYGZvckVhY2hSaWdodGAsXG4gICAgICogYGZvckluYCwgYGZvckluUmlnaHRgLCBgZm9yT3duYCwgYGZvck93blJpZ2h0YCwgYGdldGAsIGBndGAsIGBndGVgLCBgaGFzYCxcbiAgICAgKiBgaGFzSW5gLCBgaGVhZGAsIGBpZGVudGl0eWAsIGBpbmNsdWRlc2AsIGBpbmRleE9mYCwgYGluUmFuZ2VgLCBgaW52b2tlYCxcbiAgICAgKiBgaXNBcmd1bWVudHNgLCBgaXNBcnJheWAsIGBpc0FycmF5QnVmZmVyYCwgYGlzQXJyYXlMaWtlYCwgYGlzQXJyYXlMaWtlT2JqZWN0YCxcbiAgICAgKiBgaXNCb29sZWFuYCwgYGlzQnVmZmVyYCwgYGlzRGF0ZWAsIGBpc0VsZW1lbnRgLCBgaXNFbXB0eWAsIGBpc0VxdWFsYCxcbiAgICAgKiBgaXNFcXVhbFdpdGhgLCBgaXNFcnJvcmAsIGBpc0Zpbml0ZWAsIGBpc0Z1bmN0aW9uYCwgYGlzSW50ZWdlcmAsIGBpc0xlbmd0aGAsXG4gICAgICogYGlzTWFwYCwgYGlzTWF0Y2hgLCBgaXNNYXRjaFdpdGhgLCBgaXNOYU5gLCBgaXNOYXRpdmVgLCBgaXNOaWxgLCBgaXNOdWxsYCxcbiAgICAgKiBgaXNOdW1iZXJgLCBgaXNPYmplY3RgLCBgaXNPYmplY3RMaWtlYCwgYGlzUGxhaW5PYmplY3RgLCBgaXNSZWdFeHBgLFxuICAgICAqIGBpc1NhZmVJbnRlZ2VyYCwgYGlzU2V0YCwgYGlzU3RyaW5nYCwgYGlzVW5kZWZpbmVkYCwgYGlzVHlwZWRBcnJheWAsXG4gICAgICogYGlzV2Vha01hcGAsIGBpc1dlYWtTZXRgLCBgam9pbmAsIGBrZWJhYkNhc2VgLCBgbGFzdGAsIGBsYXN0SW5kZXhPZmAsXG4gICAgICogYGxvd2VyQ2FzZWAsIGBsb3dlckZpcnN0YCwgYGx0YCwgYGx0ZWAsIGBtYXhgLCBgbWF4QnlgLCBgbWVhbmAsIGBtZWFuQnlgLFxuICAgICAqIGBtaW5gLCBgbWluQnlgLCBgbXVsdGlwbHlgLCBgbm9Db25mbGljdGAsIGBub29wYCwgYG5vd2AsIGBudGhgLCBgcGFkYCxcbiAgICAgKiBgcGFkRW5kYCwgYHBhZFN0YXJ0YCwgYHBhcnNlSW50YCwgYHBvcGAsIGByYW5kb21gLCBgcmVkdWNlYCwgYHJlZHVjZVJpZ2h0YCxcbiAgICAgKiBgcmVwZWF0YCwgYHJlc3VsdGAsIGByb3VuZGAsIGBydW5JbkNvbnRleHRgLCBgc2FtcGxlYCwgYHNoaWZ0YCwgYHNpemVgLFxuICAgICAqIGBzbmFrZUNhc2VgLCBgc29tZWAsIGBzb3J0ZWRJbmRleGAsIGBzb3J0ZWRJbmRleEJ5YCwgYHNvcnRlZExhc3RJbmRleGAsXG4gICAgICogYHNvcnRlZExhc3RJbmRleEJ5YCwgYHN0YXJ0Q2FzZWAsIGBzdGFydHNXaXRoYCwgYHN0dWJBcnJheWAsIGBzdHViRmFsc2VgLFxuICAgICAqIGBzdHViT2JqZWN0YCwgYHN0dWJTdHJpbmdgLCBgc3R1YlRydWVgLCBgc3VidHJhY3RgLCBgc3VtYCwgYHN1bUJ5YCxcbiAgICAgKiBgdGVtcGxhdGVgLCBgdGltZXNgLCBgdG9GaW5pdGVgLCBgdG9JbnRlZ2VyYCwgYHRvSlNPTmAsIGB0b0xlbmd0aGAsXG4gICAgICogYHRvTG93ZXJgLCBgdG9OdW1iZXJgLCBgdG9TYWZlSW50ZWdlcmAsIGB0b1N0cmluZ2AsIGB0b1VwcGVyYCwgYHRyaW1gLFxuICAgICAqIGB0cmltRW5kYCwgYHRyaW1TdGFydGAsIGB0cnVuY2F0ZWAsIGB1bmVzY2FwZWAsIGB1bmlxdWVJZGAsIGB1cHBlckNhc2VgLFxuICAgICAqIGB1cHBlckZpcnN0YCwgYHZhbHVlYCwgYW5kIGB3b3Jkc2BcbiAgICAgKlxuICAgICAqIEBuYW1lIF9cbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gd3JhcCBpbiBhIGBsb2Rhc2hgIGluc3RhbmNlLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBgbG9kYXNoYCB3cmFwcGVyIGluc3RhbmNlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBzcXVhcmUobikge1xuICAgICAqICAgcmV0dXJuIG4gKiBuO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciB3cmFwcGVkID0gXyhbMSwgMiwgM10pO1xuICAgICAqXG4gICAgICogLy8gUmV0dXJucyBhbiB1bndyYXBwZWQgdmFsdWUuXG4gICAgICogd3JhcHBlZC5yZWR1Y2UoXy5hZGQpO1xuICAgICAqIC8vID0+IDZcbiAgICAgKlxuICAgICAqIC8vIFJldHVybnMgYSB3cmFwcGVkIHZhbHVlLlxuICAgICAqIHZhciBzcXVhcmVzID0gd3JhcHBlZC5tYXAoc3F1YXJlKTtcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheShzcXVhcmVzKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5KHNxdWFyZXMudmFsdWUoKSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxvZGFzaCh2YWx1ZSkge1xuICAgICAgaWYgKGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgIWlzQXJyYXkodmFsdWUpICYmICEodmFsdWUgaW5zdGFuY2VvZiBMYXp5V3JhcHBlcikpIHtcbiAgICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgTG9kYXNoV3JhcHBlcikge1xuICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgJ19fd3JhcHBlZF9fJykpIHtcbiAgICAgICAgICByZXR1cm4gd3JhcHBlckNsb25lKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG5ldyBMb2Rhc2hXcmFwcGVyKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5jcmVhdGVgIHdpdGhvdXQgc3VwcG9ydCBmb3IgYXNzaWduaW5nXG4gICAgICogcHJvcGVydGllcyB0byB0aGUgY3JlYXRlZCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBwcm90byBUaGUgb2JqZWN0IHRvIGluaGVyaXQgZnJvbS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqL1xuICAgIHZhciBiYXNlQ3JlYXRlID0gKGZ1bmN0aW9uKCkge1xuICAgICAgZnVuY3Rpb24gb2JqZWN0KCkge31cbiAgICAgIHJldHVybiBmdW5jdGlvbihwcm90bykge1xuICAgICAgICBpZiAoIWlzT2JqZWN0KHByb3RvKSkge1xuICAgICAgICAgIHJldHVybiB7fTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob2JqZWN0Q3JlYXRlKSB7XG4gICAgICAgICAgcmV0dXJuIG9iamVjdENyZWF0ZShwcm90byk7XG4gICAgICAgIH1cbiAgICAgICAgb2JqZWN0LnByb3RvdHlwZSA9IHByb3RvO1xuICAgICAgICB2YXIgcmVzdWx0ID0gbmV3IG9iamVjdDtcbiAgICAgICAgb2JqZWN0LnByb3RvdHlwZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH07XG4gICAgfSgpKTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBmdW5jdGlvbiB3aG9zZSBwcm90b3R5cGUgY2hhaW4gc2VxdWVuY2Ugd3JhcHBlcnMgaW5oZXJpdCBmcm9tLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlTG9kYXNoKCkge1xuICAgICAgLy8gTm8gb3BlcmF0aW9uIHBlcmZvcm1lZC5cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBjb25zdHJ1Y3RvciBmb3IgY3JlYXRpbmcgYGxvZGFzaGAgd3JhcHBlciBvYmplY3RzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byB3cmFwLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2NoYWluQWxsXSBFbmFibGUgZXhwbGljaXQgbWV0aG9kIGNoYWluIHNlcXVlbmNlcy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBMb2Rhc2hXcmFwcGVyKHZhbHVlLCBjaGFpbkFsbCkge1xuICAgICAgdGhpcy5fX3dyYXBwZWRfXyA9IHZhbHVlO1xuICAgICAgdGhpcy5fX2FjdGlvbnNfXyA9IFtdO1xuICAgICAgdGhpcy5fX2NoYWluX18gPSAhIWNoYWluQWxsO1xuICAgICAgdGhpcy5fX2luZGV4X18gPSAwO1xuICAgICAgdGhpcy5fX3ZhbHVlc19fID0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEJ5IGRlZmF1bHQsIHRoZSB0ZW1wbGF0ZSBkZWxpbWl0ZXJzIHVzZWQgYnkgbG9kYXNoIGFyZSBsaWtlIHRob3NlIGluXG4gICAgICogZW1iZWRkZWQgUnVieSAoRVJCKSBhcyB3ZWxsIGFzIEVTMjAxNSB0ZW1wbGF0ZSBzdHJpbmdzLiBDaGFuZ2UgdGhlXG4gICAgICogZm9sbG93aW5nIHRlbXBsYXRlIHNldHRpbmdzIHRvIHVzZSBhbHRlcm5hdGl2ZSBkZWxpbWl0ZXJzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHR5cGUge09iamVjdH1cbiAgICAgKi9cbiAgICBsb2Rhc2gudGVtcGxhdGVTZXR0aW5ncyA9IHtcblxuICAgICAgLyoqXG4gICAgICAgKiBVc2VkIHRvIGRldGVjdCBgZGF0YWAgcHJvcGVydHkgdmFsdWVzIHRvIGJlIEhUTUwtZXNjYXBlZC5cbiAgICAgICAqXG4gICAgICAgKiBAbWVtYmVyT2YgXy50ZW1wbGF0ZVNldHRpbmdzXG4gICAgICAgKiBAdHlwZSB7UmVnRXhwfVxuICAgICAgICovXG4gICAgICAnZXNjYXBlJzogcmVFc2NhcGUsXG5cbiAgICAgIC8qKlxuICAgICAgICogVXNlZCB0byBkZXRlY3QgY29kZSB0byBiZSBldmFsdWF0ZWQuXG4gICAgICAgKlxuICAgICAgICogQG1lbWJlck9mIF8udGVtcGxhdGVTZXR0aW5nc1xuICAgICAgICogQHR5cGUge1JlZ0V4cH1cbiAgICAgICAqL1xuICAgICAgJ2V2YWx1YXRlJzogcmVFdmFsdWF0ZSxcblxuICAgICAgLyoqXG4gICAgICAgKiBVc2VkIHRvIGRldGVjdCBgZGF0YWAgcHJvcGVydHkgdmFsdWVzIHRvIGluamVjdC5cbiAgICAgICAqXG4gICAgICAgKiBAbWVtYmVyT2YgXy50ZW1wbGF0ZVNldHRpbmdzXG4gICAgICAgKiBAdHlwZSB7UmVnRXhwfVxuICAgICAgICovXG4gICAgICAnaW50ZXJwb2xhdGUnOiByZUludGVycG9sYXRlLFxuXG4gICAgICAvKipcbiAgICAgICAqIFVzZWQgdG8gcmVmZXJlbmNlIHRoZSBkYXRhIG9iamVjdCBpbiB0aGUgdGVtcGxhdGUgdGV4dC5cbiAgICAgICAqXG4gICAgICAgKiBAbWVtYmVyT2YgXy50ZW1wbGF0ZVNldHRpbmdzXG4gICAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAgICovXG4gICAgICAndmFyaWFibGUnOiAnJyxcblxuICAgICAgLyoqXG4gICAgICAgKiBVc2VkIHRvIGltcG9ydCB2YXJpYWJsZXMgaW50byB0aGUgY29tcGlsZWQgdGVtcGxhdGUuXG4gICAgICAgKlxuICAgICAgICogQG1lbWJlck9mIF8udGVtcGxhdGVTZXR0aW5nc1xuICAgICAgICogQHR5cGUge09iamVjdH1cbiAgICAgICAqL1xuICAgICAgJ2ltcG9ydHMnOiB7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEEgcmVmZXJlbmNlIHRvIHRoZSBgbG9kYXNoYCBmdW5jdGlvbi5cbiAgICAgICAgICpcbiAgICAgICAgICogQG1lbWJlck9mIF8udGVtcGxhdGVTZXR0aW5ncy5pbXBvcnRzXG4gICAgICAgICAqIEB0eXBlIHtGdW5jdGlvbn1cbiAgICAgICAgICovXG4gICAgICAgICdfJzogbG9kYXNoXG4gICAgICB9XG4gICAgfTtcblxuICAgIC8vIEVuc3VyZSB3cmFwcGVycyBhcmUgaW5zdGFuY2VzIG9mIGBiYXNlTG9kYXNoYC5cbiAgICBsb2Rhc2gucHJvdG90eXBlID0gYmFzZUxvZGFzaC5wcm90b3R5cGU7XG4gICAgbG9kYXNoLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGxvZGFzaDtcblxuICAgIExvZGFzaFdyYXBwZXIucHJvdG90eXBlID0gYmFzZUNyZWF0ZShiYXNlTG9kYXNoLnByb3RvdHlwZSk7XG4gICAgTG9kYXNoV3JhcHBlci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBMb2Rhc2hXcmFwcGVyO1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGxhenkgd3JhcHBlciBvYmplY3Qgd2hpY2ggd3JhcHMgYHZhbHVlYCB0byBlbmFibGUgbGF6eSBldmFsdWF0aW9uLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byB3cmFwLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIExhenlXcmFwcGVyKHZhbHVlKSB7XG4gICAgICB0aGlzLl9fd3JhcHBlZF9fID0gdmFsdWU7XG4gICAgICB0aGlzLl9fYWN0aW9uc19fID0gW107XG4gICAgICB0aGlzLl9fZGlyX18gPSAxO1xuICAgICAgdGhpcy5fX2ZpbHRlcmVkX18gPSBmYWxzZTtcbiAgICAgIHRoaXMuX19pdGVyYXRlZXNfXyA9IFtdO1xuICAgICAgdGhpcy5fX3Rha2VDb3VudF9fID0gTUFYX0FSUkFZX0xFTkdUSDtcbiAgICAgIHRoaXMuX192aWV3c19fID0gW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNsb25lIG9mIHRoZSBsYXp5IHdyYXBwZXIgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBjbG9uZVxuICAgICAqIEBtZW1iZXJPZiBMYXp5V3JhcHBlclxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNsb25lZCBgTGF6eVdyYXBwZXJgIG9iamVjdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsYXp5Q2xvbmUoKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gbmV3IExhenlXcmFwcGVyKHRoaXMuX193cmFwcGVkX18pO1xuICAgICAgcmVzdWx0Ll9fYWN0aW9uc19fID0gY29weUFycmF5KHRoaXMuX19hY3Rpb25zX18pO1xuICAgICAgcmVzdWx0Ll9fZGlyX18gPSB0aGlzLl9fZGlyX187XG4gICAgICByZXN1bHQuX19maWx0ZXJlZF9fID0gdGhpcy5fX2ZpbHRlcmVkX187XG4gICAgICByZXN1bHQuX19pdGVyYXRlZXNfXyA9IGNvcHlBcnJheSh0aGlzLl9faXRlcmF0ZWVzX18pO1xuICAgICAgcmVzdWx0Ll9fdGFrZUNvdW50X18gPSB0aGlzLl9fdGFrZUNvdW50X187XG4gICAgICByZXN1bHQuX192aWV3c19fID0gY29weUFycmF5KHRoaXMuX192aWV3c19fKTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV2ZXJzZXMgdGhlIGRpcmVjdGlvbiBvZiBsYXp5IGl0ZXJhdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgcmV2ZXJzZVxuICAgICAqIEBtZW1iZXJPZiBMYXp5V3JhcHBlclxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyByZXZlcnNlZCBgTGF6eVdyYXBwZXJgIG9iamVjdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsYXp5UmV2ZXJzZSgpIHtcbiAgICAgIGlmICh0aGlzLl9fZmlsdGVyZWRfXykge1xuICAgICAgICB2YXIgcmVzdWx0ID0gbmV3IExhenlXcmFwcGVyKHRoaXMpO1xuICAgICAgICByZXN1bHQuX19kaXJfXyA9IC0xO1xuICAgICAgICByZXN1bHQuX19maWx0ZXJlZF9fID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdCA9IHRoaXMuY2xvbmUoKTtcbiAgICAgICAgcmVzdWx0Ll9fZGlyX18gKj0gLTE7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEV4dHJhY3RzIHRoZSB1bndyYXBwZWQgdmFsdWUgZnJvbSBpdHMgbGF6eSB3cmFwcGVyLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSB2YWx1ZVxuICAgICAqIEBtZW1iZXJPZiBMYXp5V3JhcHBlclxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSB1bndyYXBwZWQgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbGF6eVZhbHVlKCkge1xuICAgICAgdmFyIGFycmF5ID0gdGhpcy5fX3dyYXBwZWRfXy52YWx1ZSgpLFxuICAgICAgICAgIGRpciA9IHRoaXMuX19kaXJfXyxcbiAgICAgICAgICBpc0FyciA9IGlzQXJyYXkoYXJyYXkpLFxuICAgICAgICAgIGlzUmlnaHQgPSBkaXIgPCAwLFxuICAgICAgICAgIGFyckxlbmd0aCA9IGlzQXJyID8gYXJyYXkubGVuZ3RoIDogMCxcbiAgICAgICAgICB2aWV3ID0gZ2V0VmlldygwLCBhcnJMZW5ndGgsIHRoaXMuX192aWV3c19fKSxcbiAgICAgICAgICBzdGFydCA9IHZpZXcuc3RhcnQsXG4gICAgICAgICAgZW5kID0gdmlldy5lbmQsXG4gICAgICAgICAgbGVuZ3RoID0gZW5kIC0gc3RhcnQsXG4gICAgICAgICAgaW5kZXggPSBpc1JpZ2h0ID8gZW5kIDogKHN0YXJ0IC0gMSksXG4gICAgICAgICAgaXRlcmF0ZWVzID0gdGhpcy5fX2l0ZXJhdGVlc19fLFxuICAgICAgICAgIGl0ZXJMZW5ndGggPSBpdGVyYXRlZXMubGVuZ3RoLFxuICAgICAgICAgIHJlc0luZGV4ID0gMCxcbiAgICAgICAgICB0YWtlQ291bnQgPSBuYXRpdmVNaW4obGVuZ3RoLCB0aGlzLl9fdGFrZUNvdW50X18pO1xuXG4gICAgICBpZiAoIWlzQXJyIHx8ICghaXNSaWdodCAmJiBhcnJMZW5ndGggPT0gbGVuZ3RoICYmIHRha2VDb3VudCA9PSBsZW5ndGgpKSB7XG4gICAgICAgIHJldHVybiBiYXNlV3JhcHBlclZhbHVlKGFycmF5LCB0aGlzLl9fYWN0aW9uc19fKTtcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHQgPSBbXTtcblxuICAgICAgb3V0ZXI6XG4gICAgICB3aGlsZSAobGVuZ3RoLS0gJiYgcmVzSW5kZXggPCB0YWtlQ291bnQpIHtcbiAgICAgICAgaW5kZXggKz0gZGlyO1xuXG4gICAgICAgIHZhciBpdGVySW5kZXggPSAtMSxcbiAgICAgICAgICAgIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuXG4gICAgICAgIHdoaWxlICgrK2l0ZXJJbmRleCA8IGl0ZXJMZW5ndGgpIHtcbiAgICAgICAgICB2YXIgZGF0YSA9IGl0ZXJhdGVlc1tpdGVySW5kZXhdLFxuICAgICAgICAgICAgICBpdGVyYXRlZSA9IGRhdGEuaXRlcmF0ZWUsXG4gICAgICAgICAgICAgIHR5cGUgPSBkYXRhLnR5cGUsXG4gICAgICAgICAgICAgIGNvbXB1dGVkID0gaXRlcmF0ZWUodmFsdWUpO1xuXG4gICAgICAgICAgaWYgKHR5cGUgPT0gTEFaWV9NQVBfRkxBRykge1xuICAgICAgICAgICAgdmFsdWUgPSBjb21wdXRlZDtcbiAgICAgICAgICB9IGVsc2UgaWYgKCFjb21wdXRlZCkge1xuICAgICAgICAgICAgaWYgKHR5cGUgPT0gTEFaWV9GSUxURVJfRkxBRykge1xuICAgICAgICAgICAgICBjb250aW51ZSBvdXRlcjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGJyZWFrIG91dGVyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXN1bHRbcmVzSW5kZXgrK10gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLy8gRW5zdXJlIGBMYXp5V3JhcHBlcmAgaXMgYW4gaW5zdGFuY2Ugb2YgYGJhc2VMb2Rhc2hgLlxuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZSA9IGJhc2VDcmVhdGUoYmFzZUxvZGFzaC5wcm90b3R5cGUpO1xuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IExhenlXcmFwcGVyO1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGhhc2ggb2JqZWN0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBIYXNoKGVudHJpZXMpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IGVudHJpZXMgPT0gbnVsbCA/IDAgOiBlbnRyaWVzLmxlbmd0aDtcblxuICAgICAgdGhpcy5jbGVhcigpO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gZW50cmllc1tpbmRleF07XG4gICAgICAgIHRoaXMuc2V0KGVudHJ5WzBdLCBlbnRyeVsxXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgaGFzaC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgY2xlYXJcbiAgICAgKiBAbWVtYmVyT2YgSGFzaFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGhhc2hDbGVhcigpIHtcbiAgICAgIHRoaXMuX19kYXRhX18gPSBuYXRpdmVDcmVhdGUgPyBuYXRpdmVDcmVhdGUobnVsbCkgOiB7fTtcbiAgICAgIHRoaXMuc2l6ZSA9IDA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIGhhc2guXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGRlbGV0ZVxuICAgICAqIEBtZW1iZXJPZiBIYXNoXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGhhc2ggVGhlIGhhc2ggdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBoYXNoRGVsZXRlKGtleSkge1xuICAgICAgdmFyIHJlc3VsdCA9IHRoaXMuaGFzKGtleSkgJiYgZGVsZXRlIHRoaXMuX19kYXRhX19ba2V5XTtcbiAgICAgIHRoaXMuc2l6ZSAtPSByZXN1bHQgPyAxIDogMDtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgaGFzaCB2YWx1ZSBmb3IgYGtleWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGdldFxuICAgICAqIEBtZW1iZXJPZiBIYXNoXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGhhc2hHZXQoa2V5KSB7XG4gICAgICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gICAgICBpZiAobmF0aXZlQ3JlYXRlKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBkYXRhW2tleV07XG4gICAgICAgIHJldHVybiByZXN1bHQgPT09IEhBU0hfVU5ERUZJTkVEID8gdW5kZWZpbmVkIDogcmVzdWx0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwoZGF0YSwga2V5KSA/IGRhdGFba2V5XSA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYSBoYXNoIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGhhc1xuICAgICAqIEBtZW1iZXJPZiBIYXNoXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGhhc2hIYXMoa2V5KSB7XG4gICAgICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gICAgICByZXR1cm4gbmF0aXZlQ3JlYXRlID8gKGRhdGFba2V5XSAhPT0gdW5kZWZpbmVkKSA6IGhhc093blByb3BlcnR5LmNhbGwoZGF0YSwga2V5KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBoYXNoIGBrZXlgIHRvIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIHNldFxuICAgICAqIEBtZW1iZXJPZiBIYXNoXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGhhc2ggaW5zdGFuY2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaGFzaFNldChrZXksIHZhbHVlKSB7XG4gICAgICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gICAgICB0aGlzLnNpemUgKz0gdGhpcy5oYXMoa2V5KSA/IDAgOiAxO1xuICAgICAgZGF0YVtrZXldID0gKG5hdGl2ZUNyZWF0ZSAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkKSA/IEhBU0hfVU5ERUZJTkVEIDogdmFsdWU7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvLyBBZGQgbWV0aG9kcyB0byBgSGFzaGAuXG4gICAgSGFzaC5wcm90b3R5cGUuY2xlYXIgPSBoYXNoQ2xlYXI7XG4gICAgSGFzaC5wcm90b3R5cGVbJ2RlbGV0ZSddID0gaGFzaERlbGV0ZTtcbiAgICBIYXNoLnByb3RvdHlwZS5nZXQgPSBoYXNoR2V0O1xuICAgIEhhc2gucHJvdG90eXBlLmhhcyA9IGhhc2hIYXM7XG4gICAgSGFzaC5wcm90b3R5cGUuc2V0ID0gaGFzaFNldDtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gbGlzdCBjYWNoZSBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIExpc3RDYWNoZShlbnRyaWVzKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBlbnRyaWVzID09IG51bGwgPyAwIDogZW50cmllcy5sZW5ndGg7XG5cbiAgICAgIHRoaXMuY2xlYXIoKTtcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IGVudHJpZXNbaW5kZXhdO1xuICAgICAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIGxpc3QgY2FjaGUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGNsZWFyXG4gICAgICogQG1lbWJlck9mIExpc3RDYWNoZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxpc3RDYWNoZUNsZWFyKCkge1xuICAgICAgdGhpcy5fX2RhdGFfXyA9IFtdO1xuICAgICAgdGhpcy5zaXplID0gMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgbGlzdCBjYWNoZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgZGVsZXRlXG4gICAgICogQG1lbWJlck9mIExpc3RDYWNoZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsaXN0Q2FjaGVEZWxldGUoa2V5KSB7XG4gICAgICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICAgICAgaW5kZXggPSBhc3NvY0luZGV4T2YoZGF0YSwga2V5KTtcblxuICAgICAgaWYgKGluZGV4IDwgMCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgbGFzdEluZGV4ID0gZGF0YS5sZW5ndGggLSAxO1xuICAgICAgaWYgKGluZGV4ID09IGxhc3RJbmRleCkge1xuICAgICAgICBkYXRhLnBvcCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3BsaWNlLmNhbGwoZGF0YSwgaW5kZXgsIDEpO1xuICAgICAgfVxuICAgICAgLS10aGlzLnNpemU7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBsaXN0IGNhY2hlIHZhbHVlIGZvciBga2V5YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgZ2V0XG4gICAgICogQG1lbWJlck9mIExpc3RDYWNoZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsaXN0Q2FjaGVHZXQoa2V5KSB7XG4gICAgICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICAgICAgaW5kZXggPSBhc3NvY0luZGV4T2YoZGF0YSwga2V5KTtcblxuICAgICAgcmV0dXJuIGluZGV4IDwgMCA/IHVuZGVmaW5lZCA6IGRhdGFbaW5kZXhdWzFdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBhIGxpc3QgY2FjaGUgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgaGFzXG4gICAgICogQG1lbWJlck9mIExpc3RDYWNoZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsaXN0Q2FjaGVIYXMoa2V5KSB7XG4gICAgICByZXR1cm4gYXNzb2NJbmRleE9mKHRoaXMuX19kYXRhX18sIGtleSkgPiAtMTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBsaXN0IGNhY2hlIGBrZXlgIHRvIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIHNldFxuICAgICAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbGlzdCBjYWNoZSBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsaXN0Q2FjaGVTZXQoa2V5LCB2YWx1ZSkge1xuICAgICAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgICAgIGluZGV4ID0gYXNzb2NJbmRleE9mKGRhdGEsIGtleSk7XG5cbiAgICAgIGlmIChpbmRleCA8IDApIHtcbiAgICAgICAgKyt0aGlzLnNpemU7XG4gICAgICAgIGRhdGEucHVzaChba2V5LCB2YWx1ZV0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGF0YVtpbmRleF1bMV0gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8vIEFkZCBtZXRob2RzIHRvIGBMaXN0Q2FjaGVgLlxuICAgIExpc3RDYWNoZS5wcm90b3R5cGUuY2xlYXIgPSBsaXN0Q2FjaGVDbGVhcjtcbiAgICBMaXN0Q2FjaGUucHJvdG90eXBlWydkZWxldGUnXSA9IGxpc3RDYWNoZURlbGV0ZTtcbiAgICBMaXN0Q2FjaGUucHJvdG90eXBlLmdldCA9IGxpc3RDYWNoZUdldDtcbiAgICBMaXN0Q2FjaGUucHJvdG90eXBlLmhhcyA9IGxpc3RDYWNoZUhhcztcbiAgICBMaXN0Q2FjaGUucHJvdG90eXBlLnNldCA9IGxpc3RDYWNoZVNldDtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBtYXAgY2FjaGUgb2JqZWN0IHRvIHN0b3JlIGtleS12YWx1ZSBwYWlycy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gTWFwQ2FjaGUoZW50cmllcykge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gZW50cmllcyA9PSBudWxsID8gMCA6IGVudHJpZXMubGVuZ3RoO1xuXG4gICAgICB0aGlzLmNsZWFyKCk7XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICAgICAgdGhpcy5zZXQoZW50cnlbMF0sIGVudHJ5WzFdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBtYXAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGNsZWFyXG4gICAgICogQG1lbWJlck9mIE1hcENhY2hlXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWFwQ2FjaGVDbGVhcigpIHtcbiAgICAgIHRoaXMuc2l6ZSA9IDA7XG4gICAgICB0aGlzLl9fZGF0YV9fID0ge1xuICAgICAgICAnaGFzaCc6IG5ldyBIYXNoLFxuICAgICAgICAnbWFwJzogbmV3IChNYXAgfHwgTGlzdENhY2hlKSxcbiAgICAgICAgJ3N0cmluZyc6IG5ldyBIYXNoXG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBtYXAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGRlbGV0ZVxuICAgICAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXBDYWNoZURlbGV0ZShrZXkpIHtcbiAgICAgIHZhciByZXN1bHQgPSBnZXRNYXBEYXRhKHRoaXMsIGtleSlbJ2RlbGV0ZSddKGtleSk7XG4gICAgICB0aGlzLnNpemUgLT0gcmVzdWx0ID8gMSA6IDA7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIG1hcCB2YWx1ZSBmb3IgYGtleWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGdldFxuICAgICAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXBDYWNoZUdldChrZXkpIHtcbiAgICAgIHJldHVybiBnZXRNYXBEYXRhKHRoaXMsIGtleSkuZ2V0KGtleSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGEgbWFwIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGhhc1xuICAgICAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXBDYWNoZUhhcyhrZXkpIHtcbiAgICAgIHJldHVybiBnZXRNYXBEYXRhKHRoaXMsIGtleSkuaGFzKGtleSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgbWFwIGBrZXlgIHRvIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIHNldFxuICAgICAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBtYXAgY2FjaGUgaW5zdGFuY2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWFwQ2FjaGVTZXQoa2V5LCB2YWx1ZSkge1xuICAgICAgdmFyIGRhdGEgPSBnZXRNYXBEYXRhKHRoaXMsIGtleSksXG4gICAgICAgICAgc2l6ZSA9IGRhdGEuc2l6ZTtcblxuICAgICAgZGF0YS5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgICB0aGlzLnNpemUgKz0gZGF0YS5zaXplID09IHNpemUgPyAwIDogMTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8vIEFkZCBtZXRob2RzIHRvIGBNYXBDYWNoZWAuXG4gICAgTWFwQ2FjaGUucHJvdG90eXBlLmNsZWFyID0gbWFwQ2FjaGVDbGVhcjtcbiAgICBNYXBDYWNoZS5wcm90b3R5cGVbJ2RlbGV0ZSddID0gbWFwQ2FjaGVEZWxldGU7XG4gICAgTWFwQ2FjaGUucHJvdG90eXBlLmdldCA9IG1hcENhY2hlR2V0O1xuICAgIE1hcENhY2hlLnByb3RvdHlwZS5oYXMgPSBtYXBDYWNoZUhhcztcbiAgICBNYXBDYWNoZS5wcm90b3R5cGUuc2V0ID0gbWFwQ2FjaGVTZXQ7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgY2FjaGUgb2JqZWN0IHRvIHN0b3JlIHVuaXF1ZSB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFt2YWx1ZXNdIFRoZSB2YWx1ZXMgdG8gY2FjaGUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gU2V0Q2FjaGUodmFsdWVzKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSB2YWx1ZXMgPT0gbnVsbCA/IDAgOiB2YWx1ZXMubGVuZ3RoO1xuXG4gICAgICB0aGlzLl9fZGF0YV9fID0gbmV3IE1hcENhY2hlO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdGhpcy5hZGQodmFsdWVzW2luZGV4XSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWRkcyBgdmFsdWVgIHRvIHRoZSBhcnJheSBjYWNoZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgYWRkXG4gICAgICogQG1lbWJlck9mIFNldENhY2hlXG4gICAgICogQGFsaWFzIHB1c2hcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjYWNoZS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjYWNoZSBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzZXRDYWNoZUFkZCh2YWx1ZSkge1xuICAgICAgdGhpcy5fX2RhdGFfXy5zZXQodmFsdWUsIEhBU0hfVU5ERUZJTkVEKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGluIHRoZSBhcnJheSBjYWNoZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgaGFzXG4gICAgICogQG1lbWJlck9mIFNldENhY2hlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGZvdW5kLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2V0Q2FjaGVIYXModmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzLl9fZGF0YV9fLmhhcyh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLy8gQWRkIG1ldGhvZHMgdG8gYFNldENhY2hlYC5cbiAgICBTZXRDYWNoZS5wcm90b3R5cGUuYWRkID0gU2V0Q2FjaGUucHJvdG90eXBlLnB1c2ggPSBzZXRDYWNoZUFkZDtcbiAgICBTZXRDYWNoZS5wcm90b3R5cGUuaGFzID0gc2V0Q2FjaGVIYXM7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc3RhY2sgY2FjaGUgb2JqZWN0IHRvIHN0b3JlIGtleS12YWx1ZSBwYWlycy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gU3RhY2soZW50cmllcykge1xuICAgICAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fID0gbmV3IExpc3RDYWNoZShlbnRyaWVzKTtcbiAgICAgIHRoaXMuc2l6ZSA9IGRhdGEuc2l6ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBzdGFjay5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgY2xlYXJcbiAgICAgKiBAbWVtYmVyT2YgU3RhY2tcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdGFja0NsZWFyKCkge1xuICAgICAgdGhpcy5fX2RhdGFfXyA9IG5ldyBMaXN0Q2FjaGU7XG4gICAgICB0aGlzLnNpemUgPSAwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBzdGFjay5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgZGVsZXRlXG4gICAgICogQG1lbWJlck9mIFN0YWNrXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN0YWNrRGVsZXRlKGtleSkge1xuICAgICAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgICAgIHJlc3VsdCA9IGRhdGFbJ2RlbGV0ZSddKGtleSk7XG5cbiAgICAgIHRoaXMuc2l6ZSA9IGRhdGEuc2l6ZTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgc3RhY2sgdmFsdWUgZm9yIGBrZXlgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBnZXRcbiAgICAgKiBAbWVtYmVyT2YgU3RhY2tcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3RhY2tHZXQoa2V5KSB7XG4gICAgICByZXR1cm4gdGhpcy5fX2RhdGFfXy5nZXQoa2V5KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYSBzdGFjayB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBoYXNcbiAgICAgKiBAbWVtYmVyT2YgU3RhY2tcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3RhY2tIYXMoa2V5KSB7XG4gICAgICByZXR1cm4gdGhpcy5fX2RhdGFfXy5oYXMoa2V5KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBzdGFjayBga2V5YCB0byBgdmFsdWVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBzZXRcbiAgICAgKiBAbWVtYmVyT2YgU3RhY2tcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgc3RhY2sgY2FjaGUgaW5zdGFuY2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3RhY2tTZXQoa2V5LCB2YWx1ZSkge1xuICAgICAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICAgICAgaWYgKGRhdGEgaW5zdGFuY2VvZiBMaXN0Q2FjaGUpIHtcbiAgICAgICAgdmFyIHBhaXJzID0gZGF0YS5fX2RhdGFfXztcbiAgICAgICAgaWYgKCFNYXAgfHwgKHBhaXJzLmxlbmd0aCA8IExBUkdFX0FSUkFZX1NJWkUgLSAxKSkge1xuICAgICAgICAgIHBhaXJzLnB1c2goW2tleSwgdmFsdWVdKTtcbiAgICAgICAgICB0aGlzLnNpemUgPSArK2RhdGEuc2l6ZTtcbiAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgICBkYXRhID0gdGhpcy5fX2RhdGFfXyA9IG5ldyBNYXBDYWNoZShwYWlycyk7XG4gICAgICB9XG4gICAgICBkYXRhLnNldChrZXksIHZhbHVlKTtcbiAgICAgIHRoaXMuc2l6ZSA9IGRhdGEuc2l6ZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8vIEFkZCBtZXRob2RzIHRvIGBTdGFja2AuXG4gICAgU3RhY2sucHJvdG90eXBlLmNsZWFyID0gc3RhY2tDbGVhcjtcbiAgICBTdGFjay5wcm90b3R5cGVbJ2RlbGV0ZSddID0gc3RhY2tEZWxldGU7XG4gICAgU3RhY2sucHJvdG90eXBlLmdldCA9IHN0YWNrR2V0O1xuICAgIFN0YWNrLnByb3RvdHlwZS5oYXMgPSBzdGFja0hhcztcbiAgICBTdGFjay5wcm90b3R5cGUuc2V0ID0gc3RhY2tTZXQ7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIG9mIHRoZSBhcnJheS1saWtlIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gaW5oZXJpdGVkIFNwZWNpZnkgcmV0dXJuaW5nIGluaGVyaXRlZCBwcm9wZXJ0eSBuYW1lcy5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFycmF5TGlrZUtleXModmFsdWUsIGluaGVyaXRlZCkge1xuICAgICAgdmFyIGlzQXJyID0gaXNBcnJheSh2YWx1ZSksXG4gICAgICAgICAgaXNBcmcgPSAhaXNBcnIgJiYgaXNBcmd1bWVudHModmFsdWUpLFxuICAgICAgICAgIGlzQnVmZiA9ICFpc0FyciAmJiAhaXNBcmcgJiYgaXNCdWZmZXIodmFsdWUpLFxuICAgICAgICAgIGlzVHlwZSA9ICFpc0FyciAmJiAhaXNBcmcgJiYgIWlzQnVmZiAmJiBpc1R5cGVkQXJyYXkodmFsdWUpLFxuICAgICAgICAgIHNraXBJbmRleGVzID0gaXNBcnIgfHwgaXNBcmcgfHwgaXNCdWZmIHx8IGlzVHlwZSxcbiAgICAgICAgICByZXN1bHQgPSBza2lwSW5kZXhlcyA/IGJhc2VUaW1lcyh2YWx1ZS5sZW5ndGgsIFN0cmluZykgOiBbXSxcbiAgICAgICAgICBsZW5ndGggPSByZXN1bHQubGVuZ3RoO1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gdmFsdWUpIHtcbiAgICAgICAgaWYgKChpbmhlcml0ZWQgfHwgaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwga2V5KSkgJiZcbiAgICAgICAgICAgICEoc2tpcEluZGV4ZXMgJiYgKFxuICAgICAgICAgICAgICAgLy8gU2FmYXJpIDkgaGFzIGVudW1lcmFibGUgYGFyZ3VtZW50cy5sZW5ndGhgIGluIHN0cmljdCBtb2RlLlxuICAgICAgICAgICAgICAga2V5ID09ICdsZW5ndGgnIHx8XG4gICAgICAgICAgICAgICAvLyBOb2RlLmpzIDAuMTAgaGFzIGVudW1lcmFibGUgbm9uLWluZGV4IHByb3BlcnRpZXMgb24gYnVmZmVycy5cbiAgICAgICAgICAgICAgIChpc0J1ZmYgJiYgKGtleSA9PSAnb2Zmc2V0JyB8fCBrZXkgPT0gJ3BhcmVudCcpKSB8fFxuICAgICAgICAgICAgICAgLy8gUGhhbnRvbUpTIDIgaGFzIGVudW1lcmFibGUgbm9uLWluZGV4IHByb3BlcnRpZXMgb24gdHlwZWQgYXJyYXlzLlxuICAgICAgICAgICAgICAgKGlzVHlwZSAmJiAoa2V5ID09ICdidWZmZXInIHx8IGtleSA9PSAnYnl0ZUxlbmd0aCcgfHwga2V5ID09ICdieXRlT2Zmc2V0JykpIHx8XG4gICAgICAgICAgICAgICAvLyBTa2lwIGluZGV4IHByb3BlcnRpZXMuXG4gICAgICAgICAgICAgICBpc0luZGV4KGtleSwgbGVuZ3RoKVxuICAgICAgICAgICAgKSkpIHtcbiAgICAgICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5zYW1wbGVgIGZvciBhcnJheXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBzYW1wbGUuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJhbmRvbSBlbGVtZW50LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFycmF5U2FtcGxlKGFycmF5KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuICAgICAgcmV0dXJuIGxlbmd0aCA/IGFycmF5W2Jhc2VSYW5kb20oMCwgbGVuZ3RoIC0gMSldIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5zYW1wbGVTaXplYCBmb3IgYXJyYXlzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gc2FtcGxlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBudW1iZXIgb2YgZWxlbWVudHMgdG8gc2FtcGxlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcmFuZG9tIGVsZW1lbnRzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFycmF5U2FtcGxlU2l6ZShhcnJheSwgbikge1xuICAgICAgcmV0dXJuIHNodWZmbGVTZWxmKGNvcHlBcnJheShhcnJheSksIGJhc2VDbGFtcChuLCAwLCBhcnJheS5sZW5ndGgpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uc2h1ZmZsZWAgZm9yIGFycmF5cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHNodWZmbGUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgc2h1ZmZsZWQgYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYXJyYXlTaHVmZmxlKGFycmF5KSB7XG4gICAgICByZXR1cm4gc2h1ZmZsZVNlbGYoY29weUFycmF5KGFycmF5KSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBmdW5jdGlvbiBpcyBsaWtlIGBhc3NpZ25WYWx1ZWAgZXhjZXB0IHRoYXQgaXQgZG9lc24ndCBhc3NpZ25cbiAgICAgKiBgdW5kZWZpbmVkYCB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBhc3NpZ24uXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gYXNzaWduLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFzc2lnbk1lcmdlVmFsdWUob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gICAgICBpZiAoKHZhbHVlICE9PSB1bmRlZmluZWQgJiYgIWVxKG9iamVjdFtrZXldLCB2YWx1ZSkpIHx8XG4gICAgICAgICAgKHZhbHVlID09PSB1bmRlZmluZWQgJiYgIShrZXkgaW4gb2JqZWN0KSkpIHtcbiAgICAgICAgYmFzZUFzc2lnblZhbHVlKG9iamVjdCwga2V5LCB2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQXNzaWducyBgdmFsdWVgIHRvIGBrZXlgIG9mIGBvYmplY3RgIGlmIHRoZSBleGlzdGluZyB2YWx1ZSBpcyBub3QgZXF1aXZhbGVudFxuICAgICAqIHVzaW5nIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gICAgICogZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gYXNzaWduLlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGFzc2lnbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgICAgIHZhciBvYmpWYWx1ZSA9IG9iamVjdFtrZXldO1xuICAgICAgaWYgKCEoaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkgJiYgZXEob2JqVmFsdWUsIHZhbHVlKSkgfHxcbiAgICAgICAgICAodmFsdWUgPT09IHVuZGVmaW5lZCAmJiAhKGtleSBpbiBvYmplY3QpKSkge1xuICAgICAgICBiYXNlQXNzaWduVmFsdWUob2JqZWN0LCBrZXksIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBpbmRleCBhdCB3aGljaCB0aGUgYGtleWAgaXMgZm91bmQgaW4gYGFycmF5YCBvZiBrZXktdmFsdWUgcGFpcnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0ga2V5IFRoZSBrZXkgdG8gc2VhcmNoIGZvci5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFzc29jSW5kZXhPZihhcnJheSwga2V5KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgIGlmIChlcShhcnJheVtsZW5ndGhdWzBdLCBrZXkpKSB7XG4gICAgICAgICAgcmV0dXJuIGxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIC0xO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFnZ3JlZ2F0ZXMgZWxlbWVudHMgb2YgYGNvbGxlY3Rpb25gIG9uIGBhY2N1bXVsYXRvcmAgd2l0aCBrZXlzIHRyYW5zZm9ybWVkXG4gICAgICogYnkgYGl0ZXJhdGVlYCBhbmQgdmFsdWVzIHNldCBieSBgc2V0dGVyYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHNldHRlciBUaGUgZnVuY3Rpb24gdG8gc2V0IGBhY2N1bXVsYXRvcmAgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBpdGVyYXRlZSB0byB0cmFuc2Zvcm0ga2V5cy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gYWNjdW11bGF0b3IgVGhlIGluaXRpYWwgYWdncmVnYXRlZCBvYmplY3QuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGBhY2N1bXVsYXRvcmAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUFnZ3JlZ2F0b3IoY29sbGVjdGlvbiwgc2V0dGVyLCBpdGVyYXRlZSwgYWNjdW11bGF0b3IpIHtcbiAgICAgIGJhc2VFYWNoKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBrZXksIGNvbGxlY3Rpb24pIHtcbiAgICAgICAgc2V0dGVyKGFjY3VtdWxhdG9yLCB2YWx1ZSwgaXRlcmF0ZWUodmFsdWUpLCBjb2xsZWN0aW9uKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmFzc2lnbmAgd2l0aG91dCBzdXBwb3J0IGZvciBtdWx0aXBsZSBzb3VyY2VzXG4gICAgICogb3IgYGN1c3RvbWl6ZXJgIGZ1bmN0aW9ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIHNvdXJjZSBvYmplY3QuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlQXNzaWduKG9iamVjdCwgc291cmNlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ICYmIGNvcHlPYmplY3Qoc291cmNlLCBrZXlzKHNvdXJjZSksIG9iamVjdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uYXNzaWduSW5gIHdpdGhvdXQgc3VwcG9ydCBmb3IgbXVsdGlwbGUgc291cmNlc1xuICAgICAqIG9yIGBjdXN0b21pemVyYCBmdW5jdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUFzc2lnbkluKG9iamVjdCwgc291cmNlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ICYmIGNvcHlPYmplY3Qoc291cmNlLCBrZXlzSW4oc291cmNlKSwgb2JqZWN0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgYXNzaWduVmFsdWVgIGFuZCBgYXNzaWduTWVyZ2VWYWx1ZWAgd2l0aG91dFxuICAgICAqIHZhbHVlIGNoZWNrcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGFzc2lnbi5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBhc3NpZ24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUFzc2lnblZhbHVlKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICAgICAgaWYgKGtleSA9PSAnX19wcm90b19fJyAmJiBkZWZpbmVQcm9wZXJ0eSkge1xuICAgICAgICBkZWZpbmVQcm9wZXJ0eShvYmplY3QsIGtleSwge1xuICAgICAgICAgICdjb25maWd1cmFibGUnOiB0cnVlLFxuICAgICAgICAgICdlbnVtZXJhYmxlJzogdHJ1ZSxcbiAgICAgICAgICAndmFsdWUnOiB2YWx1ZSxcbiAgICAgICAgICAnd3JpdGFibGUnOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5hdGAgd2l0aG91dCBzdXBwb3J0IGZvciBpbmRpdmlkdWFsIHBhdGhzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nW119IHBhdGhzIFRoZSBwcm9wZXJ0eSBwYXRocyB0byBwaWNrLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcGlja2VkIGVsZW1lbnRzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VBdChvYmplY3QsIHBhdGhzKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBwYXRocy5sZW5ndGgsXG4gICAgICAgICAgcmVzdWx0ID0gQXJyYXkobGVuZ3RoKSxcbiAgICAgICAgICBza2lwID0gb2JqZWN0ID09IG51bGw7XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHJlc3VsdFtpbmRleF0gPSBza2lwID8gdW5kZWZpbmVkIDogZ2V0KG9iamVjdCwgcGF0aHNbaW5kZXhdKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uY2xhbXBgIHdoaWNoIGRvZXNuJ3QgY29lcmNlIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG51bWJlciBUaGUgbnVtYmVyIHRvIGNsYW1wLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbG93ZXJdIFRoZSBsb3dlciBib3VuZC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdXBwZXIgVGhlIHVwcGVyIGJvdW5kLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGNsYW1wZWQgbnVtYmVyLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VDbGFtcChudW1iZXIsIGxvd2VyLCB1cHBlcikge1xuICAgICAgaWYgKG51bWJlciA9PT0gbnVtYmVyKSB7XG4gICAgICAgIGlmICh1cHBlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgbnVtYmVyID0gbnVtYmVyIDw9IHVwcGVyID8gbnVtYmVyIDogdXBwZXI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGxvd2VyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBudW1iZXIgPSBudW1iZXIgPj0gbG93ZXIgPyBudW1iZXIgOiBsb3dlcjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG51bWJlcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5jbG9uZWAgYW5kIGBfLmNsb25lRGVlcGAgd2hpY2ggdHJhY2tzXG4gICAgICogdHJhdmVyc2VkIG9iamVjdHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNsb25lLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy5cbiAgICAgKiAgMSAtIERlZXAgY2xvbmVcbiAgICAgKiAgMiAtIEZsYXR0ZW4gaW5oZXJpdGVkIHByb3BlcnRpZXNcbiAgICAgKiAgNCAtIENsb25lIHN5bWJvbHNcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjbG9uaW5nLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBba2V5XSBUaGUga2V5IG9mIGB2YWx1ZWAuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBwYXJlbnQgb2JqZWN0IG9mIGB2YWx1ZWAuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtzdGFja10gVHJhY2tzIHRyYXZlcnNlZCBvYmplY3RzIGFuZCB0aGVpciBjbG9uZSBjb3VudGVycGFydHMuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGNsb25lZCB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlQ2xvbmUodmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGtleSwgb2JqZWN0LCBzdGFjaykge1xuICAgICAgdmFyIHJlc3VsdCxcbiAgICAgICAgICBpc0RlZXAgPSBiaXRtYXNrICYgQ0xPTkVfREVFUF9GTEFHLFxuICAgICAgICAgIGlzRmxhdCA9IGJpdG1hc2sgJiBDTE9ORV9GTEFUX0ZMQUcsXG4gICAgICAgICAgaXNGdWxsID0gYml0bWFzayAmIENMT05FX1NZTUJPTFNfRkxBRztcblxuICAgICAgaWYgKGN1c3RvbWl6ZXIpIHtcbiAgICAgICAgcmVzdWx0ID0gb2JqZWN0ID8gY3VzdG9taXplcih2YWx1ZSwga2V5LCBvYmplY3QsIHN0YWNrKSA6IGN1c3RvbWl6ZXIodmFsdWUpO1xuICAgICAgfVxuICAgICAgaWYgKHJlc3VsdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgICBpZiAoIWlzT2JqZWN0KHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgICB2YXIgaXNBcnIgPSBpc0FycmF5KHZhbHVlKTtcbiAgICAgIGlmIChpc0Fycikge1xuICAgICAgICByZXN1bHQgPSBpbml0Q2xvbmVBcnJheSh2YWx1ZSk7XG4gICAgICAgIGlmICghaXNEZWVwKSB7XG4gICAgICAgICAgcmV0dXJuIGNvcHlBcnJheSh2YWx1ZSwgcmVzdWx0KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHRhZyA9IGdldFRhZyh2YWx1ZSksXG4gICAgICAgICAgICBpc0Z1bmMgPSB0YWcgPT0gZnVuY1RhZyB8fCB0YWcgPT0gZ2VuVGFnO1xuXG4gICAgICAgIGlmIChpc0J1ZmZlcih2YWx1ZSkpIHtcbiAgICAgICAgICByZXR1cm4gY2xvbmVCdWZmZXIodmFsdWUsIGlzRGVlcCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRhZyA9PSBvYmplY3RUYWcgfHwgdGFnID09IGFyZ3NUYWcgfHwgKGlzRnVuYyAmJiAhb2JqZWN0KSkge1xuICAgICAgICAgIHJlc3VsdCA9IChpc0ZsYXQgfHwgaXNGdW5jKSA/IHt9IDogaW5pdENsb25lT2JqZWN0KHZhbHVlKTtcbiAgICAgICAgICBpZiAoIWlzRGVlcCkge1xuICAgICAgICAgICAgcmV0dXJuIGlzRmxhdFxuICAgICAgICAgICAgICA/IGNvcHlTeW1ib2xzSW4odmFsdWUsIGJhc2VBc3NpZ25JbihyZXN1bHQsIHZhbHVlKSlcbiAgICAgICAgICAgICAgOiBjb3B5U3ltYm9scyh2YWx1ZSwgYmFzZUFzc2lnbihyZXN1bHQsIHZhbHVlKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmICghY2xvbmVhYmxlVGFnc1t0YWddKSB7XG4gICAgICAgICAgICByZXR1cm4gb2JqZWN0ID8gdmFsdWUgOiB7fTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzdWx0ID0gaW5pdENsb25lQnlUYWcodmFsdWUsIHRhZywgaXNEZWVwKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gQ2hlY2sgZm9yIGNpcmN1bGFyIHJlZmVyZW5jZXMgYW5kIHJldHVybiBpdHMgY29ycmVzcG9uZGluZyBjbG9uZS5cbiAgICAgIHN0YWNrIHx8IChzdGFjayA9IG5ldyBTdGFjayk7XG4gICAgICB2YXIgc3RhY2tlZCA9IHN0YWNrLmdldCh2YWx1ZSk7XG4gICAgICBpZiAoc3RhY2tlZCkge1xuICAgICAgICByZXR1cm4gc3RhY2tlZDtcbiAgICAgIH1cbiAgICAgIHN0YWNrLnNldCh2YWx1ZSwgcmVzdWx0KTtcblxuICAgICAgaWYgKGlzU2V0KHZhbHVlKSkge1xuICAgICAgICB2YWx1ZS5mb3JFYWNoKGZ1bmN0aW9uKHN1YlZhbHVlKSB7XG4gICAgICAgICAgcmVzdWx0LmFkZChiYXNlQ2xvbmUoc3ViVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN1YlZhbHVlLCB2YWx1ZSwgc3RhY2spKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2UgaWYgKGlzTWFwKHZhbHVlKSkge1xuICAgICAgICB2YWx1ZS5mb3JFYWNoKGZ1bmN0aW9uKHN1YlZhbHVlLCBrZXkpIHtcbiAgICAgICAgICByZXN1bHQuc2V0KGtleSwgYmFzZUNsb25lKHN1YlZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBrZXksIHZhbHVlLCBzdGFjaykpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgdmFyIGtleXNGdW5jID0gaXNGdWxsXG4gICAgICAgID8gKGlzRmxhdCA/IGdldEFsbEtleXNJbiA6IGdldEFsbEtleXMpXG4gICAgICAgIDogKGlzRmxhdCA/IGtleXNJbiA6IGtleXMpO1xuXG4gICAgICB2YXIgcHJvcHMgPSBpc0FyciA/IHVuZGVmaW5lZCA6IGtleXNGdW5jKHZhbHVlKTtcbiAgICAgIGFycmF5RWFjaChwcm9wcyB8fCB2YWx1ZSwgZnVuY3Rpb24oc3ViVmFsdWUsIGtleSkge1xuICAgICAgICBpZiAocHJvcHMpIHtcbiAgICAgICAgICBrZXkgPSBzdWJWYWx1ZTtcbiAgICAgICAgICBzdWJWYWx1ZSA9IHZhbHVlW2tleV07XG4gICAgICAgIH1cbiAgICAgICAgLy8gUmVjdXJzaXZlbHkgcG9wdWxhdGUgY2xvbmUgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICAgICAgYXNzaWduVmFsdWUocmVzdWx0LCBrZXksIGJhc2VDbG9uZShzdWJWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwga2V5LCB2YWx1ZSwgc3RhY2spKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5jb25mb3Jtc2Agd2hpY2ggZG9lc24ndCBjbG9uZSBgc291cmNlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIHByb3BlcnR5IHByZWRpY2F0ZXMgdG8gY29uZm9ybSB0by5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzcGVjIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VDb25mb3Jtcyhzb3VyY2UpIHtcbiAgICAgIHZhciBwcm9wcyA9IGtleXMoc291cmNlKTtcbiAgICAgIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIGJhc2VDb25mb3Jtc1RvKG9iamVjdCwgc291cmNlLCBwcm9wcyk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmNvbmZvcm1zVG9gIHdoaWNoIGFjY2VwdHMgYHByb3BzYCB0byBjaGVjay5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIHByb3BlcnR5IHByZWRpY2F0ZXMgdG8gY29uZm9ybSB0by5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYG9iamVjdGAgY29uZm9ybXMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlQ29uZm9ybXNUbyhvYmplY3QsIHNvdXJjZSwgcHJvcHMpIHtcbiAgICAgIHZhciBsZW5ndGggPSBwcm9wcy5sZW5ndGg7XG4gICAgICBpZiAob2JqZWN0ID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuICFsZW5ndGg7XG4gICAgICB9XG4gICAgICBvYmplY3QgPSBPYmplY3Qob2JqZWN0KTtcbiAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICB2YXIga2V5ID0gcHJvcHNbbGVuZ3RoXSxcbiAgICAgICAgICAgIHByZWRpY2F0ZSA9IHNvdXJjZVtrZXldLFxuICAgICAgICAgICAgdmFsdWUgPSBvYmplY3Rba2V5XTtcblxuICAgICAgICBpZiAoKHZhbHVlID09PSB1bmRlZmluZWQgJiYgIShrZXkgaW4gb2JqZWN0KSkgfHwgIXByZWRpY2F0ZSh2YWx1ZSkpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmRlbGF5YCBhbmQgYF8uZGVmZXJgIHdoaWNoIGFjY2VwdHMgYGFyZ3NgXG4gICAgICogdG8gcHJvdmlkZSB0byBgZnVuY2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRlbGF5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB3YWl0IFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIGRlbGF5IGludm9jYXRpb24uXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJncyBUaGUgYXJndW1lbnRzIHRvIHByb3ZpZGUgdG8gYGZ1bmNgLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ8T2JqZWN0fSBSZXR1cm5zIHRoZSB0aW1lciBpZCBvciB0aW1lb3V0IG9iamVjdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlRGVsYXkoZnVuYywgd2FpdCwgYXJncykge1xuICAgICAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7IGZ1bmMuYXBwbHkodW5kZWZpbmVkLCBhcmdzKTsgfSwgd2FpdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgbWV0aG9kcyBsaWtlIGBfLmRpZmZlcmVuY2VgIHdpdGhvdXQgc3VwcG9ydFxuICAgICAqIGZvciBleGNsdWRpbmcgbXVsdGlwbGUgYXJyYXlzIG9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlcyBUaGUgdmFsdWVzIHRvIGV4Y2x1ZGUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlXSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29tcGFyYXRvcl0gVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBmaWx0ZXJlZCB2YWx1ZXMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZURpZmZlcmVuY2UoYXJyYXksIHZhbHVlcywgaXRlcmF0ZWUsIGNvbXBhcmF0b3IpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGluY2x1ZGVzID0gYXJyYXlJbmNsdWRlcyxcbiAgICAgICAgICBpc0NvbW1vbiA9IHRydWUsXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICAgIHJlc3VsdCA9IFtdLFxuICAgICAgICAgIHZhbHVlc0xlbmd0aCA9IHZhbHVlcy5sZW5ndGg7XG5cbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgICBpZiAoaXRlcmF0ZWUpIHtcbiAgICAgICAgdmFsdWVzID0gYXJyYXlNYXAodmFsdWVzLCBiYXNlVW5hcnkoaXRlcmF0ZWUpKTtcbiAgICAgIH1cbiAgICAgIGlmIChjb21wYXJhdG9yKSB7XG4gICAgICAgIGluY2x1ZGVzID0gYXJyYXlJbmNsdWRlc1dpdGg7XG4gICAgICAgIGlzQ29tbW9uID0gZmFsc2U7XG4gICAgICB9XG4gICAgICBlbHNlIGlmICh2YWx1ZXMubGVuZ3RoID49IExBUkdFX0FSUkFZX1NJWkUpIHtcbiAgICAgICAgaW5jbHVkZXMgPSBjYWNoZUhhcztcbiAgICAgICAgaXNDb21tb24gPSBmYWxzZTtcbiAgICAgICAgdmFsdWVzID0gbmV3IFNldENhY2hlKHZhbHVlcyk7XG4gICAgICB9XG4gICAgICBvdXRlcjpcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XSxcbiAgICAgICAgICAgIGNvbXB1dGVkID0gaXRlcmF0ZWUgPT0gbnVsbCA/IHZhbHVlIDogaXRlcmF0ZWUodmFsdWUpO1xuXG4gICAgICAgIHZhbHVlID0gKGNvbXBhcmF0b3IgfHwgdmFsdWUgIT09IDApID8gdmFsdWUgOiAwO1xuICAgICAgICBpZiAoaXNDb21tb24gJiYgY29tcHV0ZWQgPT09IGNvbXB1dGVkKSB7XG4gICAgICAgICAgdmFyIHZhbHVlc0luZGV4ID0gdmFsdWVzTGVuZ3RoO1xuICAgICAgICAgIHdoaWxlICh2YWx1ZXNJbmRleC0tKSB7XG4gICAgICAgICAgICBpZiAodmFsdWVzW3ZhbHVlc0luZGV4XSA9PT0gY29tcHV0ZWQpIHtcbiAgICAgICAgICAgICAgY29udGludWUgb3V0ZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICghaW5jbHVkZXModmFsdWVzLCBjb21wdXRlZCwgY29tcGFyYXRvcikpIHtcbiAgICAgICAgICByZXN1bHQucHVzaCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZm9yRWFjaGAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl8T2JqZWN0fSBSZXR1cm5zIGBjb2xsZWN0aW9uYC5cbiAgICAgKi9cbiAgICB2YXIgYmFzZUVhY2ggPSBjcmVhdGVCYXNlRWFjaChiYXNlRm9yT3duKTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZvckVhY2hSaWdodGAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl8T2JqZWN0fSBSZXR1cm5zIGBjb2xsZWN0aW9uYC5cbiAgICAgKi9cbiAgICB2YXIgYmFzZUVhY2hSaWdodCA9IGNyZWF0ZUJhc2VFYWNoKGJhc2VGb3JPd25SaWdodCwgdHJ1ZSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5ldmVyeWAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFsbCBlbGVtZW50cyBwYXNzIHRoZSBwcmVkaWNhdGUgY2hlY2ssXG4gICAgICogIGVsc2UgYGZhbHNlYFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VFdmVyeShjb2xsZWN0aW9uLCBwcmVkaWNhdGUpIHtcbiAgICAgIHZhciByZXN1bHQgPSB0cnVlO1xuICAgICAgYmFzZUVhY2goY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKSB7XG4gICAgICAgIHJlc3VsdCA9ICEhcHJlZGljYXRlKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbik7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgbWV0aG9kcyBsaWtlIGBfLm1heGAgYW5kIGBfLm1pbmAgd2hpY2ggYWNjZXB0cyBhXG4gICAgICogYGNvbXBhcmF0b3JgIHRvIGRldGVybWluZSB0aGUgZXh0cmVtdW0gdmFsdWUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjb21wYXJhdG9yIFRoZSBjb21wYXJhdG9yIHVzZWQgdG8gY29tcGFyZSB2YWx1ZXMuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGV4dHJlbXVtIHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VFeHRyZW11bShhcnJheSwgaXRlcmF0ZWUsIGNvbXBhcmF0b3IpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdLFxuICAgICAgICAgICAgY3VycmVudCA9IGl0ZXJhdGVlKHZhbHVlKTtcblxuICAgICAgICBpZiAoY3VycmVudCAhPSBudWxsICYmIChjb21wdXRlZCA9PT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgID8gKGN1cnJlbnQgPT09IGN1cnJlbnQgJiYgIWlzU3ltYm9sKGN1cnJlbnQpKVxuICAgICAgICAgICAgICA6IGNvbXBhcmF0b3IoY3VycmVudCwgY29tcHV0ZWQpXG4gICAgICAgICAgICApKSB7XG4gICAgICAgICAgdmFyIGNvbXB1dGVkID0gY3VycmVudCxcbiAgICAgICAgICAgICAgcmVzdWx0ID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZmlsbGAgd2l0aG91dCBhbiBpdGVyYXRlZSBjYWxsIGd1YXJkLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gZmlsbC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBmaWxsIGBhcnJheWAgd2l0aC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PTBdIFRoZSBzdGFydCBwb3NpdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2VuZD1hcnJheS5sZW5ndGhdIFRoZSBlbmQgcG9zaXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUZpbGwoYXJyYXksIHZhbHVlLCBzdGFydCwgZW5kKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gICAgICBzdGFydCA9IHRvSW50ZWdlcihzdGFydCk7XG4gICAgICBpZiAoc3RhcnQgPCAwKSB7XG4gICAgICAgIHN0YXJ0ID0gLXN0YXJ0ID4gbGVuZ3RoID8gMCA6IChsZW5ndGggKyBzdGFydCk7XG4gICAgICB9XG4gICAgICBlbmQgPSAoZW5kID09PSB1bmRlZmluZWQgfHwgZW5kID4gbGVuZ3RoKSA/IGxlbmd0aCA6IHRvSW50ZWdlcihlbmQpO1xuICAgICAgaWYgKGVuZCA8IDApIHtcbiAgICAgICAgZW5kICs9IGxlbmd0aDtcbiAgICAgIH1cbiAgICAgIGVuZCA9IHN0YXJ0ID4gZW5kID8gMCA6IHRvTGVuZ3RoKGVuZCk7XG4gICAgICB3aGlsZSAoc3RhcnQgPCBlbmQpIHtcbiAgICAgICAgYXJyYXlbc3RhcnQrK10gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhcnJheTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5maWx0ZXJgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZpbHRlcmVkIGFycmF5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VGaWx0ZXIoY29sbGVjdGlvbiwgcHJlZGljYXRlKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgICBiYXNlRWFjaChjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pIHtcbiAgICAgICAgaWYgKHByZWRpY2F0ZSh2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pKSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZmxhdHRlbmAgd2l0aCBzdXBwb3J0IGZvciByZXN0cmljdGluZyBmbGF0dGVuaW5nLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gZmxhdHRlbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZGVwdGggVGhlIG1heGltdW0gcmVjdXJzaW9uIGRlcHRoLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW3ByZWRpY2F0ZT1pc0ZsYXR0ZW5hYmxlXSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzU3RyaWN0XSBSZXN0cmljdCB0byB2YWx1ZXMgdGhhdCBwYXNzIGBwcmVkaWNhdGVgIGNoZWNrcy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbcmVzdWx0PVtdXSBUaGUgaW5pdGlhbCByZXN1bHQgdmFsdWUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmxhdHRlbmVkIGFycmF5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VGbGF0dGVuKGFycmF5LCBkZXB0aCwgcHJlZGljYXRlLCBpc1N0cmljdCwgcmVzdWx0KSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgICAgIHByZWRpY2F0ZSB8fCAocHJlZGljYXRlID0gaXNGbGF0dGVuYWJsZSk7XG4gICAgICByZXN1bHQgfHwgKHJlc3VsdCA9IFtdKTtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuICAgICAgICBpZiAoZGVwdGggPiAwICYmIHByZWRpY2F0ZSh2YWx1ZSkpIHtcbiAgICAgICAgICBpZiAoZGVwdGggPiAxKSB7XG4gICAgICAgICAgICAvLyBSZWN1cnNpdmVseSBmbGF0dGVuIGFycmF5cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgICAgICAgICAgYmFzZUZsYXR0ZW4odmFsdWUsIGRlcHRoIC0gMSwgcHJlZGljYXRlLCBpc1N0cmljdCwgcmVzdWx0KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYXJyYXlQdXNoKHJlc3VsdCwgdmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICghaXNTdHJpY3QpIHtcbiAgICAgICAgICByZXN1bHRbcmVzdWx0Lmxlbmd0aF0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgYmFzZUZvck93bmAgd2hpY2ggaXRlcmF0ZXMgb3ZlciBgb2JqZWN0YFxuICAgICAqIHByb3BlcnRpZXMgcmV0dXJuZWQgYnkgYGtleXNGdW5jYCBhbmQgaW52b2tlcyBgaXRlcmF0ZWVgIGZvciBlYWNoIHByb3BlcnR5LlxuICAgICAqIEl0ZXJhdGVlIGZ1bmN0aW9ucyBtYXkgZXhpdCBpdGVyYXRpb24gZWFybHkgYnkgZXhwbGljaXRseSByZXR1cm5pbmcgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGtleXNGdW5jIFRoZSBmdW5jdGlvbiB0byBnZXQgdGhlIGtleXMgb2YgYG9iamVjdGAuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICB2YXIgYmFzZUZvciA9IGNyZWF0ZUJhc2VGb3IoKTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgZnVuY3Rpb24gaXMgbGlrZSBgYmFzZUZvcmAgZXhjZXB0IHRoYXQgaXQgaXRlcmF0ZXMgb3ZlciBwcm9wZXJ0aWVzXG4gICAgICogaW4gdGhlIG9wcG9zaXRlIG9yZGVyLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0ga2V5c0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGdldCB0aGUga2V5cyBvZiBgb2JqZWN0YC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqL1xuICAgIHZhciBiYXNlRm9yUmlnaHQgPSBjcmVhdGVCYXNlRm9yKHRydWUpO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZm9yT3duYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VGb3JPd24ob2JqZWN0LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIG9iamVjdCAmJiBiYXNlRm9yKG9iamVjdCwgaXRlcmF0ZWUsIGtleXMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZvck93blJpZ2h0YCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VGb3JPd25SaWdodChvYmplY3QsIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ICYmIGJhc2VGb3JSaWdodChvYmplY3QsIGl0ZXJhdGVlLCBrZXlzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5mdW5jdGlvbnNgIHdoaWNoIGNyZWF0ZXMgYW4gYXJyYXkgb2ZcbiAgICAgKiBgb2JqZWN0YCBmdW5jdGlvbiBwcm9wZXJ0eSBuYW1lcyBmaWx0ZXJlZCBmcm9tIGBwcm9wc2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHByb3BzIFRoZSBwcm9wZXJ0eSBuYW1lcyB0byBmaWx0ZXIuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBmdW5jdGlvbiBuYW1lcy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlRnVuY3Rpb25zKG9iamVjdCwgcHJvcHMpIHtcbiAgICAgIHJldHVybiBhcnJheUZpbHRlcihwcm9wcywgZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgIHJldHVybiBpc0Z1bmN0aW9uKG9iamVjdFtrZXldKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmdldGAgd2l0aG91dCBzdXBwb3J0IGZvciBkZWZhdWx0IHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc29sdmVkIHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VHZXQob2JqZWN0LCBwYXRoKSB7XG4gICAgICBwYXRoID0gY2FzdFBhdGgocGF0aCwgb2JqZWN0KTtcblxuICAgICAgdmFyIGluZGV4ID0gMCxcbiAgICAgICAgICBsZW5ndGggPSBwYXRoLmxlbmd0aDtcblxuICAgICAgd2hpbGUgKG9iamVjdCAhPSBudWxsICYmIGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIG9iamVjdCA9IG9iamVjdFt0b0tleShwYXRoW2luZGV4KytdKV07XG4gICAgICB9XG4gICAgICByZXR1cm4gKGluZGV4ICYmIGluZGV4ID09IGxlbmd0aCkgPyBvYmplY3QgOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGdldEFsbEtleXNgIGFuZCBgZ2V0QWxsS2V5c0luYCB3aGljaCB1c2VzXG4gICAgICogYGtleXNGdW5jYCBhbmQgYHN5bWJvbHNGdW5jYCB0byBnZXQgdGhlIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgYW5kXG4gICAgICogc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGtleXNGdW5jIFRoZSBmdW5jdGlvbiB0byBnZXQgdGhlIGtleXMgb2YgYG9iamVjdGAuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gc3ltYm9sc0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGdldCB0aGUgc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzIGFuZCBzeW1ib2xzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VHZXRBbGxLZXlzKG9iamVjdCwga2V5c0Z1bmMsIHN5bWJvbHNGdW5jKSB7XG4gICAgICB2YXIgcmVzdWx0ID0ga2V5c0Z1bmMob2JqZWN0KTtcbiAgICAgIHJldHVybiBpc0FycmF5KG9iamVjdCkgPyByZXN1bHQgOiBhcnJheVB1c2gocmVzdWx0LCBzeW1ib2xzRnVuYyhvYmplY3QpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgZ2V0VGFnYCB3aXRob3V0IGZhbGxiYWNrcyBmb3IgYnVnZ3kgZW52aXJvbm1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBgdG9TdHJpbmdUYWdgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VHZXRUYWcodmFsdWUpIHtcbiAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkVGFnIDogbnVsbFRhZztcbiAgICAgIH1cbiAgICAgIHJldHVybiAoc3ltVG9TdHJpbmdUYWcgJiYgc3ltVG9TdHJpbmdUYWcgaW4gT2JqZWN0KHZhbHVlKSlcbiAgICAgICAgPyBnZXRSYXdUYWcodmFsdWUpXG4gICAgICAgIDogb2JqZWN0VG9TdHJpbmcodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmd0YCB3aGljaCBkb2Vzbid0IGNvZXJjZSBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBncmVhdGVyIHRoYW4gYG90aGVyYCxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VHdCh2YWx1ZSwgb3RoZXIpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA+IG90aGVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmhhc2Agd2l0aG91dCBzdXBwb3J0IGZvciBkZWVwIHBhdGhzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30ga2V5IFRoZSBrZXkgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VIYXMob2JqZWN0LCBrZXkpIHtcbiAgICAgIHJldHVybiBvYmplY3QgIT0gbnVsbCAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5oYXNJbmAgd2l0aG91dCBzdXBwb3J0IGZvciBkZWVwIHBhdGhzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30ga2V5IFRoZSBrZXkgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VIYXNJbihvYmplY3QsIGtleSkge1xuICAgICAgcmV0dXJuIG9iamVjdCAhPSBudWxsICYmIGtleSBpbiBPYmplY3Qob2JqZWN0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pblJhbmdlYCB3aGljaCBkb2Vzbid0IGNvZXJjZSBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBudW1iZXIgVGhlIG51bWJlciB0byBjaGVjay5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc3RhcnQgVGhlIHN0YXJ0IG9mIHRoZSByYW5nZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZW5kIFRoZSBlbmQgb2YgdGhlIHJhbmdlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgbnVtYmVyYCBpcyBpbiB0aGUgcmFuZ2UsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSW5SYW5nZShudW1iZXIsIHN0YXJ0LCBlbmQpIHtcbiAgICAgIHJldHVybiBudW1iZXIgPj0gbmF0aXZlTWluKHN0YXJ0LCBlbmQpICYmIG51bWJlciA8IG5hdGl2ZU1heChzdGFydCwgZW5kKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBtZXRob2RzIGxpa2UgYF8uaW50ZXJzZWN0aW9uYCwgd2l0aG91dCBzdXBwb3J0XG4gICAgICogZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMsIHRoYXQgYWNjZXB0cyBhbiBhcnJheSBvZiBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXlzIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWVdIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIHNoYXJlZCB2YWx1ZXMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUludGVyc2VjdGlvbihhcnJheXMsIGl0ZXJhdGVlLCBjb21wYXJhdG9yKSB7XG4gICAgICB2YXIgaW5jbHVkZXMgPSBjb21wYXJhdG9yID8gYXJyYXlJbmNsdWRlc1dpdGggOiBhcnJheUluY2x1ZGVzLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5c1swXS5sZW5ndGgsXG4gICAgICAgICAgb3RoTGVuZ3RoID0gYXJyYXlzLmxlbmd0aCxcbiAgICAgICAgICBvdGhJbmRleCA9IG90aExlbmd0aCxcbiAgICAgICAgICBjYWNoZXMgPSBBcnJheShvdGhMZW5ndGgpLFxuICAgICAgICAgIG1heExlbmd0aCA9IEluZmluaXR5LFxuICAgICAgICAgIHJlc3VsdCA9IFtdO1xuXG4gICAgICB3aGlsZSAob3RoSW5kZXgtLSkge1xuICAgICAgICB2YXIgYXJyYXkgPSBhcnJheXNbb3RoSW5kZXhdO1xuICAgICAgICBpZiAob3RoSW5kZXggJiYgaXRlcmF0ZWUpIHtcbiAgICAgICAgICBhcnJheSA9IGFycmF5TWFwKGFycmF5LCBiYXNlVW5hcnkoaXRlcmF0ZWUpKTtcbiAgICAgICAgfVxuICAgICAgICBtYXhMZW5ndGggPSBuYXRpdmVNaW4oYXJyYXkubGVuZ3RoLCBtYXhMZW5ndGgpO1xuICAgICAgICBjYWNoZXNbb3RoSW5kZXhdID0gIWNvbXBhcmF0b3IgJiYgKGl0ZXJhdGVlIHx8IChsZW5ndGggPj0gMTIwICYmIGFycmF5Lmxlbmd0aCA+PSAxMjApKVxuICAgICAgICAgID8gbmV3IFNldENhY2hlKG90aEluZGV4ICYmIGFycmF5KVxuICAgICAgICAgIDogdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgYXJyYXkgPSBhcnJheXNbMF07XG5cbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIHNlZW4gPSBjYWNoZXNbMF07XG5cbiAgICAgIG91dGVyOlxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGggJiYgcmVzdWx0Lmxlbmd0aCA8IG1heExlbmd0aCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF0sXG4gICAgICAgICAgICBjb21wdXRlZCA9IGl0ZXJhdGVlID8gaXRlcmF0ZWUodmFsdWUpIDogdmFsdWU7XG5cbiAgICAgICAgdmFsdWUgPSAoY29tcGFyYXRvciB8fCB2YWx1ZSAhPT0gMCkgPyB2YWx1ZSA6IDA7XG4gICAgICAgIGlmICghKHNlZW5cbiAgICAgICAgICAgICAgPyBjYWNoZUhhcyhzZWVuLCBjb21wdXRlZClcbiAgICAgICAgICAgICAgOiBpbmNsdWRlcyhyZXN1bHQsIGNvbXB1dGVkLCBjb21wYXJhdG9yKVxuICAgICAgICAgICAgKSkge1xuICAgICAgICAgIG90aEluZGV4ID0gb3RoTGVuZ3RoO1xuICAgICAgICAgIHdoaWxlICgtLW90aEluZGV4KSB7XG4gICAgICAgICAgICB2YXIgY2FjaGUgPSBjYWNoZXNbb3RoSW5kZXhdO1xuICAgICAgICAgICAgaWYgKCEoY2FjaGVcbiAgICAgICAgICAgICAgICAgID8gY2FjaGVIYXMoY2FjaGUsIGNvbXB1dGVkKVxuICAgICAgICAgICAgICAgICAgOiBpbmNsdWRlcyhhcnJheXNbb3RoSW5kZXhdLCBjb21wdXRlZCwgY29tcGFyYXRvcikpXG4gICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgIGNvbnRpbnVlIG91dGVyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoc2Vlbikge1xuICAgICAgICAgICAgc2Vlbi5wdXNoKGNvbXB1dGVkKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmludmVydGAgYW5kIGBfLmludmVydEJ5YCB3aGljaCBpbnZlcnRzXG4gICAgICogYG9iamVjdGAgd2l0aCB2YWx1ZXMgdHJhbnNmb3JtZWQgYnkgYGl0ZXJhdGVlYCBhbmQgc2V0IGJ5IGBzZXR0ZXJgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHNldHRlciBUaGUgZnVuY3Rpb24gdG8gc2V0IGBhY2N1bXVsYXRvcmAgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBpdGVyYXRlZSB0byB0cmFuc2Zvcm0gdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBhY2N1bXVsYXRvciBUaGUgaW5pdGlhbCBpbnZlcnRlZCBvYmplY3QuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGBhY2N1bXVsYXRvcmAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUludmVydGVyKG9iamVjdCwgc2V0dGVyLCBpdGVyYXRlZSwgYWNjdW11bGF0b3IpIHtcbiAgICAgIGJhc2VGb3JPd24ob2JqZWN0LCBmdW5jdGlvbih2YWx1ZSwga2V5LCBvYmplY3QpIHtcbiAgICAgICAgc2V0dGVyKGFjY3VtdWxhdG9yLCBpdGVyYXRlZSh2YWx1ZSksIGtleSwgb2JqZWN0KTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmludm9rZWAgd2l0aG91dCBzdXBwb3J0IGZvciBpbmRpdmlkdWFsXG4gICAgICogbWV0aG9kIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBtZXRob2QgdG8gaW52b2tlLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFyZ3MgVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgdGhlIG1ldGhvZCB3aXRoLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXN1bHQgb2YgdGhlIGludm9rZWQgbWV0aG9kLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJbnZva2Uob2JqZWN0LCBwYXRoLCBhcmdzKSB7XG4gICAgICBwYXRoID0gY2FzdFBhdGgocGF0aCwgb2JqZWN0KTtcbiAgICAgIG9iamVjdCA9IHBhcmVudChvYmplY3QsIHBhdGgpO1xuICAgICAgdmFyIGZ1bmMgPSBvYmplY3QgPT0gbnVsbCA/IG9iamVjdCA6IG9iamVjdFt0b0tleShsYXN0KHBhdGgpKV07XG4gICAgICByZXR1cm4gZnVuYyA9PSBudWxsID8gdW5kZWZpbmVkIDogYXBwbHkoZnVuYywgb2JqZWN0LCBhcmdzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc0FyZ3VtZW50c2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGBhcmd1bWVudHNgIG9iamVjdCxcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXNBcmd1bWVudHModmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IGFyZ3NUYWc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNBcnJheUJ1ZmZlcmAgd2l0aG91dCBOb2RlLmpzIG9wdGltaXphdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGFycmF5IGJ1ZmZlciwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJc0FycmF5QnVmZmVyKHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBhcnJheUJ1ZmZlclRhZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc0RhdGVgIHdpdGhvdXQgTm9kZS5qcyBvcHRpbWl6YXRpb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGRhdGUgb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzRGF0ZSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gZGF0ZVRhZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc0VxdWFsYCB3aGljaCBzdXBwb3J0cyBwYXJ0aWFsIGNvbXBhcmlzb25zXG4gICAgICogYW5kIHRyYWNrcyB0cmF2ZXJzZWQgb2JqZWN0cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy5cbiAgICAgKiAgMSAtIFVub3JkZXJlZCBjb21wYXJpc29uXG4gICAgICogIDIgLSBQYXJ0aWFsIGNvbXBhcmlzb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIGB2YWx1ZWAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHZhbHVlcyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJc0VxdWFsKHZhbHVlLCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spIHtcbiAgICAgIGlmICh2YWx1ZSA9PT0gb3RoZXIpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBpZiAodmFsdWUgPT0gbnVsbCB8fCBvdGhlciA9PSBudWxsIHx8ICghaXNPYmplY3RMaWtlKHZhbHVlKSAmJiAhaXNPYmplY3RMaWtlKG90aGVyKSkpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlICE9PSB2YWx1ZSAmJiBvdGhlciAhPT0gb3RoZXI7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZUlzRXF1YWxEZWVwKHZhbHVlLCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgYmFzZUlzRXF1YWwsIHN0YWNrKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VJc0VxdWFsYCBmb3IgYXJyYXlzIGFuZCBvYmplY3RzIHdoaWNoIHBlcmZvcm1zXG4gICAgICogZGVlcCBjb21wYXJpc29ucyBhbmQgdHJhY2tzIHRyYXZlcnNlZCBvYmplY3RzIGVuYWJsaW5nIG9iamVjdHMgd2l0aCBjaXJjdWxhclxuICAgICAqIHJlZmVyZW5jZXMgdG8gYmUgY29tcGFyZWQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvdGhlciBUaGUgb3RoZXIgb2JqZWN0IHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgYmFzZUlzRXF1YWxgIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGVxdWFsRnVuYyBUaGUgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGVxdWl2YWxlbnRzIG9mIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIGBvYmplY3RgIGFuZCBgb3RoZXJgIG9iamVjdHMuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBvYmplY3RzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzRXF1YWxEZWVwKG9iamVjdCwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spIHtcbiAgICAgIHZhciBvYmpJc0FyciA9IGlzQXJyYXkob2JqZWN0KSxcbiAgICAgICAgICBvdGhJc0FyciA9IGlzQXJyYXkob3RoZXIpLFxuICAgICAgICAgIG9ialRhZyA9IG9iaklzQXJyID8gYXJyYXlUYWcgOiBnZXRUYWcob2JqZWN0KSxcbiAgICAgICAgICBvdGhUYWcgPSBvdGhJc0FyciA/IGFycmF5VGFnIDogZ2V0VGFnKG90aGVyKTtcblxuICAgICAgb2JqVGFnID0gb2JqVGFnID09IGFyZ3NUYWcgPyBvYmplY3RUYWcgOiBvYmpUYWc7XG4gICAgICBvdGhUYWcgPSBvdGhUYWcgPT0gYXJnc1RhZyA/IG9iamVjdFRhZyA6IG90aFRhZztcblxuICAgICAgdmFyIG9iaklzT2JqID0gb2JqVGFnID09IG9iamVjdFRhZyxcbiAgICAgICAgICBvdGhJc09iaiA9IG90aFRhZyA9PSBvYmplY3RUYWcsXG4gICAgICAgICAgaXNTYW1lVGFnID0gb2JqVGFnID09IG90aFRhZztcblxuICAgICAgaWYgKGlzU2FtZVRhZyAmJiBpc0J1ZmZlcihvYmplY3QpKSB7XG4gICAgICAgIGlmICghaXNCdWZmZXIob3RoZXIpKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIG9iaklzQXJyID0gdHJ1ZTtcbiAgICAgICAgb2JqSXNPYmogPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmIChpc1NhbWVUYWcgJiYgIW9iaklzT2JqKSB7XG4gICAgICAgIHN0YWNrIHx8IChzdGFjayA9IG5ldyBTdGFjayk7XG4gICAgICAgIHJldHVybiAob2JqSXNBcnIgfHwgaXNUeXBlZEFycmF5KG9iamVjdCkpXG4gICAgICAgICAgPyBlcXVhbEFycmF5cyhvYmplY3QsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKVxuICAgICAgICAgIDogZXF1YWxCeVRhZyhvYmplY3QsIG90aGVyLCBvYmpUYWcsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spO1xuICAgICAgfVxuICAgICAgaWYgKCEoYml0bWFzayAmIENPTVBBUkVfUEFSVElBTF9GTEFHKSkge1xuICAgICAgICB2YXIgb2JqSXNXcmFwcGVkID0gb2JqSXNPYmogJiYgaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsICdfX3dyYXBwZWRfXycpLFxuICAgICAgICAgICAgb3RoSXNXcmFwcGVkID0gb3RoSXNPYmogJiYgaGFzT3duUHJvcGVydHkuY2FsbChvdGhlciwgJ19fd3JhcHBlZF9fJyk7XG5cbiAgICAgICAgaWYgKG9iaklzV3JhcHBlZCB8fCBvdGhJc1dyYXBwZWQpIHtcbiAgICAgICAgICB2YXIgb2JqVW53cmFwcGVkID0gb2JqSXNXcmFwcGVkID8gb2JqZWN0LnZhbHVlKCkgOiBvYmplY3QsXG4gICAgICAgICAgICAgIG90aFVud3JhcHBlZCA9IG90aElzV3JhcHBlZCA/IG90aGVyLnZhbHVlKCkgOiBvdGhlcjtcblxuICAgICAgICAgIHN0YWNrIHx8IChzdGFjayA9IG5ldyBTdGFjayk7XG4gICAgICAgICAgcmV0dXJuIGVxdWFsRnVuYyhvYmpVbndyYXBwZWQsIG90aFVud3JhcHBlZCwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoIWlzU2FtZVRhZykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBzdGFjayB8fCAoc3RhY2sgPSBuZXcgU3RhY2spO1xuICAgICAgcmV0dXJuIGVxdWFsT2JqZWN0cyhvYmplY3QsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc01hcGAgd2l0aG91dCBOb2RlLmpzIG9wdGltaXphdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgbWFwLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzTWFwKHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBnZXRUYWcodmFsdWUpID09IG1hcFRhZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc01hdGNoYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSB2YWx1ZXMgdG8gbWF0Y2guXG4gICAgICogQHBhcmFtIHtBcnJheX0gbWF0Y2hEYXRhIFRoZSBwcm9wZXJ0eSBuYW1lcywgdmFsdWVzLCBhbmQgY29tcGFyZSBmbGFncyB0byBtYXRjaC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYG9iamVjdGAgaXMgYSBtYXRjaCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJc01hdGNoKG9iamVjdCwgc291cmNlLCBtYXRjaERhdGEsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIHZhciBpbmRleCA9IG1hdGNoRGF0YS5sZW5ndGgsXG4gICAgICAgICAgbGVuZ3RoID0gaW5kZXgsXG4gICAgICAgICAgbm9DdXN0b21pemVyID0gIWN1c3RvbWl6ZXI7XG5cbiAgICAgIGlmIChvYmplY3QgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gIWxlbmd0aDtcbiAgICAgIH1cbiAgICAgIG9iamVjdCA9IE9iamVjdChvYmplY3QpO1xuICAgICAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICAgICAgdmFyIGRhdGEgPSBtYXRjaERhdGFbaW5kZXhdO1xuICAgICAgICBpZiAoKG5vQ3VzdG9taXplciAmJiBkYXRhWzJdKVxuICAgICAgICAgICAgICA/IGRhdGFbMV0gIT09IG9iamVjdFtkYXRhWzBdXVxuICAgICAgICAgICAgICA6ICEoZGF0YVswXSBpbiBvYmplY3QpXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIGRhdGEgPSBtYXRjaERhdGFbaW5kZXhdO1xuICAgICAgICB2YXIga2V5ID0gZGF0YVswXSxcbiAgICAgICAgICAgIG9ialZhbHVlID0gb2JqZWN0W2tleV0sXG4gICAgICAgICAgICBzcmNWYWx1ZSA9IGRhdGFbMV07XG5cbiAgICAgICAgaWYgKG5vQ3VzdG9taXplciAmJiBkYXRhWzJdKSB7XG4gICAgICAgICAgaWYgKG9ialZhbHVlID09PSB1bmRlZmluZWQgJiYgIShrZXkgaW4gb2JqZWN0KSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgc3RhY2sgPSBuZXcgU3RhY2s7XG4gICAgICAgICAgaWYgKGN1c3RvbWl6ZXIpIHtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBjdXN0b21pemVyKG9ialZhbHVlLCBzcmNWYWx1ZSwga2V5LCBvYmplY3QsIHNvdXJjZSwgc3RhY2spO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoIShyZXN1bHQgPT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgID8gYmFzZUlzRXF1YWwoc3JjVmFsdWUsIG9ialZhbHVlLCBDT01QQVJFX1BBUlRJQUxfRkxBRyB8IENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcsIGN1c3RvbWl6ZXIsIHN0YWNrKVxuICAgICAgICAgICAgICAgIDogcmVzdWx0XG4gICAgICAgICAgICAgICkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzTmF0aXZlYCB3aXRob3V0IGJhZCBzaGltIGNoZWNrcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBuYXRpdmUgZnVuY3Rpb24sXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXNOYXRpdmUodmFsdWUpIHtcbiAgICAgIGlmICghaXNPYmplY3QodmFsdWUpIHx8IGlzTWFza2VkKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgcGF0dGVybiA9IGlzRnVuY3Rpb24odmFsdWUpID8gcmVJc05hdGl2ZSA6IHJlSXNIb3N0Q3RvcjtcbiAgICAgIHJldHVybiBwYXR0ZXJuLnRlc3QodG9Tb3VyY2UodmFsdWUpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc1JlZ0V4cGAgd2l0aG91dCBOb2RlLmpzIG9wdGltaXphdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcmVnZXhwLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzUmVnRXhwKHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSByZWdleHBUYWc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNTZXRgIHdpdGhvdXQgTm9kZS5qcyBvcHRpbWl6YXRpb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHNldCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJc1NldCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgZ2V0VGFnKHZhbHVlKSA9PSBzZXRUYWc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNUeXBlZEFycmF5YCB3aXRob3V0IE5vZGUuanMgb3B0aW1pemF0aW9ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB0eXBlZCBhcnJheSwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJc1R5cGVkQXJyYXkodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmXG4gICAgICAgIGlzTGVuZ3RoKHZhbHVlLmxlbmd0aCkgJiYgISF0eXBlZEFycmF5VGFnc1tiYXNlR2V0VGFnKHZhbHVlKV07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXRlcmF0ZWVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IFt2YWx1ZT1fLmlkZW50aXR5XSBUaGUgdmFsdWUgdG8gY29udmVydCB0byBhbiBpdGVyYXRlZS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIGl0ZXJhdGVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJdGVyYXRlZSh2YWx1ZSkge1xuICAgICAgLy8gRG9uJ3Qgc3RvcmUgdGhlIGB0eXBlb2ZgIHJlc3VsdCBpbiBhIHZhcmlhYmxlIHRvIGF2b2lkIGEgSklUIGJ1ZyBpbiBTYWZhcmkgOS5cbiAgICAgIC8vIFNlZSBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTU2MDM0IGZvciBtb3JlIGRldGFpbHMuXG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuICAgICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIGlkZW50aXR5O1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0Jykge1xuICAgICAgICByZXR1cm4gaXNBcnJheSh2YWx1ZSlcbiAgICAgICAgICA/IGJhc2VNYXRjaGVzUHJvcGVydHkodmFsdWVbMF0sIHZhbHVlWzFdKVxuICAgICAgICAgIDogYmFzZU1hdGNoZXModmFsdWUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHByb3BlcnR5KHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5rZXlzYCB3aGljaCBkb2Vzbid0IHRyZWF0IHNwYXJzZSBhcnJheXMgYXMgZGVuc2UuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VLZXlzKG9iamVjdCkge1xuICAgICAgaWYgKCFpc1Byb3RvdHlwZShvYmplY3QpKSB7XG4gICAgICAgIHJldHVybiBuYXRpdmVLZXlzKG9iamVjdCk7XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgICBmb3IgKHZhciBrZXkgaW4gT2JqZWN0KG9iamVjdCkpIHtcbiAgICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpICYmIGtleSAhPSAnY29uc3RydWN0b3InKSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2goa2V5KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5rZXlzSW5gIHdoaWNoIGRvZXNuJ3QgdHJlYXQgc3BhcnNlIGFycmF5cyBhcyBkZW5zZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUtleXNJbihvYmplY3QpIHtcbiAgICAgIGlmICghaXNPYmplY3Qob2JqZWN0KSkge1xuICAgICAgICByZXR1cm4gbmF0aXZlS2V5c0luKG9iamVjdCk7XG4gICAgICB9XG4gICAgICB2YXIgaXNQcm90byA9IGlzUHJvdG90eXBlKG9iamVjdCksXG4gICAgICAgICAgcmVzdWx0ID0gW107XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICAgICAgaWYgKCEoa2V5ID09ICdjb25zdHJ1Y3RvcicgJiYgKGlzUHJvdG8gfHwgIWhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpKSkpIHtcbiAgICAgICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmx0YCB3aGljaCBkb2Vzbid0IGNvZXJjZSBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBsZXNzIHRoYW4gYG90aGVyYCxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VMdCh2YWx1ZSwgb3RoZXIpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA8IG90aGVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLm1hcGAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBtYXBwZWQgYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZU1hcChjb2xsZWN0aW9uLCBpdGVyYXRlZSkge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgcmVzdWx0ID0gaXNBcnJheUxpa2UoY29sbGVjdGlvbikgPyBBcnJheShjb2xsZWN0aW9uLmxlbmd0aCkgOiBbXTtcblxuICAgICAgYmFzZUVhY2goY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGtleSwgY29sbGVjdGlvbikge1xuICAgICAgICByZXN1bHRbKytpbmRleF0gPSBpdGVyYXRlZSh2YWx1ZSwga2V5LCBjb2xsZWN0aW9uKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5tYXRjaGVzYCB3aGljaCBkb2Vzbid0IGNsb25lIGBzb3VyY2VgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgcHJvcGVydHkgdmFsdWVzIHRvIG1hdGNoLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNwZWMgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZU1hdGNoZXMoc291cmNlKSB7XG4gICAgICB2YXIgbWF0Y2hEYXRhID0gZ2V0TWF0Y2hEYXRhKHNvdXJjZSk7XG4gICAgICBpZiAobWF0Y2hEYXRhLmxlbmd0aCA9PSAxICYmIG1hdGNoRGF0YVswXVsyXSkge1xuICAgICAgICByZXR1cm4gbWF0Y2hlc1N0cmljdENvbXBhcmFibGUobWF0Y2hEYXRhWzBdWzBdLCBtYXRjaERhdGFbMF1bMV0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgICByZXR1cm4gb2JqZWN0ID09PSBzb3VyY2UgfHwgYmFzZUlzTWF0Y2gob2JqZWN0LCBzb3VyY2UsIG1hdGNoRGF0YSk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLm1hdGNoZXNQcm9wZXJ0eWAgd2hpY2ggZG9lc24ndCBjbG9uZSBgc3JjVmFsdWVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gc3JjVmFsdWUgVGhlIHZhbHVlIHRvIG1hdGNoLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNwZWMgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZU1hdGNoZXNQcm9wZXJ0eShwYXRoLCBzcmNWYWx1ZSkge1xuICAgICAgaWYgKGlzS2V5KHBhdGgpICYmIGlzU3RyaWN0Q29tcGFyYWJsZShzcmNWYWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIG1hdGNoZXNTdHJpY3RDb21wYXJhYmxlKHRvS2V5KHBhdGgpLCBzcmNWYWx1ZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICAgIHZhciBvYmpWYWx1ZSA9IGdldChvYmplY3QsIHBhdGgpO1xuICAgICAgICByZXR1cm4gKG9ialZhbHVlID09PSB1bmRlZmluZWQgJiYgb2JqVmFsdWUgPT09IHNyY1ZhbHVlKVxuICAgICAgICAgID8gaGFzSW4ob2JqZWN0LCBwYXRoKVxuICAgICAgICAgIDogYmFzZUlzRXF1YWwoc3JjVmFsdWUsIG9ialZhbHVlLCBDT01QQVJFX1BBUlRJQUxfRkxBRyB8IENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5tZXJnZWAgd2l0aG91dCBzdXBwb3J0IGZvciBtdWx0aXBsZSBzb3VyY2VzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgc291cmNlIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc3JjSW5kZXggVGhlIGluZGV4IG9mIGBzb3VyY2VgLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIG1lcmdlZCB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtzdGFja10gVHJhY2tzIHRyYXZlcnNlZCBzb3VyY2UgdmFsdWVzIGFuZCB0aGVpciBtZXJnZWRcbiAgICAgKiAgY291bnRlcnBhcnRzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VNZXJnZShvYmplY3QsIHNvdXJjZSwgc3JjSW5kZXgsIGN1c3RvbWl6ZXIsIHN0YWNrKSB7XG4gICAgICBpZiAob2JqZWN0ID09PSBzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgYmFzZUZvcihzb3VyY2UsIGZ1bmN0aW9uKHNyY1ZhbHVlLCBrZXkpIHtcbiAgICAgICAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgICAgICAgaWYgKGlzT2JqZWN0KHNyY1ZhbHVlKSkge1xuICAgICAgICAgIGJhc2VNZXJnZURlZXAob2JqZWN0LCBzb3VyY2UsIGtleSwgc3JjSW5kZXgsIGJhc2VNZXJnZSwgY3VzdG9taXplciwgc3RhY2spO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIHZhciBuZXdWYWx1ZSA9IGN1c3RvbWl6ZXJcbiAgICAgICAgICAgID8gY3VzdG9taXplcihzYWZlR2V0KG9iamVjdCwga2V5KSwgc3JjVmFsdWUsIChrZXkgKyAnJyksIG9iamVjdCwgc291cmNlLCBzdGFjaylcbiAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuXG4gICAgICAgICAgaWYgKG5ld1ZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gc3JjVmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGFzc2lnbk1lcmdlVmFsdWUob2JqZWN0LCBrZXksIG5ld1ZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSwga2V5c0luKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VNZXJnZWAgZm9yIGFycmF5cyBhbmQgb2JqZWN0cyB3aGljaCBwZXJmb3Jtc1xuICAgICAqIGRlZXAgbWVyZ2VzIGFuZCB0cmFja3MgdHJhdmVyc2VkIG9iamVjdHMgZW5hYmxpbmcgb2JqZWN0cyB3aXRoIGNpcmN1bGFyXG4gICAgICogcmVmZXJlbmNlcyB0byBiZSBtZXJnZWQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gbWVyZ2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHNyY0luZGV4IFRoZSBpbmRleCBvZiBgc291cmNlYC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBtZXJnZUZ1bmMgVGhlIGZ1bmN0aW9uIHRvIG1lcmdlIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBhc3NpZ25lZCB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtzdGFja10gVHJhY2tzIHRyYXZlcnNlZCBzb3VyY2UgdmFsdWVzIGFuZCB0aGVpciBtZXJnZWRcbiAgICAgKiAgY291bnRlcnBhcnRzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VNZXJnZURlZXAob2JqZWN0LCBzb3VyY2UsIGtleSwgc3JjSW5kZXgsIG1lcmdlRnVuYywgY3VzdG9taXplciwgc3RhY2spIHtcbiAgICAgIHZhciBvYmpWYWx1ZSA9IHNhZmVHZXQob2JqZWN0LCBrZXkpLFxuICAgICAgICAgIHNyY1ZhbHVlID0gc2FmZUdldChzb3VyY2UsIGtleSksXG4gICAgICAgICAgc3RhY2tlZCA9IHN0YWNrLmdldChzcmNWYWx1ZSk7XG5cbiAgICAgIGlmIChzdGFja2VkKSB7XG4gICAgICAgIGFzc2lnbk1lcmdlVmFsdWUob2JqZWN0LCBrZXksIHN0YWNrZWQpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB2YXIgbmV3VmFsdWUgPSBjdXN0b21pemVyXG4gICAgICAgID8gY3VzdG9taXplcihvYmpWYWx1ZSwgc3JjVmFsdWUsIChrZXkgKyAnJyksIG9iamVjdCwgc291cmNlLCBzdGFjaylcbiAgICAgICAgOiB1bmRlZmluZWQ7XG5cbiAgICAgIHZhciBpc0NvbW1vbiA9IG5ld1ZhbHVlID09PSB1bmRlZmluZWQ7XG5cbiAgICAgIGlmIChpc0NvbW1vbikge1xuICAgICAgICB2YXIgaXNBcnIgPSBpc0FycmF5KHNyY1ZhbHVlKSxcbiAgICAgICAgICAgIGlzQnVmZiA9ICFpc0FyciAmJiBpc0J1ZmZlcihzcmNWYWx1ZSksXG4gICAgICAgICAgICBpc1R5cGVkID0gIWlzQXJyICYmICFpc0J1ZmYgJiYgaXNUeXBlZEFycmF5KHNyY1ZhbHVlKTtcblxuICAgICAgICBuZXdWYWx1ZSA9IHNyY1ZhbHVlO1xuICAgICAgICBpZiAoaXNBcnIgfHwgaXNCdWZmIHx8IGlzVHlwZWQpIHtcbiAgICAgICAgICBpZiAoaXNBcnJheShvYmpWYWx1ZSkpIHtcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gb2JqVmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2UgaWYgKGlzQXJyYXlMaWtlT2JqZWN0KG9ialZhbHVlKSkge1xuICAgICAgICAgICAgbmV3VmFsdWUgPSBjb3B5QXJyYXkob2JqVmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIGlmIChpc0J1ZmYpIHtcbiAgICAgICAgICAgIGlzQ29tbW9uID0gZmFsc2U7XG4gICAgICAgICAgICBuZXdWYWx1ZSA9IGNsb25lQnVmZmVyKHNyY1ZhbHVlLCB0cnVlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSBpZiAoaXNUeXBlZCkge1xuICAgICAgICAgICAgaXNDb21tb24gPSBmYWxzZTtcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gY2xvbmVUeXBlZEFycmF5KHNyY1ZhbHVlLCB0cnVlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBuZXdWYWx1ZSA9IFtdO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpc1BsYWluT2JqZWN0KHNyY1ZhbHVlKSB8fCBpc0FyZ3VtZW50cyhzcmNWYWx1ZSkpIHtcbiAgICAgICAgICBuZXdWYWx1ZSA9IG9ialZhbHVlO1xuICAgICAgICAgIGlmIChpc0FyZ3VtZW50cyhvYmpWYWx1ZSkpIHtcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gdG9QbGFpbk9iamVjdChvYmpWYWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2UgaWYgKCFpc09iamVjdChvYmpWYWx1ZSkgfHwgaXNGdW5jdGlvbihvYmpWYWx1ZSkpIHtcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gaW5pdENsb25lT2JqZWN0KHNyY1ZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgaXNDb21tb24gPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGlzQ29tbW9uKSB7XG4gICAgICAgIC8vIFJlY3Vyc2l2ZWx5IG1lcmdlIG9iamVjdHMgYW5kIGFycmF5cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgICAgICBzdGFjay5zZXQoc3JjVmFsdWUsIG5ld1ZhbHVlKTtcbiAgICAgICAgbWVyZ2VGdW5jKG5ld1ZhbHVlLCBzcmNWYWx1ZSwgc3JjSW5kZXgsIGN1c3RvbWl6ZXIsIHN0YWNrKTtcbiAgICAgICAgc3RhY2tbJ2RlbGV0ZSddKHNyY1ZhbHVlKTtcbiAgICAgIH1cbiAgICAgIGFzc2lnbk1lcmdlVmFsdWUob2JqZWN0LCBrZXksIG5ld1ZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5udGhgIHdoaWNoIGRvZXNuJ3QgY29lcmNlIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBpbmRleCBvZiB0aGUgZWxlbWVudCB0byByZXR1cm4uXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG50aCBlbGVtZW50IG9mIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZU50aChhcnJheSwgbikge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIG4gKz0gbiA8IDAgPyBsZW5ndGggOiAwO1xuICAgICAgcmV0dXJuIGlzSW5kZXgobiwgbGVuZ3RoKSA/IGFycmF5W25dIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLm9yZGVyQnlgIHdpdGhvdXQgcGFyYW0gZ3VhcmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbltdfE9iamVjdFtdfHN0cmluZ1tdfSBpdGVyYXRlZXMgVGhlIGl0ZXJhdGVlcyB0byBzb3J0IGJ5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nW119IG9yZGVycyBUaGUgc29ydCBvcmRlcnMgb2YgYGl0ZXJhdGVlc2AuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgc29ydGVkIGFycmF5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VPcmRlckJ5KGNvbGxlY3Rpb24sIGl0ZXJhdGVlcywgb3JkZXJzKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMTtcbiAgICAgIGl0ZXJhdGVlcyA9IGFycmF5TWFwKGl0ZXJhdGVlcy5sZW5ndGggPyBpdGVyYXRlZXMgOiBbaWRlbnRpdHldLCBiYXNlVW5hcnkoZ2V0SXRlcmF0ZWUoKSkpO1xuXG4gICAgICB2YXIgcmVzdWx0ID0gYmFzZU1hcChjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwga2V5LCBjb2xsZWN0aW9uKSB7XG4gICAgICAgIHZhciBjcml0ZXJpYSA9IGFycmF5TWFwKGl0ZXJhdGVlcywgZnVuY3Rpb24oaXRlcmF0ZWUpIHtcbiAgICAgICAgICByZXR1cm4gaXRlcmF0ZWUodmFsdWUpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHsgJ2NyaXRlcmlhJzogY3JpdGVyaWEsICdpbmRleCc6ICsraW5kZXgsICd2YWx1ZSc6IHZhbHVlIH07XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIGJhc2VTb3J0QnkocmVzdWx0LCBmdW5jdGlvbihvYmplY3QsIG90aGVyKSB7XG4gICAgICAgIHJldHVybiBjb21wYXJlTXVsdGlwbGUob2JqZWN0LCBvdGhlciwgb3JkZXJzKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnBpY2tgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaW5kaXZpZHVhbFxuICAgICAqIHByb3BlcnR5IGlkZW50aWZpZXJzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBzb3VyY2Ugb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nW119IHBhdGhzIFRoZSBwcm9wZXJ0eSBwYXRocyB0byBwaWNrLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVBpY2sob2JqZWN0LCBwYXRocykge1xuICAgICAgcmV0dXJuIGJhc2VQaWNrQnkob2JqZWN0LCBwYXRocywgZnVuY3Rpb24odmFsdWUsIHBhdGgpIHtcbiAgICAgICAgcmV0dXJuIGhhc0luKG9iamVjdCwgcGF0aCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiAgYF8ucGlja0J5YCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIHNvdXJjZSBvYmplY3QuXG4gICAgICogQHBhcmFtIHtzdHJpbmdbXX0gcGF0aHMgVGhlIHByb3BlcnR5IHBhdGhzIHRvIHBpY2suXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBwcm9wZXJ0eS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VQaWNrQnkob2JqZWN0LCBwYXRocywgcHJlZGljYXRlKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBwYXRocy5sZW5ndGgsXG4gICAgICAgICAgcmVzdWx0ID0ge307XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBwYXRoID0gcGF0aHNbaW5kZXhdLFxuICAgICAgICAgICAgdmFsdWUgPSBiYXNlR2V0KG9iamVjdCwgcGF0aCk7XG5cbiAgICAgICAgaWYgKHByZWRpY2F0ZSh2YWx1ZSwgcGF0aCkpIHtcbiAgICAgICAgICBiYXNlU2V0KHJlc3VsdCwgY2FzdFBhdGgocGF0aCwgb2JqZWN0KSwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZVByb3BlcnR5YCB3aGljaCBzdXBwb3J0cyBkZWVwIHBhdGhzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGFjY2Vzc29yIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VQcm9wZXJ0eURlZXAocGF0aCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgICByZXR1cm4gYmFzZUdldChvYmplY3QsIHBhdGgpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5wdWxsQWxsQnlgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWVcbiAgICAgKiBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlcyBUaGUgdmFsdWVzIHRvIHJlbW92ZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWVdIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VQdWxsQWxsKGFycmF5LCB2YWx1ZXMsIGl0ZXJhdGVlLCBjb21wYXJhdG9yKSB7XG4gICAgICB2YXIgaW5kZXhPZiA9IGNvbXBhcmF0b3IgPyBiYXNlSW5kZXhPZldpdGggOiBiYXNlSW5kZXhPZixcbiAgICAgICAgICBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHZhbHVlcy5sZW5ndGgsXG4gICAgICAgICAgc2VlbiA9IGFycmF5O1xuXG4gICAgICBpZiAoYXJyYXkgPT09IHZhbHVlcykge1xuICAgICAgICB2YWx1ZXMgPSBjb3B5QXJyYXkodmFsdWVzKTtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVyYXRlZSkge1xuICAgICAgICBzZWVuID0gYXJyYXlNYXAoYXJyYXksIGJhc2VVbmFyeShpdGVyYXRlZSkpO1xuICAgICAgfVxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIGZyb21JbmRleCA9IDAsXG4gICAgICAgICAgICB2YWx1ZSA9IHZhbHVlc1tpbmRleF0sXG4gICAgICAgICAgICBjb21wdXRlZCA9IGl0ZXJhdGVlID8gaXRlcmF0ZWUodmFsdWUpIDogdmFsdWU7XG5cbiAgICAgICAgd2hpbGUgKChmcm9tSW5kZXggPSBpbmRleE9mKHNlZW4sIGNvbXB1dGVkLCBmcm9tSW5kZXgsIGNvbXBhcmF0b3IpKSA+IC0xKSB7XG4gICAgICAgICAgaWYgKHNlZW4gIT09IGFycmF5KSB7XG4gICAgICAgICAgICBzcGxpY2UuY2FsbChzZWVuLCBmcm9tSW5kZXgsIDEpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBzcGxpY2UuY2FsbChhcnJheSwgZnJvbUluZGV4LCAxKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGFycmF5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnB1bGxBdGAgd2l0aG91dCBzdXBwb3J0IGZvciBpbmRpdmlkdWFsXG4gICAgICogaW5kZXhlcyBvciBjYXB0dXJpbmcgdGhlIHJlbW92ZWQgZWxlbWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJbXX0gaW5kZXhlcyBUaGUgaW5kZXhlcyBvZiBlbGVtZW50cyB0byByZW1vdmUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVB1bGxBdChhcnJheSwgaW5kZXhlcykge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID8gaW5kZXhlcy5sZW5ndGggOiAwLFxuICAgICAgICAgIGxhc3RJbmRleCA9IGxlbmd0aCAtIDE7XG5cbiAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICB2YXIgaW5kZXggPSBpbmRleGVzW2xlbmd0aF07XG4gICAgICAgIGlmIChsZW5ndGggPT0gbGFzdEluZGV4IHx8IGluZGV4ICE9PSBwcmV2aW91cykge1xuICAgICAgICAgIHZhciBwcmV2aW91cyA9IGluZGV4O1xuICAgICAgICAgIGlmIChpc0luZGV4KGluZGV4KSkge1xuICAgICAgICAgICAgc3BsaWNlLmNhbGwoYXJyYXksIGluZGV4LCAxKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYmFzZVVuc2V0KGFycmF5LCBpbmRleCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gYXJyYXk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucmFuZG9tYCB3aXRob3V0IHN1cHBvcnQgZm9yIHJldHVybmluZ1xuICAgICAqIGZsb2F0aW5nLXBvaW50IG51bWJlcnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBsb3dlciBUaGUgbG93ZXIgYm91bmQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHVwcGVyIFRoZSB1cHBlciBib3VuZC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSByYW5kb20gbnVtYmVyLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VSYW5kb20obG93ZXIsIHVwcGVyKSB7XG4gICAgICByZXR1cm4gbG93ZXIgKyBuYXRpdmVGbG9vcihuYXRpdmVSYW5kb20oKSAqICh1cHBlciAtIGxvd2VyICsgMSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnJhbmdlYCBhbmQgYF8ucmFuZ2VSaWdodGAgd2hpY2ggZG9lc24ndFxuICAgICAqIGNvZXJjZSBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydCBUaGUgc3RhcnQgb2YgdGhlIHJhbmdlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBlbmQgVGhlIGVuZCBvZiB0aGUgcmFuZ2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHN0ZXAgVGhlIHZhbHVlIHRvIGluY3JlbWVudCBvciBkZWNyZW1lbnQgYnkuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSByYW5nZSBvZiBudW1iZXJzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VSYW5nZShzdGFydCwgZW5kLCBzdGVwLCBmcm9tUmlnaHQpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IG5hdGl2ZU1heChuYXRpdmVDZWlsKChlbmQgLSBzdGFydCkgLyAoc3RlcCB8fCAxKSksIDApLFxuICAgICAgICAgIHJlc3VsdCA9IEFycmF5KGxlbmd0aCk7XG5cbiAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICByZXN1bHRbZnJvbVJpZ2h0ID8gbGVuZ3RoIDogKytpbmRleF0gPSBzdGFydDtcbiAgICAgICAgc3RhcnQgKz0gc3RlcDtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucmVwZWF0YCB3aGljaCBkb2Vzbid0IGNvZXJjZSBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byByZXBlYXQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciBvZiB0aW1lcyB0byByZXBlYXQgdGhlIHN0cmluZy5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSByZXBlYXRlZCBzdHJpbmcuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVJlcGVhdChzdHJpbmcsIG4pIHtcbiAgICAgIHZhciByZXN1bHQgPSAnJztcbiAgICAgIGlmICghc3RyaW5nIHx8IG4gPCAxIHx8IG4gPiBNQVhfU0FGRV9JTlRFR0VSKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgICAvLyBMZXZlcmFnZSB0aGUgZXhwb25lbnRpYXRpb24gYnkgc3F1YXJpbmcgYWxnb3JpdGhtIGZvciBhIGZhc3RlciByZXBlYXQuXG4gICAgICAvLyBTZWUgaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRXhwb25lbnRpYXRpb25fYnlfc3F1YXJpbmcgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgIGRvIHtcbiAgICAgICAgaWYgKG4gJSAyKSB7XG4gICAgICAgICAgcmVzdWx0ICs9IHN0cmluZztcbiAgICAgICAgfVxuICAgICAgICBuID0gbmF0aXZlRmxvb3IobiAvIDIpO1xuICAgICAgICBpZiAobikge1xuICAgICAgICAgIHN0cmluZyArPSBzdHJpbmc7XG4gICAgICAgIH1cbiAgICAgIH0gd2hpbGUgKG4pO1xuXG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnJlc3RgIHdoaWNoIGRvZXNuJ3QgdmFsaWRhdGUgb3IgY29lcmNlIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gYXBwbHkgYSByZXN0IHBhcmFtZXRlciB0by5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PWZ1bmMubGVuZ3RoLTFdIFRoZSBzdGFydCBwb3NpdGlvbiBvZiB0aGUgcmVzdCBwYXJhbWV0ZXIuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVJlc3QoZnVuYywgc3RhcnQpIHtcbiAgICAgIHJldHVybiBzZXRUb1N0cmluZyhvdmVyUmVzdChmdW5jLCBzdGFydCwgaWRlbnRpdHkpLCBmdW5jICsgJycpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnNhbXBsZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIHNhbXBsZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmFuZG9tIGVsZW1lbnQuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVNhbXBsZShjb2xsZWN0aW9uKSB7XG4gICAgICByZXR1cm4gYXJyYXlTYW1wbGUodmFsdWVzKGNvbGxlY3Rpb24pKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zYW1wbGVTaXplYCB3aXRob3V0IHBhcmFtIGd1YXJkcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gc2FtcGxlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBudW1iZXIgb2YgZWxlbWVudHMgdG8gc2FtcGxlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcmFuZG9tIGVsZW1lbnRzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VTYW1wbGVTaXplKGNvbGxlY3Rpb24sIG4pIHtcbiAgICAgIHZhciBhcnJheSA9IHZhbHVlcyhjb2xsZWN0aW9uKTtcbiAgICAgIHJldHVybiBzaHVmZmxlU2VsZihhcnJheSwgYmFzZUNsYW1wKG4sIDAsIGFycmF5Lmxlbmd0aCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnNldGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIHNldC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgcGF0aCBjcmVhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VTZXQob2JqZWN0LCBwYXRoLCB2YWx1ZSwgY3VzdG9taXplcikge1xuICAgICAgaWYgKCFpc09iamVjdChvYmplY3QpKSB7XG4gICAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgICB9XG4gICAgICBwYXRoID0gY2FzdFBhdGgocGF0aCwgb2JqZWN0KTtcblxuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gcGF0aC5sZW5ndGgsXG4gICAgICAgICAgbGFzdEluZGV4ID0gbGVuZ3RoIC0gMSxcbiAgICAgICAgICBuZXN0ZWQgPSBvYmplY3Q7XG5cbiAgICAgIHdoaWxlIChuZXN0ZWQgIT0gbnVsbCAmJiArK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBrZXkgPSB0b0tleShwYXRoW2luZGV4XSksXG4gICAgICAgICAgICBuZXdWYWx1ZSA9IHZhbHVlO1xuXG4gICAgICAgIGlmIChpbmRleCAhPSBsYXN0SW5kZXgpIHtcbiAgICAgICAgICB2YXIgb2JqVmFsdWUgPSBuZXN0ZWRba2V5XTtcbiAgICAgICAgICBuZXdWYWx1ZSA9IGN1c3RvbWl6ZXIgPyBjdXN0b21pemVyKG9ialZhbHVlLCBrZXksIG5lc3RlZCkgOiB1bmRlZmluZWQ7XG4gICAgICAgICAgaWYgKG5ld1ZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gaXNPYmplY3Qob2JqVmFsdWUpXG4gICAgICAgICAgICAgID8gb2JqVmFsdWVcbiAgICAgICAgICAgICAgOiAoaXNJbmRleChwYXRoW2luZGV4ICsgMV0pID8gW10gOiB7fSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGFzc2lnblZhbHVlKG5lc3RlZCwga2V5LCBuZXdWYWx1ZSk7XG4gICAgICAgIG5lc3RlZCA9IG5lc3RlZFtrZXldO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgc2V0RGF0YWAgd2l0aG91dCBzdXBwb3J0IGZvciBob3QgbG9vcCBzaG9ydGluZy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gYXNzb2NpYXRlIG1ldGFkYXRhIHdpdGguXG4gICAgICogQHBhcmFtIHsqfSBkYXRhIFRoZSBtZXRhZGF0YS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYGZ1bmNgLlxuICAgICAqL1xuICAgIHZhciBiYXNlU2V0RGF0YSA9ICFtZXRhTWFwID8gaWRlbnRpdHkgOiBmdW5jdGlvbihmdW5jLCBkYXRhKSB7XG4gICAgICBtZXRhTWFwLnNldChmdW5jLCBkYXRhKTtcbiAgICAgIHJldHVybiBmdW5jO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgc2V0VG9TdHJpbmdgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaG90IGxvb3Agc2hvcnRpbmcuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBzdHJpbmcgVGhlIGB0b1N0cmluZ2AgcmVzdWx0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBgZnVuY2AuXG4gICAgICovXG4gICAgdmFyIGJhc2VTZXRUb1N0cmluZyA9ICFkZWZpbmVQcm9wZXJ0eSA/IGlkZW50aXR5IDogZnVuY3Rpb24oZnVuYywgc3RyaW5nKSB7XG4gICAgICByZXR1cm4gZGVmaW5lUHJvcGVydHkoZnVuYywgJ3RvU3RyaW5nJywge1xuICAgICAgICAnY29uZmlndXJhYmxlJzogdHJ1ZSxcbiAgICAgICAgJ2VudW1lcmFibGUnOiBmYWxzZSxcbiAgICAgICAgJ3ZhbHVlJzogY29uc3RhbnQoc3RyaW5nKSxcbiAgICAgICAgJ3dyaXRhYmxlJzogdHJ1ZVxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnNodWZmbGVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBzaHVmZmxlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IHNodWZmbGVkIGFycmF5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VTaHVmZmxlKGNvbGxlY3Rpb24pIHtcbiAgICAgIHJldHVybiBzaHVmZmxlU2VsZih2YWx1ZXMoY29sbGVjdGlvbikpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnNsaWNlYCB3aXRob3V0IGFuIGl0ZXJhdGVlIGNhbGwgZ3VhcmQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBzbGljZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PTBdIFRoZSBzdGFydCBwb3NpdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2VuZD1hcnJheS5sZW5ndGhdIFRoZSBlbmQgcG9zaXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VTbGljZShhcnJheSwgc3RhcnQsIGVuZCkge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gICAgICBpZiAoc3RhcnQgPCAwKSB7XG4gICAgICAgIHN0YXJ0ID0gLXN0YXJ0ID4gbGVuZ3RoID8gMCA6IChsZW5ndGggKyBzdGFydCk7XG4gICAgICB9XG4gICAgICBlbmQgPSBlbmQgPiBsZW5ndGggPyBsZW5ndGggOiBlbmQ7XG4gICAgICBpZiAoZW5kIDwgMCkge1xuICAgICAgICBlbmQgKz0gbGVuZ3RoO1xuICAgICAgfVxuICAgICAgbGVuZ3RoID0gc3RhcnQgPiBlbmQgPyAwIDogKChlbmQgLSBzdGFydCkgPj4+IDApO1xuICAgICAgc3RhcnQgPj4+PSAwO1xuXG4gICAgICB2YXIgcmVzdWx0ID0gQXJyYXkobGVuZ3RoKTtcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHJlc3VsdFtpbmRleF0gPSBhcnJheVtpbmRleCArIHN0YXJ0XTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc29tZWAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFueSBlbGVtZW50IHBhc3NlcyB0aGUgcHJlZGljYXRlIGNoZWNrLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVNvbWUoY29sbGVjdGlvbiwgcHJlZGljYXRlKSB7XG4gICAgICB2YXIgcmVzdWx0O1xuXG4gICAgICBiYXNlRWFjaChjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pIHtcbiAgICAgICAgcmVzdWx0ID0gcHJlZGljYXRlKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbik7XG4gICAgICAgIHJldHVybiAhcmVzdWx0O1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gISFyZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc29ydGVkSW5kZXhgIGFuZCBgXy5zb3J0ZWRMYXN0SW5kZXhgIHdoaWNoXG4gICAgICogcGVyZm9ybXMgYSBiaW5hcnkgc2VhcmNoIG9mIGBhcnJheWAgdG8gZGV0ZXJtaW5lIHRoZSBpbmRleCBhdCB3aGljaCBgdmFsdWVgXG4gICAgICogc2hvdWxkIGJlIGluc2VydGVkIGludG8gYGFycmF5YCBpbiBvcmRlciB0byBtYWludGFpbiBpdHMgc29ydCBvcmRlci5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIHNvcnRlZCBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGV2YWx1YXRlLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW3JldEhpZ2hlc3RdIFNwZWNpZnkgcmV0dXJuaW5nIHRoZSBoaWdoZXN0IHF1YWxpZmllZCBpbmRleC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBhdCB3aGljaCBgdmFsdWVgIHNob3VsZCBiZSBpbnNlcnRlZFxuICAgICAqICBpbnRvIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVNvcnRlZEluZGV4KGFycmF5LCB2YWx1ZSwgcmV0SGlnaGVzdCkge1xuICAgICAgdmFyIGxvdyA9IDAsXG4gICAgICAgICAgaGlnaCA9IGFycmF5ID09IG51bGwgPyBsb3cgOiBhcnJheS5sZW5ndGg7XG5cbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicgJiYgdmFsdWUgPT09IHZhbHVlICYmIGhpZ2ggPD0gSEFMRl9NQVhfQVJSQVlfTEVOR1RIKSB7XG4gICAgICAgIHdoaWxlIChsb3cgPCBoaWdoKSB7XG4gICAgICAgICAgdmFyIG1pZCA9IChsb3cgKyBoaWdoKSA+Pj4gMSxcbiAgICAgICAgICAgICAgY29tcHV0ZWQgPSBhcnJheVttaWRdO1xuXG4gICAgICAgICAgaWYgKGNvbXB1dGVkICE9PSBudWxsICYmICFpc1N5bWJvbChjb21wdXRlZCkgJiZcbiAgICAgICAgICAgICAgKHJldEhpZ2hlc3QgPyAoY29tcHV0ZWQgPD0gdmFsdWUpIDogKGNvbXB1dGVkIDwgdmFsdWUpKSkge1xuICAgICAgICAgICAgbG93ID0gbWlkICsgMTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaGlnaCA9IG1pZDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGhpZ2g7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZVNvcnRlZEluZGV4QnkoYXJyYXksIHZhbHVlLCBpZGVudGl0eSwgcmV0SGlnaGVzdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc29ydGVkSW5kZXhCeWAgYW5kIGBfLnNvcnRlZExhc3RJbmRleEJ5YFxuICAgICAqIHdoaWNoIGludm9rZXMgYGl0ZXJhdGVlYCBmb3IgYHZhbHVlYCBhbmQgZWFjaCBlbGVtZW50IG9mIGBhcnJheWAgdG8gY29tcHV0ZVxuICAgICAqIHRoZWlyIHNvcnQgcmFua2luZy4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ7ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBzb3J0ZWQgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBldmFsdWF0ZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtyZXRIaWdoZXN0XSBTcGVjaWZ5IHJldHVybmluZyB0aGUgaGlnaGVzdCBxdWFsaWZpZWQgaW5kZXguXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggYXQgd2hpY2ggYHZhbHVlYCBzaG91bGQgYmUgaW5zZXJ0ZWRcbiAgICAgKiAgaW50byBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VTb3J0ZWRJbmRleEJ5KGFycmF5LCB2YWx1ZSwgaXRlcmF0ZWUsIHJldEhpZ2hlc3QpIHtcbiAgICAgIHZhbHVlID0gaXRlcmF0ZWUodmFsdWUpO1xuXG4gICAgICB2YXIgbG93ID0gMCxcbiAgICAgICAgICBoaWdoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGgsXG4gICAgICAgICAgdmFsSXNOYU4gPSB2YWx1ZSAhPT0gdmFsdWUsXG4gICAgICAgICAgdmFsSXNOdWxsID0gdmFsdWUgPT09IG51bGwsXG4gICAgICAgICAgdmFsSXNTeW1ib2wgPSBpc1N5bWJvbCh2YWx1ZSksXG4gICAgICAgICAgdmFsSXNVbmRlZmluZWQgPSB2YWx1ZSA9PT0gdW5kZWZpbmVkO1xuXG4gICAgICB3aGlsZSAobG93IDwgaGlnaCkge1xuICAgICAgICB2YXIgbWlkID0gbmF0aXZlRmxvb3IoKGxvdyArIGhpZ2gpIC8gMiksXG4gICAgICAgICAgICBjb21wdXRlZCA9IGl0ZXJhdGVlKGFycmF5W21pZF0pLFxuICAgICAgICAgICAgb3RoSXNEZWZpbmVkID0gY29tcHV0ZWQgIT09IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIG90aElzTnVsbCA9IGNvbXB1dGVkID09PSBudWxsLFxuICAgICAgICAgICAgb3RoSXNSZWZsZXhpdmUgPSBjb21wdXRlZCA9PT0gY29tcHV0ZWQsXG4gICAgICAgICAgICBvdGhJc1N5bWJvbCA9IGlzU3ltYm9sKGNvbXB1dGVkKTtcblxuICAgICAgICBpZiAodmFsSXNOYU4pIHtcbiAgICAgICAgICB2YXIgc2V0TG93ID0gcmV0SGlnaGVzdCB8fCBvdGhJc1JlZmxleGl2ZTtcbiAgICAgICAgfSBlbHNlIGlmICh2YWxJc1VuZGVmaW5lZCkge1xuICAgICAgICAgIHNldExvdyA9IG90aElzUmVmbGV4aXZlICYmIChyZXRIaWdoZXN0IHx8IG90aElzRGVmaW5lZCk7XG4gICAgICAgIH0gZWxzZSBpZiAodmFsSXNOdWxsKSB7XG4gICAgICAgICAgc2V0TG93ID0gb3RoSXNSZWZsZXhpdmUgJiYgb3RoSXNEZWZpbmVkICYmIChyZXRIaWdoZXN0IHx8ICFvdGhJc051bGwpO1xuICAgICAgICB9IGVsc2UgaWYgKHZhbElzU3ltYm9sKSB7XG4gICAgICAgICAgc2V0TG93ID0gb3RoSXNSZWZsZXhpdmUgJiYgb3RoSXNEZWZpbmVkICYmICFvdGhJc051bGwgJiYgKHJldEhpZ2hlc3QgfHwgIW90aElzU3ltYm9sKTtcbiAgICAgICAgfSBlbHNlIGlmIChvdGhJc051bGwgfHwgb3RoSXNTeW1ib2wpIHtcbiAgICAgICAgICBzZXRMb3cgPSBmYWxzZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzZXRMb3cgPSByZXRIaWdoZXN0ID8gKGNvbXB1dGVkIDw9IHZhbHVlKSA6IChjb21wdXRlZCA8IHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2V0TG93KSB7XG4gICAgICAgICAgbG93ID0gbWlkICsgMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBoaWdoID0gbWlkO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbmF0aXZlTWluKGhpZ2gsIE1BWF9BUlJBWV9JTkRFWCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc29ydGVkVW5pcWAgYW5kIGBfLnNvcnRlZFVuaXFCeWAgd2l0aG91dFxuICAgICAqIHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZHVwbGljYXRlIGZyZWUgYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVNvcnRlZFVuaXEoYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICAgICAgcmVzSW5kZXggPSAwLFxuICAgICAgICAgIHJlc3VsdCA9IFtdO1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF0sXG4gICAgICAgICAgICBjb21wdXRlZCA9IGl0ZXJhdGVlID8gaXRlcmF0ZWUodmFsdWUpIDogdmFsdWU7XG5cbiAgICAgICAgaWYgKCFpbmRleCB8fCAhZXEoY29tcHV0ZWQsIHNlZW4pKSB7XG4gICAgICAgICAgdmFyIHNlZW4gPSBjb21wdXRlZDtcbiAgICAgICAgICByZXN1bHRbcmVzSW5kZXgrK10gPSB2YWx1ZSA9PT0gMCA/IDAgOiB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy50b051bWJlcmAgd2hpY2ggZG9lc24ndCBlbnN1cmUgY29ycmVjdFxuICAgICAqIGNvbnZlcnNpb25zIG9mIGJpbmFyeSwgaGV4YWRlY2ltYWwsIG9yIG9jdGFsIHN0cmluZyB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHByb2Nlc3MuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgbnVtYmVyLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VUb051bWJlcih2YWx1ZSkge1xuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJykge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgICBpZiAoaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBOQU47XG4gICAgICB9XG4gICAgICByZXR1cm4gK3ZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnRvU3RyaW5nYCB3aGljaCBkb2Vzbid0IGNvbnZlcnQgbnVsbGlzaFxuICAgICAqIHZhbHVlcyB0byBlbXB0eSBzdHJpbmdzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwcm9jZXNzLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHN0cmluZy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlVG9TdHJpbmcodmFsdWUpIHtcbiAgICAgIC8vIEV4aXQgZWFybHkgZm9yIHN0cmluZ3MgdG8gYXZvaWQgYSBwZXJmb3JtYW5jZSBoaXQgaW4gc29tZSBlbnZpcm9ubWVudHMuXG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAvLyBSZWN1cnNpdmVseSBjb252ZXJ0IHZhbHVlcyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgICAgICByZXR1cm4gYXJyYXlNYXAodmFsdWUsIGJhc2VUb1N0cmluZykgKyAnJztcbiAgICAgIH1cbiAgICAgIGlmIChpc1N5bWJvbCh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIHN5bWJvbFRvU3RyaW5nID8gc3ltYm9sVG9TdHJpbmcuY2FsbCh2YWx1ZSkgOiAnJztcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHQgPSAodmFsdWUgKyAnJyk7XG4gICAgICByZXR1cm4gKHJlc3VsdCA9PSAnMCcgJiYgKDEgLyB2YWx1ZSkgPT0gLUlORklOSVRZKSA/ICctMCcgOiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udW5pcUJ5YCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZHVwbGljYXRlIGZyZWUgYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVVuaXEoYXJyYXksIGl0ZXJhdGVlLCBjb21wYXJhdG9yKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBpbmNsdWRlcyA9IGFycmF5SW5jbHVkZXMsXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICAgIGlzQ29tbW9uID0gdHJ1ZSxcbiAgICAgICAgICByZXN1bHQgPSBbXSxcbiAgICAgICAgICBzZWVuID0gcmVzdWx0O1xuXG4gICAgICBpZiAoY29tcGFyYXRvcikge1xuICAgICAgICBpc0NvbW1vbiA9IGZhbHNlO1xuICAgICAgICBpbmNsdWRlcyA9IGFycmF5SW5jbHVkZXNXaXRoO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAobGVuZ3RoID49IExBUkdFX0FSUkFZX1NJWkUpIHtcbiAgICAgICAgdmFyIHNldCA9IGl0ZXJhdGVlID8gbnVsbCA6IGNyZWF0ZVNldChhcnJheSk7XG4gICAgICAgIGlmIChzZXQpIHtcbiAgICAgICAgICByZXR1cm4gc2V0VG9BcnJheShzZXQpO1xuICAgICAgICB9XG4gICAgICAgIGlzQ29tbW9uID0gZmFsc2U7XG4gICAgICAgIGluY2x1ZGVzID0gY2FjaGVIYXM7XG4gICAgICAgIHNlZW4gPSBuZXcgU2V0Q2FjaGU7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgc2VlbiA9IGl0ZXJhdGVlID8gW10gOiByZXN1bHQ7XG4gICAgICB9XG4gICAgICBvdXRlcjpcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XSxcbiAgICAgICAgICAgIGNvbXB1dGVkID0gaXRlcmF0ZWUgPyBpdGVyYXRlZSh2YWx1ZSkgOiB2YWx1ZTtcblxuICAgICAgICB2YWx1ZSA9IChjb21wYXJhdG9yIHx8IHZhbHVlICE9PSAwKSA/IHZhbHVlIDogMDtcbiAgICAgICAgaWYgKGlzQ29tbW9uICYmIGNvbXB1dGVkID09PSBjb21wdXRlZCkge1xuICAgICAgICAgIHZhciBzZWVuSW5kZXggPSBzZWVuLmxlbmd0aDtcbiAgICAgICAgICB3aGlsZSAoc2VlbkluZGV4LS0pIHtcbiAgICAgICAgICAgIGlmIChzZWVuW3NlZW5JbmRleF0gPT09IGNvbXB1dGVkKSB7XG4gICAgICAgICAgICAgIGNvbnRpbnVlIG91dGVyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaXRlcmF0ZWUpIHtcbiAgICAgICAgICAgIHNlZW4ucHVzaChjb21wdXRlZCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICghaW5jbHVkZXMoc2VlbiwgY29tcHV0ZWQsIGNvbXBhcmF0b3IpKSB7XG4gICAgICAgICAgaWYgKHNlZW4gIT09IHJlc3VsdCkge1xuICAgICAgICAgICAgc2Vlbi5wdXNoKGNvbXB1dGVkKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnVuc2V0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcHJvcGVydHkgcGF0aCB0byB1bnNldC5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHByb3BlcnR5IGlzIGRlbGV0ZWQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlVW5zZXQob2JqZWN0LCBwYXRoKSB7XG4gICAgICBwYXRoID0gY2FzdFBhdGgocGF0aCwgb2JqZWN0KTtcbiAgICAgIG9iamVjdCA9IHBhcmVudChvYmplY3QsIHBhdGgpO1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsIHx8IGRlbGV0ZSBvYmplY3RbdG9LZXkobGFzdChwYXRoKSldO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnVwZGF0ZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIHVwZGF0ZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSB1cGRhdGVyIFRoZSBmdW5jdGlvbiB0byBwcm9kdWNlIHRoZSB1cGRhdGVkIHZhbHVlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIHBhdGggY3JlYXRpb24uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlVXBkYXRlKG9iamVjdCwgcGF0aCwgdXBkYXRlciwgY3VzdG9taXplcikge1xuICAgICAgcmV0dXJuIGJhc2VTZXQob2JqZWN0LCBwYXRoLCB1cGRhdGVyKGJhc2VHZXQob2JqZWN0LCBwYXRoKSksIGN1c3RvbWl6ZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIG1ldGhvZHMgbGlrZSBgXy5kcm9wV2hpbGVgIGFuZCBgXy50YWtlV2hpbGVgXG4gICAgICogd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbaXNEcm9wXSBTcGVjaWZ5IGRyb3BwaW5nIGVsZW1lbnRzIGluc3RlYWQgb2YgdGFraW5nIHRoZW0uXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VXaGlsZShhcnJheSwgcHJlZGljYXRlLCBpc0Ryb3AsIGZyb21SaWdodCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgICBpbmRleCA9IGZyb21SaWdodCA/IGxlbmd0aCA6IC0xO1xuXG4gICAgICB3aGlsZSAoKGZyb21SaWdodCA/IGluZGV4LS0gOiArK2luZGV4IDwgbGVuZ3RoKSAmJlxuICAgICAgICBwcmVkaWNhdGUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpKSB7fVxuXG4gICAgICByZXR1cm4gaXNEcm9wXG4gICAgICAgID8gYmFzZVNsaWNlKGFycmF5LCAoZnJvbVJpZ2h0ID8gMCA6IGluZGV4KSwgKGZyb21SaWdodCA/IGluZGV4ICsgMSA6IGxlbmd0aCkpXG4gICAgICAgIDogYmFzZVNsaWNlKGFycmF5LCAoZnJvbVJpZ2h0ID8gaW5kZXggKyAxIDogMCksIChmcm9tUmlnaHQgPyBsZW5ndGggOiBpbmRleCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGB3cmFwcGVyVmFsdWVgIHdoaWNoIHJldHVybnMgdGhlIHJlc3VsdCBvZlxuICAgICAqIHBlcmZvcm1pbmcgYSBzZXF1ZW5jZSBvZiBhY3Rpb25zIG9uIHRoZSB1bndyYXBwZWQgYHZhbHVlYCwgd2hlcmUgZWFjaFxuICAgICAqIHN1Y2Nlc3NpdmUgYWN0aW9uIGlzIHN1cHBsaWVkIHRoZSByZXR1cm4gdmFsdWUgb2YgdGhlIHByZXZpb3VzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB1bndyYXBwZWQgdmFsdWUuXG4gICAgICogQHBhcmFtIHtBcnJheX0gYWN0aW9ucyBBY3Rpb25zIHRvIHBlcmZvcm0gdG8gcmVzb2x2ZSB0aGUgdW53cmFwcGVkIHZhbHVlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXNvbHZlZCB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlV3JhcHBlclZhbHVlKHZhbHVlLCBhY3Rpb25zKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gdmFsdWU7XG4gICAgICBpZiAocmVzdWx0IGluc3RhbmNlb2YgTGF6eVdyYXBwZXIpIHtcbiAgICAgICAgcmVzdWx0ID0gcmVzdWx0LnZhbHVlKCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYXJyYXlSZWR1Y2UoYWN0aW9ucywgZnVuY3Rpb24ocmVzdWx0LCBhY3Rpb24pIHtcbiAgICAgICAgcmV0dXJuIGFjdGlvbi5mdW5jLmFwcGx5KGFjdGlvbi50aGlzQXJnLCBhcnJheVB1c2goW3Jlc3VsdF0sIGFjdGlvbi5hcmdzKSk7XG4gICAgICB9LCByZXN1bHQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIG1ldGhvZHMgbGlrZSBgXy54b3JgLCB3aXRob3V0IHN1cHBvcnQgZm9yXG4gICAgICogaXRlcmF0ZWUgc2hvcnRoYW5kcywgdGhhdCBhY2NlcHRzIGFuIGFycmF5IG9mIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheXMgVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgdmFsdWVzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VYb3IoYXJyYXlzLCBpdGVyYXRlZSwgY29tcGFyYXRvcikge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5cy5sZW5ndGg7XG4gICAgICBpZiAobGVuZ3RoIDwgMikge1xuICAgICAgICByZXR1cm4gbGVuZ3RoID8gYmFzZVVuaXEoYXJyYXlzWzBdKSA6IFtdO1xuICAgICAgfVxuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgcmVzdWx0ID0gQXJyYXkobGVuZ3RoKTtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIGFycmF5ID0gYXJyYXlzW2luZGV4XSxcbiAgICAgICAgICAgIG90aEluZGV4ID0gLTE7XG5cbiAgICAgICAgd2hpbGUgKCsrb3RoSW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICBpZiAob3RoSW5kZXggIT0gaW5kZXgpIHtcbiAgICAgICAgICAgIHJlc3VsdFtpbmRleF0gPSBiYXNlRGlmZmVyZW5jZShyZXN1bHRbaW5kZXhdIHx8IGFycmF5LCBhcnJheXNbb3RoSW5kZXhdLCBpdGVyYXRlZSwgY29tcGFyYXRvcik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZVVuaXEoYmFzZUZsYXR0ZW4ocmVzdWx0LCAxKSwgaXRlcmF0ZWUsIGNvbXBhcmF0b3IpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy56aXBPYmplY3RgIHdoaWNoIGFzc2lnbnMgdmFsdWVzIHVzaW5nIGBhc3NpZ25GdW5jYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gcHJvcHMgVGhlIHByb3BlcnR5IGlkZW50aWZpZXJzLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlcyBUaGUgcHJvcGVydHkgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGFzc2lnbkZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGFzc2lnbiB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlWmlwT2JqZWN0KHByb3BzLCB2YWx1ZXMsIGFzc2lnbkZ1bmMpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHByb3BzLmxlbmd0aCxcbiAgICAgICAgICB2YWxzTGVuZ3RoID0gdmFsdWVzLmxlbmd0aCxcbiAgICAgICAgICByZXN1bHQgPSB7fTtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gaW5kZXggPCB2YWxzTGVuZ3RoID8gdmFsdWVzW2luZGV4XSA6IHVuZGVmaW5lZDtcbiAgICAgICAgYXNzaWduRnVuYyhyZXN1bHQsIHByb3BzW2luZGV4XSwgdmFsdWUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDYXN0cyBgdmFsdWVgIHRvIGFuIGVtcHR5IGFycmF5IGlmIGl0J3Mgbm90IGFuIGFycmF5IGxpa2Ugb2JqZWN0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheXxPYmplY3R9IFJldHVybnMgdGhlIGNhc3QgYXJyYXktbGlrZSBvYmplY3QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2FzdEFycmF5TGlrZU9iamVjdCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzQXJyYXlMaWtlT2JqZWN0KHZhbHVlKSA/IHZhbHVlIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2FzdHMgYHZhbHVlYCB0byBgaWRlbnRpdHlgIGlmIGl0J3Mgbm90IGEgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGNhc3QgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2FzdEZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdmdW5jdGlvbicgPyB2YWx1ZSA6IGlkZW50aXR5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENhc3RzIGB2YWx1ZWAgdG8gYSBwYXRoIGFycmF5IGlmIGl0J3Mgbm90IG9uZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIG9iamVjdCB0byBxdWVyeSBrZXlzIG9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgY2FzdCBwcm9wZXJ0eSBwYXRoIGFycmF5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNhc3RQYXRoKHZhbHVlLCBvYmplY3QpIHtcbiAgICAgIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gaXNLZXkodmFsdWUsIG9iamVjdCkgPyBbdmFsdWVdIDogc3RyaW5nVG9QYXRoKHRvU3RyaW5nKHZhbHVlKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBgYmFzZVJlc3RgIGFsaWFzIHdoaWNoIGNhbiBiZSByZXBsYWNlZCB3aXRoIGBpZGVudGl0eWAgYnkgbW9kdWxlXG4gICAgICogcmVwbGFjZW1lbnQgcGx1Z2lucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHR5cGUge0Z1bmN0aW9ufVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGFwcGx5IGEgcmVzdCBwYXJhbWV0ZXIgdG8uXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICovXG4gICAgdmFyIGNhc3RSZXN0ID0gYmFzZVJlc3Q7XG5cbiAgICAvKipcbiAgICAgKiBDYXN0cyBgYXJyYXlgIHRvIGEgc2xpY2UgaWYgaXQncyBuZWVkZWQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydCBUaGUgc3RhcnQgcG9zaXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtlbmQ9YXJyYXkubGVuZ3RoXSBUaGUgZW5kIHBvc2l0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgY2FzdCBzbGljZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjYXN0U2xpY2UoYXJyYXksIHN0YXJ0LCBlbmQpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG4gICAgICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbmd0aCA6IGVuZDtcbiAgICAgIHJldHVybiAoIXN0YXJ0ICYmIGVuZCA+PSBsZW5ndGgpID8gYXJyYXkgOiBiYXNlU2xpY2UoYXJyYXksIHN0YXJ0LCBlbmQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc2ltcGxlIHdyYXBwZXIgYXJvdW5kIHRoZSBnbG9iYWwgW2BjbGVhclRpbWVvdXRgXShodHRwczovL21kbi5pby9jbGVhclRpbWVvdXQpLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge251bWJlcnxPYmplY3R9IGlkIFRoZSB0aW1lciBpZCBvciB0aW1lb3V0IG9iamVjdCBvZiB0aGUgdGltZXIgdG8gY2xlYXIuXG4gICAgICovXG4gICAgdmFyIGNsZWFyVGltZW91dCA9IGN0eENsZWFyVGltZW91dCB8fCBmdW5jdGlvbihpZCkge1xuICAgICAgcmV0dXJuIHJvb3QuY2xlYXJUaW1lb3V0KGlkKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNsb25lIG9mICBgYnVmZmVyYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtCdWZmZXJ9IGJ1ZmZlciBUaGUgYnVmZmVyIHRvIGNsb25lLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzRGVlcF0gU3BlY2lmeSBhIGRlZXAgY2xvbmUuXG4gICAgICogQHJldHVybnMge0J1ZmZlcn0gUmV0dXJucyB0aGUgY2xvbmVkIGJ1ZmZlci5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZUJ1ZmZlcihidWZmZXIsIGlzRGVlcCkge1xuICAgICAgaWYgKGlzRGVlcCkge1xuICAgICAgICByZXR1cm4gYnVmZmVyLnNsaWNlKCk7XG4gICAgICB9XG4gICAgICB2YXIgbGVuZ3RoID0gYnVmZmVyLmxlbmd0aCxcbiAgICAgICAgICByZXN1bHQgPSBhbGxvY1Vuc2FmZSA/IGFsbG9jVW5zYWZlKGxlbmd0aCkgOiBuZXcgYnVmZmVyLmNvbnN0cnVjdG9yKGxlbmd0aCk7XG5cbiAgICAgIGJ1ZmZlci5jb3B5KHJlc3VsdCk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjbG9uZSBvZiBgYXJyYXlCdWZmZXJgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5QnVmZmVyfSBhcnJheUJ1ZmZlciBUaGUgYXJyYXkgYnVmZmVyIHRvIGNsb25lLlxuICAgICAqIEByZXR1cm5zIHtBcnJheUJ1ZmZlcn0gUmV0dXJucyB0aGUgY2xvbmVkIGFycmF5IGJ1ZmZlci5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZUFycmF5QnVmZmVyKGFycmF5QnVmZmVyKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gbmV3IGFycmF5QnVmZmVyLmNvbnN0cnVjdG9yKGFycmF5QnVmZmVyLmJ5dGVMZW5ndGgpO1xuICAgICAgbmV3IFVpbnQ4QXJyYXkocmVzdWx0KS5zZXQobmV3IFVpbnQ4QXJyYXkoYXJyYXlCdWZmZXIpKTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNsb25lIG9mIGBkYXRhVmlld2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhVmlldyBUaGUgZGF0YSB2aWV3IHRvIGNsb25lLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzRGVlcF0gU3BlY2lmeSBhIGRlZXAgY2xvbmUuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2xvbmVkIGRhdGEgdmlldy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZURhdGFWaWV3KGRhdGFWaWV3LCBpc0RlZXApIHtcbiAgICAgIHZhciBidWZmZXIgPSBpc0RlZXAgPyBjbG9uZUFycmF5QnVmZmVyKGRhdGFWaWV3LmJ1ZmZlcikgOiBkYXRhVmlldy5idWZmZXI7XG4gICAgICByZXR1cm4gbmV3IGRhdGFWaWV3LmNvbnN0cnVjdG9yKGJ1ZmZlciwgZGF0YVZpZXcuYnl0ZU9mZnNldCwgZGF0YVZpZXcuYnl0ZUxlbmd0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNsb25lIG9mIGByZWdleHBgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gcmVnZXhwIFRoZSByZWdleHAgdG8gY2xvbmUuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2xvbmVkIHJlZ2V4cC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZVJlZ0V4cChyZWdleHApIHtcbiAgICAgIHZhciByZXN1bHQgPSBuZXcgcmVnZXhwLmNvbnN0cnVjdG9yKHJlZ2V4cC5zb3VyY2UsIHJlRmxhZ3MuZXhlYyhyZWdleHApKTtcbiAgICAgIHJlc3VsdC5sYXN0SW5kZXggPSByZWdleHAubGFzdEluZGV4O1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY2xvbmUgb2YgdGhlIGBzeW1ib2xgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHN5bWJvbCBUaGUgc3ltYm9sIG9iamVjdCB0byBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjbG9uZWQgc3ltYm9sIG9iamVjdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZVN5bWJvbChzeW1ib2wpIHtcbiAgICAgIHJldHVybiBzeW1ib2xWYWx1ZU9mID8gT2JqZWN0KHN5bWJvbFZhbHVlT2YuY2FsbChzeW1ib2wpKSA6IHt9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjbG9uZSBvZiBgdHlwZWRBcnJheWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSB0eXBlZEFycmF5IFRoZSB0eXBlZCBhcnJheSB0byBjbG9uZS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpc0RlZXBdIFNwZWNpZnkgYSBkZWVwIGNsb25lLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNsb25lZCB0eXBlZCBhcnJheS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZVR5cGVkQXJyYXkodHlwZWRBcnJheSwgaXNEZWVwKSB7XG4gICAgICB2YXIgYnVmZmVyID0gaXNEZWVwID8gY2xvbmVBcnJheUJ1ZmZlcih0eXBlZEFycmF5LmJ1ZmZlcikgOiB0eXBlZEFycmF5LmJ1ZmZlcjtcbiAgICAgIHJldHVybiBuZXcgdHlwZWRBcnJheS5jb25zdHJ1Y3RvcihidWZmZXIsIHR5cGVkQXJyYXkuYnl0ZU9mZnNldCwgdHlwZWRBcnJheS5sZW5ndGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbXBhcmVzIHZhbHVlcyB0byBzb3J0IHRoZW0gaW4gYXNjZW5kaW5nIG9yZGVyLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgc29ydCBvcmRlciBpbmRpY2F0b3IgZm9yIGB2YWx1ZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29tcGFyZUFzY2VuZGluZyh2YWx1ZSwgb3RoZXIpIHtcbiAgICAgIGlmICh2YWx1ZSAhPT0gb3RoZXIpIHtcbiAgICAgICAgdmFyIHZhbElzRGVmaW5lZCA9IHZhbHVlICE9PSB1bmRlZmluZWQsXG4gICAgICAgICAgICB2YWxJc051bGwgPSB2YWx1ZSA9PT0gbnVsbCxcbiAgICAgICAgICAgIHZhbElzUmVmbGV4aXZlID0gdmFsdWUgPT09IHZhbHVlLFxuICAgICAgICAgICAgdmFsSXNTeW1ib2wgPSBpc1N5bWJvbCh2YWx1ZSk7XG5cbiAgICAgICAgdmFyIG90aElzRGVmaW5lZCA9IG90aGVyICE9PSB1bmRlZmluZWQsXG4gICAgICAgICAgICBvdGhJc051bGwgPSBvdGhlciA9PT0gbnVsbCxcbiAgICAgICAgICAgIG90aElzUmVmbGV4aXZlID0gb3RoZXIgPT09IG90aGVyLFxuICAgICAgICAgICAgb3RoSXNTeW1ib2wgPSBpc1N5bWJvbChvdGhlcik7XG5cbiAgICAgICAgaWYgKCghb3RoSXNOdWxsICYmICFvdGhJc1N5bWJvbCAmJiAhdmFsSXNTeW1ib2wgJiYgdmFsdWUgPiBvdGhlcikgfHxcbiAgICAgICAgICAgICh2YWxJc1N5bWJvbCAmJiBvdGhJc0RlZmluZWQgJiYgb3RoSXNSZWZsZXhpdmUgJiYgIW90aElzTnVsbCAmJiAhb3RoSXNTeW1ib2wpIHx8XG4gICAgICAgICAgICAodmFsSXNOdWxsICYmIG90aElzRGVmaW5lZCAmJiBvdGhJc1JlZmxleGl2ZSkgfHxcbiAgICAgICAgICAgICghdmFsSXNEZWZpbmVkICYmIG90aElzUmVmbGV4aXZlKSB8fFxuICAgICAgICAgICAgIXZhbElzUmVmbGV4aXZlKSB7XG4gICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCghdmFsSXNOdWxsICYmICF2YWxJc1N5bWJvbCAmJiAhb3RoSXNTeW1ib2wgJiYgdmFsdWUgPCBvdGhlcikgfHxcbiAgICAgICAgICAgIChvdGhJc1N5bWJvbCAmJiB2YWxJc0RlZmluZWQgJiYgdmFsSXNSZWZsZXhpdmUgJiYgIXZhbElzTnVsbCAmJiAhdmFsSXNTeW1ib2wpIHx8XG4gICAgICAgICAgICAob3RoSXNOdWxsICYmIHZhbElzRGVmaW5lZCAmJiB2YWxJc1JlZmxleGl2ZSkgfHxcbiAgICAgICAgICAgICghb3RoSXNEZWZpbmVkICYmIHZhbElzUmVmbGV4aXZlKSB8fFxuICAgICAgICAgICAgIW90aElzUmVmbGV4aXZlKSB7XG4gICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVc2VkIGJ5IGBfLm9yZGVyQnlgIHRvIGNvbXBhcmUgbXVsdGlwbGUgcHJvcGVydGllcyBvZiBhIHZhbHVlIHRvIGFub3RoZXJcbiAgICAgKiBhbmQgc3RhYmxlIHNvcnQgdGhlbS5cbiAgICAgKlxuICAgICAqIElmIGBvcmRlcnNgIGlzIHVuc3BlY2lmaWVkLCBhbGwgdmFsdWVzIGFyZSBzb3J0ZWQgaW4gYXNjZW5kaW5nIG9yZGVyLiBPdGhlcndpc2UsXG4gICAgICogc3BlY2lmeSBhbiBvcmRlciBvZiBcImRlc2NcIiBmb3IgZGVzY2VuZGluZyBvciBcImFzY1wiIGZvciBhc2NlbmRpbmcgc29ydCBvcmRlclxuICAgICAqIG9mIGNvcnJlc3BvbmRpbmcgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3RoZXIgVGhlIG90aGVyIG9iamVjdCB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbltdfHN0cmluZ1tdfSBvcmRlcnMgVGhlIG9yZGVyIHRvIHNvcnQgYnkgZm9yIGVhY2ggcHJvcGVydHkuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgc29ydCBvcmRlciBpbmRpY2F0b3IgZm9yIGBvYmplY3RgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbXBhcmVNdWx0aXBsZShvYmplY3QsIG90aGVyLCBvcmRlcnMpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIG9iakNyaXRlcmlhID0gb2JqZWN0LmNyaXRlcmlhLFxuICAgICAgICAgIG90aENyaXRlcmlhID0gb3RoZXIuY3JpdGVyaWEsXG4gICAgICAgICAgbGVuZ3RoID0gb2JqQ3JpdGVyaWEubGVuZ3RoLFxuICAgICAgICAgIG9yZGVyc0xlbmd0aCA9IG9yZGVycy5sZW5ndGg7XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBjb21wYXJlQXNjZW5kaW5nKG9iakNyaXRlcmlhW2luZGV4XSwgb3RoQ3JpdGVyaWFbaW5kZXhdKTtcbiAgICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAgIGlmIChpbmRleCA+PSBvcmRlcnNMZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBvcmRlciA9IG9yZGVyc1tpbmRleF07XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdCAqIChvcmRlciA9PSAnZGVzYycgPyAtMSA6IDEpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBGaXhlcyBhbiBgQXJyYXkjc29ydGAgYnVnIGluIHRoZSBKUyBlbmdpbmUgZW1iZWRkZWQgaW4gQWRvYmUgYXBwbGljYXRpb25zXG4gICAgICAvLyB0aGF0IGNhdXNlcyBpdCwgdW5kZXIgY2VydGFpbiBjaXJjdW1zdGFuY2VzLCB0byBwcm92aWRlIHRoZSBzYW1lIHZhbHVlIGZvclxuICAgICAgLy8gYG9iamVjdGAgYW5kIGBvdGhlcmAuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vamFzaGtlbmFzL3VuZGVyc2NvcmUvcHVsbC8xMjQ3XG4gICAgICAvLyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAgLy9cbiAgICAgIC8vIFRoaXMgYWxzbyBlbnN1cmVzIGEgc3RhYmxlIHNvcnQgaW4gVjggYW5kIG90aGVyIGVuZ2luZXMuXG4gICAgICAvLyBTZWUgaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9OTAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgIHJldHVybiBvYmplY3QuaW5kZXggLSBvdGhlci5pbmRleDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IHRoYXQgaXMgdGhlIGNvbXBvc2l0aW9uIG9mIHBhcnRpYWxseSBhcHBsaWVkIGFyZ3VtZW50cyxcbiAgICAgKiBwbGFjZWhvbGRlcnMsIGFuZCBwcm92aWRlZCBhcmd1bWVudHMgaW50byBhIHNpbmdsZSBhcnJheSBvZiBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFyZ3MgVGhlIHByb3ZpZGVkIGFyZ3VtZW50cy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBwYXJ0aWFscyBUaGUgYXJndW1lbnRzIHRvIHByZXBlbmQgdG8gdGhvc2UgcHJvdmlkZWQuXG4gICAgICogQHBhcmFtIHtBcnJheX0gaG9sZGVycyBUaGUgYHBhcnRpYWxzYCBwbGFjZWhvbGRlciBpbmRleGVzLlxuICAgICAqIEBwYXJhbXMge2Jvb2xlYW59IFtpc0N1cnJpZWRdIFNwZWNpZnkgY29tcG9zaW5nIGZvciBhIGN1cnJpZWQgZnVuY3Rpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgY29tcG9zZWQgYXJndW1lbnRzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbXBvc2VBcmdzKGFyZ3MsIHBhcnRpYWxzLCBob2xkZXJzLCBpc0N1cnJpZWQpIHtcbiAgICAgIHZhciBhcmdzSW5kZXggPSAtMSxcbiAgICAgICAgICBhcmdzTGVuZ3RoID0gYXJncy5sZW5ndGgsXG4gICAgICAgICAgaG9sZGVyc0xlbmd0aCA9IGhvbGRlcnMubGVuZ3RoLFxuICAgICAgICAgIGxlZnRJbmRleCA9IC0xLFxuICAgICAgICAgIGxlZnRMZW5ndGggPSBwYXJ0aWFscy5sZW5ndGgsXG4gICAgICAgICAgcmFuZ2VMZW5ndGggPSBuYXRpdmVNYXgoYXJnc0xlbmd0aCAtIGhvbGRlcnNMZW5ndGgsIDApLFxuICAgICAgICAgIHJlc3VsdCA9IEFycmF5KGxlZnRMZW5ndGggKyByYW5nZUxlbmd0aCksXG4gICAgICAgICAgaXNVbmN1cnJpZWQgPSAhaXNDdXJyaWVkO1xuXG4gICAgICB3aGlsZSAoKytsZWZ0SW5kZXggPCBsZWZ0TGVuZ3RoKSB7XG4gICAgICAgIHJlc3VsdFtsZWZ0SW5kZXhdID0gcGFydGlhbHNbbGVmdEluZGV4XTtcbiAgICAgIH1cbiAgICAgIHdoaWxlICgrK2FyZ3NJbmRleCA8IGhvbGRlcnNMZW5ndGgpIHtcbiAgICAgICAgaWYgKGlzVW5jdXJyaWVkIHx8IGFyZ3NJbmRleCA8IGFyZ3NMZW5ndGgpIHtcbiAgICAgICAgICByZXN1bHRbaG9sZGVyc1thcmdzSW5kZXhdXSA9IGFyZ3NbYXJnc0luZGV4XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgd2hpbGUgKHJhbmdlTGVuZ3RoLS0pIHtcbiAgICAgICAgcmVzdWx0W2xlZnRJbmRleCsrXSA9IGFyZ3NbYXJnc0luZGV4KytdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIGZ1bmN0aW9uIGlzIGxpa2UgYGNvbXBvc2VBcmdzYCBleGNlcHQgdGhhdCB0aGUgYXJndW1lbnRzIGNvbXBvc2l0aW9uXG4gICAgICogaXMgdGFpbG9yZWQgZm9yIGBfLnBhcnRpYWxSaWdodGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFyZ3MgVGhlIHByb3ZpZGVkIGFyZ3VtZW50cy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBwYXJ0aWFscyBUaGUgYXJndW1lbnRzIHRvIGFwcGVuZCB0byB0aG9zZSBwcm92aWRlZC5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBob2xkZXJzIFRoZSBgcGFydGlhbHNgIHBsYWNlaG9sZGVyIGluZGV4ZXMuXG4gICAgICogQHBhcmFtcyB7Ym9vbGVhbn0gW2lzQ3VycmllZF0gU3BlY2lmeSBjb21wb3NpbmcgZm9yIGEgY3VycmllZCBmdW5jdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBjb21wb3NlZCBhcmd1bWVudHMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29tcG9zZUFyZ3NSaWdodChhcmdzLCBwYXJ0aWFscywgaG9sZGVycywgaXNDdXJyaWVkKSB7XG4gICAgICB2YXIgYXJnc0luZGV4ID0gLTEsXG4gICAgICAgICAgYXJnc0xlbmd0aCA9IGFyZ3MubGVuZ3RoLFxuICAgICAgICAgIGhvbGRlcnNJbmRleCA9IC0xLFxuICAgICAgICAgIGhvbGRlcnNMZW5ndGggPSBob2xkZXJzLmxlbmd0aCxcbiAgICAgICAgICByaWdodEluZGV4ID0gLTEsXG4gICAgICAgICAgcmlnaHRMZW5ndGggPSBwYXJ0aWFscy5sZW5ndGgsXG4gICAgICAgICAgcmFuZ2VMZW5ndGggPSBuYXRpdmVNYXgoYXJnc0xlbmd0aCAtIGhvbGRlcnNMZW5ndGgsIDApLFxuICAgICAgICAgIHJlc3VsdCA9IEFycmF5KHJhbmdlTGVuZ3RoICsgcmlnaHRMZW5ndGgpLFxuICAgICAgICAgIGlzVW5jdXJyaWVkID0gIWlzQ3VycmllZDtcblxuICAgICAgd2hpbGUgKCsrYXJnc0luZGV4IDwgcmFuZ2VMZW5ndGgpIHtcbiAgICAgICAgcmVzdWx0W2FyZ3NJbmRleF0gPSBhcmdzW2FyZ3NJbmRleF07XG4gICAgICB9XG4gICAgICB2YXIgb2Zmc2V0ID0gYXJnc0luZGV4O1xuICAgICAgd2hpbGUgKCsrcmlnaHRJbmRleCA8IHJpZ2h0TGVuZ3RoKSB7XG4gICAgICAgIHJlc3VsdFtvZmZzZXQgKyByaWdodEluZGV4XSA9IHBhcnRpYWxzW3JpZ2h0SW5kZXhdO1xuICAgICAgfVxuICAgICAgd2hpbGUgKCsraG9sZGVyc0luZGV4IDwgaG9sZGVyc0xlbmd0aCkge1xuICAgICAgICBpZiAoaXNVbmN1cnJpZWQgfHwgYXJnc0luZGV4IDwgYXJnc0xlbmd0aCkge1xuICAgICAgICAgIHJlc3VsdFtvZmZzZXQgKyBob2xkZXJzW2hvbGRlcnNJbmRleF1dID0gYXJnc1thcmdzSW5kZXgrK107XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29waWVzIHRoZSB2YWx1ZXMgb2YgYHNvdXJjZWAgdG8gYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gc291cmNlIFRoZSBhcnJheSB0byBjb3B5IHZhbHVlcyBmcm9tLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheT1bXV0gVGhlIGFycmF5IHRvIGNvcHkgdmFsdWVzIHRvLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvcHlBcnJheShzb3VyY2UsIGFycmF5KSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBzb3VyY2UubGVuZ3RoO1xuXG4gICAgICBhcnJheSB8fCAoYXJyYXkgPSBBcnJheShsZW5ndGgpKTtcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIGFycmF5W2luZGV4XSA9IHNvdXJjZVtpbmRleF07XG4gICAgICB9XG4gICAgICByZXR1cm4gYXJyYXk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29waWVzIHByb3BlcnRpZXMgb2YgYHNvdXJjZWAgdG8gYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCB0byBjb3B5IHByb3BlcnRpZXMgZnJvbS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBwcm9wcyBUaGUgcHJvcGVydHkgaWRlbnRpZmllcnMgdG8gY29weS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29iamVjdD17fV0gVGhlIG9iamVjdCB0byBjb3B5IHByb3BlcnRpZXMgdG8uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29waWVkIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvcHlPYmplY3Qoc291cmNlLCBwcm9wcywgb2JqZWN0LCBjdXN0b21pemVyKSB7XG4gICAgICB2YXIgaXNOZXcgPSAhb2JqZWN0O1xuICAgICAgb2JqZWN0IHx8IChvYmplY3QgPSB7fSk7XG5cbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHByb3BzLmxlbmd0aDtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIGtleSA9IHByb3BzW2luZGV4XTtcblxuICAgICAgICB2YXIgbmV3VmFsdWUgPSBjdXN0b21pemVyXG4gICAgICAgICAgPyBjdXN0b21pemVyKG9iamVjdFtrZXldLCBzb3VyY2Vba2V5XSwga2V5LCBvYmplY3QsIHNvdXJjZSlcbiAgICAgICAgICA6IHVuZGVmaW5lZDtcblxuICAgICAgICBpZiAobmV3VmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIG5ld1ZhbHVlID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzTmV3KSB7XG4gICAgICAgICAgYmFzZUFzc2lnblZhbHVlKG9iamVjdCwga2V5LCBuZXdWYWx1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYXNzaWduVmFsdWUob2JqZWN0LCBrZXksIG5ld1ZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb3BpZXMgb3duIHN5bWJvbHMgb2YgYHNvdXJjZWAgdG8gYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCB0byBjb3B5IHN5bWJvbHMgZnJvbS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29iamVjdD17fV0gVGhlIG9iamVjdCB0byBjb3B5IHN5bWJvbHMgdG8uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb3B5U3ltYm9scyhzb3VyY2UsIG9iamVjdCkge1xuICAgICAgcmV0dXJuIGNvcHlPYmplY3Qoc291cmNlLCBnZXRTeW1ib2xzKHNvdXJjZSksIG9iamVjdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29waWVzIG93biBhbmQgaW5oZXJpdGVkIHN5bWJvbHMgb2YgYHNvdXJjZWAgdG8gYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCB0byBjb3B5IHN5bWJvbHMgZnJvbS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29iamVjdD17fV0gVGhlIG9iamVjdCB0byBjb3B5IHN5bWJvbHMgdG8uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb3B5U3ltYm9sc0luKHNvdXJjZSwgb2JqZWN0KSB7XG4gICAgICByZXR1cm4gY29weU9iamVjdChzb3VyY2UsIGdldFN5bWJvbHNJbihzb3VyY2UpLCBvYmplY3QpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiBsaWtlIGBfLmdyb3VwQnlgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBzZXR0ZXIgVGhlIGZ1bmN0aW9uIHRvIHNldCBhY2N1bXVsYXRvciB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2luaXRpYWxpemVyXSBUaGUgYWNjdW11bGF0b3Igb2JqZWN0IGluaXRpYWxpemVyLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGFnZ3JlZ2F0b3IgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlQWdncmVnYXRvcihzZXR0ZXIsIGluaXRpYWxpemVyKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oY29sbGVjdGlvbiwgaXRlcmF0ZWUpIHtcbiAgICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlBZ2dyZWdhdG9yIDogYmFzZUFnZ3JlZ2F0b3IsXG4gICAgICAgICAgICBhY2N1bXVsYXRvciA9IGluaXRpYWxpemVyID8gaW5pdGlhbGl6ZXIoKSA6IHt9O1xuXG4gICAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIHNldHRlciwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpLCBhY2N1bXVsYXRvcik7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiBsaWtlIGBfLmFzc2lnbmAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGFzc2lnbmVyIFRoZSBmdW5jdGlvbiB0byBhc3NpZ24gdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGFzc2lnbmVyIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUFzc2lnbmVyKGFzc2lnbmVyKSB7XG4gICAgICByZXR1cm4gYmFzZVJlc3QoZnVuY3Rpb24ob2JqZWN0LCBzb3VyY2VzKSB7XG4gICAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgICAgbGVuZ3RoID0gc291cmNlcy5sZW5ndGgsXG4gICAgICAgICAgICBjdXN0b21pemVyID0gbGVuZ3RoID4gMSA/IHNvdXJjZXNbbGVuZ3RoIC0gMV0gOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBndWFyZCA9IGxlbmd0aCA+IDIgPyBzb3VyY2VzWzJdIDogdW5kZWZpbmVkO1xuXG4gICAgICAgIGN1c3RvbWl6ZXIgPSAoYXNzaWduZXIubGVuZ3RoID4gMyAmJiB0eXBlb2YgY3VzdG9taXplciA9PSAnZnVuY3Rpb24nKVxuICAgICAgICAgID8gKGxlbmd0aC0tLCBjdXN0b21pemVyKVxuICAgICAgICAgIDogdW5kZWZpbmVkO1xuXG4gICAgICAgIGlmIChndWFyZCAmJiBpc0l0ZXJhdGVlQ2FsbChzb3VyY2VzWzBdLCBzb3VyY2VzWzFdLCBndWFyZCkpIHtcbiAgICAgICAgICBjdXN0b21pemVyID0gbGVuZ3RoIDwgMyA/IHVuZGVmaW5lZCA6IGN1c3RvbWl6ZXI7XG4gICAgICAgICAgbGVuZ3RoID0gMTtcbiAgICAgICAgfVxuICAgICAgICBvYmplY3QgPSBPYmplY3Qob2JqZWN0KTtcbiAgICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICB2YXIgc291cmNlID0gc291cmNlc1tpbmRleF07XG4gICAgICAgICAgaWYgKHNvdXJjZSkge1xuICAgICAgICAgICAgYXNzaWduZXIob2JqZWN0LCBzb3VyY2UsIGluZGV4LCBjdXN0b21pemVyKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBgYmFzZUVhY2hgIG9yIGBiYXNlRWFjaFJpZ2h0YCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZWFjaEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGl0ZXJhdGUgb3ZlciBhIGNvbGxlY3Rpb24uXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYmFzZSBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVCYXNlRWFjaChlYWNoRnVuYywgZnJvbVJpZ2h0KSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oY29sbGVjdGlvbiwgaXRlcmF0ZWUpIHtcbiAgICAgICAgaWYgKGNvbGxlY3Rpb24gPT0gbnVsbCkge1xuICAgICAgICAgIHJldHVybiBjb2xsZWN0aW9uO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNBcnJheUxpa2UoY29sbGVjdGlvbikpIHtcbiAgICAgICAgICByZXR1cm4gZWFjaEZ1bmMoY29sbGVjdGlvbiwgaXRlcmF0ZWUpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBsZW5ndGggPSBjb2xsZWN0aW9uLmxlbmd0aCxcbiAgICAgICAgICAgIGluZGV4ID0gZnJvbVJpZ2h0ID8gbGVuZ3RoIDogLTEsXG4gICAgICAgICAgICBpdGVyYWJsZSA9IE9iamVjdChjb2xsZWN0aW9uKTtcblxuICAgICAgICB3aGlsZSAoKGZyb21SaWdodCA/IGluZGV4LS0gOiArK2luZGV4IDwgbGVuZ3RoKSkge1xuICAgICAgICAgIGlmIChpdGVyYXRlZShpdGVyYWJsZVtpbmRleF0sIGluZGV4LCBpdGVyYWJsZSkgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNvbGxlY3Rpb247XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBiYXNlIGZ1bmN0aW9uIGZvciBtZXRob2RzIGxpa2UgYF8uZm9ySW5gIGFuZCBgXy5mb3JPd25gLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtmcm9tUmlnaHRdIFNwZWNpZnkgaXRlcmF0aW5nIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBiYXNlIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUJhc2VGb3IoZnJvbVJpZ2h0KSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0LCBpdGVyYXRlZSwga2V5c0Z1bmMpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgICBpdGVyYWJsZSA9IE9iamVjdChvYmplY3QpLFxuICAgICAgICAgICAgcHJvcHMgPSBrZXlzRnVuYyhvYmplY3QpLFxuICAgICAgICAgICAgbGVuZ3RoID0gcHJvcHMubGVuZ3RoO1xuXG4gICAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICAgIHZhciBrZXkgPSBwcm9wc1tmcm9tUmlnaHQgPyBsZW5ndGggOiArK2luZGV4XTtcbiAgICAgICAgICBpZiAoaXRlcmF0ZWUoaXRlcmFibGVba2V5XSwga2V5LCBpdGVyYWJsZSkgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgd3JhcHMgYGZ1bmNgIHRvIGludm9rZSBpdCB3aXRoIHRoZSBvcHRpb25hbCBgdGhpc2BcbiAgICAgKiBiaW5kaW5nIG9mIGB0aGlzQXJnYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gd3JhcC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBjcmVhdGVXcmFwYCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgZnVuY2AuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgd3JhcHBlZCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVCaW5kKGZ1bmMsIGJpdG1hc2ssIHRoaXNBcmcpIHtcbiAgICAgIHZhciBpc0JpbmQgPSBiaXRtYXNrICYgV1JBUF9CSU5EX0ZMQUcsXG4gICAgICAgICAgQ3RvciA9IGNyZWF0ZUN0b3IoZnVuYyk7XG5cbiAgICAgIGZ1bmN0aW9uIHdyYXBwZXIoKSB7XG4gICAgICAgIHZhciBmbiA9ICh0aGlzICYmIHRoaXMgIT09IHJvb3QgJiYgdGhpcyBpbnN0YW5jZW9mIHdyYXBwZXIpID8gQ3RvciA6IGZ1bmM7XG4gICAgICAgIHJldHVybiBmbi5hcHBseShpc0JpbmQgPyB0aGlzQXJnIDogdGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB3cmFwcGVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiBsaWtlIGBfLmxvd2VyRmlyc3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbWV0aG9kTmFtZSBUaGUgbmFtZSBvZiB0aGUgYFN0cmluZ2AgY2FzZSBtZXRob2QgdG8gdXNlLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNhc2UgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlQ2FzZUZpcnN0KG1ldGhvZE5hbWUpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihzdHJpbmcpIHtcbiAgICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcblxuICAgICAgICB2YXIgc3RyU3ltYm9scyA9IGhhc1VuaWNvZGUoc3RyaW5nKVxuICAgICAgICAgID8gc3RyaW5nVG9BcnJheShzdHJpbmcpXG4gICAgICAgICAgOiB1bmRlZmluZWQ7XG5cbiAgICAgICAgdmFyIGNociA9IHN0clN5bWJvbHNcbiAgICAgICAgICA/IHN0clN5bWJvbHNbMF1cbiAgICAgICAgICA6IHN0cmluZy5jaGFyQXQoMCk7XG5cbiAgICAgICAgdmFyIHRyYWlsaW5nID0gc3RyU3ltYm9sc1xuICAgICAgICAgID8gY2FzdFNsaWNlKHN0clN5bWJvbHMsIDEpLmpvaW4oJycpXG4gICAgICAgICAgOiBzdHJpbmcuc2xpY2UoMSk7XG5cbiAgICAgICAgcmV0dXJuIGNoclttZXRob2ROYW1lXSgpICsgdHJhaWxpbmc7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiBsaWtlIGBfLmNhbWVsQ2FzZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIFRoZSBmdW5jdGlvbiB0byBjb21iaW5lIGVhY2ggd29yZC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjb21wb3VuZGVyIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUNvbXBvdW5kZXIoY2FsbGJhY2spIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIGFycmF5UmVkdWNlKHdvcmRzKGRlYnVycihzdHJpbmcpLnJlcGxhY2UocmVBcG9zLCAnJykpLCBjYWxsYmFjaywgJycpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBwcm9kdWNlcyBhbiBpbnN0YW5jZSBvZiBgQ3RvcmAgcmVnYXJkbGVzcyBvZlxuICAgICAqIHdoZXRoZXIgaXQgd2FzIGludm9rZWQgYXMgcGFydCBvZiBhIGBuZXdgIGV4cHJlc3Npb24gb3IgYnkgYGNhbGxgIG9yIGBhcHBseWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IEN0b3IgVGhlIGNvbnN0cnVjdG9yIHRvIHdyYXAuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgd3JhcHBlZCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVDdG9yKEN0b3IpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgLy8gVXNlIGEgYHN3aXRjaGAgc3RhdGVtZW50IHRvIHdvcmsgd2l0aCBjbGFzcyBjb25zdHJ1Y3RvcnMuIFNlZVxuICAgICAgICAvLyBodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1lY21hc2NyaXB0LWZ1bmN0aW9uLW9iamVjdHMtY2FsbC10aGlzYXJndW1lbnQtYXJndW1lbnRzbGlzdFxuICAgICAgICAvLyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cztcbiAgICAgICAgc3dpdGNoIChhcmdzLmxlbmd0aCkge1xuICAgICAgICAgIGNhc2UgMDogcmV0dXJuIG5ldyBDdG9yO1xuICAgICAgICAgIGNhc2UgMTogcmV0dXJuIG5ldyBDdG9yKGFyZ3NbMF0pO1xuICAgICAgICAgIGNhc2UgMjogcmV0dXJuIG5ldyBDdG9yKGFyZ3NbMF0sIGFyZ3NbMV0pO1xuICAgICAgICAgIGNhc2UgMzogcmV0dXJuIG5ldyBDdG9yKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICAgICAgICAgIGNhc2UgNDogcmV0dXJuIG5ldyBDdG9yKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10pO1xuICAgICAgICAgIGNhc2UgNTogcmV0dXJuIG5ldyBDdG9yKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10sIGFyZ3NbNF0pO1xuICAgICAgICAgIGNhc2UgNjogcmV0dXJuIG5ldyBDdG9yKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10sIGFyZ3NbNF0sIGFyZ3NbNV0pO1xuICAgICAgICAgIGNhc2UgNzogcmV0dXJuIG5ldyBDdG9yKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10sIGFyZ3NbNF0sIGFyZ3NbNV0sIGFyZ3NbNl0pO1xuICAgICAgICB9XG4gICAgICAgIHZhciB0aGlzQmluZGluZyA9IGJhc2VDcmVhdGUoQ3Rvci5wcm90b3R5cGUpLFxuICAgICAgICAgICAgcmVzdWx0ID0gQ3Rvci5hcHBseSh0aGlzQmluZGluZywgYXJncyk7XG5cbiAgICAgICAgLy8gTWltaWMgdGhlIGNvbnN0cnVjdG9yJ3MgYHJldHVybmAgYmVoYXZpb3IuXG4gICAgICAgIC8vIFNlZSBodHRwczovL2VzNS5naXRodWIuaW8vI3gxMy4yLjIgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgICAgcmV0dXJuIGlzT2JqZWN0KHJlc3VsdCkgPyByZXN1bHQgOiB0aGlzQmluZGluZztcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgd3JhcHMgYGZ1bmNgIHRvIGVuYWJsZSBjdXJyeWluZy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gd3JhcC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBjcmVhdGVXcmFwYCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBhcml0eSBUaGUgYXJpdHkgb2YgYGZ1bmNgLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHdyYXBwZWQgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlQ3VycnkoZnVuYywgYml0bWFzaywgYXJpdHkpIHtcbiAgICAgIHZhciBDdG9yID0gY3JlYXRlQ3RvcihmdW5jKTtcblxuICAgICAgZnVuY3Rpb24gd3JhcHBlcigpIHtcbiAgICAgICAgdmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGgsXG4gICAgICAgICAgICBhcmdzID0gQXJyYXkobGVuZ3RoKSxcbiAgICAgICAgICAgIGluZGV4ID0gbGVuZ3RoLFxuICAgICAgICAgICAgcGxhY2Vob2xkZXIgPSBnZXRIb2xkZXIod3JhcHBlcik7XG5cbiAgICAgICAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICAgICAgICBhcmdzW2luZGV4XSA9IGFyZ3VtZW50c1tpbmRleF07XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGhvbGRlcnMgPSAobGVuZ3RoIDwgMyAmJiBhcmdzWzBdICE9PSBwbGFjZWhvbGRlciAmJiBhcmdzW2xlbmd0aCAtIDFdICE9PSBwbGFjZWhvbGRlcilcbiAgICAgICAgICA/IFtdXG4gICAgICAgICAgOiByZXBsYWNlSG9sZGVycyhhcmdzLCBwbGFjZWhvbGRlcik7XG5cbiAgICAgICAgbGVuZ3RoIC09IGhvbGRlcnMubGVuZ3RoO1xuICAgICAgICBpZiAobGVuZ3RoIDwgYXJpdHkpIHtcbiAgICAgICAgICByZXR1cm4gY3JlYXRlUmVjdXJyeShcbiAgICAgICAgICAgIGZ1bmMsIGJpdG1hc2ssIGNyZWF0ZUh5YnJpZCwgd3JhcHBlci5wbGFjZWhvbGRlciwgdW5kZWZpbmVkLFxuICAgICAgICAgICAgYXJncywgaG9sZGVycywgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGFyaXR5IC0gbGVuZ3RoKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZm4gPSAodGhpcyAmJiB0aGlzICE9PSByb290ICYmIHRoaXMgaW5zdGFuY2VvZiB3cmFwcGVyKSA/IEN0b3IgOiBmdW5jO1xuICAgICAgICByZXR1cm4gYXBwbHkoZm4sIHRoaXMsIGFyZ3MpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHdyYXBwZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGBfLmZpbmRgIG9yIGBfLmZpbmRMYXN0YCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZmluZEluZGV4RnVuYyBUaGUgZnVuY3Rpb24gdG8gZmluZCB0aGUgY29sbGVjdGlvbiBpbmRleC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmaW5kIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUZpbmQoZmluZEluZGV4RnVuYykge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKGNvbGxlY3Rpb24sIHByZWRpY2F0ZSwgZnJvbUluZGV4KSB7XG4gICAgICAgIHZhciBpdGVyYWJsZSA9IE9iamVjdChjb2xsZWN0aW9uKTtcbiAgICAgICAgaWYgKCFpc0FycmF5TGlrZShjb2xsZWN0aW9uKSkge1xuICAgICAgICAgIHZhciBpdGVyYXRlZSA9IGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMyk7XG4gICAgICAgICAgY29sbGVjdGlvbiA9IGtleXMoY29sbGVjdGlvbik7XG4gICAgICAgICAgcHJlZGljYXRlID0gZnVuY3Rpb24oa2V5KSB7IHJldHVybiBpdGVyYXRlZShpdGVyYWJsZVtrZXldLCBrZXksIGl0ZXJhYmxlKTsgfTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgaW5kZXggPSBmaW5kSW5kZXhGdW5jKGNvbGxlY3Rpb24sIHByZWRpY2F0ZSwgZnJvbUluZGV4KTtcbiAgICAgICAgcmV0dXJuIGluZGV4ID4gLTEgPyBpdGVyYWJsZVtpdGVyYXRlZSA/IGNvbGxlY3Rpb25baW5kZXhdIDogaW5kZXhdIDogdW5kZWZpbmVkO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgYF8uZmxvd2Agb3IgYF8uZmxvd1JpZ2h0YCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZmxvdyBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVGbG93KGZyb21SaWdodCkge1xuICAgICAgcmV0dXJuIGZsYXRSZXN0KGZ1bmN0aW9uKGZ1bmNzKSB7XG4gICAgICAgIHZhciBsZW5ndGggPSBmdW5jcy5sZW5ndGgsXG4gICAgICAgICAgICBpbmRleCA9IGxlbmd0aCxcbiAgICAgICAgICAgIHByZXJlcSA9IExvZGFzaFdyYXBwZXIucHJvdG90eXBlLnRocnU7XG5cbiAgICAgICAgaWYgKGZyb21SaWdodCkge1xuICAgICAgICAgIGZ1bmNzLnJldmVyc2UoKTtcbiAgICAgICAgfVxuICAgICAgICB3aGlsZSAoaW5kZXgtLSkge1xuICAgICAgICAgIHZhciBmdW5jID0gZnVuY3NbaW5kZXhdO1xuICAgICAgICAgIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChwcmVyZXEgJiYgIXdyYXBwZXIgJiYgZ2V0RnVuY05hbWUoZnVuYykgPT0gJ3dyYXBwZXInKSB7XG4gICAgICAgICAgICB2YXIgd3JhcHBlciA9IG5ldyBMb2Rhc2hXcmFwcGVyKFtdLCB0cnVlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaW5kZXggPSB3cmFwcGVyID8gaW5kZXggOiBsZW5ndGg7XG4gICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgZnVuYyA9IGZ1bmNzW2luZGV4XTtcblxuICAgICAgICAgIHZhciBmdW5jTmFtZSA9IGdldEZ1bmNOYW1lKGZ1bmMpLFxuICAgICAgICAgICAgICBkYXRhID0gZnVuY05hbWUgPT0gJ3dyYXBwZXInID8gZ2V0RGF0YShmdW5jKSA6IHVuZGVmaW5lZDtcblxuICAgICAgICAgIGlmIChkYXRhICYmIGlzTGF6aWFibGUoZGF0YVswXSkgJiZcbiAgICAgICAgICAgICAgICBkYXRhWzFdID09IChXUkFQX0FSWV9GTEFHIHwgV1JBUF9DVVJSWV9GTEFHIHwgV1JBUF9QQVJUSUFMX0ZMQUcgfCBXUkFQX1JFQVJHX0ZMQUcpICYmXG4gICAgICAgICAgICAgICAgIWRhdGFbNF0ubGVuZ3RoICYmIGRhdGFbOV0gPT0gMVxuICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgIHdyYXBwZXIgPSB3cmFwcGVyW2dldEZ1bmNOYW1lKGRhdGFbMF0pXS5hcHBseSh3cmFwcGVyLCBkYXRhWzNdKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgd3JhcHBlciA9IChmdW5jLmxlbmd0aCA9PSAxICYmIGlzTGF6aWFibGUoZnVuYykpXG4gICAgICAgICAgICAgID8gd3JhcHBlcltmdW5jTmFtZV0oKVxuICAgICAgICAgICAgICA6IHdyYXBwZXIudGhydShmdW5jKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzLFxuICAgICAgICAgICAgICB2YWx1ZSA9IGFyZ3NbMF07XG5cbiAgICAgICAgICBpZiAod3JhcHBlciAmJiBhcmdzLmxlbmd0aCA9PSAxICYmIGlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gd3JhcHBlci5wbGFudCh2YWx1ZSkudmFsdWUoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIGluZGV4ID0gMCxcbiAgICAgICAgICAgICAgcmVzdWx0ID0gbGVuZ3RoID8gZnVuY3NbaW5kZXhdLmFwcGx5KHRoaXMsIGFyZ3MpIDogdmFsdWU7XG5cbiAgICAgICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICAgICAgcmVzdWx0ID0gZnVuY3NbaW5kZXhdLmNhbGwodGhpcywgcmVzdWx0KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHdyYXBzIGBmdW5jYCB0byBpbnZva2UgaXQgd2l0aCBvcHRpb25hbCBgdGhpc2BcbiAgICAgKiBiaW5kaW5nIG9mIGB0aGlzQXJnYCwgcGFydGlhbCBhcHBsaWNhdGlvbiwgYW5kIGN1cnJ5aW5nLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufHN0cmluZ30gZnVuYyBUaGUgZnVuY3Rpb24gb3IgbWV0aG9kIG5hbWUgdG8gd3JhcC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBjcmVhdGVXcmFwYCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgZnVuY2AuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW3BhcnRpYWxzXSBUaGUgYXJndW1lbnRzIHRvIHByZXBlbmQgdG8gdGhvc2UgcHJvdmlkZWQgdG9cbiAgICAgKiAgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbaG9sZGVyc10gVGhlIGBwYXJ0aWFsc2AgcGxhY2Vob2xkZXIgaW5kZXhlcy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbcGFydGlhbHNSaWdodF0gVGhlIGFyZ3VtZW50cyB0byBhcHBlbmQgdG8gdGhvc2UgcHJvdmlkZWRcbiAgICAgKiAgdG8gdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbaG9sZGVyc1JpZ2h0XSBUaGUgYHBhcnRpYWxzUmlnaHRgIHBsYWNlaG9sZGVyIGluZGV4ZXMuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2FyZ1Bvc10gVGhlIGFyZ3VtZW50IHBvc2l0aW9ucyBvZiB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbYXJ5XSBUaGUgYXJpdHkgY2FwIG9mIGBmdW5jYC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2FyaXR5XSBUaGUgYXJpdHkgb2YgYGZ1bmNgLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHdyYXBwZWQgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlSHlicmlkKGZ1bmMsIGJpdG1hc2ssIHRoaXNBcmcsIHBhcnRpYWxzLCBob2xkZXJzLCBwYXJ0aWFsc1JpZ2h0LCBob2xkZXJzUmlnaHQsIGFyZ1BvcywgYXJ5LCBhcml0eSkge1xuICAgICAgdmFyIGlzQXJ5ID0gYml0bWFzayAmIFdSQVBfQVJZX0ZMQUcsXG4gICAgICAgICAgaXNCaW5kID0gYml0bWFzayAmIFdSQVBfQklORF9GTEFHLFxuICAgICAgICAgIGlzQmluZEtleSA9IGJpdG1hc2sgJiBXUkFQX0JJTkRfS0VZX0ZMQUcsXG4gICAgICAgICAgaXNDdXJyaWVkID0gYml0bWFzayAmIChXUkFQX0NVUlJZX0ZMQUcgfCBXUkFQX0NVUlJZX1JJR0hUX0ZMQUcpLFxuICAgICAgICAgIGlzRmxpcCA9IGJpdG1hc2sgJiBXUkFQX0ZMSVBfRkxBRyxcbiAgICAgICAgICBDdG9yID0gaXNCaW5kS2V5ID8gdW5kZWZpbmVkIDogY3JlYXRlQ3RvcihmdW5jKTtcblxuICAgICAgZnVuY3Rpb24gd3JhcHBlcigpIHtcbiAgICAgICAgdmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGgsXG4gICAgICAgICAgICBhcmdzID0gQXJyYXkobGVuZ3RoKSxcbiAgICAgICAgICAgIGluZGV4ID0gbGVuZ3RoO1xuXG4gICAgICAgIHdoaWxlIChpbmRleC0tKSB7XG4gICAgICAgICAgYXJnc1tpbmRleF0gPSBhcmd1bWVudHNbaW5kZXhdO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0N1cnJpZWQpIHtcbiAgICAgICAgICB2YXIgcGxhY2Vob2xkZXIgPSBnZXRIb2xkZXIod3JhcHBlciksXG4gICAgICAgICAgICAgIGhvbGRlcnNDb3VudCA9IGNvdW50SG9sZGVycyhhcmdzLCBwbGFjZWhvbGRlcik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhcnRpYWxzKSB7XG4gICAgICAgICAgYXJncyA9IGNvbXBvc2VBcmdzKGFyZ3MsIHBhcnRpYWxzLCBob2xkZXJzLCBpc0N1cnJpZWQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYXJ0aWFsc1JpZ2h0KSB7XG4gICAgICAgICAgYXJncyA9IGNvbXBvc2VBcmdzUmlnaHQoYXJncywgcGFydGlhbHNSaWdodCwgaG9sZGVyc1JpZ2h0LCBpc0N1cnJpZWQpO1xuICAgICAgICB9XG4gICAgICAgIGxlbmd0aCAtPSBob2xkZXJzQ291bnQ7XG4gICAgICAgIGlmIChpc0N1cnJpZWQgJiYgbGVuZ3RoIDwgYXJpdHkpIHtcbiAgICAgICAgICB2YXIgbmV3SG9sZGVycyA9IHJlcGxhY2VIb2xkZXJzKGFyZ3MsIHBsYWNlaG9sZGVyKTtcbiAgICAgICAgICByZXR1cm4gY3JlYXRlUmVjdXJyeShcbiAgICAgICAgICAgIGZ1bmMsIGJpdG1hc2ssIGNyZWF0ZUh5YnJpZCwgd3JhcHBlci5wbGFjZWhvbGRlciwgdGhpc0FyZyxcbiAgICAgICAgICAgIGFyZ3MsIG5ld0hvbGRlcnMsIGFyZ1BvcywgYXJ5LCBhcml0eSAtIGxlbmd0aFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHRoaXNCaW5kaW5nID0gaXNCaW5kID8gdGhpc0FyZyA6IHRoaXMsXG4gICAgICAgICAgICBmbiA9IGlzQmluZEtleSA/IHRoaXNCaW5kaW5nW2Z1bmNdIDogZnVuYztcblxuICAgICAgICBsZW5ndGggPSBhcmdzLmxlbmd0aDtcbiAgICAgICAgaWYgKGFyZ1Bvcykge1xuICAgICAgICAgIGFyZ3MgPSByZW9yZGVyKGFyZ3MsIGFyZ1Bvcyk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNGbGlwICYmIGxlbmd0aCA+IDEpIHtcbiAgICAgICAgICBhcmdzLnJldmVyc2UoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNBcnkgJiYgYXJ5IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgYXJncy5sZW5ndGggPSBhcnk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMgJiYgdGhpcyAhPT0gcm9vdCAmJiB0aGlzIGluc3RhbmNlb2Ygd3JhcHBlcikge1xuICAgICAgICAgIGZuID0gQ3RvciB8fCBjcmVhdGVDdG9yKGZuKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZm4uYXBwbHkodGhpc0JpbmRpbmcsIGFyZ3MpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHdyYXBwZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIGxpa2UgYF8uaW52ZXJ0QnlgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBzZXR0ZXIgVGhlIGZ1bmN0aW9uIHRvIHNldCBhY2N1bXVsYXRvciB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gdG9JdGVyYXRlZSBUaGUgZnVuY3Rpb24gdG8gcmVzb2x2ZSBpdGVyYXRlZXMuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgaW52ZXJ0ZXIgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlSW52ZXJ0ZXIoc2V0dGVyLCB0b0l0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0LCBpdGVyYXRlZSkge1xuICAgICAgICByZXR1cm4gYmFzZUludmVydGVyKG9iamVjdCwgc2V0dGVyLCB0b0l0ZXJhdGVlKGl0ZXJhdGVlKSwge30pO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBwZXJmb3JtcyBhIG1hdGhlbWF0aWNhbCBvcGVyYXRpb24gb24gdHdvIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gb3BlcmF0b3IgVGhlIGZ1bmN0aW9uIHRvIHBlcmZvcm0gdGhlIG9wZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2RlZmF1bHRWYWx1ZV0gVGhlIHZhbHVlIHVzZWQgZm9yIGB1bmRlZmluZWRgIGFyZ3VtZW50cy5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBtYXRoZW1hdGljYWwgb3BlcmF0aW9uIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZU1hdGhPcGVyYXRpb24ob3BlcmF0b3IsIGRlZmF1bHRWYWx1ZSkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlLCBvdGhlcikge1xuICAgICAgICB2YXIgcmVzdWx0O1xuICAgICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCAmJiBvdGhlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgcmV0dXJuIGRlZmF1bHRWYWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHJlc3VsdCA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvdGhlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgaWYgKHJlc3VsdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gb3RoZXI7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycgfHwgdHlwZW9mIG90aGVyID09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IGJhc2VUb1N0cmluZyh2YWx1ZSk7XG4gICAgICAgICAgICBvdGhlciA9IGJhc2VUb1N0cmluZyhvdGhlcik7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhbHVlID0gYmFzZVRvTnVtYmVyKHZhbHVlKTtcbiAgICAgICAgICAgIG90aGVyID0gYmFzZVRvTnVtYmVyKG90aGVyKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzdWx0ID0gb3BlcmF0b3IodmFsdWUsIG90aGVyKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gbGlrZSBgXy5vdmVyYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gYXJyYXlGdW5jIFRoZSBmdW5jdGlvbiB0byBpdGVyYXRlIG92ZXIgaXRlcmF0ZWVzLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IG92ZXIgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlT3ZlcihhcnJheUZ1bmMpIHtcbiAgICAgIHJldHVybiBmbGF0UmVzdChmdW5jdGlvbihpdGVyYXRlZXMpIHtcbiAgICAgICAgaXRlcmF0ZWVzID0gYXJyYXlNYXAoaXRlcmF0ZWVzLCBiYXNlVW5hcnkoZ2V0SXRlcmF0ZWUoKSkpO1xuICAgICAgICByZXR1cm4gYmFzZVJlc3QoZnVuY3Rpb24oYXJncykge1xuICAgICAgICAgIHZhciB0aGlzQXJnID0gdGhpcztcbiAgICAgICAgICByZXR1cm4gYXJyYXlGdW5jKGl0ZXJhdGVlcywgZnVuY3Rpb24oaXRlcmF0ZWUpIHtcbiAgICAgICAgICAgIHJldHVybiBhcHBseShpdGVyYXRlZSwgdGhpc0FyZywgYXJncyk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyB0aGUgcGFkZGluZyBmb3IgYHN0cmluZ2AgYmFzZWQgb24gYGxlbmd0aGAuIFRoZSBgY2hhcnNgIHN0cmluZ1xuICAgICAqIGlzIHRydW5jYXRlZCBpZiB0aGUgbnVtYmVyIG9mIGNoYXJhY3RlcnMgZXhjZWVkcyBgbGVuZ3RoYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGxlbmd0aCBUaGUgcGFkZGluZyBsZW5ndGguXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtjaGFycz0nICddIFRoZSBzdHJpbmcgdXNlZCBhcyBwYWRkaW5nLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHBhZGRpbmcgZm9yIGBzdHJpbmdgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZVBhZGRpbmcobGVuZ3RoLCBjaGFycykge1xuICAgICAgY2hhcnMgPSBjaGFycyA9PT0gdW5kZWZpbmVkID8gJyAnIDogYmFzZVRvU3RyaW5nKGNoYXJzKTtcblxuICAgICAgdmFyIGNoYXJzTGVuZ3RoID0gY2hhcnMubGVuZ3RoO1xuICAgICAgaWYgKGNoYXJzTGVuZ3RoIDwgMikge1xuICAgICAgICByZXR1cm4gY2hhcnNMZW5ndGggPyBiYXNlUmVwZWF0KGNoYXJzLCBsZW5ndGgpIDogY2hhcnM7XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0ID0gYmFzZVJlcGVhdChjaGFycywgbmF0aXZlQ2VpbChsZW5ndGggLyBzdHJpbmdTaXplKGNoYXJzKSkpO1xuICAgICAgcmV0dXJuIGhhc1VuaWNvZGUoY2hhcnMpXG4gICAgICAgID8gY2FzdFNsaWNlKHN0cmluZ1RvQXJyYXkocmVzdWx0KSwgMCwgbGVuZ3RoKS5qb2luKCcnKVxuICAgICAgICA6IHJlc3VsdC5zbGljZSgwLCBsZW5ndGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHdyYXBzIGBmdW5jYCB0byBpbnZva2UgaXQgd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmdcbiAgICAgKiBvZiBgdGhpc0FyZ2AgYW5kIGBwYXJ0aWFsc2AgcHJlcGVuZGVkIHRvIHRoZSBhcmd1bWVudHMgaXQgcmVjZWl2ZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHdyYXAuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgY3JlYXRlV3JhcGAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKiBAcGFyYW0geyp9IHRoaXNBcmcgVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBmdW5jYC5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBwYXJ0aWFscyBUaGUgYXJndW1lbnRzIHRvIHByZXBlbmQgdG8gdGhvc2UgcHJvdmlkZWQgdG9cbiAgICAgKiAgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyB3cmFwcGVkIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZVBhcnRpYWwoZnVuYywgYml0bWFzaywgdGhpc0FyZywgcGFydGlhbHMpIHtcbiAgICAgIHZhciBpc0JpbmQgPSBiaXRtYXNrICYgV1JBUF9CSU5EX0ZMQUcsXG4gICAgICAgICAgQ3RvciA9IGNyZWF0ZUN0b3IoZnVuYyk7XG5cbiAgICAgIGZ1bmN0aW9uIHdyYXBwZXIoKSB7XG4gICAgICAgIHZhciBhcmdzSW5kZXggPSAtMSxcbiAgICAgICAgICAgIGFyZ3NMZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoLFxuICAgICAgICAgICAgbGVmdEluZGV4ID0gLTEsXG4gICAgICAgICAgICBsZWZ0TGVuZ3RoID0gcGFydGlhbHMubGVuZ3RoLFxuICAgICAgICAgICAgYXJncyA9IEFycmF5KGxlZnRMZW5ndGggKyBhcmdzTGVuZ3RoKSxcbiAgICAgICAgICAgIGZuID0gKHRoaXMgJiYgdGhpcyAhPT0gcm9vdCAmJiB0aGlzIGluc3RhbmNlb2Ygd3JhcHBlcikgPyBDdG9yIDogZnVuYztcblxuICAgICAgICB3aGlsZSAoKytsZWZ0SW5kZXggPCBsZWZ0TGVuZ3RoKSB7XG4gICAgICAgICAgYXJnc1tsZWZ0SW5kZXhdID0gcGFydGlhbHNbbGVmdEluZGV4XTtcbiAgICAgICAgfVxuICAgICAgICB3aGlsZSAoYXJnc0xlbmd0aC0tKSB7XG4gICAgICAgICAgYXJnc1tsZWZ0SW5kZXgrK10gPSBhcmd1bWVudHNbKythcmdzSW5kZXhdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhcHBseShmbiwgaXNCaW5kID8gdGhpc0FyZyA6IHRoaXMsIGFyZ3MpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHdyYXBwZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGBfLnJhbmdlYCBvciBgXy5yYW5nZVJpZ2h0YCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcmFuZ2UgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlUmFuZ2UoZnJvbVJpZ2h0KSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oc3RhcnQsIGVuZCwgc3RlcCkge1xuICAgICAgICBpZiAoc3RlcCAmJiB0eXBlb2Ygc3RlcCAhPSAnbnVtYmVyJyAmJiBpc0l0ZXJhdGVlQ2FsbChzdGFydCwgZW5kLCBzdGVwKSkge1xuICAgICAgICAgIGVuZCA9IHN0ZXAgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgLy8gRW5zdXJlIHRoZSBzaWduIG9mIGAtMGAgaXMgcHJlc2VydmVkLlxuICAgICAgICBzdGFydCA9IHRvRmluaXRlKHN0YXJ0KTtcbiAgICAgICAgaWYgKGVuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgZW5kID0gc3RhcnQ7XG4gICAgICAgICAgc3RhcnQgPSAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGVuZCA9IHRvRmluaXRlKGVuZCk7XG4gICAgICAgIH1cbiAgICAgICAgc3RlcCA9IHN0ZXAgPT09IHVuZGVmaW5lZCA/IChzdGFydCA8IGVuZCA/IDEgOiAtMSkgOiB0b0Zpbml0ZShzdGVwKTtcbiAgICAgICAgcmV0dXJuIGJhc2VSYW5nZShzdGFydCwgZW5kLCBzdGVwLCBmcm9tUmlnaHQpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBwZXJmb3JtcyBhIHJlbGF0aW9uYWwgb3BlcmF0aW9uIG9uIHR3byB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IG9wZXJhdG9yIFRoZSBmdW5jdGlvbiB0byBwZXJmb3JtIHRoZSBvcGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcmVsYXRpb25hbCBvcGVyYXRpb24gZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlUmVsYXRpb25hbE9wZXJhdGlvbihvcGVyYXRvcikge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlLCBvdGhlcikge1xuICAgICAgICBpZiAoISh0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycgJiYgdHlwZW9mIG90aGVyID09ICdzdHJpbmcnKSkge1xuICAgICAgICAgIHZhbHVlID0gdG9OdW1iZXIodmFsdWUpO1xuICAgICAgICAgIG90aGVyID0gdG9OdW1iZXIob3RoZXIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvcGVyYXRvcih2YWx1ZSwgb3RoZXIpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCB3cmFwcyBgZnVuY2AgdG8gY29udGludWUgY3VycnlpbmcuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHdyYXAuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgY3JlYXRlV3JhcGAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSB3cmFwRnVuYyBUaGUgZnVuY3Rpb24gdG8gY3JlYXRlIHRoZSBgZnVuY2Agd3JhcHBlci5cbiAgICAgKiBAcGFyYW0geyp9IHBsYWNlaG9sZGVyIFRoZSBwbGFjZWhvbGRlciB2YWx1ZS5cbiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGZ1bmNgLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtwYXJ0aWFsc10gVGhlIGFyZ3VtZW50cyB0byBwcmVwZW5kIHRvIHRob3NlIHByb3ZpZGVkIHRvXG4gICAgICogIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2hvbGRlcnNdIFRoZSBgcGFydGlhbHNgIHBsYWNlaG9sZGVyIGluZGV4ZXMuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2FyZ1Bvc10gVGhlIGFyZ3VtZW50IHBvc2l0aW9ucyBvZiB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbYXJ5XSBUaGUgYXJpdHkgY2FwIG9mIGBmdW5jYC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2FyaXR5XSBUaGUgYXJpdHkgb2YgYGZ1bmNgLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHdyYXBwZWQgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlUmVjdXJyeShmdW5jLCBiaXRtYXNrLCB3cmFwRnVuYywgcGxhY2Vob2xkZXIsIHRoaXNBcmcsIHBhcnRpYWxzLCBob2xkZXJzLCBhcmdQb3MsIGFyeSwgYXJpdHkpIHtcbiAgICAgIHZhciBpc0N1cnJ5ID0gYml0bWFzayAmIFdSQVBfQ1VSUllfRkxBRyxcbiAgICAgICAgICBuZXdIb2xkZXJzID0gaXNDdXJyeSA/IGhvbGRlcnMgOiB1bmRlZmluZWQsXG4gICAgICAgICAgbmV3SG9sZGVyc1JpZ2h0ID0gaXNDdXJyeSA/IHVuZGVmaW5lZCA6IGhvbGRlcnMsXG4gICAgICAgICAgbmV3UGFydGlhbHMgPSBpc0N1cnJ5ID8gcGFydGlhbHMgOiB1bmRlZmluZWQsXG4gICAgICAgICAgbmV3UGFydGlhbHNSaWdodCA9IGlzQ3VycnkgPyB1bmRlZmluZWQgOiBwYXJ0aWFscztcblxuICAgICAgYml0bWFzayB8PSAoaXNDdXJyeSA/IFdSQVBfUEFSVElBTF9GTEFHIDogV1JBUF9QQVJUSUFMX1JJR0hUX0ZMQUcpO1xuICAgICAgYml0bWFzayAmPSB+KGlzQ3VycnkgPyBXUkFQX1BBUlRJQUxfUklHSFRfRkxBRyA6IFdSQVBfUEFSVElBTF9GTEFHKTtcblxuICAgICAgaWYgKCEoYml0bWFzayAmIFdSQVBfQ1VSUllfQk9VTkRfRkxBRykpIHtcbiAgICAgICAgYml0bWFzayAmPSB+KFdSQVBfQklORF9GTEFHIHwgV1JBUF9CSU5EX0tFWV9GTEFHKTtcbiAgICAgIH1cbiAgICAgIHZhciBuZXdEYXRhID0gW1xuICAgICAgICBmdW5jLCBiaXRtYXNrLCB0aGlzQXJnLCBuZXdQYXJ0aWFscywgbmV3SG9sZGVycywgbmV3UGFydGlhbHNSaWdodCxcbiAgICAgICAgbmV3SG9sZGVyc1JpZ2h0LCBhcmdQb3MsIGFyeSwgYXJpdHlcbiAgICAgIF07XG5cbiAgICAgIHZhciByZXN1bHQgPSB3cmFwRnVuYy5hcHBseSh1bmRlZmluZWQsIG5ld0RhdGEpO1xuICAgICAgaWYgKGlzTGF6aWFibGUoZnVuYykpIHtcbiAgICAgICAgc2V0RGF0YShyZXN1bHQsIG5ld0RhdGEpO1xuICAgICAgfVxuICAgICAgcmVzdWx0LnBsYWNlaG9sZGVyID0gcGxhY2Vob2xkZXI7XG4gICAgICByZXR1cm4gc2V0V3JhcFRvU3RyaW5nKHJlc3VsdCwgZnVuYywgYml0bWFzayk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIGxpa2UgYF8ucm91bmRgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbWV0aG9kTmFtZSBUaGUgbmFtZSBvZiB0aGUgYE1hdGhgIG1ldGhvZCB0byB1c2Ugd2hlbiByb3VuZGluZy5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyByb3VuZCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVSb3VuZChtZXRob2ROYW1lKSB7XG4gICAgICB2YXIgZnVuYyA9IE1hdGhbbWV0aG9kTmFtZV07XG4gICAgICByZXR1cm4gZnVuY3Rpb24obnVtYmVyLCBwcmVjaXNpb24pIHtcbiAgICAgICAgbnVtYmVyID0gdG9OdW1iZXIobnVtYmVyKTtcbiAgICAgICAgcHJlY2lzaW9uID0gcHJlY2lzaW9uID09IG51bGwgPyAwIDogbmF0aXZlTWluKHRvSW50ZWdlcihwcmVjaXNpb24pLCAyOTIpO1xuICAgICAgICBpZiAocHJlY2lzaW9uICYmIG5hdGl2ZUlzRmluaXRlKG51bWJlcikpIHtcbiAgICAgICAgICAvLyBTaGlmdCB3aXRoIGV4cG9uZW50aWFsIG5vdGF0aW9uIHRvIGF2b2lkIGZsb2F0aW5nLXBvaW50IGlzc3Vlcy5cbiAgICAgICAgICAvLyBTZWUgW01ETl0oaHR0cHM6Ly9tZG4uaW8vcm91bmQjRXhhbXBsZXMpIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICAgICAgdmFyIHBhaXIgPSAodG9TdHJpbmcobnVtYmVyKSArICdlJykuc3BsaXQoJ2UnKSxcbiAgICAgICAgICAgICAgdmFsdWUgPSBmdW5jKHBhaXJbMF0gKyAnZScgKyAoK3BhaXJbMV0gKyBwcmVjaXNpb24pKTtcblxuICAgICAgICAgIHBhaXIgPSAodG9TdHJpbmcodmFsdWUpICsgJ2UnKS5zcGxpdCgnZScpO1xuICAgICAgICAgIHJldHVybiArKHBhaXJbMF0gKyAnZScgKyAoK3BhaXJbMV0gLSBwcmVjaXNpb24pKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZnVuYyhudW1iZXIpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2V0IG9iamVjdCBvZiBgdmFsdWVzYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSB2YWx1ZXMgdG8gYWRkIHRvIHRoZSBzZXQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IHNldC5cbiAgICAgKi9cbiAgICB2YXIgY3JlYXRlU2V0ID0gIShTZXQgJiYgKDEgLyBzZXRUb0FycmF5KG5ldyBTZXQoWywtMF0pKVsxXSkgPT0gSU5GSU5JVFkpID8gbm9vcCA6IGZ1bmN0aW9uKHZhbHVlcykge1xuICAgICAgcmV0dXJuIG5ldyBTZXQodmFsdWVzKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGBfLnRvUGFpcnNgIG9yIGBfLnRvUGFpcnNJbmAgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGtleXNGdW5jIFRoZSBmdW5jdGlvbiB0byBnZXQgdGhlIGtleXMgb2YgYSBnaXZlbiBvYmplY3QuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcGFpcnMgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlVG9QYWlycyhrZXlzRnVuYykge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgICB2YXIgdGFnID0gZ2V0VGFnKG9iamVjdCk7XG4gICAgICAgIGlmICh0YWcgPT0gbWFwVGFnKSB7XG4gICAgICAgICAgcmV0dXJuIG1hcFRvQXJyYXkob2JqZWN0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGFnID09IHNldFRhZykge1xuICAgICAgICAgIHJldHVybiBzZXRUb1BhaXJzKG9iamVjdCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGJhc2VUb1BhaXJzKG9iamVjdCwga2V5c0Z1bmMob2JqZWN0KSk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGVpdGhlciBjdXJyaWVzIG9yIGludm9rZXMgYGZ1bmNgIHdpdGggb3B0aW9uYWxcbiAgICAgKiBgdGhpc2AgYmluZGluZyBhbmQgcGFydGlhbGx5IGFwcGxpZWQgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufHN0cmluZ30gZnVuYyBUaGUgZnVuY3Rpb24gb3IgbWV0aG9kIG5hbWUgdG8gd3JhcC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy5cbiAgICAgKiAgICAxIC0gYF8uYmluZGBcbiAgICAgKiAgICAyIC0gYF8uYmluZEtleWBcbiAgICAgKiAgICA0IC0gYF8uY3VycnlgIG9yIGBfLmN1cnJ5UmlnaHRgIG9mIGEgYm91bmQgZnVuY3Rpb25cbiAgICAgKiAgICA4IC0gYF8uY3VycnlgXG4gICAgICogICAxNiAtIGBfLmN1cnJ5UmlnaHRgXG4gICAgICogICAzMiAtIGBfLnBhcnRpYWxgXG4gICAgICogICA2NCAtIGBfLnBhcnRpYWxSaWdodGBcbiAgICAgKiAgMTI4IC0gYF8ucmVhcmdgXG4gICAgICogIDI1NiAtIGBfLmFyeWBcbiAgICAgKiAgNTEyIC0gYF8uZmxpcGBcbiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGZ1bmNgLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtwYXJ0aWFsc10gVGhlIGFyZ3VtZW50cyB0byBiZSBwYXJ0aWFsbHkgYXBwbGllZC5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbaG9sZGVyc10gVGhlIGBwYXJ0aWFsc2AgcGxhY2Vob2xkZXIgaW5kZXhlcy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbYXJnUG9zXSBUaGUgYXJndW1lbnQgcG9zaXRpb25zIG9mIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFthcnldIFRoZSBhcml0eSBjYXAgb2YgYGZ1bmNgLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbYXJpdHldIFRoZSBhcml0eSBvZiBgZnVuY2AuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgd3JhcHBlZCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVXcmFwKGZ1bmMsIGJpdG1hc2ssIHRoaXNBcmcsIHBhcnRpYWxzLCBob2xkZXJzLCBhcmdQb3MsIGFyeSwgYXJpdHkpIHtcbiAgICAgIHZhciBpc0JpbmRLZXkgPSBiaXRtYXNrICYgV1JBUF9CSU5EX0tFWV9GTEFHO1xuICAgICAgaWYgKCFpc0JpbmRLZXkgJiYgdHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICB2YXIgbGVuZ3RoID0gcGFydGlhbHMgPyBwYXJ0aWFscy5sZW5ndGggOiAwO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgYml0bWFzayAmPSB+KFdSQVBfUEFSVElBTF9GTEFHIHwgV1JBUF9QQVJUSUFMX1JJR0hUX0ZMQUcpO1xuICAgICAgICBwYXJ0aWFscyA9IGhvbGRlcnMgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICBhcnkgPSBhcnkgPT09IHVuZGVmaW5lZCA/IGFyeSA6IG5hdGl2ZU1heCh0b0ludGVnZXIoYXJ5KSwgMCk7XG4gICAgICBhcml0eSA9IGFyaXR5ID09PSB1bmRlZmluZWQgPyBhcml0eSA6IHRvSW50ZWdlcihhcml0eSk7XG4gICAgICBsZW5ndGggLT0gaG9sZGVycyA/IGhvbGRlcnMubGVuZ3RoIDogMDtcblxuICAgICAgaWYgKGJpdG1hc2sgJiBXUkFQX1BBUlRJQUxfUklHSFRfRkxBRykge1xuICAgICAgICB2YXIgcGFydGlhbHNSaWdodCA9IHBhcnRpYWxzLFxuICAgICAgICAgICAgaG9sZGVyc1JpZ2h0ID0gaG9sZGVycztcblxuICAgICAgICBwYXJ0aWFscyA9IGhvbGRlcnMgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICB2YXIgZGF0YSA9IGlzQmluZEtleSA/IHVuZGVmaW5lZCA6IGdldERhdGEoZnVuYyk7XG5cbiAgICAgIHZhciBuZXdEYXRhID0gW1xuICAgICAgICBmdW5jLCBiaXRtYXNrLCB0aGlzQXJnLCBwYXJ0aWFscywgaG9sZGVycywgcGFydGlhbHNSaWdodCwgaG9sZGVyc1JpZ2h0LFxuICAgICAgICBhcmdQb3MsIGFyeSwgYXJpdHlcbiAgICAgIF07XG5cbiAgICAgIGlmIChkYXRhKSB7XG4gICAgICAgIG1lcmdlRGF0YShuZXdEYXRhLCBkYXRhKTtcbiAgICAgIH1cbiAgICAgIGZ1bmMgPSBuZXdEYXRhWzBdO1xuICAgICAgYml0bWFzayA9IG5ld0RhdGFbMV07XG4gICAgICB0aGlzQXJnID0gbmV3RGF0YVsyXTtcbiAgICAgIHBhcnRpYWxzID0gbmV3RGF0YVszXTtcbiAgICAgIGhvbGRlcnMgPSBuZXdEYXRhWzRdO1xuICAgICAgYXJpdHkgPSBuZXdEYXRhWzldID0gbmV3RGF0YVs5XSA9PT0gdW5kZWZpbmVkXG4gICAgICAgID8gKGlzQmluZEtleSA/IDAgOiBmdW5jLmxlbmd0aClcbiAgICAgICAgOiBuYXRpdmVNYXgobmV3RGF0YVs5XSAtIGxlbmd0aCwgMCk7XG5cbiAgICAgIGlmICghYXJpdHkgJiYgYml0bWFzayAmIChXUkFQX0NVUlJZX0ZMQUcgfCBXUkFQX0NVUlJZX1JJR0hUX0ZMQUcpKSB7XG4gICAgICAgIGJpdG1hc2sgJj0gfihXUkFQX0NVUlJZX0ZMQUcgfCBXUkFQX0NVUlJZX1JJR0hUX0ZMQUcpO1xuICAgICAgfVxuICAgICAgaWYgKCFiaXRtYXNrIHx8IGJpdG1hc2sgPT0gV1JBUF9CSU5EX0ZMQUcpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IGNyZWF0ZUJpbmQoZnVuYywgYml0bWFzaywgdGhpc0FyZyk7XG4gICAgICB9IGVsc2UgaWYgKGJpdG1hc2sgPT0gV1JBUF9DVVJSWV9GTEFHIHx8IGJpdG1hc2sgPT0gV1JBUF9DVVJSWV9SSUdIVF9GTEFHKSB7XG4gICAgICAgIHJlc3VsdCA9IGNyZWF0ZUN1cnJ5KGZ1bmMsIGJpdG1hc2ssIGFyaXR5KTtcbiAgICAgIH0gZWxzZSBpZiAoKGJpdG1hc2sgPT0gV1JBUF9QQVJUSUFMX0ZMQUcgfHwgYml0bWFzayA9PSAoV1JBUF9CSU5EX0ZMQUcgfCBXUkFQX1BBUlRJQUxfRkxBRykpICYmICFob2xkZXJzLmxlbmd0aCkge1xuICAgICAgICByZXN1bHQgPSBjcmVhdGVQYXJ0aWFsKGZ1bmMsIGJpdG1hc2ssIHRoaXNBcmcsIHBhcnRpYWxzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdCA9IGNyZWF0ZUh5YnJpZC5hcHBseSh1bmRlZmluZWQsIG5ld0RhdGEpO1xuICAgICAgfVxuICAgICAgdmFyIHNldHRlciA9IGRhdGEgPyBiYXNlU2V0RGF0YSA6IHNldERhdGE7XG4gICAgICByZXR1cm4gc2V0V3JhcFRvU3RyaW5nKHNldHRlcihyZXN1bHQsIG5ld0RhdGEpLCBmdW5jLCBiaXRtYXNrKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVc2VkIGJ5IGBfLmRlZmF1bHRzYCB0byBjdXN0b21pemUgaXRzIGBfLmFzc2lnbkluYCB1c2UgdG8gYXNzaWduIHByb3BlcnRpZXNcbiAgICAgKiBvZiBzb3VyY2Ugb2JqZWN0cyB0byB0aGUgZGVzdGluYXRpb24gb2JqZWN0IGZvciBhbGwgZGVzdGluYXRpb24gcHJvcGVydGllc1xuICAgICAqIHRoYXQgcmVzb2x2ZSB0byBgdW5kZWZpbmVkYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSBvYmpWYWx1ZSBUaGUgZGVzdGluYXRpb24gdmFsdWUuXG4gICAgICogQHBhcmFtIHsqfSBzcmNWYWx1ZSBUaGUgc291cmNlIHZhbHVlLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gYXNzaWduLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIHBhcmVudCBvYmplY3Qgb2YgYG9ialZhbHVlYC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgdmFsdWUgdG8gYXNzaWduLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGN1c3RvbURlZmF1bHRzQXNzaWduSW4ob2JqVmFsdWUsIHNyY1ZhbHVlLCBrZXksIG9iamVjdCkge1xuICAgICAgaWYgKG9ialZhbHVlID09PSB1bmRlZmluZWQgfHxcbiAgICAgICAgICAoZXEob2JqVmFsdWUsIG9iamVjdFByb3RvW2tleV0pICYmICFoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSkpIHtcbiAgICAgICAgcmV0dXJuIHNyY1ZhbHVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG9ialZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVzZWQgYnkgYF8uZGVmYXVsdHNEZWVwYCB0byBjdXN0b21pemUgaXRzIGBfLm1lcmdlYCB1c2UgdG8gbWVyZ2Ugc291cmNlXG4gICAgICogb2JqZWN0cyBpbnRvIGRlc3RpbmF0aW9uIG9iamVjdHMgdGhhdCBhcmUgcGFzc2VkIHRocnUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gb2JqVmFsdWUgVGhlIGRlc3RpbmF0aW9uIHZhbHVlLlxuICAgICAqIEBwYXJhbSB7Kn0gc3JjVmFsdWUgVGhlIHNvdXJjZSB2YWx1ZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIG1lcmdlLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIHBhcmVudCBvYmplY3Qgb2YgYG9ialZhbHVlYC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBwYXJlbnQgb2JqZWN0IG9mIGBzcmNWYWx1ZWAuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtzdGFja10gVHJhY2tzIHRyYXZlcnNlZCBzb3VyY2UgdmFsdWVzIGFuZCB0aGVpciBtZXJnZWRcbiAgICAgKiAgY291bnRlcnBhcnRzLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSB2YWx1ZSB0byBhc3NpZ24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3VzdG9tRGVmYXVsdHNNZXJnZShvYmpWYWx1ZSwgc3JjVmFsdWUsIGtleSwgb2JqZWN0LCBzb3VyY2UsIHN0YWNrKSB7XG4gICAgICBpZiAoaXNPYmplY3Qob2JqVmFsdWUpICYmIGlzT2JqZWN0KHNyY1ZhbHVlKSkge1xuICAgICAgICAvLyBSZWN1cnNpdmVseSBtZXJnZSBvYmplY3RzIGFuZCBhcnJheXMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICAgICAgc3RhY2suc2V0KHNyY1ZhbHVlLCBvYmpWYWx1ZSk7XG4gICAgICAgIGJhc2VNZXJnZShvYmpWYWx1ZSwgc3JjVmFsdWUsIHVuZGVmaW5lZCwgY3VzdG9tRGVmYXVsdHNNZXJnZSwgc3RhY2spO1xuICAgICAgICBzdGFja1snZGVsZXRlJ10oc3JjVmFsdWUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG9ialZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVzZWQgYnkgYF8ub21pdGAgdG8gY3VzdG9taXplIGl0cyBgXy5jbG9uZURlZXBgIHVzZSB0byBvbmx5IGNsb25lIHBsYWluXG4gICAgICogb2JqZWN0cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHVuY2xvbmVkIHZhbHVlIG9yIGB1bmRlZmluZWRgIHRvIGRlZmVyIGNsb25pbmcgdG8gYF8uY2xvbmVEZWVwYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjdXN0b21PbWl0Q2xvbmUodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc1BsYWluT2JqZWN0KHZhbHVlKSA/IHVuZGVmaW5lZCA6IHZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUlzRXF1YWxEZWVwYCBmb3IgYXJyYXlzIHdpdGggc3VwcG9ydCBmb3JcbiAgICAgKiBwYXJ0aWFsIGRlZXAgY29tcGFyaXNvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IG90aGVyIFRoZSBvdGhlciBhcnJheSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGJhc2VJc0VxdWFsYCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGN1c3RvbWl6ZXIgVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBlcXVhbEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRldGVybWluZSBlcXVpdmFsZW50cyBvZiB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHN0YWNrIFRyYWNrcyB0cmF2ZXJzZWQgYGFycmF5YCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgYXJyYXlzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZXF1YWxBcnJheXMoYXJyYXksIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKSB7XG4gICAgICB2YXIgaXNQYXJ0aWFsID0gYml0bWFzayAmIENPTVBBUkVfUEFSVElBTF9GTEFHLFxuICAgICAgICAgIGFyckxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgICBvdGhMZW5ndGggPSBvdGhlci5sZW5ndGg7XG5cbiAgICAgIGlmIChhcnJMZW5ndGggIT0gb3RoTGVuZ3RoICYmICEoaXNQYXJ0aWFsICYmIG90aExlbmd0aCA+IGFyckxlbmd0aCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgLy8gQXNzdW1lIGN5Y2xpYyB2YWx1ZXMgYXJlIGVxdWFsLlxuICAgICAgdmFyIHN0YWNrZWQgPSBzdGFjay5nZXQoYXJyYXkpO1xuICAgICAgaWYgKHN0YWNrZWQgJiYgc3RhY2suZ2V0KG90aGVyKSkge1xuICAgICAgICByZXR1cm4gc3RhY2tlZCA9PSBvdGhlcjtcbiAgICAgIH1cbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIHJlc3VsdCA9IHRydWUsXG4gICAgICAgICAgc2VlbiA9IChiaXRtYXNrICYgQ09NUEFSRV9VTk9SREVSRURfRkxBRykgPyBuZXcgU2V0Q2FjaGUgOiB1bmRlZmluZWQ7XG5cbiAgICAgIHN0YWNrLnNldChhcnJheSwgb3RoZXIpO1xuICAgICAgc3RhY2suc2V0KG90aGVyLCBhcnJheSk7XG5cbiAgICAgIC8vIElnbm9yZSBub24taW5kZXggcHJvcGVydGllcy5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgYXJyTGVuZ3RoKSB7XG4gICAgICAgIHZhciBhcnJWYWx1ZSA9IGFycmF5W2luZGV4XSxcbiAgICAgICAgICAgIG90aFZhbHVlID0gb3RoZXJbaW5kZXhdO1xuXG4gICAgICAgIGlmIChjdXN0b21pemVyKSB7XG4gICAgICAgICAgdmFyIGNvbXBhcmVkID0gaXNQYXJ0aWFsXG4gICAgICAgICAgICA/IGN1c3RvbWl6ZXIob3RoVmFsdWUsIGFyclZhbHVlLCBpbmRleCwgb3RoZXIsIGFycmF5LCBzdGFjaylcbiAgICAgICAgICAgIDogY3VzdG9taXplcihhcnJWYWx1ZSwgb3RoVmFsdWUsIGluZGV4LCBhcnJheSwgb3RoZXIsIHN0YWNrKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY29tcGFyZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGlmIChjb21wYXJlZCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbXBhcmUgYXJyYXlzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgICAgIGlmIChzZWVuKSB7XG4gICAgICAgICAgaWYgKCFhcnJheVNvbWUob3RoZXIsIGZ1bmN0aW9uKG90aFZhbHVlLCBvdGhJbmRleCkge1xuICAgICAgICAgICAgICAgIGlmICghY2FjaGVIYXMoc2Vlbiwgb3RoSW5kZXgpICYmXG4gICAgICAgICAgICAgICAgICAgIChhcnJWYWx1ZSA9PT0gb3RoVmFsdWUgfHwgZXF1YWxGdW5jKGFyclZhbHVlLCBvdGhWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spKSkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIHNlZW4ucHVzaChvdGhJbmRleCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KSkge1xuICAgICAgICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoIShcbiAgICAgICAgICAgICAgYXJyVmFsdWUgPT09IG90aFZhbHVlIHx8XG4gICAgICAgICAgICAgICAgZXF1YWxGdW5jKGFyclZhbHVlLCBvdGhWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spXG4gICAgICAgICAgICApKSB7XG4gICAgICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHN0YWNrWydkZWxldGUnXShhcnJheSk7XG4gICAgICBzdGFja1snZGVsZXRlJ10ob3RoZXIpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VJc0VxdWFsRGVlcGAgZm9yIGNvbXBhcmluZyBvYmplY3RzIG9mXG4gICAgICogdGhlIHNhbWUgYHRvU3RyaW5nVGFnYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIGZ1bmN0aW9uIG9ubHkgc3VwcG9ydHMgY29tcGFyaW5nIHZhbHVlcyB3aXRoIHRhZ3Mgb2ZcbiAgICAgKiBgQm9vbGVhbmAsIGBEYXRlYCwgYEVycm9yYCwgYE51bWJlcmAsIGBSZWdFeHBgLCBvciBgU3RyaW5nYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG90aGVyIFRoZSBvdGhlciBvYmplY3QgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGFnIFRoZSBgdG9TdHJpbmdUYWdgIG9mIHRoZSBvYmplY3RzIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgYmFzZUlzRXF1YWxgIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGVxdWFsRnVuYyBUaGUgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGVxdWl2YWxlbnRzIG9mIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc3RhY2sgVHJhY2tzIHRyYXZlcnNlZCBgb2JqZWN0YCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgb2JqZWN0cyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGVxdWFsQnlUYWcob2JqZWN0LCBvdGhlciwgdGFnLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKSB7XG4gICAgICBzd2l0Y2ggKHRhZykge1xuICAgICAgICBjYXNlIGRhdGFWaWV3VGFnOlxuICAgICAgICAgIGlmICgob2JqZWN0LmJ5dGVMZW5ndGggIT0gb3RoZXIuYnl0ZUxlbmd0aCkgfHxcbiAgICAgICAgICAgICAgKG9iamVjdC5ieXRlT2Zmc2V0ICE9IG90aGVyLmJ5dGVPZmZzZXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICAgIG9iamVjdCA9IG9iamVjdC5idWZmZXI7XG4gICAgICAgICAgb3RoZXIgPSBvdGhlci5idWZmZXI7XG5cbiAgICAgICAgY2FzZSBhcnJheUJ1ZmZlclRhZzpcbiAgICAgICAgICBpZiAoKG9iamVjdC5ieXRlTGVuZ3RoICE9IG90aGVyLmJ5dGVMZW5ndGgpIHx8XG4gICAgICAgICAgICAgICFlcXVhbEZ1bmMobmV3IFVpbnQ4QXJyYXkob2JqZWN0KSwgbmV3IFVpbnQ4QXJyYXkob3RoZXIpKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcblxuICAgICAgICBjYXNlIGJvb2xUYWc6XG4gICAgICAgIGNhc2UgZGF0ZVRhZzpcbiAgICAgICAgY2FzZSBudW1iZXJUYWc6XG4gICAgICAgICAgLy8gQ29lcmNlIGJvb2xlYW5zIHRvIGAxYCBvciBgMGAgYW5kIGRhdGVzIHRvIG1pbGxpc2Vjb25kcy5cbiAgICAgICAgICAvLyBJbnZhbGlkIGRhdGVzIGFyZSBjb2VyY2VkIHRvIGBOYU5gLlxuICAgICAgICAgIHJldHVybiBlcSgrb2JqZWN0LCArb3RoZXIpO1xuXG4gICAgICAgIGNhc2UgZXJyb3JUYWc6XG4gICAgICAgICAgcmV0dXJuIG9iamVjdC5uYW1lID09IG90aGVyLm5hbWUgJiYgb2JqZWN0Lm1lc3NhZ2UgPT0gb3RoZXIubWVzc2FnZTtcblxuICAgICAgICBjYXNlIHJlZ2V4cFRhZzpcbiAgICAgICAgY2FzZSBzdHJpbmdUYWc6XG4gICAgICAgICAgLy8gQ29lcmNlIHJlZ2V4ZXMgdG8gc3RyaW5ncyBhbmQgdHJlYXQgc3RyaW5ncywgcHJpbWl0aXZlcyBhbmQgb2JqZWN0cyxcbiAgICAgICAgICAvLyBhcyBlcXVhbC4gU2VlIGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1yZWdleHAucHJvdG90eXBlLnRvc3RyaW5nXG4gICAgICAgICAgLy8gZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgICAgICByZXR1cm4gb2JqZWN0ID09IChvdGhlciArICcnKTtcblxuICAgICAgICBjYXNlIG1hcFRhZzpcbiAgICAgICAgICB2YXIgY29udmVydCA9IG1hcFRvQXJyYXk7XG5cbiAgICAgICAgY2FzZSBzZXRUYWc6XG4gICAgICAgICAgdmFyIGlzUGFydGlhbCA9IGJpdG1hc2sgJiBDT01QQVJFX1BBUlRJQUxfRkxBRztcbiAgICAgICAgICBjb252ZXJ0IHx8IChjb252ZXJ0ID0gc2V0VG9BcnJheSk7XG5cbiAgICAgICAgICBpZiAob2JqZWN0LnNpemUgIT0gb3RoZXIuc2l6ZSAmJiAhaXNQYXJ0aWFsKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIEFzc3VtZSBjeWNsaWMgdmFsdWVzIGFyZSBlcXVhbC5cbiAgICAgICAgICB2YXIgc3RhY2tlZCA9IHN0YWNrLmdldChvYmplY3QpO1xuICAgICAgICAgIGlmIChzdGFja2VkKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RhY2tlZCA9PSBvdGhlcjtcbiAgICAgICAgICB9XG4gICAgICAgICAgYml0bWFzayB8PSBDT01QQVJFX1VOT1JERVJFRF9GTEFHO1xuXG4gICAgICAgICAgLy8gUmVjdXJzaXZlbHkgY29tcGFyZSBvYmplY3RzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgICAgICAgc3RhY2suc2V0KG9iamVjdCwgb3RoZXIpO1xuICAgICAgICAgIHZhciByZXN1bHQgPSBlcXVhbEFycmF5cyhjb252ZXJ0KG9iamVjdCksIGNvbnZlcnQob3RoZXIpLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKTtcbiAgICAgICAgICBzdGFja1snZGVsZXRlJ10ob2JqZWN0KTtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuXG4gICAgICAgIGNhc2Ugc3ltYm9sVGFnOlxuICAgICAgICAgIGlmIChzeW1ib2xWYWx1ZU9mKSB7XG4gICAgICAgICAgICByZXR1cm4gc3ltYm9sVmFsdWVPZi5jYWxsKG9iamVjdCkgPT0gc3ltYm9sVmFsdWVPZi5jYWxsKG90aGVyKTtcbiAgICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlSXNFcXVhbERlZXBgIGZvciBvYmplY3RzIHdpdGggc3VwcG9ydCBmb3JcbiAgICAgKiBwYXJ0aWFsIGRlZXAgY29tcGFyaXNvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvdGhlciBUaGUgb3RoZXIgb2JqZWN0IHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgYmFzZUlzRXF1YWxgIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGVxdWFsRnVuYyBUaGUgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGVxdWl2YWxlbnRzIG9mIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc3RhY2sgVHJhY2tzIHRyYXZlcnNlZCBgb2JqZWN0YCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgb2JqZWN0cyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGVxdWFsT2JqZWN0cyhvYmplY3QsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKSB7XG4gICAgICB2YXIgaXNQYXJ0aWFsID0gYml0bWFzayAmIENPTVBBUkVfUEFSVElBTF9GTEFHLFxuICAgICAgICAgIG9ialByb3BzID0gZ2V0QWxsS2V5cyhvYmplY3QpLFxuICAgICAgICAgIG9iakxlbmd0aCA9IG9ialByb3BzLmxlbmd0aCxcbiAgICAgICAgICBvdGhQcm9wcyA9IGdldEFsbEtleXMob3RoZXIpLFxuICAgICAgICAgIG90aExlbmd0aCA9IG90aFByb3BzLmxlbmd0aDtcblxuICAgICAgaWYgKG9iakxlbmd0aCAhPSBvdGhMZW5ndGggJiYgIWlzUGFydGlhbCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSBvYmpMZW5ndGg7XG4gICAgICB3aGlsZSAoaW5kZXgtLSkge1xuICAgICAgICB2YXIga2V5ID0gb2JqUHJvcHNbaW5kZXhdO1xuICAgICAgICBpZiAoIShpc1BhcnRpYWwgPyBrZXkgaW4gb3RoZXIgOiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG90aGVyLCBrZXkpKSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gQXNzdW1lIGN5Y2xpYyB2YWx1ZXMgYXJlIGVxdWFsLlxuICAgICAgdmFyIHN0YWNrZWQgPSBzdGFjay5nZXQob2JqZWN0KTtcbiAgICAgIGlmIChzdGFja2VkICYmIHN0YWNrLmdldChvdGhlcikpIHtcbiAgICAgICAgcmV0dXJuIHN0YWNrZWQgPT0gb3RoZXI7XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0ID0gdHJ1ZTtcbiAgICAgIHN0YWNrLnNldChvYmplY3QsIG90aGVyKTtcbiAgICAgIHN0YWNrLnNldChvdGhlciwgb2JqZWN0KTtcblxuICAgICAgdmFyIHNraXBDdG9yID0gaXNQYXJ0aWFsO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBvYmpMZW5ndGgpIHtcbiAgICAgICAga2V5ID0gb2JqUHJvcHNbaW5kZXhdO1xuICAgICAgICB2YXIgb2JqVmFsdWUgPSBvYmplY3Rba2V5XSxcbiAgICAgICAgICAgIG90aFZhbHVlID0gb3RoZXJba2V5XTtcblxuICAgICAgICBpZiAoY3VzdG9taXplcikge1xuICAgICAgICAgIHZhciBjb21wYXJlZCA9IGlzUGFydGlhbFxuICAgICAgICAgICAgPyBjdXN0b21pemVyKG90aFZhbHVlLCBvYmpWYWx1ZSwga2V5LCBvdGhlciwgb2JqZWN0LCBzdGFjaylcbiAgICAgICAgICAgIDogY3VzdG9taXplcihvYmpWYWx1ZSwgb3RoVmFsdWUsIGtleSwgb2JqZWN0LCBvdGhlciwgc3RhY2spO1xuICAgICAgICB9XG4gICAgICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbXBhcmUgb2JqZWN0cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgICAgICBpZiAoIShjb21wYXJlZCA9PT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgID8gKG9ialZhbHVlID09PSBvdGhWYWx1ZSB8fCBlcXVhbEZ1bmMob2JqVmFsdWUsIG90aFZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdGFjaykpXG4gICAgICAgICAgICAgIDogY29tcGFyZWRcbiAgICAgICAgICAgICkpIHtcbiAgICAgICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBza2lwQ3RvciB8fCAoc2tpcEN0b3IgPSBrZXkgPT0gJ2NvbnN0cnVjdG9yJyk7XG4gICAgICB9XG4gICAgICBpZiAocmVzdWx0ICYmICFza2lwQ3Rvcikge1xuICAgICAgICB2YXIgb2JqQ3RvciA9IG9iamVjdC5jb25zdHJ1Y3RvcixcbiAgICAgICAgICAgIG90aEN0b3IgPSBvdGhlci5jb25zdHJ1Y3RvcjtcblxuICAgICAgICAvLyBOb24gYE9iamVjdGAgb2JqZWN0IGluc3RhbmNlcyB3aXRoIGRpZmZlcmVudCBjb25zdHJ1Y3RvcnMgYXJlIG5vdCBlcXVhbC5cbiAgICAgICAgaWYgKG9iakN0b3IgIT0gb3RoQ3RvciAmJlxuICAgICAgICAgICAgKCdjb25zdHJ1Y3RvcicgaW4gb2JqZWN0ICYmICdjb25zdHJ1Y3RvcicgaW4gb3RoZXIpICYmXG4gICAgICAgICAgICAhKHR5cGVvZiBvYmpDdG9yID09ICdmdW5jdGlvbicgJiYgb2JqQ3RvciBpbnN0YW5jZW9mIG9iakN0b3IgJiZcbiAgICAgICAgICAgICAgdHlwZW9mIG90aEN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBvdGhDdG9yIGluc3RhbmNlb2Ygb3RoQ3RvcikpIHtcbiAgICAgICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgc3RhY2tbJ2RlbGV0ZSddKG9iamVjdCk7XG4gICAgICBzdGFja1snZGVsZXRlJ10ob3RoZXIpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VSZXN0YCB3aGljaCBmbGF0dGVucyB0aGUgcmVzdCBhcnJheS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gYXBwbHkgYSByZXN0IHBhcmFtZXRlciB0by5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmbGF0UmVzdChmdW5jKSB7XG4gICAgICByZXR1cm4gc2V0VG9TdHJpbmcob3ZlclJlc3QoZnVuYywgdW5kZWZpbmVkLCBmbGF0dGVuKSwgZnVuYyArICcnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIG93biBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIGFuZCBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcyBhbmQgc3ltYm9scy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRBbGxLZXlzKG9iamVjdCkge1xuICAgICAgcmV0dXJuIGJhc2VHZXRBbGxLZXlzKG9iamVjdCwga2V5cywgZ2V0U3ltYm9scyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIGFuZFxuICAgICAqIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzIGFuZCBzeW1ib2xzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldEFsbEtleXNJbihvYmplY3QpIHtcbiAgICAgIHJldHVybiBiYXNlR2V0QWxsS2V5cyhvYmplY3QsIGtleXNJbiwgZ2V0U3ltYm9sc0luKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIG1ldGFkYXRhIGZvciBgZnVuY2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtZXRhZGF0YSBmb3IgYGZ1bmNgLlxuICAgICAqL1xuICAgIHZhciBnZXREYXRhID0gIW1ldGFNYXAgPyBub29wIDogZnVuY3Rpb24oZnVuYykge1xuICAgICAgcmV0dXJuIG1ldGFNYXAuZ2V0KGZ1bmMpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBuYW1lIG9mIGBmdW5jYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgZnVuY3Rpb24gbmFtZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRGdW5jTmFtZShmdW5jKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gKGZ1bmMubmFtZSArICcnKSxcbiAgICAgICAgICBhcnJheSA9IHJlYWxOYW1lc1tyZXN1bHRdLFxuICAgICAgICAgIGxlbmd0aCA9IGhhc093blByb3BlcnR5LmNhbGwocmVhbE5hbWVzLCByZXN1bHQpID8gYXJyYXkubGVuZ3RoIDogMDtcblxuICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgIHZhciBkYXRhID0gYXJyYXlbbGVuZ3RoXSxcbiAgICAgICAgICAgIG90aGVyRnVuYyA9IGRhdGEuZnVuYztcbiAgICAgICAgaWYgKG90aGVyRnVuYyA9PSBudWxsIHx8IG90aGVyRnVuYyA9PSBmdW5jKSB7XG4gICAgICAgICAgcmV0dXJuIGRhdGEubmFtZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBhcmd1bWVudCBwbGFjZWhvbGRlciB2YWx1ZSBmb3IgYGZ1bmNgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBwbGFjZWhvbGRlciB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRIb2xkZXIoZnVuYykge1xuICAgICAgdmFyIG9iamVjdCA9IGhhc093blByb3BlcnR5LmNhbGwobG9kYXNoLCAncGxhY2Vob2xkZXInKSA/IGxvZGFzaCA6IGZ1bmM7XG4gICAgICByZXR1cm4gb2JqZWN0LnBsYWNlaG9sZGVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGFwcHJvcHJpYXRlIFwiaXRlcmF0ZWVcIiBmdW5jdGlvbi4gSWYgYF8uaXRlcmF0ZWVgIGlzIGN1c3RvbWl6ZWQsXG4gICAgICogdGhpcyBmdW5jdGlvbiByZXR1cm5zIHRoZSBjdXN0b20gbWV0aG9kLCBvdGhlcndpc2UgaXQgcmV0dXJucyBgYmFzZUl0ZXJhdGVlYC5cbiAgICAgKiBJZiBhcmd1bWVudHMgYXJlIHByb3ZpZGVkLCB0aGUgY2hvc2VuIGZ1bmN0aW9uIGlzIGludm9rZWQgd2l0aCB0aGVtIGFuZFxuICAgICAqIGl0cyByZXN1bHQgaXMgcmV0dXJuZWQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gW3ZhbHVlXSBUaGUgdmFsdWUgdG8gY29udmVydCB0byBhbiBpdGVyYXRlZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2FyaXR5XSBUaGUgYXJpdHkgb2YgdGhlIGNyZWF0ZWQgaXRlcmF0ZWUuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBjaG9zZW4gZnVuY3Rpb24gb3IgaXRzIHJlc3VsdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRJdGVyYXRlZSgpIHtcbiAgICAgIHZhciByZXN1bHQgPSBsb2Rhc2guaXRlcmF0ZWUgfHwgaXRlcmF0ZWU7XG4gICAgICByZXN1bHQgPSByZXN1bHQgPT09IGl0ZXJhdGVlID8gYmFzZUl0ZXJhdGVlIDogcmVzdWx0O1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyByZXN1bHQoYXJndW1lbnRzWzBdLCBhcmd1bWVudHNbMV0pIDogcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGRhdGEgZm9yIGBtYXBgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gbWFwIFRoZSBtYXAgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUgcmVmZXJlbmNlIGtleS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbWFwIGRhdGEuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0TWFwRGF0YShtYXAsIGtleSkge1xuICAgICAgdmFyIGRhdGEgPSBtYXAuX19kYXRhX187XG4gICAgICByZXR1cm4gaXNLZXlhYmxlKGtleSlcbiAgICAgICAgPyBkYXRhW3R5cGVvZiBrZXkgPT0gJ3N0cmluZycgPyAnc3RyaW5nJyA6ICdoYXNoJ11cbiAgICAgICAgOiBkYXRhLm1hcDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBwcm9wZXJ0eSBuYW1lcywgdmFsdWVzLCBhbmQgY29tcGFyZSBmbGFncyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbWF0Y2ggZGF0YSBvZiBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRNYXRjaERhdGEob2JqZWN0KSB7XG4gICAgICB2YXIgcmVzdWx0ID0ga2V5cyhvYmplY3QpLFxuICAgICAgICAgIGxlbmd0aCA9IHJlc3VsdC5sZW5ndGg7XG5cbiAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICB2YXIga2V5ID0gcmVzdWx0W2xlbmd0aF0sXG4gICAgICAgICAgICB2YWx1ZSA9IG9iamVjdFtrZXldO1xuXG4gICAgICAgIHJlc3VsdFtsZW5ndGhdID0gW2tleSwgdmFsdWUsIGlzU3RyaWN0Q29tcGFyYWJsZSh2YWx1ZSldO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBuYXRpdmUgZnVuY3Rpb24gYXQgYGtleWAgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIG1ldGhvZCB0byBnZXQuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGZ1bmN0aW9uIGlmIGl0J3MgbmF0aXZlLCBlbHNlIGB1bmRlZmluZWRgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldE5hdGl2ZShvYmplY3QsIGtleSkge1xuICAgICAgdmFyIHZhbHVlID0gZ2V0VmFsdWUob2JqZWN0LCBrZXkpO1xuICAgICAgcmV0dXJuIGJhc2VJc05hdGl2ZSh2YWx1ZSkgPyB2YWx1ZSA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VHZXRUYWdgIHdoaWNoIGlnbm9yZXMgYFN5bWJvbC50b1N0cmluZ1RhZ2AgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSByYXcgYHRvU3RyaW5nVGFnYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRSYXdUYWcodmFsdWUpIHtcbiAgICAgIHZhciBpc093biA9IGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsIHN5bVRvU3RyaW5nVGFnKSxcbiAgICAgICAgICB0YWcgPSB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ107XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIHZhbHVlW3N5bVRvU3RyaW5nVGFnXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdmFyIHVubWFza2VkID0gdHJ1ZTtcbiAgICAgIH0gY2F0Y2ggKGUpIHt9XG5cbiAgICAgIHZhciByZXN1bHQgPSBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgICAgIGlmICh1bm1hc2tlZCkge1xuICAgICAgICBpZiAoaXNPd24pIHtcbiAgICAgICAgICB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ10gPSB0YWc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZGVsZXRlIHZhbHVlW3N5bVRvU3RyaW5nVGFnXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gZW51bWVyYWJsZSBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBzeW1ib2xzLlxuICAgICAqL1xuICAgIHZhciBnZXRTeW1ib2xzID0gIW5hdGl2ZUdldFN5bWJvbHMgPyBzdHViQXJyYXkgOiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgIGlmIChvYmplY3QgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBvYmplY3QgPSBPYmplY3Qob2JqZWN0KTtcbiAgICAgIHJldHVybiBhcnJheUZpbHRlcihuYXRpdmVHZXRTeW1ib2xzKG9iamVjdCksIGZ1bmN0aW9uKHN5bWJvbCkge1xuICAgICAgICByZXR1cm4gcHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChvYmplY3QsIHN5bWJvbCk7XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBzeW1ib2xzLlxuICAgICAqL1xuICAgIHZhciBnZXRTeW1ib2xzSW4gPSAhbmF0aXZlR2V0U3ltYm9scyA/IHN0dWJBcnJheSA6IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgICAgd2hpbGUgKG9iamVjdCkge1xuICAgICAgICBhcnJheVB1c2gocmVzdWx0LCBnZXRTeW1ib2xzKG9iamVjdCkpO1xuICAgICAgICBvYmplY3QgPSBnZXRQcm90b3R5cGUob2JqZWN0KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGB0b1N0cmluZ1RhZ2Agb2YgYHZhbHVlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgYHRvU3RyaW5nVGFnYC5cbiAgICAgKi9cbiAgICB2YXIgZ2V0VGFnID0gYmFzZUdldFRhZztcblxuICAgIC8vIEZhbGxiYWNrIGZvciBkYXRhIHZpZXdzLCBtYXBzLCBzZXRzLCBhbmQgd2VhayBtYXBzIGluIElFIDExIGFuZCBwcm9taXNlcyBpbiBOb2RlLmpzIDwgNi5cbiAgICBpZiAoKERhdGFWaWV3ICYmIGdldFRhZyhuZXcgRGF0YVZpZXcobmV3IEFycmF5QnVmZmVyKDEpKSkgIT0gZGF0YVZpZXdUYWcpIHx8XG4gICAgICAgIChNYXAgJiYgZ2V0VGFnKG5ldyBNYXApICE9IG1hcFRhZykgfHxcbiAgICAgICAgKFByb21pc2UgJiYgZ2V0VGFnKFByb21pc2UucmVzb2x2ZSgpKSAhPSBwcm9taXNlVGFnKSB8fFxuICAgICAgICAoU2V0ICYmIGdldFRhZyhuZXcgU2V0KSAhPSBzZXRUYWcpIHx8XG4gICAgICAgIChXZWFrTWFwICYmIGdldFRhZyhuZXcgV2Vha01hcCkgIT0gd2Vha01hcFRhZykpIHtcbiAgICAgIGdldFRhZyA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBiYXNlR2V0VGFnKHZhbHVlKSxcbiAgICAgICAgICAgIEN0b3IgPSByZXN1bHQgPT0gb2JqZWN0VGFnID8gdmFsdWUuY29uc3RydWN0b3IgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBjdG9yU3RyaW5nID0gQ3RvciA/IHRvU291cmNlKEN0b3IpIDogJyc7XG5cbiAgICAgICAgaWYgKGN0b3JTdHJpbmcpIHtcbiAgICAgICAgICBzd2l0Y2ggKGN0b3JTdHJpbmcpIHtcbiAgICAgICAgICAgIGNhc2UgZGF0YVZpZXdDdG9yU3RyaW5nOiByZXR1cm4gZGF0YVZpZXdUYWc7XG4gICAgICAgICAgICBjYXNlIG1hcEN0b3JTdHJpbmc6IHJldHVybiBtYXBUYWc7XG4gICAgICAgICAgICBjYXNlIHByb21pc2VDdG9yU3RyaW5nOiByZXR1cm4gcHJvbWlzZVRhZztcbiAgICAgICAgICAgIGNhc2Ugc2V0Q3RvclN0cmluZzogcmV0dXJuIHNldFRhZztcbiAgICAgICAgICAgIGNhc2Ugd2Vha01hcEN0b3JTdHJpbmc6IHJldHVybiB3ZWFrTWFwVGFnO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSB2aWV3LCBhcHBseWluZyBhbnkgYHRyYW5zZm9ybXNgIHRvIHRoZSBgc3RhcnRgIGFuZCBgZW5kYCBwb3NpdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydCBUaGUgc3RhcnQgb2YgdGhlIHZpZXcuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGVuZCBUaGUgZW5kIG9mIHRoZSB2aWV3LlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHRyYW5zZm9ybXMgVGhlIHRyYW5zZm9ybWF0aW9ucyB0byBhcHBseSB0byB0aGUgdmlldy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGFuIG9iamVjdCBjb250YWluaW5nIHRoZSBgc3RhcnRgIGFuZCBgZW5kYFxuICAgICAqICBwb3NpdGlvbnMgb2YgdGhlIHZpZXcuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0VmlldyhzdGFydCwgZW5kLCB0cmFuc2Zvcm1zKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSB0cmFuc2Zvcm1zLmxlbmd0aDtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIGRhdGEgPSB0cmFuc2Zvcm1zW2luZGV4XSxcbiAgICAgICAgICAgIHNpemUgPSBkYXRhLnNpemU7XG5cbiAgICAgICAgc3dpdGNoIChkYXRhLnR5cGUpIHtcbiAgICAgICAgICBjYXNlICdkcm9wJzogICAgICBzdGFydCArPSBzaXplOyBicmVhaztcbiAgICAgICAgICBjYXNlICdkcm9wUmlnaHQnOiBlbmQgLT0gc2l6ZTsgYnJlYWs7XG4gICAgICAgICAgY2FzZSAndGFrZSc6ICAgICAgZW5kID0gbmF0aXZlTWluKGVuZCwgc3RhcnQgKyBzaXplKTsgYnJlYWs7XG4gICAgICAgICAgY2FzZSAndGFrZVJpZ2h0Jzogc3RhcnQgPSBuYXRpdmVNYXgoc3RhcnQsIGVuZCAtIHNpemUpOyBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHsgJ3N0YXJ0Jzogc3RhcnQsICdlbmQnOiBlbmQgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFeHRyYWN0cyB3cmFwcGVyIGRldGFpbHMgZnJvbSB0aGUgYHNvdXJjZWAgYm9keSBjb21tZW50LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc291cmNlIFRoZSBzb3VyY2UgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHdyYXBwZXIgZGV0YWlscy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRXcmFwRGV0YWlscyhzb3VyY2UpIHtcbiAgICAgIHZhciBtYXRjaCA9IHNvdXJjZS5tYXRjaChyZVdyYXBEZXRhaWxzKTtcbiAgICAgIHJldHVybiBtYXRjaCA/IG1hdGNoWzFdLnNwbGl0KHJlU3BsaXREZXRhaWxzKSA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgcGF0aGAgZXhpc3RzIG9uIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggdG8gY2hlY2suXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaGFzRnVuYyBUaGUgZnVuY3Rpb24gdG8gY2hlY2sgcHJvcGVydGllcy5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHBhdGhgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGhhc1BhdGgob2JqZWN0LCBwYXRoLCBoYXNGdW5jKSB7XG4gICAgICBwYXRoID0gY2FzdFBhdGgocGF0aCwgb2JqZWN0KTtcblxuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gcGF0aC5sZW5ndGgsXG4gICAgICAgICAgcmVzdWx0ID0gZmFsc2U7XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBrZXkgPSB0b0tleShwYXRoW2luZGV4XSk7XG4gICAgICAgIGlmICghKHJlc3VsdCA9IG9iamVjdCAhPSBudWxsICYmIGhhc0Z1bmMob2JqZWN0LCBrZXkpKSkge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIG9iamVjdCA9IG9iamVjdFtrZXldO1xuICAgICAgfVxuICAgICAgaWYgKHJlc3VsdCB8fCArK2luZGV4ICE9IGxlbmd0aCkge1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgICAgbGVuZ3RoID0gb2JqZWN0ID09IG51bGwgPyAwIDogb2JqZWN0Lmxlbmd0aDtcbiAgICAgIHJldHVybiAhIWxlbmd0aCAmJiBpc0xlbmd0aChsZW5ndGgpICYmIGlzSW5kZXgoa2V5LCBsZW5ndGgpICYmXG4gICAgICAgIChpc0FycmF5KG9iamVjdCkgfHwgaXNBcmd1bWVudHMob2JqZWN0KSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZXMgYW4gYXJyYXkgY2xvbmUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGluaXRpYWxpemVkIGNsb25lLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGluaXRDbG9uZUFycmF5KGFycmF5KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICAgIHJlc3VsdCA9IG5ldyBhcnJheS5jb25zdHJ1Y3RvcihsZW5ndGgpO1xuXG4gICAgICAvLyBBZGQgcHJvcGVydGllcyBhc3NpZ25lZCBieSBgUmVnRXhwI2V4ZWNgLlxuICAgICAgaWYgKGxlbmd0aCAmJiB0eXBlb2YgYXJyYXlbMF0gPT0gJ3N0cmluZycgJiYgaGFzT3duUHJvcGVydHkuY2FsbChhcnJheSwgJ2luZGV4JykpIHtcbiAgICAgICAgcmVzdWx0LmluZGV4ID0gYXJyYXkuaW5kZXg7XG4gICAgICAgIHJlc3VsdC5pbnB1dCA9IGFycmF5LmlucHV0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplcyBhbiBvYmplY3QgY2xvbmUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBpbml0aWFsaXplZCBjbG9uZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpbml0Q2xvbmVPYmplY3Qob2JqZWN0KSB7XG4gICAgICByZXR1cm4gKHR5cGVvZiBvYmplY3QuY29uc3RydWN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNQcm90b3R5cGUob2JqZWN0KSlcbiAgICAgICAgPyBiYXNlQ3JlYXRlKGdldFByb3RvdHlwZShvYmplY3QpKVxuICAgICAgICA6IHt9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemVzIGFuIG9iamVjdCBjbG9uZSBiYXNlZCBvbiBpdHMgYHRvU3RyaW5nVGFnYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIGZ1bmN0aW9uIG9ubHkgc3VwcG9ydHMgY2xvbmluZyB2YWx1ZXMgd2l0aCB0YWdzIG9mXG4gICAgICogYEJvb2xlYW5gLCBgRGF0ZWAsIGBFcnJvcmAsIGBNYXBgLCBgTnVtYmVyYCwgYFJlZ0V4cGAsIGBTZXRgLCBvciBgU3RyaW5nYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNsb25lLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0YWcgVGhlIGB0b1N0cmluZ1RhZ2Agb2YgdGhlIG9iamVjdCB0byBjbG9uZS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpc0RlZXBdIFNwZWNpZnkgYSBkZWVwIGNsb25lLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGluaXRpYWxpemVkIGNsb25lLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGluaXRDbG9uZUJ5VGFnKG9iamVjdCwgdGFnLCBpc0RlZXApIHtcbiAgICAgIHZhciBDdG9yID0gb2JqZWN0LmNvbnN0cnVjdG9yO1xuICAgICAgc3dpdGNoICh0YWcpIHtcbiAgICAgICAgY2FzZSBhcnJheUJ1ZmZlclRhZzpcbiAgICAgICAgICByZXR1cm4gY2xvbmVBcnJheUJ1ZmZlcihvYmplY3QpO1xuXG4gICAgICAgIGNhc2UgYm9vbFRhZzpcbiAgICAgICAgY2FzZSBkYXRlVGFnOlxuICAgICAgICAgIHJldHVybiBuZXcgQ3Rvcigrb2JqZWN0KTtcblxuICAgICAgICBjYXNlIGRhdGFWaWV3VGFnOlxuICAgICAgICAgIHJldHVybiBjbG9uZURhdGFWaWV3KG9iamVjdCwgaXNEZWVwKTtcblxuICAgICAgICBjYXNlIGZsb2F0MzJUYWc6IGNhc2UgZmxvYXQ2NFRhZzpcbiAgICAgICAgY2FzZSBpbnQ4VGFnOiBjYXNlIGludDE2VGFnOiBjYXNlIGludDMyVGFnOlxuICAgICAgICBjYXNlIHVpbnQ4VGFnOiBjYXNlIHVpbnQ4Q2xhbXBlZFRhZzogY2FzZSB1aW50MTZUYWc6IGNhc2UgdWludDMyVGFnOlxuICAgICAgICAgIHJldHVybiBjbG9uZVR5cGVkQXJyYXkob2JqZWN0LCBpc0RlZXApO1xuXG4gICAgICAgIGNhc2UgbWFwVGFnOlxuICAgICAgICAgIHJldHVybiBuZXcgQ3RvcjtcblxuICAgICAgICBjYXNlIG51bWJlclRhZzpcbiAgICAgICAgY2FzZSBzdHJpbmdUYWc6XG4gICAgICAgICAgcmV0dXJuIG5ldyBDdG9yKG9iamVjdCk7XG5cbiAgICAgICAgY2FzZSByZWdleHBUYWc6XG4gICAgICAgICAgcmV0dXJuIGNsb25lUmVnRXhwKG9iamVjdCk7XG5cbiAgICAgICAgY2FzZSBzZXRUYWc6XG4gICAgICAgICAgcmV0dXJuIG5ldyBDdG9yO1xuXG4gICAgICAgIGNhc2Ugc3ltYm9sVGFnOlxuICAgICAgICAgIHJldHVybiBjbG9uZVN5bWJvbChvYmplY3QpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEluc2VydHMgd3JhcHBlciBgZGV0YWlsc2AgaW4gYSBjb21tZW50IGF0IHRoZSB0b3Agb2YgdGhlIGBzb3VyY2VgIGJvZHkuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzb3VyY2UgVGhlIHNvdXJjZSB0byBtb2RpZnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBkZXRhaWxzIFRoZSBkZXRhaWxzIHRvIGluc2VydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBtb2RpZmllZCBzb3VyY2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaW5zZXJ0V3JhcERldGFpbHMoc291cmNlLCBkZXRhaWxzKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gZGV0YWlscy5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gc291cmNlO1xuICAgICAgfVxuICAgICAgdmFyIGxhc3RJbmRleCA9IGxlbmd0aCAtIDE7XG4gICAgICBkZXRhaWxzW2xhc3RJbmRleF0gPSAobGVuZ3RoID4gMSA/ICcmICcgOiAnJykgKyBkZXRhaWxzW2xhc3RJbmRleF07XG4gICAgICBkZXRhaWxzID0gZGV0YWlscy5qb2luKGxlbmd0aCA+IDIgPyAnLCAnIDogJyAnKTtcbiAgICAgIHJldHVybiBzb3VyY2UucmVwbGFjZShyZVdyYXBDb21tZW50LCAne1xcbi8qIFt3cmFwcGVkIHdpdGggJyArIGRldGFpbHMgKyAnXSAqL1xcbicpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgZmxhdHRlbmFibGUgYGFyZ3VtZW50c2Agb2JqZWN0IG9yIGFycmF5LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBmbGF0dGVuYWJsZSwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzRmxhdHRlbmFibGUodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc0FycmF5KHZhbHVlKSB8fCBpc0FyZ3VtZW50cyh2YWx1ZSkgfHxcbiAgICAgICAgISEoc3ByZWFkYWJsZVN5bWJvbCAmJiB2YWx1ZSAmJiB2YWx1ZVtzcHJlYWRhYmxlU3ltYm9sXSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBhcnJheS1saWtlIGluZGV4LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xlbmd0aD1NQVhfU0FGRV9JTlRFR0VSXSBUaGUgdXBwZXIgYm91bmRzIG9mIGEgdmFsaWQgaW5kZXguXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBpbmRleCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzSW5kZXgodmFsdWUsIGxlbmd0aCkge1xuICAgICAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gICAgICBsZW5ndGggPSBsZW5ndGggPT0gbnVsbCA/IE1BWF9TQUZFX0lOVEVHRVIgOiBsZW5ndGg7XG5cbiAgICAgIHJldHVybiAhIWxlbmd0aCAmJlxuICAgICAgICAodHlwZSA9PSAnbnVtYmVyJyB8fFxuICAgICAgICAgICh0eXBlICE9ICdzeW1ib2wnICYmIHJlSXNVaW50LnRlc3QodmFsdWUpKSkgJiZcbiAgICAgICAgICAgICh2YWx1ZSA+IC0xICYmIHZhbHVlICUgMSA9PSAwICYmIHZhbHVlIDwgbGVuZ3RoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgdGhlIGdpdmVuIGFyZ3VtZW50cyBhcmUgZnJvbSBhbiBpdGVyYXRlZSBjYWxsLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSBwb3RlbnRpYWwgaXRlcmF0ZWUgdmFsdWUgYXJndW1lbnQuXG4gICAgICogQHBhcmFtIHsqfSBpbmRleCBUaGUgcG90ZW50aWFsIGl0ZXJhdGVlIGluZGV4IG9yIGtleSBhcmd1bWVudC5cbiAgICAgKiBAcGFyYW0geyp9IG9iamVjdCBUaGUgcG90ZW50aWFsIGl0ZXJhdGVlIG9iamVjdCBhcmd1bWVudC5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGFyZ3VtZW50cyBhcmUgZnJvbSBhbiBpdGVyYXRlZSBjYWxsLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNJdGVyYXRlZUNhbGwodmFsdWUsIGluZGV4LCBvYmplY3QpIHtcbiAgICAgIGlmICghaXNPYmplY3Qob2JqZWN0KSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgdHlwZSA9IHR5cGVvZiBpbmRleDtcbiAgICAgIGlmICh0eXBlID09ICdudW1iZXInXG4gICAgICAgICAgICA/IChpc0FycmF5TGlrZShvYmplY3QpICYmIGlzSW5kZXgoaW5kZXgsIG9iamVjdC5sZW5ndGgpKVxuICAgICAgICAgICAgOiAodHlwZSA9PSAnc3RyaW5nJyAmJiBpbmRleCBpbiBvYmplY3QpXG4gICAgICAgICAgKSB7XG4gICAgICAgIHJldHVybiBlcShvYmplY3RbaW5kZXhdLCB2YWx1ZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBwcm9wZXJ0eSBuYW1lIGFuZCBub3QgYSBwcm9wZXJ0eSBwYXRoLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIG9iamVjdCB0byBxdWVyeSBrZXlzIG9uLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcHJvcGVydHkgbmFtZSwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzS2V5KHZhbHVlLCBvYmplY3QpIHtcbiAgICAgIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgICAgIGlmICh0eXBlID09ICdudW1iZXInIHx8IHR5cGUgPT0gJ3N5bWJvbCcgfHwgdHlwZSA9PSAnYm9vbGVhbicgfHxcbiAgICAgICAgICB2YWx1ZSA9PSBudWxsIHx8IGlzU3ltYm9sKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZUlzUGxhaW5Qcm9wLnRlc3QodmFsdWUpIHx8ICFyZUlzRGVlcFByb3AudGVzdCh2YWx1ZSkgfHxcbiAgICAgICAgKG9iamVjdCAhPSBudWxsICYmIHZhbHVlIGluIE9iamVjdChvYmplY3QpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBzdWl0YWJsZSBmb3IgdXNlIGFzIHVuaXF1ZSBvYmplY3Qga2V5LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBzdWl0YWJsZSwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzS2V5YWJsZSh2YWx1ZSkge1xuICAgICAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gICAgICByZXR1cm4gKHR5cGUgPT0gJ3N0cmluZycgfHwgdHlwZSA9PSAnbnVtYmVyJyB8fCB0eXBlID09ICdzeW1ib2wnIHx8IHR5cGUgPT0gJ2Jvb2xlYW4nKVxuICAgICAgICA/ICh2YWx1ZSAhPT0gJ19fcHJvdG9fXycpXG4gICAgICAgIDogKHZhbHVlID09PSBudWxsKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYGZ1bmNgIGhhcyBhIGxhenkgY291bnRlcnBhcnQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgZnVuY2AgaGFzIGEgbGF6eSBjb3VudGVycGFydCxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzTGF6aWFibGUoZnVuYykge1xuICAgICAgdmFyIGZ1bmNOYW1lID0gZ2V0RnVuY05hbWUoZnVuYyksXG4gICAgICAgICAgb3RoZXIgPSBsb2Rhc2hbZnVuY05hbWVdO1xuXG4gICAgICBpZiAodHlwZW9mIG90aGVyICE9ICdmdW5jdGlvbicgfHwgIShmdW5jTmFtZSBpbiBMYXp5V3JhcHBlci5wcm90b3R5cGUpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmIChmdW5jID09PSBvdGhlcikge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHZhciBkYXRhID0gZ2V0RGF0YShvdGhlcik7XG4gICAgICByZXR1cm4gISFkYXRhICYmIGZ1bmMgPT09IGRhdGFbMF07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBmdW5jYCBoYXMgaXRzIHNvdXJjZSBtYXNrZWQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgZnVuY2AgaXMgbWFza2VkLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNNYXNrZWQoZnVuYykge1xuICAgICAgcmV0dXJuICEhbWFza1NyY0tleSAmJiAobWFza1NyY0tleSBpbiBmdW5jKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYGZ1bmNgIGlzIGNhcGFibGUgb2YgYmVpbmcgbWFza2VkLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYGZ1bmNgIGlzIG1hc2thYmxlLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgdmFyIGlzTWFza2FibGUgPSBjb3JlSnNEYXRhID8gaXNGdW5jdGlvbiA6IHN0dWJGYWxzZTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGxpa2VseSBhIHByb3RvdHlwZSBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcHJvdG90eXBlLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNQcm90b3R5cGUodmFsdWUpIHtcbiAgICAgIHZhciBDdG9yID0gdmFsdWUgJiYgdmFsdWUuY29uc3RydWN0b3IsXG4gICAgICAgICAgcHJvdG8gPSAodHlwZW9mIEN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBDdG9yLnByb3RvdHlwZSkgfHwgb2JqZWN0UHJvdG87XG5cbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gcHJvdG87XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgc3VpdGFibGUgZm9yIHN0cmljdCBlcXVhbGl0eSBjb21wYXJpc29ucywgaS5lLiBgPT09YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaWYgc3VpdGFibGUgZm9yIHN0cmljdFxuICAgICAqICBlcXVhbGl0eSBjb21wYXJpc29ucywgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzU3RyaWN0Q29tcGFyYWJsZSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlID09PSB2YWx1ZSAmJiAhaXNPYmplY3QodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgbWF0Y2hlc1Byb3BlcnR5YCBmb3Igc291cmNlIHZhbHVlcyBzdWl0YWJsZVxuICAgICAqIGZvciBzdHJpY3QgZXF1YWxpdHkgY29tcGFyaXNvbnMsIGkuZS4gYD09PWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gc3JjVmFsdWUgVGhlIHZhbHVlIHRvIG1hdGNoLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNwZWMgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWF0Y2hlc1N0cmljdENvbXBhcmFibGUoa2V5LCBzcmNWYWx1ZSkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgICBpZiAob2JqZWN0ID09IG51bGwpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9iamVjdFtrZXldID09PSBzcmNWYWx1ZSAmJlxuICAgICAgICAgIChzcmNWYWx1ZSAhPT0gdW5kZWZpbmVkIHx8IChrZXkgaW4gT2JqZWN0KG9iamVjdCkpKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLm1lbW9pemVgIHdoaWNoIGNsZWFycyB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24nc1xuICAgICAqIGNhY2hlIHdoZW4gaXQgZXhjZWVkcyBgTUFYX01FTU9JWkVfU0laRWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGhhdmUgaXRzIG91dHB1dCBtZW1vaXplZC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBtZW1vaXplZCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtZW1vaXplQ2FwcGVkKGZ1bmMpIHtcbiAgICAgIHZhciByZXN1bHQgPSBtZW1vaXplKGZ1bmMsIGZ1bmN0aW9uKGtleSkge1xuICAgICAgICBpZiAoY2FjaGUuc2l6ZSA9PT0gTUFYX01FTU9JWkVfU0laRSkge1xuICAgICAgICAgIGNhY2hlLmNsZWFyKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGtleTtcbiAgICAgIH0pO1xuXG4gICAgICB2YXIgY2FjaGUgPSByZXN1bHQuY2FjaGU7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE1lcmdlcyB0aGUgZnVuY3Rpb24gbWV0YWRhdGEgb2YgYHNvdXJjZWAgaW50byBgZGF0YWAuXG4gICAgICpcbiAgICAgKiBNZXJnaW5nIG1ldGFkYXRhIHJlZHVjZXMgdGhlIG51bWJlciBvZiB3cmFwcGVycyB1c2VkIHRvIGludm9rZSBhIGZ1bmN0aW9uLlxuICAgICAqIFRoaXMgaXMgcG9zc2libGUgYmVjYXVzZSBtZXRob2RzIGxpa2UgYF8uYmluZGAsIGBfLmN1cnJ5YCwgYW5kIGBfLnBhcnRpYWxgXG4gICAgICogbWF5IGJlIGFwcGxpZWQgcmVnYXJkbGVzcyBvZiBleGVjdXRpb24gb3JkZXIuIE1ldGhvZHMgbGlrZSBgXy5hcnlgIGFuZFxuICAgICAqIGBfLnJlYXJnYCBtb2RpZnkgZnVuY3Rpb24gYXJndW1lbnRzLCBtYWtpbmcgdGhlIG9yZGVyIGluIHdoaWNoIHRoZXkgYXJlXG4gICAgICogZXhlY3V0ZWQgaW1wb3J0YW50LCBwcmV2ZW50aW5nIHRoZSBtZXJnaW5nIG9mIG1ldGFkYXRhLiBIb3dldmVyLCB3ZSBtYWtlXG4gICAgICogYW4gZXhjZXB0aW9uIGZvciBhIHNhZmUgY29tYmluZWQgY2FzZSB3aGVyZSBjdXJyaWVkIGZ1bmN0aW9ucyBoYXZlIGBfLmFyeWBcbiAgICAgKiBhbmQgb3IgYF8ucmVhcmdgIGFwcGxpZWQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGRhdGEgVGhlIGRlc3RpbmF0aW9uIG1ldGFkYXRhLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHNvdXJjZSBUaGUgc291cmNlIG1ldGFkYXRhLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgZGF0YWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWVyZ2VEYXRhKGRhdGEsIHNvdXJjZSkge1xuICAgICAgdmFyIGJpdG1hc2sgPSBkYXRhWzFdLFxuICAgICAgICAgIHNyY0JpdG1hc2sgPSBzb3VyY2VbMV0sXG4gICAgICAgICAgbmV3Qml0bWFzayA9IGJpdG1hc2sgfCBzcmNCaXRtYXNrLFxuICAgICAgICAgIGlzQ29tbW9uID0gbmV3Qml0bWFzayA8IChXUkFQX0JJTkRfRkxBRyB8IFdSQVBfQklORF9LRVlfRkxBRyB8IFdSQVBfQVJZX0ZMQUcpO1xuXG4gICAgICB2YXIgaXNDb21ibyA9XG4gICAgICAgICgoc3JjQml0bWFzayA9PSBXUkFQX0FSWV9GTEFHKSAmJiAoYml0bWFzayA9PSBXUkFQX0NVUlJZX0ZMQUcpKSB8fFxuICAgICAgICAoKHNyY0JpdG1hc2sgPT0gV1JBUF9BUllfRkxBRykgJiYgKGJpdG1hc2sgPT0gV1JBUF9SRUFSR19GTEFHKSAmJiAoZGF0YVs3XS5sZW5ndGggPD0gc291cmNlWzhdKSkgfHxcbiAgICAgICAgKChzcmNCaXRtYXNrID09IChXUkFQX0FSWV9GTEFHIHwgV1JBUF9SRUFSR19GTEFHKSkgJiYgKHNvdXJjZVs3XS5sZW5ndGggPD0gc291cmNlWzhdKSAmJiAoYml0bWFzayA9PSBXUkFQX0NVUlJZX0ZMQUcpKTtcblxuICAgICAgLy8gRXhpdCBlYXJseSBpZiBtZXRhZGF0YSBjYW4ndCBiZSBtZXJnZWQuXG4gICAgICBpZiAoIShpc0NvbW1vbiB8fCBpc0NvbWJvKSkge1xuICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgIH1cbiAgICAgIC8vIFVzZSBzb3VyY2UgYHRoaXNBcmdgIGlmIGF2YWlsYWJsZS5cbiAgICAgIGlmIChzcmNCaXRtYXNrICYgV1JBUF9CSU5EX0ZMQUcpIHtcbiAgICAgICAgZGF0YVsyXSA9IHNvdXJjZVsyXTtcbiAgICAgICAgLy8gU2V0IHdoZW4gY3VycnlpbmcgYSBib3VuZCBmdW5jdGlvbi5cbiAgICAgICAgbmV3Qml0bWFzayB8PSBiaXRtYXNrICYgV1JBUF9CSU5EX0ZMQUcgPyAwIDogV1JBUF9DVVJSWV9CT1VORF9GTEFHO1xuICAgICAgfVxuICAgICAgLy8gQ29tcG9zZSBwYXJ0aWFsIGFyZ3VtZW50cy5cbiAgICAgIHZhciB2YWx1ZSA9IHNvdXJjZVszXTtcbiAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICB2YXIgcGFydGlhbHMgPSBkYXRhWzNdO1xuICAgICAgICBkYXRhWzNdID0gcGFydGlhbHMgPyBjb21wb3NlQXJncyhwYXJ0aWFscywgdmFsdWUsIHNvdXJjZVs0XSkgOiB2YWx1ZTtcbiAgICAgICAgZGF0YVs0XSA9IHBhcnRpYWxzID8gcmVwbGFjZUhvbGRlcnMoZGF0YVszXSwgUExBQ0VIT0xERVIpIDogc291cmNlWzRdO1xuICAgICAgfVxuICAgICAgLy8gQ29tcG9zZSBwYXJ0aWFsIHJpZ2h0IGFyZ3VtZW50cy5cbiAgICAgIHZhbHVlID0gc291cmNlWzVdO1xuICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIHBhcnRpYWxzID0gZGF0YVs1XTtcbiAgICAgICAgZGF0YVs1XSA9IHBhcnRpYWxzID8gY29tcG9zZUFyZ3NSaWdodChwYXJ0aWFscywgdmFsdWUsIHNvdXJjZVs2XSkgOiB2YWx1ZTtcbiAgICAgICAgZGF0YVs2XSA9IHBhcnRpYWxzID8gcmVwbGFjZUhvbGRlcnMoZGF0YVs1XSwgUExBQ0VIT0xERVIpIDogc291cmNlWzZdO1xuICAgICAgfVxuICAgICAgLy8gVXNlIHNvdXJjZSBgYXJnUG9zYCBpZiBhdmFpbGFibGUuXG4gICAgICB2YWx1ZSA9IHNvdXJjZVs3XTtcbiAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICBkYXRhWzddID0gdmFsdWU7XG4gICAgICB9XG4gICAgICAvLyBVc2Ugc291cmNlIGBhcnlgIGlmIGl0J3Mgc21hbGxlci5cbiAgICAgIGlmIChzcmNCaXRtYXNrICYgV1JBUF9BUllfRkxBRykge1xuICAgICAgICBkYXRhWzhdID0gZGF0YVs4XSA9PSBudWxsID8gc291cmNlWzhdIDogbmF0aXZlTWluKGRhdGFbOF0sIHNvdXJjZVs4XSk7XG4gICAgICB9XG4gICAgICAvLyBVc2Ugc291cmNlIGBhcml0eWAgaWYgb25lIGlzIG5vdCBwcm92aWRlZC5cbiAgICAgIGlmIChkYXRhWzldID09IG51bGwpIHtcbiAgICAgICAgZGF0YVs5XSA9IHNvdXJjZVs5XTtcbiAgICAgIH1cbiAgICAgIC8vIFVzZSBzb3VyY2UgYGZ1bmNgIGFuZCBtZXJnZSBiaXRtYXNrcy5cbiAgICAgIGRhdGFbMF0gPSBzb3VyY2VbMF07XG4gICAgICBkYXRhWzFdID0gbmV3Qml0bWFzaztcblxuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBmdW5jdGlvbiBpcyBsaWtlXG4gICAgICogW2BPYmplY3Qua2V5c2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5rZXlzKVxuICAgICAqIGV4Y2VwdCB0aGF0IGl0IGluY2x1ZGVzIGluaGVyaXRlZCBlbnVtZXJhYmxlIHByb3BlcnRpZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG5hdGl2ZUtleXNJbihvYmplY3QpIHtcbiAgICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICAgIGlmIChvYmplY3QgIT0gbnVsbCkge1xuICAgICAgICBmb3IgKHZhciBrZXkgaW4gT2JqZWN0KG9iamVjdCkpIHtcbiAgICAgICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBzdHJpbmcgdXNpbmcgYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBzdHJpbmcuXG4gICAgICovXG4gICAgZnVuY3Rpb24gb2JqZWN0VG9TdHJpbmcodmFsdWUpIHtcbiAgICAgIHJldHVybiBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VSZXN0YCB3aGljaCB0cmFuc2Zvcm1zIHRoZSByZXN0IGFycmF5LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBhcHBseSBhIHJlc3QgcGFyYW1ldGVyIHRvLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9ZnVuYy5sZW5ndGgtMV0gVGhlIHN0YXJ0IHBvc2l0aW9uIG9mIHRoZSByZXN0IHBhcmFtZXRlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSB0cmFuc2Zvcm0gVGhlIHJlc3QgYXJyYXkgdHJhbnNmb3JtLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG92ZXJSZXN0KGZ1bmMsIHN0YXJ0LCB0cmFuc2Zvcm0pIHtcbiAgICAgIHN0YXJ0ID0gbmF0aXZlTWF4KHN0YXJ0ID09PSB1bmRlZmluZWQgPyAoZnVuYy5sZW5ndGggLSAxKSA6IHN0YXJ0LCAwKTtcbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHMsXG4gICAgICAgICAgICBpbmRleCA9IC0xLFxuICAgICAgICAgICAgbGVuZ3RoID0gbmF0aXZlTWF4KGFyZ3MubGVuZ3RoIC0gc3RhcnQsIDApLFxuICAgICAgICAgICAgYXJyYXkgPSBBcnJheShsZW5ndGgpO1xuXG4gICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgYXJyYXlbaW5kZXhdID0gYXJnc1tzdGFydCArIGluZGV4XTtcbiAgICAgICAgfVxuICAgICAgICBpbmRleCA9IC0xO1xuICAgICAgICB2YXIgb3RoZXJBcmdzID0gQXJyYXkoc3RhcnQgKyAxKTtcbiAgICAgICAgd2hpbGUgKCsraW5kZXggPCBzdGFydCkge1xuICAgICAgICAgIG90aGVyQXJnc1tpbmRleF0gPSBhcmdzW2luZGV4XTtcbiAgICAgICAgfVxuICAgICAgICBvdGhlckFyZ3Nbc3RhcnRdID0gdHJhbnNmb3JtKGFycmF5KTtcbiAgICAgICAgcmV0dXJuIGFwcGx5KGZ1bmMsIHRoaXMsIG90aGVyQXJncyk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHBhcmVudCB2YWx1ZSBhdCBgcGF0aGAgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBwYXRoIFRoZSBwYXRoIHRvIGdldCB0aGUgcGFyZW50IHZhbHVlIG9mLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBwYXJlbnQgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gcGFyZW50KG9iamVjdCwgcGF0aCkge1xuICAgICAgcmV0dXJuIHBhdGgubGVuZ3RoIDwgMiA/IG9iamVjdCA6IGJhc2VHZXQob2JqZWN0LCBiYXNlU2xpY2UocGF0aCwgMCwgLTEpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW9yZGVyIGBhcnJheWAgYWNjb3JkaW5nIHRvIHRoZSBzcGVjaWZpZWQgaW5kZXhlcyB3aGVyZSB0aGUgZWxlbWVudCBhdFxuICAgICAqIHRoZSBmaXJzdCBpbmRleCBpcyBhc3NpZ25lZCBhcyB0aGUgZmlyc3QgZWxlbWVudCwgdGhlIGVsZW1lbnQgYXRcbiAgICAgKiB0aGUgc2Vjb25kIGluZGV4IGlzIGFzc2lnbmVkIGFzIHRoZSBzZWNvbmQgZWxlbWVudCwgYW5kIHNvIG9uLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcmVvcmRlci5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBpbmRleGVzIFRoZSBhcnJhbmdlZCBhcnJheSBpbmRleGVzLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlb3JkZXIoYXJyYXksIGluZGV4ZXMpIHtcbiAgICAgIHZhciBhcnJMZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICAgICAgbGVuZ3RoID0gbmF0aXZlTWluKGluZGV4ZXMubGVuZ3RoLCBhcnJMZW5ndGgpLFxuICAgICAgICAgIG9sZEFycmF5ID0gY29weUFycmF5KGFycmF5KTtcblxuICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgIHZhciBpbmRleCA9IGluZGV4ZXNbbGVuZ3RoXTtcbiAgICAgICAgYXJyYXlbbGVuZ3RoXSA9IGlzSW5kZXgoaW5kZXgsIGFyckxlbmd0aCkgPyBvbGRBcnJheVtpbmRleF0gOiB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gYXJyYXk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgdmFsdWUgYXQgYGtleWAsIHVubGVzcyBga2V5YCBpcyBcIl9fcHJvdG9fX1wiIG9yIFwiY29uc3RydWN0b3JcIi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBwcm9wZXJ0eSB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzYWZlR2V0KG9iamVjdCwga2V5KSB7XG4gICAgICBpZiAoa2V5ID09PSAnY29uc3RydWN0b3InICYmIHR5cGVvZiBvYmplY3Rba2V5XSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChrZXkgPT0gJ19fcHJvdG9fXycpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gb2JqZWN0W2tleV07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyBtZXRhZGF0YSBmb3IgYGZ1bmNgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIElmIHRoaXMgZnVuY3Rpb24gYmVjb21lcyBob3QsIGkuZS4gaXMgaW52b2tlZCBhIGxvdCBpbiBhIHNob3J0XG4gICAgICogcGVyaW9kIG9mIHRpbWUsIGl0IHdpbGwgdHJpcCBpdHMgYnJlYWtlciBhbmQgdHJhbnNpdGlvbiB0byBhbiBpZGVudGl0eVxuICAgICAqIGZ1bmN0aW9uIHRvIGF2b2lkIGdhcmJhZ2UgY29sbGVjdGlvbiBwYXVzZXMgaW4gVjguIFNlZVxuICAgICAqIFtWOCBpc3N1ZSAyMDcwXShodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0yMDcwKVxuICAgICAqIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGFzc29jaWF0ZSBtZXRhZGF0YSB3aXRoLlxuICAgICAqIEBwYXJhbSB7Kn0gZGF0YSBUaGUgbWV0YWRhdGEuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGBmdW5jYC5cbiAgICAgKi9cbiAgICB2YXIgc2V0RGF0YSA9IHNob3J0T3V0KGJhc2VTZXREYXRhKTtcblxuICAgIC8qKlxuICAgICAqIEEgc2ltcGxlIHdyYXBwZXIgYXJvdW5kIHRoZSBnbG9iYWwgW2BzZXRUaW1lb3V0YF0oaHR0cHM6Ly9tZG4uaW8vc2V0VGltZW91dCkuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRlbGF5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB3YWl0IFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIGRlbGF5IGludm9jYXRpb24uXG4gICAgICogQHJldHVybnMge251bWJlcnxPYmplY3R9IFJldHVybnMgdGhlIHRpbWVyIGlkIG9yIHRpbWVvdXQgb2JqZWN0LlxuICAgICAqL1xuICAgIHZhciBzZXRUaW1lb3V0ID0gY3R4U2V0VGltZW91dCB8fCBmdW5jdGlvbihmdW5jLCB3YWl0KSB7XG4gICAgICByZXR1cm4gcm9vdC5zZXRUaW1lb3V0KGZ1bmMsIHdhaXQpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBgdG9TdHJpbmdgIG1ldGhvZCBvZiBgZnVuY2AgdG8gcmV0dXJuIGBzdHJpbmdgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gc3RyaW5nIFRoZSBgdG9TdHJpbmdgIHJlc3VsdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYGZ1bmNgLlxuICAgICAqL1xuICAgIHZhciBzZXRUb1N0cmluZyA9IHNob3J0T3V0KGJhc2VTZXRUb1N0cmluZyk7XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBgdG9TdHJpbmdgIG1ldGhvZCBvZiBgd3JhcHBlcmAgdG8gbWltaWMgdGhlIHNvdXJjZSBvZiBgcmVmZXJlbmNlYFxuICAgICAqIHdpdGggd3JhcHBlciBkZXRhaWxzIGluIGEgY29tbWVudCBhdCB0aGUgdG9wIG9mIHRoZSBzb3VyY2UgYm9keS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gd3JhcHBlciBUaGUgZnVuY3Rpb24gdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHJlZmVyZW5jZSBUaGUgcmVmZXJlbmNlIGZ1bmN0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGNyZWF0ZVdyYXBgIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGB3cmFwcGVyYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzZXRXcmFwVG9TdHJpbmcod3JhcHBlciwgcmVmZXJlbmNlLCBiaXRtYXNrKSB7XG4gICAgICB2YXIgc291cmNlID0gKHJlZmVyZW5jZSArICcnKTtcbiAgICAgIHJldHVybiBzZXRUb1N0cmluZyh3cmFwcGVyLCBpbnNlcnRXcmFwRGV0YWlscyhzb3VyY2UsIHVwZGF0ZVdyYXBEZXRhaWxzKGdldFdyYXBEZXRhaWxzKHNvdXJjZSksIGJpdG1hc2spKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQnbGwgc2hvcnQgb3V0IGFuZCBpbnZva2UgYGlkZW50aXR5YCBpbnN0ZWFkXG4gICAgICogb2YgYGZ1bmNgIHdoZW4gaXQncyBjYWxsZWQgYEhPVF9DT1VOVGAgb3IgbW9yZSB0aW1lcyBpbiBgSE9UX1NQQU5gXG4gICAgICogbWlsbGlzZWNvbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byByZXN0cmljdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzaG9ydGFibGUgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2hvcnRPdXQoZnVuYykge1xuICAgICAgdmFyIGNvdW50ID0gMCxcbiAgICAgICAgICBsYXN0Q2FsbGVkID0gMDtcblxuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgc3RhbXAgPSBuYXRpdmVOb3coKSxcbiAgICAgICAgICAgIHJlbWFpbmluZyA9IEhPVF9TUEFOIC0gKHN0YW1wIC0gbGFzdENhbGxlZCk7XG5cbiAgICAgICAgbGFzdENhbGxlZCA9IHN0YW1wO1xuICAgICAgICBpZiAocmVtYWluaW5nID4gMCkge1xuICAgICAgICAgIGlmICgrK2NvdW50ID49IEhPVF9DT1VOVCkge1xuICAgICAgICAgICAgcmV0dXJuIGFyZ3VtZW50c1swXTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY291bnQgPSAwO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmdW5jLmFwcGx5KHVuZGVmaW5lZCwgYXJndW1lbnRzKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLnNodWZmbGVgIHdoaWNoIG11dGF0ZXMgYW5kIHNldHMgdGhlIHNpemUgb2YgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHNodWZmbGUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzaXplPWFycmF5Lmxlbmd0aF0gVGhlIHNpemUgb2YgYGFycmF5YC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzaHVmZmxlU2VsZihhcnJheSwgc2l6ZSkge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICAgIGxhc3RJbmRleCA9IGxlbmd0aCAtIDE7XG5cbiAgICAgIHNpemUgPSBzaXplID09PSB1bmRlZmluZWQgPyBsZW5ndGggOiBzaXplO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBzaXplKSB7XG4gICAgICAgIHZhciByYW5kID0gYmFzZVJhbmRvbShpbmRleCwgbGFzdEluZGV4KSxcbiAgICAgICAgICAgIHZhbHVlID0gYXJyYXlbcmFuZF07XG5cbiAgICAgICAgYXJyYXlbcmFuZF0gPSBhcnJheVtpbmRleF07XG4gICAgICAgIGFycmF5W2luZGV4XSA9IHZhbHVlO1xuICAgICAgfVxuICAgICAgYXJyYXkubGVuZ3RoID0gc2l6ZTtcbiAgICAgIHJldHVybiBhcnJheTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgc3RyaW5nYCB0byBhIHByb3BlcnR5IHBhdGggYXJyYXkuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcHJvcGVydHkgcGF0aCBhcnJheS5cbiAgICAgKi9cbiAgICB2YXIgc3RyaW5nVG9QYXRoID0gbWVtb2l6ZUNhcHBlZChmdW5jdGlvbihzdHJpbmcpIHtcbiAgICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICAgIGlmIChzdHJpbmcuY2hhckNvZGVBdCgwKSA9PT0gNDYgLyogLiAqLykge1xuICAgICAgICByZXN1bHQucHVzaCgnJyk7XG4gICAgICB9XG4gICAgICBzdHJpbmcucmVwbGFjZShyZVByb3BOYW1lLCBmdW5jdGlvbihtYXRjaCwgbnVtYmVyLCBxdW90ZSwgc3ViU3RyaW5nKSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKHF1b3RlID8gc3ViU3RyaW5nLnJlcGxhY2UocmVFc2NhcGVDaGFyLCAnJDEnKSA6IChudW1iZXIgfHwgbWF0Y2gpKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBzdHJpbmcga2V5IGlmIGl0J3Mgbm90IGEgc3RyaW5nIG9yIHN5bWJvbC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfHN5bWJvbH0gUmV0dXJucyB0aGUga2V5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvS2V5KHZhbHVlKSB7XG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09ICdzdHJpbmcnIHx8IGlzU3ltYm9sKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0ID0gKHZhbHVlICsgJycpO1xuICAgICAgcmV0dXJuIChyZXN1bHQgPT0gJzAnICYmICgxIC8gdmFsdWUpID09IC1JTkZJTklUWSkgPyAnLTAnIDogcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBmdW5jYCB0byBpdHMgc291cmNlIGNvZGUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgc291cmNlIGNvZGUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9Tb3VyY2UoZnVuYykge1xuICAgICAgaWYgKGZ1bmMgIT0gbnVsbCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHJldHVybiBmdW5jVG9TdHJpbmcuY2FsbChmdW5jKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICByZXR1cm4gKGZ1bmMgKyAnJyk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICB9XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXBkYXRlcyB3cmFwcGVyIGBkZXRhaWxzYCBiYXNlZCBvbiBgYml0bWFza2AgZmxhZ3MuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gZGV0YWlscyBUaGUgZGV0YWlscyB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgY3JlYXRlV3JhcGAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGRldGFpbHNgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVwZGF0ZVdyYXBEZXRhaWxzKGRldGFpbHMsIGJpdG1hc2spIHtcbiAgICAgIGFycmF5RWFjaCh3cmFwRmxhZ3MsIGZ1bmN0aW9uKHBhaXIpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gJ18uJyArIHBhaXJbMF07XG4gICAgICAgIGlmICgoYml0bWFzayAmIHBhaXJbMV0pICYmICFhcnJheUluY2x1ZGVzKGRldGFpbHMsIHZhbHVlKSkge1xuICAgICAgICAgIGRldGFpbHMucHVzaCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGRldGFpbHMuc29ydCgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjbG9uZSBvZiBgd3JhcHBlcmAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSB3cmFwcGVyIFRoZSB3cmFwcGVyIHRvIGNsb25lLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNsb25lZCB3cmFwcGVyLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdyYXBwZXJDbG9uZSh3cmFwcGVyKSB7XG4gICAgICBpZiAod3JhcHBlciBpbnN0YW5jZW9mIExhenlXcmFwcGVyKSB7XG4gICAgICAgIHJldHVybiB3cmFwcGVyLmNsb25lKCk7XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0ID0gbmV3IExvZGFzaFdyYXBwZXIod3JhcHBlci5fX3dyYXBwZWRfXywgd3JhcHBlci5fX2NoYWluX18pO1xuICAgICAgcmVzdWx0Ll9fYWN0aW9uc19fID0gY29weUFycmF5KHdyYXBwZXIuX19hY3Rpb25zX18pO1xuICAgICAgcmVzdWx0Ll9faW5kZXhfXyAgPSB3cmFwcGVyLl9faW5kZXhfXztcbiAgICAgIHJlc3VsdC5fX3ZhbHVlc19fID0gd3JhcHBlci5fX3ZhbHVlc19fO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIGVsZW1lbnRzIHNwbGl0IGludG8gZ3JvdXBzIHRoZSBsZW5ndGggb2YgYHNpemVgLlxuICAgICAqIElmIGBhcnJheWAgY2FuJ3QgYmUgc3BsaXQgZXZlbmx5LCB0aGUgZmluYWwgY2h1bmsgd2lsbCBiZSB0aGUgcmVtYWluaW5nXG4gICAgICogZWxlbWVudHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcHJvY2Vzcy5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3NpemU9MV0gVGhlIGxlbmd0aCBvZiBlYWNoIGNodW5rXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBjaHVua3MuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uY2h1bmsoWydhJywgJ2InLCAnYycsICdkJ10sIDIpO1xuICAgICAqIC8vID0+IFtbJ2EnLCAnYiddLCBbJ2MnLCAnZCddXVxuICAgICAqXG4gICAgICogXy5jaHVuayhbJ2EnLCAnYicsICdjJywgJ2QnXSwgMyk7XG4gICAgICogLy8gPT4gW1snYScsICdiJywgJ2MnXSwgWydkJ11dXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2h1bmsoYXJyYXksIHNpemUsIGd1YXJkKSB7XG4gICAgICBpZiAoKGd1YXJkID8gaXNJdGVyYXRlZUNhbGwoYXJyYXksIHNpemUsIGd1YXJkKSA6IHNpemUgPT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgc2l6ZSA9IDE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzaXplID0gbmF0aXZlTWF4KHRvSW50ZWdlcihzaXplKSwgMCk7XG4gICAgICB9XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCB8fCBzaXplIDwgMSkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSAwLFxuICAgICAgICAgIHJlc0luZGV4ID0gMCxcbiAgICAgICAgICByZXN1bHQgPSBBcnJheShuYXRpdmVDZWlsKGxlbmd0aCAvIHNpemUpKTtcblxuICAgICAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHJlc3VsdFtyZXNJbmRleCsrXSA9IGJhc2VTbGljZShhcnJheSwgaW5kZXgsIChpbmRleCArPSBzaXplKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgd2l0aCBhbGwgZmFsc2V5IHZhbHVlcyByZW1vdmVkLiBUaGUgdmFsdWVzIGBmYWxzZWAsIGBudWxsYCxcbiAgICAgKiBgMGAsIGBcIlwiYCwgYHVuZGVmaW5lZGAsIGFuZCBgTmFOYCBhcmUgZmFsc2V5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGNvbXBhY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZmlsdGVyZWQgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmNvbXBhY3QoWzAsIDEsIGZhbHNlLCAyLCAnJywgM10pO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbXBhY3QoYXJyYXkpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoLFxuICAgICAgICAgIHJlc0luZGV4ID0gMCxcbiAgICAgICAgICByZXN1bHQgPSBbXTtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICByZXN1bHRbcmVzSW5kZXgrK10gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IGFycmF5IGNvbmNhdGVuYXRpbmcgYGFycmF5YCB3aXRoIGFueSBhZGRpdGlvbmFsIGFycmF5c1xuICAgICAqIGFuZC9vciB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gY29uY2F0ZW5hdGUuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbdmFsdWVzXSBUaGUgdmFsdWVzIHRvIGNvbmNhdGVuYXRlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGNvbmNhdGVuYXRlZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWzFdO1xuICAgICAqIHZhciBvdGhlciA9IF8uY29uY2F0KGFycmF5LCAyLCBbM10sIFtbNF1dKTtcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKG90aGVyKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgMywgWzRdXVxuICAgICAqXG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFsxXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbmNhdCgpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgdmFyIGFyZ3MgPSBBcnJheShsZW5ndGggLSAxKSxcbiAgICAgICAgICBhcnJheSA9IGFyZ3VtZW50c1swXSxcbiAgICAgICAgICBpbmRleCA9IGxlbmd0aDtcblxuICAgICAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICAgICAgYXJnc1tpbmRleCAtIDFdID0gYXJndW1lbnRzW2luZGV4XTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhcnJheVB1c2goaXNBcnJheShhcnJheSkgPyBjb3B5QXJyYXkoYXJyYXkpIDogW2FycmF5XSwgYmFzZUZsYXR0ZW4oYXJncywgMSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgYGFycmF5YCB2YWx1ZXMgbm90IGluY2x1ZGVkIGluIHRoZSBvdGhlciBnaXZlbiBhcnJheXNcbiAgICAgKiB1c2luZyBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICAgICAqIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucy4gVGhlIG9yZGVyIGFuZCByZWZlcmVuY2VzIG9mIHJlc3VsdCB2YWx1ZXMgYXJlXG4gICAgICogZGV0ZXJtaW5lZCBieSB0aGUgZmlyc3QgYXJyYXkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLnB1bGxBbGxgLCB0aGlzIG1ldGhvZCByZXR1cm5zIGEgbmV3IGFycmF5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW3ZhbHVlc10gVGhlIHZhbHVlcyB0byBleGNsdWRlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGZpbHRlcmVkIHZhbHVlcy5cbiAgICAgKiBAc2VlIF8ud2l0aG91dCwgXy54b3JcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kaWZmZXJlbmNlKFsyLCAxXSwgWzIsIDNdKTtcbiAgICAgKiAvLyA9PiBbMV1cbiAgICAgKi9cbiAgICB2YXIgZGlmZmVyZW5jZSA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5LCB2YWx1ZXMpIHtcbiAgICAgIHJldHVybiBpc0FycmF5TGlrZU9iamVjdChhcnJheSlcbiAgICAgICAgPyBiYXNlRGlmZmVyZW5jZShhcnJheSwgYmFzZUZsYXR0ZW4odmFsdWVzLCAxLCBpc0FycmF5TGlrZU9iamVjdCwgdHJ1ZSkpXG4gICAgICAgIDogW107XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmRpZmZlcmVuY2VgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB3aGljaFxuICAgICAqIGlzIGludm9rZWQgZm9yIGVhY2ggZWxlbWVudCBvZiBgYXJyYXlgIGFuZCBgdmFsdWVzYCB0byBnZW5lcmF0ZSB0aGUgY3JpdGVyaW9uXG4gICAgICogYnkgd2hpY2ggdGhleSdyZSBjb21wYXJlZC4gVGhlIG9yZGVyIGFuZCByZWZlcmVuY2VzIG9mIHJlc3VsdCB2YWx1ZXMgYXJlXG4gICAgICogZGV0ZXJtaW5lZCBieSB0aGUgZmlyc3QgYXJyYXkuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OlxuICAgICAqICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLnB1bGxBbGxCeWAsIHRoaXMgbWV0aG9kIHJldHVybnMgYSBuZXcgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbdmFsdWVzXSBUaGUgdmFsdWVzIHRvIGV4Y2x1ZGUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGZpbHRlcmVkIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kaWZmZXJlbmNlQnkoWzIuMSwgMS4yXSwgWzIuMywgMy40XSwgTWF0aC5mbG9vcik7XG4gICAgICogLy8gPT4gWzEuMl1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZGlmZmVyZW5jZUJ5KFt7ICd4JzogMiB9LCB7ICd4JzogMSB9XSwgW3sgJ3gnOiAxIH1dLCAneCcpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMiB9XVxuICAgICAqL1xuICAgIHZhciBkaWZmZXJlbmNlQnkgPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheSwgdmFsdWVzKSB7XG4gICAgICB2YXIgaXRlcmF0ZWUgPSBsYXN0KHZhbHVlcyk7XG4gICAgICBpZiAoaXNBcnJheUxpa2VPYmplY3QoaXRlcmF0ZWUpKSB7XG4gICAgICAgIGl0ZXJhdGVlID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGlzQXJyYXlMaWtlT2JqZWN0KGFycmF5KVxuICAgICAgICA/IGJhc2VEaWZmZXJlbmNlKGFycmF5LCBiYXNlRmxhdHRlbih2YWx1ZXMsIDEsIGlzQXJyYXlMaWtlT2JqZWN0LCB0cnVlKSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpKVxuICAgICAgICA6IFtdO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5kaWZmZXJlbmNlYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjb21wYXJhdG9yYFxuICAgICAqIHdoaWNoIGlzIGludm9rZWQgdG8gY29tcGFyZSBlbGVtZW50cyBvZiBgYXJyYXlgIHRvIGB2YWx1ZXNgLiBUaGUgb3JkZXIgYW5kXG4gICAgICogcmVmZXJlbmNlcyBvZiByZXN1bHQgdmFsdWVzIGFyZSBkZXRlcm1pbmVkIGJ5IHRoZSBmaXJzdCBhcnJheS4gVGhlIGNvbXBhcmF0b3JcbiAgICAgKiBpcyBpbnZva2VkIHdpdGggdHdvIGFyZ3VtZW50czogKGFyclZhbCwgb3RoVmFsKS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgYF8ucHVsbEFsbFdpdGhgLCB0aGlzIG1ldGhvZCByZXR1cm5zIGEgbmV3IGFycmF5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW3ZhbHVlc10gVGhlIHZhbHVlcyB0byBleGNsdWRlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGZpbHRlcmVkIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAneCc6IDEsICd5JzogMiB9LCB7ICd4JzogMiwgJ3knOiAxIH1dO1xuICAgICAqXG4gICAgICogXy5kaWZmZXJlbmNlV2l0aChvYmplY3RzLCBbeyAneCc6IDEsICd5JzogMiB9XSwgXy5pc0VxdWFsKTtcbiAgICAgKiAvLyA9PiBbeyAneCc6IDIsICd5JzogMSB9XVxuICAgICAqL1xuICAgIHZhciBkaWZmZXJlbmNlV2l0aCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5LCB2YWx1ZXMpIHtcbiAgICAgIHZhciBjb21wYXJhdG9yID0gbGFzdCh2YWx1ZXMpO1xuICAgICAgaWYgKGlzQXJyYXlMaWtlT2JqZWN0KGNvbXBhcmF0b3IpKSB7XG4gICAgICAgIGNvbXBhcmF0b3IgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gaXNBcnJheUxpa2VPYmplY3QoYXJyYXkpXG4gICAgICAgID8gYmFzZURpZmZlcmVuY2UoYXJyYXksIGJhc2VGbGF0dGVuKHZhbHVlcywgMSwgaXNBcnJheUxpa2VPYmplY3QsIHRydWUpLCB1bmRlZmluZWQsIGNvbXBhcmF0b3IpXG4gICAgICAgIDogW107XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2xpY2Ugb2YgYGFycmF5YCB3aXRoIGBuYCBlbGVtZW50cyBkcm9wcGVkIGZyb20gdGhlIGJlZ2lubmluZy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjUuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW249MV0gVGhlIG51bWJlciBvZiBlbGVtZW50cyB0byBkcm9wLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRyb3AoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiBbMiwgM11cbiAgICAgKlxuICAgICAqIF8uZHJvcChbMSwgMiwgM10sIDIpO1xuICAgICAqIC8vID0+IFszXVxuICAgICAqXG4gICAgICogXy5kcm9wKFsxLCAyLCAzXSwgNSk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKlxuICAgICAqIF8uZHJvcChbMSwgMiwgM10sIDApO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGRyb3AoYXJyYXksIG4sIGd1YXJkKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBuID0gKGd1YXJkIHx8IG4gPT09IHVuZGVmaW5lZCkgPyAxIDogdG9JbnRlZ2VyKG4pO1xuICAgICAgcmV0dXJuIGJhc2VTbGljZShhcnJheSwgbiA8IDAgPyAwIDogbiwgbGVuZ3RoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2xpY2Ugb2YgYGFycmF5YCB3aXRoIGBuYCBlbGVtZW50cyBkcm9wcGVkIGZyb20gdGhlIGVuZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW249MV0gVGhlIG51bWJlciBvZiBlbGVtZW50cyB0byBkcm9wLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRyb3BSaWdodChbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IFsxLCAyXVxuICAgICAqXG4gICAgICogXy5kcm9wUmlnaHQoWzEsIDIsIDNdLCAyKTtcbiAgICAgKiAvLyA9PiBbMV1cbiAgICAgKlxuICAgICAqIF8uZHJvcFJpZ2h0KFsxLCAyLCAzXSwgNSk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKlxuICAgICAqIF8uZHJvcFJpZ2h0KFsxLCAyLCAzXSwgMCk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICovXG4gICAgZnVuY3Rpb24gZHJvcFJpZ2h0KGFycmF5LCBuLCBndWFyZCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgbiA9IChndWFyZCB8fCBuID09PSB1bmRlZmluZWQpID8gMSA6IHRvSW50ZWdlcihuKTtcbiAgICAgIG4gPSBsZW5ndGggLSBuO1xuICAgICAgcmV0dXJuIGJhc2VTbGljZShhcnJheSwgMCwgbiA8IDAgPyAwIDogbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNsaWNlIG9mIGBhcnJheWAgZXhjbHVkaW5nIGVsZW1lbnRzIGRyb3BwZWQgZnJvbSB0aGUgZW5kLlxuICAgICAqIEVsZW1lbnRzIGFyZSBkcm9wcGVkIHVudGlsIGBwcmVkaWNhdGVgIHJldHVybnMgZmFsc2V5LiBUaGUgcHJlZGljYXRlIGlzXG4gICAgICogaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleCwgYXJyYXkpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgICdhY3RpdmUnOiB0cnVlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAncGViYmxlcycsICdhY3RpdmUnOiBmYWxzZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8uZHJvcFJpZ2h0V2hpbGUodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuICFvLmFjdGl2ZTsgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmRyb3BSaWdodFdoaWxlKHVzZXJzLCB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWN0aXZlJzogZmFsc2UgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknLCAnZnJlZCddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5kcm9wUmlnaHRXaGlsZSh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5J11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZHJvcFJpZ2h0V2hpbGUodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leScsICdmcmVkJywgJ3BlYmJsZXMnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGRyb3BSaWdodFdoaWxlKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VXaGlsZShhcnJheSwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSwgdHJ1ZSwgdHJ1ZSlcbiAgICAgICAgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2xpY2Ugb2YgYGFycmF5YCBleGNsdWRpbmcgZWxlbWVudHMgZHJvcHBlZCBmcm9tIHRoZSBiZWdpbm5pbmcuXG4gICAgICogRWxlbWVudHMgYXJlIGRyb3BwZWQgdW50aWwgYHByZWRpY2F0ZWAgcmV0dXJucyBmYWxzZXkuIFRoZSBwcmVkaWNhdGUgaXNcbiAgICAgKiBpbnZva2VkIHdpdGggdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGluZGV4LCBhcnJheSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAncGViYmxlcycsICdhY3RpdmUnOiB0cnVlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5kcm9wV2hpbGUodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuICFvLmFjdGl2ZTsgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydwZWJibGVzJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5kcm9wV2hpbGUodXNlcnMsIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FjdGl2ZSc6IGZhbHNlIH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnZnJlZCcsICdwZWJibGVzJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmRyb3BXaGlsZSh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsncGViYmxlcyddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmRyb3BXaGlsZSh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5JywgJ2ZyZWQnLCAncGViYmxlcyddXG4gICAgICovXG4gICAgZnVuY3Rpb24gZHJvcFdoaWxlKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VXaGlsZShhcnJheSwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSwgdHJ1ZSlcbiAgICAgICAgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBGaWxscyBlbGVtZW50cyBvZiBgYXJyYXlgIHdpdGggYHZhbHVlYCBmcm9tIGBzdGFydGAgdXAgdG8sIGJ1dCBub3RcbiAgICAgKiBpbmNsdWRpbmcsIGBlbmRgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjIuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBmaWxsLlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGZpbGwgYGFycmF5YCB3aXRoLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9MF0gVGhlIHN0YXJ0IHBvc2l0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZW5kPWFycmF5Lmxlbmd0aF0gVGhlIGVuZCBwb3NpdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWzEsIDIsIDNdO1xuICAgICAqXG4gICAgICogXy5maWxsKGFycmF5LCAnYScpO1xuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbJ2EnLCAnYScsICdhJ11cbiAgICAgKlxuICAgICAqIF8uZmlsbChBcnJheSgzKSwgMik7XG4gICAgICogLy8gPT4gWzIsIDIsIDJdXG4gICAgICpcbiAgICAgKiBfLmZpbGwoWzQsIDYsIDgsIDEwXSwgJyonLCAxLCAzKTtcbiAgICAgKiAvLyA9PiBbNCwgJyonLCAnKicsIDEwXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZpbGwoYXJyYXksIHZhbHVlLCBzdGFydCwgZW5kKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBpZiAoc3RhcnQgJiYgdHlwZW9mIHN0YXJ0ICE9ICdudW1iZXInICYmIGlzSXRlcmF0ZWVDYWxsKGFycmF5LCB2YWx1ZSwgc3RhcnQpKSB7XG4gICAgICAgIHN0YXJ0ID0gMDtcbiAgICAgICAgZW5kID0gbGVuZ3RoO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VGaWxsKGFycmF5LCB2YWx1ZSwgc3RhcnQsIGVuZCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5maW5kYCBleGNlcHQgdGhhdCBpdCByZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgZmlyc3RcbiAgICAgKiBlbGVtZW50IGBwcmVkaWNhdGVgIHJldHVybnMgdHJ1dGh5IGZvciBpbnN0ZWFkIG9mIHRoZSBlbGVtZW50IGl0c2VsZi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAxLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2Zyb21JbmRleD0wXSBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIGZvdW5kIGVsZW1lbnQsIGVsc2UgYC0xYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAncGViYmxlcycsICdhY3RpdmUnOiB0cnVlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5maW5kSW5kZXgodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8udXNlciA9PSAnYmFybmV5JzsgfSk7XG4gICAgICogLy8gPT4gMFxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRJbmRleCh1c2VycywgeyAndXNlcic6ICdmcmVkJywgJ2FjdGl2ZSc6IGZhbHNlIH0pO1xuICAgICAqIC8vID0+IDFcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRJbmRleCh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IDBcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZEluZGV4KHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gMlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZpbmRJbmRleChhcnJheSwgcHJlZGljYXRlLCBmcm9tSW5kZXgpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICAgIH1cbiAgICAgIHZhciBpbmRleCA9IGZyb21JbmRleCA9PSBudWxsID8gMCA6IHRvSW50ZWdlcihmcm9tSW5kZXgpO1xuICAgICAgaWYgKGluZGV4IDwgMCkge1xuICAgICAgICBpbmRleCA9IG5hdGl2ZU1heChsZW5ndGggKyBpbmRleCwgMCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZUZpbmRJbmRleChhcnJheSwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSwgaW5kZXgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZmluZEluZGV4YCBleGNlcHQgdGhhdCBpdCBpdGVyYXRlcyBvdmVyIGVsZW1lbnRzXG4gICAgICogb2YgYGNvbGxlY3Rpb25gIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2Zyb21JbmRleD1hcnJheS5sZW5ndGgtMV0gVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBmb3VuZCBlbGVtZW50LCBlbHNlIGAtMWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgICdhY3RpdmUnOiB0cnVlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAncGViYmxlcycsICdhY3RpdmUnOiBmYWxzZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8uZmluZExhc3RJbmRleCh1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gby51c2VyID09ICdwZWJibGVzJzsgfSk7XG4gICAgICogLy8gPT4gMlxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRMYXN0SW5kZXgodXNlcnMsIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FjdGl2ZSc6IHRydWUgfSk7XG4gICAgICogLy8gPT4gMFxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZExhc3RJbmRleCh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IDJcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZExhc3RJbmRleCh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IDBcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmaW5kTGFzdEluZGV4KGFycmF5LCBwcmVkaWNhdGUsIGZyb21JbmRleCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgfVxuICAgICAgdmFyIGluZGV4ID0gbGVuZ3RoIC0gMTtcbiAgICAgIGlmIChmcm9tSW5kZXggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpbmRleCA9IHRvSW50ZWdlcihmcm9tSW5kZXgpO1xuICAgICAgICBpbmRleCA9IGZyb21JbmRleCA8IDBcbiAgICAgICAgICA/IG5hdGl2ZU1heChsZW5ndGggKyBpbmRleCwgMClcbiAgICAgICAgICA6IG5hdGl2ZU1pbihpbmRleCwgbGVuZ3RoIC0gMSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZUZpbmRJbmRleChhcnJheSwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSwgaW5kZXgsIHRydWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEZsYXR0ZW5zIGBhcnJheWAgYSBzaW5nbGUgbGV2ZWwgZGVlcC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBmbGF0dGVuLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZsYXR0ZW5lZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5mbGF0dGVuKFsxLCBbMiwgWzMsIFs0XV0sIDVdXSk7XG4gICAgICogLy8gPT4gWzEsIDIsIFszLCBbNF1dLCA1XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZsYXR0ZW4oYXJyYXkpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIHJldHVybiBsZW5ndGggPyBiYXNlRmxhdHRlbihhcnJheSwgMSkgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZWN1cnNpdmVseSBmbGF0dGVucyBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGZsYXR0ZW4uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmxhdHRlbmVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmZsYXR0ZW5EZWVwKFsxLCBbMiwgWzMsIFs0XV0sIDVdXSk7XG4gICAgICogLy8gPT4gWzEsIDIsIDMsIDQsIDVdXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmxhdHRlbkRlZXAoYXJyYXkpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIHJldHVybiBsZW5ndGggPyBiYXNlRmxhdHRlbihhcnJheSwgSU5GSU5JVFkpIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVjdXJzaXZlbHkgZmxhdHRlbiBgYXJyYXlgIHVwIHRvIGBkZXB0aGAgdGltZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC40LjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gZmxhdHRlbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2RlcHRoPTFdIFRoZSBtYXhpbXVtIHJlY3Vyc2lvbiBkZXB0aC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmbGF0dGVuZWQgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsxLCBbMiwgWzMsIFs0XV0sIDVdXTtcbiAgICAgKlxuICAgICAqIF8uZmxhdHRlbkRlcHRoKGFycmF5LCAxKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgWzMsIFs0XV0sIDVdXG4gICAgICpcbiAgICAgKiBfLmZsYXR0ZW5EZXB0aChhcnJheSwgMik7XG4gICAgICogLy8gPT4gWzEsIDIsIDMsIFs0XSwgNV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmbGF0dGVuRGVwdGgoYXJyYXksIGRlcHRoKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBkZXB0aCA9IGRlcHRoID09PSB1bmRlZmluZWQgPyAxIDogdG9JbnRlZ2VyKGRlcHRoKTtcbiAgICAgIHJldHVybiBiYXNlRmxhdHRlbihhcnJheSwgZGVwdGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBpbnZlcnNlIG9mIGBfLnRvUGFpcnNgOyB0aGlzIG1ldGhvZCByZXR1cm5zIGFuIG9iamVjdCBjb21wb3NlZFxuICAgICAqIGZyb20ga2V5LXZhbHVlIGBwYWlyc2AuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBwYWlycyBUaGUga2V5LXZhbHVlIHBhaXJzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZnJvbVBhaXJzKFtbJ2EnLCAxXSwgWydiJywgMl1dKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMSwgJ2InOiAyIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmcm9tUGFpcnMocGFpcnMpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHBhaXJzID09IG51bGwgPyAwIDogcGFpcnMubGVuZ3RoLFxuICAgICAgICAgIHJlc3VsdCA9IHt9O1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgcGFpciA9IHBhaXJzW2luZGV4XTtcbiAgICAgICAgcmVzdWx0W3BhaXJbMF1dID0gcGFpclsxXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgZmlyc3QgZWxlbWVudCBvZiBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGFsaWFzIGZpcnN0XG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBmaXJzdCBlbGVtZW50IG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaGVhZChbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IDFcbiAgICAgKlxuICAgICAqIF8uaGVhZChbXSk7XG4gICAgICogLy8gPT4gdW5kZWZpbmVkXG4gICAgICovXG4gICAgZnVuY3Rpb24gaGVhZChhcnJheSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpID8gYXJyYXlbMF0gOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgaW5kZXggYXQgd2hpY2ggdGhlIGZpcnN0IG9jY3VycmVuY2Ugb2YgYHZhbHVlYCBpcyBmb3VuZCBpbiBgYXJyYXlgXG4gICAgICogdXNpbmcgW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAgICAgKiBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMuIElmIGBmcm9tSW5kZXhgIGlzIG5lZ2F0aXZlLCBpdCdzIHVzZWQgYXMgdGhlXG4gICAgICogb2Zmc2V0IGZyb20gdGhlIGVuZCBvZiBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2Zyb21JbmRleD0wXSBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pbmRleE9mKFsxLCAyLCAxLCAyXSwgMik7XG4gICAgICogLy8gPT4gMVxuICAgICAqXG4gICAgICogLy8gU2VhcmNoIGZyb20gdGhlIGBmcm9tSW5kZXhgLlxuICAgICAqIF8uaW5kZXhPZihbMSwgMiwgMSwgMl0sIDIsIDIpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpbmRleE9mKGFycmF5LCB2YWx1ZSwgZnJvbUluZGV4KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSBmcm9tSW5kZXggPT0gbnVsbCA/IDAgOiB0b0ludGVnZXIoZnJvbUluZGV4KTtcbiAgICAgIGlmIChpbmRleCA8IDApIHtcbiAgICAgICAgaW5kZXggPSBuYXRpdmVNYXgobGVuZ3RoICsgaW5kZXgsIDApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VJbmRleE9mKGFycmF5LCB2YWx1ZSwgaW5kZXgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgYWxsIGJ1dCB0aGUgbGFzdCBlbGVtZW50IG9mIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmluaXRpYWwoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiBbMSwgMl1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpbml0aWFsKGFycmF5KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICByZXR1cm4gbGVuZ3RoID8gYmFzZVNsaWNlKGFycmF5LCAwLCAtMSkgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHVuaXF1ZSB2YWx1ZXMgdGhhdCBhcmUgaW5jbHVkZWQgaW4gYWxsIGdpdmVuIGFycmF5c1xuICAgICAqIHVzaW5nIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gICAgICogZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLiBUaGUgb3JkZXIgYW5kIHJlZmVyZW5jZXMgb2YgcmVzdWx0IHZhbHVlcyBhcmVcbiAgICAgKiBkZXRlcm1pbmVkIGJ5IHRoZSBmaXJzdCBhcnJheS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBpbnRlcnNlY3RpbmcgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmludGVyc2VjdGlvbihbMiwgMV0sIFsyLCAzXSk7XG4gICAgICogLy8gPT4gWzJdXG4gICAgICovXG4gICAgdmFyIGludGVyc2VjdGlvbiA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICAgICAgdmFyIG1hcHBlZCA9IGFycmF5TWFwKGFycmF5cywgY2FzdEFycmF5TGlrZU9iamVjdCk7XG4gICAgICByZXR1cm4gKG1hcHBlZC5sZW5ndGggJiYgbWFwcGVkWzBdID09PSBhcnJheXNbMF0pXG4gICAgICAgID8gYmFzZUludGVyc2VjdGlvbihtYXBwZWQpXG4gICAgICAgIDogW107XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmludGVyc2VjdGlvbmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgXG4gICAgICogd2hpY2ggaXMgaW52b2tlZCBmb3IgZWFjaCBlbGVtZW50IG9mIGVhY2ggYGFycmF5c2AgdG8gZ2VuZXJhdGUgdGhlIGNyaXRlcmlvblxuICAgICAqIGJ5IHdoaWNoIHRoZXkncmUgY29tcGFyZWQuIFRoZSBvcmRlciBhbmQgcmVmZXJlbmNlcyBvZiByZXN1bHQgdmFsdWVzIGFyZVxuICAgICAqIGRldGVybWluZWQgYnkgdGhlIGZpcnN0IGFycmF5LiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDpcbiAgICAgKiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBpbnRlcnNlY3RpbmcgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmludGVyc2VjdGlvbkJ5KFsyLjEsIDEuMl0sIFsyLjMsIDMuNF0sIE1hdGguZmxvb3IpO1xuICAgICAqIC8vID0+IFsyLjFdXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmludGVyc2VjdGlvbkJ5KFt7ICd4JzogMSB9XSwgW3sgJ3gnOiAyIH0sIHsgJ3gnOiAxIH1dLCAneCcpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMSB9XVxuICAgICAqL1xuICAgIHZhciBpbnRlcnNlY3Rpb25CeSA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICAgICAgdmFyIGl0ZXJhdGVlID0gbGFzdChhcnJheXMpLFxuICAgICAgICAgIG1hcHBlZCA9IGFycmF5TWFwKGFycmF5cywgY2FzdEFycmF5TGlrZU9iamVjdCk7XG5cbiAgICAgIGlmIChpdGVyYXRlZSA9PT0gbGFzdChtYXBwZWQpKSB7XG4gICAgICAgIGl0ZXJhdGVlID0gdW5kZWZpbmVkO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbWFwcGVkLnBvcCgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIChtYXBwZWQubGVuZ3RoICYmIG1hcHBlZFswXSA9PT0gYXJyYXlzWzBdKVxuICAgICAgICA/IGJhc2VJbnRlcnNlY3Rpb24obWFwcGVkLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMikpXG4gICAgICAgIDogW107XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmludGVyc2VjdGlvbmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY29tcGFyYXRvcmBcbiAgICAgKiB3aGljaCBpcyBpbnZva2VkIHRvIGNvbXBhcmUgZWxlbWVudHMgb2YgYGFycmF5c2AuIFRoZSBvcmRlciBhbmQgcmVmZXJlbmNlc1xuICAgICAqIG9mIHJlc3VsdCB2YWx1ZXMgYXJlIGRldGVybWluZWQgYnkgdGhlIGZpcnN0IGFycmF5LiBUaGUgY29tcGFyYXRvciBpc1xuICAgICAqIGludm9rZWQgd2l0aCB0d28gYXJndW1lbnRzOiAoYXJyVmFsLCBvdGhWYWwpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGludGVyc2VjdGluZyB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ3gnOiAxLCAneSc6IDIgfSwgeyAneCc6IDIsICd5JzogMSB9XTtcbiAgICAgKiB2YXIgb3RoZXJzID0gW3sgJ3gnOiAxLCAneSc6IDEgfSwgeyAneCc6IDEsICd5JzogMiB9XTtcbiAgICAgKlxuICAgICAqIF8uaW50ZXJzZWN0aW9uV2l0aChvYmplY3RzLCBvdGhlcnMsIF8uaXNFcXVhbCk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAxLCAneSc6IDIgfV1cbiAgICAgKi9cbiAgICB2YXIgaW50ZXJzZWN0aW9uV2l0aCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICAgICAgdmFyIGNvbXBhcmF0b3IgPSBsYXN0KGFycmF5cyksXG4gICAgICAgICAgbWFwcGVkID0gYXJyYXlNYXAoYXJyYXlzLCBjYXN0QXJyYXlMaWtlT2JqZWN0KTtcblxuICAgICAgY29tcGFyYXRvciA9IHR5cGVvZiBjb21wYXJhdG9yID09ICdmdW5jdGlvbicgPyBjb21wYXJhdG9yIDogdW5kZWZpbmVkO1xuICAgICAgaWYgKGNvbXBhcmF0b3IpIHtcbiAgICAgICAgbWFwcGVkLnBvcCgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIChtYXBwZWQubGVuZ3RoICYmIG1hcHBlZFswXSA9PT0gYXJyYXlzWzBdKVxuICAgICAgICA/IGJhc2VJbnRlcnNlY3Rpb24obWFwcGVkLCB1bmRlZmluZWQsIGNvbXBhcmF0b3IpXG4gICAgICAgIDogW107XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBhbGwgZWxlbWVudHMgaW4gYGFycmF5YCBpbnRvIGEgc3RyaW5nIHNlcGFyYXRlZCBieSBgc2VwYXJhdG9yYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBjb252ZXJ0LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc2VwYXJhdG9yPScsJ10gVGhlIGVsZW1lbnQgc2VwYXJhdG9yLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGpvaW5lZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uam9pbihbJ2EnLCAnYicsICdjJ10sICd+Jyk7XG4gICAgICogLy8gPT4gJ2F+Yn5jJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGpvaW4oYXJyYXksIHNlcGFyYXRvcikge1xuICAgICAgcmV0dXJuIGFycmF5ID09IG51bGwgPyAnJyA6IG5hdGl2ZUpvaW4uY2FsbChhcnJheSwgc2VwYXJhdG9yKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBsYXN0IGVsZW1lbnQgb2YgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbGFzdCBlbGVtZW50IG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubGFzdChbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IDNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsYXN0KGFycmF5KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICByZXR1cm4gbGVuZ3RoID8gYXJyYXlbbGVuZ3RoIC0gMV0gOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5pbmRleE9mYCBleGNlcHQgdGhhdCBpdCBpdGVyYXRlcyBvdmVyIGVsZW1lbnRzIG9mXG4gICAgICogYGFycmF5YCBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZnJvbUluZGV4PWFycmF5Lmxlbmd0aC0xXSBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5sYXN0SW5kZXhPZihbMSwgMiwgMSwgMl0sIDIpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKlxuICAgICAqIC8vIFNlYXJjaCBmcm9tIHRoZSBgZnJvbUluZGV4YC5cbiAgICAgKiBfLmxhc3RJbmRleE9mKFsxLCAyLCAxLCAyXSwgMiwgMik7XG4gICAgICogLy8gPT4gMVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxhc3RJbmRleE9mKGFycmF5LCB2YWx1ZSwgZnJvbUluZGV4KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSBsZW5ndGg7XG4gICAgICBpZiAoZnJvbUluZGV4ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaW5kZXggPSB0b0ludGVnZXIoZnJvbUluZGV4KTtcbiAgICAgICAgaW5kZXggPSBpbmRleCA8IDAgPyBuYXRpdmVNYXgobGVuZ3RoICsgaW5kZXgsIDApIDogbmF0aXZlTWluKGluZGV4LCBsZW5ndGggLSAxKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gdmFsdWVcbiAgICAgICAgPyBzdHJpY3RMYXN0SW5kZXhPZihhcnJheSwgdmFsdWUsIGluZGV4KVxuICAgICAgICA6IGJhc2VGaW5kSW5kZXgoYXJyYXksIGJhc2VJc05hTiwgaW5kZXgsIHRydWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGVsZW1lbnQgYXQgaW5kZXggYG5gIG9mIGBhcnJheWAuIElmIGBuYCBpcyBuZWdhdGl2ZSwgdGhlIG50aFxuICAgICAqIGVsZW1lbnQgZnJvbSB0aGUgZW5kIGlzIHJldHVybmVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMTEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW249MF0gVGhlIGluZGV4IG9mIHRoZSBlbGVtZW50IHRvIHJldHVybi5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbnRoIGVsZW1lbnQgb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWydhJywgJ2InLCAnYycsICdkJ107XG4gICAgICpcbiAgICAgKiBfLm50aChhcnJheSwgMSk7XG4gICAgICogLy8gPT4gJ2InXG4gICAgICpcbiAgICAgKiBfLm50aChhcnJheSwgLTIpO1xuICAgICAqIC8vID0+ICdjJztcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBudGgoYXJyYXksIG4pIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKSA/IGJhc2VOdGgoYXJyYXksIHRvSW50ZWdlcihuKSkgOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhbGwgZ2l2ZW4gdmFsdWVzIGZyb20gYGFycmF5YCB1c2luZ1xuICAgICAqIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gICAgICogZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBgXy53aXRob3V0YCwgdGhpcyBtZXRob2QgbXV0YXRlcyBgYXJyYXlgLiBVc2UgYF8ucmVtb3ZlYFxuICAgICAqIHRvIHJlbW92ZSBlbGVtZW50cyBmcm9tIGFuIGFycmF5IGJ5IHByZWRpY2F0ZS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbdmFsdWVzXSBUaGUgdmFsdWVzIHRvIHJlbW92ZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWydhJywgJ2InLCAnYycsICdhJywgJ2InLCAnYyddO1xuICAgICAqXG4gICAgICogXy5wdWxsKGFycmF5LCAnYScsICdjJyk7XG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFsnYicsICdiJ11cbiAgICAgKi9cbiAgICB2YXIgcHVsbCA9IGJhc2VSZXN0KHB1bGxBbGwpO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5wdWxsYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGFuIGFycmF5IG9mIHZhbHVlcyB0byByZW1vdmUuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLmRpZmZlcmVuY2VgLCB0aGlzIG1ldGhvZCBtdXRhdGVzIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlcyBUaGUgdmFsdWVzIHRvIHJlbW92ZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWydhJywgJ2InLCAnYycsICdhJywgJ2InLCAnYyddO1xuICAgICAqXG4gICAgICogXy5wdWxsQWxsKGFycmF5LCBbJ2EnLCAnYyddKTtcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gWydiJywgJ2InXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHB1bGxBbGwoYXJyYXksIHZhbHVlcykge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGggJiYgdmFsdWVzICYmIHZhbHVlcy5sZW5ndGgpXG4gICAgICAgID8gYmFzZVB1bGxBbGwoYXJyYXksIHZhbHVlcylcbiAgICAgICAgOiBhcnJheTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnB1bGxBbGxgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB3aGljaCBpc1xuICAgICAqIGludm9rZWQgZm9yIGVhY2ggZWxlbWVudCBvZiBgYXJyYXlgIGFuZCBgdmFsdWVzYCB0byBnZW5lcmF0ZSB0aGUgY3JpdGVyaW9uXG4gICAgICogYnkgd2hpY2ggdGhleSdyZSBjb21wYXJlZC4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLmRpZmZlcmVuY2VCeWAsIHRoaXMgbWV0aG9kIG11dGF0ZXMgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSB2YWx1ZXMgdG8gcmVtb3ZlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gW3sgJ3gnOiAxIH0sIHsgJ3gnOiAyIH0sIHsgJ3gnOiAzIH0sIHsgJ3gnOiAxIH1dO1xuICAgICAqXG4gICAgICogXy5wdWxsQWxsQnkoYXJyYXksIFt7ICd4JzogMSB9LCB7ICd4JzogMyB9XSwgJ3gnKTtcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAyIH1dXG4gICAgICovXG4gICAgZnVuY3Rpb24gcHVsbEFsbEJ5KGFycmF5LCB2YWx1ZXMsIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aCAmJiB2YWx1ZXMgJiYgdmFsdWVzLmxlbmd0aClcbiAgICAgICAgPyBiYXNlUHVsbEFsbChhcnJheSwgdmFsdWVzLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMikpXG4gICAgICAgIDogYXJyYXk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5wdWxsQWxsYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjb21wYXJhdG9yYCB3aGljaFxuICAgICAqIGlzIGludm9rZWQgdG8gY29tcGFyZSBlbGVtZW50cyBvZiBgYXJyYXlgIHRvIGB2YWx1ZXNgLiBUaGUgY29tcGFyYXRvciBpc1xuICAgICAqIGludm9rZWQgd2l0aCB0d28gYXJndW1lbnRzOiAoYXJyVmFsLCBvdGhWYWwpLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBgXy5kaWZmZXJlbmNlV2l0aGAsIHRoaXMgbWV0aG9kIG11dGF0ZXMgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjYuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSB2YWx1ZXMgdG8gcmVtb3ZlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbeyAneCc6IDEsICd5JzogMiB9LCB7ICd4JzogMywgJ3knOiA0IH0sIHsgJ3gnOiA1LCAneSc6IDYgfV07XG4gICAgICpcbiAgICAgKiBfLnB1bGxBbGxXaXRoKGFycmF5LCBbeyAneCc6IDMsICd5JzogNCB9XSwgXy5pc0VxdWFsKTtcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAxLCAneSc6IDIgfSwgeyAneCc6IDUsICd5JzogNiB9XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHB1bGxBbGxXaXRoKGFycmF5LCB2YWx1ZXMsIGNvbXBhcmF0b3IpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoICYmIHZhbHVlcyAmJiB2YWx1ZXMubGVuZ3RoKVxuICAgICAgICA/IGJhc2VQdWxsQWxsKGFycmF5LCB2YWx1ZXMsIHVuZGVmaW5lZCwgY29tcGFyYXRvcilcbiAgICAgICAgOiBhcnJheTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGVsZW1lbnRzIGZyb20gYGFycmF5YCBjb3JyZXNwb25kaW5nIHRvIGBpbmRleGVzYCBhbmQgcmV0dXJucyBhblxuICAgICAqIGFycmF5IG9mIHJlbW92ZWQgZWxlbWVudHMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLmF0YCwgdGhpcyBtZXRob2QgbXV0YXRlcyBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0gey4uLihudW1iZXJ8bnVtYmVyW10pfSBbaW5kZXhlc10gVGhlIGluZGV4ZXMgb2YgZWxlbWVudHMgdG8gcmVtb3ZlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIHJlbW92ZWQgZWxlbWVudHMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsnYScsICdiJywgJ2MnLCAnZCddO1xuICAgICAqIHZhciBwdWxsZWQgPSBfLnB1bGxBdChhcnJheSwgWzEsIDNdKTtcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbJ2EnLCAnYyddXG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhwdWxsZWQpO1xuICAgICAqIC8vID0+IFsnYicsICdkJ11cbiAgICAgKi9cbiAgICB2YXIgcHVsbEF0ID0gZmxhdFJlc3QoZnVuY3Rpb24oYXJyYXksIGluZGV4ZXMpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgICByZXN1bHQgPSBiYXNlQXQoYXJyYXksIGluZGV4ZXMpO1xuXG4gICAgICBiYXNlUHVsbEF0KGFycmF5LCBhcnJheU1hcChpbmRleGVzLCBmdW5jdGlvbihpbmRleCkge1xuICAgICAgICByZXR1cm4gaXNJbmRleChpbmRleCwgbGVuZ3RoKSA/ICtpbmRleCA6IGluZGV4O1xuICAgICAgfSkuc29ydChjb21wYXJlQXNjZW5kaW5nKSk7XG5cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGFsbCBlbGVtZW50cyBmcm9tIGBhcnJheWAgdGhhdCBgcHJlZGljYXRlYCByZXR1cm5zIHRydXRoeSBmb3JcbiAgICAgKiBhbmQgcmV0dXJucyBhbiBhcnJheSBvZiB0aGUgcmVtb3ZlZCBlbGVtZW50cy4gVGhlIHByZWRpY2F0ZSBpcyBpbnZva2VkXG4gICAgICogd2l0aCB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXgsIGFycmF5KS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgYF8uZmlsdGVyYCwgdGhpcyBtZXRob2QgbXV0YXRlcyBgYXJyYXlgLiBVc2UgYF8ucHVsbGBcbiAgICAgKiB0byBwdWxsIGVsZW1lbnRzIGZyb20gYW4gYXJyYXkgYnkgdmFsdWUuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiByZW1vdmVkIGVsZW1lbnRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbMSwgMiwgMywgNF07XG4gICAgICogdmFyIGV2ZW5zID0gXy5yZW1vdmUoYXJyYXksIGZ1bmN0aW9uKG4pIHtcbiAgICAgKiAgIHJldHVybiBuICUgMiA9PSAwO1xuICAgICAqIH0pO1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFsxLCAzXVxuICAgICAqXG4gICAgICogY29uc29sZS5sb2coZXZlbnMpO1xuICAgICAqIC8vID0+IFsyLCA0XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlbW92ZShhcnJheSwgcHJlZGljYXRlKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgICBpZiAoIShhcnJheSAmJiBhcnJheS5sZW5ndGgpKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBpbmRleGVzID0gW10sXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gICAgICBwcmVkaWNhdGUgPSBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuICAgICAgICBpZiAocHJlZGljYXRlKHZhbHVlLCBpbmRleCwgYXJyYXkpKSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgICAgICAgIGluZGV4ZXMucHVzaChpbmRleCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGJhc2VQdWxsQXQoYXJyYXksIGluZGV4ZXMpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXZlcnNlcyBgYXJyYXlgIHNvIHRoYXQgdGhlIGZpcnN0IGVsZW1lbnQgYmVjb21lcyB0aGUgbGFzdCwgdGhlIHNlY29uZFxuICAgICAqIGVsZW1lbnQgYmVjb21lcyB0aGUgc2Vjb25kIHRvIGxhc3QsIGFuZCBzbyBvbi5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBhcnJheWAgYW5kIGlzIGJhc2VkIG9uXG4gICAgICogW2BBcnJheSNyZXZlcnNlYF0oaHR0cHM6Ly9tZG4uaW8vQXJyYXkvcmV2ZXJzZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbMSwgMiwgM107XG4gICAgICpcbiAgICAgKiBfLnJldmVyc2UoYXJyYXkpO1xuICAgICAqIC8vID0+IFszLCAyLCAxXVxuICAgICAqXG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFszLCAyLCAxXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJldmVyc2UoYXJyYXkpIHtcbiAgICAgIHJldHVybiBhcnJheSA9PSBudWxsID8gYXJyYXkgOiBuYXRpdmVSZXZlcnNlLmNhbGwoYXJyYXkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzbGljZSBvZiBgYXJyYXlgIGZyb20gYHN0YXJ0YCB1cCB0bywgYnV0IG5vdCBpbmNsdWRpbmcsIGBlbmRgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIHVzZWQgaW5zdGVhZCBvZlxuICAgICAqIFtgQXJyYXkjc2xpY2VgXShodHRwczovL21kbi5pby9BcnJheS9zbGljZSkgdG8gZW5zdXJlIGRlbnNlIGFycmF5cyBhcmVcbiAgICAgKiByZXR1cm5lZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBzbGljZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PTBdIFRoZSBzdGFydCBwb3NpdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2VuZD1hcnJheS5sZW5ndGhdIFRoZSBlbmQgcG9zaXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNsaWNlKGFycmF5LCBzdGFydCwgZW5kKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBpZiAoZW5kICYmIHR5cGVvZiBlbmQgIT0gJ251bWJlcicgJiYgaXNJdGVyYXRlZUNhbGwoYXJyYXksIHN0YXJ0LCBlbmQpKSB7XG4gICAgICAgIHN0YXJ0ID0gMDtcbiAgICAgICAgZW5kID0gbGVuZ3RoO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHN0YXJ0ID0gc3RhcnQgPT0gbnVsbCA/IDAgOiB0b0ludGVnZXIoc3RhcnQpO1xuICAgICAgICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbmd0aCA6IHRvSW50ZWdlcihlbmQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VTbGljZShhcnJheSwgc3RhcnQsIGVuZCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXNlcyBhIGJpbmFyeSBzZWFyY2ggdG8gZGV0ZXJtaW5lIHRoZSBsb3dlc3QgaW5kZXggYXQgd2hpY2ggYHZhbHVlYFxuICAgICAqIHNob3VsZCBiZSBpbnNlcnRlZCBpbnRvIGBhcnJheWAgaW4gb3JkZXIgdG8gbWFpbnRhaW4gaXRzIHNvcnQgb3JkZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgc29ydGVkIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gZXZhbHVhdGUuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggYXQgd2hpY2ggYHZhbHVlYCBzaG91bGQgYmUgaW5zZXJ0ZWRcbiAgICAgKiAgaW50byBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNvcnRlZEluZGV4KFszMCwgNTBdLCA0MCk7XG4gICAgICogLy8gPT4gMVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNvcnRlZEluZGV4KGFycmF5LCB2YWx1ZSkge1xuICAgICAgcmV0dXJuIGJhc2VTb3J0ZWRJbmRleChhcnJheSwgdmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uc29ydGVkSW5kZXhgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYFxuICAgICAqIHdoaWNoIGlzIGludm9rZWQgZm9yIGB2YWx1ZWAgYW5kIGVhY2ggZWxlbWVudCBvZiBgYXJyYXlgIHRvIGNvbXB1dGUgdGhlaXJcbiAgICAgKiBzb3J0IHJhbmtpbmcuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIHNvcnRlZCBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGV2YWx1YXRlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBhdCB3aGljaCBgdmFsdWVgIHNob3VsZCBiZSBpbnNlcnRlZFxuICAgICAqICBpbnRvIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ3gnOiA0IH0sIHsgJ3gnOiA1IH1dO1xuICAgICAqXG4gICAgICogXy5zb3J0ZWRJbmRleEJ5KG9iamVjdHMsIHsgJ3gnOiA0IH0sIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8ueDsgfSk7XG4gICAgICogLy8gPT4gMFxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5zb3J0ZWRJbmRleEJ5KG9iamVjdHMsIHsgJ3gnOiA0IH0sICd4Jyk7XG4gICAgICogLy8gPT4gMFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNvcnRlZEluZGV4QnkoYXJyYXksIHZhbHVlLCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIGJhc2VTb3J0ZWRJbmRleEJ5KGFycmF5LCB2YWx1ZSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmluZGV4T2ZgIGV4Y2VwdCB0aGF0IGl0IHBlcmZvcm1zIGEgYmluYXJ5XG4gICAgICogc2VhcmNoIG9uIGEgc29ydGVkIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc29ydGVkSW5kZXhPZihbNCwgNSwgNSwgNSwgNl0sIDUpO1xuICAgICAqIC8vID0+IDFcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzb3J0ZWRJbmRleE9mKGFycmF5LCB2YWx1ZSkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKGxlbmd0aCkge1xuICAgICAgICB2YXIgaW5kZXggPSBiYXNlU29ydGVkSW5kZXgoYXJyYXksIHZhbHVlKTtcbiAgICAgICAgaWYgKGluZGV4IDwgbGVuZ3RoICYmIGVxKGFycmF5W2luZGV4XSwgdmFsdWUpKSB7XG4gICAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gLTE7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5zb3J0ZWRJbmRleGAgZXhjZXB0IHRoYXQgaXQgcmV0dXJucyB0aGUgaGlnaGVzdFxuICAgICAqIGluZGV4IGF0IHdoaWNoIGB2YWx1ZWAgc2hvdWxkIGJlIGluc2VydGVkIGludG8gYGFycmF5YCBpbiBvcmRlciB0b1xuICAgICAqIG1haW50YWluIGl0cyBzb3J0IG9yZGVyLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIHNvcnRlZCBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGV2YWx1YXRlLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IGF0IHdoaWNoIGB2YWx1ZWAgc2hvdWxkIGJlIGluc2VydGVkXG4gICAgICogIGludG8gYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zb3J0ZWRMYXN0SW5kZXgoWzQsIDUsIDUsIDUsIDZdLCA1KTtcbiAgICAgKiAvLyA9PiA0XG4gICAgICovXG4gICAgZnVuY3Rpb24gc29ydGVkTGFzdEluZGV4KGFycmF5LCB2YWx1ZSkge1xuICAgICAgcmV0dXJuIGJhc2VTb3J0ZWRJbmRleChhcnJheSwgdmFsdWUsIHRydWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uc29ydGVkTGFzdEluZGV4YCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWBcbiAgICAgKiB3aGljaCBpcyBpbnZva2VkIGZvciBgdmFsdWVgIGFuZCBlYWNoIGVsZW1lbnQgb2YgYGFycmF5YCB0byBjb21wdXRlIHRoZWlyXG4gICAgICogc29ydCByYW5raW5nLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBzb3J0ZWQgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBldmFsdWF0ZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggYXQgd2hpY2ggYHZhbHVlYCBzaG91bGQgYmUgaW5zZXJ0ZWRcbiAgICAgKiAgaW50byBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICd4JzogNCB9LCB7ICd4JzogNSB9XTtcbiAgICAgKlxuICAgICAqIF8uc29ydGVkTGFzdEluZGV4Qnkob2JqZWN0cywgeyAneCc6IDQgfSwgZnVuY3Rpb24obykgeyByZXR1cm4gby54OyB9KTtcbiAgICAgKiAvLyA9PiAxXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnNvcnRlZExhc3RJbmRleEJ5KG9iamVjdHMsIHsgJ3gnOiA0IH0sICd4Jyk7XG4gICAgICogLy8gPT4gMVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNvcnRlZExhc3RJbmRleEJ5KGFycmF5LCB2YWx1ZSwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBiYXNlU29ydGVkSW5kZXhCeShhcnJheSwgdmFsdWUsIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSwgdHJ1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5sYXN0SW5kZXhPZmAgZXhjZXB0IHRoYXQgaXQgcGVyZm9ybXMgYSBiaW5hcnlcbiAgICAgKiBzZWFyY2ggb24gYSBzb3J0ZWQgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zb3J0ZWRMYXN0SW5kZXhPZihbNCwgNSwgNSwgNSwgNl0sIDUpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzb3J0ZWRMYXN0SW5kZXhPZihhcnJheSwgdmFsdWUpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmIChsZW5ndGgpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gYmFzZVNvcnRlZEluZGV4KGFycmF5LCB2YWx1ZSwgdHJ1ZSkgLSAxO1xuICAgICAgICBpZiAoZXEoYXJyYXlbaW5kZXhdLCB2YWx1ZSkpIHtcbiAgICAgICAgICByZXR1cm4gaW5kZXg7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiAtMTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnVuaXFgIGV4Y2VwdCB0aGF0IGl0J3MgZGVzaWduZWQgYW5kIG9wdGltaXplZFxuICAgICAqIGZvciBzb3J0ZWQgYXJyYXlzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZHVwbGljYXRlIGZyZWUgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc29ydGVkVW5pcShbMSwgMSwgMl0pO1xuICAgICAqIC8vID0+IFsxLCAyXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNvcnRlZFVuaXEoYXJyYXkpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VTb3J0ZWRVbmlxKGFycmF5KVxuICAgICAgICA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8udW5pcUJ5YCBleGNlcHQgdGhhdCBpdCdzIGRlc2lnbmVkIGFuZCBvcHRpbWl6ZWRcbiAgICAgKiBmb3Igc29ydGVkIGFycmF5cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZHVwbGljYXRlIGZyZWUgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc29ydGVkVW5pcUJ5KFsxLjEsIDEuMiwgMi4zLCAyLjRdLCBNYXRoLmZsb29yKTtcbiAgICAgKiAvLyA9PiBbMS4xLCAyLjNdXG4gICAgICovXG4gICAgZnVuY3Rpb24gc29ydGVkVW5pcUJ5KGFycmF5LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZVNvcnRlZFVuaXEoYXJyYXksIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSlcbiAgICAgICAgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIGFsbCBidXQgdGhlIGZpcnN0IGVsZW1lbnQgb2YgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udGFpbChbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IFsyLCAzXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRhaWwoYXJyYXkpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIHJldHVybiBsZW5ndGggPyBiYXNlU2xpY2UoYXJyYXksIDEsIGxlbmd0aCkgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2xpY2Ugb2YgYGFycmF5YCB3aXRoIGBuYCBlbGVtZW50cyB0YWtlbiBmcm9tIHRoZSBiZWdpbm5pbmcuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtuPTFdIFRoZSBudW1iZXIgb2YgZWxlbWVudHMgdG8gdGFrZS5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50YWtlKFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gWzFdXG4gICAgICpcbiAgICAgKiBfLnRha2UoWzEsIDIsIDNdLCAyKTtcbiAgICAgKiAvLyA9PiBbMSwgMl1cbiAgICAgKlxuICAgICAqIF8udGFrZShbMSwgMiwgM10sIDUpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqXG4gICAgICogXy50YWtlKFsxLCAyLCAzXSwgMCk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0YWtlKGFycmF5LCBuLCBndWFyZCkge1xuICAgICAgaWYgKCEoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKSkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBuID0gKGd1YXJkIHx8IG4gPT09IHVuZGVmaW5lZCkgPyAxIDogdG9JbnRlZ2VyKG4pO1xuICAgICAgcmV0dXJuIGJhc2VTbGljZShhcnJheSwgMCwgbiA8IDAgPyAwIDogbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNsaWNlIG9mIGBhcnJheWAgd2l0aCBgbmAgZWxlbWVudHMgdGFrZW4gZnJvbSB0aGUgZW5kLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbj0xXSBUaGUgbnVtYmVyIG9mIGVsZW1lbnRzIHRvIHRha2UuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udGFrZVJpZ2h0KFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gWzNdXG4gICAgICpcbiAgICAgKiBfLnRha2VSaWdodChbMSwgMiwgM10sIDIpO1xuICAgICAqIC8vID0+IFsyLCAzXVxuICAgICAqXG4gICAgICogXy50YWtlUmlnaHQoWzEsIDIsIDNdLCA1KTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKlxuICAgICAqIF8udGFrZVJpZ2h0KFsxLCAyLCAzXSwgMCk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0YWtlUmlnaHQoYXJyYXksIG4sIGd1YXJkKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBuID0gKGd1YXJkIHx8IG4gPT09IHVuZGVmaW5lZCkgPyAxIDogdG9JbnRlZ2VyKG4pO1xuICAgICAgbiA9IGxlbmd0aCAtIG47XG4gICAgICByZXR1cm4gYmFzZVNsaWNlKGFycmF5LCBuIDwgMCA/IDAgOiBuLCBsZW5ndGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzbGljZSBvZiBgYXJyYXlgIHdpdGggZWxlbWVudHMgdGFrZW4gZnJvbSB0aGUgZW5kLiBFbGVtZW50cyBhcmVcbiAgICAgKiB0YWtlbiB1bnRpbCBgcHJlZGljYXRlYCByZXR1cm5zIGZhbHNleS4gVGhlIHByZWRpY2F0ZSBpcyBpbnZva2VkIHdpdGhcbiAgICAgKiB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXgsIGFycmF5KS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICAnYWN0aXZlJzogdHJ1ZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWN0aXZlJzogZmFsc2UgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLnRha2VSaWdodFdoaWxlKHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiAhby5hY3RpdmU7IH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnZnJlZCcsICdwZWJibGVzJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy50YWtlUmlnaHRXaGlsZSh1c2VycywgeyAndXNlcic6ICdwZWJibGVzJywgJ2FjdGl2ZSc6IGZhbHNlIH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsncGViYmxlcyddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy50YWtlUmlnaHRXaGlsZSh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnZnJlZCcsICdwZWJibGVzJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8udGFrZVJpZ2h0V2hpbGUodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiBbXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRha2VSaWdodFdoaWxlKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VXaGlsZShhcnJheSwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSwgZmFsc2UsIHRydWUpXG4gICAgICAgIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNsaWNlIG9mIGBhcnJheWAgd2l0aCBlbGVtZW50cyB0YWtlbiBmcm9tIHRoZSBiZWdpbm5pbmcuIEVsZW1lbnRzXG4gICAgICogYXJlIHRha2VuIHVudGlsIGBwcmVkaWNhdGVgIHJldHVybnMgZmFsc2V5LiBUaGUgcHJlZGljYXRlIGlzIGludm9rZWQgd2l0aFxuICAgICAqIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleCwgYXJyYXkpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWN0aXZlJzogdHJ1ZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8udGFrZVdoaWxlKHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiAhby5hY3RpdmU7IH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5JywgJ2ZyZWQnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnRha2VXaGlsZSh1c2VycywgeyAndXNlcic6ICdiYXJuZXknLCAnYWN0aXZlJzogZmFsc2UgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8udGFrZVdoaWxlKHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknLCAnZnJlZCddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnRha2VXaGlsZSh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IFtdXG4gICAgICovXG4gICAgZnVuY3Rpb24gdGFrZVdoaWxlKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VXaGlsZShhcnJheSwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSlcbiAgICAgICAgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHVuaXF1ZSB2YWx1ZXMsIGluIG9yZGVyLCBmcm9tIGFsbCBnaXZlbiBhcnJheXMgdXNpbmdcbiAgICAgKiBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICAgICAqIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBjb21iaW5lZCB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udW5pb24oWzJdLCBbMSwgMl0pO1xuICAgICAqIC8vID0+IFsyLCAxXVxuICAgICAqL1xuICAgIHZhciB1bmlvbiA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICAgICAgcmV0dXJuIGJhc2VVbmlxKGJhc2VGbGF0dGVuKGFycmF5cywgMSwgaXNBcnJheUxpa2VPYmplY3QsIHRydWUpKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8udW5pb25gIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB3aGljaCBpc1xuICAgICAqIGludm9rZWQgZm9yIGVhY2ggZWxlbWVudCBvZiBlYWNoIGBhcnJheXNgIHRvIGdlbmVyYXRlIHRoZSBjcml0ZXJpb24gYnlcbiAgICAgKiB3aGljaCB1bmlxdWVuZXNzIGlzIGNvbXB1dGVkLiBSZXN1bHQgdmFsdWVzIGFyZSBjaG9zZW4gZnJvbSB0aGUgZmlyc3RcbiAgICAgKiBhcnJheSBpbiB3aGljaCB0aGUgdmFsdWUgb2NjdXJzLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDpcbiAgICAgKiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBjb21iaW5lZCB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udW5pb25CeShbMi4xXSwgWzEuMiwgMi4zXSwgTWF0aC5mbG9vcik7XG4gICAgICogLy8gPT4gWzIuMSwgMS4yXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy51bmlvbkJ5KFt7ICd4JzogMSB9XSwgW3sgJ3gnOiAyIH0sIHsgJ3gnOiAxIH1dLCAneCcpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMSB9LCB7ICd4JzogMiB9XVxuICAgICAqL1xuICAgIHZhciB1bmlvbkJ5ID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXlzKSB7XG4gICAgICB2YXIgaXRlcmF0ZWUgPSBsYXN0KGFycmF5cyk7XG4gICAgICBpZiAoaXNBcnJheUxpa2VPYmplY3QoaXRlcmF0ZWUpKSB7XG4gICAgICAgIGl0ZXJhdGVlID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VVbmlxKGJhc2VGbGF0dGVuKGFycmF5cywgMSwgaXNBcnJheUxpa2VPYmplY3QsIHRydWUpLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMikpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy51bmlvbmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY29tcGFyYXRvcmAgd2hpY2hcbiAgICAgKiBpcyBpbnZva2VkIHRvIGNvbXBhcmUgZWxlbWVudHMgb2YgYGFycmF5c2AuIFJlc3VsdCB2YWx1ZXMgYXJlIGNob3NlbiBmcm9tXG4gICAgICogdGhlIGZpcnN0IGFycmF5IGluIHdoaWNoIHRoZSB2YWx1ZSBvY2N1cnMuIFRoZSBjb21wYXJhdG9yIGlzIGludm9rZWRcbiAgICAgKiB3aXRoIHR3byBhcmd1bWVudHM6IChhcnJWYWwsIG90aFZhbCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXlzXSBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgY29tYmluZWQgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICd4JzogMSwgJ3knOiAyIH0sIHsgJ3gnOiAyLCAneSc6IDEgfV07XG4gICAgICogdmFyIG90aGVycyA9IFt7ICd4JzogMSwgJ3knOiAxIH0sIHsgJ3gnOiAxLCAneSc6IDIgfV07XG4gICAgICpcbiAgICAgKiBfLnVuaW9uV2l0aChvYmplY3RzLCBvdGhlcnMsIF8uaXNFcXVhbCk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAxLCAneSc6IDIgfSwgeyAneCc6IDIsICd5JzogMSB9LCB7ICd4JzogMSwgJ3knOiAxIH1dXG4gICAgICovXG4gICAgdmFyIHVuaW9uV2l0aCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICAgICAgdmFyIGNvbXBhcmF0b3IgPSBsYXN0KGFycmF5cyk7XG4gICAgICBjb21wYXJhdG9yID0gdHlwZW9mIGNvbXBhcmF0b3IgPT0gJ2Z1bmN0aW9uJyA/IGNvbXBhcmF0b3IgOiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gYmFzZVVuaXEoYmFzZUZsYXR0ZW4oYXJyYXlzLCAxLCBpc0FycmF5TGlrZU9iamVjdCwgdHJ1ZSksIHVuZGVmaW5lZCwgY29tcGFyYXRvcik7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZHVwbGljYXRlLWZyZWUgdmVyc2lvbiBvZiBhbiBhcnJheSwgdXNpbmdcbiAgICAgKiBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICAgICAqIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucywgaW4gd2hpY2ggb25seSB0aGUgZmlyc3Qgb2NjdXJyZW5jZSBvZiBlYWNoIGVsZW1lbnRcbiAgICAgKiBpcyBrZXB0LiBUaGUgb3JkZXIgb2YgcmVzdWx0IHZhbHVlcyBpcyBkZXRlcm1pbmVkIGJ5IHRoZSBvcmRlciB0aGV5IG9jY3VyXG4gICAgICogaW4gdGhlIGFycmF5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZHVwbGljYXRlIGZyZWUgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udW5pcShbMiwgMSwgMl0pO1xuICAgICAqIC8vID0+IFsyLCAxXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVuaXEoYXJyYXkpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKSA/IGJhc2VVbmlxKGFycmF5KSA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8udW5pcWAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCBmb3IgZWFjaCBlbGVtZW50IGluIGBhcnJheWAgdG8gZ2VuZXJhdGUgdGhlIGNyaXRlcmlvbiBieSB3aGljaFxuICAgICAqIHVuaXF1ZW5lc3MgaXMgY29tcHV0ZWQuIFRoZSBvcmRlciBvZiByZXN1bHQgdmFsdWVzIGlzIGRldGVybWluZWQgYnkgdGhlXG4gICAgICogb3JkZXIgdGhleSBvY2N1ciBpbiB0aGUgYXJyYXkuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OlxuICAgICAqICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZHVwbGljYXRlIGZyZWUgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udW5pcUJ5KFsyLjEsIDEuMiwgMi4zXSwgTWF0aC5mbG9vcik7XG4gICAgICogLy8gPT4gWzIuMSwgMS4yXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy51bmlxQnkoW3sgJ3gnOiAxIH0sIHsgJ3gnOiAyIH0sIHsgJ3gnOiAxIH1dLCAneCcpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMSB9LCB7ICd4JzogMiB9XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVuaXFCeShhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKSA/IGJhc2VVbmlxKGFycmF5LCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMikpIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy51bmlxYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjb21wYXJhdG9yYCB3aGljaFxuICAgICAqIGlzIGludm9rZWQgdG8gY29tcGFyZSBlbGVtZW50cyBvZiBgYXJyYXlgLiBUaGUgb3JkZXIgb2YgcmVzdWx0IHZhbHVlcyBpc1xuICAgICAqIGRldGVybWluZWQgYnkgdGhlIG9yZGVyIHRoZXkgb2NjdXIgaW4gdGhlIGFycmF5LlRoZSBjb21wYXJhdG9yIGlzIGludm9rZWRcbiAgICAgKiB3aXRoIHR3byBhcmd1bWVudHM6IChhcnJWYWwsIG90aFZhbCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29tcGFyYXRvcl0gVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBkdXBsaWNhdGUgZnJlZSBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAneCc6IDEsICd5JzogMiB9LCB7ICd4JzogMiwgJ3knOiAxIH0sIHsgJ3gnOiAxLCAneSc6IDIgfV07XG4gICAgICpcbiAgICAgKiBfLnVuaXFXaXRoKG9iamVjdHMsIF8uaXNFcXVhbCk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAxLCAneSc6IDIgfSwgeyAneCc6IDIsICd5JzogMSB9XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVuaXFXaXRoKGFycmF5LCBjb21wYXJhdG9yKSB7XG4gICAgICBjb21wYXJhdG9yID0gdHlwZW9mIGNvbXBhcmF0b3IgPT0gJ2Z1bmN0aW9uJyA/IGNvbXBhcmF0b3IgOiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aCkgPyBiYXNlVW5pcShhcnJheSwgdW5kZWZpbmVkLCBjb21wYXJhdG9yKSA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uemlwYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGFuIGFycmF5IG9mIGdyb3VwZWRcbiAgICAgKiBlbGVtZW50cyBhbmQgY3JlYXRlcyBhbiBhcnJheSByZWdyb3VwaW5nIHRoZSBlbGVtZW50cyB0byB0aGVpciBwcmUtemlwXG4gICAgICogY29uZmlndXJhdGlvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAxLjIuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSBvZiBncm91cGVkIGVsZW1lbnRzIHRvIHByb2Nlc3MuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgcmVncm91cGVkIGVsZW1lbnRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgemlwcGVkID0gXy56aXAoWydhJywgJ2InXSwgWzEsIDJdLCBbdHJ1ZSwgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiBbWydhJywgMSwgdHJ1ZV0sIFsnYicsIDIsIGZhbHNlXV1cbiAgICAgKlxuICAgICAqIF8udW56aXAoemlwcGVkKTtcbiAgICAgKiAvLyA9PiBbWydhJywgJ2InXSwgWzEsIDJdLCBbdHJ1ZSwgZmFsc2VdXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVuemlwKGFycmF5KSB7XG4gICAgICBpZiAoIShhcnJheSAmJiBhcnJheS5sZW5ndGgpKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIHZhciBsZW5ndGggPSAwO1xuICAgICAgYXJyYXkgPSBhcnJheUZpbHRlcihhcnJheSwgZnVuY3Rpb24oZ3JvdXApIHtcbiAgICAgICAgaWYgKGlzQXJyYXlMaWtlT2JqZWN0KGdyb3VwKSkge1xuICAgICAgICAgIGxlbmd0aCA9IG5hdGl2ZU1heChncm91cC5sZW5ndGgsIGxlbmd0aCk7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGJhc2VUaW1lcyhsZW5ndGgsIGZ1bmN0aW9uKGluZGV4KSB7XG4gICAgICAgIHJldHVybiBhcnJheU1hcChhcnJheSwgYmFzZVByb3BlcnR5KGluZGV4KSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnVuemlwYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWAgdG8gc3BlY2lmeVxuICAgICAqIGhvdyByZWdyb3VwZWQgdmFsdWVzIHNob3VsZCBiZSBjb21iaW5lZC4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCB0aGVcbiAgICAgKiBlbGVtZW50cyBvZiBlYWNoIGdyb3VwOiAoLi4uZ3JvdXApLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuOC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IG9mIGdyb3VwZWQgZWxlbWVudHMgdG8gcHJvY2Vzcy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIHRvIGNvbWJpbmVcbiAgICAgKiAgcmVncm91cGVkIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiByZWdyb3VwZWQgZWxlbWVudHMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB6aXBwZWQgPSBfLnppcChbMSwgMl0sIFsxMCwgMjBdLCBbMTAwLCAyMDBdKTtcbiAgICAgKiAvLyA9PiBbWzEsIDEwLCAxMDBdLCBbMiwgMjAsIDIwMF1dXG4gICAgICpcbiAgICAgKiBfLnVuemlwV2l0aCh6aXBwZWQsIF8uYWRkKTtcbiAgICAgKiAvLyA9PiBbMywgMzAsIDMwMF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1bnppcFdpdGgoYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgICBpZiAoIShhcnJheSAmJiBhcnJheS5sZW5ndGgpKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHQgPSB1bnppcChhcnJheSk7XG4gICAgICBpZiAoaXRlcmF0ZWUgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFycmF5TWFwKHJlc3VsdCwgZnVuY3Rpb24oZ3JvdXApIHtcbiAgICAgICAgcmV0dXJuIGFwcGx5KGl0ZXJhdGVlLCB1bmRlZmluZWQsIGdyb3VwKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgZXhjbHVkaW5nIGFsbCBnaXZlbiB2YWx1ZXMgdXNpbmdcbiAgICAgKiBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICAgICAqIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgYF8ucHVsbGAsIHRoaXMgbWV0aG9kIHJldHVybnMgYSBuZXcgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0gey4uLip9IFt2YWx1ZXNdIFRoZSB2YWx1ZXMgdG8gZXhjbHVkZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBmaWx0ZXJlZCB2YWx1ZXMuXG4gICAgICogQHNlZSBfLmRpZmZlcmVuY2UsIF8ueG9yXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ud2l0aG91dChbMiwgMSwgMiwgM10sIDEsIDIpO1xuICAgICAqIC8vID0+IFszXVxuICAgICAqL1xuICAgIHZhciB3aXRob3V0ID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXksIHZhbHVlcykge1xuICAgICAgcmV0dXJuIGlzQXJyYXlMaWtlT2JqZWN0KGFycmF5KVxuICAgICAgICA/IGJhc2VEaWZmZXJlbmNlKGFycmF5LCB2YWx1ZXMpXG4gICAgICAgIDogW107XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHVuaXF1ZSB2YWx1ZXMgdGhhdCBpcyB0aGVcbiAgICAgKiBbc3ltbWV0cmljIGRpZmZlcmVuY2VdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1N5bW1ldHJpY19kaWZmZXJlbmNlKVxuICAgICAqIG9mIHRoZSBnaXZlbiBhcnJheXMuIFRoZSBvcmRlciBvZiByZXN1bHQgdmFsdWVzIGlzIGRldGVybWluZWQgYnkgdGhlIG9yZGVyXG4gICAgICogdGhleSBvY2N1ciBpbiB0aGUgYXJyYXlzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuNC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGZpbHRlcmVkIHZhbHVlcy5cbiAgICAgKiBAc2VlIF8uZGlmZmVyZW5jZSwgXy53aXRob3V0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ueG9yKFsyLCAxXSwgWzIsIDNdKTtcbiAgICAgKiAvLyA9PiBbMSwgM11cbiAgICAgKi9cbiAgICB2YXIgeG9yID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXlzKSB7XG4gICAgICByZXR1cm4gYmFzZVhvcihhcnJheUZpbHRlcihhcnJheXMsIGlzQXJyYXlMaWtlT2JqZWN0KSk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnhvcmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCBmb3IgZWFjaCBlbGVtZW50IG9mIGVhY2ggYGFycmF5c2AgdG8gZ2VuZXJhdGUgdGhlIGNyaXRlcmlvbiBieVxuICAgICAqIHdoaWNoIGJ5IHdoaWNoIHRoZXkncmUgY29tcGFyZWQuIFRoZSBvcmRlciBvZiByZXN1bHQgdmFsdWVzIGlzIGRldGVybWluZWRcbiAgICAgKiBieSB0aGUgb3JkZXIgdGhleSBvY2N1ciBpbiB0aGUgYXJyYXlzLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZVxuICAgICAqIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBmaWx0ZXJlZCB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ueG9yQnkoWzIuMSwgMS4yXSwgWzIuMywgMy40XSwgTWF0aC5mbG9vcik7XG4gICAgICogLy8gPT4gWzEuMiwgMy40XVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy54b3JCeShbeyAneCc6IDEgfV0sIFt7ICd4JzogMiB9LCB7ICd4JzogMSB9XSwgJ3gnKTtcbiAgICAgKiAvLyA9PiBbeyAneCc6IDIgfV1cbiAgICAgKi9cbiAgICB2YXIgeG9yQnkgPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheXMpIHtcbiAgICAgIHZhciBpdGVyYXRlZSA9IGxhc3QoYXJyYXlzKTtcbiAgICAgIGlmIChpc0FycmF5TGlrZU9iamVjdChpdGVyYXRlZSkpIHtcbiAgICAgICAgaXRlcmF0ZWUgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZVhvcihhcnJheUZpbHRlcihhcnJheXMsIGlzQXJyYXlMaWtlT2JqZWN0KSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ueG9yYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjb21wYXJhdG9yYCB3aGljaCBpc1xuICAgICAqIGludm9rZWQgdG8gY29tcGFyZSBlbGVtZW50cyBvZiBgYXJyYXlzYC4gVGhlIG9yZGVyIG9mIHJlc3VsdCB2YWx1ZXMgaXNcbiAgICAgKiBkZXRlcm1pbmVkIGJ5IHRoZSBvcmRlciB0aGV5IG9jY3VyIGluIHRoZSBhcnJheXMuIFRoZSBjb21wYXJhdG9yIGlzIGludm9rZWRcbiAgICAgKiB3aXRoIHR3byBhcmd1bWVudHM6IChhcnJWYWwsIG90aFZhbCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXlzXSBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZmlsdGVyZWQgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICd4JzogMSwgJ3knOiAyIH0sIHsgJ3gnOiAyLCAneSc6IDEgfV07XG4gICAgICogdmFyIG90aGVycyA9IFt7ICd4JzogMSwgJ3knOiAxIH0sIHsgJ3gnOiAxLCAneSc6IDIgfV07XG4gICAgICpcbiAgICAgKiBfLnhvcldpdGgob2JqZWN0cywgb3RoZXJzLCBfLmlzRXF1YWwpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMiwgJ3knOiAxIH0sIHsgJ3gnOiAxLCAneSc6IDEgfV1cbiAgICAgKi9cbiAgICB2YXIgeG9yV2l0aCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICAgICAgdmFyIGNvbXBhcmF0b3IgPSBsYXN0KGFycmF5cyk7XG4gICAgICBjb21wYXJhdG9yID0gdHlwZW9mIGNvbXBhcmF0b3IgPT0gJ2Z1bmN0aW9uJyA/IGNvbXBhcmF0b3IgOiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gYmFzZVhvcihhcnJheUZpbHRlcihhcnJheXMsIGlzQXJyYXlMaWtlT2JqZWN0KSwgdW5kZWZpbmVkLCBjb21wYXJhdG9yKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgZ3JvdXBlZCBlbGVtZW50cywgdGhlIGZpcnN0IG9mIHdoaWNoIGNvbnRhaW5zIHRoZVxuICAgICAqIGZpcnN0IGVsZW1lbnRzIG9mIHRoZSBnaXZlbiBhcnJheXMsIHRoZSBzZWNvbmQgb2Ygd2hpY2ggY29udGFpbnMgdGhlXG4gICAgICogc2Vjb25kIGVsZW1lbnRzIG9mIHRoZSBnaXZlbiBhcnJheXMsIGFuZCBzbyBvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gcHJvY2Vzcy5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBncm91cGVkIGVsZW1lbnRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnppcChbJ2EnLCAnYiddLCBbMSwgMl0sIFt0cnVlLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IFtbJ2EnLCAxLCB0cnVlXSwgWydiJywgMiwgZmFsc2VdXVxuICAgICAqL1xuICAgIHZhciB6aXAgPSBiYXNlUmVzdCh1bnppcCk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZyb21QYWlyc2AgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyB0d28gYXJyYXlzLFxuICAgICAqIG9uZSBvZiBwcm9wZXJ0eSBpZGVudGlmaWVycyBhbmQgb25lIG9mIGNvcnJlc3BvbmRpbmcgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuNC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gW3Byb3BzPVtdXSBUaGUgcHJvcGVydHkgaWRlbnRpZmllcnMuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW3ZhbHVlcz1bXV0gVGhlIHByb3BlcnR5IHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnppcE9iamVjdChbJ2EnLCAnYiddLCBbMSwgMl0pO1xuICAgICAqIC8vID0+IHsgJ2EnOiAxLCAnYic6IDIgfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHppcE9iamVjdChwcm9wcywgdmFsdWVzKSB7XG4gICAgICByZXR1cm4gYmFzZVppcE9iamVjdChwcm9wcyB8fCBbXSwgdmFsdWVzIHx8IFtdLCBhc3NpZ25WYWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy56aXBPYmplY3RgIGV4Y2VwdCB0aGF0IGl0IHN1cHBvcnRzIHByb3BlcnR5IHBhdGhzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gW3Byb3BzPVtdXSBUaGUgcHJvcGVydHkgaWRlbnRpZmllcnMuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW3ZhbHVlcz1bXV0gVGhlIHByb3BlcnR5IHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnppcE9iamVjdERlZXAoWydhLmJbMF0uYycsICdhLmJbMV0uZCddLCBbMSwgMl0pO1xuICAgICAqIC8vID0+IHsgJ2EnOiB7ICdiJzogW3sgJ2MnOiAxIH0sIHsgJ2QnOiAyIH1dIH0gfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHppcE9iamVjdERlZXAocHJvcHMsIHZhbHVlcykge1xuICAgICAgcmV0dXJuIGJhc2VaaXBPYmplY3QocHJvcHMgfHwgW10sIHZhbHVlcyB8fCBbXSwgYmFzZVNldCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy56aXBgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB0byBzcGVjaWZ5XG4gICAgICogaG93IGdyb3VwZWQgdmFsdWVzIHNob3VsZCBiZSBjb21iaW5lZC4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCB0aGVcbiAgICAgKiBlbGVtZW50cyBvZiBlYWNoIGdyb3VwOiAoLi4uZ3JvdXApLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuOC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBwcm9jZXNzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gdG8gY29tYmluZVxuICAgICAqICBncm91cGVkIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBncm91cGVkIGVsZW1lbnRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnppcFdpdGgoWzEsIDJdLCBbMTAsIDIwXSwgWzEwMCwgMjAwXSwgZnVuY3Rpb24oYSwgYiwgYykge1xuICAgICAqICAgcmV0dXJuIGEgKyBiICsgYztcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiBbMTExLCAyMjJdXG4gICAgICovXG4gICAgdmFyIHppcFdpdGggPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheXMpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheXMubGVuZ3RoLFxuICAgICAgICAgIGl0ZXJhdGVlID0gbGVuZ3RoID4gMSA/IGFycmF5c1tsZW5ndGggLSAxXSA6IHVuZGVmaW5lZDtcblxuICAgICAgaXRlcmF0ZWUgPSB0eXBlb2YgaXRlcmF0ZWUgPT0gJ2Z1bmN0aW9uJyA/IChhcnJheXMucG9wKCksIGl0ZXJhdGVlKSA6IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiB1bnppcFdpdGgoYXJyYXlzLCBpdGVyYXRlZSk7XG4gICAgfSk7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgYGxvZGFzaGAgd3JhcHBlciBpbnN0YW5jZSB0aGF0IHdyYXBzIGB2YWx1ZWAgd2l0aCBleHBsaWNpdCBtZXRob2RcbiAgICAgKiBjaGFpbiBzZXF1ZW5jZXMgZW5hYmxlZC4gVGhlIHJlc3VsdCBvZiBzdWNoIHNlcXVlbmNlcyBtdXN0IGJlIHVud3JhcHBlZFxuICAgICAqIHdpdGggYF8jdmFsdWVgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDEuMy4wXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHdyYXAuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IGBsb2Rhc2hgIHdyYXBwZXIgaW5zdGFuY2UuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgICdhZ2UnOiAzNiB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FnZSc6IDQwIH0sXG4gICAgICogICB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWdlJzogMSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIHZhciB5b3VuZ2VzdCA9IF9cbiAgICAgKiAgIC5jaGFpbih1c2VycylcbiAgICAgKiAgIC5zb3J0QnkoJ2FnZScpXG4gICAgICogICAubWFwKGZ1bmN0aW9uKG8pIHtcbiAgICAgKiAgICAgcmV0dXJuIG8udXNlciArICcgaXMgJyArIG8uYWdlO1xuICAgICAqICAgfSlcbiAgICAgKiAgIC5oZWFkKClcbiAgICAgKiAgIC52YWx1ZSgpO1xuICAgICAqIC8vID0+ICdwZWJibGVzIGlzIDEnXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2hhaW4odmFsdWUpIHtcbiAgICAgIHZhciByZXN1bHQgPSBsb2Rhc2godmFsdWUpO1xuICAgICAgcmVzdWx0Ll9fY2hhaW5fXyA9IHRydWU7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGludm9rZXMgYGludGVyY2VwdG9yYCBhbmQgcmV0dXJucyBgdmFsdWVgLiBUaGUgaW50ZXJjZXB0b3JcbiAgICAgKiBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OyAodmFsdWUpLiBUaGUgcHVycG9zZSBvZiB0aGlzIG1ldGhvZCBpcyB0b1xuICAgICAqIFwidGFwIGludG9cIiBhIG1ldGhvZCBjaGFpbiBzZXF1ZW5jZSBpbiBvcmRlciB0byBtb2RpZnkgaW50ZXJtZWRpYXRlIHJlc3VsdHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcHJvdmlkZSB0byBgaW50ZXJjZXB0b3JgLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGludGVyY2VwdG9yIFRoZSBmdW5jdGlvbiB0byBpbnZva2UuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgYHZhbHVlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXyhbMSwgMiwgM10pXG4gICAgICogIC50YXAoZnVuY3Rpb24oYXJyYXkpIHtcbiAgICAgKiAgICAvLyBNdXRhdGUgaW5wdXQgYXJyYXkuXG4gICAgICogICAgYXJyYXkucG9wKCk7XG4gICAgICogIH0pXG4gICAgICogIC5yZXZlcnNlKClcbiAgICAgKiAgLnZhbHVlKCk7XG4gICAgICogLy8gPT4gWzIsIDFdXG4gICAgICovXG4gICAgZnVuY3Rpb24gdGFwKHZhbHVlLCBpbnRlcmNlcHRvcikge1xuICAgICAgaW50ZXJjZXB0b3IodmFsdWUpO1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8udGFwYCBleGNlcHQgdGhhdCBpdCByZXR1cm5zIHRoZSByZXN1bHQgb2YgYGludGVyY2VwdG9yYC5cbiAgICAgKiBUaGUgcHVycG9zZSBvZiB0aGlzIG1ldGhvZCBpcyB0byBcInBhc3MgdGhydVwiIHZhbHVlcyByZXBsYWNpbmcgaW50ZXJtZWRpYXRlXG4gICAgICogcmVzdWx0cyBpbiBhIG1ldGhvZCBjaGFpbiBzZXF1ZW5jZS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwcm92aWRlIHRvIGBpbnRlcmNlcHRvcmAuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaW50ZXJjZXB0b3IgVGhlIGZ1bmN0aW9uIHRvIGludm9rZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzdWx0IG9mIGBpbnRlcmNlcHRvcmAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8oJyAgYWJjICAnKVxuICAgICAqICAuY2hhaW4oKVxuICAgICAqICAudHJpbSgpXG4gICAgICogIC50aHJ1KGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICogICAgcmV0dXJuIFt2YWx1ZV07XG4gICAgICogIH0pXG4gICAgICogIC52YWx1ZSgpO1xuICAgICAqIC8vID0+IFsnYWJjJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0aHJ1KHZhbHVlLCBpbnRlcmNlcHRvcikge1xuICAgICAgcmV0dXJuIGludGVyY2VwdG9yKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyB0aGUgd3JhcHBlciB2ZXJzaW9uIG9mIGBfLmF0YC5cbiAgICAgKlxuICAgICAqIEBuYW1lIGF0XG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMS4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHBhcmFtIHsuLi4oc3RyaW5nfHN0cmluZ1tdKX0gW3BhdGhzXSBUaGUgcHJvcGVydHkgcGF0aHMgdG8gcGljay5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgYGxvZGFzaGAgd3JhcHBlciBpbnN0YW5jZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiBbeyAnYic6IHsgJ2MnOiAzIH0gfSwgNF0gfTtcbiAgICAgKlxuICAgICAqIF8ob2JqZWN0KS5hdChbJ2FbMF0uYi5jJywgJ2FbMV0nXSkudmFsdWUoKTtcbiAgICAgKiAvLyA9PiBbMywgNF1cbiAgICAgKi9cbiAgICB2YXIgd3JhcHBlckF0ID0gZmxhdFJlc3QoZnVuY3Rpb24ocGF0aHMpIHtcbiAgICAgIHZhciBsZW5ndGggPSBwYXRocy5sZW5ndGgsXG4gICAgICAgICAgc3RhcnQgPSBsZW5ndGggPyBwYXRoc1swXSA6IDAsXG4gICAgICAgICAgdmFsdWUgPSB0aGlzLl9fd3JhcHBlZF9fLFxuICAgICAgICAgIGludGVyY2VwdG9yID0gZnVuY3Rpb24ob2JqZWN0KSB7IHJldHVybiBiYXNlQXQob2JqZWN0LCBwYXRocyk7IH07XG5cbiAgICAgIGlmIChsZW5ndGggPiAxIHx8IHRoaXMuX19hY3Rpb25zX18ubGVuZ3RoIHx8XG4gICAgICAgICAgISh2YWx1ZSBpbnN0YW5jZW9mIExhenlXcmFwcGVyKSB8fCAhaXNJbmRleChzdGFydCkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudGhydShpbnRlcmNlcHRvcik7XG4gICAgICB9XG4gICAgICB2YWx1ZSA9IHZhbHVlLnNsaWNlKHN0YXJ0LCArc3RhcnQgKyAobGVuZ3RoID8gMSA6IDApKTtcbiAgICAgIHZhbHVlLl9fYWN0aW9uc19fLnB1c2goe1xuICAgICAgICAnZnVuYyc6IHRocnUsXG4gICAgICAgICdhcmdzJzogW2ludGVyY2VwdG9yXSxcbiAgICAgICAgJ3RoaXNBcmcnOiB1bmRlZmluZWRcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIG5ldyBMb2Rhc2hXcmFwcGVyKHZhbHVlLCB0aGlzLl9fY2hhaW5fXykudGhydShmdW5jdGlvbihhcnJheSkge1xuICAgICAgICBpZiAobGVuZ3RoICYmICFhcnJheS5sZW5ndGgpIHtcbiAgICAgICAgICBhcnJheS5wdXNoKHVuZGVmaW5lZCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFycmF5O1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgYGxvZGFzaGAgd3JhcHBlciBpbnN0YW5jZSB3aXRoIGV4cGxpY2l0IG1ldGhvZCBjaGFpbiBzZXF1ZW5jZXMgZW5hYmxlZC5cbiAgICAgKlxuICAgICAqIEBuYW1lIGNoYWluXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IGBsb2Rhc2hgIHdyYXBwZXIgaW5zdGFuY2UuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM2IH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhZ2UnOiA0MCB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIC8vIEEgc2VxdWVuY2Ugd2l0aG91dCBleHBsaWNpdCBjaGFpbmluZy5cbiAgICAgKiBfKHVzZXJzKS5oZWFkKCk7XG4gICAgICogLy8gPT4geyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzYgfVxuICAgICAqXG4gICAgICogLy8gQSBzZXF1ZW5jZSB3aXRoIGV4cGxpY2l0IGNoYWluaW5nLlxuICAgICAqIF8odXNlcnMpXG4gICAgICogICAuY2hhaW4oKVxuICAgICAqICAgLmhlYWQoKVxuICAgICAqICAgLnBpY2soJ3VzZXInKVxuICAgICAqICAgLnZhbHVlKCk7XG4gICAgICogLy8gPT4geyAndXNlcic6ICdiYXJuZXknIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3cmFwcGVyQ2hhaW4oKSB7XG4gICAgICByZXR1cm4gY2hhaW4odGhpcyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRXhlY3V0ZXMgdGhlIGNoYWluIHNlcXVlbmNlIGFuZCByZXR1cm5zIHRoZSB3cmFwcGVkIHJlc3VsdC5cbiAgICAgKlxuICAgICAqIEBuYW1lIGNvbW1pdFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMi4wXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBgbG9kYXNoYCB3cmFwcGVyIGluc3RhbmNlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbMSwgMl07XG4gICAgICogdmFyIHdyYXBwZWQgPSBfKGFycmF5KS5wdXNoKDMpO1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFsxLCAyXVxuICAgICAqXG4gICAgICogd3JhcHBlZCA9IHdyYXBwZWQuY29tbWl0KCk7XG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqXG4gICAgICogd3JhcHBlZC5sYXN0KCk7XG4gICAgICogLy8gPT4gM1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdyYXBwZXJDb21taXQoKSB7XG4gICAgICByZXR1cm4gbmV3IExvZGFzaFdyYXBwZXIodGhpcy52YWx1ZSgpLCB0aGlzLl9fY2hhaW5fXyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgbmV4dCB2YWx1ZSBvbiBhIHdyYXBwZWQgb2JqZWN0IGZvbGxvd2luZyB0aGVcbiAgICAgKiBbaXRlcmF0b3IgcHJvdG9jb2xdKGh0dHBzOi8vbWRuLmlvL2l0ZXJhdGlvbl9wcm90b2NvbHMjaXRlcmF0b3IpLlxuICAgICAqXG4gICAgICogQG5hbWUgbmV4dFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5leHQgaXRlcmF0b3IgdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB3cmFwcGVkID0gXyhbMSwgMl0pO1xuICAgICAqXG4gICAgICogd3JhcHBlZC5uZXh0KCk7XG4gICAgICogLy8gPT4geyAnZG9uZSc6IGZhbHNlLCAndmFsdWUnOiAxIH1cbiAgICAgKlxuICAgICAqIHdyYXBwZWQubmV4dCgpO1xuICAgICAqIC8vID0+IHsgJ2RvbmUnOiBmYWxzZSwgJ3ZhbHVlJzogMiB9XG4gICAgICpcbiAgICAgKiB3cmFwcGVkLm5leHQoKTtcbiAgICAgKiAvLyA9PiB7ICdkb25lJzogdHJ1ZSwgJ3ZhbHVlJzogdW5kZWZpbmVkIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3cmFwcGVyTmV4dCgpIHtcbiAgICAgIGlmICh0aGlzLl9fdmFsdWVzX18gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aGlzLl9fdmFsdWVzX18gPSB0b0FycmF5KHRoaXMudmFsdWUoKSk7XG4gICAgICB9XG4gICAgICB2YXIgZG9uZSA9IHRoaXMuX19pbmRleF9fID49IHRoaXMuX192YWx1ZXNfXy5sZW5ndGgsXG4gICAgICAgICAgdmFsdWUgPSBkb25lID8gdW5kZWZpbmVkIDogdGhpcy5fX3ZhbHVlc19fW3RoaXMuX19pbmRleF9fKytdO1xuXG4gICAgICByZXR1cm4geyAnZG9uZSc6IGRvbmUsICd2YWx1ZSc6IHZhbHVlIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRW5hYmxlcyB0aGUgd3JhcHBlciB0byBiZSBpdGVyYWJsZS5cbiAgICAgKlxuICAgICAqIEBuYW1lIFN5bWJvbC5pdGVyYXRvclxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIHdyYXBwZXIgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgd3JhcHBlZCA9IF8oWzEsIDJdKTtcbiAgICAgKlxuICAgICAqIHdyYXBwZWRbU3ltYm9sLml0ZXJhdG9yXSgpID09PSB3cmFwcGVkO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIEFycmF5LmZyb20od3JhcHBlZCk7XG4gICAgICogLy8gPT4gWzEsIDJdXG4gICAgICovXG4gICAgZnVuY3Rpb24gd3JhcHBlclRvSXRlcmF0b3IoKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY2xvbmUgb2YgdGhlIGNoYWluIHNlcXVlbmNlIHBsYW50aW5nIGB2YWx1ZWAgYXMgdGhlIHdyYXBwZWQgdmFsdWUuXG4gICAgICpcbiAgICAgKiBAbmFtZSBwbGFudFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMi4wXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHBsYW50LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBgbG9kYXNoYCB3cmFwcGVyIGluc3RhbmNlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBzcXVhcmUobikge1xuICAgICAqICAgcmV0dXJuIG4gKiBuO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciB3cmFwcGVkID0gXyhbMSwgMl0pLm1hcChzcXVhcmUpO1xuICAgICAqIHZhciBvdGhlciA9IHdyYXBwZWQucGxhbnQoWzMsIDRdKTtcbiAgICAgKlxuICAgICAqIG90aGVyLnZhbHVlKCk7XG4gICAgICogLy8gPT4gWzksIDE2XVxuICAgICAqXG4gICAgICogd3JhcHBlZC52YWx1ZSgpO1xuICAgICAqIC8vID0+IFsxLCA0XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdyYXBwZXJQbGFudCh2YWx1ZSkge1xuICAgICAgdmFyIHJlc3VsdCxcbiAgICAgICAgICBwYXJlbnQgPSB0aGlzO1xuXG4gICAgICB3aGlsZSAocGFyZW50IGluc3RhbmNlb2YgYmFzZUxvZGFzaCkge1xuICAgICAgICB2YXIgY2xvbmUgPSB3cmFwcGVyQ2xvbmUocGFyZW50KTtcbiAgICAgICAgY2xvbmUuX19pbmRleF9fID0gMDtcbiAgICAgICAgY2xvbmUuX192YWx1ZXNfXyA9IHVuZGVmaW5lZDtcbiAgICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAgIHByZXZpb3VzLl9fd3JhcHBlZF9fID0gY2xvbmU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzdWx0ID0gY2xvbmU7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHByZXZpb3VzID0gY2xvbmU7XG4gICAgICAgIHBhcmVudCA9IHBhcmVudC5fX3dyYXBwZWRfXztcbiAgICAgIH1cbiAgICAgIHByZXZpb3VzLl9fd3JhcHBlZF9fID0gdmFsdWU7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIHRoZSB3cmFwcGVyIHZlcnNpb24gb2YgYF8ucmV2ZXJzZWAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyB0aGUgd3JhcHBlZCBhcnJheS5cbiAgICAgKlxuICAgICAqIEBuYW1lIHJldmVyc2VcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgYGxvZGFzaGAgd3JhcHBlciBpbnN0YW5jZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWzEsIDIsIDNdO1xuICAgICAqXG4gICAgICogXyhhcnJheSkucmV2ZXJzZSgpLnZhbHVlKClcbiAgICAgKiAvLyA9PiBbMywgMiwgMV1cbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbMywgMiwgMV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3cmFwcGVyUmV2ZXJzZSgpIHtcbiAgICAgIHZhciB2YWx1ZSA9IHRoaXMuX193cmFwcGVkX187XG4gICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBMYXp5V3JhcHBlcikge1xuICAgICAgICB2YXIgd3JhcHBlZCA9IHZhbHVlO1xuICAgICAgICBpZiAodGhpcy5fX2FjdGlvbnNfXy5sZW5ndGgpIHtcbiAgICAgICAgICB3cmFwcGVkID0gbmV3IExhenlXcmFwcGVyKHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIHdyYXBwZWQgPSB3cmFwcGVkLnJldmVyc2UoKTtcbiAgICAgICAgd3JhcHBlZC5fX2FjdGlvbnNfXy5wdXNoKHtcbiAgICAgICAgICAnZnVuYyc6IHRocnUsXG4gICAgICAgICAgJ2FyZ3MnOiBbcmV2ZXJzZV0sXG4gICAgICAgICAgJ3RoaXNBcmcnOiB1bmRlZmluZWRcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBuZXcgTG9kYXNoV3JhcHBlcih3cmFwcGVkLCB0aGlzLl9fY2hhaW5fXyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy50aHJ1KHJldmVyc2UpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEV4ZWN1dGVzIHRoZSBjaGFpbiBzZXF1ZW5jZSB0byByZXNvbHZlIHRoZSB1bndyYXBwZWQgdmFsdWUuXG4gICAgICpcbiAgICAgKiBAbmFtZSB2YWx1ZVxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGFsaWFzIHRvSlNPTiwgdmFsdWVPZlxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzb2x2ZWQgdW53cmFwcGVkIHZhbHVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfKFsxLCAyLCAzXSkudmFsdWUoKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3cmFwcGVyVmFsdWUoKSB7XG4gICAgICByZXR1cm4gYmFzZVdyYXBwZXJWYWx1ZSh0aGlzLl9fd3JhcHBlZF9fLCB0aGlzLl9fYWN0aW9uc19fKTtcbiAgICB9XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIG9iamVjdCBjb21wb3NlZCBvZiBrZXlzIGdlbmVyYXRlZCBmcm9tIHRoZSByZXN1bHRzIG9mIHJ1bm5pbmdcbiAgICAgKiBlYWNoIGVsZW1lbnQgb2YgYGNvbGxlY3Rpb25gIHRocnUgYGl0ZXJhdGVlYC4gVGhlIGNvcnJlc3BvbmRpbmcgdmFsdWUgb2ZcbiAgICAgKiBlYWNoIGtleSBpcyB0aGUgbnVtYmVyIG9mIHRpbWVzIHRoZSBrZXkgd2FzIHJldHVybmVkIGJ5IGBpdGVyYXRlZWAuIFRoZVxuICAgICAqIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC41LjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIHRvIHRyYW5zZm9ybSBrZXlzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNvbXBvc2VkIGFnZ3JlZ2F0ZSBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uY291bnRCeShbNi4xLCA0LjIsIDYuM10sIE1hdGguZmxvb3IpO1xuICAgICAqIC8vID0+IHsgJzQnOiAxLCAnNic6IDIgfVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5jb3VudEJ5KFsnb25lJywgJ3R3bycsICd0aHJlZSddLCAnbGVuZ3RoJyk7XG4gICAgICogLy8gPT4geyAnMyc6IDIsICc1JzogMSB9XG4gICAgICovXG4gICAgdmFyIGNvdW50QnkgPSBjcmVhdGVBZ2dyZWdhdG9yKGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkge1xuICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwocmVzdWx0LCBrZXkpKSB7XG4gICAgICAgICsrcmVzdWx0W2tleV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBiYXNlQXNzaWduVmFsdWUocmVzdWx0LCBrZXksIDEpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBwcmVkaWNhdGVgIHJldHVybnMgdHJ1dGh5IGZvciAqKmFsbCoqIGVsZW1lbnRzIG9mIGBjb2xsZWN0aW9uYC5cbiAgICAgKiBJdGVyYXRpb24gaXMgc3RvcHBlZCBvbmNlIGBwcmVkaWNhdGVgIHJldHVybnMgZmFsc2V5LiBUaGUgcHJlZGljYXRlIGlzXG4gICAgICogaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIHJldHVybnMgYHRydWVgIGZvclxuICAgICAqIFtlbXB0eSBjb2xsZWN0aW9uc10oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRW1wdHlfc2V0KSBiZWNhdXNlXG4gICAgICogW2V2ZXJ5dGhpbmcgaXMgdHJ1ZV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvVmFjdW91c190cnV0aCkgb2ZcbiAgICAgKiBlbGVtZW50cyBvZiBlbXB0eSBjb2xsZWN0aW9ucy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbGwgZWxlbWVudHMgcGFzcyB0aGUgcHJlZGljYXRlIGNoZWNrLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZXZlcnkoW3RydWUsIDEsIG51bGwsICd5ZXMnXSwgQm9vbGVhbik7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM2LCAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FnZSc6IDQwLCAnYWN0aXZlJzogZmFsc2UgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZXZlcnkodXNlcnMsIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FjdGl2ZSc6IGZhbHNlIH0pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5ldmVyeSh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZXZlcnkodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGV2ZXJ5KGNvbGxlY3Rpb24sIHByZWRpY2F0ZSwgZ3VhcmQpIHtcbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5RXZlcnkgOiBiYXNlRXZlcnk7XG4gICAgICBpZiAoZ3VhcmQgJiYgaXNJdGVyYXRlZUNhbGwoY29sbGVjdGlvbiwgcHJlZGljYXRlLCBndWFyZCkpIHtcbiAgICAgICAgcHJlZGljYXRlID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSXRlcmF0ZXMgb3ZlciBlbGVtZW50cyBvZiBgY29sbGVjdGlvbmAsIHJldHVybmluZyBhbiBhcnJheSBvZiBhbGwgZWxlbWVudHNcbiAgICAgKiBgcHJlZGljYXRlYCByZXR1cm5zIHRydXRoeSBmb3IuIFRoZSBwcmVkaWNhdGUgaXMgaW52b2tlZCB3aXRoIHRocmVlXG4gICAgICogYXJndW1lbnRzOiAodmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLnJlbW92ZWAsIHRoaXMgbWV0aG9kIHJldHVybnMgYSBuZXcgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmlsdGVyZWQgYXJyYXkuXG4gICAgICogQHNlZSBfLnJlamVjdFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IHRydWUgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FnZSc6IDQwLCAnYWN0aXZlJzogZmFsc2UgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLmZpbHRlcih1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gIW8uYWN0aXZlOyB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2ZyZWQnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbHRlcih1c2VycywgeyAnYWdlJzogMzYsICdhY3RpdmUnOiB0cnVlIH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5J11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbHRlcih1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnZnJlZCddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbHRlcih1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5J11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmaWx0ZXIoY29sbGVjdGlvbiwgcHJlZGljYXRlKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheUZpbHRlciA6IGJhc2VGaWx0ZXI7XG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJdGVyYXRlcyBvdmVyIGVsZW1lbnRzIG9mIGBjb2xsZWN0aW9uYCwgcmV0dXJuaW5nIHRoZSBmaXJzdCBlbGVtZW50XG4gICAgICogYHByZWRpY2F0ZWAgcmV0dXJucyB0cnV0aHkgZm9yLiBUaGUgcHJlZGljYXRlIGlzIGludm9rZWQgd2l0aCB0aHJlZVxuICAgICAqIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2Zyb21JbmRleD0wXSBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1hdGNoZWQgZWxlbWVudCwgZWxzZSBgdW5kZWZpbmVkYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAgJ2FnZSc6IDM2LCAnYWN0aXZlJzogdHJ1ZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FnZSc6IDQwLCAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAncGViYmxlcycsICdhZ2UnOiAxLCAgJ2FjdGl2ZSc6IHRydWUgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLmZpbmQodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8uYWdlIDwgNDA7IH0pO1xuICAgICAqIC8vID0+IG9iamVjdCBmb3IgJ2Jhcm5leSdcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kKHVzZXJzLCB7ICdhZ2UnOiAxLCAnYWN0aXZlJzogdHJ1ZSB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3QgZm9yICdwZWJibGVzJ1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZCh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IG9iamVjdCBmb3IgJ2ZyZWQnXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmQodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiBvYmplY3QgZm9yICdiYXJuZXknXG4gICAgICovXG4gICAgdmFyIGZpbmQgPSBjcmVhdGVGaW5kKGZpbmRJbmRleCk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZpbmRgIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgZWxlbWVudHMgb2ZcbiAgICAgKiBgY29sbGVjdGlvbmAgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMC4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2Zyb21JbmRleD1jb2xsZWN0aW9uLmxlbmd0aC0xXSBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1hdGNoZWQgZWxlbWVudCwgZWxzZSBgdW5kZWZpbmVkYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5maW5kTGFzdChbMSwgMiwgMywgNF0sIGZ1bmN0aW9uKG4pIHtcbiAgICAgKiAgIHJldHVybiBuICUgMiA9PSAxO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IDNcbiAgICAgKi9cbiAgICB2YXIgZmluZExhc3QgPSBjcmVhdGVGaW5kKGZpbmRMYXN0SW5kZXgpO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZsYXR0ZW5lZCBhcnJheSBvZiB2YWx1ZXMgYnkgcnVubmluZyBlYWNoIGVsZW1lbnQgaW4gYGNvbGxlY3Rpb25gXG4gICAgICogdGhydSBgaXRlcmF0ZWVgIGFuZCBmbGF0dGVuaW5nIHRoZSBtYXBwZWQgcmVzdWx0cy4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWRcbiAgICAgKiB3aXRoIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmxhdHRlbmVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBkdXBsaWNhdGUobikge1xuICAgICAqICAgcmV0dXJuIFtuLCBuXTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBfLmZsYXRNYXAoWzEsIDJdLCBkdXBsaWNhdGUpO1xuICAgICAqIC8vID0+IFsxLCAxLCAyLCAyXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZsYXRNYXAoY29sbGVjdGlvbiwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBiYXNlRmxhdHRlbihtYXAoY29sbGVjdGlvbiwgaXRlcmF0ZWUpLCAxKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZsYXRNYXBgIGV4Y2VwdCB0aGF0IGl0IHJlY3Vyc2l2ZWx5IGZsYXR0ZW5zIHRoZVxuICAgICAqIG1hcHBlZCByZXN1bHRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuNy4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmxhdHRlbmVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBkdXBsaWNhdGUobikge1xuICAgICAqICAgcmV0dXJuIFtbW24sIG5dXV07XG4gICAgICogfVxuICAgICAqXG4gICAgICogXy5mbGF0TWFwRGVlcChbMSwgMl0sIGR1cGxpY2F0ZSk7XG4gICAgICogLy8gPT4gWzEsIDEsIDIsIDJdXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmxhdE1hcERlZXAoY29sbGVjdGlvbiwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBiYXNlRmxhdHRlbihtYXAoY29sbGVjdGlvbiwgaXRlcmF0ZWUpLCBJTkZJTklUWSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5mbGF0TWFwYCBleGNlcHQgdGhhdCBpdCByZWN1cnNpdmVseSBmbGF0dGVucyB0aGVcbiAgICAgKiBtYXBwZWQgcmVzdWx0cyB1cCB0byBgZGVwdGhgIHRpbWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuNy4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtkZXB0aD0xXSBUaGUgbWF4aW11bSByZWN1cnNpb24gZGVwdGguXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmxhdHRlbmVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBkdXBsaWNhdGUobikge1xuICAgICAqICAgcmV0dXJuIFtbW24sIG5dXV07XG4gICAgICogfVxuICAgICAqXG4gICAgICogXy5mbGF0TWFwRGVwdGgoWzEsIDJdLCBkdXBsaWNhdGUsIDIpO1xuICAgICAqIC8vID0+IFtbMSwgMV0sIFsyLCAyXV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmbGF0TWFwRGVwdGgoY29sbGVjdGlvbiwgaXRlcmF0ZWUsIGRlcHRoKSB7XG4gICAgICBkZXB0aCA9IGRlcHRoID09PSB1bmRlZmluZWQgPyAxIDogdG9JbnRlZ2VyKGRlcHRoKTtcbiAgICAgIHJldHVybiBiYXNlRmxhdHRlbihtYXAoY29sbGVjdGlvbiwgaXRlcmF0ZWUpLCBkZXB0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSXRlcmF0ZXMgb3ZlciBlbGVtZW50cyBvZiBgY29sbGVjdGlvbmAgYW5kIGludm9rZXMgYGl0ZXJhdGVlYCBmb3IgZWFjaCBlbGVtZW50LlxuICAgICAqIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuXG4gICAgICogSXRlcmF0ZWUgZnVuY3Rpb25zIG1heSBleGl0IGl0ZXJhdGlvbiBlYXJseSBieSBleHBsaWNpdGx5IHJldHVybmluZyBgZmFsc2VgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIEFzIHdpdGggb3RoZXIgXCJDb2xsZWN0aW9uc1wiIG1ldGhvZHMsIG9iamVjdHMgd2l0aCBhIFwibGVuZ3RoXCJcbiAgICAgKiBwcm9wZXJ0eSBhcmUgaXRlcmF0ZWQgbGlrZSBhcnJheXMuIFRvIGF2b2lkIHRoaXMgYmVoYXZpb3IgdXNlIGBfLmZvckluYFxuICAgICAqIG9yIGBfLmZvck93bmAgZm9yIG9iamVjdCBpdGVyYXRpb24uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAYWxpYXMgZWFjaFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheXxPYmplY3R9IFJldHVybnMgYGNvbGxlY3Rpb25gLlxuICAgICAqIEBzZWUgXy5mb3JFYWNoUmlnaHRcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5mb3JFYWNoKFsxLCAyXSwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKHZhbHVlKTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiBMb2dzIGAxYCB0aGVuIGAyYC5cbiAgICAgKlxuICAgICAqIF8uZm9yRWFjaCh7ICdhJzogMSwgJ2InOiAyIH0sIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKGtleSk7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gTG9ncyAnYScgdGhlbiAnYicgKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZCkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZm9yRWFjaChjb2xsZWN0aW9uLCBpdGVyYXRlZSkge1xuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlFYWNoIDogYmFzZUVhY2g7XG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZm9yRWFjaGAgZXhjZXB0IHRoYXQgaXQgaXRlcmF0ZXMgb3ZlciBlbGVtZW50cyBvZlxuICAgICAqIGBjb2xsZWN0aW9uYCBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4wLjBcbiAgICAgKiBAYWxpYXMgZWFjaFJpZ2h0XG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fE9iamVjdH0gUmV0dXJucyBgY29sbGVjdGlvbmAuXG4gICAgICogQHNlZSBfLmZvckVhY2hcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5mb3JFYWNoUmlnaHQoWzEsIDJdLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAqICAgY29uc29sZS5sb2codmFsdWUpO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IExvZ3MgYDJgIHRoZW4gYDFgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZvckVhY2hSaWdodChjb2xsZWN0aW9uLCBpdGVyYXRlZSkge1xuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlFYWNoUmlnaHQgOiBiYXNlRWFjaFJpZ2h0O1xuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDMpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIG9iamVjdCBjb21wb3NlZCBvZiBrZXlzIGdlbmVyYXRlZCBmcm9tIHRoZSByZXN1bHRzIG9mIHJ1bm5pbmdcbiAgICAgKiBlYWNoIGVsZW1lbnQgb2YgYGNvbGxlY3Rpb25gIHRocnUgYGl0ZXJhdGVlYC4gVGhlIG9yZGVyIG9mIGdyb3VwZWQgdmFsdWVzXG4gICAgICogaXMgZGV0ZXJtaW5lZCBieSB0aGUgb3JkZXIgdGhleSBvY2N1ciBpbiBgY29sbGVjdGlvbmAuIFRoZSBjb3JyZXNwb25kaW5nXG4gICAgICogdmFsdWUgb2YgZWFjaCBrZXkgaXMgYW4gYXJyYXkgb2YgZWxlbWVudHMgcmVzcG9uc2libGUgZm9yIGdlbmVyYXRpbmcgdGhlXG4gICAgICoga2V5LiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgdG8gdHJhbnNmb3JtIGtleXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY29tcG9zZWQgYWdncmVnYXRlIG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5ncm91cEJ5KFs2LjEsIDQuMiwgNi4zXSwgTWF0aC5mbG9vcik7XG4gICAgICogLy8gPT4geyAnNCc6IFs0LjJdLCAnNic6IFs2LjEsIDYuM10gfVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5ncm91cEJ5KFsnb25lJywgJ3R3bycsICd0aHJlZSddLCAnbGVuZ3RoJyk7XG4gICAgICogLy8gPT4geyAnMyc6IFsnb25lJywgJ3R3byddLCAnNSc6IFsndGhyZWUnXSB9XG4gICAgICovXG4gICAgdmFyIGdyb3VwQnkgPSBjcmVhdGVBZ2dyZWdhdG9yKGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkge1xuICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwocmVzdWx0LCBrZXkpKSB7XG4gICAgICAgIHJlc3VsdFtrZXldLnB1c2godmFsdWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYmFzZUFzc2lnblZhbHVlKHJlc3VsdCwga2V5LCBbdmFsdWVdKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGluIGBjb2xsZWN0aW9uYC4gSWYgYGNvbGxlY3Rpb25gIGlzIGEgc3RyaW5nLCBpdCdzXG4gICAgICogY2hlY2tlZCBmb3IgYSBzdWJzdHJpbmcgb2YgYHZhbHVlYCwgb3RoZXJ3aXNlXG4gICAgICogW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAgICAgKiBpcyB1c2VkIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucy4gSWYgYGZyb21JbmRleGAgaXMgbmVnYXRpdmUsIGl0J3MgdXNlZCBhc1xuICAgICAqIHRoZSBvZmZzZXQgZnJvbSB0aGUgZW5kIG9mIGBjb2xsZWN0aW9uYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R8c3RyaW5nfSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2Zyb21JbmRleD0wXSBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ucmVkdWNlYC5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBmb3VuZCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmluY2x1ZGVzKFsxLCAyLCAzXSwgMSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pbmNsdWRlcyhbMSwgMiwgM10sIDEsIDIpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmluY2x1ZGVzKHsgJ2EnOiAxLCAnYic6IDIgfSwgMSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pbmNsdWRlcygnYWJjZCcsICdiYycpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpbmNsdWRlcyhjb2xsZWN0aW9uLCB2YWx1ZSwgZnJvbUluZGV4LCBndWFyZCkge1xuICAgICAgY29sbGVjdGlvbiA9IGlzQXJyYXlMaWtlKGNvbGxlY3Rpb24pID8gY29sbGVjdGlvbiA6IHZhbHVlcyhjb2xsZWN0aW9uKTtcbiAgICAgIGZyb21JbmRleCA9IChmcm9tSW5kZXggJiYgIWd1YXJkKSA/IHRvSW50ZWdlcihmcm9tSW5kZXgpIDogMDtcblxuICAgICAgdmFyIGxlbmd0aCA9IGNvbGxlY3Rpb24ubGVuZ3RoO1xuICAgICAgaWYgKGZyb21JbmRleCA8IDApIHtcbiAgICAgICAgZnJvbUluZGV4ID0gbmF0aXZlTWF4KGxlbmd0aCArIGZyb21JbmRleCwgMCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gaXNTdHJpbmcoY29sbGVjdGlvbilcbiAgICAgICAgPyAoZnJvbUluZGV4IDw9IGxlbmd0aCAmJiBjb2xsZWN0aW9uLmluZGV4T2YodmFsdWUsIGZyb21JbmRleCkgPiAtMSlcbiAgICAgICAgOiAoISFsZW5ndGggJiYgYmFzZUluZGV4T2YoY29sbGVjdGlvbiwgdmFsdWUsIGZyb21JbmRleCkgPiAtMSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW52b2tlcyB0aGUgbWV0aG9kIGF0IGBwYXRoYCBvZiBlYWNoIGVsZW1lbnQgaW4gYGNvbGxlY3Rpb25gLCByZXR1cm5pbmdcbiAgICAgKiBhbiBhcnJheSBvZiB0aGUgcmVzdWx0cyBvZiBlYWNoIGludm9rZWQgbWV0aG9kLiBBbnkgYWRkaXRpb25hbCBhcmd1bWVudHNcbiAgICAgKiBhcmUgcHJvdmlkZWQgdG8gZWFjaCBpbnZva2VkIG1ldGhvZC4gSWYgYHBhdGhgIGlzIGEgZnVuY3Rpb24sIGl0J3MgaW52b2tlZFxuICAgICAqIGZvciwgYW5kIGB0aGlzYCBib3VuZCB0bywgZWFjaCBlbGVtZW50IGluIGBjb2xsZWN0aW9uYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7QXJyYXl8RnVuY3Rpb258c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBtZXRob2QgdG8gaW52b2tlIG9yXG4gICAgICogIHRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHsuLi4qfSBbYXJnc10gVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgZWFjaCBtZXRob2Qgd2l0aC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHJlc3VsdHMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaW52b2tlTWFwKFtbNSwgMSwgN10sIFszLCAyLCAxXV0sICdzb3J0Jyk7XG4gICAgICogLy8gPT4gW1sxLCA1LCA3XSwgWzEsIDIsIDNdXVxuICAgICAqXG4gICAgICogXy5pbnZva2VNYXAoWzEyMywgNDU2XSwgU3RyaW5nLnByb3RvdHlwZS5zcGxpdCwgJycpO1xuICAgICAqIC8vID0+IFtbJzEnLCAnMicsICczJ10sIFsnNCcsICc1JywgJzYnXV1cbiAgICAgKi9cbiAgICB2YXIgaW52b2tlTWFwID0gYmFzZVJlc3QoZnVuY3Rpb24oY29sbGVjdGlvbiwgcGF0aCwgYXJncykge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgaXNGdW5jID0gdHlwZW9mIHBhdGggPT0gJ2Z1bmN0aW9uJyxcbiAgICAgICAgICByZXN1bHQgPSBpc0FycmF5TGlrZShjb2xsZWN0aW9uKSA/IEFycmF5KGNvbGxlY3Rpb24ubGVuZ3RoKSA6IFtdO1xuXG4gICAgICBiYXNlRWFjaChjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICByZXN1bHRbKytpbmRleF0gPSBpc0Z1bmMgPyBhcHBseShwYXRoLCB2YWx1ZSwgYXJncykgOiBiYXNlSW52b2tlKHZhbHVlLCBwYXRoLCBhcmdzKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gb2JqZWN0IGNvbXBvc2VkIG9mIGtleXMgZ2VuZXJhdGVkIGZyb20gdGhlIHJlc3VsdHMgb2YgcnVubmluZ1xuICAgICAqIGVhY2ggZWxlbWVudCBvZiBgY29sbGVjdGlvbmAgdGhydSBgaXRlcmF0ZWVgLiBUaGUgY29ycmVzcG9uZGluZyB2YWx1ZSBvZlxuICAgICAqIGVhY2gga2V5IGlzIHRoZSBsYXN0IGVsZW1lbnQgcmVzcG9uc2libGUgZm9yIGdlbmVyYXRpbmcgdGhlIGtleS4gVGhlXG4gICAgICogaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgdG8gdHJhbnNmb3JtIGtleXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY29tcG9zZWQgYWdncmVnYXRlIG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gW1xuICAgICAqICAgeyAnZGlyJzogJ2xlZnQnLCAnY29kZSc6IDk3IH0sXG4gICAgICogICB7ICdkaXInOiAncmlnaHQnLCAnY29kZSc6IDEwMCB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8ua2V5QnkoYXJyYXksIGZ1bmN0aW9uKG8pIHtcbiAgICAgKiAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKG8uY29kZSk7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4geyAnYSc6IHsgJ2Rpcic6ICdsZWZ0JywgJ2NvZGUnOiA5NyB9LCAnZCc6IHsgJ2Rpcic6ICdyaWdodCcsICdjb2RlJzogMTAwIH0gfVxuICAgICAqXG4gICAgICogXy5rZXlCeShhcnJheSwgJ2RpcicpO1xuICAgICAqIC8vID0+IHsgJ2xlZnQnOiB7ICdkaXInOiAnbGVmdCcsICdjb2RlJzogOTcgfSwgJ3JpZ2h0JzogeyAnZGlyJzogJ3JpZ2h0JywgJ2NvZGUnOiAxMDAgfSB9XG4gICAgICovXG4gICAgdmFyIGtleUJ5ID0gY3JlYXRlQWdncmVnYXRvcihmdW5jdGlvbihyZXN1bHQsIHZhbHVlLCBrZXkpIHtcbiAgICAgIGJhc2VBc3NpZ25WYWx1ZShyZXN1bHQsIGtleSwgdmFsdWUpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB2YWx1ZXMgYnkgcnVubmluZyBlYWNoIGVsZW1lbnQgaW4gYGNvbGxlY3Rpb25gIHRocnVcbiAgICAgKiBgaXRlcmF0ZWVgLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czpcbiAgICAgKiAodmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuXG4gICAgICpcbiAgICAgKiBNYW55IGxvZGFzaCBtZXRob2RzIGFyZSBndWFyZGVkIHRvIHdvcmsgYXMgaXRlcmF0ZWVzIGZvciBtZXRob2RzIGxpa2VcbiAgICAgKiBgXy5ldmVyeWAsIGBfLmZpbHRlcmAsIGBfLm1hcGAsIGBfLm1hcFZhbHVlc2AsIGBfLnJlamVjdGAsIGFuZCBgXy5zb21lYC5cbiAgICAgKlxuICAgICAqIFRoZSBndWFyZGVkIG1ldGhvZHMgYXJlOlxuICAgICAqIGBhcnlgLCBgY2h1bmtgLCBgY3VycnlgLCBgY3VycnlSaWdodGAsIGBkcm9wYCwgYGRyb3BSaWdodGAsIGBldmVyeWAsXG4gICAgICogYGZpbGxgLCBgaW52ZXJ0YCwgYHBhcnNlSW50YCwgYHJhbmRvbWAsIGByYW5nZWAsIGByYW5nZVJpZ2h0YCwgYHJlcGVhdGAsXG4gICAgICogYHNhbXBsZVNpemVgLCBgc2xpY2VgLCBgc29tZWAsIGBzb3J0QnlgLCBgc3BsaXRgLCBgdGFrZWAsIGB0YWtlUmlnaHRgLFxuICAgICAqIGB0ZW1wbGF0ZWAsIGB0cmltYCwgYHRyaW1FbmRgLCBgdHJpbVN0YXJ0YCwgYW5kIGB3b3Jkc2BcbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IG1hcHBlZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gc3F1YXJlKG4pIHtcbiAgICAgKiAgIHJldHVybiBuICogbjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBfLm1hcChbNCwgOF0sIHNxdWFyZSk7XG4gICAgICogLy8gPT4gWzE2LCA2NF1cbiAgICAgKlxuICAgICAqIF8ubWFwKHsgJ2EnOiA0LCAnYic6IDggfSwgc3F1YXJlKTtcbiAgICAgKiAvLyA9PiBbMTYsIDY0XSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5tYXAodXNlcnMsICd1c2VyJyk7XG4gICAgICogLy8gPT4gWydiYXJuZXknLCAnZnJlZCddXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWFwKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheU1hcCA6IGJhc2VNYXA7XG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uc29ydEJ5YCBleGNlcHQgdGhhdCBpdCBhbGxvd3Mgc3BlY2lmeWluZyB0aGUgc29ydFxuICAgICAqIG9yZGVycyBvZiB0aGUgaXRlcmF0ZWVzIHRvIHNvcnQgYnkuIElmIGBvcmRlcnNgIGlzIHVuc3BlY2lmaWVkLCBhbGwgdmFsdWVzXG4gICAgICogYXJlIHNvcnRlZCBpbiBhc2NlbmRpbmcgb3JkZXIuIE90aGVyd2lzZSwgc3BlY2lmeSBhbiBvcmRlciBvZiBcImRlc2NcIiBmb3JcbiAgICAgKiBkZXNjZW5kaW5nIG9yIFwiYXNjXCIgZm9yIGFzY2VuZGluZyBzb3J0IG9yZGVyIG9mIGNvcnJlc3BvbmRpbmcgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtBcnJheVtdfEZ1bmN0aW9uW118T2JqZWN0W118c3RyaW5nW119IFtpdGVyYXRlZXM9W18uaWRlbnRpdHldXVxuICAgICAqICBUaGUgaXRlcmF0ZWVzIHRvIHNvcnQgYnkuXG4gICAgICogQHBhcmFtIHtzdHJpbmdbXX0gW29yZGVyc10gVGhlIHNvcnQgb3JkZXJzIG9mIGBpdGVyYXRlZXNgLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLnJlZHVjZWAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgc29ydGVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhZ2UnOiA0OCB9LFxuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzQgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FnZSc6IDQwIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIC8vIFNvcnQgYnkgYHVzZXJgIGluIGFzY2VuZGluZyBvcmRlciBhbmQgYnkgYGFnZWAgaW4gZGVzY2VuZGluZyBvcmRlci5cbiAgICAgKiBfLm9yZGVyQnkodXNlcnMsIFsndXNlcicsICdhZ2UnXSwgWydhc2MnLCAnZGVzYyddKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbWydiYXJuZXknLCAzNl0sIFsnYmFybmV5JywgMzRdLCBbJ2ZyZWQnLCA0OF0sIFsnZnJlZCcsIDQwXV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBvcmRlckJ5KGNvbGxlY3Rpb24sIGl0ZXJhdGVlcywgb3JkZXJzLCBndWFyZCkge1xuICAgICAgaWYgKGNvbGxlY3Rpb24gPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBpZiAoIWlzQXJyYXkoaXRlcmF0ZWVzKSkge1xuICAgICAgICBpdGVyYXRlZXMgPSBpdGVyYXRlZXMgPT0gbnVsbCA/IFtdIDogW2l0ZXJhdGVlc107XG4gICAgICB9XG4gICAgICBvcmRlcnMgPSBndWFyZCA/IHVuZGVmaW5lZCA6IG9yZGVycztcbiAgICAgIGlmICghaXNBcnJheShvcmRlcnMpKSB7XG4gICAgICAgIG9yZGVycyA9IG9yZGVycyA9PSBudWxsID8gW10gOiBbb3JkZXJzXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlT3JkZXJCeShjb2xsZWN0aW9uLCBpdGVyYXRlZXMsIG9yZGVycyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBlbGVtZW50cyBzcGxpdCBpbnRvIHR3byBncm91cHMsIHRoZSBmaXJzdCBvZiB3aGljaFxuICAgICAqIGNvbnRhaW5zIGVsZW1lbnRzIGBwcmVkaWNhdGVgIHJldHVybnMgdHJ1dGh5IGZvciwgdGhlIHNlY29uZCBvZiB3aGljaFxuICAgICAqIGNvbnRhaW5zIGVsZW1lbnRzIGBwcmVkaWNhdGVgIHJldHVybnMgZmFsc2V5IGZvci4gVGhlIHByZWRpY2F0ZSBpc1xuICAgICAqIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBncm91cGVkIGVsZW1lbnRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICAnYWdlJzogMzYsICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FnZSc6IDQwLCAnYWN0aXZlJzogdHJ1ZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdwZWJibGVzJywgJ2FnZSc6IDEsICAnYWN0aXZlJzogZmFsc2UgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLnBhcnRpdGlvbih1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gby5hY3RpdmU7IH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFtbJ2ZyZWQnXSwgWydiYXJuZXknLCAncGViYmxlcyddXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnBhcnRpdGlvbih1c2VycywgeyAnYWdlJzogMSwgJ2FjdGl2ZSc6IGZhbHNlIH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFtbJ3BlYmJsZXMnXSwgWydiYXJuZXknLCAnZnJlZCddXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8ucGFydGl0aW9uKHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgW1snYmFybmV5JywgJ3BlYmJsZXMnXSwgWydmcmVkJ11dXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnBhcnRpdGlvbih1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFtbJ2ZyZWQnXSwgWydiYXJuZXknLCAncGViYmxlcyddXVxuICAgICAqL1xuICAgIHZhciBwYXJ0aXRpb24gPSBjcmVhdGVBZ2dyZWdhdG9yKGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkge1xuICAgICAgcmVzdWx0W2tleSA/IDAgOiAxXS5wdXNoKHZhbHVlKTtcbiAgICB9LCBmdW5jdGlvbigpIHsgcmV0dXJuIFtbXSwgW11dOyB9KTtcblxuICAgIC8qKlxuICAgICAqIFJlZHVjZXMgYGNvbGxlY3Rpb25gIHRvIGEgdmFsdWUgd2hpY2ggaXMgdGhlIGFjY3VtdWxhdGVkIHJlc3VsdCBvZiBydW5uaW5nXG4gICAgICogZWFjaCBlbGVtZW50IGluIGBjb2xsZWN0aW9uYCB0aHJ1IGBpdGVyYXRlZWAsIHdoZXJlIGVhY2ggc3VjY2Vzc2l2ZVxuICAgICAqIGludm9jYXRpb24gaXMgc3VwcGxpZWQgdGhlIHJldHVybiB2YWx1ZSBvZiB0aGUgcHJldmlvdXMuIElmIGBhY2N1bXVsYXRvcmBcbiAgICAgKiBpcyBub3QgZ2l2ZW4sIHRoZSBmaXJzdCBlbGVtZW50IG9mIGBjb2xsZWN0aW9uYCBpcyB1c2VkIGFzIHRoZSBpbml0aWFsXG4gICAgICogdmFsdWUuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggZm91ciBhcmd1bWVudHM6XG4gICAgICogKGFjY3VtdWxhdG9yLCB2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS5cbiAgICAgKlxuICAgICAqIE1hbnkgbG9kYXNoIG1ldGhvZHMgYXJlIGd1YXJkZWQgdG8gd29yayBhcyBpdGVyYXRlZXMgZm9yIG1ldGhvZHMgbGlrZVxuICAgICAqIGBfLnJlZHVjZWAsIGBfLnJlZHVjZVJpZ2h0YCwgYW5kIGBfLnRyYW5zZm9ybWAuXG4gICAgICpcbiAgICAgKiBUaGUgZ3VhcmRlZCBtZXRob2RzIGFyZTpcbiAgICAgKiBgYXNzaWduYCwgYGRlZmF1bHRzYCwgYGRlZmF1bHRzRGVlcGAsIGBpbmNsdWRlc2AsIGBtZXJnZWAsIGBvcmRlckJ5YCxcbiAgICAgKiBhbmQgYHNvcnRCeWBcbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7Kn0gW2FjY3VtdWxhdG9yXSBUaGUgaW5pdGlhbCB2YWx1ZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgYWNjdW11bGF0ZWQgdmFsdWUuXG4gICAgICogQHNlZSBfLnJlZHVjZVJpZ2h0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucmVkdWNlKFsxLCAyXSwgZnVuY3Rpb24oc3VtLCBuKSB7XG4gICAgICogICByZXR1cm4gc3VtICsgbjtcbiAgICAgKiB9LCAwKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICpcbiAgICAgKiBfLnJlZHVjZSh7ICdhJzogMSwgJ2InOiAyLCAnYyc6IDEgfSwgZnVuY3Rpb24ocmVzdWx0LCB2YWx1ZSwga2V5KSB7XG4gICAgICogICAocmVzdWx0W3ZhbHVlXSB8fCAocmVzdWx0W3ZhbHVlXSA9IFtdKSkucHVzaChrZXkpO1xuICAgICAqICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgKiB9LCB7fSk7XG4gICAgICogLy8gPT4geyAnMSc6IFsnYScsICdjJ10sICcyJzogWydiJ10gfSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlZHVjZShjb2xsZWN0aW9uLCBpdGVyYXRlZSwgYWNjdW11bGF0b3IpIHtcbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5UmVkdWNlIDogYmFzZVJlZHVjZSxcbiAgICAgICAgICBpbml0QWNjdW0gPSBhcmd1bWVudHMubGVuZ3RoIDwgMztcblxuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDQpLCBhY2N1bXVsYXRvciwgaW5pdEFjY3VtLCBiYXNlRWFjaCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5yZWR1Y2VgIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgZWxlbWVudHMgb2ZcbiAgICAgKiBgY29sbGVjdGlvbmAgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHsqfSBbYWNjdW11bGF0b3JdIFRoZSBpbml0aWFsIHZhbHVlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBhY2N1bXVsYXRlZCB2YWx1ZS5cbiAgICAgKiBAc2VlIF8ucmVkdWNlXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFtbMCwgMV0sIFsyLCAzXSwgWzQsIDVdXTtcbiAgICAgKlxuICAgICAqIF8ucmVkdWNlUmlnaHQoYXJyYXksIGZ1bmN0aW9uKGZsYXR0ZW5lZCwgb3RoZXIpIHtcbiAgICAgKiAgIHJldHVybiBmbGF0dGVuZWQuY29uY2F0KG90aGVyKTtcbiAgICAgKiB9LCBbXSk7XG4gICAgICogLy8gPT4gWzQsIDUsIDIsIDMsIDAsIDFdXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVkdWNlUmlnaHQoY29sbGVjdGlvbiwgaXRlcmF0ZWUsIGFjY3VtdWxhdG9yKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheVJlZHVjZVJpZ2h0IDogYmFzZVJlZHVjZSxcbiAgICAgICAgICBpbml0QWNjdW0gPSBhcmd1bWVudHMubGVuZ3RoIDwgMztcblxuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDQpLCBhY2N1bXVsYXRvciwgaW5pdEFjY3VtLCBiYXNlRWFjaFJpZ2h0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgb3Bwb3NpdGUgb2YgYF8uZmlsdGVyYDsgdGhpcyBtZXRob2QgcmV0dXJucyB0aGUgZWxlbWVudHMgb2YgYGNvbGxlY3Rpb25gXG4gICAgICogdGhhdCBgcHJlZGljYXRlYCBkb2VzICoqbm90KiogcmV0dXJuIHRydXRoeSBmb3IuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmlsdGVyZWQgYXJyYXkuXG4gICAgICogQHNlZSBfLmZpbHRlclxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhZ2UnOiA0MCwgJ2FjdGl2ZSc6IHRydWUgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLnJlamVjdCh1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gIW8uYWN0aXZlOyB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2ZyZWQnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnJlamVjdCh1c2VycywgeyAnYWdlJzogNDAsICdhY3RpdmUnOiB0cnVlIH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5J11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnJlamVjdCh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnZnJlZCddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnJlamVjdCh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5J11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZWplY3QoY29sbGVjdGlvbiwgcHJlZGljYXRlKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheUZpbHRlciA6IGJhc2VGaWx0ZXI7XG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBuZWdhdGUoZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgYSByYW5kb20gZWxlbWVudCBmcm9tIGBjb2xsZWN0aW9uYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjAuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gc2FtcGxlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByYW5kb20gZWxlbWVudC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zYW1wbGUoWzEsIDIsIDMsIDRdKTtcbiAgICAgKiAvLyA9PiAyXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2FtcGxlKGNvbGxlY3Rpb24pIHtcbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5U2FtcGxlIDogYmFzZVNhbXBsZTtcbiAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgYG5gIHJhbmRvbSBlbGVtZW50cyBhdCB1bmlxdWUga2V5cyBmcm9tIGBjb2xsZWN0aW9uYCB1cCB0byB0aGVcbiAgICAgKiBzaXplIG9mIGBjb2xsZWN0aW9uYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gc2FtcGxlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbj0xXSBUaGUgbnVtYmVyIG9mIGVsZW1lbnRzIHRvIHNhbXBsZS5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcmFuZG9tIGVsZW1lbnRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNhbXBsZVNpemUoWzEsIDIsIDNdLCAyKTtcbiAgICAgKiAvLyA9PiBbMywgMV1cbiAgICAgKlxuICAgICAqIF8uc2FtcGxlU2l6ZShbMSwgMiwgM10sIDQpO1xuICAgICAqIC8vID0+IFsyLCAzLCAxXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNhbXBsZVNpemUoY29sbGVjdGlvbiwgbiwgZ3VhcmQpIHtcbiAgICAgIGlmICgoZ3VhcmQgPyBpc0l0ZXJhdGVlQ2FsbChjb2xsZWN0aW9uLCBuLCBndWFyZCkgOiBuID09PSB1bmRlZmluZWQpKSB7XG4gICAgICAgIG4gPSAxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbiA9IHRvSW50ZWdlcihuKTtcbiAgICAgIH1cbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5U2FtcGxlU2l6ZSA6IGJhc2VTYW1wbGVTaXplO1xuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBzaHVmZmxlZCB2YWx1ZXMsIHVzaW5nIGEgdmVyc2lvbiBvZiB0aGVcbiAgICAgKiBbRmlzaGVyLVlhdGVzIHNodWZmbGVdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0Zpc2hlci1ZYXRlc19zaHVmZmxlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gc2h1ZmZsZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBzaHVmZmxlZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zaHVmZmxlKFsxLCAyLCAzLCA0XSk7XG4gICAgICogLy8gPT4gWzQsIDEsIDMsIDJdXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2h1ZmZsZShjb2xsZWN0aW9uKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheVNodWZmbGUgOiBiYXNlU2h1ZmZsZTtcbiAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHNpemUgb2YgYGNvbGxlY3Rpb25gIGJ5IHJldHVybmluZyBpdHMgbGVuZ3RoIGZvciBhcnJheS1saWtlXG4gICAgICogdmFsdWVzIG9yIHRoZSBudW1iZXIgb2Ygb3duIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnRpZXMgZm9yIG9iamVjdHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fHN0cmluZ30gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGNvbGxlY3Rpb24gc2l6ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zaXplKFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gM1xuICAgICAqXG4gICAgICogXy5zaXplKHsgJ2EnOiAxLCAnYic6IDIgfSk7XG4gICAgICogLy8gPT4gMlxuICAgICAqXG4gICAgICogXy5zaXplKCdwZWJibGVzJyk7XG4gICAgICogLy8gPT4gN1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNpemUoY29sbGVjdGlvbikge1xuICAgICAgaWYgKGNvbGxlY3Rpb24gPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gMDtcbiAgICAgIH1cbiAgICAgIGlmIChpc0FycmF5TGlrZShjb2xsZWN0aW9uKSkge1xuICAgICAgICByZXR1cm4gaXNTdHJpbmcoY29sbGVjdGlvbikgPyBzdHJpbmdTaXplKGNvbGxlY3Rpb24pIDogY29sbGVjdGlvbi5sZW5ndGg7XG4gICAgICB9XG4gICAgICB2YXIgdGFnID0gZ2V0VGFnKGNvbGxlY3Rpb24pO1xuICAgICAgaWYgKHRhZyA9PSBtYXBUYWcgfHwgdGFnID09IHNldFRhZykge1xuICAgICAgICByZXR1cm4gY29sbGVjdGlvbi5zaXplO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VLZXlzKGNvbGxlY3Rpb24pLmxlbmd0aDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHByZWRpY2F0ZWAgcmV0dXJucyB0cnV0aHkgZm9yICoqYW55KiogZWxlbWVudCBvZiBgY29sbGVjdGlvbmAuXG4gICAgICogSXRlcmF0aW9uIGlzIHN0b3BwZWQgb25jZSBgcHJlZGljYXRlYCByZXR1cm5zIHRydXRoeS4gVGhlIHByZWRpY2F0ZSBpc1xuICAgICAqIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbnkgZWxlbWVudCBwYXNzZXMgdGhlIHByZWRpY2F0ZSBjaGVjayxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNvbWUoW251bGwsIDAsICd5ZXMnLCBmYWxzZV0sIEJvb2xlYW4pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FjdGl2ZSc6IHRydWUgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FjdGl2ZSc6IGZhbHNlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnNvbWUodXNlcnMsIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FjdGl2ZSc6IGZhbHNlIH0pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5zb21lKHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5zb21lKHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNvbWUoY29sbGVjdGlvbiwgcHJlZGljYXRlLCBndWFyZCkge1xuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlTb21lIDogYmFzZVNvbWU7XG4gICAgICBpZiAoZ3VhcmQgJiYgaXNJdGVyYXRlZUNhbGwoY29sbGVjdGlvbiwgcHJlZGljYXRlLCBndWFyZCkpIHtcbiAgICAgICAgcHJlZGljYXRlID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBlbGVtZW50cywgc29ydGVkIGluIGFzY2VuZGluZyBvcmRlciBieSB0aGUgcmVzdWx0cyBvZlxuICAgICAqIHJ1bm5pbmcgZWFjaCBlbGVtZW50IGluIGEgY29sbGVjdGlvbiB0aHJ1IGVhY2ggaXRlcmF0ZWUuIFRoaXMgbWV0aG9kXG4gICAgICogcGVyZm9ybXMgYSBzdGFibGUgc29ydCwgdGhhdCBpcywgaXQgcHJlc2VydmVzIHRoZSBvcmlnaW5hbCBzb3J0IG9yZGVyIG9mXG4gICAgICogZXF1YWwgZWxlbWVudHMuIFRoZSBpdGVyYXRlZXMgYXJlIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0gey4uLihGdW5jdGlvbnxGdW5jdGlvbltdKX0gW2l0ZXJhdGVlcz1bXy5pZGVudGl0eV1dXG4gICAgICogIFRoZSBpdGVyYXRlZXMgdG8gc29ydCBieS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBzb3J0ZWQgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FnZSc6IDQ4IH0sXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAnYWdlJzogNDAgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM0IH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5zb3J0QnkodXNlcnMsIFtmdW5jdGlvbihvKSB7IHJldHVybiBvLnVzZXI7IH1dKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbWydiYXJuZXknLCAzNl0sIFsnYmFybmV5JywgMzRdLCBbJ2ZyZWQnLCA0OF0sIFsnZnJlZCcsIDQwXV1cbiAgICAgKlxuICAgICAqIF8uc29ydEJ5KHVzZXJzLCBbJ3VzZXInLCAnYWdlJ10pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFtbJ2Jhcm5leScsIDM0XSwgWydiYXJuZXknLCAzNl0sIFsnZnJlZCcsIDQwXSwgWydmcmVkJywgNDhdXVxuICAgICAqL1xuICAgIHZhciBzb3J0QnkgPSBiYXNlUmVzdChmdW5jdGlvbihjb2xsZWN0aW9uLCBpdGVyYXRlZXMpIHtcbiAgICAgIGlmIChjb2xsZWN0aW9uID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgdmFyIGxlbmd0aCA9IGl0ZXJhdGVlcy5sZW5ndGg7XG4gICAgICBpZiAobGVuZ3RoID4gMSAmJiBpc0l0ZXJhdGVlQ2FsbChjb2xsZWN0aW9uLCBpdGVyYXRlZXNbMF0sIGl0ZXJhdGVlc1sxXSkpIHtcbiAgICAgICAgaXRlcmF0ZWVzID0gW107XG4gICAgICB9IGVsc2UgaWYgKGxlbmd0aCA+IDIgJiYgaXNJdGVyYXRlZUNhbGwoaXRlcmF0ZWVzWzBdLCBpdGVyYXRlZXNbMV0sIGl0ZXJhdGVlc1syXSkpIHtcbiAgICAgICAgaXRlcmF0ZWVzID0gW2l0ZXJhdGVlc1swXV07XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZU9yZGVyQnkoY29sbGVjdGlvbiwgYmFzZUZsYXR0ZW4oaXRlcmF0ZWVzLCAxKSwgW10pO1xuICAgIH0pO1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgdGltZXN0YW1wIG9mIHRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRoYXQgaGF2ZSBlbGFwc2VkIHNpbmNlXG4gICAgICogdGhlIFVuaXggZXBvY2ggKDEgSmFudWFyeSAxOTcwIDAwOjAwOjAwIFVUQykuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi40LjBcbiAgICAgKiBAY2F0ZWdvcnkgRGF0ZVxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHRpbWVzdGFtcC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kZWZlcihmdW5jdGlvbihzdGFtcCkge1xuICAgICAqICAgY29uc29sZS5sb2coXy5ub3coKSAtIHN0YW1wKTtcbiAgICAgKiB9LCBfLm5vdygpKTtcbiAgICAgKiAvLyA9PiBMb2dzIHRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIGl0IHRvb2sgZm9yIHRoZSBkZWZlcnJlZCBpbnZvY2F0aW9uLlxuICAgICAqL1xuICAgIHZhciBub3cgPSBjdHhOb3cgfHwgZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gcm9vdC5EYXRlLm5vdygpO1xuICAgIH07XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBUaGUgb3Bwb3NpdGUgb2YgYF8uYmVmb3JlYDsgdGhpcyBtZXRob2QgY3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlc1xuICAgICAqIGBmdW5jYCBvbmNlIGl0J3MgY2FsbGVkIGBuYCBvciBtb3JlIHRpbWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciBvZiBjYWxscyBiZWZvcmUgYGZ1bmNgIGlzIGludm9rZWQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcmVzdHJpY3QuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcmVzdHJpY3RlZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHNhdmVzID0gWydwcm9maWxlJywgJ3NldHRpbmdzJ107XG4gICAgICpcbiAgICAgKiB2YXIgZG9uZSA9IF8uYWZ0ZXIoc2F2ZXMubGVuZ3RoLCBmdW5jdGlvbigpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKCdkb25lIHNhdmluZyEnKTtcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIF8uZm9yRWFjaChzYXZlcywgZnVuY3Rpb24odHlwZSkge1xuICAgICAqICAgYXN5bmNTYXZlKHsgJ3R5cGUnOiB0eXBlLCAnY29tcGxldGUnOiBkb25lIH0pO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IExvZ3MgJ2RvbmUgc2F2aW5nIScgYWZ0ZXIgdGhlIHR3byBhc3luYyBzYXZlcyBoYXZlIGNvbXBsZXRlZC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhZnRlcihuLCBmdW5jKSB7XG4gICAgICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICBuID0gdG9JbnRlZ2VyKG4pO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoLS1uIDwgMSkge1xuICAgICAgICAgIHJldHVybiBmdW5jLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2AsIHdpdGggdXAgdG8gYG5gIGFyZ3VtZW50cyxcbiAgICAgKiBpZ25vcmluZyBhbnkgYWRkaXRpb25hbCBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjYXAgYXJndW1lbnRzIGZvci5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW249ZnVuYy5sZW5ndGhdIFRoZSBhcml0eSBjYXAuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjYXBwZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubWFwKFsnNicsICc4JywgJzEwJ10sIF8uYXJ5KHBhcnNlSW50LCAxKSk7XG4gICAgICogLy8gPT4gWzYsIDgsIDEwXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFyeShmdW5jLCBuLCBndWFyZCkge1xuICAgICAgbiA9IGd1YXJkID8gdW5kZWZpbmVkIDogbjtcbiAgICAgIG4gPSAoZnVuYyAmJiBuID09IG51bGwpID8gZnVuYy5sZW5ndGggOiBuO1xuICAgICAgcmV0dXJuIGNyZWF0ZVdyYXAoZnVuYywgV1JBUF9BUllfRkxBRywgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBuKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCwgd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgYW5kIGFyZ3VtZW50c1xuICAgICAqIG9mIHRoZSBjcmVhdGVkIGZ1bmN0aW9uLCB3aGlsZSBpdCdzIGNhbGxlZCBsZXNzIHRoYW4gYG5gIHRpbWVzLiBTdWJzZXF1ZW50XG4gICAgICogY2FsbHMgdG8gdGhlIGNyZWF0ZWQgZnVuY3Rpb24gcmV0dXJuIHRoZSByZXN1bHQgb2YgdGhlIGxhc3QgYGZ1bmNgIGludm9jYXRpb24uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgbnVtYmVyIG9mIGNhbGxzIGF0IHdoaWNoIGBmdW5jYCBpcyBubyBsb25nZXIgaW52b2tlZC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byByZXN0cmljdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyByZXN0cmljdGVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBqUXVlcnkoZWxlbWVudCkub24oJ2NsaWNrJywgXy5iZWZvcmUoNSwgYWRkQ29udGFjdFRvTGlzdCkpO1xuICAgICAqIC8vID0+IEFsbG93cyBhZGRpbmcgdXAgdG8gNCBjb250YWN0cyB0byB0aGUgbGlzdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiZWZvcmUobiwgZnVuYykge1xuICAgICAgdmFyIHJlc3VsdDtcbiAgICAgIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIG4gPSB0b0ludGVnZXIobik7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICgtLW4gPiAwKSB7XG4gICAgICAgICAgcmVzdWx0ID0gZnVuYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChuIDw9IDEpIHtcbiAgICAgICAgICBmdW5jID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIGB0aGlzQXJnYFxuICAgICAqIGFuZCBgcGFydGlhbHNgIHByZXBlbmRlZCB0byB0aGUgYXJndW1lbnRzIGl0IHJlY2VpdmVzLlxuICAgICAqXG4gICAgICogVGhlIGBfLmJpbmQucGxhY2Vob2xkZXJgIHZhbHVlLCB3aGljaCBkZWZhdWx0cyB0byBgX2AgaW4gbW9ub2xpdGhpYyBidWlsZHMsXG4gICAgICogbWF5IGJlIHVzZWQgYXMgYSBwbGFjZWhvbGRlciBmb3IgcGFydGlhbGx5IGFwcGxpZWQgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBuYXRpdmUgYEZ1bmN0aW9uI2JpbmRgLCB0aGlzIG1ldGhvZCBkb2Vzbid0IHNldCB0aGUgXCJsZW5ndGhcIlxuICAgICAqIHByb3BlcnR5IG9mIGJvdW5kIGZ1bmN0aW9ucy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGJpbmQuXG4gICAgICogQHBhcmFtIHsqfSB0aGlzQXJnIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgZnVuY2AuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbcGFydGlhbHNdIFRoZSBhcmd1bWVudHMgdG8gYmUgcGFydGlhbGx5IGFwcGxpZWQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYm91bmQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGdyZWV0KGdyZWV0aW5nLCBwdW5jdHVhdGlvbikge1xuICAgICAqICAgcmV0dXJuIGdyZWV0aW5nICsgJyAnICsgdGhpcy51c2VyICsgcHVuY3R1YXRpb247XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ3VzZXInOiAnZnJlZCcgfTtcbiAgICAgKlxuICAgICAqIHZhciBib3VuZCA9IF8uYmluZChncmVldCwgb2JqZWN0LCAnaGknKTtcbiAgICAgKiBib3VuZCgnIScpO1xuICAgICAqIC8vID0+ICdoaSBmcmVkISdcbiAgICAgKlxuICAgICAqIC8vIEJvdW5kIHdpdGggcGxhY2Vob2xkZXJzLlxuICAgICAqIHZhciBib3VuZCA9IF8uYmluZChncmVldCwgb2JqZWN0LCBfLCAnIScpO1xuICAgICAqIGJvdW5kKCdoaScpO1xuICAgICAqIC8vID0+ICdoaSBmcmVkISdcbiAgICAgKi9cbiAgICB2YXIgYmluZCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGZ1bmMsIHRoaXNBcmcsIHBhcnRpYWxzKSB7XG4gICAgICB2YXIgYml0bWFzayA9IFdSQVBfQklORF9GTEFHO1xuICAgICAgaWYgKHBhcnRpYWxzLmxlbmd0aCkge1xuICAgICAgICB2YXIgaG9sZGVycyA9IHJlcGxhY2VIb2xkZXJzKHBhcnRpYWxzLCBnZXRIb2xkZXIoYmluZCkpO1xuICAgICAgICBiaXRtYXNrIHw9IFdSQVBfUEFSVElBTF9GTEFHO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNyZWF0ZVdyYXAoZnVuYywgYml0bWFzaywgdGhpc0FyZywgcGFydGlhbHMsIGhvbGRlcnMpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyB0aGUgbWV0aG9kIGF0IGBvYmplY3Rba2V5XWAgd2l0aCBgcGFydGlhbHNgXG4gICAgICogcHJlcGVuZGVkIHRvIHRoZSBhcmd1bWVudHMgaXQgcmVjZWl2ZXMuXG4gICAgICpcbiAgICAgKiBUaGlzIG1ldGhvZCBkaWZmZXJzIGZyb20gYF8uYmluZGAgYnkgYWxsb3dpbmcgYm91bmQgZnVuY3Rpb25zIHRvIHJlZmVyZW5jZVxuICAgICAqIG1ldGhvZHMgdGhhdCBtYXkgYmUgcmVkZWZpbmVkIG9yIGRvbid0IHlldCBleGlzdC4gU2VlXG4gICAgICogW1BldGVyIE1pY2hhdXgncyBhcnRpY2xlXShodHRwOi8vcGV0ZXIubWljaGF1eC5jYS9hcnRpY2xlcy9sYXp5LWZ1bmN0aW9uLWRlZmluaXRpb24tcGF0dGVybilcbiAgICAgKiBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqXG4gICAgICogVGhlIGBfLmJpbmRLZXkucGxhY2Vob2xkZXJgIHZhbHVlLCB3aGljaCBkZWZhdWx0cyB0byBgX2AgaW4gbW9ub2xpdGhpY1xuICAgICAqIGJ1aWxkcywgbWF5IGJlIHVzZWQgYXMgYSBwbGFjZWhvbGRlciBmb3IgcGFydGlhbGx5IGFwcGxpZWQgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMTAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnZva2UgdGhlIG1ldGhvZCBvbi5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIG1ldGhvZC5cbiAgICAgKiBAcGFyYW0gey4uLip9IFtwYXJ0aWFsc10gVGhlIGFyZ3VtZW50cyB0byBiZSBwYXJ0aWFsbHkgYXBwbGllZC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBib3VuZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHtcbiAgICAgKiAgICd1c2VyJzogJ2ZyZWQnLFxuICAgICAqICAgJ2dyZWV0JzogZnVuY3Rpb24oZ3JlZXRpbmcsIHB1bmN0dWF0aW9uKSB7XG4gICAgICogICAgIHJldHVybiBncmVldGluZyArICcgJyArIHRoaXMudXNlciArIHB1bmN0dWF0aW9uO1xuICAgICAqICAgfVxuICAgICAqIH07XG4gICAgICpcbiAgICAgKiB2YXIgYm91bmQgPSBfLmJpbmRLZXkob2JqZWN0LCAnZ3JlZXQnLCAnaGknKTtcbiAgICAgKiBib3VuZCgnIScpO1xuICAgICAqIC8vID0+ICdoaSBmcmVkISdcbiAgICAgKlxuICAgICAqIG9iamVjdC5ncmVldCA9IGZ1bmN0aW9uKGdyZWV0aW5nLCBwdW5jdHVhdGlvbikge1xuICAgICAqICAgcmV0dXJuIGdyZWV0aW5nICsgJ3lhICcgKyB0aGlzLnVzZXIgKyBwdW5jdHVhdGlvbjtcbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogYm91bmQoJyEnKTtcbiAgICAgKiAvLyA9PiAnaGl5YSBmcmVkISdcbiAgICAgKlxuICAgICAqIC8vIEJvdW5kIHdpdGggcGxhY2Vob2xkZXJzLlxuICAgICAqIHZhciBib3VuZCA9IF8uYmluZEtleShvYmplY3QsICdncmVldCcsIF8sICchJyk7XG4gICAgICogYm91bmQoJ2hpJyk7XG4gICAgICogLy8gPT4gJ2hpeWEgZnJlZCEnXG4gICAgICovXG4gICAgdmFyIGJpbmRLZXkgPSBiYXNlUmVzdChmdW5jdGlvbihvYmplY3QsIGtleSwgcGFydGlhbHMpIHtcbiAgICAgIHZhciBiaXRtYXNrID0gV1JBUF9CSU5EX0ZMQUcgfCBXUkFQX0JJTkRfS0VZX0ZMQUc7XG4gICAgICBpZiAocGFydGlhbHMubGVuZ3RoKSB7XG4gICAgICAgIHZhciBob2xkZXJzID0gcmVwbGFjZUhvbGRlcnMocGFydGlhbHMsIGdldEhvbGRlcihiaW5kS2V5KSk7XG4gICAgICAgIGJpdG1hc2sgfD0gV1JBUF9QQVJUSUFMX0ZMQUc7XG4gICAgICB9XG4gICAgICByZXR1cm4gY3JlYXRlV3JhcChrZXksIGJpdG1hc2ssIG9iamVjdCwgcGFydGlhbHMsIGhvbGRlcnMpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgYWNjZXB0cyBhcmd1bWVudHMgb2YgYGZ1bmNgIGFuZCBlaXRoZXIgaW52b2tlc1xuICAgICAqIGBmdW5jYCByZXR1cm5pbmcgaXRzIHJlc3VsdCwgaWYgYXQgbGVhc3QgYGFyaXR5YCBudW1iZXIgb2YgYXJndW1lbnRzIGhhdmVcbiAgICAgKiBiZWVuIHByb3ZpZGVkLCBvciByZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCBhY2NlcHRzIHRoZSByZW1haW5pbmcgYGZ1bmNgXG4gICAgICogYXJndW1lbnRzLCBhbmQgc28gb24uIFRoZSBhcml0eSBvZiBgZnVuY2AgbWF5IGJlIHNwZWNpZmllZCBpZiBgZnVuYy5sZW5ndGhgXG4gICAgICogaXMgbm90IHN1ZmZpY2llbnQuXG4gICAgICpcbiAgICAgKiBUaGUgYF8uY3VycnkucGxhY2Vob2xkZXJgIHZhbHVlLCB3aGljaCBkZWZhdWx0cyB0byBgX2AgaW4gbW9ub2xpdGhpYyBidWlsZHMsXG4gICAgICogbWF5IGJlIHVzZWQgYXMgYSBwbGFjZWhvbGRlciBmb3IgcHJvdmlkZWQgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGRvZXNuJ3Qgc2V0IHRoZSBcImxlbmd0aFwiIHByb3BlcnR5IG9mIGN1cnJpZWQgZnVuY3Rpb25zLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMC4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY3VycnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFthcml0eT1mdW5jLmxlbmd0aF0gVGhlIGFyaXR5IG9mIGBmdW5jYC5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGN1cnJpZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhYmMgPSBmdW5jdGlvbihhLCBiLCBjKSB7XG4gICAgICogICByZXR1cm4gW2EsIGIsIGNdO1xuICAgICAqIH07XG4gICAgICpcbiAgICAgKiB2YXIgY3VycmllZCA9IF8uY3VycnkoYWJjKTtcbiAgICAgKlxuICAgICAqIGN1cnJpZWQoMSkoMikoMyk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICpcbiAgICAgKiBjdXJyaWVkKDEsIDIpKDMpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqXG4gICAgICogY3VycmllZCgxLCAyLCAzKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKlxuICAgICAqIC8vIEN1cnJpZWQgd2l0aCBwbGFjZWhvbGRlcnMuXG4gICAgICogY3VycmllZCgxKShfLCAzKSgyKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjdXJyeShmdW5jLCBhcml0eSwgZ3VhcmQpIHtcbiAgICAgIGFyaXR5ID0gZ3VhcmQgPyB1bmRlZmluZWQgOiBhcml0eTtcbiAgICAgIHZhciByZXN1bHQgPSBjcmVhdGVXcmFwKGZ1bmMsIFdSQVBfQ1VSUllfRkxBRywgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGFyaXR5KTtcbiAgICAgIHJlc3VsdC5wbGFjZWhvbGRlciA9IGN1cnJ5LnBsYWNlaG9sZGVyO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmN1cnJ5YCBleGNlcHQgdGhhdCBhcmd1bWVudHMgYXJlIGFwcGxpZWQgdG8gYGZ1bmNgXG4gICAgICogaW4gdGhlIG1hbm5lciBvZiBgXy5wYXJ0aWFsUmlnaHRgIGluc3RlYWQgb2YgYF8ucGFydGlhbGAuXG4gICAgICpcbiAgICAgKiBUaGUgYF8uY3VycnlSaWdodC5wbGFjZWhvbGRlcmAgdmFsdWUsIHdoaWNoIGRlZmF1bHRzIHRvIGBfYCBpbiBtb25vbGl0aGljXG4gICAgICogYnVpbGRzLCBtYXkgYmUgdXNlZCBhcyBhIHBsYWNlaG9sZGVyIGZvciBwcm92aWRlZCBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgZG9lc24ndCBzZXQgdGhlIFwibGVuZ3RoXCIgcHJvcGVydHkgb2YgY3VycmllZCBmdW5jdGlvbnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjdXJyeS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2FyaXR5PWZ1bmMubGVuZ3RoXSBUaGUgYXJpdHkgb2YgYGZ1bmNgLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY3VycmllZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFiYyA9IGZ1bmN0aW9uKGEsIGIsIGMpIHtcbiAgICAgKiAgIHJldHVybiBbYSwgYiwgY107XG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIHZhciBjdXJyaWVkID0gXy5jdXJyeVJpZ2h0KGFiYyk7XG4gICAgICpcbiAgICAgKiBjdXJyaWVkKDMpKDIpKDEpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqXG4gICAgICogY3VycmllZCgyLCAzKSgxKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKlxuICAgICAqIGN1cnJpZWQoMSwgMiwgMyk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICpcbiAgICAgKiAvLyBDdXJyaWVkIHdpdGggcGxhY2Vob2xkZXJzLlxuICAgICAqIGN1cnJpZWQoMykoMSwgXykoMik7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3VycnlSaWdodChmdW5jLCBhcml0eSwgZ3VhcmQpIHtcbiAgICAgIGFyaXR5ID0gZ3VhcmQgPyB1bmRlZmluZWQgOiBhcml0eTtcbiAgICAgIHZhciByZXN1bHQgPSBjcmVhdGVXcmFwKGZ1bmMsIFdSQVBfQ1VSUllfUklHSFRfRkxBRywgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGFyaXR5KTtcbiAgICAgIHJlc3VsdC5wbGFjZWhvbGRlciA9IGN1cnJ5UmlnaHQucGxhY2Vob2xkZXI7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBkZWJvdW5jZWQgZnVuY3Rpb24gdGhhdCBkZWxheXMgaW52b2tpbmcgYGZ1bmNgIHVudGlsIGFmdGVyIGB3YWl0YFxuICAgICAqIG1pbGxpc2Vjb25kcyBoYXZlIGVsYXBzZWQgc2luY2UgdGhlIGxhc3QgdGltZSB0aGUgZGVib3VuY2VkIGZ1bmN0aW9uIHdhc1xuICAgICAqIGludm9rZWQuIFRoZSBkZWJvdW5jZWQgZnVuY3Rpb24gY29tZXMgd2l0aCBhIGBjYW5jZWxgIG1ldGhvZCB0byBjYW5jZWxcbiAgICAgKiBkZWxheWVkIGBmdW5jYCBpbnZvY2F0aW9ucyBhbmQgYSBgZmx1c2hgIG1ldGhvZCB0byBpbW1lZGlhdGVseSBpbnZva2UgdGhlbS5cbiAgICAgKiBQcm92aWRlIGBvcHRpb25zYCB0byBpbmRpY2F0ZSB3aGV0aGVyIGBmdW5jYCBzaG91bGQgYmUgaW52b2tlZCBvbiB0aGVcbiAgICAgKiBsZWFkaW5nIGFuZC9vciB0cmFpbGluZyBlZGdlIG9mIHRoZSBgd2FpdGAgdGltZW91dC4gVGhlIGBmdW5jYCBpcyBpbnZva2VkXG4gICAgICogd2l0aCB0aGUgbGFzdCBhcmd1bWVudHMgcHJvdmlkZWQgdG8gdGhlIGRlYm91bmNlZCBmdW5jdGlvbi4gU3Vic2VxdWVudFxuICAgICAqIGNhbGxzIHRvIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb24gcmV0dXJuIHRoZSByZXN1bHQgb2YgdGhlIGxhc3QgYGZ1bmNgXG4gICAgICogaW52b2NhdGlvbi5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBJZiBgbGVhZGluZ2AgYW5kIGB0cmFpbGluZ2Agb3B0aW9ucyBhcmUgYHRydWVgLCBgZnVuY2AgaXNcbiAgICAgKiBpbnZva2VkIG9uIHRoZSB0cmFpbGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0IG9ubHkgaWYgdGhlIGRlYm91bmNlZCBmdW5jdGlvblxuICAgICAqIGlzIGludm9rZWQgbW9yZSB0aGFuIG9uY2UgZHVyaW5nIHRoZSBgd2FpdGAgdGltZW91dC5cbiAgICAgKlxuICAgICAqIElmIGB3YWl0YCBpcyBgMGAgYW5kIGBsZWFkaW5nYCBpcyBgZmFsc2VgLCBgZnVuY2AgaW52b2NhdGlvbiBpcyBkZWZlcnJlZFxuICAgICAqIHVudGlsIHRvIHRoZSBuZXh0IHRpY2ssIHNpbWlsYXIgdG8gYHNldFRpbWVvdXRgIHdpdGggYSB0aW1lb3V0IG9mIGAwYC5cbiAgICAgKlxuICAgICAqIFNlZSBbRGF2aWQgQ29yYmFjaG8ncyBhcnRpY2xlXShodHRwczovL2Nzcy10cmlja3MuY29tL2RlYm91bmNpbmctdGhyb3R0bGluZy1leHBsYWluZWQtZXhhbXBsZXMvKVxuICAgICAqIGZvciBkZXRhaWxzIG92ZXIgdGhlIGRpZmZlcmVuY2VzIGJldHdlZW4gYF8uZGVib3VuY2VgIGFuZCBgXy50aHJvdHRsZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBkZWJvdW5jZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3dhaXQ9MF0gVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gZGVsYXkuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XSBUaGUgb3B0aW9ucyBvYmplY3QuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5sZWFkaW5nPWZhbHNlXVxuICAgICAqICBTcGVjaWZ5IGludm9raW5nIG9uIHRoZSBsZWFkaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLm1heFdhaXRdXG4gICAgICogIFRoZSBtYXhpbXVtIHRpbWUgYGZ1bmNgIGlzIGFsbG93ZWQgdG8gYmUgZGVsYXllZCBiZWZvcmUgaXQncyBpbnZva2VkLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMudHJhaWxpbmc9dHJ1ZV1cbiAgICAgKiAgU3BlY2lmeSBpbnZva2luZyBvbiB0aGUgdHJhaWxpbmcgZWRnZSBvZiB0aGUgdGltZW91dC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBkZWJvdW5jZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIC8vIEF2b2lkIGNvc3RseSBjYWxjdWxhdGlvbnMgd2hpbGUgdGhlIHdpbmRvdyBzaXplIGlzIGluIGZsdXguXG4gICAgICogalF1ZXJ5KHdpbmRvdykub24oJ3Jlc2l6ZScsIF8uZGVib3VuY2UoY2FsY3VsYXRlTGF5b3V0LCAxNTApKTtcbiAgICAgKlxuICAgICAqIC8vIEludm9rZSBgc2VuZE1haWxgIHdoZW4gY2xpY2tlZCwgZGVib3VuY2luZyBzdWJzZXF1ZW50IGNhbGxzLlxuICAgICAqIGpRdWVyeShlbGVtZW50KS5vbignY2xpY2snLCBfLmRlYm91bmNlKHNlbmRNYWlsLCAzMDAsIHtcbiAgICAgKiAgICdsZWFkaW5nJzogdHJ1ZSxcbiAgICAgKiAgICd0cmFpbGluZyc6IGZhbHNlXG4gICAgICogfSkpO1xuICAgICAqXG4gICAgICogLy8gRW5zdXJlIGBiYXRjaExvZ2AgaXMgaW52b2tlZCBvbmNlIGFmdGVyIDEgc2Vjb25kIG9mIGRlYm91bmNlZCBjYWxscy5cbiAgICAgKiB2YXIgZGVib3VuY2VkID0gXy5kZWJvdW5jZShiYXRjaExvZywgMjUwLCB7ICdtYXhXYWl0JzogMTAwMCB9KTtcbiAgICAgKiB2YXIgc291cmNlID0gbmV3IEV2ZW50U291cmNlKCcvc3RyZWFtJyk7XG4gICAgICogalF1ZXJ5KHNvdXJjZSkub24oJ21lc3NhZ2UnLCBkZWJvdW5jZWQpO1xuICAgICAqXG4gICAgICogLy8gQ2FuY2VsIHRoZSB0cmFpbGluZyBkZWJvdW5jZWQgaW52b2NhdGlvbi5cbiAgICAgKiBqUXVlcnkod2luZG93KS5vbigncG9wc3RhdGUnLCBkZWJvdW5jZWQuY2FuY2VsKTtcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBkZWJvdW5jZShmdW5jLCB3YWl0LCBvcHRpb25zKSB7XG4gICAgICB2YXIgbGFzdEFyZ3MsXG4gICAgICAgICAgbGFzdFRoaXMsXG4gICAgICAgICAgbWF4V2FpdCxcbiAgICAgICAgICByZXN1bHQsXG4gICAgICAgICAgdGltZXJJZCxcbiAgICAgICAgICBsYXN0Q2FsbFRpbWUsXG4gICAgICAgICAgbGFzdEludm9rZVRpbWUgPSAwLFxuICAgICAgICAgIGxlYWRpbmcgPSBmYWxzZSxcbiAgICAgICAgICBtYXhpbmcgPSBmYWxzZSxcbiAgICAgICAgICB0cmFpbGluZyA9IHRydWU7XG5cbiAgICAgIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIHdhaXQgPSB0b051bWJlcih3YWl0KSB8fCAwO1xuICAgICAgaWYgKGlzT2JqZWN0KG9wdGlvbnMpKSB7XG4gICAgICAgIGxlYWRpbmcgPSAhIW9wdGlvbnMubGVhZGluZztcbiAgICAgICAgbWF4aW5nID0gJ21heFdhaXQnIGluIG9wdGlvbnM7XG4gICAgICAgIG1heFdhaXQgPSBtYXhpbmcgPyBuYXRpdmVNYXgodG9OdW1iZXIob3B0aW9ucy5tYXhXYWl0KSB8fCAwLCB3YWl0KSA6IG1heFdhaXQ7XG4gICAgICAgIHRyYWlsaW5nID0gJ3RyYWlsaW5nJyBpbiBvcHRpb25zID8gISFvcHRpb25zLnRyYWlsaW5nIDogdHJhaWxpbmc7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGludm9rZUZ1bmModGltZSkge1xuICAgICAgICB2YXIgYXJncyA9IGxhc3RBcmdzLFxuICAgICAgICAgICAgdGhpc0FyZyA9IGxhc3RUaGlzO1xuXG4gICAgICAgIGxhc3RBcmdzID0gbGFzdFRoaXMgPSB1bmRlZmluZWQ7XG4gICAgICAgIGxhc3RJbnZva2VUaW1lID0gdGltZTtcbiAgICAgICAgcmVzdWx0ID0gZnVuYy5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gbGVhZGluZ0VkZ2UodGltZSkge1xuICAgICAgICAvLyBSZXNldCBhbnkgYG1heFdhaXRgIHRpbWVyLlxuICAgICAgICBsYXN0SW52b2tlVGltZSA9IHRpbWU7XG4gICAgICAgIC8vIFN0YXJ0IHRoZSB0aW1lciBmb3IgdGhlIHRyYWlsaW5nIGVkZ2UuXG4gICAgICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KHRpbWVyRXhwaXJlZCwgd2FpdCk7XG4gICAgICAgIC8vIEludm9rZSB0aGUgbGVhZGluZyBlZGdlLlxuICAgICAgICByZXR1cm4gbGVhZGluZyA/IGludm9rZUZ1bmModGltZSkgOiByZXN1bHQ7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHJlbWFpbmluZ1dhaXQodGltZSkge1xuICAgICAgICB2YXIgdGltZVNpbmNlTGFzdENhbGwgPSB0aW1lIC0gbGFzdENhbGxUaW1lLFxuICAgICAgICAgICAgdGltZVNpbmNlTGFzdEludm9rZSA9IHRpbWUgLSBsYXN0SW52b2tlVGltZSxcbiAgICAgICAgICAgIHRpbWVXYWl0aW5nID0gd2FpdCAtIHRpbWVTaW5jZUxhc3RDYWxsO1xuXG4gICAgICAgIHJldHVybiBtYXhpbmdcbiAgICAgICAgICA/IG5hdGl2ZU1pbih0aW1lV2FpdGluZywgbWF4V2FpdCAtIHRpbWVTaW5jZUxhc3RJbnZva2UpXG4gICAgICAgICAgOiB0aW1lV2FpdGluZztcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gc2hvdWxkSW52b2tlKHRpbWUpIHtcbiAgICAgICAgdmFyIHRpbWVTaW5jZUxhc3RDYWxsID0gdGltZSAtIGxhc3RDYWxsVGltZSxcbiAgICAgICAgICAgIHRpbWVTaW5jZUxhc3RJbnZva2UgPSB0aW1lIC0gbGFzdEludm9rZVRpbWU7XG5cbiAgICAgICAgLy8gRWl0aGVyIHRoaXMgaXMgdGhlIGZpcnN0IGNhbGwsIGFjdGl2aXR5IGhhcyBzdG9wcGVkIGFuZCB3ZSdyZSBhdCB0aGVcbiAgICAgICAgLy8gdHJhaWxpbmcgZWRnZSwgdGhlIHN5c3RlbSB0aW1lIGhhcyBnb25lIGJhY2t3YXJkcyBhbmQgd2UncmUgdHJlYXRpbmdcbiAgICAgICAgLy8gaXQgYXMgdGhlIHRyYWlsaW5nIGVkZ2UsIG9yIHdlJ3ZlIGhpdCB0aGUgYG1heFdhaXRgIGxpbWl0LlxuICAgICAgICByZXR1cm4gKGxhc3RDYWxsVGltZSA9PT0gdW5kZWZpbmVkIHx8ICh0aW1lU2luY2VMYXN0Q2FsbCA+PSB3YWl0KSB8fFxuICAgICAgICAgICh0aW1lU2luY2VMYXN0Q2FsbCA8IDApIHx8IChtYXhpbmcgJiYgdGltZVNpbmNlTGFzdEludm9rZSA+PSBtYXhXYWl0KSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHRpbWVyRXhwaXJlZCgpIHtcbiAgICAgICAgdmFyIHRpbWUgPSBub3coKTtcbiAgICAgICAgaWYgKHNob3VsZEludm9rZSh0aW1lKSkge1xuICAgICAgICAgIHJldHVybiB0cmFpbGluZ0VkZ2UodGltZSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gUmVzdGFydCB0aGUgdGltZXIuXG4gICAgICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KHRpbWVyRXhwaXJlZCwgcmVtYWluaW5nV2FpdCh0aW1lKSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHRyYWlsaW5nRWRnZSh0aW1lKSB7XG4gICAgICAgIHRpbWVySWQgPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgLy8gT25seSBpbnZva2UgaWYgd2UgaGF2ZSBgbGFzdEFyZ3NgIHdoaWNoIG1lYW5zIGBmdW5jYCBoYXMgYmVlblxuICAgICAgICAvLyBkZWJvdW5jZWQgYXQgbGVhc3Qgb25jZS5cbiAgICAgICAgaWYgKHRyYWlsaW5nICYmIGxhc3RBcmdzKSB7XG4gICAgICAgICAgcmV0dXJuIGludm9rZUZ1bmModGltZSk7XG4gICAgICAgIH1cbiAgICAgICAgbGFzdEFyZ3MgPSBsYXN0VGhpcyA9IHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gY2FuY2VsKCkge1xuICAgICAgICBpZiAodGltZXJJZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVySWQpO1xuICAgICAgICB9XG4gICAgICAgIGxhc3RJbnZva2VUaW1lID0gMDtcbiAgICAgICAgbGFzdEFyZ3MgPSBsYXN0Q2FsbFRpbWUgPSBsYXN0VGhpcyA9IHRpbWVySWQgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGZsdXNoKCkge1xuICAgICAgICByZXR1cm4gdGltZXJJZCA9PT0gdW5kZWZpbmVkID8gcmVzdWx0IDogdHJhaWxpbmdFZGdlKG5vdygpKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gZGVib3VuY2VkKCkge1xuICAgICAgICB2YXIgdGltZSA9IG5vdygpLFxuICAgICAgICAgICAgaXNJbnZva2luZyA9IHNob3VsZEludm9rZSh0aW1lKTtcblxuICAgICAgICBsYXN0QXJncyA9IGFyZ3VtZW50cztcbiAgICAgICAgbGFzdFRoaXMgPSB0aGlzO1xuICAgICAgICBsYXN0Q2FsbFRpbWUgPSB0aW1lO1xuXG4gICAgICAgIGlmIChpc0ludm9raW5nKSB7XG4gICAgICAgICAgaWYgKHRpbWVySWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIGxlYWRpbmdFZGdlKGxhc3RDYWxsVGltZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChtYXhpbmcpIHtcbiAgICAgICAgICAgIC8vIEhhbmRsZSBpbnZvY2F0aW9ucyBpbiBhIHRpZ2h0IGxvb3AuXG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZXJJZCk7XG4gICAgICAgICAgICB0aW1lcklkID0gc2V0VGltZW91dCh0aW1lckV4cGlyZWQsIHdhaXQpO1xuICAgICAgICAgICAgcmV0dXJuIGludm9rZUZ1bmMobGFzdENhbGxUaW1lKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRpbWVySWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KHRpbWVyRXhwaXJlZCwgd2FpdCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIGRlYm91bmNlZC5jYW5jZWwgPSBjYW5jZWw7XG4gICAgICBkZWJvdW5jZWQuZmx1c2ggPSBmbHVzaDtcbiAgICAgIHJldHVybiBkZWJvdW5jZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGVmZXJzIGludm9raW5nIHRoZSBgZnVuY2AgdW50aWwgdGhlIGN1cnJlbnQgY2FsbCBzdGFjayBoYXMgY2xlYXJlZC4gQW55XG4gICAgICogYWRkaXRpb25hbCBhcmd1bWVudHMgYXJlIHByb3ZpZGVkIHRvIGBmdW5jYCB3aGVuIGl0J3MgaW52b2tlZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRlZmVyLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW2FyZ3NdIFRoZSBhcmd1bWVudHMgdG8gaW52b2tlIGBmdW5jYCB3aXRoLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHRpbWVyIGlkLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRlZmVyKGZ1bmN0aW9uKHRleHQpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKHRleHQpO1xuICAgICAqIH0sICdkZWZlcnJlZCcpO1xuICAgICAqIC8vID0+IExvZ3MgJ2RlZmVycmVkJyBhZnRlciBvbmUgbWlsbGlzZWNvbmQuXG4gICAgICovXG4gICAgdmFyIGRlZmVyID0gYmFzZVJlc3QoZnVuY3Rpb24oZnVuYywgYXJncykge1xuICAgICAgcmV0dXJuIGJhc2VEZWxheShmdW5jLCAxLCBhcmdzKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIEludm9rZXMgYGZ1bmNgIGFmdGVyIGB3YWl0YCBtaWxsaXNlY29uZHMuIEFueSBhZGRpdGlvbmFsIGFyZ3VtZW50cyBhcmVcbiAgICAgKiBwcm92aWRlZCB0byBgZnVuY2Agd2hlbiBpdCdzIGludm9rZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBkZWxheS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gd2FpdCBUaGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byBkZWxheSBpbnZvY2F0aW9uLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW2FyZ3NdIFRoZSBhcmd1bWVudHMgdG8gaW52b2tlIGBmdW5jYCB3aXRoLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHRpbWVyIGlkLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRlbGF5KGZ1bmN0aW9uKHRleHQpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKHRleHQpO1xuICAgICAqIH0sIDEwMDAsICdsYXRlcicpO1xuICAgICAqIC8vID0+IExvZ3MgJ2xhdGVyJyBhZnRlciBvbmUgc2Vjb25kLlxuICAgICAqL1xuICAgIHZhciBkZWxheSA9IGJhc2VSZXN0KGZ1bmN0aW9uKGZ1bmMsIHdhaXQsIGFyZ3MpIHtcbiAgICAgIHJldHVybiBiYXNlRGVsYXkoZnVuYywgdG9OdW1iZXIod2FpdCkgfHwgMCwgYXJncyk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIGFyZ3VtZW50cyByZXZlcnNlZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGZsaXAgYXJndW1lbnRzIGZvci5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmbGlwcGVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgZmxpcHBlZCA9IF8uZmxpcChmdW5jdGlvbigpIHtcbiAgICAgKiAgIHJldHVybiBfLnRvQXJyYXkoYXJndW1lbnRzKTtcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIGZsaXBwZWQoJ2EnLCAnYicsICdjJywgJ2QnKTtcbiAgICAgKiAvLyA9PiBbJ2QnLCAnYycsICdiJywgJ2EnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZsaXAoZnVuYykge1xuICAgICAgcmV0dXJuIGNyZWF0ZVdyYXAoZnVuYywgV1JBUF9GTElQX0ZMQUcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IG1lbW9pemVzIHRoZSByZXN1bHQgb2YgYGZ1bmNgLiBJZiBgcmVzb2x2ZXJgIGlzXG4gICAgICogcHJvdmlkZWQsIGl0IGRldGVybWluZXMgdGhlIGNhY2hlIGtleSBmb3Igc3RvcmluZyB0aGUgcmVzdWx0IGJhc2VkIG9uIHRoZVxuICAgICAqIGFyZ3VtZW50cyBwcm92aWRlZCB0byB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24uIEJ5IGRlZmF1bHQsIHRoZSBmaXJzdCBhcmd1bWVudFxuICAgICAqIHByb3ZpZGVkIHRvIHRoZSBtZW1vaXplZCBmdW5jdGlvbiBpcyB1c2VkIGFzIHRoZSBtYXAgY2FjaGUga2V5LiBUaGUgYGZ1bmNgXG4gICAgICogaXMgaW52b2tlZCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBvZiB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhlIGNhY2hlIGlzIGV4cG9zZWQgYXMgdGhlIGBjYWNoZWAgcHJvcGVydHkgb24gdGhlIG1lbW9pemVkXG4gICAgICogZnVuY3Rpb24uIEl0cyBjcmVhdGlvbiBtYXkgYmUgY3VzdG9taXplZCBieSByZXBsYWNpbmcgdGhlIGBfLm1lbW9pemUuQ2FjaGVgXG4gICAgICogY29uc3RydWN0b3Igd2l0aCBvbmUgd2hvc2UgaW5zdGFuY2VzIGltcGxlbWVudCB0aGVcbiAgICAgKiBbYE1hcGBdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXByb3BlcnRpZXMtb2YtdGhlLW1hcC1wcm90b3R5cGUtb2JqZWN0KVxuICAgICAqIG1ldGhvZCBpbnRlcmZhY2Ugb2YgYGNsZWFyYCwgYGRlbGV0ZWAsIGBnZXRgLCBgaGFzYCwgYW5kIGBzZXRgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gaGF2ZSBpdHMgb3V0cHV0IG1lbW9pemVkLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtyZXNvbHZlcl0gVGhlIGZ1bmN0aW9uIHRvIHJlc29sdmUgdGhlIGNhY2hlIGtleS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBtZW1vaXplZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxLCAnYic6IDIgfTtcbiAgICAgKiB2YXIgb3RoZXIgPSB7ICdjJzogMywgJ2QnOiA0IH07XG4gICAgICpcbiAgICAgKiB2YXIgdmFsdWVzID0gXy5tZW1vaXplKF8udmFsdWVzKTtcbiAgICAgKiB2YWx1ZXMob2JqZWN0KTtcbiAgICAgKiAvLyA9PiBbMSwgMl1cbiAgICAgKlxuICAgICAqIHZhbHVlcyhvdGhlcik7XG4gICAgICogLy8gPT4gWzMsIDRdXG4gICAgICpcbiAgICAgKiBvYmplY3QuYSA9IDI7XG4gICAgICogdmFsdWVzKG9iamVjdCk7XG4gICAgICogLy8gPT4gWzEsIDJdXG4gICAgICpcbiAgICAgKiAvLyBNb2RpZnkgdGhlIHJlc3VsdCBjYWNoZS5cbiAgICAgKiB2YWx1ZXMuY2FjaGUuc2V0KG9iamVjdCwgWydhJywgJ2InXSk7XG4gICAgICogdmFsdWVzKG9iamVjdCk7XG4gICAgICogLy8gPT4gWydhJywgJ2InXVxuICAgICAqXG4gICAgICogLy8gUmVwbGFjZSBgXy5tZW1vaXplLkNhY2hlYC5cbiAgICAgKiBfLm1lbW9pemUuQ2FjaGUgPSBXZWFrTWFwO1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1lbW9pemUoZnVuYywgcmVzb2x2ZXIpIHtcbiAgICAgIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nIHx8IChyZXNvbHZlciAhPSBudWxsICYmIHR5cGVvZiByZXNvbHZlciAhPSAnZnVuY3Rpb24nKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICB2YXIgbWVtb2l6ZWQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHMsXG4gICAgICAgICAgICBrZXkgPSByZXNvbHZlciA/IHJlc29sdmVyLmFwcGx5KHRoaXMsIGFyZ3MpIDogYXJnc1swXSxcbiAgICAgICAgICAgIGNhY2hlID0gbWVtb2l6ZWQuY2FjaGU7XG5cbiAgICAgICAgaWYgKGNhY2hlLmhhcyhrZXkpKSB7XG4gICAgICAgICAgcmV0dXJuIGNhY2hlLmdldChrZXkpO1xuICAgICAgICB9XG4gICAgICAgIHZhciByZXN1bHQgPSBmdW5jLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgICBtZW1vaXplZC5jYWNoZSA9IGNhY2hlLnNldChrZXksIHJlc3VsdCkgfHwgY2FjaGU7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9O1xuICAgICAgbWVtb2l6ZWQuY2FjaGUgPSBuZXcgKG1lbW9pemUuQ2FjaGUgfHwgTWFwQ2FjaGUpO1xuICAgICAgcmV0dXJuIG1lbW9pemVkO1xuICAgIH1cblxuICAgIC8vIEV4cG9zZSBgTWFwQ2FjaGVgLlxuICAgIG1lbW9pemUuQ2FjaGUgPSBNYXBDYWNoZTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IG5lZ2F0ZXMgdGhlIHJlc3VsdCBvZiB0aGUgcHJlZGljYXRlIGBmdW5jYC4gVGhlXG4gICAgICogYGZ1bmNgIHByZWRpY2F0ZSBpcyBpbnZva2VkIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIGFuZCBhcmd1bWVudHMgb2YgdGhlXG4gICAgICogY3JlYXRlZCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgcHJlZGljYXRlIHRvIG5lZ2F0ZS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBuZWdhdGVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBpc0V2ZW4obikge1xuICAgICAqICAgcmV0dXJuIG4gJSAyID09IDA7XG4gICAgICogfVxuICAgICAqXG4gICAgICogXy5maWx0ZXIoWzEsIDIsIDMsIDQsIDUsIDZdLCBfLm5lZ2F0ZShpc0V2ZW4pKTtcbiAgICAgKiAvLyA9PiBbMSwgMywgNV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBuZWdhdGUocHJlZGljYXRlKSB7XG4gICAgICBpZiAodHlwZW9mIHByZWRpY2F0ZSAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICAgIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICAgICAgICBjYXNlIDA6IHJldHVybiAhcHJlZGljYXRlLmNhbGwodGhpcyk7XG4gICAgICAgICAgY2FzZSAxOiByZXR1cm4gIXByZWRpY2F0ZS5jYWxsKHRoaXMsIGFyZ3NbMF0pO1xuICAgICAgICAgIGNhc2UgMjogcmV0dXJuICFwcmVkaWNhdGUuY2FsbCh0aGlzLCBhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICAgICAgICBjYXNlIDM6IHJldHVybiAhcHJlZGljYXRlLmNhbGwodGhpcywgYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICFwcmVkaWNhdGUuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGlzIHJlc3RyaWN0ZWQgdG8gaW52b2tpbmcgYGZ1bmNgIG9uY2UuIFJlcGVhdCBjYWxsc1xuICAgICAqIHRvIHRoZSBmdW5jdGlvbiByZXR1cm4gdGhlIHZhbHVlIG9mIHRoZSBmaXJzdCBpbnZvY2F0aW9uLiBUaGUgYGZ1bmNgIGlzXG4gICAgICogaW52b2tlZCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBhbmQgYXJndW1lbnRzIG9mIHRoZSBjcmVhdGVkIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcmVzdHJpY3QuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcmVzdHJpY3RlZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGluaXRpYWxpemUgPSBfLm9uY2UoY3JlYXRlQXBwbGljYXRpb24pO1xuICAgICAqIGluaXRpYWxpemUoKTtcbiAgICAgKiBpbml0aWFsaXplKCk7XG4gICAgICogLy8gPT4gYGNyZWF0ZUFwcGxpY2F0aW9uYCBpcyBpbnZva2VkIG9uY2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBvbmNlKGZ1bmMpIHtcbiAgICAgIHJldHVybiBiZWZvcmUoMiwgZnVuYyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCBpdHMgYXJndW1lbnRzIHRyYW5zZm9ybWVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gd3JhcC5cbiAgICAgKiBAcGFyYW0gey4uLihGdW5jdGlvbnxGdW5jdGlvbltdKX0gW3RyYW5zZm9ybXM9W18uaWRlbnRpdHldXVxuICAgICAqICBUaGUgYXJndW1lbnQgdHJhbnNmb3Jtcy5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gZG91YmxlZChuKSB7XG4gICAgICogICByZXR1cm4gbiAqIDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gc3F1YXJlKG4pIHtcbiAgICAgKiAgIHJldHVybiBuICogbjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgZnVuYyA9IF8ub3ZlckFyZ3MoZnVuY3Rpb24oeCwgeSkge1xuICAgICAqICAgcmV0dXJuIFt4LCB5XTtcbiAgICAgKiB9LCBbc3F1YXJlLCBkb3VibGVkXSk7XG4gICAgICpcbiAgICAgKiBmdW5jKDksIDMpO1xuICAgICAqIC8vID0+IFs4MSwgNl1cbiAgICAgKlxuICAgICAqIGZ1bmMoMTAsIDUpO1xuICAgICAqIC8vID0+IFsxMDAsIDEwXVxuICAgICAqL1xuICAgIHZhciBvdmVyQXJncyA9IGNhc3RSZXN0KGZ1bmN0aW9uKGZ1bmMsIHRyYW5zZm9ybXMpIHtcbiAgICAgIHRyYW5zZm9ybXMgPSAodHJhbnNmb3Jtcy5sZW5ndGggPT0gMSAmJiBpc0FycmF5KHRyYW5zZm9ybXNbMF0pKVxuICAgICAgICA/IGFycmF5TWFwKHRyYW5zZm9ybXNbMF0sIGJhc2VVbmFyeShnZXRJdGVyYXRlZSgpKSlcbiAgICAgICAgOiBhcnJheU1hcChiYXNlRmxhdHRlbih0cmFuc2Zvcm1zLCAxKSwgYmFzZVVuYXJ5KGdldEl0ZXJhdGVlKCkpKTtcblxuICAgICAgdmFyIGZ1bmNzTGVuZ3RoID0gdHJhbnNmb3Jtcy5sZW5ndGg7XG4gICAgICByZXR1cm4gYmFzZVJlc3QoZnVuY3Rpb24oYXJncykge1xuICAgICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICAgIGxlbmd0aCA9IG5hdGl2ZU1pbihhcmdzLmxlbmd0aCwgZnVuY3NMZW5ndGgpO1xuXG4gICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgYXJnc1tpbmRleF0gPSB0cmFuc2Zvcm1zW2luZGV4XS5jYWxsKHRoaXMsIGFyZ3NbaW5kZXhdKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXBwbHkoZnVuYywgdGhpcywgYXJncyk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggYHBhcnRpYWxzYCBwcmVwZW5kZWQgdG8gdGhlXG4gICAgICogYXJndW1lbnRzIGl0IHJlY2VpdmVzLiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmJpbmRgIGV4Y2VwdCBpdCBkb2VzICoqbm90KipcbiAgICAgKiBhbHRlciB0aGUgYHRoaXNgIGJpbmRpbmcuXG4gICAgICpcbiAgICAgKiBUaGUgYF8ucGFydGlhbC5wbGFjZWhvbGRlcmAgdmFsdWUsIHdoaWNoIGRlZmF1bHRzIHRvIGBfYCBpbiBtb25vbGl0aGljXG4gICAgICogYnVpbGRzLCBtYXkgYmUgdXNlZCBhcyBhIHBsYWNlaG9sZGVyIGZvciBwYXJ0aWFsbHkgYXBwbGllZCBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgZG9lc24ndCBzZXQgdGhlIFwibGVuZ3RoXCIgcHJvcGVydHkgb2YgcGFydGlhbGx5XG4gICAgICogYXBwbGllZCBmdW5jdGlvbnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4yLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBwYXJ0aWFsbHkgYXBwbHkgYXJndW1lbnRzIHRvLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW3BhcnRpYWxzXSBUaGUgYXJndW1lbnRzIHRvIGJlIHBhcnRpYWxseSBhcHBsaWVkLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHBhcnRpYWxseSBhcHBsaWVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBncmVldChncmVldGluZywgbmFtZSkge1xuICAgICAqICAgcmV0dXJuIGdyZWV0aW5nICsgJyAnICsgbmFtZTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgc2F5SGVsbG9UbyA9IF8ucGFydGlhbChncmVldCwgJ2hlbGxvJyk7XG4gICAgICogc2F5SGVsbG9UbygnZnJlZCcpO1xuICAgICAqIC8vID0+ICdoZWxsbyBmcmVkJ1xuICAgICAqXG4gICAgICogLy8gUGFydGlhbGx5IGFwcGxpZWQgd2l0aCBwbGFjZWhvbGRlcnMuXG4gICAgICogdmFyIGdyZWV0RnJlZCA9IF8ucGFydGlhbChncmVldCwgXywgJ2ZyZWQnKTtcbiAgICAgKiBncmVldEZyZWQoJ2hpJyk7XG4gICAgICogLy8gPT4gJ2hpIGZyZWQnXG4gICAgICovXG4gICAgdmFyIHBhcnRpYWwgPSBiYXNlUmVzdChmdW5jdGlvbihmdW5jLCBwYXJ0aWFscykge1xuICAgICAgdmFyIGhvbGRlcnMgPSByZXBsYWNlSG9sZGVycyhwYXJ0aWFscywgZ2V0SG9sZGVyKHBhcnRpYWwpKTtcbiAgICAgIHJldHVybiBjcmVhdGVXcmFwKGZ1bmMsIFdSQVBfUEFSVElBTF9GTEFHLCB1bmRlZmluZWQsIHBhcnRpYWxzLCBob2xkZXJzKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ucGFydGlhbGAgZXhjZXB0IHRoYXQgcGFydGlhbGx5IGFwcGxpZWQgYXJndW1lbnRzXG4gICAgICogYXJlIGFwcGVuZGVkIHRvIHRoZSBhcmd1bWVudHMgaXQgcmVjZWl2ZXMuXG4gICAgICpcbiAgICAgKiBUaGUgYF8ucGFydGlhbFJpZ2h0LnBsYWNlaG9sZGVyYCB2YWx1ZSwgd2hpY2ggZGVmYXVsdHMgdG8gYF9gIGluIG1vbm9saXRoaWNcbiAgICAgKiBidWlsZHMsIG1heSBiZSB1c2VkIGFzIGEgcGxhY2Vob2xkZXIgZm9yIHBhcnRpYWxseSBhcHBsaWVkIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBkb2Vzbid0IHNldCB0aGUgXCJsZW5ndGhcIiBwcm9wZXJ0eSBvZiBwYXJ0aWFsbHlcbiAgICAgKiBhcHBsaWVkIGZ1bmN0aW9ucy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAxLjAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHBhcnRpYWxseSBhcHBseSBhcmd1bWVudHMgdG8uXG4gICAgICogQHBhcmFtIHsuLi4qfSBbcGFydGlhbHNdIFRoZSBhcmd1bWVudHMgdG8gYmUgcGFydGlhbGx5IGFwcGxpZWQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcGFydGlhbGx5IGFwcGxpZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGdyZWV0KGdyZWV0aW5nLCBuYW1lKSB7XG4gICAgICogICByZXR1cm4gZ3JlZXRpbmcgKyAnICcgKyBuYW1lO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBncmVldEZyZWQgPSBfLnBhcnRpYWxSaWdodChncmVldCwgJ2ZyZWQnKTtcbiAgICAgKiBncmVldEZyZWQoJ2hpJyk7XG4gICAgICogLy8gPT4gJ2hpIGZyZWQnXG4gICAgICpcbiAgICAgKiAvLyBQYXJ0aWFsbHkgYXBwbGllZCB3aXRoIHBsYWNlaG9sZGVycy5cbiAgICAgKiB2YXIgc2F5SGVsbG9UbyA9IF8ucGFydGlhbFJpZ2h0KGdyZWV0LCAnaGVsbG8nLCBfKTtcbiAgICAgKiBzYXlIZWxsb1RvKCdmcmVkJyk7XG4gICAgICogLy8gPT4gJ2hlbGxvIGZyZWQnXG4gICAgICovXG4gICAgdmFyIHBhcnRpYWxSaWdodCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGZ1bmMsIHBhcnRpYWxzKSB7XG4gICAgICB2YXIgaG9sZGVycyA9IHJlcGxhY2VIb2xkZXJzKHBhcnRpYWxzLCBnZXRIb2xkZXIocGFydGlhbFJpZ2h0KSk7XG4gICAgICByZXR1cm4gY3JlYXRlV3JhcChmdW5jLCBXUkFQX1BBUlRJQUxfUklHSFRfRkxBRywgdW5kZWZpbmVkLCBwYXJ0aWFscywgaG9sZGVycyk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIGFyZ3VtZW50cyBhcnJhbmdlZCBhY2NvcmRpbmdcbiAgICAgKiB0byB0aGUgc3BlY2lmaWVkIGBpbmRleGVzYCB3aGVyZSB0aGUgYXJndW1lbnQgdmFsdWUgYXQgdGhlIGZpcnN0IGluZGV4IGlzXG4gICAgICogcHJvdmlkZWQgYXMgdGhlIGZpcnN0IGFyZ3VtZW50LCB0aGUgYXJndW1lbnQgdmFsdWUgYXQgdGhlIHNlY29uZCBpbmRleCBpc1xuICAgICAqIHByb3ZpZGVkIGFzIHRoZSBzZWNvbmQgYXJndW1lbnQsIGFuZCBzbyBvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHJlYXJyYW5nZSBhcmd1bWVudHMgZm9yLlxuICAgICAqIEBwYXJhbSB7Li4uKG51bWJlcnxudW1iZXJbXSl9IGluZGV4ZXMgVGhlIGFycmFuZ2VkIGFyZ3VtZW50IGluZGV4ZXMuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciByZWFyZ2VkID0gXy5yZWFyZyhmdW5jdGlvbihhLCBiLCBjKSB7XG4gICAgICogICByZXR1cm4gW2EsIGIsIGNdO1xuICAgICAqIH0sIFsyLCAwLCAxXSk7XG4gICAgICpcbiAgICAgKiByZWFyZ2VkKCdiJywgJ2MnLCAnYScpXG4gICAgICogLy8gPT4gWydhJywgJ2InLCAnYyddXG4gICAgICovXG4gICAgdmFyIHJlYXJnID0gZmxhdFJlc3QoZnVuY3Rpb24oZnVuYywgaW5kZXhlcykge1xuICAgICAgcmV0dXJuIGNyZWF0ZVdyYXAoZnVuYywgV1JBUF9SRUFSR19GTEFHLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBpbmRleGVzKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIHRoZVxuICAgICAqIGNyZWF0ZWQgZnVuY3Rpb24gYW5kIGFyZ3VtZW50cyBmcm9tIGBzdGFydGAgYW5kIGJleW9uZCBwcm92aWRlZCBhc1xuICAgICAqIGFuIGFycmF5LlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGJhc2VkIG9uIHRoZVxuICAgICAqIFtyZXN0IHBhcmFtZXRlcl0oaHR0cHM6Ly9tZG4uaW8vcmVzdF9wYXJhbWV0ZXJzKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGFwcGx5IGEgcmVzdCBwYXJhbWV0ZXIgdG8uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD1mdW5jLmxlbmd0aC0xXSBUaGUgc3RhcnQgcG9zaXRpb24gb2YgdGhlIHJlc3QgcGFyYW1ldGVyLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgc2F5ID0gXy5yZXN0KGZ1bmN0aW9uKHdoYXQsIG5hbWVzKSB7XG4gICAgICogICByZXR1cm4gd2hhdCArICcgJyArIF8uaW5pdGlhbChuYW1lcykuam9pbignLCAnKSArXG4gICAgICogICAgIChfLnNpemUobmFtZXMpID4gMSA/ICcsICYgJyA6ICcnKSArIF8ubGFzdChuYW1lcyk7XG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiBzYXkoJ2hlbGxvJywgJ2ZyZWQnLCAnYmFybmV5JywgJ3BlYmJsZXMnKTtcbiAgICAgKiAvLyA9PiAnaGVsbG8gZnJlZCwgYmFybmV5LCAmIHBlYmJsZXMnXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVzdChmdW5jLCBzdGFydCkge1xuICAgICAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgfVxuICAgICAgc3RhcnQgPSBzdGFydCA9PT0gdW5kZWZpbmVkID8gc3RhcnQgOiB0b0ludGVnZXIoc3RhcnQpO1xuICAgICAgcmV0dXJuIGJhc2VSZXN0KGZ1bmMsIHN0YXJ0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBvZiB0aGVcbiAgICAgKiBjcmVhdGUgZnVuY3Rpb24gYW5kIGFuIGFycmF5IG9mIGFyZ3VtZW50cyBtdWNoIGxpa2VcbiAgICAgKiBbYEZ1bmN0aW9uI2FwcGx5YF0oaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLWZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseSkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgYmFzZWQgb24gdGhlXG4gICAgICogW3NwcmVhZCBvcGVyYXRvcl0oaHR0cHM6Ly9tZG4uaW8vc3ByZWFkX29wZXJhdG9yKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjIuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHNwcmVhZCBhcmd1bWVudHMgb3Zlci5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PTBdIFRoZSBzdGFydCBwb3NpdGlvbiBvZiB0aGUgc3ByZWFkLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgc2F5ID0gXy5zcHJlYWQoZnVuY3Rpb24od2hvLCB3aGF0KSB7XG4gICAgICogICByZXR1cm4gd2hvICsgJyBzYXlzICcgKyB3aGF0O1xuICAgICAqIH0pO1xuICAgICAqXG4gICAgICogc2F5KFsnZnJlZCcsICdoZWxsbyddKTtcbiAgICAgKiAvLyA9PiAnZnJlZCBzYXlzIGhlbGxvJ1xuICAgICAqXG4gICAgICogdmFyIG51bWJlcnMgPSBQcm9taXNlLmFsbChbXG4gICAgICogICBQcm9taXNlLnJlc29sdmUoNDApLFxuICAgICAqICAgUHJvbWlzZS5yZXNvbHZlKDM2KVxuICAgICAqIF0pO1xuICAgICAqXG4gICAgICogbnVtYmVycy50aGVuKF8uc3ByZWFkKGZ1bmN0aW9uKHgsIHkpIHtcbiAgICAgKiAgIHJldHVybiB4ICsgeTtcbiAgICAgKiB9KSk7XG4gICAgICogLy8gPT4gYSBQcm9taXNlIG9mIDc2XG4gICAgICovXG4gICAgZnVuY3Rpb24gc3ByZWFkKGZ1bmMsIHN0YXJ0KSB7XG4gICAgICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICBzdGFydCA9IHN0YXJ0ID09IG51bGwgPyAwIDogbmF0aXZlTWF4KHRvSW50ZWdlcihzdGFydCksIDApO1xuICAgICAgcmV0dXJuIGJhc2VSZXN0KGZ1bmN0aW9uKGFyZ3MpIHtcbiAgICAgICAgdmFyIGFycmF5ID0gYXJnc1tzdGFydF0sXG4gICAgICAgICAgICBvdGhlckFyZ3MgPSBjYXN0U2xpY2UoYXJncywgMCwgc3RhcnQpO1xuXG4gICAgICAgIGlmIChhcnJheSkge1xuICAgICAgICAgIGFycmF5UHVzaChvdGhlckFyZ3MsIGFycmF5KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXBwbHkoZnVuYywgdGhpcywgb3RoZXJBcmdzKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSB0aHJvdHRsZWQgZnVuY3Rpb24gdGhhdCBvbmx5IGludm9rZXMgYGZ1bmNgIGF0IG1vc3Qgb25jZSBwZXJcbiAgICAgKiBldmVyeSBgd2FpdGAgbWlsbGlzZWNvbmRzLiBUaGUgdGhyb3R0bGVkIGZ1bmN0aW9uIGNvbWVzIHdpdGggYSBgY2FuY2VsYFxuICAgICAqIG1ldGhvZCB0byBjYW5jZWwgZGVsYXllZCBgZnVuY2AgaW52b2NhdGlvbnMgYW5kIGEgYGZsdXNoYCBtZXRob2QgdG9cbiAgICAgKiBpbW1lZGlhdGVseSBpbnZva2UgdGhlbS4gUHJvdmlkZSBgb3B0aW9uc2AgdG8gaW5kaWNhdGUgd2hldGhlciBgZnVuY2BcbiAgICAgKiBzaG91bGQgYmUgaW52b2tlZCBvbiB0aGUgbGVhZGluZyBhbmQvb3IgdHJhaWxpbmcgZWRnZSBvZiB0aGUgYHdhaXRgXG4gICAgICogdGltZW91dC4gVGhlIGBmdW5jYCBpcyBpbnZva2VkIHdpdGggdGhlIGxhc3QgYXJndW1lbnRzIHByb3ZpZGVkIHRvIHRoZVxuICAgICAqIHRocm90dGxlZCBmdW5jdGlvbi4gU3Vic2VxdWVudCBjYWxscyB0byB0aGUgdGhyb3R0bGVkIGZ1bmN0aW9uIHJldHVybiB0aGVcbiAgICAgKiByZXN1bHQgb2YgdGhlIGxhc3QgYGZ1bmNgIGludm9jYXRpb24uXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogSWYgYGxlYWRpbmdgIGFuZCBgdHJhaWxpbmdgIG9wdGlvbnMgYXJlIGB0cnVlYCwgYGZ1bmNgIGlzXG4gICAgICogaW52b2tlZCBvbiB0aGUgdHJhaWxpbmcgZWRnZSBvZiB0aGUgdGltZW91dCBvbmx5IGlmIHRoZSB0aHJvdHRsZWQgZnVuY3Rpb25cbiAgICAgKiBpcyBpbnZva2VkIG1vcmUgdGhhbiBvbmNlIGR1cmluZyB0aGUgYHdhaXRgIHRpbWVvdXQuXG4gICAgICpcbiAgICAgKiBJZiBgd2FpdGAgaXMgYDBgIGFuZCBgbGVhZGluZ2AgaXMgYGZhbHNlYCwgYGZ1bmNgIGludm9jYXRpb24gaXMgZGVmZXJyZWRcbiAgICAgKiB1bnRpbCB0byB0aGUgbmV4dCB0aWNrLCBzaW1pbGFyIHRvIGBzZXRUaW1lb3V0YCB3aXRoIGEgdGltZW91dCBvZiBgMGAuXG4gICAgICpcbiAgICAgKiBTZWUgW0RhdmlkIENvcmJhY2hvJ3MgYXJ0aWNsZV0oaHR0cHM6Ly9jc3MtdHJpY2tzLmNvbS9kZWJvdW5jaW5nLXRocm90dGxpbmctZXhwbGFpbmVkLWV4YW1wbGVzLylcbiAgICAgKiBmb3IgZGV0YWlscyBvdmVyIHRoZSBkaWZmZXJlbmNlcyBiZXR3ZWVuIGBfLnRocm90dGxlYCBhbmQgYF8uZGVib3VuY2VgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gdGhyb3R0bGUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFt3YWl0PTBdIFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIHRocm90dGxlIGludm9jYXRpb25zIHRvLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucz17fV0gVGhlIG9wdGlvbnMgb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMubGVhZGluZz10cnVlXVxuICAgICAqICBTcGVjaWZ5IGludm9raW5nIG9uIHRoZSBsZWFkaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy50cmFpbGluZz10cnVlXVxuICAgICAqICBTcGVjaWZ5IGludm9raW5nIG9uIHRoZSB0cmFpbGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHRocm90dGxlZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogLy8gQXZvaWQgZXhjZXNzaXZlbHkgdXBkYXRpbmcgdGhlIHBvc2l0aW9uIHdoaWxlIHNjcm9sbGluZy5cbiAgICAgKiBqUXVlcnkod2luZG93KS5vbignc2Nyb2xsJywgXy50aHJvdHRsZSh1cGRhdGVQb3NpdGlvbiwgMTAwKSk7XG4gICAgICpcbiAgICAgKiAvLyBJbnZva2UgYHJlbmV3VG9rZW5gIHdoZW4gdGhlIGNsaWNrIGV2ZW50IGlzIGZpcmVkLCBidXQgbm90IG1vcmUgdGhhbiBvbmNlIGV2ZXJ5IDUgbWludXRlcy5cbiAgICAgKiB2YXIgdGhyb3R0bGVkID0gXy50aHJvdHRsZShyZW5ld1Rva2VuLCAzMDAwMDAsIHsgJ3RyYWlsaW5nJzogZmFsc2UgfSk7XG4gICAgICogalF1ZXJ5KGVsZW1lbnQpLm9uKCdjbGljaycsIHRocm90dGxlZCk7XG4gICAgICpcbiAgICAgKiAvLyBDYW5jZWwgdGhlIHRyYWlsaW5nIHRocm90dGxlZCBpbnZvY2F0aW9uLlxuICAgICAqIGpRdWVyeSh3aW5kb3cpLm9uKCdwb3BzdGF0ZScsIHRocm90dGxlZC5jYW5jZWwpO1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRocm90dGxlKGZ1bmMsIHdhaXQsIG9wdGlvbnMpIHtcbiAgICAgIHZhciBsZWFkaW5nID0gdHJ1ZSxcbiAgICAgICAgICB0cmFpbGluZyA9IHRydWU7XG5cbiAgICAgIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIGlmIChpc09iamVjdChvcHRpb25zKSkge1xuICAgICAgICBsZWFkaW5nID0gJ2xlYWRpbmcnIGluIG9wdGlvbnMgPyAhIW9wdGlvbnMubGVhZGluZyA6IGxlYWRpbmc7XG4gICAgICAgIHRyYWlsaW5nID0gJ3RyYWlsaW5nJyBpbiBvcHRpb25zID8gISFvcHRpb25zLnRyYWlsaW5nIDogdHJhaWxpbmc7XG4gICAgICB9XG4gICAgICByZXR1cm4gZGVib3VuY2UoZnVuYywgd2FpdCwge1xuICAgICAgICAnbGVhZGluZyc6IGxlYWRpbmcsXG4gICAgICAgICdtYXhXYWl0Jzogd2FpdCxcbiAgICAgICAgJ3RyYWlsaW5nJzogdHJhaWxpbmdcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGFjY2VwdHMgdXAgdG8gb25lIGFyZ3VtZW50LCBpZ25vcmluZyBhbnlcbiAgICAgKiBhZGRpdGlvbmFsIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNhcCBhcmd1bWVudHMgZm9yLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNhcHBlZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5tYXAoWyc2JywgJzgnLCAnMTAnXSwgXy51bmFyeShwYXJzZUludCkpO1xuICAgICAqIC8vID0+IFs2LCA4LCAxMF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1bmFyeShmdW5jKSB7XG4gICAgICByZXR1cm4gYXJ5KGZ1bmMsIDEpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHByb3ZpZGVzIGB2YWx1ZWAgdG8gYHdyYXBwZXJgIGFzIGl0cyBmaXJzdFxuICAgICAqIGFyZ3VtZW50LiBBbnkgYWRkaXRpb25hbCBhcmd1bWVudHMgcHJvdmlkZWQgdG8gdGhlIGZ1bmN0aW9uIGFyZSBhcHBlbmRlZFxuICAgICAqIHRvIHRob3NlIHByb3ZpZGVkIHRvIHRoZSBgd3JhcHBlcmAuIFRoZSB3cmFwcGVyIGlzIGludm9rZWQgd2l0aCB0aGUgYHRoaXNgXG4gICAgICogYmluZGluZyBvZiB0aGUgY3JlYXRlZCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHdyYXAuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3dyYXBwZXI9aWRlbnRpdHldIFRoZSB3cmFwcGVyIGZ1bmN0aW9uLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgcCA9IF8ud3JhcChfLmVzY2FwZSwgZnVuY3Rpb24oZnVuYywgdGV4dCkge1xuICAgICAqICAgcmV0dXJuICc8cD4nICsgZnVuYyh0ZXh0KSArICc8L3A+JztcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIHAoJ2ZyZWQsIGJhcm5leSwgJiBwZWJibGVzJyk7XG4gICAgICogLy8gPT4gJzxwPmZyZWQsIGJhcm5leSwgJmFtcDsgcGViYmxlczwvcD4nXG4gICAgICovXG4gICAgZnVuY3Rpb24gd3JhcCh2YWx1ZSwgd3JhcHBlcikge1xuICAgICAgcmV0dXJuIHBhcnRpYWwoY2FzdEZ1bmN0aW9uKHdyYXBwZXIpLCB2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ2FzdHMgYHZhbHVlYCBhcyBhbiBhcnJheSBpZiBpdCdzIG5vdCBvbmUuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC40LjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBjYXN0IGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmNhc3RBcnJheSgxKTtcbiAgICAgKiAvLyA9PiBbMV1cbiAgICAgKlxuICAgICAqIF8uY2FzdEFycmF5KHsgJ2EnOiAxIH0pO1xuICAgICAqIC8vID0+IFt7ICdhJzogMSB9XVxuICAgICAqXG4gICAgICogXy5jYXN0QXJyYXkoJ2FiYycpO1xuICAgICAqIC8vID0+IFsnYWJjJ11cbiAgICAgKlxuICAgICAqIF8uY2FzdEFycmF5KG51bGwpO1xuICAgICAqIC8vID0+IFtudWxsXVxuICAgICAqXG4gICAgICogXy5jYXN0QXJyYXkodW5kZWZpbmVkKTtcbiAgICAgKiAvLyA9PiBbdW5kZWZpbmVkXVxuICAgICAqXG4gICAgICogXy5jYXN0QXJyYXkoKTtcbiAgICAgKiAvLyA9PiBbXVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWzEsIDIsIDNdO1xuICAgICAqIGNvbnNvbGUubG9nKF8uY2FzdEFycmF5KGFycmF5KSA9PT0gYXJyYXkpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjYXN0QXJyYXkoKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgdmFyIHZhbHVlID0gYXJndW1lbnRzWzBdO1xuICAgICAgcmV0dXJuIGlzQXJyYXkodmFsdWUpID8gdmFsdWUgOiBbdmFsdWVdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzaGFsbG93IGNsb25lIG9mIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgbG9vc2VseSBiYXNlZCBvbiB0aGVcbiAgICAgKiBbc3RydWN0dXJlZCBjbG9uZSBhbGdvcml0aG1dKGh0dHBzOi8vbWRuLmlvL1N0cnVjdHVyZWRfY2xvbmVfYWxnb3JpdGhtKVxuICAgICAqIGFuZCBzdXBwb3J0cyBjbG9uaW5nIGFycmF5cywgYXJyYXkgYnVmZmVycywgYm9vbGVhbnMsIGRhdGUgb2JqZWN0cywgbWFwcyxcbiAgICAgKiBudW1iZXJzLCBgT2JqZWN0YCBvYmplY3RzLCByZWdleGVzLCBzZXRzLCBzdHJpbmdzLCBzeW1ib2xzLCBhbmQgdHlwZWRcbiAgICAgKiBhcnJheXMuIFRoZSBvd24gZW51bWVyYWJsZSBwcm9wZXJ0aWVzIG9mIGBhcmd1bWVudHNgIG9iamVjdHMgYXJlIGNsb25lZFxuICAgICAqIGFzIHBsYWluIG9iamVjdHMuIEFuIGVtcHR5IG9iamVjdCBpcyByZXR1cm5lZCBmb3IgdW5jbG9uZWFibGUgdmFsdWVzIHN1Y2hcbiAgICAgKiBhcyBlcnJvciBvYmplY3RzLCBmdW5jdGlvbnMsIERPTSBub2RlcywgYW5kIFdlYWtNYXBzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgY2xvbmVkIHZhbHVlLlxuICAgICAqIEBzZWUgXy5jbG9uZURlZXBcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAnYSc6IDEgfSwgeyAnYic6IDIgfV07XG4gICAgICpcbiAgICAgKiB2YXIgc2hhbGxvdyA9IF8uY2xvbmUob2JqZWN0cyk7XG4gICAgICogY29uc29sZS5sb2coc2hhbGxvd1swXSA9PT0gb2JqZWN0c1swXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsb25lKHZhbHVlKSB7XG4gICAgICByZXR1cm4gYmFzZUNsb25lKHZhbHVlLCBDTE9ORV9TWU1CT0xTX0ZMQUcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uY2xvbmVgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGN1c3RvbWl6ZXJgIHdoaWNoXG4gICAgICogaXMgaW52b2tlZCB0byBwcm9kdWNlIHRoZSBjbG9uZWQgdmFsdWUuIElmIGBjdXN0b21pemVyYCByZXR1cm5zIGB1bmRlZmluZWRgLFxuICAgICAqIGNsb25pbmcgaXMgaGFuZGxlZCBieSB0aGUgbWV0aG9kIGluc3RlYWQuIFRoZSBgY3VzdG9taXplcmAgaXMgaW52b2tlZCB3aXRoXG4gICAgICogdXAgdG8gZm91ciBhcmd1bWVudHM7ICh2YWx1ZSBbLCBpbmRleHxrZXksIG9iamVjdCwgc3RhY2tdKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2xvbmUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY2xvbmluZy5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgY2xvbmVkIHZhbHVlLlxuICAgICAqIEBzZWUgXy5jbG9uZURlZXBXaXRoXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGN1c3RvbWl6ZXIodmFsdWUpIHtcbiAgICAgKiAgIGlmIChfLmlzRWxlbWVudCh2YWx1ZSkpIHtcbiAgICAgKiAgICAgcmV0dXJuIHZhbHVlLmNsb25lTm9kZShmYWxzZSk7XG4gICAgICogICB9XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIGVsID0gXy5jbG9uZVdpdGgoZG9jdW1lbnQuYm9keSwgY3VzdG9taXplcik7XG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhlbCA9PT0gZG9jdW1lbnQuYm9keSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKiBjb25zb2xlLmxvZyhlbC5ub2RlTmFtZSk7XG4gICAgICogLy8gPT4gJ0JPRFknXG4gICAgICogY29uc29sZS5sb2coZWwuY2hpbGROb2Rlcy5sZW5ndGgpO1xuICAgICAqIC8vID0+IDBcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZVdpdGgodmFsdWUsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIGN1c3RvbWl6ZXIgPSB0eXBlb2YgY3VzdG9taXplciA9PSAnZnVuY3Rpb24nID8gY3VzdG9taXplciA6IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiBiYXNlQ2xvbmUodmFsdWUsIENMT05FX1NZTUJPTFNfRkxBRywgY3VzdG9taXplcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5jbG9uZWAgZXhjZXB0IHRoYXQgaXQgcmVjdXJzaXZlbHkgY2xvbmVzIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMS4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHJlY3Vyc2l2ZWx5IGNsb25lLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBkZWVwIGNsb25lZCB2YWx1ZS5cbiAgICAgKiBAc2VlIF8uY2xvbmVcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAnYSc6IDEgfSwgeyAnYic6IDIgfV07XG4gICAgICpcbiAgICAgKiB2YXIgZGVlcCA9IF8uY2xvbmVEZWVwKG9iamVjdHMpO1xuICAgICAqIGNvbnNvbGUubG9nKGRlZXBbMF0gPT09IG9iamVjdHNbMF0pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xvbmVEZWVwKHZhbHVlKSB7XG4gICAgICByZXR1cm4gYmFzZUNsb25lKHZhbHVlLCBDTE9ORV9ERUVQX0ZMQUcgfCBDTE9ORV9TWU1CT0xTX0ZMQUcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uY2xvbmVXaXRoYCBleGNlcHQgdGhhdCBpdCByZWN1cnNpdmVseSBjbG9uZXMgYHZhbHVlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcmVjdXJzaXZlbHkgY2xvbmUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY2xvbmluZy5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZGVlcCBjbG9uZWQgdmFsdWUuXG4gICAgICogQHNlZSBfLmNsb25lV2l0aFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBjdXN0b21pemVyKHZhbHVlKSB7XG4gICAgICogICBpZiAoXy5pc0VsZW1lbnQodmFsdWUpKSB7XG4gICAgICogICAgIHJldHVybiB2YWx1ZS5jbG9uZU5vZGUodHJ1ZSk7XG4gICAgICogICB9XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIGVsID0gXy5jbG9uZURlZXBXaXRoKGRvY3VtZW50LmJvZHksIGN1c3RvbWl6ZXIpO1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2coZWwgPT09IGRvY3VtZW50LmJvZHkpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICogY29uc29sZS5sb2coZWwubm9kZU5hbWUpO1xuICAgICAqIC8vID0+ICdCT0RZJ1xuICAgICAqIGNvbnNvbGUubG9nKGVsLmNoaWxkTm9kZXMubGVuZ3RoKTtcbiAgICAgKiAvLyA9PiAyMFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsb25lRGVlcFdpdGgodmFsdWUsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIGN1c3RvbWl6ZXIgPSB0eXBlb2YgY3VzdG9taXplciA9PSAnZnVuY3Rpb24nID8gY3VzdG9taXplciA6IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiBiYXNlQ2xvbmUodmFsdWUsIENMT05FX0RFRVBfRkxBRyB8IENMT05FX1NZTUJPTFNfRkxBRywgY3VzdG9taXplcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBvYmplY3RgIGNvbmZvcm1zIHRvIGBzb3VyY2VgIGJ5IGludm9raW5nIHRoZSBwcmVkaWNhdGVcbiAgICAgKiBwcm9wZXJ0aWVzIG9mIGBzb3VyY2VgIHdpdGggdGhlIGNvcnJlc3BvbmRpbmcgcHJvcGVydHkgdmFsdWVzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGVxdWl2YWxlbnQgdG8gYF8uY29uZm9ybXNgIHdoZW4gYHNvdXJjZWAgaXNcbiAgICAgKiBwYXJ0aWFsbHkgYXBwbGllZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjE0LjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSBwcmVkaWNhdGVzIHRvIGNvbmZvcm0gdG8uXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBvYmplY3RgIGNvbmZvcm1zLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSwgJ2InOiAyIH07XG4gICAgICpcbiAgICAgKiBfLmNvbmZvcm1zVG8ob2JqZWN0LCB7ICdiJzogZnVuY3Rpb24obikgeyByZXR1cm4gbiA+IDE7IH0gfSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5jb25mb3Jtc1RvKG9iamVjdCwgeyAnYic6IGZ1bmN0aW9uKG4pIHsgcmV0dXJuIG4gPiAyOyB9IH0pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29uZm9ybXNUbyhvYmplY3QsIHNvdXJjZSkge1xuICAgICAgcmV0dXJuIHNvdXJjZSA9PSBudWxsIHx8IGJhc2VDb25mb3Jtc1RvKG9iamVjdCwgc291cmNlLCBrZXlzKHNvdXJjZSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFBlcmZvcm1zIGFcbiAgICAgKiBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICAgICAqIGNvbXBhcmlzb24gYmV0d2VlbiB0d28gdmFsdWVzIHRvIGRldGVybWluZSBpZiB0aGV5IGFyZSBlcXVpdmFsZW50LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSB2YWx1ZXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxIH07XG4gICAgICogdmFyIG90aGVyID0geyAnYSc6IDEgfTtcbiAgICAgKlxuICAgICAqIF8uZXEob2JqZWN0LCBvYmplY3QpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uZXEob2JqZWN0LCBvdGhlcik7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uZXEoJ2EnLCAnYScpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uZXEoJ2EnLCBPYmplY3QoJ2EnKSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uZXEoTmFOLCBOYU4pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBlcSh2YWx1ZSwgb3RoZXIpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gb3RoZXIgfHwgKHZhbHVlICE9PSB2YWx1ZSAmJiBvdGhlciAhPT0gb3RoZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGdyZWF0ZXIgdGhhbiBgb3RoZXJgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuOS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgZ3JlYXRlciB0aGFuIGBvdGhlcmAsXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAc2VlIF8ubHRcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5ndCgzLCAxKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmd0KDMsIDMpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmd0KDEsIDMpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGd0ID0gY3JlYXRlUmVsYXRpb25hbE9wZXJhdGlvbihiYXNlR3QpO1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvIGBvdGhlcmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy45LjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG9cbiAgICAgKiAgYG90aGVyYCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBzZWUgXy5sdGVcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5ndGUoMywgMSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5ndGUoMywgMyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5ndGUoMSwgMyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgZ3RlID0gY3JlYXRlUmVsYXRpb25hbE9wZXJhdGlvbihmdW5jdGlvbih2YWx1ZSwgb3RoZXIpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA+PSBvdGhlcjtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGxpa2VseSBhbiBgYXJndW1lbnRzYCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGBhcmd1bWVudHNgIG9iamVjdCxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzQXJndW1lbnRzKGZ1bmN0aW9uKCkgeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNBcmd1bWVudHMoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBpc0FyZ3VtZW50cyA9IGJhc2VJc0FyZ3VtZW50cyhmdW5jdGlvbigpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKSA/IGJhc2VJc0FyZ3VtZW50cyA6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCAnY2FsbGVlJykgJiZcbiAgICAgICAgIXByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwodmFsdWUsICdjYWxsZWUnKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhbiBgQXJyYXlgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYXJyYXksIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5KFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5KGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXkoJ2FiYycpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXkoXy5ub29wKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYW4gYEFycmF5QnVmZmVyYCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGFycmF5IGJ1ZmZlciwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXlCdWZmZXIobmV3IEFycmF5QnVmZmVyKDIpKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXlCdWZmZXIobmV3IEFycmF5KDIpKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBpc0FycmF5QnVmZmVyID0gbm9kZUlzQXJyYXlCdWZmZXIgPyBiYXNlVW5hcnkobm9kZUlzQXJyYXlCdWZmZXIpIDogYmFzZUlzQXJyYXlCdWZmZXI7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhcnJheS1saWtlLiBBIHZhbHVlIGlzIGNvbnNpZGVyZWQgYXJyYXktbGlrZSBpZiBpdCdzXG4gICAgICogbm90IGEgZnVuY3Rpb24gYW5kIGhhcyBhIGB2YWx1ZS5sZW5ndGhgIHRoYXQncyBhbiBpbnRlZ2VyIGdyZWF0ZXIgdGhhbiBvclxuICAgICAqIGVxdWFsIHRvIGAwYCBhbmQgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIGBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFycmF5LWxpa2UsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5TGlrZShbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheUxpa2UoZG9jdW1lbnQuYm9keS5jaGlsZHJlbik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5TGlrZSgnYWJjJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5TGlrZShfLm5vb3ApO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNBcnJheUxpa2UodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSAhPSBudWxsICYmIGlzTGVuZ3RoKHZhbHVlLmxlbmd0aCkgJiYgIWlzRnVuY3Rpb24odmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uaXNBcnJheUxpa2VgIGV4Y2VwdCB0aGF0IGl0IGFsc28gY2hlY2tzIGlmIGB2YWx1ZWBcbiAgICAgKiBpcyBhbiBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGFycmF5LWxpa2Ugb2JqZWN0LFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheUxpa2VPYmplY3QoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXlMaWtlT2JqZWN0KGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheUxpa2VPYmplY3QoJ2FiYycpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXlMaWtlT2JqZWN0KF8ubm9vcCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0FycmF5TGlrZU9iamVjdCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgaXNBcnJheUxpa2UodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBib29sZWFuIHByaW1pdGl2ZSBvciBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgYm9vbGVhbiwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzQm9vbGVhbihmYWxzZSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0Jvb2xlYW4obnVsbCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0Jvb2xlYW4odmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gdHJ1ZSB8fCB2YWx1ZSA9PT0gZmFsc2UgfHxcbiAgICAgICAgKGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gYm9vbFRhZyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBidWZmZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgYnVmZmVyLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNCdWZmZXIobmV3IEJ1ZmZlcigyKSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0J1ZmZlcihuZXcgVWludDhBcnJheSgyKSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgaXNCdWZmZXIgPSBuYXRpdmVJc0J1ZmZlciB8fCBzdHViRmFsc2U7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYERhdGVgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBkYXRlIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzRGF0ZShuZXcgRGF0ZSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0RhdGUoJ01vbiBBcHJpbCAyMyAyMDEyJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgaXNEYXRlID0gbm9kZUlzRGF0ZSA/IGJhc2VVbmFyeShub2RlSXNEYXRlKSA6IGJhc2VJc0RhdGU7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsaWtlbHkgYSBET00gZWxlbWVudC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBET00gZWxlbWVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzRWxlbWVudChkb2N1bWVudC5ib2R5KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzRWxlbWVudCgnPGJvZHk+Jyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0VsZW1lbnQodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIHZhbHVlLm5vZGVUeXBlID09PSAxICYmICFpc1BsYWluT2JqZWN0KHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhbiBlbXB0eSBvYmplY3QsIGNvbGxlY3Rpb24sIG1hcCwgb3Igc2V0LlxuICAgICAqXG4gICAgICogT2JqZWN0cyBhcmUgY29uc2lkZXJlZCBlbXB0eSBpZiB0aGV5IGhhdmUgbm8gb3duIGVudW1lcmFibGUgc3RyaW5nIGtleWVkXG4gICAgICogcHJvcGVydGllcy5cbiAgICAgKlxuICAgICAqIEFycmF5LWxpa2UgdmFsdWVzIHN1Y2ggYXMgYGFyZ3VtZW50c2Agb2JqZWN0cywgYXJyYXlzLCBidWZmZXJzLCBzdHJpbmdzLCBvclxuICAgICAqIGpRdWVyeS1saWtlIGNvbGxlY3Rpb25zIGFyZSBjb25zaWRlcmVkIGVtcHR5IGlmIHRoZXkgaGF2ZSBhIGBsZW5ndGhgIG9mIGAwYC5cbiAgICAgKiBTaW1pbGFybHksIG1hcHMgYW5kIHNldHMgYXJlIGNvbnNpZGVyZWQgZW1wdHkgaWYgdGhleSBoYXZlIGEgYHNpemVgIG9mIGAwYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgZW1wdHksIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0VtcHR5KG51bGwpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNFbXB0eSh0cnVlKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzRW1wdHkoMSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0VtcHR5KFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNFbXB0eSh7ICdhJzogMSB9KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzRW1wdHkodmFsdWUpIHtcbiAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKGlzQXJyYXlMaWtlKHZhbHVlKSAmJlxuICAgICAgICAgIChpc0FycmF5KHZhbHVlKSB8fCB0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycgfHwgdHlwZW9mIHZhbHVlLnNwbGljZSA9PSAnZnVuY3Rpb24nIHx8XG4gICAgICAgICAgICBpc0J1ZmZlcih2YWx1ZSkgfHwgaXNUeXBlZEFycmF5KHZhbHVlKSB8fCBpc0FyZ3VtZW50cyh2YWx1ZSkpKSB7XG4gICAgICAgIHJldHVybiAhdmFsdWUubGVuZ3RoO1xuICAgICAgfVxuICAgICAgdmFyIHRhZyA9IGdldFRhZyh2YWx1ZSk7XG4gICAgICBpZiAodGFnID09IG1hcFRhZyB8fCB0YWcgPT0gc2V0VGFnKSB7XG4gICAgICAgIHJldHVybiAhdmFsdWUuc2l6ZTtcbiAgICAgIH1cbiAgICAgIGlmIChpc1Byb3RvdHlwZSh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuICFiYXNlS2V5cyh2YWx1ZSkubGVuZ3RoO1xuICAgICAgfVxuICAgICAgZm9yICh2YXIga2V5IGluIHZhbHVlKSB7XG4gICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCBrZXkpKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQZXJmb3JtcyBhIGRlZXAgY29tcGFyaXNvbiBiZXR3ZWVuIHR3byB2YWx1ZXMgdG8gZGV0ZXJtaW5lIGlmIHRoZXkgYXJlXG4gICAgICogZXF1aXZhbGVudC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBzdXBwb3J0cyBjb21wYXJpbmcgYXJyYXlzLCBhcnJheSBidWZmZXJzLCBib29sZWFucyxcbiAgICAgKiBkYXRlIG9iamVjdHMsIGVycm9yIG9iamVjdHMsIG1hcHMsIG51bWJlcnMsIGBPYmplY3RgIG9iamVjdHMsIHJlZ2V4ZXMsXG4gICAgICogc2V0cywgc3RyaW5ncywgc3ltYm9scywgYW5kIHR5cGVkIGFycmF5cy4gYE9iamVjdGAgb2JqZWN0cyBhcmUgY29tcGFyZWRcbiAgICAgKiBieSB0aGVpciBvd24sIG5vdCBpbmhlcml0ZWQsIGVudW1lcmFibGUgcHJvcGVydGllcy4gRnVuY3Rpb25zIGFuZCBET01cbiAgICAgKiBub2RlcyBhcmUgY29tcGFyZWQgYnkgc3RyaWN0IGVxdWFsaXR5LCBpLmUuIGA9PT1gLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSB2YWx1ZXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxIH07XG4gICAgICogdmFyIG90aGVyID0geyAnYSc6IDEgfTtcbiAgICAgKlxuICAgICAqIF8uaXNFcXVhbChvYmplY3QsIG90aGVyKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBvYmplY3QgPT09IG90aGVyO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNFcXVhbCh2YWx1ZSwgb3RoZXIpIHtcbiAgICAgIHJldHVybiBiYXNlSXNFcXVhbCh2YWx1ZSwgb3RoZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uaXNFcXVhbGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY3VzdG9taXplcmAgd2hpY2hcbiAgICAgKiBpcyBpbnZva2VkIHRvIGNvbXBhcmUgdmFsdWVzLiBJZiBgY3VzdG9taXplcmAgcmV0dXJucyBgdW5kZWZpbmVkYCwgY29tcGFyaXNvbnNcbiAgICAgKiBhcmUgaGFuZGxlZCBieSB0aGUgbWV0aG9kIGluc3RlYWQuIFRoZSBgY3VzdG9taXplcmAgaXMgaW52b2tlZCB3aXRoIHVwIHRvXG4gICAgICogc2l4IGFyZ3VtZW50czogKG9ialZhbHVlLCBvdGhWYWx1ZSBbLCBpbmRleHxrZXksIG9iamVjdCwgb3RoZXIsIHN0YWNrXSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHZhbHVlcyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBpc0dyZWV0aW5nKHZhbHVlKSB7XG4gICAgICogICByZXR1cm4gL15oKD86aXxlbGxvKSQvLnRlc3QodmFsdWUpO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGN1c3RvbWl6ZXIob2JqVmFsdWUsIG90aFZhbHVlKSB7XG4gICAgICogICBpZiAoaXNHcmVldGluZyhvYmpWYWx1ZSkgJiYgaXNHcmVldGluZyhvdGhWYWx1ZSkpIHtcbiAgICAgKiAgICAgcmV0dXJuIHRydWU7XG4gICAgICogICB9XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWydoZWxsbycsICdnb29kYnllJ107XG4gICAgICogdmFyIG90aGVyID0gWydoaScsICdnb29kYnllJ107XG4gICAgICpcbiAgICAgKiBfLmlzRXF1YWxXaXRoKGFycmF5LCBvdGhlciwgY3VzdG9taXplcik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzRXF1YWxXaXRoKHZhbHVlLCBvdGhlciwgY3VzdG9taXplcikge1xuICAgICAgY3VzdG9taXplciA9IHR5cGVvZiBjdXN0b21pemVyID09ICdmdW5jdGlvbicgPyBjdXN0b21pemVyIDogdW5kZWZpbmVkO1xuICAgICAgdmFyIHJlc3VsdCA9IGN1c3RvbWl6ZXIgPyBjdXN0b21pemVyKHZhbHVlLCBvdGhlcikgOiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gcmVzdWx0ID09PSB1bmRlZmluZWQgPyBiYXNlSXNFcXVhbCh2YWx1ZSwgb3RoZXIsIHVuZGVmaW5lZCwgY3VzdG9taXplcikgOiAhIXJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhbiBgRXJyb3JgLCBgRXZhbEVycm9yYCwgYFJhbmdlRXJyb3JgLCBgUmVmZXJlbmNlRXJyb3JgLFxuICAgICAqIGBTeW50YXhFcnJvcmAsIGBUeXBlRXJyb3JgLCBvciBgVVJJRXJyb3JgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gZXJyb3Igb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNFcnJvcihuZXcgRXJyb3IpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNFcnJvcihFcnJvcik7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0Vycm9yKHZhbHVlKSB7XG4gICAgICBpZiAoIWlzT2JqZWN0TGlrZSh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIHRhZyA9IGJhc2VHZXRUYWcodmFsdWUpO1xuICAgICAgcmV0dXJuIHRhZyA9PSBlcnJvclRhZyB8fCB0YWcgPT0gZG9tRXhjVGFnIHx8XG4gICAgICAgICh0eXBlb2YgdmFsdWUubWVzc2FnZSA9PSAnc3RyaW5nJyAmJiB0eXBlb2YgdmFsdWUubmFtZSA9PSAnc3RyaW5nJyAmJiAhaXNQbGFpbk9iamVjdCh2YWx1ZSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgZmluaXRlIHByaW1pdGl2ZSBudW1iZXIuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgYmFzZWQgb25cbiAgICAgKiBbYE51bWJlci5pc0Zpbml0ZWBdKGh0dHBzOi8vbWRuLmlvL051bWJlci9pc0Zpbml0ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgZmluaXRlIG51bWJlciwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzRmluaXRlKDMpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNGaW5pdGUoTnVtYmVyLk1JTl9WQUxVRSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0Zpbml0ZShJbmZpbml0eSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNGaW5pdGUoJzMnKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzRmluaXRlKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdudW1iZXInICYmIG5hdGl2ZUlzRmluaXRlKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYEZ1bmN0aW9uYCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgZnVuY3Rpb24sIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0Z1bmN0aW9uKF8pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNGdW5jdGlvbigvYWJjLyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbHVlKSB7XG4gICAgICBpZiAoIWlzT2JqZWN0KHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICAvLyBUaGUgdXNlIG9mIGBPYmplY3QjdG9TdHJpbmdgIGF2b2lkcyBpc3N1ZXMgd2l0aCB0aGUgYHR5cGVvZmAgb3BlcmF0b3JcbiAgICAgIC8vIGluIFNhZmFyaSA5IHdoaWNoIHJldHVybnMgJ29iamVjdCcgZm9yIHR5cGVkIGFycmF5cyBhbmQgb3RoZXIgY29uc3RydWN0b3JzLlxuICAgICAgdmFyIHRhZyA9IGJhc2VHZXRUYWcodmFsdWUpO1xuICAgICAgcmV0dXJuIHRhZyA9PSBmdW5jVGFnIHx8IHRhZyA9PSBnZW5UYWcgfHwgdGFnID09IGFzeW5jVGFnIHx8IHRhZyA9PSBwcm94eVRhZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhbiBpbnRlZ2VyLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGJhc2VkIG9uXG4gICAgICogW2BOdW1iZXIuaXNJbnRlZ2VyYF0oaHR0cHM6Ly9tZG4uaW8vTnVtYmVyL2lzSW50ZWdlcikuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGludGVnZXIsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0ludGVnZXIoMyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0ludGVnZXIoTnVtYmVyLk1JTl9WQUxVRSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNJbnRlZ2VyKEluZmluaXR5KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc0ludGVnZXIoJzMnKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzSW50ZWdlcih2YWx1ZSkge1xuICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJyAmJiB2YWx1ZSA9PSB0b0ludGVnZXIodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgYXJyYXktbGlrZSBsZW5ndGguXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgbG9vc2VseSBiYXNlZCBvblxuICAgICAqIFtgVG9MZW5ndGhgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy10b2xlbmd0aCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgbGVuZ3RoLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNMZW5ndGgoMyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0xlbmd0aChOdW1iZXIuTUlOX1ZBTFVFKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc0xlbmd0aChJbmZpbml0eSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNMZW5ndGgoJzMnKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzTGVuZ3RoKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdudW1iZXInICYmXG4gICAgICAgIHZhbHVlID4gLTEgJiYgdmFsdWUgJSAxID09IDAgJiYgdmFsdWUgPD0gTUFYX1NBRkVfSU5URUdFUjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyB0aGVcbiAgICAgKiBbbGFuZ3VhZ2UgdHlwZV0oaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLWVjbWFzY3JpcHQtbGFuZ3VhZ2UtdHlwZXMpXG4gICAgICogb2YgYE9iamVjdGAuIChlLmcuIGFycmF5cywgZnVuY3Rpb25zLCBvYmplY3RzLCByZWdleGVzLCBgbmV3IE51bWJlcigwKWAsIGFuZCBgbmV3IFN0cmluZygnJylgKVxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc09iamVjdCh7fSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc09iamVjdChbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNPYmplY3QoXy5ub29wKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzT2JqZWN0KG51bGwpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNPYmplY3QodmFsdWUpIHtcbiAgICAgIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICAgICAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgKHR5cGUgPT0gJ29iamVjdCcgfHwgdHlwZSA9PSAnZnVuY3Rpb24nKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZS4gQSB2YWx1ZSBpcyBvYmplY3QtbGlrZSBpZiBpdCdzIG5vdCBgbnVsbGBcbiAgICAgKiBhbmQgaGFzIGEgYHR5cGVvZmAgcmVzdWx0IG9mIFwib2JqZWN0XCIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNPYmplY3RMaWtlKHt9KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzT2JqZWN0TGlrZShbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNPYmplY3RMaWtlKF8ubm9vcCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNPYmplY3RMaWtlKG51bGwpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNPYmplY3RMaWtlKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBNYXBgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjMuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBtYXAsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc01hcChuZXcgTWFwKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTWFwKG5ldyBXZWFrTWFwKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBpc01hcCA9IG5vZGVJc01hcCA/IGJhc2VVbmFyeShub2RlSXNNYXApIDogYmFzZUlzTWFwO1xuXG4gICAgLyoqXG4gICAgICogUGVyZm9ybXMgYSBwYXJ0aWFsIGRlZXAgY29tcGFyaXNvbiBiZXR3ZWVuIGBvYmplY3RgIGFuZCBgc291cmNlYCB0b1xuICAgICAqIGRldGVybWluZSBpZiBgb2JqZWN0YCBjb250YWlucyBlcXVpdmFsZW50IHByb3BlcnR5IHZhbHVlcy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBlcXVpdmFsZW50IHRvIGBfLm1hdGNoZXNgIHdoZW4gYHNvdXJjZWAgaXNcbiAgICAgKiBwYXJ0aWFsbHkgYXBwbGllZC5cbiAgICAgKlxuICAgICAqIFBhcnRpYWwgY29tcGFyaXNvbnMgd2lsbCBtYXRjaCBlbXB0eSBhcnJheSBhbmQgZW1wdHkgb2JqZWN0IGBzb3VyY2VgXG4gICAgICogdmFsdWVzIGFnYWluc3QgYW55IGFycmF5IG9yIG9iamVjdCB2YWx1ZSwgcmVzcGVjdGl2ZWx5LiBTZWUgYF8uaXNFcXVhbGBcbiAgICAgKiBmb3IgYSBsaXN0IG9mIHN1cHBvcnRlZCB2YWx1ZSBjb21wYXJpc29ucy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIHByb3BlcnR5IHZhbHVlcyB0byBtYXRjaC5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYG9iamVjdGAgaXMgYSBtYXRjaCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogMiB9O1xuICAgICAqXG4gICAgICogXy5pc01hdGNoKG9iamVjdCwgeyAnYic6IDIgfSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc01hdGNoKG9iamVjdCwgeyAnYic6IDEgfSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc01hdGNoKG9iamVjdCwgc291cmNlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09PSBzb3VyY2UgfHwgYmFzZUlzTWF0Y2gob2JqZWN0LCBzb3VyY2UsIGdldE1hdGNoRGF0YShzb3VyY2UpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmlzTWF0Y2hgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGN1c3RvbWl6ZXJgIHdoaWNoXG4gICAgICogaXMgaW52b2tlZCB0byBjb21wYXJlIHZhbHVlcy4gSWYgYGN1c3RvbWl6ZXJgIHJldHVybnMgYHVuZGVmaW5lZGAsIGNvbXBhcmlzb25zXG4gICAgICogYXJlIGhhbmRsZWQgYnkgdGhlIG1ldGhvZCBpbnN0ZWFkLiBUaGUgYGN1c3RvbWl6ZXJgIGlzIGludm9rZWQgd2l0aCBmaXZlXG4gICAgICogYXJndW1lbnRzOiAob2JqVmFsdWUsIHNyY1ZhbHVlLCBpbmRleHxrZXksIG9iamVjdCwgc291cmNlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIHByb3BlcnR5IHZhbHVlcyB0byBtYXRjaC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYG9iamVjdGAgaXMgYSBtYXRjaCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBpc0dyZWV0aW5nKHZhbHVlKSB7XG4gICAgICogICByZXR1cm4gL15oKD86aXxlbGxvKSQvLnRlc3QodmFsdWUpO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGN1c3RvbWl6ZXIob2JqVmFsdWUsIHNyY1ZhbHVlKSB7XG4gICAgICogICBpZiAoaXNHcmVldGluZyhvYmpWYWx1ZSkgJiYgaXNHcmVldGluZyhzcmNWYWx1ZSkpIHtcbiAgICAgKiAgICAgcmV0dXJuIHRydWU7XG4gICAgICogICB9XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2dyZWV0aW5nJzogJ2hlbGxvJyB9O1xuICAgICAqIHZhciBzb3VyY2UgPSB7ICdncmVldGluZyc6ICdoaScgfTtcbiAgICAgKlxuICAgICAqIF8uaXNNYXRjaFdpdGgob2JqZWN0LCBzb3VyY2UsIGN1c3RvbWl6ZXIpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc01hdGNoV2l0aChvYmplY3QsIHNvdXJjZSwgY3VzdG9taXplcikge1xuICAgICAgY3VzdG9taXplciA9IHR5cGVvZiBjdXN0b21pemVyID09ICdmdW5jdGlvbicgPyBjdXN0b21pemVyIDogdW5kZWZpbmVkO1xuICAgICAgcmV0dXJuIGJhc2VJc01hdGNoKG9iamVjdCwgc291cmNlLCBnZXRNYXRjaERhdGEoc291cmNlKSwgY3VzdG9taXplcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYE5hTmAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgYmFzZWQgb25cbiAgICAgKiBbYE51bWJlci5pc05hTmBdKGh0dHBzOi8vbWRuLmlvL051bWJlci9pc05hTikgYW5kIGlzIG5vdCB0aGUgc2FtZSBhc1xuICAgICAqIGdsb2JhbCBbYGlzTmFOYF0oaHR0cHM6Ly9tZG4uaW8vaXNOYU4pIHdoaWNoIHJldHVybnMgYHRydWVgIGZvclxuICAgICAqIGB1bmRlZmluZWRgIGFuZCBvdGhlciBub24tbnVtYmVyIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYE5hTmAsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc05hTihOYU4pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNOYU4obmV3IE51bWJlcihOYU4pKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBpc05hTih1bmRlZmluZWQpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNOYU4odW5kZWZpbmVkKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzTmFOKHZhbHVlKSB7XG4gICAgICAvLyBBbiBgTmFOYCBwcmltaXRpdmUgaXMgdGhlIG9ubHkgdmFsdWUgdGhhdCBpcyBub3QgZXF1YWwgdG8gaXRzZWxmLlxuICAgICAgLy8gUGVyZm9ybSB0aGUgYHRvU3RyaW5nVGFnYCBjaGVjayBmaXJzdCB0byBhdm9pZCBlcnJvcnMgd2l0aCBzb21lXG4gICAgICAvLyBBY3RpdmVYIG9iamVjdHMgaW4gSUUuXG4gICAgICByZXR1cm4gaXNOdW1iZXIodmFsdWUpICYmIHZhbHVlICE9ICt2YWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHByaXN0aW5lIG5hdGl2ZSBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBjYW4ndCByZWxpYWJseSBkZXRlY3QgbmF0aXZlIGZ1bmN0aW9ucyBpbiB0aGUgcHJlc2VuY2VcbiAgICAgKiBvZiB0aGUgY29yZS1qcyBwYWNrYWdlIGJlY2F1c2UgY29yZS1qcyBjaXJjdW12ZW50cyB0aGlzIGtpbmQgb2YgZGV0ZWN0aW9uLlxuICAgICAqIERlc3BpdGUgbXVsdGlwbGUgcmVxdWVzdHMsIHRoZSBjb3JlLWpzIG1haW50YWluZXIgaGFzIG1hZGUgaXQgY2xlYXI6IGFueVxuICAgICAqIGF0dGVtcHQgdG8gZml4IHRoZSBkZXRlY3Rpb24gd2lsbCBiZSBvYnN0cnVjdGVkLiBBcyBhIHJlc3VsdCwgd2UncmUgbGVmdFxuICAgICAqIHdpdGggbGl0dGxlIGNob2ljZSBidXQgdG8gdGhyb3cgYW4gZXJyb3IuIFVuZm9ydHVuYXRlbHksIHRoaXMgYWxzbyBhZmZlY3RzXG4gICAgICogcGFja2FnZXMsIGxpa2UgW2JhYmVsLXBvbHlmaWxsXShodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS9iYWJlbC1wb2x5ZmlsbCksXG4gICAgICogd2hpY2ggcmVseSBvbiBjb3JlLWpzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIG5hdGl2ZSBmdW5jdGlvbixcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzTmF0aXZlKEFycmF5LnByb3RvdHlwZS5wdXNoKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTmF0aXZlKF8pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNOYXRpdmUodmFsdWUpIHtcbiAgICAgIGlmIChpc01hc2thYmxlKHZhbHVlKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoQ09SRV9FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlSXNOYXRpdmUodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGBudWxsYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYG51bGxgLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNOdWxsKG51bGwpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNOdWxsKHZvaWQgMCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc051bGwodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gbnVsbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBgbnVsbGAgb3IgYHVuZGVmaW5lZGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIG51bGxpc2gsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc05pbChudWxsKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTmlsKHZvaWQgMCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc05pbChOYU4pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNOaWwodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PSBudWxsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgTnVtYmVyYCBwcmltaXRpdmUgb3Igb2JqZWN0LlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRvIGV4Y2x1ZGUgYEluZmluaXR5YCwgYC1JbmZpbml0eWAsIGFuZCBgTmFOYCwgd2hpY2ggYXJlXG4gICAgICogY2xhc3NpZmllZCBhcyBudW1iZXJzLCB1c2UgdGhlIGBfLmlzRmluaXRlYCBtZXRob2QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgbnVtYmVyLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNOdW1iZXIoMyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc051bWJlcihOdW1iZXIuTUlOX1ZBTFVFKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTnVtYmVyKEluZmluaXR5KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTnVtYmVyKCczJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc051bWJlcih2YWx1ZSkge1xuICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJyB8fFxuICAgICAgICAoaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBudW1iZXJUYWcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgcGxhaW4gb2JqZWN0LCB0aGF0IGlzLCBhbiBvYmplY3QgY3JlYXRlZCBieSB0aGVcbiAgICAgKiBgT2JqZWN0YCBjb25zdHJ1Y3RvciBvciBvbmUgd2l0aCBhIGBbW1Byb3RvdHlwZV1dYCBvZiBgbnVsbGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC44LjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcGxhaW4gb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogfVxuICAgICAqXG4gICAgICogXy5pc1BsYWluT2JqZWN0KG5ldyBGb28pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzUGxhaW5PYmplY3QoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc1BsYWluT2JqZWN0KHsgJ3gnOiAwLCAneSc6IDAgfSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc1BsYWluT2JqZWN0KE9iamVjdC5jcmVhdGUobnVsbCkpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc1BsYWluT2JqZWN0KHZhbHVlKSB7XG4gICAgICBpZiAoIWlzT2JqZWN0TGlrZSh2YWx1ZSkgfHwgYmFzZUdldFRhZyh2YWx1ZSkgIT0gb2JqZWN0VGFnKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHZhciBwcm90byA9IGdldFByb3RvdHlwZSh2YWx1ZSk7XG4gICAgICBpZiAocHJvdG8gPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICB2YXIgQ3RvciA9IGhhc093blByb3BlcnR5LmNhbGwocHJvdG8sICdjb25zdHJ1Y3RvcicpICYmIHByb3RvLmNvbnN0cnVjdG9yO1xuICAgICAgcmV0dXJuIHR5cGVvZiBDdG9yID09ICdmdW5jdGlvbicgJiYgQ3RvciBpbnN0YW5jZW9mIEN0b3IgJiZcbiAgICAgICAgZnVuY1RvU3RyaW5nLmNhbGwoQ3RvcikgPT0gb2JqZWN0Q3RvclN0cmluZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFJlZ0V4cGAgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHJlZ2V4cCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzUmVnRXhwKC9hYmMvKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzUmVnRXhwKCcvYWJjLycpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGlzUmVnRXhwID0gbm9kZUlzUmVnRXhwID8gYmFzZVVuYXJ5KG5vZGVJc1JlZ0V4cCkgOiBiYXNlSXNSZWdFeHA7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHNhZmUgaW50ZWdlci4gQW4gaW50ZWdlciBpcyBzYWZlIGlmIGl0J3MgYW4gSUVFRS03NTRcbiAgICAgKiBkb3VibGUgcHJlY2lzaW9uIG51bWJlciB3aGljaCBpc24ndCB0aGUgcmVzdWx0IG9mIGEgcm91bmRlZCB1bnNhZmUgaW50ZWdlci5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBiYXNlZCBvblxuICAgICAqIFtgTnVtYmVyLmlzU2FmZUludGVnZXJgXShodHRwczovL21kbi5pby9OdW1iZXIvaXNTYWZlSW50ZWdlcikuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgc2FmZSBpbnRlZ2VyLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNTYWZlSW50ZWdlcigzKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzU2FmZUludGVnZXIoTnVtYmVyLk1JTl9WQUxVRSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNTYWZlSW50ZWdlcihJbmZpbml0eSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNTYWZlSW50ZWdlcignMycpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNTYWZlSW50ZWdlcih2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzSW50ZWdlcih2YWx1ZSkgJiYgdmFsdWUgPj0gLU1BWF9TQUZFX0lOVEVHRVIgJiYgdmFsdWUgPD0gTUFYX1NBRkVfSU5URUdFUjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFNldGAgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMy4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHNldCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzU2V0KG5ldyBTZXQpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNTZXQobmV3IFdlYWtTZXQpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGlzU2V0ID0gbm9kZUlzU2V0ID8gYmFzZVVuYXJ5KG5vZGVJc1NldCkgOiBiYXNlSXNTZXQ7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFN0cmluZ2AgcHJpbWl0aXZlIG9yIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBzdHJpbmcsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc1N0cmluZygnYWJjJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc1N0cmluZygxKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzU3RyaW5nKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdzdHJpbmcnIHx8XG4gICAgICAgICghaXNBcnJheSh2YWx1ZSkgJiYgaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBzdHJpbmdUYWcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgU3ltYm9sYCBwcmltaXRpdmUgb3Igb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHN5bWJvbCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzU3ltYm9sKFN5bWJvbC5pdGVyYXRvcik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc1N5bWJvbCgnYWJjJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc1N5bWJvbCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnc3ltYm9sJyB8fFxuICAgICAgICAoaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBzeW1ib2xUYWcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSB0eXBlZCBhcnJheS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB0eXBlZCBhcnJheSwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzVHlwZWRBcnJheShuZXcgVWludDhBcnJheSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc1R5cGVkQXJyYXkoW10pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGlzVHlwZWRBcnJheSA9IG5vZGVJc1R5cGVkQXJyYXkgPyBiYXNlVW5hcnkobm9kZUlzVHlwZWRBcnJheSkgOiBiYXNlSXNUeXBlZEFycmF5O1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYHVuZGVmaW5lZGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGB1bmRlZmluZWRgLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNVbmRlZmluZWQodm9pZCAwKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzVW5kZWZpbmVkKG51bGwpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNVbmRlZmluZWQodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgV2Vha01hcGAgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMy4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHdlYWsgbWFwLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNXZWFrTWFwKG5ldyBXZWFrTWFwKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzV2Vha01hcChuZXcgTWFwKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzV2Vha01hcCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgZ2V0VGFnKHZhbHVlKSA9PSB3ZWFrTWFwVGFnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgV2Vha1NldGAgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMy4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHdlYWsgc2V0LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNXZWFrU2V0KG5ldyBXZWFrU2V0KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzV2Vha1NldChuZXcgU2V0KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzV2Vha1NldCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gd2Vha1NldFRhZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsZXNzIHRoYW4gYG90aGVyYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjkuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGxlc3MgdGhhbiBgb3RoZXJgLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICogQHNlZSBfLmd0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubHQoMSwgMyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5sdCgzLCAzKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5sdCgzLCAxKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBsdCA9IGNyZWF0ZVJlbGF0aW9uYWxPcGVyYXRpb24oYmFzZUx0KTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGxlc3MgdGhhbiBvciBlcXVhbCB0byBgb3RoZXJgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuOS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgbGVzcyB0aGFuIG9yIGVxdWFsIHRvXG4gICAgICogIGBvdGhlcmAsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAc2VlIF8uZ3RlXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubHRlKDEsIDMpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8ubHRlKDMsIDMpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8ubHRlKDMsIDEpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGx0ZSA9IGNyZWF0ZVJlbGF0aW9uYWxPcGVyYXRpb24oZnVuY3Rpb24odmFsdWUsIG90aGVyKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPD0gb3RoZXI7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGFuIGFycmF5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgY29udmVydGVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRvQXJyYXkoeyAnYSc6IDEsICdiJzogMiB9KTtcbiAgICAgKiAvLyA9PiBbMSwgMl1cbiAgICAgKlxuICAgICAqIF8udG9BcnJheSgnYWJjJyk7XG4gICAgICogLy8gPT4gWydhJywgJ2InLCAnYyddXG4gICAgICpcbiAgICAgKiBfLnRvQXJyYXkoMSk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKlxuICAgICAqIF8udG9BcnJheShudWxsKTtcbiAgICAgKiAvLyA9PiBbXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvQXJyYXkodmFsdWUpIHtcbiAgICAgIGlmICghdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgaWYgKGlzQXJyYXlMaWtlKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gaXNTdHJpbmcodmFsdWUpID8gc3RyaW5nVG9BcnJheSh2YWx1ZSkgOiBjb3B5QXJyYXkodmFsdWUpO1xuICAgICAgfVxuICAgICAgaWYgKHN5bUl0ZXJhdG9yICYmIHZhbHVlW3N5bUl0ZXJhdG9yXSkge1xuICAgICAgICByZXR1cm4gaXRlcmF0b3JUb0FycmF5KHZhbHVlW3N5bUl0ZXJhdG9yXSgpKTtcbiAgICAgIH1cbiAgICAgIHZhciB0YWcgPSBnZXRUYWcodmFsdWUpLFxuICAgICAgICAgIGZ1bmMgPSB0YWcgPT0gbWFwVGFnID8gbWFwVG9BcnJheSA6ICh0YWcgPT0gc2V0VGFnID8gc2V0VG9BcnJheSA6IHZhbHVlcyk7XG5cbiAgICAgIHJldHVybiBmdW5jKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgZmluaXRlIG51bWJlci5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjEyLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgY29udmVydGVkIG51bWJlci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50b0Zpbml0ZSgzLjIpO1xuICAgICAqIC8vID0+IDMuMlxuICAgICAqXG4gICAgICogXy50b0Zpbml0ZShOdW1iZXIuTUlOX1ZBTFVFKTtcbiAgICAgKiAvLyA9PiA1ZS0zMjRcbiAgICAgKlxuICAgICAqIF8udG9GaW5pdGUoSW5maW5pdHkpO1xuICAgICAqIC8vID0+IDEuNzk3NjkzMTM0ODYyMzE1N2UrMzA4XG4gICAgICpcbiAgICAgKiBfLnRvRmluaXRlKCczLjInKTtcbiAgICAgKiAvLyA9PiAzLjJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b0Zpbml0ZSh2YWx1ZSkge1xuICAgICAgaWYgKCF2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdmFsdWUgPT09IDAgPyB2YWx1ZSA6IDA7XG4gICAgICB9XG4gICAgICB2YWx1ZSA9IHRvTnVtYmVyKHZhbHVlKTtcbiAgICAgIGlmICh2YWx1ZSA9PT0gSU5GSU5JVFkgfHwgdmFsdWUgPT09IC1JTkZJTklUWSkge1xuICAgICAgICB2YXIgc2lnbiA9ICh2YWx1ZSA8IDAgPyAtMSA6IDEpO1xuICAgICAgICByZXR1cm4gc2lnbiAqIE1BWF9JTlRFR0VSO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHZhbHVlID09PSB2YWx1ZSA/IHZhbHVlIDogMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGFuIGludGVnZXIuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgbG9vc2VseSBiYXNlZCBvblxuICAgICAqIFtgVG9JbnRlZ2VyYF0oaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXRvaW50ZWdlcikuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgY29udmVydGVkIGludGVnZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udG9JbnRlZ2VyKDMuMik7XG4gICAgICogLy8gPT4gM1xuICAgICAqXG4gICAgICogXy50b0ludGVnZXIoTnVtYmVyLk1JTl9WQUxVRSk7XG4gICAgICogLy8gPT4gMFxuICAgICAqXG4gICAgICogXy50b0ludGVnZXIoSW5maW5pdHkpO1xuICAgICAqIC8vID0+IDEuNzk3NjkzMTM0ODYyMzE1N2UrMzA4XG4gICAgICpcbiAgICAgKiBfLnRvSW50ZWdlcignMy4yJyk7XG4gICAgICogLy8gPT4gM1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvSW50ZWdlcih2YWx1ZSkge1xuICAgICAgdmFyIHJlc3VsdCA9IHRvRmluaXRlKHZhbHVlKSxcbiAgICAgICAgICByZW1haW5kZXIgPSByZXN1bHQgJSAxO1xuXG4gICAgICByZXR1cm4gcmVzdWx0ID09PSByZXN1bHQgPyAocmVtYWluZGVyID8gcmVzdWx0IC0gcmVtYWluZGVyIDogcmVzdWx0KSA6IDA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHZhbHVlYCB0byBhbiBpbnRlZ2VyIHN1aXRhYmxlIGZvciB1c2UgYXMgdGhlIGxlbmd0aCBvZiBhblxuICAgICAqIGFycmF5LWxpa2Ugb2JqZWN0LlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGJhc2VkIG9uXG4gICAgICogW2BUb0xlbmd0aGBdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXRvbGVuZ3RoKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgaW50ZWdlci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50b0xlbmd0aCgzLjIpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKlxuICAgICAqIF8udG9MZW5ndGgoTnVtYmVyLk1JTl9WQUxVRSk7XG4gICAgICogLy8gPT4gMFxuICAgICAqXG4gICAgICogXy50b0xlbmd0aChJbmZpbml0eSk7XG4gICAgICogLy8gPT4gNDI5NDk2NzI5NVxuICAgICAqXG4gICAgICogXy50b0xlbmd0aCgnMy4yJyk7XG4gICAgICogLy8gPT4gM1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvTGVuZ3RoKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPyBiYXNlQ2xhbXAodG9JbnRlZ2VyKHZhbHVlKSwgMCwgTUFYX0FSUkFZX0xFTkdUSCkgOiAwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBudW1iZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHByb2Nlc3MuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgbnVtYmVyLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRvTnVtYmVyKDMuMik7XG4gICAgICogLy8gPT4gMy4yXG4gICAgICpcbiAgICAgKiBfLnRvTnVtYmVyKE51bWJlci5NSU5fVkFMVUUpO1xuICAgICAqIC8vID0+IDVlLTMyNFxuICAgICAqXG4gICAgICogXy50b051bWJlcihJbmZpbml0eSk7XG4gICAgICogLy8gPT4gSW5maW5pdHlcbiAgICAgKlxuICAgICAqIF8udG9OdW1iZXIoJzMuMicpO1xuICAgICAqIC8vID0+IDMuMlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvTnVtYmVyKHZhbHVlKSB7XG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09ICdudW1iZXInKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChpc1N5bWJvbCh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIE5BTjtcbiAgICAgIH1cbiAgICAgIGlmIChpc09iamVjdCh2YWx1ZSkpIHtcbiAgICAgICAgdmFyIG90aGVyID0gdHlwZW9mIHZhbHVlLnZhbHVlT2YgPT0gJ2Z1bmN0aW9uJyA/IHZhbHVlLnZhbHVlT2YoKSA6IHZhbHVlO1xuICAgICAgICB2YWx1ZSA9IGlzT2JqZWN0KG90aGVyKSA/IChvdGhlciArICcnKSA6IG90aGVyO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gdmFsdWUgPT09IDAgPyB2YWx1ZSA6ICt2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHZhbHVlID0gdmFsdWUucmVwbGFjZShyZVRyaW0sICcnKTtcbiAgICAgIHZhciBpc0JpbmFyeSA9IHJlSXNCaW5hcnkudGVzdCh2YWx1ZSk7XG4gICAgICByZXR1cm4gKGlzQmluYXJ5IHx8IHJlSXNPY3RhbC50ZXN0KHZhbHVlKSlcbiAgICAgICAgPyBmcmVlUGFyc2VJbnQodmFsdWUuc2xpY2UoMiksIGlzQmluYXJ5ID8gMiA6IDgpXG4gICAgICAgIDogKHJlSXNCYWRIZXgudGVzdCh2YWx1ZSkgPyBOQU4gOiArdmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBwbGFpbiBvYmplY3QgZmxhdHRlbmluZyBpbmhlcml0ZWQgZW51bWVyYWJsZSBzdHJpbmdcbiAgICAgKiBrZXllZCBwcm9wZXJ0aWVzIG9mIGB2YWx1ZWAgdG8gb3duIHByb3BlcnRpZXMgb2YgdGhlIHBsYWluIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgcGxhaW4gb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmIgPSAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAgICpcbiAgICAgKiBfLmFzc2lnbih7ICdhJzogMSB9LCBuZXcgRm9vKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMSwgJ2InOiAyIH1cbiAgICAgKlxuICAgICAqIF8uYXNzaWduKHsgJ2EnOiAxIH0sIF8udG9QbGFpbk9iamVjdChuZXcgRm9vKSk7XG4gICAgICogLy8gPT4geyAnYSc6IDEsICdiJzogMiwgJ2MnOiAzIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b1BsYWluT2JqZWN0KHZhbHVlKSB7XG4gICAgICByZXR1cm4gY29weU9iamVjdCh2YWx1ZSwga2V5c0luKHZhbHVlKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHZhbHVlYCB0byBhIHNhZmUgaW50ZWdlci4gQSBzYWZlIGludGVnZXIgY2FuIGJlIGNvbXBhcmVkIGFuZFxuICAgICAqIHJlcHJlc2VudGVkIGNvcnJlY3RseS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgaW50ZWdlci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50b1NhZmVJbnRlZ2VyKDMuMik7XG4gICAgICogLy8gPT4gM1xuICAgICAqXG4gICAgICogXy50b1NhZmVJbnRlZ2VyKE51bWJlci5NSU5fVkFMVUUpO1xuICAgICAqIC8vID0+IDBcbiAgICAgKlxuICAgICAqIF8udG9TYWZlSW50ZWdlcihJbmZpbml0eSk7XG4gICAgICogLy8gPT4gOTAwNzE5OTI1NDc0MDk5MVxuICAgICAqXG4gICAgICogXy50b1NhZmVJbnRlZ2VyKCczLjInKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9TYWZlSW50ZWdlcih2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlXG4gICAgICAgID8gYmFzZUNsYW1wKHRvSW50ZWdlcih2YWx1ZSksIC1NQVhfU0FGRV9JTlRFR0VSLCBNQVhfU0FGRV9JTlRFR0VSKVxuICAgICAgICA6ICh2YWx1ZSA9PT0gMCA/IHZhbHVlIDogMCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHZhbHVlYCB0byBhIHN0cmluZy4gQW4gZW1wdHkgc3RyaW5nIGlzIHJldHVybmVkIGZvciBgbnVsbGBcbiAgICAgKiBhbmQgYHVuZGVmaW5lZGAgdmFsdWVzLiBUaGUgc2lnbiBvZiBgLTBgIGlzIHByZXNlcnZlZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRvU3RyaW5nKG51bGwpO1xuICAgICAqIC8vID0+ICcnXG4gICAgICpcbiAgICAgKiBfLnRvU3RyaW5nKC0wKTtcbiAgICAgKiAvLyA9PiAnLTAnXG4gICAgICpcbiAgICAgKiBfLnRvU3RyaW5nKFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gJzEsMiwzJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvU3RyaW5nKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPT0gbnVsbCA/ICcnIDogYmFzZVRvU3RyaW5nKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBBc3NpZ25zIG93biBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0aWVzIG9mIHNvdXJjZSBvYmplY3RzIHRvIHRoZVxuICAgICAqIGRlc3RpbmF0aW9uIG9iamVjdC4gU291cmNlIG9iamVjdHMgYXJlIGFwcGxpZWQgZnJvbSBsZWZ0IHRvIHJpZ2h0LlxuICAgICAqIFN1YnNlcXVlbnQgc291cmNlcyBvdmVyd3JpdGUgcHJvcGVydHkgYXNzaWdubWVudHMgb2YgcHJldmlvdXMgc291cmNlcy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgIGFuZCBpcyBsb29zZWx5IGJhc2VkIG9uXG4gICAgICogW2BPYmplY3QuYXNzaWduYF0oaHR0cHM6Ly9tZG4uaW8vT2JqZWN0L2Fzc2lnbikuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gey4uLk9iamVjdH0gW3NvdXJjZXNdIFRoZSBzb3VyY2Ugb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBzZWUgXy5hc3NpZ25JblxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEJhcigpIHtcbiAgICAgKiAgIHRoaXMuYyA9IDM7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5iID0gMjtcbiAgICAgKiBCYXIucHJvdG90eXBlLmQgPSA0O1xuICAgICAqXG4gICAgICogXy5hc3NpZ24oeyAnYSc6IDAgfSwgbmV3IEZvbywgbmV3IEJhcik7XG4gICAgICogLy8gPT4geyAnYSc6IDEsICdjJzogMyB9XG4gICAgICovXG4gICAgdmFyIGFzc2lnbiA9IGNyZWF0ZUFzc2lnbmVyKGZ1bmN0aW9uKG9iamVjdCwgc291cmNlKSB7XG4gICAgICBpZiAoaXNQcm90b3R5cGUoc291cmNlKSB8fCBpc0FycmF5TGlrZShzb3VyY2UpKSB7XG4gICAgICAgIGNvcHlPYmplY3Qoc291cmNlLCBrZXlzKHNvdXJjZSksIG9iamVjdCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgYXNzaWduVmFsdWUob2JqZWN0LCBrZXksIHNvdXJjZVtrZXldKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5hc3NpZ25gIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgb3duIGFuZFxuICAgICAqIGluaGVyaXRlZCBzb3VyY2UgcHJvcGVydGllcy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGFsaWFzIGV4dGVuZFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHsuLi5PYmplY3R9IFtzb3VyY2VzXSBUaGUgc291cmNlIG9iamVjdHMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAc2VlIF8uYXNzaWduXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogfVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gQmFyKCkge1xuICAgICAqICAgdGhpcy5jID0gMztcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmIgPSAyO1xuICAgICAqIEJhci5wcm90b3R5cGUuZCA9IDQ7XG4gICAgICpcbiAgICAgKiBfLmFzc2lnbkluKHsgJ2EnOiAwIH0sIG5ldyBGb28sIG5ldyBCYXIpO1xuICAgICAqIC8vID0+IHsgJ2EnOiAxLCAnYic6IDIsICdjJzogMywgJ2QnOiA0IH1cbiAgICAgKi9cbiAgICB2YXIgYXNzaWduSW4gPSBjcmVhdGVBc3NpZ25lcihmdW5jdGlvbihvYmplY3QsIHNvdXJjZSkge1xuICAgICAgY29weU9iamVjdChzb3VyY2UsIGtleXNJbihzb3VyY2UpLCBvYmplY3QpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5hc3NpZ25JbmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY3VzdG9taXplcmBcbiAgICAgKiB3aGljaCBpcyBpbnZva2VkIHRvIHByb2R1Y2UgdGhlIGFzc2lnbmVkIHZhbHVlcy4gSWYgYGN1c3RvbWl6ZXJgIHJldHVybnNcbiAgICAgKiBgdW5kZWZpbmVkYCwgYXNzaWdubWVudCBpcyBoYW5kbGVkIGJ5IHRoZSBtZXRob2QgaW5zdGVhZC4gVGhlIGBjdXN0b21pemVyYFxuICAgICAqIGlzIGludm9rZWQgd2l0aCBmaXZlIGFyZ3VtZW50czogKG9ialZhbHVlLCBzcmNWYWx1ZSwga2V5LCBvYmplY3QsIHNvdXJjZSkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBhbGlhcyBleHRlbmRXaXRoXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gey4uLk9iamVjdH0gc291cmNlcyBUaGUgc291cmNlIG9iamVjdHMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgYXNzaWduZWQgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQHNlZSBfLmFzc2lnbldpdGhcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gY3VzdG9taXplcihvYmpWYWx1ZSwgc3JjVmFsdWUpIHtcbiAgICAgKiAgIHJldHVybiBfLmlzVW5kZWZpbmVkKG9ialZhbHVlKSA/IHNyY1ZhbHVlIDogb2JqVmFsdWU7XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIGRlZmF1bHRzID0gXy5wYXJ0aWFsUmlnaHQoXy5hc3NpZ25JbldpdGgsIGN1c3RvbWl6ZXIpO1xuICAgICAqXG4gICAgICogZGVmYXVsdHMoeyAnYSc6IDEgfSwgeyAnYic6IDIgfSwgeyAnYSc6IDMgfSk7XG4gICAgICogLy8gPT4geyAnYSc6IDEsICdiJzogMiB9XG4gICAgICovXG4gICAgdmFyIGFzc2lnbkluV2l0aCA9IGNyZWF0ZUFzc2lnbmVyKGZ1bmN0aW9uKG9iamVjdCwgc291cmNlLCBzcmNJbmRleCwgY3VzdG9taXplcikge1xuICAgICAgY29weU9iamVjdChzb3VyY2UsIGtleXNJbihzb3VyY2UpLCBvYmplY3QsIGN1c3RvbWl6ZXIpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5hc3NpZ25gIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGN1c3RvbWl6ZXJgXG4gICAgICogd2hpY2ggaXMgaW52b2tlZCB0byBwcm9kdWNlIHRoZSBhc3NpZ25lZCB2YWx1ZXMuIElmIGBjdXN0b21pemVyYCByZXR1cm5zXG4gICAgICogYHVuZGVmaW5lZGAsIGFzc2lnbm1lbnQgaXMgaGFuZGxlZCBieSB0aGUgbWV0aG9kIGluc3RlYWQuIFRoZSBgY3VzdG9taXplcmBcbiAgICAgKiBpcyBpbnZva2VkIHdpdGggZml2ZSBhcmd1bWVudHM6IChvYmpWYWx1ZSwgc3JjVmFsdWUsIGtleSwgb2JqZWN0LCBzb3VyY2UpLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uT2JqZWN0fSBzb3VyY2VzIFRoZSBzb3VyY2Ugb2JqZWN0cy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBhc3NpZ25lZCB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAc2VlIF8uYXNzaWduSW5XaXRoXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGN1c3RvbWl6ZXIob2JqVmFsdWUsIHNyY1ZhbHVlKSB7XG4gICAgICogICByZXR1cm4gXy5pc1VuZGVmaW5lZChvYmpWYWx1ZSkgPyBzcmNWYWx1ZSA6IG9ialZhbHVlO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBkZWZhdWx0cyA9IF8ucGFydGlhbFJpZ2h0KF8uYXNzaWduV2l0aCwgY3VzdG9taXplcik7XG4gICAgICpcbiAgICAgKiBkZWZhdWx0cyh7ICdhJzogMSB9LCB7ICdiJzogMiB9LCB7ICdhJzogMyB9KTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMSwgJ2InOiAyIH1cbiAgICAgKi9cbiAgICB2YXIgYXNzaWduV2l0aCA9IGNyZWF0ZUFzc2lnbmVyKGZ1bmN0aW9uKG9iamVjdCwgc291cmNlLCBzcmNJbmRleCwgY3VzdG9taXplcikge1xuICAgICAgY29weU9iamVjdChzb3VyY2UsIGtleXMoc291cmNlKSwgb2JqZWN0LCBjdXN0b21pemVyKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdmFsdWVzIGNvcnJlc3BvbmRpbmcgdG8gYHBhdGhzYCBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAxLjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7Li4uKHN0cmluZ3xzdHJpbmdbXSl9IFtwYXRoc10gVGhlIHByb3BlcnR5IHBhdGhzIHRvIHBpY2suXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBwaWNrZWQgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IFt7ICdiJzogeyAnYyc6IDMgfSB9LCA0XSB9O1xuICAgICAqXG4gICAgICogXy5hdChvYmplY3QsIFsnYVswXS5iLmMnLCAnYVsxXSddKTtcbiAgICAgKiAvLyA9PiBbMywgNF1cbiAgICAgKi9cbiAgICB2YXIgYXQgPSBmbGF0UmVzdChiYXNlQXQpO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBvYmplY3QgdGhhdCBpbmhlcml0cyBmcm9tIHRoZSBgcHJvdG90eXBlYCBvYmplY3QuIElmIGFcbiAgICAgKiBgcHJvcGVydGllc2Agb2JqZWN0IGlzIGdpdmVuLCBpdHMgb3duIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnRpZXNcbiAgICAgKiBhcmUgYXNzaWduZWQgdG8gdGhlIGNyZWF0ZWQgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMy4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBwcm90b3R5cGUgVGhlIG9iamVjdCB0byBpbmhlcml0IGZyb20uXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtwcm9wZXJ0aWVzXSBUaGUgcHJvcGVydGllcyB0byBhc3NpZ24gdG8gdGhlIG9iamVjdC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBTaGFwZSgpIHtcbiAgICAgKiAgIHRoaXMueCA9IDA7XG4gICAgICogICB0aGlzLnkgPSAwO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIENpcmNsZSgpIHtcbiAgICAgKiAgIFNoYXBlLmNhbGwodGhpcyk7XG4gICAgICogfVxuICAgICAqXG4gICAgICogQ2lyY2xlLnByb3RvdHlwZSA9IF8uY3JlYXRlKFNoYXBlLnByb3RvdHlwZSwge1xuICAgICAqICAgJ2NvbnN0cnVjdG9yJzogQ2lyY2xlXG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiB2YXIgY2lyY2xlID0gbmV3IENpcmNsZTtcbiAgICAgKiBjaXJjbGUgaW5zdGFuY2VvZiBDaXJjbGU7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogY2lyY2xlIGluc3RhbmNlb2YgU2hhcGU7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZShwcm90b3R5cGUsIHByb3BlcnRpZXMpIHtcbiAgICAgIHZhciByZXN1bHQgPSBiYXNlQ3JlYXRlKHByb3RvdHlwZSk7XG4gICAgICByZXR1cm4gcHJvcGVydGllcyA9PSBudWxsID8gcmVzdWx0IDogYmFzZUFzc2lnbihyZXN1bHQsIHByb3BlcnRpZXMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFzc2lnbnMgb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydGllcyBvZiBzb3VyY2VcbiAgICAgKiBvYmplY3RzIHRvIHRoZSBkZXN0aW5hdGlvbiBvYmplY3QgZm9yIGFsbCBkZXN0aW5hdGlvbiBwcm9wZXJ0aWVzIHRoYXRcbiAgICAgKiByZXNvbHZlIHRvIGB1bmRlZmluZWRgLiBTb3VyY2Ugb2JqZWN0cyBhcmUgYXBwbGllZCBmcm9tIGxlZnQgdG8gcmlnaHQuXG4gICAgICogT25jZSBhIHByb3BlcnR5IGlzIHNldCwgYWRkaXRpb25hbCB2YWx1ZXMgb2YgdGhlIHNhbWUgcHJvcGVydHkgYXJlIGlnbm9yZWQuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHsuLi5PYmplY3R9IFtzb3VyY2VzXSBUaGUgc291cmNlIG9iamVjdHMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAc2VlIF8uZGVmYXVsdHNEZWVwXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZGVmYXVsdHMoeyAnYSc6IDEgfSwgeyAnYic6IDIgfSwgeyAnYSc6IDMgfSk7XG4gICAgICogLy8gPT4geyAnYSc6IDEsICdiJzogMiB9XG4gICAgICovXG4gICAgdmFyIGRlZmF1bHRzID0gYmFzZVJlc3QoZnVuY3Rpb24ob2JqZWN0LCBzb3VyY2VzKSB7XG4gICAgICBvYmplY3QgPSBPYmplY3Qob2JqZWN0KTtcblxuICAgICAgdmFyIGluZGV4ID0gLTE7XG4gICAgICB2YXIgbGVuZ3RoID0gc291cmNlcy5sZW5ndGg7XG4gICAgICB2YXIgZ3VhcmQgPSBsZW5ndGggPiAyID8gc291cmNlc1syXSA6IHVuZGVmaW5lZDtcblxuICAgICAgaWYgKGd1YXJkICYmIGlzSXRlcmF0ZWVDYWxsKHNvdXJjZXNbMF0sIHNvdXJjZXNbMV0sIGd1YXJkKSkge1xuICAgICAgICBsZW5ndGggPSAxO1xuICAgICAgfVxuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgc291cmNlID0gc291cmNlc1tpbmRleF07XG4gICAgICAgIHZhciBwcm9wcyA9IGtleXNJbihzb3VyY2UpO1xuICAgICAgICB2YXIgcHJvcHNJbmRleCA9IC0xO1xuICAgICAgICB2YXIgcHJvcHNMZW5ndGggPSBwcm9wcy5sZW5ndGg7XG5cbiAgICAgICAgd2hpbGUgKCsrcHJvcHNJbmRleCA8IHByb3BzTGVuZ3RoKSB7XG4gICAgICAgICAgdmFyIGtleSA9IHByb3BzW3Byb3BzSW5kZXhdO1xuICAgICAgICAgIHZhciB2YWx1ZSA9IG9iamVjdFtrZXldO1xuXG4gICAgICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQgfHxcbiAgICAgICAgICAgICAgKGVxKHZhbHVlLCBvYmplY3RQcm90b1trZXldKSAmJiAhaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkpKSB7XG4gICAgICAgICAgICBvYmplY3Rba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gb2JqZWN0O1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5kZWZhdWx0c2AgZXhjZXB0IHRoYXQgaXQgcmVjdXJzaXZlbHkgYXNzaWduc1xuICAgICAqIGRlZmF1bHQgcHJvcGVydGllcy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMTAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHsuLi5PYmplY3R9IFtzb3VyY2VzXSBUaGUgc291cmNlIG9iamVjdHMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAc2VlIF8uZGVmYXVsdHNcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kZWZhdWx0c0RlZXAoeyAnYSc6IHsgJ2InOiAyIH0gfSwgeyAnYSc6IHsgJ2InOiAxLCAnYyc6IDMgfSB9KTtcbiAgICAgKiAvLyA9PiB7ICdhJzogeyAnYic6IDIsICdjJzogMyB9IH1cbiAgICAgKi9cbiAgICB2YXIgZGVmYXVsdHNEZWVwID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJncykge1xuICAgICAgYXJncy5wdXNoKHVuZGVmaW5lZCwgY3VzdG9tRGVmYXVsdHNNZXJnZSk7XG4gICAgICByZXR1cm4gYXBwbHkobWVyZ2VXaXRoLCB1bmRlZmluZWQsIGFyZ3MpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5maW5kYCBleGNlcHQgdGhhdCBpdCByZXR1cm5zIHRoZSBrZXkgb2YgdGhlIGZpcnN0XG4gICAgICogZWxlbWVudCBgcHJlZGljYXRlYCByZXR1cm5zIHRydXRoeSBmb3IgaW5zdGVhZCBvZiB0aGUgZWxlbWVudCBpdHNlbGYuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMS4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd8dW5kZWZpbmVkfSBSZXR1cm5zIHRoZSBrZXkgb2YgdGhlIG1hdGNoZWQgZWxlbWVudCxcbiAgICAgKiAgZWxzZSBgdW5kZWZpbmVkYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0ge1xuICAgICAqICAgJ2Jhcm5leSc6ICB7ICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IHRydWUgfSxcbiAgICAgKiAgICdmcmVkJzogICAgeyAnYWdlJzogNDAsICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgJ3BlYmJsZXMnOiB7ICdhZ2UnOiAxLCAgJ2FjdGl2ZSc6IHRydWUgfVxuICAgICAqIH07XG4gICAgICpcbiAgICAgKiBfLmZpbmRLZXkodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8uYWdlIDwgNDA7IH0pO1xuICAgICAqIC8vID0+ICdiYXJuZXknIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZEtleSh1c2VycywgeyAnYWdlJzogMSwgJ2FjdGl2ZSc6IHRydWUgfSk7XG4gICAgICogLy8gPT4gJ3BlYmJsZXMnXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kS2V5KHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gJ2ZyZWQnXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRLZXkodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiAnYmFybmV5J1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZpbmRLZXkob2JqZWN0LCBwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiBiYXNlRmluZEtleShvYmplY3QsIGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMyksIGJhc2VGb3JPd24pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZmluZEtleWAgZXhjZXB0IHRoYXQgaXQgaXRlcmF0ZXMgb3ZlciBlbGVtZW50cyBvZlxuICAgICAqIGEgY29sbGVjdGlvbiBpbiB0aGUgb3Bwb3NpdGUgb3JkZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd8dW5kZWZpbmVkfSBSZXR1cm5zIHRoZSBrZXkgb2YgdGhlIG1hdGNoZWQgZWxlbWVudCxcbiAgICAgKiAgZWxzZSBgdW5kZWZpbmVkYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0ge1xuICAgICAqICAgJ2Jhcm5leSc6ICB7ICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IHRydWUgfSxcbiAgICAgKiAgICdmcmVkJzogICAgeyAnYWdlJzogNDAsICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgJ3BlYmJsZXMnOiB7ICdhZ2UnOiAxLCAgJ2FjdGl2ZSc6IHRydWUgfVxuICAgICAqIH07XG4gICAgICpcbiAgICAgKiBfLmZpbmRMYXN0S2V5KHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiBvLmFnZSA8IDQwOyB9KTtcbiAgICAgKiAvLyA9PiByZXR1cm5zICdwZWJibGVzJyBhc3N1bWluZyBgXy5maW5kS2V5YCByZXR1cm5zICdiYXJuZXknXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZExhc3RLZXkodXNlcnMsIHsgJ2FnZSc6IDM2LCAnYWN0aXZlJzogdHJ1ZSB9KTtcbiAgICAgKiAvLyA9PiAnYmFybmV5J1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZExhc3RLZXkodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiAnZnJlZCdcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZExhc3RLZXkodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiAncGViYmxlcydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmaW5kTGFzdEtleShvYmplY3QsIHByZWRpY2F0ZSkge1xuICAgICAgcmV0dXJuIGJhc2VGaW5kS2V5KG9iamVjdCwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSwgYmFzZUZvck93blJpZ2h0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJdGVyYXRlcyBvdmVyIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnRpZXMgb2YgYW5cbiAgICAgKiBvYmplY3QgYW5kIGludm9rZXMgYGl0ZXJhdGVlYCBmb3IgZWFjaCBwcm9wZXJ0eS4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWRcbiAgICAgKiB3aXRoIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBrZXksIG9iamVjdCkuIEl0ZXJhdGVlIGZ1bmN0aW9ucyBtYXkgZXhpdFxuICAgICAqIGl0ZXJhdGlvbiBlYXJseSBieSBleHBsaWNpdGx5IHJldHVybmluZyBgZmFsc2VgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMy4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAc2VlIF8uZm9ySW5SaWdodFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqICAgdGhpcy5iID0gMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICAgICAqXG4gICAgICogXy5mb3JJbihuZXcgRm9vLCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICogICBjb25zb2xlLmxvZyhrZXkpO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IExvZ3MgJ2EnLCAnYicsIHRoZW4gJ2MnIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZvckluKG9iamVjdCwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbFxuICAgICAgICA/IG9iamVjdFxuICAgICAgICA6IGJhc2VGb3Iob2JqZWN0LCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMyksIGtleXNJbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5mb3JJbmAgZXhjZXB0IHRoYXQgaXQgaXRlcmF0ZXMgb3ZlciBwcm9wZXJ0aWVzIG9mXG4gICAgICogYG9iamVjdGAgaW4gdGhlIG9wcG9zaXRlIG9yZGVyLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAc2VlIF8uZm9ySW5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8uZm9ySW5SaWdodChuZXcgRm9vLCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICogICBjb25zb2xlLmxvZyhrZXkpO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IExvZ3MgJ2MnLCAnYicsIHRoZW4gJ2EnIGFzc3VtaW5nIGBfLmZvckluYCBsb2dzICdhJywgJ2InLCB0aGVuICdjJy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmb3JJblJpZ2h0KG9iamVjdCwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbFxuICAgICAgICA/IG9iamVjdFxuICAgICAgICA6IGJhc2VGb3JSaWdodChvYmplY3QsIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAzKSwga2V5c0luKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJdGVyYXRlcyBvdmVyIG93biBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0aWVzIG9mIGFuIG9iamVjdCBhbmRcbiAgICAgKiBpbnZva2VzIGBpdGVyYXRlZWAgZm9yIGVhY2ggcHJvcGVydHkuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggdGhyZWVcbiAgICAgKiBhcmd1bWVudHM6ICh2YWx1ZSwga2V5LCBvYmplY3QpLiBJdGVyYXRlZSBmdW5jdGlvbnMgbWF5IGV4aXQgaXRlcmF0aW9uXG4gICAgICogZWFybHkgYnkgZXhwbGljaXRseSByZXR1cm5pbmcgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjMuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQHNlZSBfLmZvck93blJpZ2h0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogICB0aGlzLmIgPSAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAgICpcbiAgICAgKiBfLmZvck93bihuZXcgRm9vLCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICogICBjb25zb2xlLmxvZyhrZXkpO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IExvZ3MgJ2EnIHRoZW4gJ2InIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZvck93bihvYmplY3QsIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ICYmIGJhc2VGb3JPd24ob2JqZWN0LCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZm9yT3duYCBleGNlcHQgdGhhdCBpdCBpdGVyYXRlcyBvdmVyIHByb3BlcnRpZXMgb2ZcbiAgICAgKiBgb2JqZWN0YCBpbiB0aGUgb3Bwb3NpdGUgb3JkZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBzZWUgXy5mb3JPd25cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8uZm9yT3duUmlnaHQobmV3IEZvbywgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAqICAgY29uc29sZS5sb2coa2V5KTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiBMb2dzICdiJyB0aGVuICdhJyBhc3N1bWluZyBgXy5mb3JPd25gIGxvZ3MgJ2EnIHRoZW4gJ2InLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZvck93blJpZ2h0KG9iamVjdCwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBvYmplY3QgJiYgYmFzZUZvck93blJpZ2h0KG9iamVjdCwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDMpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIGZ1bmN0aW9uIHByb3BlcnR5IG5hbWVzIGZyb20gb3duIGVudW1lcmFibGUgcHJvcGVydGllc1xuICAgICAqIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgZnVuY3Rpb24gbmFtZXMuXG4gICAgICogQHNlZSBfLmZ1bmN0aW9uc0luXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IF8uY29uc3RhbnQoJ2EnKTtcbiAgICAgKiAgIHRoaXMuYiA9IF8uY29uc3RhbnQoJ2InKTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSBfLmNvbnN0YW50KCdjJyk7XG4gICAgICpcbiAgICAgKiBfLmZ1bmN0aW9ucyhuZXcgRm9vKTtcbiAgICAgKiAvLyA9PiBbJ2EnLCAnYiddXG4gICAgICovXG4gICAgZnVuY3Rpb24gZnVuY3Rpb25zKG9iamVjdCkge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gW10gOiBiYXNlRnVuY3Rpb25zKG9iamVjdCwga2V5cyhvYmplY3QpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIGZ1bmN0aW9uIHByb3BlcnR5IG5hbWVzIGZyb20gb3duIGFuZCBpbmhlcml0ZWRcbiAgICAgKiBlbnVtZXJhYmxlIHByb3BlcnRpZXMgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBmdW5jdGlvbiBuYW1lcy5cbiAgICAgKiBAc2VlIF8uZnVuY3Rpb25zXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IF8uY29uc3RhbnQoJ2EnKTtcbiAgICAgKiAgIHRoaXMuYiA9IF8uY29uc3RhbnQoJ2InKTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSBfLmNvbnN0YW50KCdjJyk7XG4gICAgICpcbiAgICAgKiBfLmZ1bmN0aW9uc0luKG5ldyBGb28pO1xuICAgICAqIC8vID0+IFsnYScsICdiJywgJ2MnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZ1bmN0aW9uc0luKG9iamVjdCkge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gW10gOiBiYXNlRnVuY3Rpb25zKG9iamVjdCwga2V5c0luKG9iamVjdCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHZhbHVlIGF0IGBwYXRoYCBvZiBgb2JqZWN0YC4gSWYgdGhlIHJlc29sdmVkIHZhbHVlIGlzXG4gICAgICogYHVuZGVmaW5lZGAsIHRoZSBgZGVmYXVsdFZhbHVlYCBpcyByZXR1cm5lZCBpbiBpdHMgcGxhY2UuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy43LjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gICAgICogQHBhcmFtIHsqfSBbZGVmYXVsdFZhbHVlXSBUaGUgdmFsdWUgcmV0dXJuZWQgZm9yIGB1bmRlZmluZWRgIHJlc29sdmVkIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzb2x2ZWQgdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogW3sgJ2InOiB7ICdjJzogMyB9IH1dIH07XG4gICAgICpcbiAgICAgKiBfLmdldChvYmplY3QsICdhWzBdLmIuYycpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKlxuICAgICAqIF8uZ2V0KG9iamVjdCwgWydhJywgJzAnLCAnYicsICdjJ10pO1xuICAgICAqIC8vID0+IDNcbiAgICAgKlxuICAgICAqIF8uZ2V0KG9iamVjdCwgJ2EuYi5jJywgJ2RlZmF1bHQnKTtcbiAgICAgKiAvLyA9PiAnZGVmYXVsdCdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXQob2JqZWN0LCBwYXRoLCBkZWZhdWx0VmFsdWUpIHtcbiAgICAgIHZhciByZXN1bHQgPSBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IGJhc2VHZXQob2JqZWN0LCBwYXRoKTtcbiAgICAgIHJldHVybiByZXN1bHQgPT09IHVuZGVmaW5lZCA/IGRlZmF1bHRWYWx1ZSA6IHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHBhdGhgIGlzIGEgZGlyZWN0IHByb3BlcnR5IG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHBhdGhgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IHsgJ2InOiAyIH0gfTtcbiAgICAgKiB2YXIgb3RoZXIgPSBfLmNyZWF0ZSh7ICdhJzogXy5jcmVhdGUoeyAnYic6IDIgfSkgfSk7XG4gICAgICpcbiAgICAgKiBfLmhhcyhvYmplY3QsICdhJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5oYXMob2JqZWN0LCAnYS5iJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5oYXMob2JqZWN0LCBbJ2EnLCAnYiddKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmhhcyhvdGhlciwgJ2EnKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGhhcyhvYmplY3QsIHBhdGgpIHtcbiAgICAgIHJldHVybiBvYmplY3QgIT0gbnVsbCAmJiBoYXNQYXRoKG9iamVjdCwgcGF0aCwgYmFzZUhhcyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBwYXRoYCBpcyBhIGRpcmVjdCBvciBpbmhlcml0ZWQgcHJvcGVydHkgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgcGF0aGAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSBfLmNyZWF0ZSh7ICdhJzogXy5jcmVhdGUoeyAnYic6IDIgfSkgfSk7XG4gICAgICpcbiAgICAgKiBfLmhhc0luKG9iamVjdCwgJ2EnKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmhhc0luKG9iamVjdCwgJ2EuYicpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaGFzSW4ob2JqZWN0LCBbJ2EnLCAnYiddKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmhhc0luKG9iamVjdCwgJ2InKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGhhc0luKG9iamVjdCwgcGF0aCkge1xuICAgICAgcmV0dXJuIG9iamVjdCAhPSBudWxsICYmIGhhc1BhdGgob2JqZWN0LCBwYXRoLCBiYXNlSGFzSW4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gb2JqZWN0IGNvbXBvc2VkIG9mIHRoZSBpbnZlcnRlZCBrZXlzIGFuZCB2YWx1ZXMgb2YgYG9iamVjdGAuXG4gICAgICogSWYgYG9iamVjdGAgY29udGFpbnMgZHVwbGljYXRlIHZhbHVlcywgc3Vic2VxdWVudCB2YWx1ZXMgb3ZlcndyaXRlXG4gICAgICogcHJvcGVydHkgYXNzaWdubWVudHMgb2YgcHJldmlvdXMgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuNy4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnZlcnQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IGludmVydGVkIG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxLCAnYic6IDIsICdjJzogMSB9O1xuICAgICAqXG4gICAgICogXy5pbnZlcnQob2JqZWN0KTtcbiAgICAgKiAvLyA9PiB7ICcxJzogJ2MnLCAnMic6ICdiJyB9XG4gICAgICovXG4gICAgdmFyIGludmVydCA9IGNyZWF0ZUludmVydGVyKGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkge1xuICAgICAgaWYgKHZhbHVlICE9IG51bGwgJiZcbiAgICAgICAgICB0eXBlb2YgdmFsdWUudG9TdHJpbmcgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB2YWx1ZSA9IG5hdGl2ZU9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xuICAgICAgfVxuXG4gICAgICByZXN1bHRbdmFsdWVdID0ga2V5O1xuICAgIH0sIGNvbnN0YW50KGlkZW50aXR5KSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmludmVydGAgZXhjZXB0IHRoYXQgdGhlIGludmVydGVkIG9iamVjdCBpcyBnZW5lcmF0ZWRcbiAgICAgKiBmcm9tIHRoZSByZXN1bHRzIG9mIHJ1bm5pbmcgZWFjaCBlbGVtZW50IG9mIGBvYmplY3RgIHRocnUgYGl0ZXJhdGVlYC4gVGhlXG4gICAgICogY29ycmVzcG9uZGluZyBpbnZlcnRlZCB2YWx1ZSBvZiBlYWNoIGludmVydGVkIGtleSBpcyBhbiBhcnJheSBvZiBrZXlzXG4gICAgICogcmVzcG9uc2libGUgZm9yIGdlbmVyYXRpbmcgdGhlIGludmVydGVkIHZhbHVlLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZFxuICAgICAqIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMS4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnZlcnQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBpbnZlcnRlZCBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSwgJ2InOiAyLCAnYyc6IDEgfTtcbiAgICAgKlxuICAgICAqIF8uaW52ZXJ0Qnkob2JqZWN0KTtcbiAgICAgKiAvLyA9PiB7ICcxJzogWydhJywgJ2MnXSwgJzInOiBbJ2InXSB9XG4gICAgICpcbiAgICAgKiBfLmludmVydEJ5KG9iamVjdCwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgKiAgIHJldHVybiAnZ3JvdXAnICsgdmFsdWU7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4geyAnZ3JvdXAxJzogWydhJywgJ2MnXSwgJ2dyb3VwMic6IFsnYiddIH1cbiAgICAgKi9cbiAgICB2YXIgaW52ZXJ0QnkgPSBjcmVhdGVJbnZlcnRlcihmdW5jdGlvbihyZXN1bHQsIHZhbHVlLCBrZXkpIHtcbiAgICAgIGlmICh2YWx1ZSAhPSBudWxsICYmXG4gICAgICAgICAgdHlwZW9mIHZhbHVlLnRvU3RyaW5nICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdmFsdWUgPSBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwocmVzdWx0LCB2YWx1ZSkpIHtcbiAgICAgICAgcmVzdWx0W3ZhbHVlXS5wdXNoKGtleSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXN1bHRbdmFsdWVdID0gW2tleV07XG4gICAgICB9XG4gICAgfSwgZ2V0SXRlcmF0ZWUpO1xuXG4gICAgLyoqXG4gICAgICogSW52b2tlcyB0aGUgbWV0aG9kIGF0IGBwYXRoYCBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIG1ldGhvZCB0byBpbnZva2UuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbYXJnc10gVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgdGhlIG1ldGhvZCB3aXRoLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXN1bHQgb2YgdGhlIGludm9rZWQgbWV0aG9kLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IFt7ICdiJzogeyAnYyc6IFsxLCAyLCAzLCA0XSB9IH1dIH07XG4gICAgICpcbiAgICAgKiBfLmludm9rZShvYmplY3QsICdhWzBdLmIuYy5zbGljZScsIDEsIDMpO1xuICAgICAqIC8vID0+IFsyLCAzXVxuICAgICAqL1xuICAgIHZhciBpbnZva2UgPSBiYXNlUmVzdChiYXNlSW52b2tlKTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIE5vbi1vYmplY3QgdmFsdWVzIGFyZSBjb2VyY2VkIHRvIG9iamVjdHMuIFNlZSB0aGVcbiAgICAgKiBbRVMgc3BlY10oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LmtleXMpXG4gICAgICogZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8ua2V5cyhuZXcgRm9vKTtcbiAgICAgKiAvLyA9PiBbJ2EnLCAnYiddIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gICAgICpcbiAgICAgKiBfLmtleXMoJ2hpJyk7XG4gICAgICogLy8gPT4gWycwJywgJzEnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGtleXMob2JqZWN0KSB7XG4gICAgICByZXR1cm4gaXNBcnJheUxpa2Uob2JqZWN0KSA/IGFycmF5TGlrZUtleXMob2JqZWN0KSA6IGJhc2VLZXlzKG9iamVjdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBOb24tb2JqZWN0IHZhbHVlcyBhcmUgY29lcmNlZCB0byBvYmplY3RzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqICAgdGhpcy5iID0gMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICAgICAqXG4gICAgICogXy5rZXlzSW4obmV3IEZvbyk7XG4gICAgICogLy8gPT4gWydhJywgJ2InLCAnYyddIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gICAgICovXG4gICAgZnVuY3Rpb24ga2V5c0luKG9iamVjdCkge1xuICAgICAgcmV0dXJuIGlzQXJyYXlMaWtlKG9iamVjdCkgPyBhcnJheUxpa2VLZXlzKG9iamVjdCwgdHJ1ZSkgOiBiYXNlS2V5c0luKG9iamVjdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIG9wcG9zaXRlIG9mIGBfLm1hcFZhbHVlc2A7IHRoaXMgbWV0aG9kIGNyZWF0ZXMgYW4gb2JqZWN0IHdpdGggdGhlXG4gICAgICogc2FtZSB2YWx1ZXMgYXMgYG9iamVjdGAgYW5kIGtleXMgZ2VuZXJhdGVkIGJ5IHJ1bm5pbmcgZWFjaCBvd24gZW51bWVyYWJsZVxuICAgICAqIHN0cmluZyBrZXllZCBwcm9wZXJ0eSBvZiBgb2JqZWN0YCB0aHJ1IGBpdGVyYXRlZWAuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkXG4gICAgICogd2l0aCB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwga2V5LCBvYmplY3QpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuOC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG1hcHBlZCBvYmplY3QuXG4gICAgICogQHNlZSBfLm1hcFZhbHVlc1xuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLm1hcEtleXMoeyAnYSc6IDEsICdiJzogMiB9LCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICogICByZXR1cm4ga2V5ICsgdmFsdWU7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4geyAnYTEnOiAxLCAnYjInOiAyIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXBLZXlzKG9iamVjdCwgaXRlcmF0ZWUpIHtcbiAgICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICAgIGl0ZXJhdGVlID0gZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDMpO1xuXG4gICAgICBiYXNlRm9yT3duKG9iamVjdCwgZnVuY3Rpb24odmFsdWUsIGtleSwgb2JqZWN0KSB7XG4gICAgICAgIGJhc2VBc3NpZ25WYWx1ZShyZXN1bHQsIGl0ZXJhdGVlKHZhbHVlLCBrZXksIG9iamVjdCksIHZhbHVlKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIG9iamVjdCB3aXRoIHRoZSBzYW1lIGtleXMgYXMgYG9iamVjdGAgYW5kIHZhbHVlcyBnZW5lcmF0ZWRcbiAgICAgKiBieSBydW5uaW5nIGVhY2ggb3duIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnR5IG9mIGBvYmplY3RgIHRocnVcbiAgICAgKiBgaXRlcmF0ZWVgLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czpcbiAgICAgKiAodmFsdWUsIGtleSwgb2JqZWN0KS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjQuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBtYXBwZWQgb2JqZWN0LlxuICAgICAqIEBzZWUgXy5tYXBLZXlzXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IHtcbiAgICAgKiAgICdmcmVkJzogICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FnZSc6IDQwIH0sXG4gICAgICogICAncGViYmxlcyc6IHsgJ3VzZXInOiAncGViYmxlcycsICdhZ2UnOiAxIH1cbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogXy5tYXBWYWx1ZXModXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8uYWdlOyB9KTtcbiAgICAgKiAvLyA9PiB7ICdmcmVkJzogNDAsICdwZWJibGVzJzogMSB9IChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLm1hcFZhbHVlcyh1c2VycywgJ2FnZScpO1xuICAgICAqIC8vID0+IHsgJ2ZyZWQnOiA0MCwgJ3BlYmJsZXMnOiAxIH0gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXBWYWx1ZXMob2JqZWN0LCBpdGVyYXRlZSkge1xuICAgICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgICAgaXRlcmF0ZWUgPSBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMyk7XG5cbiAgICAgIGJhc2VGb3JPd24ob2JqZWN0LCBmdW5jdGlvbih2YWx1ZSwga2V5LCBvYmplY3QpIHtcbiAgICAgICAgYmFzZUFzc2lnblZhbHVlKHJlc3VsdCwga2V5LCBpdGVyYXRlZSh2YWx1ZSwga2V5LCBvYmplY3QpKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmFzc2lnbmAgZXhjZXB0IHRoYXQgaXQgcmVjdXJzaXZlbHkgbWVyZ2VzIG93biBhbmRcbiAgICAgKiBpbmhlcml0ZWQgZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydGllcyBvZiBzb3VyY2Ugb2JqZWN0cyBpbnRvIHRoZVxuICAgICAqIGRlc3RpbmF0aW9uIG9iamVjdC4gU291cmNlIHByb3BlcnRpZXMgdGhhdCByZXNvbHZlIHRvIGB1bmRlZmluZWRgIGFyZVxuICAgICAqIHNraXBwZWQgaWYgYSBkZXN0aW5hdGlvbiB2YWx1ZSBleGlzdHMuIEFycmF5IGFuZCBwbGFpbiBvYmplY3QgcHJvcGVydGllc1xuICAgICAqIGFyZSBtZXJnZWQgcmVjdXJzaXZlbHkuIE90aGVyIG9iamVjdHMgYW5kIHZhbHVlIHR5cGVzIGFyZSBvdmVycmlkZGVuIGJ5XG4gICAgICogYXNzaWdubWVudC4gU291cmNlIG9iamVjdHMgYXJlIGFwcGxpZWQgZnJvbSBsZWZ0IHRvIHJpZ2h0LiBTdWJzZXF1ZW50XG4gICAgICogc291cmNlcyBvdmVyd3JpdGUgcHJvcGVydHkgYXNzaWdubWVudHMgb2YgcHJldmlvdXMgc291cmNlcy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuNS4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gey4uLk9iamVjdH0gW3NvdXJjZXNdIFRoZSBzb3VyY2Ugb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0ge1xuICAgICAqICAgJ2EnOiBbeyAnYic6IDIgfSwgeyAnZCc6IDQgfV1cbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogdmFyIG90aGVyID0ge1xuICAgICAqICAgJ2EnOiBbeyAnYyc6IDMgfSwgeyAnZSc6IDUgfV1cbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogXy5tZXJnZShvYmplY3QsIG90aGVyKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogW3sgJ2InOiAyLCAnYyc6IDMgfSwgeyAnZCc6IDQsICdlJzogNSB9XSB9XG4gICAgICovXG4gICAgdmFyIG1lcmdlID0gY3JlYXRlQXNzaWduZXIoZnVuY3Rpb24ob2JqZWN0LCBzb3VyY2UsIHNyY0luZGV4KSB7XG4gICAgICBiYXNlTWVyZ2Uob2JqZWN0LCBzb3VyY2UsIHNyY0luZGV4KTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ubWVyZ2VgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGN1c3RvbWl6ZXJgIHdoaWNoXG4gICAgICogaXMgaW52b2tlZCB0byBwcm9kdWNlIHRoZSBtZXJnZWQgdmFsdWVzIG9mIHRoZSBkZXN0aW5hdGlvbiBhbmQgc291cmNlXG4gICAgICogcHJvcGVydGllcy4gSWYgYGN1c3RvbWl6ZXJgIHJldHVybnMgYHVuZGVmaW5lZGAsIG1lcmdpbmcgaXMgaGFuZGxlZCBieSB0aGVcbiAgICAgKiBtZXRob2QgaW5zdGVhZC4gVGhlIGBjdXN0b21pemVyYCBpcyBpbnZva2VkIHdpdGggc2l4IGFyZ3VtZW50czpcbiAgICAgKiAob2JqVmFsdWUsIHNyY1ZhbHVlLCBrZXksIG9iamVjdCwgc291cmNlLCBzdGFjaykuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHsuLi5PYmplY3R9IHNvdXJjZXMgVGhlIHNvdXJjZSBvYmplY3RzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGN1c3RvbWl6ZXIgVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBhc3NpZ25lZCB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gY3VzdG9taXplcihvYmpWYWx1ZSwgc3JjVmFsdWUpIHtcbiAgICAgKiAgIGlmIChfLmlzQXJyYXkob2JqVmFsdWUpKSB7XG4gICAgICogICAgIHJldHVybiBvYmpWYWx1ZS5jb25jYXQoc3JjVmFsdWUpO1xuICAgICAqICAgfVxuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogWzFdLCAnYic6IFsyXSB9O1xuICAgICAqIHZhciBvdGhlciA9IHsgJ2EnOiBbM10sICdiJzogWzRdIH07XG4gICAgICpcbiAgICAgKiBfLm1lcmdlV2l0aChvYmplY3QsIG90aGVyLCBjdXN0b21pemVyKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogWzEsIDNdLCAnYic6IFsyLCA0XSB9XG4gICAgICovXG4gICAgdmFyIG1lcmdlV2l0aCA9IGNyZWF0ZUFzc2lnbmVyKGZ1bmN0aW9uKG9iamVjdCwgc291cmNlLCBzcmNJbmRleCwgY3VzdG9taXplcikge1xuICAgICAgYmFzZU1lcmdlKG9iamVjdCwgc291cmNlLCBzcmNJbmRleCwgY3VzdG9taXplcik7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgb3Bwb3NpdGUgb2YgYF8ucGlja2A7IHRoaXMgbWV0aG9kIGNyZWF0ZXMgYW4gb2JqZWN0IGNvbXBvc2VkIG9mIHRoZVxuICAgICAqIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgcHJvcGVydHkgcGF0aHMgb2YgYG9iamVjdGAgdGhhdCBhcmUgbm90IG9taXR0ZWQuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgY29uc2lkZXJhYmx5IHNsb3dlciB0aGFuIGBfLnBpY2tgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIHNvdXJjZSBvYmplY3QuXG4gICAgICogQHBhcmFtIHsuLi4oc3RyaW5nfHN0cmluZ1tdKX0gW3BhdGhzXSBUaGUgcHJvcGVydHkgcGF0aHMgdG8gb21pdC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogJzInLCAnYyc6IDMgfTtcbiAgICAgKlxuICAgICAqIF8ub21pdChvYmplY3QsIFsnYScsICdjJ10pO1xuICAgICAqIC8vID0+IHsgJ2InOiAnMicgfVxuICAgICAqL1xuICAgIHZhciBvbWl0ID0gZmxhdFJlc3QoZnVuY3Rpb24ob2JqZWN0LCBwYXRocykge1xuICAgICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgICAgaWYgKG9iamVjdCA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgICB2YXIgaXNEZWVwID0gZmFsc2U7XG4gICAgICBwYXRocyA9IGFycmF5TWFwKHBhdGhzLCBmdW5jdGlvbihwYXRoKSB7XG4gICAgICAgIHBhdGggPSBjYXN0UGF0aChwYXRoLCBvYmplY3QpO1xuICAgICAgICBpc0RlZXAgfHwgKGlzRGVlcCA9IHBhdGgubGVuZ3RoID4gMSk7XG4gICAgICAgIHJldHVybiBwYXRoO1xuICAgICAgfSk7XG4gICAgICBjb3B5T2JqZWN0KG9iamVjdCwgZ2V0QWxsS2V5c0luKG9iamVjdCksIHJlc3VsdCk7XG4gICAgICBpZiAoaXNEZWVwKSB7XG4gICAgICAgIHJlc3VsdCA9IGJhc2VDbG9uZShyZXN1bHQsIENMT05FX0RFRVBfRkxBRyB8IENMT05FX0ZMQVRfRkxBRyB8IENMT05FX1NZTUJPTFNfRkxBRywgY3VzdG9tT21pdENsb25lKTtcbiAgICAgIH1cbiAgICAgIHZhciBsZW5ndGggPSBwYXRocy5sZW5ndGg7XG4gICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgYmFzZVVuc2V0KHJlc3VsdCwgcGF0aHNbbGVuZ3RoXSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhlIG9wcG9zaXRlIG9mIGBfLnBpY2tCeWA7IHRoaXMgbWV0aG9kIGNyZWF0ZXMgYW4gb2JqZWN0IGNvbXBvc2VkIG9mXG4gICAgICogdGhlIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnRpZXMgb2YgYG9iamVjdGAgdGhhdFxuICAgICAqIGBwcmVkaWNhdGVgIGRvZXNuJ3QgcmV0dXJuIHRydXRoeSBmb3IuIFRoZSBwcmVkaWNhdGUgaXMgaW52b2tlZCB3aXRoIHR3b1xuICAgICAqIGFyZ3VtZW50czogKHZhbHVlLCBrZXkpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIHNvdXJjZSBvYmplY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgcHJvcGVydHkuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxLCAnYic6ICcyJywgJ2MnOiAzIH07XG4gICAgICpcbiAgICAgKiBfLm9taXRCeShvYmplY3QsIF8uaXNOdW1iZXIpO1xuICAgICAqIC8vID0+IHsgJ2InOiAnMicgfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG9taXRCeShvYmplY3QsIHByZWRpY2F0ZSkge1xuICAgICAgcmV0dXJuIHBpY2tCeShvYmplY3QsIG5lZ2F0ZShnZXRJdGVyYXRlZShwcmVkaWNhdGUpKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBvYmplY3QgY29tcG9zZWQgb2YgdGhlIHBpY2tlZCBgb2JqZWN0YCBwcm9wZXJ0aWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIHNvdXJjZSBvYmplY3QuXG4gICAgICogQHBhcmFtIHsuLi4oc3RyaW5nfHN0cmluZ1tdKX0gW3BhdGhzXSBUaGUgcHJvcGVydHkgcGF0aHMgdG8gcGljay5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogJzInLCAnYyc6IDMgfTtcbiAgICAgKlxuICAgICAqIF8ucGljayhvYmplY3QsIFsnYScsICdjJ10pO1xuICAgICAqIC8vID0+IHsgJ2EnOiAxLCAnYyc6IDMgfVxuICAgICAqL1xuICAgIHZhciBwaWNrID0gZmxhdFJlc3QoZnVuY3Rpb24ob2JqZWN0LCBwYXRocykge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8ge30gOiBiYXNlUGljayhvYmplY3QsIHBhdGhzKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gb2JqZWN0IGNvbXBvc2VkIG9mIHRoZSBgb2JqZWN0YCBwcm9wZXJ0aWVzIGBwcmVkaWNhdGVgIHJldHVybnNcbiAgICAgKiB0cnV0aHkgZm9yLiBUaGUgcHJlZGljYXRlIGlzIGludm9rZWQgd2l0aCB0d28gYXJndW1lbnRzOiAodmFsdWUsIGtleSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgc291cmNlIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBwcm9wZXJ0eS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogJzInLCAnYyc6IDMgfTtcbiAgICAgKlxuICAgICAqIF8ucGlja0J5KG9iamVjdCwgXy5pc051bWJlcik7XG4gICAgICogLy8gPT4geyAnYSc6IDEsICdjJzogMyB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gcGlja0J5KG9iamVjdCwgcHJlZGljYXRlKSB7XG4gICAgICBpZiAob2JqZWN0ID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHt9O1xuICAgICAgfVxuICAgICAgdmFyIHByb3BzID0gYXJyYXlNYXAoZ2V0QWxsS2V5c0luKG9iamVjdCksIGZ1bmN0aW9uKHByb3ApIHtcbiAgICAgICAgcmV0dXJuIFtwcm9wXTtcbiAgICAgIH0pO1xuICAgICAgcHJlZGljYXRlID0gZ2V0SXRlcmF0ZWUocHJlZGljYXRlKTtcbiAgICAgIHJldHVybiBiYXNlUGlja0J5KG9iamVjdCwgcHJvcHMsIGZ1bmN0aW9uKHZhbHVlLCBwYXRoKSB7XG4gICAgICAgIHJldHVybiBwcmVkaWNhdGUodmFsdWUsIHBhdGhbMF0pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5nZXRgIGV4Y2VwdCB0aGF0IGlmIHRoZSByZXNvbHZlZCB2YWx1ZSBpcyBhXG4gICAgICogZnVuY3Rpb24gaXQncyBpbnZva2VkIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIGl0cyBwYXJlbnQgb2JqZWN0IGFuZFxuICAgICAqIGl0cyByZXN1bHQgaXMgcmV0dXJuZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byByZXNvbHZlLlxuICAgICAqIEBwYXJhbSB7Kn0gW2RlZmF1bHRWYWx1ZV0gVGhlIHZhbHVlIHJldHVybmVkIGZvciBgdW5kZWZpbmVkYCByZXNvbHZlZCB2YWx1ZXMuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc29sdmVkIHZhbHVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IFt7ICdiJzogeyAnYzEnOiAzLCAnYzInOiBfLmNvbnN0YW50KDQpIH0gfV0gfTtcbiAgICAgKlxuICAgICAqIF8ucmVzdWx0KG9iamVjdCwgJ2FbMF0uYi5jMScpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKlxuICAgICAqIF8ucmVzdWx0KG9iamVjdCwgJ2FbMF0uYi5jMicpO1xuICAgICAqIC8vID0+IDRcbiAgICAgKlxuICAgICAqIF8ucmVzdWx0KG9iamVjdCwgJ2FbMF0uYi5jMycsICdkZWZhdWx0Jyk7XG4gICAgICogLy8gPT4gJ2RlZmF1bHQnXG4gICAgICpcbiAgICAgKiBfLnJlc3VsdChvYmplY3QsICdhWzBdLmIuYzMnLCBfLmNvbnN0YW50KCdkZWZhdWx0JykpO1xuICAgICAqIC8vID0+ICdkZWZhdWx0J1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlc3VsdChvYmplY3QsIHBhdGgsIGRlZmF1bHRWYWx1ZSkge1xuICAgICAgcGF0aCA9IGNhc3RQYXRoKHBhdGgsIG9iamVjdCk7XG5cbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHBhdGgubGVuZ3RoO1xuXG4gICAgICAvLyBFbnN1cmUgdGhlIGxvb3AgaXMgZW50ZXJlZCB3aGVuIHBhdGggaXMgZW1wdHkuXG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICBsZW5ndGggPSAxO1xuICAgICAgICBvYmplY3QgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IG9iamVjdFt0b0tleShwYXRoW2luZGV4XSldO1xuICAgICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGluZGV4ID0gbGVuZ3RoO1xuICAgICAgICAgIHZhbHVlID0gZGVmYXVsdFZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIG9iamVjdCA9IGlzRnVuY3Rpb24odmFsdWUpID8gdmFsdWUuY2FsbChvYmplY3QpIDogdmFsdWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gb2JqZWN0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIHZhbHVlIGF0IGBwYXRoYCBvZiBgb2JqZWN0YC4gSWYgYSBwb3J0aW9uIG9mIGBwYXRoYCBkb2Vzbid0IGV4aXN0LFxuICAgICAqIGl0J3MgY3JlYXRlZC4gQXJyYXlzIGFyZSBjcmVhdGVkIGZvciBtaXNzaW5nIGluZGV4IHByb3BlcnRpZXMgd2hpbGUgb2JqZWN0c1xuICAgICAqIGFyZSBjcmVhdGVkIGZvciBhbGwgb3RoZXIgbWlzc2luZyBwcm9wZXJ0aWVzLiBVc2UgYF8uc2V0V2l0aGAgdG8gY3VzdG9taXplXG4gICAgICogYHBhdGhgIGNyZWF0aW9uLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy43LjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gc2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IFt7ICdiJzogeyAnYyc6IDMgfSB9XSB9O1xuICAgICAqXG4gICAgICogXy5zZXQob2JqZWN0LCAnYVswXS5iLmMnLCA0KTtcbiAgICAgKiBjb25zb2xlLmxvZyhvYmplY3QuYVswXS5iLmMpO1xuICAgICAqIC8vID0+IDRcbiAgICAgKlxuICAgICAqIF8uc2V0KG9iamVjdCwgWyd4JywgJzAnLCAneScsICd6J10sIDUpO1xuICAgICAqIGNvbnNvbGUubG9nKG9iamVjdC54WzBdLnkueik7XG4gICAgICogLy8gPT4gNVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNldChvYmplY3QsIHBhdGgsIHZhbHVlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyBvYmplY3QgOiBiYXNlU2V0KG9iamVjdCwgcGF0aCwgdmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uc2V0YCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjdXN0b21pemVyYCB3aGljaCBpc1xuICAgICAqIGludm9rZWQgdG8gcHJvZHVjZSB0aGUgb2JqZWN0cyBvZiBgcGF0aGAuICBJZiBgY3VzdG9taXplcmAgcmV0dXJucyBgdW5kZWZpbmVkYFxuICAgICAqIHBhdGggY3JlYXRpb24gaXMgaGFuZGxlZCBieSB0aGUgbWV0aG9kIGluc3RlYWQuIFRoZSBgY3VzdG9taXplcmAgaXMgaW52b2tlZFxuICAgICAqIHdpdGggdGhyZWUgYXJndW1lbnRzOiAobnNWYWx1ZSwga2V5LCBuc09iamVjdCkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBzZXQuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGFzc2lnbmVkIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0ge307XG4gICAgICpcbiAgICAgKiBfLnNldFdpdGgob2JqZWN0LCAnWzBdWzFdJywgJ2EnLCBPYmplY3QpO1xuICAgICAqIC8vID0+IHsgJzAnOiB7ICcxJzogJ2EnIH0gfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNldFdpdGgob2JqZWN0LCBwYXRoLCB2YWx1ZSwgY3VzdG9taXplcikge1xuICAgICAgY3VzdG9taXplciA9IHR5cGVvZiBjdXN0b21pemVyID09ICdmdW5jdGlvbicgPyBjdXN0b21pemVyIDogdW5kZWZpbmVkO1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gb2JqZWN0IDogYmFzZVNldChvYmplY3QsIHBhdGgsIHZhbHVlLCBjdXN0b21pemVyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIG93biBlbnVtZXJhYmxlIHN0cmluZyBrZXllZC12YWx1ZSBwYWlycyBmb3IgYG9iamVjdGBcbiAgICAgKiB3aGljaCBjYW4gYmUgY29uc3VtZWQgYnkgYF8uZnJvbVBhaXJzYC4gSWYgYG9iamVjdGAgaXMgYSBtYXAgb3Igc2V0LCBpdHNcbiAgICAgKiBlbnRyaWVzIGFyZSByZXR1cm5lZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBhbGlhcyBlbnRyaWVzXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGtleS12YWx1ZSBwYWlycy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8udG9QYWlycyhuZXcgRm9vKTtcbiAgICAgKiAvLyA9PiBbWydhJywgMV0sIFsnYicsIDJdXSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqL1xuICAgIHZhciB0b1BhaXJzID0gY3JlYXRlVG9QYWlycyhrZXlzKTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2Ygb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQtdmFsdWUgcGFpcnNcbiAgICAgKiBmb3IgYG9iamVjdGAgd2hpY2ggY2FuIGJlIGNvbnN1bWVkIGJ5IGBfLmZyb21QYWlyc2AuIElmIGBvYmplY3RgIGlzIGEgbWFwXG4gICAgICogb3Igc2V0LCBpdHMgZW50cmllcyBhcmUgcmV0dXJuZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAYWxpYXMgZW50cmllc0luXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGtleS12YWx1ZSBwYWlycy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8udG9QYWlyc0luKG5ldyBGb28pO1xuICAgICAqIC8vID0+IFtbJ2EnLCAxXSwgWydiJywgMl0sIFsnYycsIDNdXSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqL1xuICAgIHZhciB0b1BhaXJzSW4gPSBjcmVhdGVUb1BhaXJzKGtleXNJbik7XG5cbiAgICAvKipcbiAgICAgKiBBbiBhbHRlcm5hdGl2ZSB0byBgXy5yZWR1Y2VgOyB0aGlzIG1ldGhvZCB0cmFuc2Zvcm1zIGBvYmplY3RgIHRvIGEgbmV3XG4gICAgICogYGFjY3VtdWxhdG9yYCBvYmplY3Qgd2hpY2ggaXMgdGhlIHJlc3VsdCBvZiBydW5uaW5nIGVhY2ggb2YgaXRzIG93blxuICAgICAqIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnRpZXMgdGhydSBgaXRlcmF0ZWVgLCB3aXRoIGVhY2ggaW52b2NhdGlvblxuICAgICAqIHBvdGVudGlhbGx5IG11dGF0aW5nIHRoZSBgYWNjdW11bGF0b3JgIG9iamVjdC4gSWYgYGFjY3VtdWxhdG9yYCBpcyBub3RcbiAgICAgKiBwcm92aWRlZCwgYSBuZXcgb2JqZWN0IHdpdGggdGhlIHNhbWUgYFtbUHJvdG90eXBlXV1gIHdpbGwgYmUgdXNlZC4gVGhlXG4gICAgICogaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIGZvdXIgYXJndW1lbnRzOiAoYWNjdW11bGF0b3IsIHZhbHVlLCBrZXksIG9iamVjdCkuXG4gICAgICogSXRlcmF0ZWUgZnVuY3Rpb25zIG1heSBleGl0IGl0ZXJhdGlvbiBlYXJseSBieSBleHBsaWNpdGx5IHJldHVybmluZyBgZmFsc2VgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDEuMy4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHsqfSBbYWNjdW11bGF0b3JdIFRoZSBjdXN0b20gYWNjdW11bGF0b3IgdmFsdWUuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGFjY3VtdWxhdGVkIHZhbHVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRyYW5zZm9ybShbMiwgMywgNF0sIGZ1bmN0aW9uKHJlc3VsdCwgbikge1xuICAgICAqICAgcmVzdWx0LnB1c2gobiAqPSBuKTtcbiAgICAgKiAgIHJldHVybiBuICUgMiA9PSAwO1xuICAgICAqIH0sIFtdKTtcbiAgICAgKiAvLyA9PiBbNCwgOV1cbiAgICAgKlxuICAgICAqIF8udHJhbnNmb3JtKHsgJ2EnOiAxLCAnYic6IDIsICdjJzogMSB9LCBmdW5jdGlvbihyZXN1bHQsIHZhbHVlLCBrZXkpIHtcbiAgICAgKiAgIChyZXN1bHRbdmFsdWVdIHx8IChyZXN1bHRbdmFsdWVdID0gW10pKS5wdXNoKGtleSk7XG4gICAgICogfSwge30pO1xuICAgICAqIC8vID0+IHsgJzEnOiBbJ2EnLCAnYyddLCAnMic6IFsnYiddIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0cmFuc2Zvcm0ob2JqZWN0LCBpdGVyYXRlZSwgYWNjdW11bGF0b3IpIHtcbiAgICAgIHZhciBpc0FyciA9IGlzQXJyYXkob2JqZWN0KSxcbiAgICAgICAgICBpc0Fyckxpa2UgPSBpc0FyciB8fCBpc0J1ZmZlcihvYmplY3QpIHx8IGlzVHlwZWRBcnJheShvYmplY3QpO1xuXG4gICAgICBpdGVyYXRlZSA9IGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCA0KTtcbiAgICAgIGlmIChhY2N1bXVsYXRvciA9PSBudWxsKSB7XG4gICAgICAgIHZhciBDdG9yID0gb2JqZWN0ICYmIG9iamVjdC5jb25zdHJ1Y3RvcjtcbiAgICAgICAgaWYgKGlzQXJyTGlrZSkge1xuICAgICAgICAgIGFjY3VtdWxhdG9yID0gaXNBcnIgPyBuZXcgQ3RvciA6IFtdO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzT2JqZWN0KG9iamVjdCkpIHtcbiAgICAgICAgICBhY2N1bXVsYXRvciA9IGlzRnVuY3Rpb24oQ3RvcikgPyBiYXNlQ3JlYXRlKGdldFByb3RvdHlwZShvYmplY3QpKSA6IHt9O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGFjY3VtdWxhdG9yID0ge307XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIChpc0Fyckxpa2UgPyBhcnJheUVhY2ggOiBiYXNlRm9yT3duKShvYmplY3QsIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgb2JqZWN0KSB7XG4gICAgICAgIHJldHVybiBpdGVyYXRlZShhY2N1bXVsYXRvciwgdmFsdWUsIGluZGV4LCBvYmplY3QpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyB0aGUgcHJvcGVydHkgYXQgYHBhdGhgIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gdW5zZXQuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBwcm9wZXJ0eSBpcyBkZWxldGVkLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogW3sgJ2InOiB7ICdjJzogNyB9IH1dIH07XG4gICAgICogXy51bnNldChvYmplY3QsICdhWzBdLmIuYycpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKG9iamVjdCk7XG4gICAgICogLy8gPT4geyAnYSc6IFt7ICdiJzoge30gfV0gfTtcbiAgICAgKlxuICAgICAqIF8udW5zZXQob2JqZWN0LCBbJ2EnLCAnMCcsICdiJywgJ2MnXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogY29uc29sZS5sb2cob2JqZWN0KTtcbiAgICAgKiAvLyA9PiB7ICdhJzogW3sgJ2InOiB7fSB9XSB9O1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVuc2V0KG9iamVjdCwgcGF0aCkge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gdHJ1ZSA6IGJhc2VVbnNldChvYmplY3QsIHBhdGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uc2V0YCBleGNlcHQgdGhhdCBhY2NlcHRzIGB1cGRhdGVyYCB0byBwcm9kdWNlIHRoZVxuICAgICAqIHZhbHVlIHRvIHNldC4gVXNlIGBfLnVwZGF0ZVdpdGhgIHRvIGN1c3RvbWl6ZSBgcGF0aGAgY3JlYXRpb24uIFRoZSBgdXBkYXRlcmBcbiAgICAgKiBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC42LjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gc2V0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHVwZGF0ZXIgVGhlIGZ1bmN0aW9uIHRvIHByb2R1Y2UgdGhlIHVwZGF0ZWQgdmFsdWUuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiBbeyAnYic6IHsgJ2MnOiAzIH0gfV0gfTtcbiAgICAgKlxuICAgICAqIF8udXBkYXRlKG9iamVjdCwgJ2FbMF0uYi5jJywgZnVuY3Rpb24obikgeyByZXR1cm4gbiAqIG47IH0pO1xuICAgICAqIGNvbnNvbGUubG9nKG9iamVjdC5hWzBdLmIuYyk7XG4gICAgICogLy8gPT4gOVxuICAgICAqXG4gICAgICogXy51cGRhdGUob2JqZWN0LCAneFswXS55LnonLCBmdW5jdGlvbihuKSB7IHJldHVybiBuID8gbiArIDEgOiAwOyB9KTtcbiAgICAgKiBjb25zb2xlLmxvZyhvYmplY3QueFswXS55LnopO1xuICAgICAqIC8vID0+IDBcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1cGRhdGUob2JqZWN0LCBwYXRoLCB1cGRhdGVyKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyBvYmplY3QgOiBiYXNlVXBkYXRlKG9iamVjdCwgcGF0aCwgY2FzdEZ1bmN0aW9uKHVwZGF0ZXIpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnVwZGF0ZWAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY3VzdG9taXplcmAgd2hpY2ggaXNcbiAgICAgKiBpbnZva2VkIHRvIHByb2R1Y2UgdGhlIG9iamVjdHMgb2YgYHBhdGhgLiAgSWYgYGN1c3RvbWl6ZXJgIHJldHVybnMgYHVuZGVmaW5lZGBcbiAgICAgKiBwYXRoIGNyZWF0aW9uIGlzIGhhbmRsZWQgYnkgdGhlIG1ldGhvZCBpbnN0ZWFkLiBUaGUgYGN1c3RvbWl6ZXJgIGlzIGludm9rZWRcbiAgICAgKiB3aXRoIHRocmVlIGFyZ3VtZW50czogKG5zVmFsdWUsIGtleSwgbnNPYmplY3QpLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC42LjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gc2V0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHVwZGF0ZXIgVGhlIGZ1bmN0aW9uIHRvIHByb2R1Y2UgdGhlIHVwZGF0ZWQgdmFsdWUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgYXNzaWduZWQgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7fTtcbiAgICAgKlxuICAgICAqIF8udXBkYXRlV2l0aChvYmplY3QsICdbMF1bMV0nLCBfLmNvbnN0YW50KCdhJyksIE9iamVjdCk7XG4gICAgICogLy8gPT4geyAnMCc6IHsgJzEnOiAnYScgfSB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gdXBkYXRlV2l0aChvYmplY3QsIHBhdGgsIHVwZGF0ZXIsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIGN1c3RvbWl6ZXIgPSB0eXBlb2YgY3VzdG9taXplciA9PSAnZnVuY3Rpb24nID8gY3VzdG9taXplciA6IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IG9iamVjdCA6IGJhc2VVcGRhdGUob2JqZWN0LCBwYXRoLCBjYXN0RnVuY3Rpb24odXBkYXRlciksIGN1c3RvbWl6ZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0eSB2YWx1ZXMgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogTm9uLW9iamVjdCB2YWx1ZXMgYXJlIGNvZXJjZWQgdG8gb2JqZWN0cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogICB0aGlzLmIgPSAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAgICpcbiAgICAgKiBfLnZhbHVlcyhuZXcgRm9vKTtcbiAgICAgKiAvLyA9PiBbMSwgMl0gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKlxuICAgICAqIF8udmFsdWVzKCdoaScpO1xuICAgICAqIC8vID0+IFsnaCcsICdpJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB2YWx1ZXMob2JqZWN0KSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyBbXSA6IGJhc2VWYWx1ZXMob2JqZWN0LCBrZXlzKG9iamVjdCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnR5XG4gICAgICogdmFsdWVzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIE5vbi1vYmplY3QgdmFsdWVzIGFyZSBjb2VyY2VkIHRvIG9iamVjdHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqICAgdGhpcy5iID0gMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICAgICAqXG4gICAgICogXy52YWx1ZXNJbihuZXcgRm9vKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM10gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB2YWx1ZXNJbihvYmplY3QpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IFtdIDogYmFzZVZhbHVlcyhvYmplY3QsIGtleXNJbihvYmplY3QpKTtcbiAgICB9XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDbGFtcHMgYG51bWJlcmAgd2l0aGluIHRoZSBpbmNsdXNpdmUgYGxvd2VyYCBhbmQgYHVwcGVyYCBib3VuZHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTnVtYmVyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG51bWJlciBUaGUgbnVtYmVyIHRvIGNsYW1wLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbG93ZXJdIFRoZSBsb3dlciBib3VuZC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdXBwZXIgVGhlIHVwcGVyIGJvdW5kLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGNsYW1wZWQgbnVtYmVyLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmNsYW1wKC0xMCwgLTUsIDUpO1xuICAgICAqIC8vID0+IC01XG4gICAgICpcbiAgICAgKiBfLmNsYW1wKDEwLCAtNSwgNSk7XG4gICAgICogLy8gPT4gNVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsYW1wKG51bWJlciwgbG93ZXIsIHVwcGVyKSB7XG4gICAgICBpZiAodXBwZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICB1cHBlciA9IGxvd2VyO1xuICAgICAgICBsb3dlciA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIGlmICh1cHBlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHVwcGVyID0gdG9OdW1iZXIodXBwZXIpO1xuICAgICAgICB1cHBlciA9IHVwcGVyID09PSB1cHBlciA/IHVwcGVyIDogMDtcbiAgICAgIH1cbiAgICAgIGlmIChsb3dlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGxvd2VyID0gdG9OdW1iZXIobG93ZXIpO1xuICAgICAgICBsb3dlciA9IGxvd2VyID09PSBsb3dlciA/IGxvd2VyIDogMDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlQ2xhbXAodG9OdW1iZXIobnVtYmVyKSwgbG93ZXIsIHVwcGVyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYG5gIGlzIGJldHdlZW4gYHN0YXJ0YCBhbmQgdXAgdG8sIGJ1dCBub3QgaW5jbHVkaW5nLCBgZW5kYC4gSWZcbiAgICAgKiBgZW5kYCBpcyBub3Qgc3BlY2lmaWVkLCBpdCdzIHNldCB0byBgc3RhcnRgIHdpdGggYHN0YXJ0YCB0aGVuIHNldCB0byBgMGAuXG4gICAgICogSWYgYHN0YXJ0YCBpcyBncmVhdGVyIHRoYW4gYGVuZGAgdGhlIHBhcmFtcyBhcmUgc3dhcHBlZCB0byBzdXBwb3J0XG4gICAgICogbmVnYXRpdmUgcmFuZ2VzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMy4wXG4gICAgICogQGNhdGVnb3J5IE51bWJlclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBudW1iZXIgVGhlIG51bWJlciB0byBjaGVjay5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PTBdIFRoZSBzdGFydCBvZiB0aGUgcmFuZ2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGVuZCBUaGUgZW5kIG9mIHRoZSByYW5nZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYG51bWJlcmAgaXMgaW4gdGhlIHJhbmdlLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQHNlZSBfLnJhbmdlLCBfLnJhbmdlUmlnaHRcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pblJhbmdlKDMsIDIsIDQpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaW5SYW5nZSg0LCA4KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmluUmFuZ2UoNCwgMik7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaW5SYW5nZSgyLCAyKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pblJhbmdlKDEuMiwgMik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pblJhbmdlKDUuMiwgNCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaW5SYW5nZSgtMywgLTIsIC02KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaW5SYW5nZShudW1iZXIsIHN0YXJ0LCBlbmQpIHtcbiAgICAgIHN0YXJ0ID0gdG9GaW5pdGUoc3RhcnQpO1xuICAgICAgaWYgKGVuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGVuZCA9IHN0YXJ0O1xuICAgICAgICBzdGFydCA9IDA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbmQgPSB0b0Zpbml0ZShlbmQpO1xuICAgICAgfVxuICAgICAgbnVtYmVyID0gdG9OdW1iZXIobnVtYmVyKTtcbiAgICAgIHJldHVybiBiYXNlSW5SYW5nZShudW1iZXIsIHN0YXJ0LCBlbmQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFByb2R1Y2VzIGEgcmFuZG9tIG51bWJlciBiZXR3ZWVuIHRoZSBpbmNsdXNpdmUgYGxvd2VyYCBhbmQgYHVwcGVyYCBib3VuZHMuXG4gICAgICogSWYgb25seSBvbmUgYXJndW1lbnQgaXMgcHJvdmlkZWQgYSBudW1iZXIgYmV0d2VlbiBgMGAgYW5kIHRoZSBnaXZlbiBudW1iZXJcbiAgICAgKiBpcyByZXR1cm5lZC4gSWYgYGZsb2F0aW5nYCBpcyBgdHJ1ZWAsIG9yIGVpdGhlciBgbG93ZXJgIG9yIGB1cHBlcmAgYXJlXG4gICAgICogZmxvYXRzLCBhIGZsb2F0aW5nLXBvaW50IG51bWJlciBpcyByZXR1cm5lZCBpbnN0ZWFkIG9mIGFuIGludGVnZXIuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogSmF2YVNjcmlwdCBmb2xsb3dzIHRoZSBJRUVFLTc1NCBzdGFuZGFyZCBmb3IgcmVzb2x2aW5nXG4gICAgICogZmxvYXRpbmctcG9pbnQgdmFsdWVzIHdoaWNoIGNhbiBwcm9kdWNlIHVuZXhwZWN0ZWQgcmVzdWx0cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjcuMFxuICAgICAqIEBjYXRlZ29yeSBOdW1iZXJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xvd2VyPTBdIFRoZSBsb3dlciBib3VuZC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3VwcGVyPTFdIFRoZSB1cHBlciBib3VuZC5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtmbG9hdGluZ10gU3BlY2lmeSByZXR1cm5pbmcgYSBmbG9hdGluZy1wb2ludCBudW1iZXIuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgcmFuZG9tIG51bWJlci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5yYW5kb20oMCwgNSk7XG4gICAgICogLy8gPT4gYW4gaW50ZWdlciBiZXR3ZWVuIDAgYW5kIDVcbiAgICAgKlxuICAgICAqIF8ucmFuZG9tKDUpO1xuICAgICAqIC8vID0+IGFsc28gYW4gaW50ZWdlciBiZXR3ZWVuIDAgYW5kIDVcbiAgICAgKlxuICAgICAqIF8ucmFuZG9tKDUsIHRydWUpO1xuICAgICAqIC8vID0+IGEgZmxvYXRpbmctcG9pbnQgbnVtYmVyIGJldHdlZW4gMCBhbmQgNVxuICAgICAqXG4gICAgICogXy5yYW5kb20oMS4yLCA1LjIpO1xuICAgICAqIC8vID0+IGEgZmxvYXRpbmctcG9pbnQgbnVtYmVyIGJldHdlZW4gMS4yIGFuZCA1LjJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiByYW5kb20obG93ZXIsIHVwcGVyLCBmbG9hdGluZykge1xuICAgICAgaWYgKGZsb2F0aW5nICYmIHR5cGVvZiBmbG9hdGluZyAhPSAnYm9vbGVhbicgJiYgaXNJdGVyYXRlZUNhbGwobG93ZXIsIHVwcGVyLCBmbG9hdGluZykpIHtcbiAgICAgICAgdXBwZXIgPSBmbG9hdGluZyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIGlmIChmbG9hdGluZyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdXBwZXIgPT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgZmxvYXRpbmcgPSB1cHBlcjtcbiAgICAgICAgICB1cHBlciA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0eXBlb2YgbG93ZXIgPT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgZmxvYXRpbmcgPSBsb3dlcjtcbiAgICAgICAgICBsb3dlciA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGxvd2VyID09PSB1bmRlZmluZWQgJiYgdXBwZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBsb3dlciA9IDA7XG4gICAgICAgIHVwcGVyID0gMTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBsb3dlciA9IHRvRmluaXRlKGxvd2VyKTtcbiAgICAgICAgaWYgKHVwcGVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB1cHBlciA9IGxvd2VyO1xuICAgICAgICAgIGxvd2VyID0gMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB1cHBlciA9IHRvRmluaXRlKHVwcGVyKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGxvd2VyID4gdXBwZXIpIHtcbiAgICAgICAgdmFyIHRlbXAgPSBsb3dlcjtcbiAgICAgICAgbG93ZXIgPSB1cHBlcjtcbiAgICAgICAgdXBwZXIgPSB0ZW1wO1xuICAgICAgfVxuICAgICAgaWYgKGZsb2F0aW5nIHx8IGxvd2VyICUgMSB8fCB1cHBlciAlIDEpIHtcbiAgICAgICAgdmFyIHJhbmQgPSBuYXRpdmVSYW5kb20oKTtcbiAgICAgICAgcmV0dXJuIG5hdGl2ZU1pbihsb3dlciArIChyYW5kICogKHVwcGVyIC0gbG93ZXIgKyBmcmVlUGFyc2VGbG9hdCgnMWUtJyArICgocmFuZCArICcnKS5sZW5ndGggLSAxKSkpKSwgdXBwZXIpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VSYW5kb20obG93ZXIsIHVwcGVyKTtcbiAgICB9XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgc3RyaW5nYCB0byBbY2FtZWwgY2FzZV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ2FtZWxDYXNlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNhbWVsIGNhc2VkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5jYW1lbENhc2UoJ0ZvbyBCYXInKTtcbiAgICAgKiAvLyA9PiAnZm9vQmFyJ1xuICAgICAqXG4gICAgICogXy5jYW1lbENhc2UoJy0tZm9vLWJhci0tJyk7XG4gICAgICogLy8gPT4gJ2Zvb0JhcidcbiAgICAgKlxuICAgICAqIF8uY2FtZWxDYXNlKCdfX0ZPT19CQVJfXycpO1xuICAgICAqIC8vID0+ICdmb29CYXInXG4gICAgICovXG4gICAgdmFyIGNhbWVsQ2FzZSA9IGNyZWF0ZUNvbXBvdW5kZXIoZnVuY3Rpb24ocmVzdWx0LCB3b3JkLCBpbmRleCkge1xuICAgICAgd29yZCA9IHdvcmQudG9Mb3dlckNhc2UoKTtcbiAgICAgIHJldHVybiByZXN1bHQgKyAoaW5kZXggPyBjYXBpdGFsaXplKHdvcmQpIDogd29yZCk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyB0aGUgZmlyc3QgY2hhcmFjdGVyIG9mIGBzdHJpbmdgIHRvIHVwcGVyIGNhc2UgYW5kIHRoZSByZW1haW5pbmdcbiAgICAgKiB0byBsb3dlciBjYXNlLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNhcGl0YWxpemUuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY2FwaXRhbGl6ZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmNhcGl0YWxpemUoJ0ZSRUQnKTtcbiAgICAgKiAvLyA9PiAnRnJlZCdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjYXBpdGFsaXplKHN0cmluZykge1xuICAgICAgcmV0dXJuIHVwcGVyRmlyc3QodG9TdHJpbmcoc3RyaW5nKS50b0xvd2VyQ2FzZSgpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEZWJ1cnJzIGBzdHJpbmdgIGJ5IGNvbnZlcnRpbmdcbiAgICAgKiBbTGF0aW4tMSBTdXBwbGVtZW50XShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9MYXRpbi0xX1N1cHBsZW1lbnRfKFVuaWNvZGVfYmxvY2spI0NoYXJhY3Rlcl90YWJsZSlcbiAgICAgKiBhbmQgW0xhdGluIEV4dGVuZGVkLUFdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0xhdGluX0V4dGVuZGVkLUEpXG4gICAgICogbGV0dGVycyB0byBiYXNpYyBMYXRpbiBsZXR0ZXJzIGFuZCByZW1vdmluZ1xuICAgICAqIFtjb21iaW5pbmcgZGlhY3JpdGljYWwgbWFya3NdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0NvbWJpbmluZ19EaWFjcml0aWNhbF9NYXJrcykuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gZGVidXJyLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGRlYnVycmVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kZWJ1cnIoJ2TDqWrDoCB2dScpO1xuICAgICAqIC8vID0+ICdkZWphIHZ1J1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGRlYnVycihzdHJpbmcpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICByZXR1cm4gc3RyaW5nICYmIHN0cmluZy5yZXBsYWNlKHJlTGF0aW4sIGRlYnVyckxldHRlcikucmVwbGFjZShyZUNvbWJvTWFyaywgJycpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgc3RyaW5nYCBlbmRzIHdpdGggdGhlIGdpdmVuIHRhcmdldCBzdHJpbmcuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3RhcmdldF0gVGhlIHN0cmluZyB0byBzZWFyY2ggZm9yLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbcG9zaXRpb249c3RyaW5nLmxlbmd0aF0gVGhlIHBvc2l0aW9uIHRvIHNlYXJjaCB1cCB0by5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHN0cmluZ2AgZW5kcyB3aXRoIGB0YXJnZXRgLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZW5kc1dpdGgoJ2FiYycsICdjJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5lbmRzV2l0aCgnYWJjJywgJ2InKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5lbmRzV2l0aCgnYWJjJywgJ2InLCAyKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gZW5kc1dpdGgoc3RyaW5nLCB0YXJnZXQsIHBvc2l0aW9uKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgdGFyZ2V0ID0gYmFzZVRvU3RyaW5nKHRhcmdldCk7XG5cbiAgICAgIHZhciBsZW5ndGggPSBzdHJpbmcubGVuZ3RoO1xuICAgICAgcG9zaXRpb24gPSBwb3NpdGlvbiA9PT0gdW5kZWZpbmVkXG4gICAgICAgID8gbGVuZ3RoXG4gICAgICAgIDogYmFzZUNsYW1wKHRvSW50ZWdlcihwb3NpdGlvbiksIDAsIGxlbmd0aCk7XG5cbiAgICAgIHZhciBlbmQgPSBwb3NpdGlvbjtcbiAgICAgIHBvc2l0aW9uIC09IHRhcmdldC5sZW5ndGg7XG4gICAgICByZXR1cm4gcG9zaXRpb24gPj0gMCAmJiBzdHJpbmcuc2xpY2UocG9zaXRpb24sIGVuZCkgPT0gdGFyZ2V0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIHRoZSBjaGFyYWN0ZXJzIFwiJlwiLCBcIjxcIiwgXCI+XCIsICdcIicsIGFuZCBcIidcIiBpbiBgc3RyaW5nYCB0byB0aGVpclxuICAgICAqIGNvcnJlc3BvbmRpbmcgSFRNTCBlbnRpdGllcy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBObyBvdGhlciBjaGFyYWN0ZXJzIGFyZSBlc2NhcGVkLiBUbyBlc2NhcGUgYWRkaXRpb25hbFxuICAgICAqIGNoYXJhY3RlcnMgdXNlIGEgdGhpcmQtcGFydHkgbGlicmFyeSBsaWtlIFtfaGVfXShodHRwczovL210aHMuYmUvaGUpLlxuICAgICAqXG4gICAgICogVGhvdWdoIHRoZSBcIj5cIiBjaGFyYWN0ZXIgaXMgZXNjYXBlZCBmb3Igc3ltbWV0cnksIGNoYXJhY3RlcnMgbGlrZVxuICAgICAqIFwiPlwiIGFuZCBcIi9cIiBkb24ndCBuZWVkIGVzY2FwaW5nIGluIEhUTUwgYW5kIGhhdmUgbm8gc3BlY2lhbCBtZWFuaW5nXG4gICAgICogdW5sZXNzIHRoZXkncmUgcGFydCBvZiBhIHRhZyBvciB1bnF1b3RlZCBhdHRyaWJ1dGUgdmFsdWUuIFNlZVxuICAgICAqIFtNYXRoaWFzIEJ5bmVucydzIGFydGljbGVdKGh0dHBzOi8vbWF0aGlhc2J5bmVucy5iZS9ub3Rlcy9hbWJpZ3VvdXMtYW1wZXJzYW5kcylcbiAgICAgKiAodW5kZXIgXCJzZW1pLXJlbGF0ZWQgZnVuIGZhY3RcIikgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKlxuICAgICAqIFdoZW4gd29ya2luZyB3aXRoIEhUTUwgeW91IHNob3VsZCBhbHdheXNcbiAgICAgKiBbcXVvdGUgYXR0cmlidXRlIHZhbHVlc10oaHR0cDovL3dvbmtvLmNvbS9wb3N0L2h0bWwtZXNjYXBpbmcpIHRvIHJlZHVjZVxuICAgICAqIFhTUyB2ZWN0b3JzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGVzY2FwZS5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBlc2NhcGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5lc2NhcGUoJ2ZyZWQsIGJhcm5leSwgJiBwZWJibGVzJyk7XG4gICAgICogLy8gPT4gJ2ZyZWQsIGJhcm5leSwgJmFtcDsgcGViYmxlcydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBlc2NhcGUoc3RyaW5nKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgcmV0dXJuIChzdHJpbmcgJiYgcmVIYXNVbmVzY2FwZWRIdG1sLnRlc3Qoc3RyaW5nKSlcbiAgICAgICAgPyBzdHJpbmcucmVwbGFjZShyZVVuZXNjYXBlZEh0bWwsIGVzY2FwZUh0bWxDaGFyKVxuICAgICAgICA6IHN0cmluZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFc2NhcGVzIHRoZSBgUmVnRXhwYCBzcGVjaWFsIGNoYXJhY3RlcnMgXCJeXCIsIFwiJFwiLCBcIlxcXCIsIFwiLlwiLCBcIipcIiwgXCIrXCIsXG4gICAgICogXCI/XCIsIFwiKFwiLCBcIilcIiwgXCJbXCIsIFwiXVwiLCBcIntcIiwgXCJ9XCIsIGFuZCBcInxcIiBpbiBgc3RyaW5nYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBlc2NhcGUuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgZXNjYXBlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZXNjYXBlUmVnRXhwKCdbbG9kYXNoXShodHRwczovL2xvZGFzaC5jb20vKScpO1xuICAgICAqIC8vID0+ICdcXFtsb2Rhc2hcXF1cXChodHRwczovL2xvZGFzaFxcLmNvbS9cXCknXG4gICAgICovXG4gICAgZnVuY3Rpb24gZXNjYXBlUmVnRXhwKHN0cmluZykge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIHJldHVybiAoc3RyaW5nICYmIHJlSGFzUmVnRXhwQ2hhci50ZXN0KHN0cmluZykpXG4gICAgICAgID8gc3RyaW5nLnJlcGxhY2UocmVSZWdFeHBDaGFyLCAnXFxcXCQmJylcbiAgICAgICAgOiBzdHJpbmc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHN0cmluZ2AgdG9cbiAgICAgKiBba2ViYWIgY2FzZV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTGV0dGVyX2Nhc2UjU3BlY2lhbF9jYXNlX3N0eWxlcykuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBrZWJhYiBjYXNlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ua2ViYWJDYXNlKCdGb28gQmFyJyk7XG4gICAgICogLy8gPT4gJ2Zvby1iYXInXG4gICAgICpcbiAgICAgKiBfLmtlYmFiQ2FzZSgnZm9vQmFyJyk7XG4gICAgICogLy8gPT4gJ2Zvby1iYXInXG4gICAgICpcbiAgICAgKiBfLmtlYmFiQ2FzZSgnX19GT09fQkFSX18nKTtcbiAgICAgKiAvLyA9PiAnZm9vLWJhcidcbiAgICAgKi9cbiAgICB2YXIga2ViYWJDYXNlID0gY3JlYXRlQ29tcG91bmRlcihmdW5jdGlvbihyZXN1bHQsIHdvcmQsIGluZGV4KSB7XG4gICAgICByZXR1cm4gcmVzdWx0ICsgKGluZGV4ID8gJy0nIDogJycpICsgd29yZC50b0xvd2VyQ2FzZSgpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHN0cmluZ2AsIGFzIHNwYWNlIHNlcGFyYXRlZCB3b3JkcywgdG8gbG93ZXIgY2FzZS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGxvd2VyIGNhc2VkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5sb3dlckNhc2UoJy0tRm9vLUJhci0tJyk7XG4gICAgICogLy8gPT4gJ2ZvbyBiYXInXG4gICAgICpcbiAgICAgKiBfLmxvd2VyQ2FzZSgnZm9vQmFyJyk7XG4gICAgICogLy8gPT4gJ2ZvbyBiYXInXG4gICAgICpcbiAgICAgKiBfLmxvd2VyQ2FzZSgnX19GT09fQkFSX18nKTtcbiAgICAgKiAvLyA9PiAnZm9vIGJhcidcbiAgICAgKi9cbiAgICB2YXIgbG93ZXJDYXNlID0gY3JlYXRlQ29tcG91bmRlcihmdW5jdGlvbihyZXN1bHQsIHdvcmQsIGluZGV4KSB7XG4gICAgICByZXR1cm4gcmVzdWx0ICsgKGluZGV4ID8gJyAnIDogJycpICsgd29yZC50b0xvd2VyQ2FzZSgpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgdGhlIGZpcnN0IGNoYXJhY3RlciBvZiBgc3RyaW5nYCB0byBsb3dlciBjYXNlLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY29udmVydGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5sb3dlckZpcnN0KCdGcmVkJyk7XG4gICAgICogLy8gPT4gJ2ZyZWQnXG4gICAgICpcbiAgICAgKiBfLmxvd2VyRmlyc3QoJ0ZSRUQnKTtcbiAgICAgKiAvLyA9PiAnZlJFRCdcbiAgICAgKi9cbiAgICB2YXIgbG93ZXJGaXJzdCA9IGNyZWF0ZUNhc2VGaXJzdCgndG9Mb3dlckNhc2UnKTtcblxuICAgIC8qKlxuICAgICAqIFBhZHMgYHN0cmluZ2Agb24gdGhlIGxlZnQgYW5kIHJpZ2h0IHNpZGVzIGlmIGl0J3Mgc2hvcnRlciB0aGFuIGBsZW5ndGhgLlxuICAgICAqIFBhZGRpbmcgY2hhcmFjdGVycyBhcmUgdHJ1bmNhdGVkIGlmIHRoZXkgY2FuJ3QgYmUgZXZlbmx5IGRpdmlkZWQgYnkgYGxlbmd0aGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gcGFkLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbGVuZ3RoPTBdIFRoZSBwYWRkaW5nIGxlbmd0aC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2NoYXJzPScgJ10gVGhlIHN0cmluZyB1c2VkIGFzIHBhZGRpbmcuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgcGFkZGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5wYWQoJ2FiYycsIDgpO1xuICAgICAqIC8vID0+ICcgIGFiYyAgICdcbiAgICAgKlxuICAgICAqIF8ucGFkKCdhYmMnLCA4LCAnXy0nKTtcbiAgICAgKiAvLyA9PiAnXy1hYmNfLV8nXG4gICAgICpcbiAgICAgKiBfLnBhZCgnYWJjJywgMyk7XG4gICAgICogLy8gPT4gJ2FiYydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwYWQoc3RyaW5nLCBsZW5ndGgsIGNoYXJzKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgbGVuZ3RoID0gdG9JbnRlZ2VyKGxlbmd0aCk7XG5cbiAgICAgIHZhciBzdHJMZW5ndGggPSBsZW5ndGggPyBzdHJpbmdTaXplKHN0cmluZykgOiAwO1xuICAgICAgaWYgKCFsZW5ndGggfHwgc3RyTGVuZ3RoID49IGxlbmd0aCkge1xuICAgICAgICByZXR1cm4gc3RyaW5nO1xuICAgICAgfVxuICAgICAgdmFyIG1pZCA9IChsZW5ndGggLSBzdHJMZW5ndGgpIC8gMjtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIGNyZWF0ZVBhZGRpbmcobmF0aXZlRmxvb3IobWlkKSwgY2hhcnMpICtcbiAgICAgICAgc3RyaW5nICtcbiAgICAgICAgY3JlYXRlUGFkZGluZyhuYXRpdmVDZWlsKG1pZCksIGNoYXJzKVxuICAgICAgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQYWRzIGBzdHJpbmdgIG9uIHRoZSByaWdodCBzaWRlIGlmIGl0J3Mgc2hvcnRlciB0aGFuIGBsZW5ndGhgLiBQYWRkaW5nXG4gICAgICogY2hhcmFjdGVycyBhcmUgdHJ1bmNhdGVkIGlmIHRoZXkgZXhjZWVkIGBsZW5ndGhgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHBhZC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xlbmd0aD0wXSBUaGUgcGFkZGluZyBsZW5ndGguXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtjaGFycz0nICddIFRoZSBzdHJpbmcgdXNlZCBhcyBwYWRkaW5nLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHBhZGRlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucGFkRW5kKCdhYmMnLCA2KTtcbiAgICAgKiAvLyA9PiAnYWJjICAgJ1xuICAgICAqXG4gICAgICogXy5wYWRFbmQoJ2FiYycsIDYsICdfLScpO1xuICAgICAqIC8vID0+ICdhYmNfLV8nXG4gICAgICpcbiAgICAgKiBfLnBhZEVuZCgnYWJjJywgMyk7XG4gICAgICogLy8gPT4gJ2FiYydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwYWRFbmQoc3RyaW5nLCBsZW5ndGgsIGNoYXJzKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgbGVuZ3RoID0gdG9JbnRlZ2VyKGxlbmd0aCk7XG5cbiAgICAgIHZhciBzdHJMZW5ndGggPSBsZW5ndGggPyBzdHJpbmdTaXplKHN0cmluZykgOiAwO1xuICAgICAgcmV0dXJuIChsZW5ndGggJiYgc3RyTGVuZ3RoIDwgbGVuZ3RoKVxuICAgICAgICA/IChzdHJpbmcgKyBjcmVhdGVQYWRkaW5nKGxlbmd0aCAtIHN0ckxlbmd0aCwgY2hhcnMpKVxuICAgICAgICA6IHN0cmluZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQYWRzIGBzdHJpbmdgIG9uIHRoZSBsZWZ0IHNpZGUgaWYgaXQncyBzaG9ydGVyIHRoYW4gYGxlbmd0aGAuIFBhZGRpbmdcbiAgICAgKiBjaGFyYWN0ZXJzIGFyZSB0cnVuY2F0ZWQgaWYgdGhleSBleGNlZWQgYGxlbmd0aGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gcGFkLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbGVuZ3RoPTBdIFRoZSBwYWRkaW5nIGxlbmd0aC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2NoYXJzPScgJ10gVGhlIHN0cmluZyB1c2VkIGFzIHBhZGRpbmcuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgcGFkZGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5wYWRTdGFydCgnYWJjJywgNik7XG4gICAgICogLy8gPT4gJyAgIGFiYydcbiAgICAgKlxuICAgICAqIF8ucGFkU3RhcnQoJ2FiYycsIDYsICdfLScpO1xuICAgICAqIC8vID0+ICdfLV9hYmMnXG4gICAgICpcbiAgICAgKiBfLnBhZFN0YXJ0KCdhYmMnLCAzKTtcbiAgICAgKiAvLyA9PiAnYWJjJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHBhZFN0YXJ0KHN0cmluZywgbGVuZ3RoLCBjaGFycykge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIGxlbmd0aCA9IHRvSW50ZWdlcihsZW5ndGgpO1xuXG4gICAgICB2YXIgc3RyTGVuZ3RoID0gbGVuZ3RoID8gc3RyaW5nU2l6ZShzdHJpbmcpIDogMDtcbiAgICAgIHJldHVybiAobGVuZ3RoICYmIHN0ckxlbmd0aCA8IGxlbmd0aClcbiAgICAgICAgPyAoY3JlYXRlUGFkZGluZyhsZW5ndGggLSBzdHJMZW5ndGgsIGNoYXJzKSArIHN0cmluZylcbiAgICAgICAgOiBzdHJpbmc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHN0cmluZ2AgdG8gYW4gaW50ZWdlciBvZiB0aGUgc3BlY2lmaWVkIHJhZGl4LiBJZiBgcmFkaXhgIGlzXG4gICAgICogYHVuZGVmaW5lZGAgb3IgYDBgLCBhIGByYWRpeGAgb2YgYDEwYCBpcyB1c2VkIHVubGVzcyBgdmFsdWVgIGlzIGFcbiAgICAgKiBoZXhhZGVjaW1hbCwgaW4gd2hpY2ggY2FzZSBhIGByYWRpeGAgb2YgYDE2YCBpcyB1c2VkLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGFsaWducyB3aXRoIHRoZVxuICAgICAqIFtFUzUgaW1wbGVtZW50YXRpb25dKGh0dHBzOi8vZXM1LmdpdGh1Yi5pby8jeDE1LjEuMi4yKSBvZiBgcGFyc2VJbnRgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDEuMS4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbcmFkaXg9MTBdIFRoZSByYWRpeCB0byBpbnRlcnByZXQgYHZhbHVlYCBieS5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBpbnRlZ2VyLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnBhcnNlSW50KCcwOCcpO1xuICAgICAqIC8vID0+IDhcbiAgICAgKlxuICAgICAqIF8ubWFwKFsnNicsICcwOCcsICcxMCddLCBfLnBhcnNlSW50KTtcbiAgICAgKiAvLyA9PiBbNiwgOCwgMTBdXG4gICAgICovXG4gICAgZnVuY3Rpb24gcGFyc2VJbnQoc3RyaW5nLCByYWRpeCwgZ3VhcmQpIHtcbiAgICAgIGlmIChndWFyZCB8fCByYWRpeCA9PSBudWxsKSB7XG4gICAgICAgIHJhZGl4ID0gMDtcbiAgICAgIH0gZWxzZSBpZiAocmFkaXgpIHtcbiAgICAgICAgcmFkaXggPSArcmFkaXg7XG4gICAgICB9XG4gICAgICByZXR1cm4gbmF0aXZlUGFyc2VJbnQodG9TdHJpbmcoc3RyaW5nKS5yZXBsYWNlKHJlVHJpbVN0YXJ0LCAnJyksIHJhZGl4IHx8IDApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlcGVhdHMgdGhlIGdpdmVuIHN0cmluZyBgbmAgdGltZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gcmVwZWF0LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbj0xXSBUaGUgbnVtYmVyIG9mIHRpbWVzIHRvIHJlcGVhdCB0aGUgc3RyaW5nLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgcmVwZWF0ZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnJlcGVhdCgnKicsIDMpO1xuICAgICAqIC8vID0+ICcqKionXG4gICAgICpcbiAgICAgKiBfLnJlcGVhdCgnYWJjJywgMik7XG4gICAgICogLy8gPT4gJ2FiY2FiYydcbiAgICAgKlxuICAgICAqIF8ucmVwZWF0KCdhYmMnLCAwKTtcbiAgICAgKiAvLyA9PiAnJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlcGVhdChzdHJpbmcsIG4sIGd1YXJkKSB7XG4gICAgICBpZiAoKGd1YXJkID8gaXNJdGVyYXRlZUNhbGwoc3RyaW5nLCBuLCBndWFyZCkgOiBuID09PSB1bmRlZmluZWQpKSB7XG4gICAgICAgIG4gPSAxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbiA9IHRvSW50ZWdlcihuKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlUmVwZWF0KHRvU3RyaW5nKHN0cmluZyksIG4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlcGxhY2VzIG1hdGNoZXMgZm9yIGBwYXR0ZXJuYCBpbiBgc3RyaW5nYCB3aXRoIGByZXBsYWNlbWVudGAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgYmFzZWQgb25cbiAgICAgKiBbYFN0cmluZyNyZXBsYWNlYF0oaHR0cHM6Ly9tZG4uaW8vU3RyaW5nL3JlcGxhY2UpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge1JlZ0V4cHxzdHJpbmd9IHBhdHRlcm4gVGhlIHBhdHRlcm4gdG8gcmVwbGFjZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufHN0cmluZ30gcmVwbGFjZW1lbnQgVGhlIG1hdGNoIHJlcGxhY2VtZW50LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIG1vZGlmaWVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5yZXBsYWNlKCdIaSBGcmVkJywgJ0ZyZWQnLCAnQmFybmV5Jyk7XG4gICAgICogLy8gPT4gJ0hpIEJhcm5leSdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZXBsYWNlKCkge1xuICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHMsXG4gICAgICAgICAgc3RyaW5nID0gdG9TdHJpbmcoYXJnc1swXSk7XG5cbiAgICAgIHJldHVybiBhcmdzLmxlbmd0aCA8IDMgPyBzdHJpbmcgOiBzdHJpbmcucmVwbGFjZShhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgc3RyaW5nYCB0b1xuICAgICAqIFtzbmFrZSBjYXNlXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9TbmFrZV9jYXNlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHNuYWtlIGNhc2VkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zbmFrZUNhc2UoJ0ZvbyBCYXInKTtcbiAgICAgKiAvLyA9PiAnZm9vX2JhcidcbiAgICAgKlxuICAgICAqIF8uc25ha2VDYXNlKCdmb29CYXInKTtcbiAgICAgKiAvLyA9PiAnZm9vX2JhcidcbiAgICAgKlxuICAgICAqIF8uc25ha2VDYXNlKCctLUZPTy1CQVItLScpO1xuICAgICAqIC8vID0+ICdmb29fYmFyJ1xuICAgICAqL1xuICAgIHZhciBzbmFrZUNhc2UgPSBjcmVhdGVDb21wb3VuZGVyKGZ1bmN0aW9uKHJlc3VsdCwgd29yZCwgaW5kZXgpIHtcbiAgICAgIHJldHVybiByZXN1bHQgKyAoaW5kZXggPyAnXycgOiAnJykgKyB3b3JkLnRvTG93ZXJDYXNlKCk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBTcGxpdHMgYHN0cmluZ2AgYnkgYHNlcGFyYXRvcmAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgYmFzZWQgb25cbiAgICAgKiBbYFN0cmluZyNzcGxpdGBdKGh0dHBzOi8vbWRuLmlvL1N0cmluZy9zcGxpdCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gc3BsaXQuXG4gICAgICogQHBhcmFtIHtSZWdFeHB8c3RyaW5nfSBzZXBhcmF0b3IgVGhlIHNlcGFyYXRvciBwYXR0ZXJuIHRvIHNwbGl0IGJ5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbGltaXRdIFRoZSBsZW5ndGggdG8gdHJ1bmNhdGUgcmVzdWx0cyB0by5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHN0cmluZyBzZWdtZW50cy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zcGxpdCgnYS1iLWMnLCAnLScsIDIpO1xuICAgICAqIC8vID0+IFsnYScsICdiJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzcGxpdChzdHJpbmcsIHNlcGFyYXRvciwgbGltaXQpIHtcbiAgICAgIGlmIChsaW1pdCAmJiB0eXBlb2YgbGltaXQgIT0gJ251bWJlcicgJiYgaXNJdGVyYXRlZUNhbGwoc3RyaW5nLCBzZXBhcmF0b3IsIGxpbWl0KSkge1xuICAgICAgICBzZXBhcmF0b3IgPSBsaW1pdCA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIGxpbWl0ID0gbGltaXQgPT09IHVuZGVmaW5lZCA/IE1BWF9BUlJBWV9MRU5HVEggOiBsaW1pdCA+Pj4gMDtcbiAgICAgIGlmICghbGltaXQpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIGlmIChzdHJpbmcgJiYgKFxuICAgICAgICAgICAgdHlwZW9mIHNlcGFyYXRvciA9PSAnc3RyaW5nJyB8fFxuICAgICAgICAgICAgKHNlcGFyYXRvciAhPSBudWxsICYmICFpc1JlZ0V4cChzZXBhcmF0b3IpKVxuICAgICAgICAgICkpIHtcbiAgICAgICAgc2VwYXJhdG9yID0gYmFzZVRvU3RyaW5nKHNlcGFyYXRvcik7XG4gICAgICAgIGlmICghc2VwYXJhdG9yICYmIGhhc1VuaWNvZGUoc3RyaW5nKSkge1xuICAgICAgICAgIHJldHVybiBjYXN0U2xpY2Uoc3RyaW5nVG9BcnJheShzdHJpbmcpLCAwLCBsaW1pdCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBzdHJpbmcuc3BsaXQoc2VwYXJhdG9yLCBsaW1pdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHN0cmluZ2AgdG9cbiAgICAgKiBbc3RhcnQgY2FzZV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTGV0dGVyX2Nhc2UjU3R5bGlzdGljX29yX3NwZWNpYWxpc2VkX3VzYWdlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjEuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHN0YXJ0IGNhc2VkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zdGFydENhc2UoJy0tZm9vLWJhci0tJyk7XG4gICAgICogLy8gPT4gJ0ZvbyBCYXInXG4gICAgICpcbiAgICAgKiBfLnN0YXJ0Q2FzZSgnZm9vQmFyJyk7XG4gICAgICogLy8gPT4gJ0ZvbyBCYXInXG4gICAgICpcbiAgICAgKiBfLnN0YXJ0Q2FzZSgnX19GT09fQkFSX18nKTtcbiAgICAgKiAvLyA9PiAnRk9PIEJBUidcbiAgICAgKi9cbiAgICB2YXIgc3RhcnRDYXNlID0gY3JlYXRlQ29tcG91bmRlcihmdW5jdGlvbihyZXN1bHQsIHdvcmQsIGluZGV4KSB7XG4gICAgICByZXR1cm4gcmVzdWx0ICsgKGluZGV4ID8gJyAnIDogJycpICsgdXBwZXJGaXJzdCh3b3JkKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgc3RyaW5nYCBzdGFydHMgd2l0aCB0aGUgZ2l2ZW4gdGFyZ2V0IHN0cmluZy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbdGFyZ2V0XSBUaGUgc3RyaW5nIHRvIHNlYXJjaCBmb3IuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtwb3NpdGlvbj0wXSBUaGUgcG9zaXRpb24gdG8gc2VhcmNoIGZyb20uXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBzdHJpbmdgIHN0YXJ0cyB3aXRoIGB0YXJnZXRgLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc3RhcnRzV2l0aCgnYWJjJywgJ2EnKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLnN0YXJ0c1dpdGgoJ2FiYycsICdiJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uc3RhcnRzV2l0aCgnYWJjJywgJ2InLCAxKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3RhcnRzV2l0aChzdHJpbmcsIHRhcmdldCwgcG9zaXRpb24pIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICBwb3NpdGlvbiA9IHBvc2l0aW9uID09IG51bGxcbiAgICAgICAgPyAwXG4gICAgICAgIDogYmFzZUNsYW1wKHRvSW50ZWdlcihwb3NpdGlvbiksIDAsIHN0cmluZy5sZW5ndGgpO1xuXG4gICAgICB0YXJnZXQgPSBiYXNlVG9TdHJpbmcodGFyZ2V0KTtcbiAgICAgIHJldHVybiBzdHJpbmcuc2xpY2UocG9zaXRpb24sIHBvc2l0aW9uICsgdGFyZ2V0Lmxlbmd0aCkgPT0gdGFyZ2V0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjb21waWxlZCB0ZW1wbGF0ZSBmdW5jdGlvbiB0aGF0IGNhbiBpbnRlcnBvbGF0ZSBkYXRhIHByb3BlcnRpZXNcbiAgICAgKiBpbiBcImludGVycG9sYXRlXCIgZGVsaW1pdGVycywgSFRNTC1lc2NhcGUgaW50ZXJwb2xhdGVkIGRhdGEgcHJvcGVydGllcyBpblxuICAgICAqIFwiZXNjYXBlXCIgZGVsaW1pdGVycywgYW5kIGV4ZWN1dGUgSmF2YVNjcmlwdCBpbiBcImV2YWx1YXRlXCIgZGVsaW1pdGVycy4gRGF0YVxuICAgICAqIHByb3BlcnRpZXMgbWF5IGJlIGFjY2Vzc2VkIGFzIGZyZWUgdmFyaWFibGVzIGluIHRoZSB0ZW1wbGF0ZS4gSWYgYSBzZXR0aW5nXG4gICAgICogb2JqZWN0IGlzIGdpdmVuLCBpdCB0YWtlcyBwcmVjZWRlbmNlIG92ZXIgYF8udGVtcGxhdGVTZXR0aW5nc2AgdmFsdWVzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIEluIHRoZSBkZXZlbG9wbWVudCBidWlsZCBgXy50ZW1wbGF0ZWAgdXRpbGl6ZXNcbiAgICAgKiBbc291cmNlVVJMc10oaHR0cDovL3d3dy5odG1sNXJvY2tzLmNvbS9lbi90dXRvcmlhbHMvZGV2ZWxvcGVydG9vbHMvc291cmNlbWFwcy8jdG9jLXNvdXJjZXVybClcbiAgICAgKiBmb3IgZWFzaWVyIGRlYnVnZ2luZy5cbiAgICAgKlxuICAgICAqIEZvciBtb3JlIGluZm9ybWF0aW9uIG9uIHByZWNvbXBpbGluZyB0ZW1wbGF0ZXMgc2VlXG4gICAgICogW2xvZGFzaCdzIGN1c3RvbSBidWlsZHMgZG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9sb2Rhc2guY29tL2N1c3RvbS1idWlsZHMpLlxuICAgICAqXG4gICAgICogRm9yIG1vcmUgaW5mb3JtYXRpb24gb24gQ2hyb21lIGV4dGVuc2lvbiBzYW5kYm94ZXMgc2VlXG4gICAgICogW0Nocm9tZSdzIGV4dGVuc2lvbnMgZG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9kZXZlbG9wZXIuY2hyb21lLmNvbS9leHRlbnNpb25zL3NhbmRib3hpbmdFdmFsKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHRlbXBsYXRlIHN0cmluZy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnM9e31dIFRoZSBvcHRpb25zIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge1JlZ0V4cH0gW29wdGlvbnMuZXNjYXBlPV8udGVtcGxhdGVTZXR0aW5ncy5lc2NhcGVdXG4gICAgICogIFRoZSBIVE1MIFwiZXNjYXBlXCIgZGVsaW1pdGVyLlxuICAgICAqIEBwYXJhbSB7UmVnRXhwfSBbb3B0aW9ucy5ldmFsdWF0ZT1fLnRlbXBsYXRlU2V0dGluZ3MuZXZhbHVhdGVdXG4gICAgICogIFRoZSBcImV2YWx1YXRlXCIgZGVsaW1pdGVyLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucy5pbXBvcnRzPV8udGVtcGxhdGVTZXR0aW5ncy5pbXBvcnRzXVxuICAgICAqICBBbiBvYmplY3QgdG8gaW1wb3J0IGludG8gdGhlIHRlbXBsYXRlIGFzIGZyZWUgdmFyaWFibGVzLlxuICAgICAqIEBwYXJhbSB7UmVnRXhwfSBbb3B0aW9ucy5pbnRlcnBvbGF0ZT1fLnRlbXBsYXRlU2V0dGluZ3MuaW50ZXJwb2xhdGVdXG4gICAgICogIFRoZSBcImludGVycG9sYXRlXCIgZGVsaW1pdGVyLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5zb3VyY2VVUkw9J2xvZGFzaC50ZW1wbGF0ZVNvdXJjZXNbbl0nXVxuICAgICAqICBUaGUgc291cmNlVVJMIG9mIHRoZSBjb21waWxlZCB0ZW1wbGF0ZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMudmFyaWFibGU9J29iaiddXG4gICAgICogIFRoZSBkYXRhIG9iamVjdCB2YXJpYWJsZSBuYW1lLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBjb21waWxlZCB0ZW1wbGF0ZSBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogLy8gVXNlIHRoZSBcImludGVycG9sYXRlXCIgZGVsaW1pdGVyIHRvIGNyZWF0ZSBhIGNvbXBpbGVkIHRlbXBsYXRlLlxuICAgICAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUoJ2hlbGxvIDwlPSB1c2VyICU+IScpO1xuICAgICAqIGNvbXBpbGVkKHsgJ3VzZXInOiAnZnJlZCcgfSk7XG4gICAgICogLy8gPT4gJ2hlbGxvIGZyZWQhJ1xuICAgICAqXG4gICAgICogLy8gVXNlIHRoZSBIVE1MIFwiZXNjYXBlXCIgZGVsaW1pdGVyIHRvIGVzY2FwZSBkYXRhIHByb3BlcnR5IHZhbHVlcy5cbiAgICAgKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKCc8Yj48JS0gdmFsdWUgJT48L2I+Jyk7XG4gICAgICogY29tcGlsZWQoeyAndmFsdWUnOiAnPHNjcmlwdD4nIH0pO1xuICAgICAqIC8vID0+ICc8Yj4mbHQ7c2NyaXB0Jmd0OzwvYj4nXG4gICAgICpcbiAgICAgKiAvLyBVc2UgdGhlIFwiZXZhbHVhdGVcIiBkZWxpbWl0ZXIgdG8gZXhlY3V0ZSBKYXZhU2NyaXB0IGFuZCBnZW5lcmF0ZSBIVE1MLlxuICAgICAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUoJzwlIF8uZm9yRWFjaCh1c2VycywgZnVuY3Rpb24odXNlcikgeyAlPjxsaT48JS0gdXNlciAlPjwvbGk+PCUgfSk7ICU+Jyk7XG4gICAgICogY29tcGlsZWQoeyAndXNlcnMnOiBbJ2ZyZWQnLCAnYmFybmV5J10gfSk7XG4gICAgICogLy8gPT4gJzxsaT5mcmVkPC9saT48bGk+YmFybmV5PC9saT4nXG4gICAgICpcbiAgICAgKiAvLyBVc2UgdGhlIGludGVybmFsIGBwcmludGAgZnVuY3Rpb24gaW4gXCJldmFsdWF0ZVwiIGRlbGltaXRlcnMuXG4gICAgICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSgnPCUgcHJpbnQoXCJoZWxsbyBcIiArIHVzZXIpOyAlPiEnKTtcbiAgICAgKiBjb21waWxlZCh7ICd1c2VyJzogJ2Jhcm5leScgfSk7XG4gICAgICogLy8gPT4gJ2hlbGxvIGJhcm5leSEnXG4gICAgICpcbiAgICAgKiAvLyBVc2UgdGhlIEVTIHRlbXBsYXRlIGxpdGVyYWwgZGVsaW1pdGVyIGFzIGFuIFwiaW50ZXJwb2xhdGVcIiBkZWxpbWl0ZXIuXG4gICAgICogLy8gRGlzYWJsZSBzdXBwb3J0IGJ5IHJlcGxhY2luZyB0aGUgXCJpbnRlcnBvbGF0ZVwiIGRlbGltaXRlci5cbiAgICAgKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKCdoZWxsbyAkeyB1c2VyIH0hJyk7XG4gICAgICogY29tcGlsZWQoeyAndXNlcic6ICdwZWJibGVzJyB9KTtcbiAgICAgKiAvLyA9PiAnaGVsbG8gcGViYmxlcyEnXG4gICAgICpcbiAgICAgKiAvLyBVc2UgYmFja3NsYXNoZXMgdG8gdHJlYXQgZGVsaW1pdGVycyBhcyBwbGFpbiB0ZXh0LlxuICAgICAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUoJzwlPSBcIlxcXFw8JS0gdmFsdWUgJVxcXFw+XCIgJT4nKTtcbiAgICAgKiBjb21waWxlZCh7ICd2YWx1ZSc6ICdpZ25vcmVkJyB9KTtcbiAgICAgKiAvLyA9PiAnPCUtIHZhbHVlICU+J1xuICAgICAqXG4gICAgICogLy8gVXNlIHRoZSBgaW1wb3J0c2Agb3B0aW9uIHRvIGltcG9ydCBgalF1ZXJ5YCBhcyBganFgLlxuICAgICAqIHZhciB0ZXh0ID0gJzwlIGpxLmVhY2godXNlcnMsIGZ1bmN0aW9uKHVzZXIpIHsgJT48bGk+PCUtIHVzZXIgJT48L2xpPjwlIH0pOyAlPic7XG4gICAgICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSh0ZXh0LCB7ICdpbXBvcnRzJzogeyAnanEnOiBqUXVlcnkgfSB9KTtcbiAgICAgKiBjb21waWxlZCh7ICd1c2Vycyc6IFsnZnJlZCcsICdiYXJuZXknXSB9KTtcbiAgICAgKiAvLyA9PiAnPGxpPmZyZWQ8L2xpPjxsaT5iYXJuZXk8L2xpPidcbiAgICAgKlxuICAgICAqIC8vIFVzZSB0aGUgYHNvdXJjZVVSTGAgb3B0aW9uIHRvIHNwZWNpZnkgYSBjdXN0b20gc291cmNlVVJMIGZvciB0aGUgdGVtcGxhdGUuXG4gICAgICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSgnaGVsbG8gPCU9IHVzZXIgJT4hJywgeyAnc291cmNlVVJMJzogJy9iYXNpYy9ncmVldGluZy5qc3QnIH0pO1xuICAgICAqIGNvbXBpbGVkKGRhdGEpO1xuICAgICAqIC8vID0+IEZpbmQgdGhlIHNvdXJjZSBvZiBcImdyZWV0aW5nLmpzdFwiIHVuZGVyIHRoZSBTb3VyY2VzIHRhYiBvciBSZXNvdXJjZXMgcGFuZWwgb2YgdGhlIHdlYiBpbnNwZWN0b3IuXG4gICAgICpcbiAgICAgKiAvLyBVc2UgdGhlIGB2YXJpYWJsZWAgb3B0aW9uIHRvIGVuc3VyZSBhIHdpdGgtc3RhdGVtZW50IGlzbid0IHVzZWQgaW4gdGhlIGNvbXBpbGVkIHRlbXBsYXRlLlxuICAgICAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUoJ2hpIDwlPSBkYXRhLnVzZXIgJT4hJywgeyAndmFyaWFibGUnOiAnZGF0YScgfSk7XG4gICAgICogY29tcGlsZWQuc291cmNlO1xuICAgICAqIC8vID0+IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgKiAvLyAgIHZhciBfX3QsIF9fcCA9ICcnO1xuICAgICAqIC8vICAgX19wICs9ICdoaSAnICsgKChfX3QgPSAoIGRhdGEudXNlciApKSA9PSBudWxsID8gJycgOiBfX3QpICsgJyEnO1xuICAgICAqIC8vICAgcmV0dXJuIF9fcDtcbiAgICAgKiAvLyB9XG4gICAgICpcbiAgICAgKiAvLyBVc2UgY3VzdG9tIHRlbXBsYXRlIGRlbGltaXRlcnMuXG4gICAgICogXy50ZW1wbGF0ZVNldHRpbmdzLmludGVycG9sYXRlID0gL3t7KFtcXHNcXFNdKz8pfX0vZztcbiAgICAgKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKCdoZWxsbyB7eyB1c2VyIH19IScpO1xuICAgICAqIGNvbXBpbGVkKHsgJ3VzZXInOiAnbXVzdGFjaGUnIH0pO1xuICAgICAqIC8vID0+ICdoZWxsbyBtdXN0YWNoZSEnXG4gICAgICpcbiAgICAgKiAvLyBVc2UgdGhlIGBzb3VyY2VgIHByb3BlcnR5IHRvIGlubGluZSBjb21waWxlZCB0ZW1wbGF0ZXMgZm9yIG1lYW5pbmdmdWxcbiAgICAgKiAvLyBsaW5lIG51bWJlcnMgaW4gZXJyb3IgbWVzc2FnZXMgYW5kIHN0YWNrIHRyYWNlcy5cbiAgICAgKiBmcy53cml0ZUZpbGVTeW5jKHBhdGguam9pbihwcm9jZXNzLmN3ZCgpLCAnanN0LmpzJyksICdcXFxuICAgICAqICAgdmFyIEpTVCA9IHtcXFxuICAgICAqICAgICBcIm1haW5cIjogJyArIF8udGVtcGxhdGUobWFpblRleHQpLnNvdXJjZSArICdcXFxuICAgICAqICAgfTtcXFxuICAgICAqICcpO1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRlbXBsYXRlKHN0cmluZywgb3B0aW9ucywgZ3VhcmQpIHtcbiAgICAgIC8vIEJhc2VkIG9uIEpvaG4gUmVzaWcncyBgdG1wbGAgaW1wbGVtZW50YXRpb25cbiAgICAgIC8vIChodHRwOi8vZWpvaG4ub3JnL2Jsb2cvamF2YXNjcmlwdC1taWNyby10ZW1wbGF0aW5nLylcbiAgICAgIC8vIGFuZCBMYXVyYSBEb2t0b3JvdmEncyBkb1QuanMgKGh0dHBzOi8vZ2l0aHViLmNvbS9vbGFkby9kb1QpLlxuICAgICAgdmFyIHNldHRpbmdzID0gbG9kYXNoLnRlbXBsYXRlU2V0dGluZ3M7XG5cbiAgICAgIGlmIChndWFyZCAmJiBpc0l0ZXJhdGVlQ2FsbChzdHJpbmcsIG9wdGlvbnMsIGd1YXJkKSkge1xuICAgICAgICBvcHRpb25zID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIG9wdGlvbnMgPSBhc3NpZ25JbldpdGgoe30sIG9wdGlvbnMsIHNldHRpbmdzLCBjdXN0b21EZWZhdWx0c0Fzc2lnbkluKTtcblxuICAgICAgdmFyIGltcG9ydHMgPSBhc3NpZ25JbldpdGgoe30sIG9wdGlvbnMuaW1wb3J0cywgc2V0dGluZ3MuaW1wb3J0cywgY3VzdG9tRGVmYXVsdHNBc3NpZ25JbiksXG4gICAgICAgICAgaW1wb3J0c0tleXMgPSBrZXlzKGltcG9ydHMpLFxuICAgICAgICAgIGltcG9ydHNWYWx1ZXMgPSBiYXNlVmFsdWVzKGltcG9ydHMsIGltcG9ydHNLZXlzKTtcblxuICAgICAgdmFyIGlzRXNjYXBpbmcsXG4gICAgICAgICAgaXNFdmFsdWF0aW5nLFxuICAgICAgICAgIGluZGV4ID0gMCxcbiAgICAgICAgICBpbnRlcnBvbGF0ZSA9IG9wdGlvbnMuaW50ZXJwb2xhdGUgfHwgcmVOb01hdGNoLFxuICAgICAgICAgIHNvdXJjZSA9IFwiX19wICs9ICdcIjtcblxuICAgICAgLy8gQ29tcGlsZSB0aGUgcmVnZXhwIHRvIG1hdGNoIGVhY2ggZGVsaW1pdGVyLlxuICAgICAgdmFyIHJlRGVsaW1pdGVycyA9IFJlZ0V4cChcbiAgICAgICAgKG9wdGlvbnMuZXNjYXBlIHx8IHJlTm9NYXRjaCkuc291cmNlICsgJ3wnICtcbiAgICAgICAgaW50ZXJwb2xhdGUuc291cmNlICsgJ3wnICtcbiAgICAgICAgKGludGVycG9sYXRlID09PSByZUludGVycG9sYXRlID8gcmVFc1RlbXBsYXRlIDogcmVOb01hdGNoKS5zb3VyY2UgKyAnfCcgK1xuICAgICAgICAob3B0aW9ucy5ldmFsdWF0ZSB8fCByZU5vTWF0Y2gpLnNvdXJjZSArICd8JCdcbiAgICAgICwgJ2cnKTtcblxuICAgICAgLy8gVXNlIGEgc291cmNlVVJMIGZvciBlYXNpZXIgZGVidWdnaW5nLlxuICAgICAgLy8gVGhlIHNvdXJjZVVSTCBnZXRzIGluamVjdGVkIGludG8gdGhlIHNvdXJjZSB0aGF0J3MgZXZhbC1lZCwgc28gYmUgY2FyZWZ1bFxuICAgICAgLy8gd2l0aCBsb29rdXAgKGluIGNhc2Ugb2YgZS5nLiBwcm90b3R5cGUgcG9sbHV0aW9uKSwgYW5kIHN0cmlwIG5ld2xpbmVzIGlmIGFueS5cbiAgICAgIC8vIEEgbmV3bGluZSB3b3VsZG4ndCBiZSBhIHZhbGlkIHNvdXJjZVVSTCBhbnl3YXksIGFuZCBpdCdkIGVuYWJsZSBjb2RlIGluamVjdGlvbi5cbiAgICAgIHZhciBzb3VyY2VVUkwgPSAnLy8jIHNvdXJjZVVSTD0nICtcbiAgICAgICAgKGhhc093blByb3BlcnR5LmNhbGwob3B0aW9ucywgJ3NvdXJjZVVSTCcpXG4gICAgICAgICAgPyAob3B0aW9ucy5zb3VyY2VVUkwgKyAnJykucmVwbGFjZSgvW1xcclxcbl0vZywgJyAnKVxuICAgICAgICAgIDogKCdsb2Rhc2gudGVtcGxhdGVTb3VyY2VzWycgKyAoKyt0ZW1wbGF0ZUNvdW50ZXIpICsgJ10nKVxuICAgICAgICApICsgJ1xcbic7XG5cbiAgICAgIHN0cmluZy5yZXBsYWNlKHJlRGVsaW1pdGVycywgZnVuY3Rpb24obWF0Y2gsIGVzY2FwZVZhbHVlLCBpbnRlcnBvbGF0ZVZhbHVlLCBlc1RlbXBsYXRlVmFsdWUsIGV2YWx1YXRlVmFsdWUsIG9mZnNldCkge1xuICAgICAgICBpbnRlcnBvbGF0ZVZhbHVlIHx8IChpbnRlcnBvbGF0ZVZhbHVlID0gZXNUZW1wbGF0ZVZhbHVlKTtcblxuICAgICAgICAvLyBFc2NhcGUgY2hhcmFjdGVycyB0aGF0IGNhbid0IGJlIGluY2x1ZGVkIGluIHN0cmluZyBsaXRlcmFscy5cbiAgICAgICAgc291cmNlICs9IHN0cmluZy5zbGljZShpbmRleCwgb2Zmc2V0KS5yZXBsYWNlKHJlVW5lc2NhcGVkU3RyaW5nLCBlc2NhcGVTdHJpbmdDaGFyKTtcblxuICAgICAgICAvLyBSZXBsYWNlIGRlbGltaXRlcnMgd2l0aCBzbmlwcGV0cy5cbiAgICAgICAgaWYgKGVzY2FwZVZhbHVlKSB7XG4gICAgICAgICAgaXNFc2NhcGluZyA9IHRydWU7XG4gICAgICAgICAgc291cmNlICs9IFwiJyArXFxuX19lKFwiICsgZXNjYXBlVmFsdWUgKyBcIikgK1xcbidcIjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZXZhbHVhdGVWYWx1ZSkge1xuICAgICAgICAgIGlzRXZhbHVhdGluZyA9IHRydWU7XG4gICAgICAgICAgc291cmNlICs9IFwiJztcXG5cIiArIGV2YWx1YXRlVmFsdWUgKyBcIjtcXG5fX3AgKz0gJ1wiO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpbnRlcnBvbGF0ZVZhbHVlKSB7XG4gICAgICAgICAgc291cmNlICs9IFwiJyArXFxuKChfX3QgPSAoXCIgKyBpbnRlcnBvbGF0ZVZhbHVlICsgXCIpKSA9PSBudWxsID8gJycgOiBfX3QpICtcXG4nXCI7XG4gICAgICAgIH1cbiAgICAgICAgaW5kZXggPSBvZmZzZXQgKyBtYXRjaC5sZW5ndGg7XG5cbiAgICAgICAgLy8gVGhlIEpTIGVuZ2luZSBlbWJlZGRlZCBpbiBBZG9iZSBwcm9kdWN0cyBuZWVkcyBgbWF0Y2hgIHJldHVybmVkIGluXG4gICAgICAgIC8vIG9yZGVyIHRvIHByb2R1Y2UgdGhlIGNvcnJlY3QgYG9mZnNldGAgdmFsdWUuXG4gICAgICAgIHJldHVybiBtYXRjaDtcbiAgICAgIH0pO1xuXG4gICAgICBzb3VyY2UgKz0gXCInO1xcblwiO1xuXG4gICAgICAvLyBJZiBgdmFyaWFibGVgIGlzIG5vdCBzcGVjaWZpZWQgd3JhcCBhIHdpdGgtc3RhdGVtZW50IGFyb3VuZCB0aGUgZ2VuZXJhdGVkXG4gICAgICAvLyBjb2RlIHRvIGFkZCB0aGUgZGF0YSBvYmplY3QgdG8gdGhlIHRvcCBvZiB0aGUgc2NvcGUgY2hhaW4uXG4gICAgICAvLyBMaWtlIHdpdGggc291cmNlVVJMLCB3ZSB0YWtlIGNhcmUgdG8gbm90IGNoZWNrIHRoZSBvcHRpb24ncyBwcm90b3R5cGUsXG4gICAgICAvLyBhcyB0aGlzIGNvbmZpZ3VyYXRpb24gaXMgYSBjb2RlIGluamVjdGlvbiB2ZWN0b3IuXG4gICAgICB2YXIgdmFyaWFibGUgPSBoYXNPd25Qcm9wZXJ0eS5jYWxsKG9wdGlvbnMsICd2YXJpYWJsZScpICYmIG9wdGlvbnMudmFyaWFibGU7XG4gICAgICBpZiAoIXZhcmlhYmxlKSB7XG4gICAgICAgIHNvdXJjZSA9ICd3aXRoIChvYmopIHtcXG4nICsgc291cmNlICsgJ1xcbn1cXG4nO1xuICAgICAgfVxuICAgICAgLy8gQ2xlYW51cCBjb2RlIGJ5IHN0cmlwcGluZyBlbXB0eSBzdHJpbmdzLlxuICAgICAgc291cmNlID0gKGlzRXZhbHVhdGluZyA/IHNvdXJjZS5yZXBsYWNlKHJlRW1wdHlTdHJpbmdMZWFkaW5nLCAnJykgOiBzb3VyY2UpXG4gICAgICAgIC5yZXBsYWNlKHJlRW1wdHlTdHJpbmdNaWRkbGUsICckMScpXG4gICAgICAgIC5yZXBsYWNlKHJlRW1wdHlTdHJpbmdUcmFpbGluZywgJyQxOycpO1xuXG4gICAgICAvLyBGcmFtZSBjb2RlIGFzIHRoZSBmdW5jdGlvbiBib2R5LlxuICAgICAgc291cmNlID0gJ2Z1bmN0aW9uKCcgKyAodmFyaWFibGUgfHwgJ29iaicpICsgJykge1xcbicgK1xuICAgICAgICAodmFyaWFibGVcbiAgICAgICAgICA/ICcnXG4gICAgICAgICAgOiAnb2JqIHx8IChvYmogPSB7fSk7XFxuJ1xuICAgICAgICApICtcbiAgICAgICAgXCJ2YXIgX190LCBfX3AgPSAnJ1wiICtcbiAgICAgICAgKGlzRXNjYXBpbmdcbiAgICAgICAgICAgPyAnLCBfX2UgPSBfLmVzY2FwZSdcbiAgICAgICAgICAgOiAnJ1xuICAgICAgICApICtcbiAgICAgICAgKGlzRXZhbHVhdGluZ1xuICAgICAgICAgID8gJywgX19qID0gQXJyYXkucHJvdG90eXBlLmpvaW47XFxuJyArXG4gICAgICAgICAgICBcImZ1bmN0aW9uIHByaW50KCkgeyBfX3AgKz0gX19qLmNhbGwoYXJndW1lbnRzLCAnJykgfVxcblwiXG4gICAgICAgICAgOiAnO1xcbidcbiAgICAgICAgKSArXG4gICAgICAgIHNvdXJjZSArXG4gICAgICAgICdyZXR1cm4gX19wXFxufSc7XG5cbiAgICAgIHZhciByZXN1bHQgPSBhdHRlbXB0KGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gRnVuY3Rpb24oaW1wb3J0c0tleXMsIHNvdXJjZVVSTCArICdyZXR1cm4gJyArIHNvdXJjZSlcbiAgICAgICAgICAuYXBwbHkodW5kZWZpbmVkLCBpbXBvcnRzVmFsdWVzKTtcbiAgICAgIH0pO1xuXG4gICAgICAvLyBQcm92aWRlIHRoZSBjb21waWxlZCBmdW5jdGlvbidzIHNvdXJjZSBieSBpdHMgYHRvU3RyaW5nYCBtZXRob2Qgb3JcbiAgICAgIC8vIHRoZSBgc291cmNlYCBwcm9wZXJ0eSBhcyBhIGNvbnZlbmllbmNlIGZvciBpbmxpbmluZyBjb21waWxlZCB0ZW1wbGF0ZXMuXG4gICAgICByZXN1bHQuc291cmNlID0gc291cmNlO1xuICAgICAgaWYgKGlzRXJyb3IocmVzdWx0KSkge1xuICAgICAgICB0aHJvdyByZXN1bHQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBzdHJpbmdgLCBhcyBhIHdob2xlLCB0byBsb3dlciBjYXNlIGp1c3QgbGlrZVxuICAgICAqIFtTdHJpbmcjdG9Mb3dlckNhc2VdKGh0dHBzOi8vbWRuLmlvL3RvTG93ZXJDYXNlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGxvd2VyIGNhc2VkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50b0xvd2VyKCctLUZvby1CYXItLScpO1xuICAgICAqIC8vID0+ICctLWZvby1iYXItLSdcbiAgICAgKlxuICAgICAqIF8udG9Mb3dlcignZm9vQmFyJyk7XG4gICAgICogLy8gPT4gJ2Zvb2JhcidcbiAgICAgKlxuICAgICAqIF8udG9Mb3dlcignX19GT09fQkFSX18nKTtcbiAgICAgKiAvLyA9PiAnX19mb29fYmFyX18nXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9Mb3dlcih2YWx1ZSkge1xuICAgICAgcmV0dXJuIHRvU3RyaW5nKHZhbHVlKS50b0xvd2VyQ2FzZSgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBzdHJpbmdgLCBhcyBhIHdob2xlLCB0byB1cHBlciBjYXNlIGp1c3QgbGlrZVxuICAgICAqIFtTdHJpbmcjdG9VcHBlckNhc2VdKGh0dHBzOi8vbWRuLmlvL3RvVXBwZXJDYXNlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHVwcGVyIGNhc2VkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50b1VwcGVyKCctLWZvby1iYXItLScpO1xuICAgICAqIC8vID0+ICctLUZPTy1CQVItLSdcbiAgICAgKlxuICAgICAqIF8udG9VcHBlcignZm9vQmFyJyk7XG4gICAgICogLy8gPT4gJ0ZPT0JBUidcbiAgICAgKlxuICAgICAqIF8udG9VcHBlcignX19mb29fYmFyX18nKTtcbiAgICAgKiAvLyA9PiAnX19GT09fQkFSX18nXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9VcHBlcih2YWx1ZSkge1xuICAgICAgcmV0dXJuIHRvU3RyaW5nKHZhbHVlKS50b1VwcGVyQ2FzZSgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgbGVhZGluZyBhbmQgdHJhaWxpbmcgd2hpdGVzcGFjZSBvciBzcGVjaWZpZWQgY2hhcmFjdGVycyBmcm9tIGBzdHJpbmdgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHRyaW0uXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtjaGFycz13aGl0ZXNwYWNlXSBUaGUgY2hhcmFjdGVycyB0byB0cmltLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdHJpbW1lZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udHJpbSgnICBhYmMgICcpO1xuICAgICAqIC8vID0+ICdhYmMnXG4gICAgICpcbiAgICAgKiBfLnRyaW0oJy1fLWFiYy1fLScsICdfLScpO1xuICAgICAqIC8vID0+ICdhYmMnXG4gICAgICpcbiAgICAgKiBfLm1hcChbJyAgZm9vICAnLCAnICBiYXIgICddLCBfLnRyaW0pO1xuICAgICAqIC8vID0+IFsnZm9vJywgJ2JhciddXG4gICAgICovXG4gICAgZnVuY3Rpb24gdHJpbShzdHJpbmcsIGNoYXJzLCBndWFyZCkge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIGlmIChzdHJpbmcgJiYgKGd1YXJkIHx8IGNoYXJzID09PSB1bmRlZmluZWQpKSB7XG4gICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZShyZVRyaW0sICcnKTtcbiAgICAgIH1cbiAgICAgIGlmICghc3RyaW5nIHx8ICEoY2hhcnMgPSBiYXNlVG9TdHJpbmcoY2hhcnMpKSkge1xuICAgICAgICByZXR1cm4gc3RyaW5nO1xuICAgICAgfVxuICAgICAgdmFyIHN0clN5bWJvbHMgPSBzdHJpbmdUb0FycmF5KHN0cmluZyksXG4gICAgICAgICAgY2hyU3ltYm9scyA9IHN0cmluZ1RvQXJyYXkoY2hhcnMpLFxuICAgICAgICAgIHN0YXJ0ID0gY2hhcnNTdGFydEluZGV4KHN0clN5bWJvbHMsIGNoclN5bWJvbHMpLFxuICAgICAgICAgIGVuZCA9IGNoYXJzRW5kSW5kZXgoc3RyU3ltYm9scywgY2hyU3ltYm9scykgKyAxO1xuXG4gICAgICByZXR1cm4gY2FzdFNsaWNlKHN0clN5bWJvbHMsIHN0YXJ0LCBlbmQpLmpvaW4oJycpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgdHJhaWxpbmcgd2hpdGVzcGFjZSBvciBzcGVjaWZpZWQgY2hhcmFjdGVycyBmcm9tIGBzdHJpbmdgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHRyaW0uXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtjaGFycz13aGl0ZXNwYWNlXSBUaGUgY2hhcmFjdGVycyB0byB0cmltLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdHJpbW1lZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udHJpbUVuZCgnICBhYmMgICcpO1xuICAgICAqIC8vID0+ICcgIGFiYydcbiAgICAgKlxuICAgICAqIF8udHJpbUVuZCgnLV8tYWJjLV8tJywgJ18tJyk7XG4gICAgICogLy8gPT4gJy1fLWFiYydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0cmltRW5kKHN0cmluZywgY2hhcnMsIGd1YXJkKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgaWYgKHN0cmluZyAmJiAoZ3VhcmQgfHwgY2hhcnMgPT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKHJlVHJpbUVuZCwgJycpO1xuICAgICAgfVxuICAgICAgaWYgKCFzdHJpbmcgfHwgIShjaGFycyA9IGJhc2VUb1N0cmluZyhjaGFycykpKSB7XG4gICAgICAgIHJldHVybiBzdHJpbmc7XG4gICAgICB9XG4gICAgICB2YXIgc3RyU3ltYm9scyA9IHN0cmluZ1RvQXJyYXkoc3RyaW5nKSxcbiAgICAgICAgICBlbmQgPSBjaGFyc0VuZEluZGV4KHN0clN5bWJvbHMsIHN0cmluZ1RvQXJyYXkoY2hhcnMpKSArIDE7XG5cbiAgICAgIHJldHVybiBjYXN0U2xpY2Uoc3RyU3ltYm9scywgMCwgZW5kKS5qb2luKCcnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGxlYWRpbmcgd2hpdGVzcGFjZSBvciBzcGVjaWZpZWQgY2hhcmFjdGVycyBmcm9tIGBzdHJpbmdgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHRyaW0uXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtjaGFycz13aGl0ZXNwYWNlXSBUaGUgY2hhcmFjdGVycyB0byB0cmltLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdHJpbW1lZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udHJpbVN0YXJ0KCcgIGFiYyAgJyk7XG4gICAgICogLy8gPT4gJ2FiYyAgJ1xuICAgICAqXG4gICAgICogXy50cmltU3RhcnQoJy1fLWFiYy1fLScsICdfLScpO1xuICAgICAqIC8vID0+ICdhYmMtXy0nXG4gICAgICovXG4gICAgZnVuY3Rpb24gdHJpbVN0YXJ0KHN0cmluZywgY2hhcnMsIGd1YXJkKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgaWYgKHN0cmluZyAmJiAoZ3VhcmQgfHwgY2hhcnMgPT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKHJlVHJpbVN0YXJ0LCAnJyk7XG4gICAgICB9XG4gICAgICBpZiAoIXN0cmluZyB8fCAhKGNoYXJzID0gYmFzZVRvU3RyaW5nKGNoYXJzKSkpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZztcbiAgICAgIH1cbiAgICAgIHZhciBzdHJTeW1ib2xzID0gc3RyaW5nVG9BcnJheShzdHJpbmcpLFxuICAgICAgICAgIHN0YXJ0ID0gY2hhcnNTdGFydEluZGV4KHN0clN5bWJvbHMsIHN0cmluZ1RvQXJyYXkoY2hhcnMpKTtcblxuICAgICAgcmV0dXJuIGNhc3RTbGljZShzdHJTeW1ib2xzLCBzdGFydCkuam9pbignJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVHJ1bmNhdGVzIGBzdHJpbmdgIGlmIGl0J3MgbG9uZ2VyIHRoYW4gdGhlIGdpdmVuIG1heGltdW0gc3RyaW5nIGxlbmd0aC5cbiAgICAgKiBUaGUgbGFzdCBjaGFyYWN0ZXJzIG9mIHRoZSB0cnVuY2F0ZWQgc3RyaW5nIGFyZSByZXBsYWNlZCB3aXRoIHRoZSBvbWlzc2lvblxuICAgICAqIHN0cmluZyB3aGljaCBkZWZhdWx0cyB0byBcIi4uLlwiLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHRydW5jYXRlLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucz17fV0gVGhlIG9wdGlvbnMgb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5sZW5ndGg9MzBdIFRoZSBtYXhpbXVtIHN0cmluZyBsZW5ndGguXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLm9taXNzaW9uPScuLi4nXSBUaGUgc3RyaW5nIHRvIGluZGljYXRlIHRleHQgaXMgb21pdHRlZC5cbiAgICAgKiBAcGFyYW0ge1JlZ0V4cHxzdHJpbmd9IFtvcHRpb25zLnNlcGFyYXRvcl0gVGhlIHNlcGFyYXRvciBwYXR0ZXJuIHRvIHRydW5jYXRlIHRvLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHRydW5jYXRlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udHJ1bmNhdGUoJ2hpLWRpZGRseS1obyB0aGVyZSwgbmVpZ2hib3Jpbm8nKTtcbiAgICAgKiAvLyA9PiAnaGktZGlkZGx5LWhvIHRoZXJlLCBuZWlnaGJvLi4uJ1xuICAgICAqXG4gICAgICogXy50cnVuY2F0ZSgnaGktZGlkZGx5LWhvIHRoZXJlLCBuZWlnaGJvcmlubycsIHtcbiAgICAgKiAgICdsZW5ndGgnOiAyNCxcbiAgICAgKiAgICdzZXBhcmF0b3InOiAnICdcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiAnaGktZGlkZGx5LWhvIHRoZXJlLC4uLidcbiAgICAgKlxuICAgICAqIF8udHJ1bmNhdGUoJ2hpLWRpZGRseS1obyB0aGVyZSwgbmVpZ2hib3Jpbm8nLCB7XG4gICAgICogICAnbGVuZ3RoJzogMjQsXG4gICAgICogICAnc2VwYXJhdG9yJzogLyw/ICsvXG4gICAgICogfSk7XG4gICAgICogLy8gPT4gJ2hpLWRpZGRseS1obyB0aGVyZS4uLidcbiAgICAgKlxuICAgICAqIF8udHJ1bmNhdGUoJ2hpLWRpZGRseS1obyB0aGVyZSwgbmVpZ2hib3Jpbm8nLCB7XG4gICAgICogICAnb21pc3Npb24nOiAnIFsuLi5dJ1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+ICdoaS1kaWRkbHktaG8gdGhlcmUsIG5laWcgWy4uLl0nXG4gICAgICovXG4gICAgZnVuY3Rpb24gdHJ1bmNhdGUoc3RyaW5nLCBvcHRpb25zKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gREVGQVVMVF9UUlVOQ19MRU5HVEgsXG4gICAgICAgICAgb21pc3Npb24gPSBERUZBVUxUX1RSVU5DX09NSVNTSU9OO1xuXG4gICAgICBpZiAoaXNPYmplY3Qob3B0aW9ucykpIHtcbiAgICAgICAgdmFyIHNlcGFyYXRvciA9ICdzZXBhcmF0b3InIGluIG9wdGlvbnMgPyBvcHRpb25zLnNlcGFyYXRvciA6IHNlcGFyYXRvcjtcbiAgICAgICAgbGVuZ3RoID0gJ2xlbmd0aCcgaW4gb3B0aW9ucyA/IHRvSW50ZWdlcihvcHRpb25zLmxlbmd0aCkgOiBsZW5ndGg7XG4gICAgICAgIG9taXNzaW9uID0gJ29taXNzaW9uJyBpbiBvcHRpb25zID8gYmFzZVRvU3RyaW5nKG9wdGlvbnMub21pc3Npb24pIDogb21pc3Npb247XG4gICAgICB9XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuXG4gICAgICB2YXIgc3RyTGVuZ3RoID0gc3RyaW5nLmxlbmd0aDtcbiAgICAgIGlmIChoYXNVbmljb2RlKHN0cmluZykpIHtcbiAgICAgICAgdmFyIHN0clN5bWJvbHMgPSBzdHJpbmdUb0FycmF5KHN0cmluZyk7XG4gICAgICAgIHN0ckxlbmd0aCA9IHN0clN5bWJvbHMubGVuZ3RoO1xuICAgICAgfVxuICAgICAgaWYgKGxlbmd0aCA+PSBzdHJMZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZztcbiAgICAgIH1cbiAgICAgIHZhciBlbmQgPSBsZW5ndGggLSBzdHJpbmdTaXplKG9taXNzaW9uKTtcbiAgICAgIGlmIChlbmQgPCAxKSB7XG4gICAgICAgIHJldHVybiBvbWlzc2lvbjtcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHQgPSBzdHJTeW1ib2xzXG4gICAgICAgID8gY2FzdFNsaWNlKHN0clN5bWJvbHMsIDAsIGVuZCkuam9pbignJylcbiAgICAgICAgOiBzdHJpbmcuc2xpY2UoMCwgZW5kKTtcblxuICAgICAgaWYgKHNlcGFyYXRvciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQgKyBvbWlzc2lvbjtcbiAgICAgIH1cbiAgICAgIGlmIChzdHJTeW1ib2xzKSB7XG4gICAgICAgIGVuZCArPSAocmVzdWx0Lmxlbmd0aCAtIGVuZCk7XG4gICAgICB9XG4gICAgICBpZiAoaXNSZWdFeHAoc2VwYXJhdG9yKSkge1xuICAgICAgICBpZiAoc3RyaW5nLnNsaWNlKGVuZCkuc2VhcmNoKHNlcGFyYXRvcikpIHtcbiAgICAgICAgICB2YXIgbWF0Y2gsXG4gICAgICAgICAgICAgIHN1YnN0cmluZyA9IHJlc3VsdDtcblxuICAgICAgICAgIGlmICghc2VwYXJhdG9yLmdsb2JhbCkge1xuICAgICAgICAgICAgc2VwYXJhdG9yID0gUmVnRXhwKHNlcGFyYXRvci5zb3VyY2UsIHRvU3RyaW5nKHJlRmxhZ3MuZXhlYyhzZXBhcmF0b3IpKSArICdnJyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHNlcGFyYXRvci5sYXN0SW5kZXggPSAwO1xuICAgICAgICAgIHdoaWxlICgobWF0Y2ggPSBzZXBhcmF0b3IuZXhlYyhzdWJzdHJpbmcpKSkge1xuICAgICAgICAgICAgdmFyIG5ld0VuZCA9IG1hdGNoLmluZGV4O1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXN1bHQgPSByZXN1bHQuc2xpY2UoMCwgbmV3RW5kID09PSB1bmRlZmluZWQgPyBlbmQgOiBuZXdFbmQpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHN0cmluZy5pbmRleE9mKGJhc2VUb1N0cmluZyhzZXBhcmF0b3IpLCBlbmQpICE9IGVuZCkge1xuICAgICAgICB2YXIgaW5kZXggPSByZXN1bHQubGFzdEluZGV4T2Yoc2VwYXJhdG9yKTtcbiAgICAgICAgaWYgKGluZGV4ID4gLTEpIHtcbiAgICAgICAgICByZXN1bHQgPSByZXN1bHQuc2xpY2UoMCwgaW5kZXgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0ICsgb21pc3Npb247XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGludmVyc2Ugb2YgYF8uZXNjYXBlYDsgdGhpcyBtZXRob2QgY29udmVydHMgdGhlIEhUTUwgZW50aXRpZXNcbiAgICAgKiBgJmFtcDtgLCBgJmx0O2AsIGAmZ3Q7YCwgYCZxdW90O2AsIGFuZCBgJiMzOTtgIGluIGBzdHJpbmdgIHRvXG4gICAgICogdGhlaXIgY29ycmVzcG9uZGluZyBjaGFyYWN0ZXJzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIE5vIG90aGVyIEhUTUwgZW50aXRpZXMgYXJlIHVuZXNjYXBlZC4gVG8gdW5lc2NhcGUgYWRkaXRpb25hbFxuICAgICAqIEhUTUwgZW50aXRpZXMgdXNlIGEgdGhpcmQtcGFydHkgbGlicmFyeSBsaWtlIFtfaGVfXShodHRwczovL210aHMuYmUvaGUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuNi4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHVuZXNjYXBlLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHVuZXNjYXBlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udW5lc2NhcGUoJ2ZyZWQsIGJhcm5leSwgJmFtcDsgcGViYmxlcycpO1xuICAgICAqIC8vID0+ICdmcmVkLCBiYXJuZXksICYgcGViYmxlcydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1bmVzY2FwZShzdHJpbmcpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICByZXR1cm4gKHN0cmluZyAmJiByZUhhc0VzY2FwZWRIdG1sLnRlc3Qoc3RyaW5nKSlcbiAgICAgICAgPyBzdHJpbmcucmVwbGFjZShyZUVzY2FwZWRIdG1sLCB1bmVzY2FwZUh0bWxDaGFyKVxuICAgICAgICA6IHN0cmluZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgc3RyaW5nYCwgYXMgc3BhY2Ugc2VwYXJhdGVkIHdvcmRzLCB0byB1cHBlciBjYXNlLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdXBwZXIgY2FzZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnVwcGVyQ2FzZSgnLS1mb28tYmFyJyk7XG4gICAgICogLy8gPT4gJ0ZPTyBCQVInXG4gICAgICpcbiAgICAgKiBfLnVwcGVyQ2FzZSgnZm9vQmFyJyk7XG4gICAgICogLy8gPT4gJ0ZPTyBCQVInXG4gICAgICpcbiAgICAgKiBfLnVwcGVyQ2FzZSgnX19mb29fYmFyX18nKTtcbiAgICAgKiAvLyA9PiAnRk9PIEJBUidcbiAgICAgKi9cbiAgICB2YXIgdXBwZXJDYXNlID0gY3JlYXRlQ29tcG91bmRlcihmdW5jdGlvbihyZXN1bHQsIHdvcmQsIGluZGV4KSB7XG4gICAgICByZXR1cm4gcmVzdWx0ICsgKGluZGV4ID8gJyAnIDogJycpICsgd29yZC50b1VwcGVyQ2FzZSgpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgdGhlIGZpcnN0IGNoYXJhY3RlciBvZiBgc3RyaW5nYCB0byB1cHBlciBjYXNlLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY29udmVydGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy51cHBlckZpcnN0KCdmcmVkJyk7XG4gICAgICogLy8gPT4gJ0ZyZWQnXG4gICAgICpcbiAgICAgKiBfLnVwcGVyRmlyc3QoJ0ZSRUQnKTtcbiAgICAgKiAvLyA9PiAnRlJFRCdcbiAgICAgKi9cbiAgICB2YXIgdXBwZXJGaXJzdCA9IGNyZWF0ZUNhc2VGaXJzdCgndG9VcHBlckNhc2UnKTtcblxuICAgIC8qKlxuICAgICAqIFNwbGl0cyBgc3RyaW5nYCBpbnRvIGFuIGFycmF5IG9mIGl0cyB3b3Jkcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7UmVnRXhwfHN0cmluZ30gW3BhdHRlcm5dIFRoZSBwYXR0ZXJuIHRvIG1hdGNoIHdvcmRzLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSB3b3JkcyBvZiBgc3RyaW5nYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy53b3JkcygnZnJlZCwgYmFybmV5LCAmIHBlYmJsZXMnKTtcbiAgICAgKiAvLyA9PiBbJ2ZyZWQnLCAnYmFybmV5JywgJ3BlYmJsZXMnXVxuICAgICAqXG4gICAgICogXy53b3JkcygnZnJlZCwgYmFybmV5LCAmIHBlYmJsZXMnLCAvW14sIF0rL2cpO1xuICAgICAqIC8vID0+IFsnZnJlZCcsICdiYXJuZXknLCAnJicsICdwZWJibGVzJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3b3JkcyhzdHJpbmcsIHBhdHRlcm4sIGd1YXJkKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgcGF0dGVybiA9IGd1YXJkID8gdW5kZWZpbmVkIDogcGF0dGVybjtcblxuICAgICAgaWYgKHBhdHRlcm4gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gaGFzVW5pY29kZVdvcmQoc3RyaW5nKSA/IHVuaWNvZGVXb3JkcyhzdHJpbmcpIDogYXNjaWlXb3JkcyhzdHJpbmcpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHN0cmluZy5tYXRjaChwYXR0ZXJuKSB8fCBbXTtcbiAgICB9XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBBdHRlbXB0cyB0byBpbnZva2UgYGZ1bmNgLCByZXR1cm5pbmcgZWl0aGVyIHRoZSByZXN1bHQgb3IgdGhlIGNhdWdodCBlcnJvclxuICAgICAqIG9iamVjdC4gQW55IGFkZGl0aW9uYWwgYXJndW1lbnRzIGFyZSBwcm92aWRlZCB0byBgZnVuY2Agd2hlbiBpdCdzIGludm9rZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGF0dGVtcHQuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbYXJnc10gVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgYGZ1bmNgIHdpdGguXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGBmdW5jYCByZXN1bHQgb3IgZXJyb3Igb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiAvLyBBdm9pZCB0aHJvd2luZyBlcnJvcnMgZm9yIGludmFsaWQgc2VsZWN0b3JzLlxuICAgICAqIHZhciBlbGVtZW50cyA9IF8uYXR0ZW1wdChmdW5jdGlvbihzZWxlY3Rvcikge1xuICAgICAqICAgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpO1xuICAgICAqIH0sICc+Xz4nKTtcbiAgICAgKlxuICAgICAqIGlmIChfLmlzRXJyb3IoZWxlbWVudHMpKSB7XG4gICAgICogICBlbGVtZW50cyA9IFtdO1xuICAgICAqIH1cbiAgICAgKi9cbiAgICB2YXIgYXR0ZW1wdCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGZ1bmMsIGFyZ3MpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBhcHBseShmdW5jLCB1bmRlZmluZWQsIGFyZ3MpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICByZXR1cm4gaXNFcnJvcihlKSA/IGUgOiBuZXcgRXJyb3IoZSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBCaW5kcyBtZXRob2RzIG9mIGFuIG9iamVjdCB0byB0aGUgb2JqZWN0IGl0c2VsZiwgb3ZlcndyaXRpbmcgdGhlIGV4aXN0aW5nXG4gICAgICogbWV0aG9kLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGRvZXNuJ3Qgc2V0IHRoZSBcImxlbmd0aFwiIHByb3BlcnR5IG9mIGJvdW5kIGZ1bmN0aW9ucy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGJpbmQgYW5kIGFzc2lnbiB0aGUgYm91bmQgbWV0aG9kcyB0by5cbiAgICAgKiBAcGFyYW0gey4uLihzdHJpbmd8c3RyaW5nW10pfSBtZXRob2ROYW1lcyBUaGUgb2JqZWN0IG1ldGhvZCBuYW1lcyB0byBiaW5kLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB2aWV3ID0ge1xuICAgICAqICAgJ2xhYmVsJzogJ2RvY3MnLFxuICAgICAqICAgJ2NsaWNrJzogZnVuY3Rpb24oKSB7XG4gICAgICogICAgIGNvbnNvbGUubG9nKCdjbGlja2VkICcgKyB0aGlzLmxhYmVsKTtcbiAgICAgKiAgIH1cbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogXy5iaW5kQWxsKHZpZXcsIFsnY2xpY2snXSk7XG4gICAgICogalF1ZXJ5KGVsZW1lbnQpLm9uKCdjbGljaycsIHZpZXcuY2xpY2spO1xuICAgICAqIC8vID0+IExvZ3MgJ2NsaWNrZWQgZG9jcycgd2hlbiBjbGlja2VkLlxuICAgICAqL1xuICAgIHZhciBiaW5kQWxsID0gZmxhdFJlc3QoZnVuY3Rpb24ob2JqZWN0LCBtZXRob2ROYW1lcykge1xuICAgICAgYXJyYXlFYWNoKG1ldGhvZE5hbWVzLCBmdW5jdGlvbihrZXkpIHtcbiAgICAgICAga2V5ID0gdG9LZXkoa2V5KTtcbiAgICAgICAgYmFzZUFzc2lnblZhbHVlKG9iamVjdCwga2V5LCBiaW5kKG9iamVjdFtrZXldLCBvYmplY3QpKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGl0ZXJhdGVzIG92ZXIgYHBhaXJzYCBhbmQgaW52b2tlcyB0aGUgY29ycmVzcG9uZGluZ1xuICAgICAqIGZ1bmN0aW9uIG9mIHRoZSBmaXJzdCBwcmVkaWNhdGUgdG8gcmV0dXJuIHRydXRoeS4gVGhlIHByZWRpY2F0ZS1mdW5jdGlvblxuICAgICAqIHBhaXJzIGFyZSBpbnZva2VkIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIGFuZCBhcmd1bWVudHMgb2YgdGhlIGNyZWF0ZWRcbiAgICAgKiBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtBcnJheX0gcGFpcnMgVGhlIHByZWRpY2F0ZS1mdW5jdGlvbiBwYWlycy5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjb21wb3NpdGUgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBmdW5jID0gXy5jb25kKFtcbiAgICAgKiAgIFtfLm1hdGNoZXMoeyAnYSc6IDEgfSksICAgICAgICAgICBfLmNvbnN0YW50KCdtYXRjaGVzIEEnKV0sXG4gICAgICogICBbXy5jb25mb3Jtcyh7ICdiJzogXy5pc051bWJlciB9KSwgXy5jb25zdGFudCgnbWF0Y2hlcyBCJyldLFxuICAgICAqICAgW18uc3R1YlRydWUsICAgICAgICAgICAgICAgICAgICAgIF8uY29uc3RhbnQoJ25vIG1hdGNoJyldXG4gICAgICogXSk7XG4gICAgICpcbiAgICAgKiBmdW5jKHsgJ2EnOiAxLCAnYic6IDIgfSk7XG4gICAgICogLy8gPT4gJ21hdGNoZXMgQSdcbiAgICAgKlxuICAgICAqIGZ1bmMoeyAnYSc6IDAsICdiJzogMSB9KTtcbiAgICAgKiAvLyA9PiAnbWF0Y2hlcyBCJ1xuICAgICAqXG4gICAgICogZnVuYyh7ICdhJzogJzEnLCAnYic6ICcyJyB9KTtcbiAgICAgKiAvLyA9PiAnbm8gbWF0Y2gnXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29uZChwYWlycykge1xuICAgICAgdmFyIGxlbmd0aCA9IHBhaXJzID09IG51bGwgPyAwIDogcGFpcnMubGVuZ3RoLFxuICAgICAgICAgIHRvSXRlcmF0ZWUgPSBnZXRJdGVyYXRlZSgpO1xuXG4gICAgICBwYWlycyA9ICFsZW5ndGggPyBbXSA6IGFycmF5TWFwKHBhaXJzLCBmdW5jdGlvbihwYWlyKSB7XG4gICAgICAgIGlmICh0eXBlb2YgcGFpclsxXSAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBbdG9JdGVyYXRlZShwYWlyWzBdKSwgcGFpclsxXV07XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIGJhc2VSZXN0KGZ1bmN0aW9uKGFyZ3MpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gLTE7XG4gICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgdmFyIHBhaXIgPSBwYWlyc1tpbmRleF07XG4gICAgICAgICAgaWYgKGFwcGx5KHBhaXJbMF0sIHRoaXMsIGFyZ3MpKSB7XG4gICAgICAgICAgICByZXR1cm4gYXBwbHkocGFpclsxXSwgdGhpcywgYXJncyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIHRoZSBwcmVkaWNhdGUgcHJvcGVydGllcyBvZiBgc291cmNlYCB3aXRoXG4gICAgICogdGhlIGNvcnJlc3BvbmRpbmcgcHJvcGVydHkgdmFsdWVzIG9mIGEgZ2l2ZW4gb2JqZWN0LCByZXR1cm5pbmcgYHRydWVgIGlmXG4gICAgICogYWxsIHByZWRpY2F0ZXMgcmV0dXJuIHRydXRoeSwgZWxzZSBgZmFsc2VgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoZSBjcmVhdGVkIGZ1bmN0aW9uIGlzIGVxdWl2YWxlbnQgdG8gYF8uY29uZm9ybXNUb2Agd2l0aFxuICAgICAqIGBzb3VyY2VgIHBhcnRpYWxseSBhcHBsaWVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgcHJvcGVydHkgcHJlZGljYXRlcyB0byBjb25mb3JtIHRvLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNwZWMgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW1xuICAgICAqICAgeyAnYSc6IDIsICdiJzogMSB9LFxuICAgICAqICAgeyAnYSc6IDEsICdiJzogMiB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8uZmlsdGVyKG9iamVjdHMsIF8uY29uZm9ybXMoeyAnYic6IGZ1bmN0aW9uKG4pIHsgcmV0dXJuIG4gPiAxOyB9IH0pKTtcbiAgICAgKiAvLyA9PiBbeyAnYSc6IDEsICdiJzogMiB9XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbmZvcm1zKHNvdXJjZSkge1xuICAgICAgcmV0dXJuIGJhc2VDb25mb3JtcyhiYXNlQ2xvbmUoc291cmNlLCBDTE9ORV9ERUVQX0ZMQUcpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi40LjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHJldHVybiBmcm9tIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY29uc3RhbnQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gXy50aW1lcygyLCBfLmNvbnN0YW50KHsgJ2EnOiAxIH0pKTtcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKG9iamVjdHMpO1xuICAgICAqIC8vID0+IFt7ICdhJzogMSB9LCB7ICdhJzogMSB9XVxuICAgICAqXG4gICAgICogY29uc29sZS5sb2cob2JqZWN0c1swXSA9PT0gb2JqZWN0c1sxXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbnN0YW50KHZhbHVlKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGB2YWx1ZWAgdG8gZGV0ZXJtaW5lIHdoZXRoZXIgYSBkZWZhdWx0IHZhbHVlIHNob3VsZCBiZSByZXR1cm5lZCBpblxuICAgICAqIGl0cyBwbGFjZS4gVGhlIGBkZWZhdWx0VmFsdWVgIGlzIHJldHVybmVkIGlmIGB2YWx1ZWAgaXMgYE5hTmAsIGBudWxsYCxcbiAgICAgKiBvciBgdW5kZWZpbmVkYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjE0LjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEBwYXJhbSB7Kn0gZGVmYXVsdFZhbHVlIFRoZSBkZWZhdWx0IHZhbHVlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXNvbHZlZCB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kZWZhdWx0VG8oMSwgMTApO1xuICAgICAqIC8vID0+IDFcbiAgICAgKlxuICAgICAqIF8uZGVmYXVsdFRvKHVuZGVmaW5lZCwgMTApO1xuICAgICAqIC8vID0+IDEwXG4gICAgICovXG4gICAgZnVuY3Rpb24gZGVmYXVsdFRvKHZhbHVlLCBkZWZhdWx0VmFsdWUpIHtcbiAgICAgIHJldHVybiAodmFsdWUgPT0gbnVsbCB8fCB2YWx1ZSAhPT0gdmFsdWUpID8gZGVmYXVsdFZhbHVlIDogdmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGUgcmVzdWx0IG9mIGludm9raW5nIHRoZSBnaXZlbiBmdW5jdGlvbnNcbiAgICAgKiB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBvZiB0aGUgY3JlYXRlZCBmdW5jdGlvbiwgd2hlcmUgZWFjaCBzdWNjZXNzaXZlXG4gICAgICogaW52b2NhdGlvbiBpcyBzdXBwbGllZCB0aGUgcmV0dXJuIHZhbHVlIG9mIHRoZSBwcmV2aW91cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHsuLi4oRnVuY3Rpb258RnVuY3Rpb25bXSl9IFtmdW5jc10gVGhlIGZ1bmN0aW9ucyB0byBpbnZva2UuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY29tcG9zaXRlIGZ1bmN0aW9uLlxuICAgICAqIEBzZWUgXy5mbG93UmlnaHRcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gc3F1YXJlKG4pIHtcbiAgICAgKiAgIHJldHVybiBuICogbjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgYWRkU3F1YXJlID0gXy5mbG93KFtfLmFkZCwgc3F1YXJlXSk7XG4gICAgICogYWRkU3F1YXJlKDEsIDIpO1xuICAgICAqIC8vID0+IDlcbiAgICAgKi9cbiAgICB2YXIgZmxvdyA9IGNyZWF0ZUZsb3coKTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZmxvd2AgZXhjZXB0IHRoYXQgaXQgY3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXRcbiAgICAgKiBpbnZva2VzIHRoZSBnaXZlbiBmdW5jdGlvbnMgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0gey4uLihGdW5jdGlvbnxGdW5jdGlvbltdKX0gW2Z1bmNzXSBUaGUgZnVuY3Rpb25zIHRvIGludm9rZS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjb21wb3NpdGUgZnVuY3Rpb24uXG4gICAgICogQHNlZSBfLmZsb3dcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gc3F1YXJlKG4pIHtcbiAgICAgKiAgIHJldHVybiBuICogbjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgYWRkU3F1YXJlID0gXy5mbG93UmlnaHQoW3NxdWFyZSwgXy5hZGRdKTtcbiAgICAgKiBhZGRTcXVhcmUoMSwgMik7XG4gICAgICogLy8gPT4gOVxuICAgICAqL1xuICAgIHZhciBmbG93UmlnaHQgPSBjcmVhdGVGbG93KHRydWUpO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgcmV0dXJucyB0aGUgZmlyc3QgYXJndW1lbnQgaXQgcmVjZWl2ZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgQW55IHZhbHVlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIGB2YWx1ZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSB9O1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2coXy5pZGVudGl0eShvYmplY3QpID09PSBvYmplY3QpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpZGVudGl0eSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggdGhlIGFyZ3VtZW50cyBvZiB0aGUgY3JlYXRlZFxuICAgICAqIGZ1bmN0aW9uLiBJZiBgZnVuY2AgaXMgYSBwcm9wZXJ0eSBuYW1lLCB0aGUgY3JlYXRlZCBmdW5jdGlvbiByZXR1cm5zIHRoZVxuICAgICAqIHByb3BlcnR5IHZhbHVlIGZvciBhIGdpdmVuIGVsZW1lbnQuIElmIGBmdW5jYCBpcyBhbiBhcnJheSBvciBvYmplY3QsIHRoZVxuICAgICAqIGNyZWF0ZWQgZnVuY3Rpb24gcmV0dXJucyBgdHJ1ZWAgZm9yIGVsZW1lbnRzIHRoYXQgY29udGFpbiB0aGUgZXF1aXZhbGVudFxuICAgICAqIHNvdXJjZSBwcm9wZXJ0aWVzLCBvdGhlcndpc2UgaXQgcmV0dXJucyBgZmFsc2VgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0geyp9IFtmdW5jPV8uaWRlbnRpdHldIFRoZSB2YWx1ZSB0byBjb252ZXJ0IHRvIGEgY2FsbGJhY2suXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBjYWxsYmFjay5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzYsICdhY3RpdmUnOiB0cnVlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhZ2UnOiA0MCwgJ2FjdGl2ZSc6IGZhbHNlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbHRlcih1c2VycywgXy5pdGVyYXRlZSh7ICd1c2VyJzogJ2Jhcm5leScsICdhY3RpdmUnOiB0cnVlIH0pKTtcbiAgICAgKiAvLyA9PiBbeyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzYsICdhY3RpdmUnOiB0cnVlIH1dXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maWx0ZXIodXNlcnMsIF8uaXRlcmF0ZWUoWyd1c2VyJywgJ2ZyZWQnXSkpO1xuICAgICAqIC8vID0+IFt7ICd1c2VyJzogJ2ZyZWQnLCAnYWdlJzogNDAgfV1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8ubWFwKHVzZXJzLCBfLml0ZXJhdGVlKCd1c2VyJykpO1xuICAgICAqIC8vID0+IFsnYmFybmV5JywgJ2ZyZWQnXVxuICAgICAqXG4gICAgICogLy8gQ3JlYXRlIGN1c3RvbSBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqIF8uaXRlcmF0ZWUgPSBfLndyYXAoXy5pdGVyYXRlZSwgZnVuY3Rpb24oaXRlcmF0ZWUsIGZ1bmMpIHtcbiAgICAgKiAgIHJldHVybiAhXy5pc1JlZ0V4cChmdW5jKSA/IGl0ZXJhdGVlKGZ1bmMpIDogZnVuY3Rpb24oc3RyaW5nKSB7XG4gICAgICogICAgIHJldHVybiBmdW5jLnRlc3Qoc3RyaW5nKTtcbiAgICAgKiAgIH07XG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiBfLmZpbHRlcihbJ2FiYycsICdkZWYnXSwgL2VmLyk7XG4gICAgICogLy8gPT4gWydkZWYnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGl0ZXJhdGVlKGZ1bmMpIHtcbiAgICAgIHJldHVybiBiYXNlSXRlcmF0ZWUodHlwZW9mIGZ1bmMgPT0gJ2Z1bmN0aW9uJyA/IGZ1bmMgOiBiYXNlQ2xvbmUoZnVuYywgQ0xPTkVfREVFUF9GTEFHKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcGVyZm9ybXMgYSBwYXJ0aWFsIGRlZXAgY29tcGFyaXNvbiBiZXR3ZWVuIGEgZ2l2ZW5cbiAgICAgKiBvYmplY3QgYW5kIGBzb3VyY2VgLCByZXR1cm5pbmcgYHRydWVgIGlmIHRoZSBnaXZlbiBvYmplY3QgaGFzIGVxdWl2YWxlbnRcbiAgICAgKiBwcm9wZXJ0eSB2YWx1ZXMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGUgY3JlYXRlZCBmdW5jdGlvbiBpcyBlcXVpdmFsZW50IHRvIGBfLmlzTWF0Y2hgIHdpdGggYHNvdXJjZWBcbiAgICAgKiBwYXJ0aWFsbHkgYXBwbGllZC5cbiAgICAgKlxuICAgICAqIFBhcnRpYWwgY29tcGFyaXNvbnMgd2lsbCBtYXRjaCBlbXB0eSBhcnJheSBhbmQgZW1wdHkgb2JqZWN0IGBzb3VyY2VgXG4gICAgICogdmFsdWVzIGFnYWluc3QgYW55IGFycmF5IG9yIG9iamVjdCB2YWx1ZSwgcmVzcGVjdGl2ZWx5LiBTZWUgYF8uaXNFcXVhbGBcbiAgICAgKiBmb3IgYSBsaXN0IG9mIHN1cHBvcnRlZCB2YWx1ZSBjb21wYXJpc29ucy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIHByb3BlcnR5IHZhbHVlcyB0byBtYXRjaC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzcGVjIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFtcbiAgICAgKiAgIHsgJ2EnOiAxLCAnYic6IDIsICdjJzogMyB9LFxuICAgICAqICAgeyAnYSc6IDQsICdiJzogNSwgJ2MnOiA2IH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5maWx0ZXIob2JqZWN0cywgXy5tYXRjaGVzKHsgJ2EnOiA0LCAnYyc6IDYgfSkpO1xuICAgICAqIC8vID0+IFt7ICdhJzogNCwgJ2InOiA1LCAnYyc6IDYgfV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXRjaGVzKHNvdXJjZSkge1xuICAgICAgcmV0dXJuIGJhc2VNYXRjaGVzKGJhc2VDbG9uZShzb3VyY2UsIENMT05FX0RFRVBfRkxBRykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHBlcmZvcm1zIGEgcGFydGlhbCBkZWVwIGNvbXBhcmlzb24gYmV0d2VlbiB0aGVcbiAgICAgKiB2YWx1ZSBhdCBgcGF0aGAgb2YgYSBnaXZlbiBvYmplY3QgdG8gYHNyY1ZhbHVlYCwgcmV0dXJuaW5nIGB0cnVlYCBpZiB0aGVcbiAgICAgKiBvYmplY3QgdmFsdWUgaXMgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFBhcnRpYWwgY29tcGFyaXNvbnMgd2lsbCBtYXRjaCBlbXB0eSBhcnJheSBhbmQgZW1wdHkgb2JqZWN0XG4gICAgICogYHNyY1ZhbHVlYCB2YWx1ZXMgYWdhaW5zdCBhbnkgYXJyYXkgb3Igb2JqZWN0IHZhbHVlLCByZXNwZWN0aXZlbHkuIFNlZVxuICAgICAqIGBfLmlzRXF1YWxgIGZvciBhIGxpc3Qgb2Ygc3VwcG9ydGVkIHZhbHVlIGNvbXBhcmlzb25zLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMi4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gc3JjVmFsdWUgVGhlIHZhbHVlIHRvIG1hdGNoLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNwZWMgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW1xuICAgICAqICAgeyAnYSc6IDEsICdiJzogMiwgJ2MnOiAzIH0sXG4gICAgICogICB7ICdhJzogNCwgJ2InOiA1LCAnYyc6IDYgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLmZpbmQob2JqZWN0cywgXy5tYXRjaGVzUHJvcGVydHkoJ2EnLCA0KSk7XG4gICAgICogLy8gPT4geyAnYSc6IDQsICdiJzogNSwgJ2MnOiA2IH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXRjaGVzUHJvcGVydHkocGF0aCwgc3JjVmFsdWUpIHtcbiAgICAgIHJldHVybiBiYXNlTWF0Y2hlc1Byb3BlcnR5KHBhdGgsIGJhc2VDbG9uZShzcmNWYWx1ZSwgQ0xPTkVfREVFUF9GTEFHKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyB0aGUgbWV0aG9kIGF0IGBwYXRoYCBvZiBhIGdpdmVuIG9iamVjdC5cbiAgICAgKiBBbnkgYWRkaXRpb25hbCBhcmd1bWVudHMgYXJlIHByb3ZpZGVkIHRvIHRoZSBpbnZva2VkIG1ldGhvZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjcuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIG1ldGhvZCB0byBpbnZva2UuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbYXJnc10gVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgdGhlIG1ldGhvZCB3aXRoLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGludm9rZXIgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW1xuICAgICAqICAgeyAnYSc6IHsgJ2InOiBfLmNvbnN0YW50KDIpIH0gfSxcbiAgICAgKiAgIHsgJ2EnOiB7ICdiJzogXy5jb25zdGFudCgxKSB9IH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5tYXAob2JqZWN0cywgXy5tZXRob2QoJ2EuYicpKTtcbiAgICAgKiAvLyA9PiBbMiwgMV1cbiAgICAgKlxuICAgICAqIF8ubWFwKG9iamVjdHMsIF8ubWV0aG9kKFsnYScsICdiJ10pKTtcbiAgICAgKiAvLyA9PiBbMiwgMV1cbiAgICAgKi9cbiAgICB2YXIgbWV0aG9kID0gYmFzZVJlc3QoZnVuY3Rpb24ocGF0aCwgYXJncykge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgICByZXR1cm4gYmFzZUludm9rZShvYmplY3QsIHBhdGgsIGFyZ3MpO1xuICAgICAgfTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBvcHBvc2l0ZSBvZiBgXy5tZXRob2RgOyB0aGlzIG1ldGhvZCBjcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzXG4gICAgICogdGhlIG1ldGhvZCBhdCBhIGdpdmVuIHBhdGggb2YgYG9iamVjdGAuIEFueSBhZGRpdGlvbmFsIGFyZ3VtZW50cyBhcmVcbiAgICAgKiBwcm92aWRlZCB0byB0aGUgaW52b2tlZCBtZXRob2QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy43LjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0gey4uLip9IFthcmdzXSBUaGUgYXJndW1lbnRzIHRvIGludm9rZSB0aGUgbWV0aG9kIHdpdGguXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgaW52b2tlciBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gXy50aW1lcygzLCBfLmNvbnN0YW50KSxcbiAgICAgKiAgICAgb2JqZWN0ID0geyAnYSc6IGFycmF5LCAnYic6IGFycmF5LCAnYyc6IGFycmF5IH07XG4gICAgICpcbiAgICAgKiBfLm1hcChbJ2FbMl0nLCAnY1swXSddLCBfLm1ldGhvZE9mKG9iamVjdCkpO1xuICAgICAqIC8vID0+IFsyLCAwXVxuICAgICAqXG4gICAgICogXy5tYXAoW1snYScsICcyJ10sIFsnYycsICcwJ11dLCBfLm1ldGhvZE9mKG9iamVjdCkpO1xuICAgICAqIC8vID0+IFsyLCAwXVxuICAgICAqL1xuICAgIHZhciBtZXRob2RPZiA9IGJhc2VSZXN0KGZ1bmN0aW9uKG9iamVjdCwgYXJncykge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHBhdGgpIHtcbiAgICAgICAgcmV0dXJuIGJhc2VJbnZva2Uob2JqZWN0LCBwYXRoLCBhcmdzKTtcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBBZGRzIGFsbCBvd24gZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgZnVuY3Rpb24gcHJvcGVydGllcyBvZiBhIHNvdXJjZVxuICAgICAqIG9iamVjdCB0byB0aGUgZGVzdGluYXRpb24gb2JqZWN0LiBJZiBgb2JqZWN0YCBpcyBhIGZ1bmN0aW9uLCB0aGVuIG1ldGhvZHNcbiAgICAgKiBhcmUgYWRkZWQgdG8gaXRzIHByb3RvdHlwZSBhcyB3ZWxsLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVzZSBgXy5ydW5JbkNvbnRleHRgIHRvIGNyZWF0ZSBhIHByaXN0aW5lIGBsb2Rhc2hgIGZ1bmN0aW9uIHRvXG4gICAgICogYXZvaWQgY29uZmxpY3RzIGNhdXNlZCBieSBtb2RpZnlpbmcgdGhlIG9yaWdpbmFsLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufE9iamVjdH0gW29iamVjdD1sb2Rhc2hdIFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIGZ1bmN0aW9ucyB0byBhZGQuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XSBUaGUgb3B0aW9ucyBvYmplY3QuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5jaGFpbj10cnVlXSBTcGVjaWZ5IHdoZXRoZXIgbWl4aW5zIGFyZSBjaGFpbmFibGUuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufE9iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gdm93ZWxzKHN0cmluZykge1xuICAgICAqICAgcmV0dXJuIF8uZmlsdGVyKHN0cmluZywgZnVuY3Rpb24odikge1xuICAgICAqICAgICByZXR1cm4gL1thZWlvdV0vaS50ZXN0KHYpO1xuICAgICAqICAgfSk7XG4gICAgICogfVxuICAgICAqXG4gICAgICogXy5taXhpbih7ICd2b3dlbHMnOiB2b3dlbHMgfSk7XG4gICAgICogXy52b3dlbHMoJ2ZyZWQnKTtcbiAgICAgKiAvLyA9PiBbJ2UnXVxuICAgICAqXG4gICAgICogXygnZnJlZCcpLnZvd2VscygpLnZhbHVlKCk7XG4gICAgICogLy8gPT4gWydlJ11cbiAgICAgKlxuICAgICAqIF8ubWl4aW4oeyAndm93ZWxzJzogdm93ZWxzIH0sIHsgJ2NoYWluJzogZmFsc2UgfSk7XG4gICAgICogXygnZnJlZCcpLnZvd2VscygpO1xuICAgICAqIC8vID0+IFsnZSddXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWl4aW4ob2JqZWN0LCBzb3VyY2UsIG9wdGlvbnMpIHtcbiAgICAgIHZhciBwcm9wcyA9IGtleXMoc291cmNlKSxcbiAgICAgICAgICBtZXRob2ROYW1lcyA9IGJhc2VGdW5jdGlvbnMoc291cmNlLCBwcm9wcyk7XG5cbiAgICAgIGlmIChvcHRpb25zID09IG51bGwgJiZcbiAgICAgICAgICAhKGlzT2JqZWN0KHNvdXJjZSkgJiYgKG1ldGhvZE5hbWVzLmxlbmd0aCB8fCAhcHJvcHMubGVuZ3RoKSkpIHtcbiAgICAgICAgb3B0aW9ucyA9IHNvdXJjZTtcbiAgICAgICAgc291cmNlID0gb2JqZWN0O1xuICAgICAgICBvYmplY3QgPSB0aGlzO1xuICAgICAgICBtZXRob2ROYW1lcyA9IGJhc2VGdW5jdGlvbnMoc291cmNlLCBrZXlzKHNvdXJjZSkpO1xuICAgICAgfVxuICAgICAgdmFyIGNoYWluID0gIShpc09iamVjdChvcHRpb25zKSAmJiAnY2hhaW4nIGluIG9wdGlvbnMpIHx8ICEhb3B0aW9ucy5jaGFpbixcbiAgICAgICAgICBpc0Z1bmMgPSBpc0Z1bmN0aW9uKG9iamVjdCk7XG5cbiAgICAgIGFycmF5RWFjaChtZXRob2ROYW1lcywgZnVuY3Rpb24obWV0aG9kTmFtZSkge1xuICAgICAgICB2YXIgZnVuYyA9IHNvdXJjZVttZXRob2ROYW1lXTtcbiAgICAgICAgb2JqZWN0W21ldGhvZE5hbWVdID0gZnVuYztcbiAgICAgICAgaWYgKGlzRnVuYykge1xuICAgICAgICAgIG9iamVjdC5wcm90b3R5cGVbbWV0aG9kTmFtZV0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBjaGFpbkFsbCA9IHRoaXMuX19jaGFpbl9fO1xuICAgICAgICAgICAgaWYgKGNoYWluIHx8IGNoYWluQWxsKSB7XG4gICAgICAgICAgICAgIHZhciByZXN1bHQgPSBvYmplY3QodGhpcy5fX3dyYXBwZWRfXyksXG4gICAgICAgICAgICAgICAgICBhY3Rpb25zID0gcmVzdWx0Ll9fYWN0aW9uc19fID0gY29weUFycmF5KHRoaXMuX19hY3Rpb25zX18pO1xuXG4gICAgICAgICAgICAgIGFjdGlvbnMucHVzaCh7ICdmdW5jJzogZnVuYywgJ2FyZ3MnOiBhcmd1bWVudHMsICd0aGlzQXJnJzogb2JqZWN0IH0pO1xuICAgICAgICAgICAgICByZXN1bHQuX19jaGFpbl9fID0gY2hhaW5BbGw7XG4gICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZnVuYy5hcHBseShvYmplY3QsIGFycmF5UHVzaChbdGhpcy52YWx1ZSgpXSwgYXJndW1lbnRzKSk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV2ZXJ0cyB0aGUgYF9gIHZhcmlhYmxlIHRvIGl0cyBwcmV2aW91cyB2YWx1ZSBhbmQgcmV0dXJucyBhIHJlZmVyZW5jZSB0b1xuICAgICAqIHRoZSBgbG9kYXNoYCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBgbG9kYXNoYCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGxvZGFzaCA9IF8ubm9Db25mbGljdCgpO1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIG5vQ29uZmxpY3QoKSB7XG4gICAgICBpZiAocm9vdC5fID09PSB0aGlzKSB7XG4gICAgICAgIHJvb3QuXyA9IG9sZERhc2g7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCByZXR1cm5zIGB1bmRlZmluZWRgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMy4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50aW1lcygyLCBfLm5vb3ApO1xuICAgICAqIC8vID0+IFt1bmRlZmluZWQsIHVuZGVmaW5lZF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBub29wKCkge1xuICAgICAgLy8gTm8gb3BlcmF0aW9uIHBlcmZvcm1lZC5cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBnZXRzIHRoZSBhcmd1bWVudCBhdCBpbmRleCBgbmAuIElmIGBuYCBpcyBuZWdhdGl2ZSxcbiAgICAgKiB0aGUgbnRoIGFyZ3VtZW50IGZyb20gdGhlIGVuZCBpcyByZXR1cm5lZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtuPTBdIFRoZSBpbmRleCBvZiB0aGUgYXJndW1lbnQgdG8gcmV0dXJuLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHBhc3MtdGhydSBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGZ1bmMgPSBfLm50aEFyZygxKTtcbiAgICAgKiBmdW5jKCdhJywgJ2InLCAnYycsICdkJyk7XG4gICAgICogLy8gPT4gJ2InXG4gICAgICpcbiAgICAgKiB2YXIgZnVuYyA9IF8ubnRoQXJnKC0yKTtcbiAgICAgKiBmdW5jKCdhJywgJ2InLCAnYycsICdkJyk7XG4gICAgICogLy8gPT4gJ2MnXG4gICAgICovXG4gICAgZnVuY3Rpb24gbnRoQXJnKG4pIHtcbiAgICAgIG4gPSB0b0ludGVnZXIobik7XG4gICAgICByZXR1cm4gYmFzZVJlc3QoZnVuY3Rpb24oYXJncykge1xuICAgICAgICByZXR1cm4gYmFzZU50aChhcmdzLCBuKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGl0ZXJhdGVlc2Agd2l0aCB0aGUgYXJndW1lbnRzIGl0IHJlY2VpdmVzXG4gICAgICogYW5kIHJldHVybnMgdGhlaXIgcmVzdWx0cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHsuLi4oRnVuY3Rpb258RnVuY3Rpb25bXSl9IFtpdGVyYXRlZXM9W18uaWRlbnRpdHldXVxuICAgICAqICBUaGUgaXRlcmF0ZWVzIHRvIGludm9rZS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGZ1bmMgPSBfLm92ZXIoW01hdGgubWF4LCBNYXRoLm1pbl0pO1xuICAgICAqXG4gICAgICogZnVuYygxLCAyLCAzLCA0KTtcbiAgICAgKiAvLyA9PiBbNCwgMV1cbiAgICAgKi9cbiAgICB2YXIgb3ZlciA9IGNyZWF0ZU92ZXIoYXJyYXlNYXApO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgY2hlY2tzIGlmICoqYWxsKiogb2YgdGhlIGBwcmVkaWNhdGVzYCByZXR1cm5cbiAgICAgKiB0cnV0aHkgd2hlbiBpbnZva2VkIHdpdGggdGhlIGFyZ3VtZW50cyBpdCByZWNlaXZlcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHsuLi4oRnVuY3Rpb258RnVuY3Rpb25bXSl9IFtwcmVkaWNhdGVzPVtfLmlkZW50aXR5XV1cbiAgICAgKiAgVGhlIHByZWRpY2F0ZXMgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBmdW5jID0gXy5vdmVyRXZlcnkoW0Jvb2xlYW4sIGlzRmluaXRlXSk7XG4gICAgICpcbiAgICAgKiBmdW5jKCcxJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogZnVuYyhudWxsKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogZnVuYyhOYU4pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIG92ZXJFdmVyeSA9IGNyZWF0ZU92ZXIoYXJyYXlFdmVyeSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBjaGVja3MgaWYgKiphbnkqKiBvZiB0aGUgYHByZWRpY2F0ZXNgIHJldHVyblxuICAgICAqIHRydXRoeSB3aGVuIGludm9rZWQgd2l0aCB0aGUgYXJndW1lbnRzIGl0IHJlY2VpdmVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0gey4uLihGdW5jdGlvbnxGdW5jdGlvbltdKX0gW3ByZWRpY2F0ZXM9W18uaWRlbnRpdHldXVxuICAgICAqICBUaGUgcHJlZGljYXRlcyB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGZ1bmMgPSBfLm92ZXJTb21lKFtCb29sZWFuLCBpc0Zpbml0ZV0pO1xuICAgICAqXG4gICAgICogZnVuYygnMScpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIGZ1bmMobnVsbCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogZnVuYyhOYU4pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIG92ZXJTb21lID0gY3JlYXRlT3ZlcihhcnJheVNvbWUpO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGUgdmFsdWUgYXQgYHBhdGhgIG9mIGEgZ2l2ZW4gb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuNC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGFjY2Vzc29yIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFtcbiAgICAgKiAgIHsgJ2EnOiB7ICdiJzogMiB9IH0sXG4gICAgICogICB7ICdhJzogeyAnYic6IDEgfSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8ubWFwKG9iamVjdHMsIF8ucHJvcGVydHkoJ2EuYicpKTtcbiAgICAgKiAvLyA9PiBbMiwgMV1cbiAgICAgKlxuICAgICAqIF8ubWFwKF8uc29ydEJ5KG9iamVjdHMsIF8ucHJvcGVydHkoWydhJywgJ2InXSkpLCAnYS5iJyk7XG4gICAgICogLy8gPT4gWzEsIDJdXG4gICAgICovXG4gICAgZnVuY3Rpb24gcHJvcGVydHkocGF0aCkge1xuICAgICAgcmV0dXJuIGlzS2V5KHBhdGgpID8gYmFzZVByb3BlcnR5KHRvS2V5KHBhdGgpKSA6IGJhc2VQcm9wZXJ0eURlZXAocGF0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIG9wcG9zaXRlIG9mIGBfLnByb3BlcnR5YDsgdGhpcyBtZXRob2QgY3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJuc1xuICAgICAqIHRoZSB2YWx1ZSBhdCBhIGdpdmVuIHBhdGggb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhY2Nlc3NvciBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWzAsIDEsIDJdLFxuICAgICAqICAgICBvYmplY3QgPSB7ICdhJzogYXJyYXksICdiJzogYXJyYXksICdjJzogYXJyYXkgfTtcbiAgICAgKlxuICAgICAqIF8ubWFwKFsnYVsyXScsICdjWzBdJ10sIF8ucHJvcGVydHlPZihvYmplY3QpKTtcbiAgICAgKiAvLyA9PiBbMiwgMF1cbiAgICAgKlxuICAgICAqIF8ubWFwKFtbJ2EnLCAnMiddLCBbJ2MnLCAnMCddXSwgXy5wcm9wZXJ0eU9mKG9iamVjdCkpO1xuICAgICAqIC8vID0+IFsyLCAwXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHByb3BlcnR5T2Yob2JqZWN0KSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24ocGF0aCkge1xuICAgICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQgOiBiYXNlR2V0KG9iamVjdCwgcGF0aCk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgbnVtYmVycyAocG9zaXRpdmUgYW5kL29yIG5lZ2F0aXZlKSBwcm9ncmVzc2luZyBmcm9tXG4gICAgICogYHN0YXJ0YCB1cCB0bywgYnV0IG5vdCBpbmNsdWRpbmcsIGBlbmRgLiBBIHN0ZXAgb2YgYC0xYCBpcyB1c2VkIGlmIGEgbmVnYXRpdmVcbiAgICAgKiBgc3RhcnRgIGlzIHNwZWNpZmllZCB3aXRob3V0IGFuIGBlbmRgIG9yIGBzdGVwYC4gSWYgYGVuZGAgaXMgbm90IHNwZWNpZmllZCxcbiAgICAgKiBpdCdzIHNldCB0byBgc3RhcnRgIHdpdGggYHN0YXJ0YCB0aGVuIHNldCB0byBgMGAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogSmF2YVNjcmlwdCBmb2xsb3dzIHRoZSBJRUVFLTc1NCBzdGFuZGFyZCBmb3IgcmVzb2x2aW5nXG4gICAgICogZmxvYXRpbmctcG9pbnQgdmFsdWVzIHdoaWNoIGNhbiBwcm9kdWNlIHVuZXhwZWN0ZWQgcmVzdWx0cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD0wXSBUaGUgc3RhcnQgb2YgdGhlIHJhbmdlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBlbmQgVGhlIGVuZCBvZiB0aGUgcmFuZ2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGVwPTFdIFRoZSB2YWx1ZSB0byBpbmNyZW1lbnQgb3IgZGVjcmVtZW50IGJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcmFuZ2Ugb2YgbnVtYmVycy5cbiAgICAgKiBAc2VlIF8uaW5SYW5nZSwgXy5yYW5nZVJpZ2h0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucmFuZ2UoNCk7XG4gICAgICogLy8gPT4gWzAsIDEsIDIsIDNdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlKC00KTtcbiAgICAgKiAvLyA9PiBbMCwgLTEsIC0yLCAtM11cbiAgICAgKlxuICAgICAqIF8ucmFuZ2UoMSwgNSk7XG4gICAgICogLy8gPT4gWzEsIDIsIDMsIDRdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlKDAsIDIwLCA1KTtcbiAgICAgKiAvLyA9PiBbMCwgNSwgMTAsIDE1XVxuICAgICAqXG4gICAgICogXy5yYW5nZSgwLCAtNCwgLTEpO1xuICAgICAqIC8vID0+IFswLCAtMSwgLTIsIC0zXVxuICAgICAqXG4gICAgICogXy5yYW5nZSgxLCA0LCAwKTtcbiAgICAgKiAvLyA9PiBbMSwgMSwgMV1cbiAgICAgKlxuICAgICAqIF8ucmFuZ2UoMCk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKi9cbiAgICB2YXIgcmFuZ2UgPSBjcmVhdGVSYW5nZSgpO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5yYW5nZWAgZXhjZXB0IHRoYXQgaXQgcG9wdWxhdGVzIHZhbHVlcyBpblxuICAgICAqIGRlc2NlbmRpbmcgb3JkZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9MF0gVGhlIHN0YXJ0IG9mIHRoZSByYW5nZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZW5kIFRoZSBlbmQgb2YgdGhlIHJhbmdlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RlcD0xXSBUaGUgdmFsdWUgdG8gaW5jcmVtZW50IG9yIGRlY3JlbWVudCBieS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHJhbmdlIG9mIG51bWJlcnMuXG4gICAgICogQHNlZSBfLmluUmFuZ2UsIF8ucmFuZ2VcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5yYW5nZVJpZ2h0KDQpO1xuICAgICAqIC8vID0+IFszLCAyLCAxLCAwXVxuICAgICAqXG4gICAgICogXy5yYW5nZVJpZ2h0KC00KTtcbiAgICAgKiAvLyA9PiBbLTMsIC0yLCAtMSwgMF1cbiAgICAgKlxuICAgICAqIF8ucmFuZ2VSaWdodCgxLCA1KTtcbiAgICAgKiAvLyA9PiBbNCwgMywgMiwgMV1cbiAgICAgKlxuICAgICAqIF8ucmFuZ2VSaWdodCgwLCAyMCwgNSk7XG4gICAgICogLy8gPT4gWzE1LCAxMCwgNSwgMF1cbiAgICAgKlxuICAgICAqIF8ucmFuZ2VSaWdodCgwLCAtNCwgLTEpO1xuICAgICAqIC8vID0+IFstMywgLTIsIC0xLCAwXVxuICAgICAqXG4gICAgICogXy5yYW5nZVJpZ2h0KDEsIDQsIDApO1xuICAgICAqIC8vID0+IFsxLCAxLCAxXVxuICAgICAqXG4gICAgICogXy5yYW5nZVJpZ2h0KDApO1xuICAgICAqIC8vID0+IFtdXG4gICAgICovXG4gICAgdmFyIHJhbmdlUmlnaHQgPSBjcmVhdGVSYW5nZSh0cnVlKTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIHJldHVybnMgYSBuZXcgZW1wdHkgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4xMy4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBlbXB0eSBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5cyA9IF8udGltZXMoMiwgXy5zdHViQXJyYXkpO1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2coYXJyYXlzKTtcbiAgICAgKiAvLyA9PiBbW10sIFtdXVxuICAgICAqXG4gICAgICogY29uc29sZS5sb2coYXJyYXlzWzBdID09PSBhcnJheXNbMV0pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3R1YkFycmF5KCkge1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIHJldHVybnMgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjEzLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udGltZXMoMiwgXy5zdHViRmFsc2UpO1xuICAgICAqIC8vID0+IFtmYWxzZSwgZmFsc2VdXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3R1YkZhbHNlKCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIHJldHVybnMgYSBuZXcgZW1wdHkgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMTMuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IGVtcHR5IG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBfLnRpbWVzKDIsIF8uc3R1Yk9iamVjdCk7XG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhvYmplY3RzKTtcbiAgICAgKiAvLyA9PiBbe30sIHt9XVxuICAgICAqXG4gICAgICogY29uc29sZS5sb2cob2JqZWN0c1swXSA9PT0gb2JqZWN0c1sxXSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdHViT2JqZWN0KCkge1xuICAgICAgcmV0dXJuIHt9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIHJldHVybnMgYW4gZW1wdHkgc3RyaW5nLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMTMuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgZW1wdHkgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRpbWVzKDIsIF8uc3R1YlN0cmluZyk7XG4gICAgICogLy8gPT4gWycnLCAnJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdHViU3RyaW5nKCkge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIHJldHVybnMgYHRydWVgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMTMuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRpbWVzKDIsIF8uc3R1YlRydWUpO1xuICAgICAqIC8vID0+IFt0cnVlLCB0cnVlXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN0dWJUcnVlKCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW52b2tlcyB0aGUgaXRlcmF0ZWUgYG5gIHRpbWVzLCByZXR1cm5pbmcgYW4gYXJyYXkgb2YgdGhlIHJlc3VsdHMgb2ZcbiAgICAgKiBlYWNoIGludm9jYXRpb24uIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OyAoaW5kZXgpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgbnVtYmVyIG9mIHRpbWVzIHRvIGludm9rZSBgaXRlcmF0ZWVgLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcmVzdWx0cy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50aW1lcygzLCBTdHJpbmcpO1xuICAgICAqIC8vID0+IFsnMCcsICcxJywgJzInXVxuICAgICAqXG4gICAgICogIF8udGltZXMoNCwgXy5jb25zdGFudCgwKSk7XG4gICAgICogLy8gPT4gWzAsIDAsIDAsIDBdXG4gICAgICovXG4gICAgZnVuY3Rpb24gdGltZXMobiwgaXRlcmF0ZWUpIHtcbiAgICAgIG4gPSB0b0ludGVnZXIobik7XG4gICAgICBpZiAobiA8IDEgfHwgbiA+IE1BWF9TQUZFX0lOVEVHRVIpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgdmFyIGluZGV4ID0gTUFYX0FSUkFZX0xFTkdUSCxcbiAgICAgICAgICBsZW5ndGggPSBuYXRpdmVNaW4obiwgTUFYX0FSUkFZX0xFTkdUSCk7XG5cbiAgICAgIGl0ZXJhdGVlID0gZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUpO1xuICAgICAgbiAtPSBNQVhfQVJSQVlfTEVOR1RIO1xuXG4gICAgICB2YXIgcmVzdWx0ID0gYmFzZVRpbWVzKGxlbmd0aCwgaXRlcmF0ZWUpO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBuKSB7XG4gICAgICAgIGl0ZXJhdGVlKGluZGV4KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHZhbHVlYCB0byBhIHByb3BlcnR5IHBhdGggYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgcHJvcGVydHkgcGF0aCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50b1BhdGgoJ2EuYi5jJyk7XG4gICAgICogLy8gPT4gWydhJywgJ2InLCAnYyddXG4gICAgICpcbiAgICAgKiBfLnRvUGF0aCgnYVswXS5iLmMnKTtcbiAgICAgKiAvLyA9PiBbJ2EnLCAnMCcsICdiJywgJ2MnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvUGF0aCh2YWx1ZSkge1xuICAgICAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBhcnJheU1hcCh2YWx1ZSwgdG9LZXkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGlzU3ltYm9sKHZhbHVlKSA/IFt2YWx1ZV0gOiBjb3B5QXJyYXkoc3RyaW5nVG9QYXRoKHRvU3RyaW5nKHZhbHVlKSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdlbmVyYXRlcyBhIHVuaXF1ZSBJRC4gSWYgYHByZWZpeGAgaXMgZ2l2ZW4sIHRoZSBJRCBpcyBhcHBlbmRlZCB0byBpdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtwcmVmaXg9JyddIFRoZSB2YWx1ZSB0byBwcmVmaXggdGhlIElEIHdpdGguXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdW5pcXVlIElELlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnVuaXF1ZUlkKCdjb250YWN0XycpO1xuICAgICAqIC8vID0+ICdjb250YWN0XzEwNCdcbiAgICAgKlxuICAgICAqIF8udW5pcXVlSWQoKTtcbiAgICAgKiAvLyA9PiAnMTA1J1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVuaXF1ZUlkKHByZWZpeCkge1xuICAgICAgdmFyIGlkID0gKytpZENvdW50ZXI7XG4gICAgICByZXR1cm4gdG9TdHJpbmcocHJlZml4KSArIGlkO1xuICAgIH1cblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIEFkZHMgdHdvIG51bWJlcnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy40LjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBhdWdlbmQgVGhlIGZpcnN0IG51bWJlciBpbiBhbiBhZGRpdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYWRkZW5kIFRoZSBzZWNvbmQgbnVtYmVyIGluIGFuIGFkZGl0aW9uLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHRvdGFsLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmFkZCg2LCA0KTtcbiAgICAgKiAvLyA9PiAxMFxuICAgICAqL1xuICAgIHZhciBhZGQgPSBjcmVhdGVNYXRoT3BlcmF0aW9uKGZ1bmN0aW9uKGF1Z2VuZCwgYWRkZW5kKSB7XG4gICAgICByZXR1cm4gYXVnZW5kICsgYWRkZW5kO1xuICAgIH0sIDApO1xuXG4gICAgLyoqXG4gICAgICogQ29tcHV0ZXMgYG51bWJlcmAgcm91bmRlZCB1cCB0byBgcHJlY2lzaW9uYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjEwLjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBudW1iZXIgVGhlIG51bWJlciB0byByb3VuZCB1cC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3ByZWNpc2lvbj0wXSBUaGUgcHJlY2lzaW9uIHRvIHJvdW5kIHVwIHRvLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHJvdW5kZWQgdXAgbnVtYmVyLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmNlaWwoNC4wMDYpO1xuICAgICAqIC8vID0+IDVcbiAgICAgKlxuICAgICAqIF8uY2VpbCg2LjAwNCwgMik7XG4gICAgICogLy8gPT4gNi4wMVxuICAgICAqXG4gICAgICogXy5jZWlsKDYwNDAsIC0yKTtcbiAgICAgKiAvLyA9PiA2MTAwXG4gICAgICovXG4gICAgdmFyIGNlaWwgPSBjcmVhdGVSb3VuZCgnY2VpbCcpO1xuXG4gICAgLyoqXG4gICAgICogRGl2aWRlIHR3byBudW1iZXJzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuNy4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZGl2aWRlbmQgVGhlIGZpcnN0IG51bWJlciBpbiBhIGRpdmlzaW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBkaXZpc29yIFRoZSBzZWNvbmQgbnVtYmVyIGluIGEgZGl2aXNpb24uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgcXVvdGllbnQuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZGl2aWRlKDYsIDQpO1xuICAgICAqIC8vID0+IDEuNVxuICAgICAqL1xuICAgIHZhciBkaXZpZGUgPSBjcmVhdGVNYXRoT3BlcmF0aW9uKGZ1bmN0aW9uKGRpdmlkZW5kLCBkaXZpc29yKSB7XG4gICAgICByZXR1cm4gZGl2aWRlbmQgLyBkaXZpc29yO1xuICAgIH0sIDEpO1xuXG4gICAgLyoqXG4gICAgICogQ29tcHV0ZXMgYG51bWJlcmAgcm91bmRlZCBkb3duIHRvIGBwcmVjaXNpb25gLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMTAuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG51bWJlciBUaGUgbnVtYmVyIHRvIHJvdW5kIGRvd24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtwcmVjaXNpb249MF0gVGhlIHByZWNpc2lvbiB0byByb3VuZCBkb3duIHRvLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHJvdW5kZWQgZG93biBudW1iZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZmxvb3IoNC4wMDYpO1xuICAgICAqIC8vID0+IDRcbiAgICAgKlxuICAgICAqIF8uZmxvb3IoMC4wNDYsIDIpO1xuICAgICAqIC8vID0+IDAuMDRcbiAgICAgKlxuICAgICAqIF8uZmxvb3IoNDA2MCwgLTIpO1xuICAgICAqIC8vID0+IDQwMDBcbiAgICAgKi9cbiAgICB2YXIgZmxvb3IgPSBjcmVhdGVSb3VuZCgnZmxvb3InKTtcblxuICAgIC8qKlxuICAgICAqIENvbXB1dGVzIHRoZSBtYXhpbXVtIHZhbHVlIG9mIGBhcnJheWAuIElmIGBhcnJheWAgaXMgZW1wdHkgb3IgZmFsc2V5LFxuICAgICAqIGB1bmRlZmluZWRgIGlzIHJldHVybmVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtYXhpbXVtIHZhbHVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLm1heChbNCwgMiwgOCwgNl0pO1xuICAgICAqIC8vID0+IDhcbiAgICAgKlxuICAgICAqIF8ubWF4KFtdKTtcbiAgICAgKiAvLyA9PiB1bmRlZmluZWRcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXgoYXJyYXkpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VFeHRyZW11bShhcnJheSwgaWRlbnRpdHksIGJhc2VHdClcbiAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5tYXhgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB3aGljaCBpc1xuICAgICAqIGludm9rZWQgZm9yIGVhY2ggZWxlbWVudCBpbiBgYXJyYXlgIHRvIGdlbmVyYXRlIHRoZSBjcml0ZXJpb24gYnkgd2hpY2hcbiAgICAgKiB0aGUgdmFsdWUgaXMgcmFua2VkLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1heGltdW0gdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ24nOiAxIH0sIHsgJ24nOiAyIH1dO1xuICAgICAqXG4gICAgICogXy5tYXhCeShvYmplY3RzLCBmdW5jdGlvbihvKSB7IHJldHVybiBvLm47IH0pO1xuICAgICAqIC8vID0+IHsgJ24nOiAyIH1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8ubWF4Qnkob2JqZWN0cywgJ24nKTtcbiAgICAgKiAvLyA9PiB7ICduJzogMiB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gbWF4QnkoYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICAgICAgPyBiYXNlRXh0cmVtdW0oYXJyYXksIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSwgYmFzZUd0KVxuICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb21wdXRlcyB0aGUgbWVhbiBvZiB0aGUgdmFsdWVzIGluIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgbWVhbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5tZWFuKFs0LCAyLCA4LCA2XSk7XG4gICAgICogLy8gPT4gNVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1lYW4oYXJyYXkpIHtcbiAgICAgIHJldHVybiBiYXNlTWVhbihhcnJheSwgaWRlbnRpdHkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ubWVhbmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCBmb3IgZWFjaCBlbGVtZW50IGluIGBhcnJheWAgdG8gZ2VuZXJhdGUgdGhlIHZhbHVlIHRvIGJlIGF2ZXJhZ2VkLlxuICAgICAqIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuNy4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBtZWFuLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICduJzogNCB9LCB7ICduJzogMiB9LCB7ICduJzogOCB9LCB7ICduJzogNiB9XTtcbiAgICAgKlxuICAgICAqIF8ubWVhbkJ5KG9iamVjdHMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8ubjsgfSk7XG4gICAgICogLy8gPT4gNVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5tZWFuQnkob2JqZWN0cywgJ24nKTtcbiAgICAgKiAvLyA9PiA1XG4gICAgICovXG4gICAgZnVuY3Rpb24gbWVhbkJ5KGFycmF5LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIGJhc2VNZWFuKGFycmF5LCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMikpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbXB1dGVzIHRoZSBtaW5pbXVtIHZhbHVlIG9mIGBhcnJheWAuIElmIGBhcnJheWAgaXMgZW1wdHkgb3IgZmFsc2V5LFxuICAgICAqIGB1bmRlZmluZWRgIGlzIHJldHVybmVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtaW5pbXVtIHZhbHVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLm1pbihbNCwgMiwgOCwgNl0pO1xuICAgICAqIC8vID0+IDJcbiAgICAgKlxuICAgICAqIF8ubWluKFtdKTtcbiAgICAgKiAvLyA9PiB1bmRlZmluZWRcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtaW4oYXJyYXkpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VFeHRyZW11bShhcnJheSwgaWRlbnRpdHksIGJhc2VMdClcbiAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5taW5gIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB3aGljaCBpc1xuICAgICAqIGludm9rZWQgZm9yIGVhY2ggZWxlbWVudCBpbiBgYXJyYXlgIHRvIGdlbmVyYXRlIHRoZSBjcml0ZXJpb24gYnkgd2hpY2hcbiAgICAgKiB0aGUgdmFsdWUgaXMgcmFua2VkLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1pbmltdW0gdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ24nOiAxIH0sIHsgJ24nOiAyIH1dO1xuICAgICAqXG4gICAgICogXy5taW5CeShvYmplY3RzLCBmdW5jdGlvbihvKSB7IHJldHVybiBvLm47IH0pO1xuICAgICAqIC8vID0+IHsgJ24nOiAxIH1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8ubWluQnkob2JqZWN0cywgJ24nKTtcbiAgICAgKiAvLyA9PiB7ICduJzogMSB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gbWluQnkoYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICAgICAgPyBiYXNlRXh0cmVtdW0oYXJyYXksIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSwgYmFzZUx0KVxuICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBNdWx0aXBseSB0d28gbnVtYmVycy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjcuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG11bHRpcGxpZXIgVGhlIGZpcnN0IG51bWJlciBpbiBhIG11bHRpcGxpY2F0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBtdWx0aXBsaWNhbmQgVGhlIHNlY29uZCBudW1iZXIgaW4gYSBtdWx0aXBsaWNhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBwcm9kdWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLm11bHRpcGx5KDYsIDQpO1xuICAgICAqIC8vID0+IDI0XG4gICAgICovXG4gICAgdmFyIG11bHRpcGx5ID0gY3JlYXRlTWF0aE9wZXJhdGlvbihmdW5jdGlvbihtdWx0aXBsaWVyLCBtdWx0aXBsaWNhbmQpIHtcbiAgICAgIHJldHVybiBtdWx0aXBsaWVyICogbXVsdGlwbGljYW5kO1xuICAgIH0sIDEpO1xuXG4gICAgLyoqXG4gICAgICogQ29tcHV0ZXMgYG51bWJlcmAgcm91bmRlZCB0byBgcHJlY2lzaW9uYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjEwLjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBudW1iZXIgVGhlIG51bWJlciB0byByb3VuZC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3ByZWNpc2lvbj0wXSBUaGUgcHJlY2lzaW9uIHRvIHJvdW5kIHRvLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHJvdW5kZWQgbnVtYmVyLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnJvdW5kKDQuMDA2KTtcbiAgICAgKiAvLyA9PiA0XG4gICAgICpcbiAgICAgKiBfLnJvdW5kKDQuMDA2LCAyKTtcbiAgICAgKiAvLyA9PiA0LjAxXG4gICAgICpcbiAgICAgKiBfLnJvdW5kKDQwNjAsIC0yKTtcbiAgICAgKiAvLyA9PiA0MTAwXG4gICAgICovXG4gICAgdmFyIHJvdW5kID0gY3JlYXRlUm91bmQoJ3JvdW5kJyk7XG5cbiAgICAvKipcbiAgICAgKiBTdWJ0cmFjdCB0d28gbnVtYmVycy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG1pbnVlbmQgVGhlIGZpcnN0IG51bWJlciBpbiBhIHN1YnRyYWN0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzdWJ0cmFoZW5kIFRoZSBzZWNvbmQgbnVtYmVyIGluIGEgc3VidHJhY3Rpb24uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgZGlmZmVyZW5jZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zdWJ0cmFjdCg2LCA0KTtcbiAgICAgKiAvLyA9PiAyXG4gICAgICovXG4gICAgdmFyIHN1YnRyYWN0ID0gY3JlYXRlTWF0aE9wZXJhdGlvbihmdW5jdGlvbihtaW51ZW5kLCBzdWJ0cmFoZW5kKSB7XG4gICAgICByZXR1cm4gbWludWVuZCAtIHN1YnRyYWhlbmQ7XG4gICAgfSwgMCk7XG5cbiAgICAvKipcbiAgICAgKiBDb21wdXRlcyB0aGUgc3VtIG9mIHRoZSB2YWx1ZXMgaW4gYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjQuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBzdW0uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc3VtKFs0LCAyLCA4LCA2XSk7XG4gICAgICogLy8gPT4gMjBcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdW0oYXJyYXkpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VTdW0oYXJyYXksIGlkZW50aXR5KVxuICAgICAgICA6IDA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5zdW1gIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB3aGljaCBpc1xuICAgICAqIGludm9rZWQgZm9yIGVhY2ggZWxlbWVudCBpbiBgYXJyYXlgIHRvIGdlbmVyYXRlIHRoZSB2YWx1ZSB0byBiZSBzdW1tZWQuXG4gICAgICogVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHN1bS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAnbic6IDQgfSwgeyAnbic6IDIgfSwgeyAnbic6IDggfSwgeyAnbic6IDYgfV07XG4gICAgICpcbiAgICAgKiBfLnN1bUJ5KG9iamVjdHMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8ubjsgfSk7XG4gICAgICogLy8gPT4gMjBcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uc3VtQnkob2JqZWN0cywgJ24nKTtcbiAgICAgKiAvLyA9PiAyMFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN1bUJ5KGFycmF5LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZVN1bShhcnJheSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpKVxuICAgICAgICA6IDA7XG4gICAgfVxuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLy8gQWRkIG1ldGhvZHMgdGhhdCByZXR1cm4gd3JhcHBlZCB2YWx1ZXMgaW4gY2hhaW4gc2VxdWVuY2VzLlxuICAgIGxvZGFzaC5hZnRlciA9IGFmdGVyO1xuICAgIGxvZGFzaC5hcnkgPSBhcnk7XG4gICAgbG9kYXNoLmFzc2lnbiA9IGFzc2lnbjtcbiAgICBsb2Rhc2guYXNzaWduSW4gPSBhc3NpZ25JbjtcbiAgICBsb2Rhc2guYXNzaWduSW5XaXRoID0gYXNzaWduSW5XaXRoO1xuICAgIGxvZGFzaC5hc3NpZ25XaXRoID0gYXNzaWduV2l0aDtcbiAgICBsb2Rhc2guYXQgPSBhdDtcbiAgICBsb2Rhc2guYmVmb3JlID0gYmVmb3JlO1xuICAgIGxvZGFzaC5iaW5kID0gYmluZDtcbiAgICBsb2Rhc2guYmluZEFsbCA9IGJpbmRBbGw7XG4gICAgbG9kYXNoLmJpbmRLZXkgPSBiaW5kS2V5O1xuICAgIGxvZGFzaC5jYXN0QXJyYXkgPSBjYXN0QXJyYXk7XG4gICAgbG9kYXNoLmNoYWluID0gY2hhaW47XG4gICAgbG9kYXNoLmNodW5rID0gY2h1bms7XG4gICAgbG9kYXNoLmNvbXBhY3QgPSBjb21wYWN0O1xuICAgIGxvZGFzaC5jb25jYXQgPSBjb25jYXQ7XG4gICAgbG9kYXNoLmNvbmQgPSBjb25kO1xuICAgIGxvZGFzaC5jb25mb3JtcyA9IGNvbmZvcm1zO1xuICAgIGxvZGFzaC5jb25zdGFudCA9IGNvbnN0YW50O1xuICAgIGxvZGFzaC5jb3VudEJ5ID0gY291bnRCeTtcbiAgICBsb2Rhc2guY3JlYXRlID0gY3JlYXRlO1xuICAgIGxvZGFzaC5jdXJyeSA9IGN1cnJ5O1xuICAgIGxvZGFzaC5jdXJyeVJpZ2h0ID0gY3VycnlSaWdodDtcbiAgICBsb2Rhc2guZGVib3VuY2UgPSBkZWJvdW5jZTtcbiAgICBsb2Rhc2guZGVmYXVsdHMgPSBkZWZhdWx0cztcbiAgICBsb2Rhc2guZGVmYXVsdHNEZWVwID0gZGVmYXVsdHNEZWVwO1xuICAgIGxvZGFzaC5kZWZlciA9IGRlZmVyO1xuICAgIGxvZGFzaC5kZWxheSA9IGRlbGF5O1xuICAgIGxvZGFzaC5kaWZmZXJlbmNlID0gZGlmZmVyZW5jZTtcbiAgICBsb2Rhc2guZGlmZmVyZW5jZUJ5ID0gZGlmZmVyZW5jZUJ5O1xuICAgIGxvZGFzaC5kaWZmZXJlbmNlV2l0aCA9IGRpZmZlcmVuY2VXaXRoO1xuICAgIGxvZGFzaC5kcm9wID0gZHJvcDtcbiAgICBsb2Rhc2guZHJvcFJpZ2h0ID0gZHJvcFJpZ2h0O1xuICAgIGxvZGFzaC5kcm9wUmlnaHRXaGlsZSA9IGRyb3BSaWdodFdoaWxlO1xuICAgIGxvZGFzaC5kcm9wV2hpbGUgPSBkcm9wV2hpbGU7XG4gICAgbG9kYXNoLmZpbGwgPSBmaWxsO1xuICAgIGxvZGFzaC5maWx0ZXIgPSBmaWx0ZXI7XG4gICAgbG9kYXNoLmZsYXRNYXAgPSBmbGF0TWFwO1xuICAgIGxvZGFzaC5mbGF0TWFwRGVlcCA9IGZsYXRNYXBEZWVwO1xuICAgIGxvZGFzaC5mbGF0TWFwRGVwdGggPSBmbGF0TWFwRGVwdGg7XG4gICAgbG9kYXNoLmZsYXR0ZW4gPSBmbGF0dGVuO1xuICAgIGxvZGFzaC5mbGF0dGVuRGVlcCA9IGZsYXR0ZW5EZWVwO1xuICAgIGxvZGFzaC5mbGF0dGVuRGVwdGggPSBmbGF0dGVuRGVwdGg7XG4gICAgbG9kYXNoLmZsaXAgPSBmbGlwO1xuICAgIGxvZGFzaC5mbG93ID0gZmxvdztcbiAgICBsb2Rhc2guZmxvd1JpZ2h0ID0gZmxvd1JpZ2h0O1xuICAgIGxvZGFzaC5mcm9tUGFpcnMgPSBmcm9tUGFpcnM7XG4gICAgbG9kYXNoLmZ1bmN0aW9ucyA9IGZ1bmN0aW9ucztcbiAgICBsb2Rhc2guZnVuY3Rpb25zSW4gPSBmdW5jdGlvbnNJbjtcbiAgICBsb2Rhc2guZ3JvdXBCeSA9IGdyb3VwQnk7XG4gICAgbG9kYXNoLmluaXRpYWwgPSBpbml0aWFsO1xuICAgIGxvZGFzaC5pbnRlcnNlY3Rpb24gPSBpbnRlcnNlY3Rpb247XG4gICAgbG9kYXNoLmludGVyc2VjdGlvbkJ5ID0gaW50ZXJzZWN0aW9uQnk7XG4gICAgbG9kYXNoLmludGVyc2VjdGlvbldpdGggPSBpbnRlcnNlY3Rpb25XaXRoO1xuICAgIGxvZGFzaC5pbnZlcnQgPSBpbnZlcnQ7XG4gICAgbG9kYXNoLmludmVydEJ5ID0gaW52ZXJ0Qnk7XG4gICAgbG9kYXNoLmludm9rZU1hcCA9IGludm9rZU1hcDtcbiAgICBsb2Rhc2guaXRlcmF0ZWUgPSBpdGVyYXRlZTtcbiAgICBsb2Rhc2gua2V5QnkgPSBrZXlCeTtcbiAgICBsb2Rhc2gua2V5cyA9IGtleXM7XG4gICAgbG9kYXNoLmtleXNJbiA9IGtleXNJbjtcbiAgICBsb2Rhc2gubWFwID0gbWFwO1xuICAgIGxvZGFzaC5tYXBLZXlzID0gbWFwS2V5cztcbiAgICBsb2Rhc2gubWFwVmFsdWVzID0gbWFwVmFsdWVzO1xuICAgIGxvZGFzaC5tYXRjaGVzID0gbWF0Y2hlcztcbiAgICBsb2Rhc2gubWF0Y2hlc1Byb3BlcnR5ID0gbWF0Y2hlc1Byb3BlcnR5O1xuICAgIGxvZGFzaC5tZW1vaXplID0gbWVtb2l6ZTtcbiAgICBsb2Rhc2gubWVyZ2UgPSBtZXJnZTtcbiAgICBsb2Rhc2gubWVyZ2VXaXRoID0gbWVyZ2VXaXRoO1xuICAgIGxvZGFzaC5tZXRob2QgPSBtZXRob2Q7XG4gICAgbG9kYXNoLm1ldGhvZE9mID0gbWV0aG9kT2Y7XG4gICAgbG9kYXNoLm1peGluID0gbWl4aW47XG4gICAgbG9kYXNoLm5lZ2F0ZSA9IG5lZ2F0ZTtcbiAgICBsb2Rhc2gubnRoQXJnID0gbnRoQXJnO1xuICAgIGxvZGFzaC5vbWl0ID0gb21pdDtcbiAgICBsb2Rhc2gub21pdEJ5ID0gb21pdEJ5O1xuICAgIGxvZGFzaC5vbmNlID0gb25jZTtcbiAgICBsb2Rhc2gub3JkZXJCeSA9IG9yZGVyQnk7XG4gICAgbG9kYXNoLm92ZXIgPSBvdmVyO1xuICAgIGxvZGFzaC5vdmVyQXJncyA9IG92ZXJBcmdzO1xuICAgIGxvZGFzaC5vdmVyRXZlcnkgPSBvdmVyRXZlcnk7XG4gICAgbG9kYXNoLm92ZXJTb21lID0gb3ZlclNvbWU7XG4gICAgbG9kYXNoLnBhcnRpYWwgPSBwYXJ0aWFsO1xuICAgIGxvZGFzaC5wYXJ0aWFsUmlnaHQgPSBwYXJ0aWFsUmlnaHQ7XG4gICAgbG9kYXNoLnBhcnRpdGlvbiA9IHBhcnRpdGlvbjtcbiAgICBsb2Rhc2gucGljayA9IHBpY2s7XG4gICAgbG9kYXNoLnBpY2tCeSA9IHBpY2tCeTtcbiAgICBsb2Rhc2gucHJvcGVydHkgPSBwcm9wZXJ0eTtcbiAgICBsb2Rhc2gucHJvcGVydHlPZiA9IHByb3BlcnR5T2Y7XG4gICAgbG9kYXNoLnB1bGwgPSBwdWxsO1xuICAgIGxvZGFzaC5wdWxsQWxsID0gcHVsbEFsbDtcbiAgICBsb2Rhc2gucHVsbEFsbEJ5ID0gcHVsbEFsbEJ5O1xuICAgIGxvZGFzaC5wdWxsQWxsV2l0aCA9IHB1bGxBbGxXaXRoO1xuICAgIGxvZGFzaC5wdWxsQXQgPSBwdWxsQXQ7XG4gICAgbG9kYXNoLnJhbmdlID0gcmFuZ2U7XG4gICAgbG9kYXNoLnJhbmdlUmlnaHQgPSByYW5nZVJpZ2h0O1xuICAgIGxvZGFzaC5yZWFyZyA9IHJlYXJnO1xuICAgIGxvZGFzaC5yZWplY3QgPSByZWplY3Q7XG4gICAgbG9kYXNoLnJlbW92ZSA9IHJlbW92ZTtcbiAgICBsb2Rhc2gucmVzdCA9IHJlc3Q7XG4gICAgbG9kYXNoLnJldmVyc2UgPSByZXZlcnNlO1xuICAgIGxvZGFzaC5zYW1wbGVTaXplID0gc2FtcGxlU2l6ZTtcbiAgICBsb2Rhc2guc2V0ID0gc2V0O1xuICAgIGxvZGFzaC5zZXRXaXRoID0gc2V0V2l0aDtcbiAgICBsb2Rhc2guc2h1ZmZsZSA9IHNodWZmbGU7XG4gICAgbG9kYXNoLnNsaWNlID0gc2xpY2U7XG4gICAgbG9kYXNoLnNvcnRCeSA9IHNvcnRCeTtcbiAgICBsb2Rhc2guc29ydGVkVW5pcSA9IHNvcnRlZFVuaXE7XG4gICAgbG9kYXNoLnNvcnRlZFVuaXFCeSA9IHNvcnRlZFVuaXFCeTtcbiAgICBsb2Rhc2guc3BsaXQgPSBzcGxpdDtcbiAgICBsb2Rhc2guc3ByZWFkID0gc3ByZWFkO1xuICAgIGxvZGFzaC50YWlsID0gdGFpbDtcbiAgICBsb2Rhc2gudGFrZSA9IHRha2U7XG4gICAgbG9kYXNoLnRha2VSaWdodCA9IHRha2VSaWdodDtcbiAgICBsb2Rhc2gudGFrZVJpZ2h0V2hpbGUgPSB0YWtlUmlnaHRXaGlsZTtcbiAgICBsb2Rhc2gudGFrZVdoaWxlID0gdGFrZVdoaWxlO1xuICAgIGxvZGFzaC50YXAgPSB0YXA7XG4gICAgbG9kYXNoLnRocm90dGxlID0gdGhyb3R0bGU7XG4gICAgbG9kYXNoLnRocnUgPSB0aHJ1O1xuICAgIGxvZGFzaC50b0FycmF5ID0gdG9BcnJheTtcbiAgICBsb2Rhc2gudG9QYWlycyA9IHRvUGFpcnM7XG4gICAgbG9kYXNoLnRvUGFpcnNJbiA9IHRvUGFpcnNJbjtcbiAgICBsb2Rhc2gudG9QYXRoID0gdG9QYXRoO1xuICAgIGxvZGFzaC50b1BsYWluT2JqZWN0ID0gdG9QbGFpbk9iamVjdDtcbiAgICBsb2Rhc2gudHJhbnNmb3JtID0gdHJhbnNmb3JtO1xuICAgIGxvZGFzaC51bmFyeSA9IHVuYXJ5O1xuICAgIGxvZGFzaC51bmlvbiA9IHVuaW9uO1xuICAgIGxvZGFzaC51bmlvbkJ5ID0gdW5pb25CeTtcbiAgICBsb2Rhc2gudW5pb25XaXRoID0gdW5pb25XaXRoO1xuICAgIGxvZGFzaC51bmlxID0gdW5pcTtcbiAgICBsb2Rhc2gudW5pcUJ5ID0gdW5pcUJ5O1xuICAgIGxvZGFzaC51bmlxV2l0aCA9IHVuaXFXaXRoO1xuICAgIGxvZGFzaC51bnNldCA9IHVuc2V0O1xuICAgIGxvZGFzaC51bnppcCA9IHVuemlwO1xuICAgIGxvZGFzaC51bnppcFdpdGggPSB1bnppcFdpdGg7XG4gICAgbG9kYXNoLnVwZGF0ZSA9IHVwZGF0ZTtcbiAgICBsb2Rhc2gudXBkYXRlV2l0aCA9IHVwZGF0ZVdpdGg7XG4gICAgbG9kYXNoLnZhbHVlcyA9IHZhbHVlcztcbiAgICBsb2Rhc2gudmFsdWVzSW4gPSB2YWx1ZXNJbjtcbiAgICBsb2Rhc2gud2l0aG91dCA9IHdpdGhvdXQ7XG4gICAgbG9kYXNoLndvcmRzID0gd29yZHM7XG4gICAgbG9kYXNoLndyYXAgPSB3cmFwO1xuICAgIGxvZGFzaC54b3IgPSB4b3I7XG4gICAgbG9kYXNoLnhvckJ5ID0geG9yQnk7XG4gICAgbG9kYXNoLnhvcldpdGggPSB4b3JXaXRoO1xuICAgIGxvZGFzaC56aXAgPSB6aXA7XG4gICAgbG9kYXNoLnppcE9iamVjdCA9IHppcE9iamVjdDtcbiAgICBsb2Rhc2guemlwT2JqZWN0RGVlcCA9IHppcE9iamVjdERlZXA7XG4gICAgbG9kYXNoLnppcFdpdGggPSB6aXBXaXRoO1xuXG4gICAgLy8gQWRkIGFsaWFzZXMuXG4gICAgbG9kYXNoLmVudHJpZXMgPSB0b1BhaXJzO1xuICAgIGxvZGFzaC5lbnRyaWVzSW4gPSB0b1BhaXJzSW47XG4gICAgbG9kYXNoLmV4dGVuZCA9IGFzc2lnbkluO1xuICAgIGxvZGFzaC5leHRlbmRXaXRoID0gYXNzaWduSW5XaXRoO1xuXG4gICAgLy8gQWRkIG1ldGhvZHMgdG8gYGxvZGFzaC5wcm90b3R5cGVgLlxuICAgIG1peGluKGxvZGFzaCwgbG9kYXNoKTtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8vIEFkZCBtZXRob2RzIHRoYXQgcmV0dXJuIHVud3JhcHBlZCB2YWx1ZXMgaW4gY2hhaW4gc2VxdWVuY2VzLlxuICAgIGxvZGFzaC5hZGQgPSBhZGQ7XG4gICAgbG9kYXNoLmF0dGVtcHQgPSBhdHRlbXB0O1xuICAgIGxvZGFzaC5jYW1lbENhc2UgPSBjYW1lbENhc2U7XG4gICAgbG9kYXNoLmNhcGl0YWxpemUgPSBjYXBpdGFsaXplO1xuICAgIGxvZGFzaC5jZWlsID0gY2VpbDtcbiAgICBsb2Rhc2guY2xhbXAgPSBjbGFtcDtcbiAgICBsb2Rhc2guY2xvbmUgPSBjbG9uZTtcbiAgICBsb2Rhc2guY2xvbmVEZWVwID0gY2xvbmVEZWVwO1xuICAgIGxvZGFzaC5jbG9uZURlZXBXaXRoID0gY2xvbmVEZWVwV2l0aDtcbiAgICBsb2Rhc2guY2xvbmVXaXRoID0gY2xvbmVXaXRoO1xuICAgIGxvZGFzaC5jb25mb3Jtc1RvID0gY29uZm9ybXNUbztcbiAgICBsb2Rhc2guZGVidXJyID0gZGVidXJyO1xuICAgIGxvZGFzaC5kZWZhdWx0VG8gPSBkZWZhdWx0VG87XG4gICAgbG9kYXNoLmRpdmlkZSA9IGRpdmlkZTtcbiAgICBsb2Rhc2guZW5kc1dpdGggPSBlbmRzV2l0aDtcbiAgICBsb2Rhc2guZXEgPSBlcTtcbiAgICBsb2Rhc2guZXNjYXBlID0gZXNjYXBlO1xuICAgIGxvZGFzaC5lc2NhcGVSZWdFeHAgPSBlc2NhcGVSZWdFeHA7XG4gICAgbG9kYXNoLmV2ZXJ5ID0gZXZlcnk7XG4gICAgbG9kYXNoLmZpbmQgPSBmaW5kO1xuICAgIGxvZGFzaC5maW5kSW5kZXggPSBmaW5kSW5kZXg7XG4gICAgbG9kYXNoLmZpbmRLZXkgPSBmaW5kS2V5O1xuICAgIGxvZGFzaC5maW5kTGFzdCA9IGZpbmRMYXN0O1xuICAgIGxvZGFzaC5maW5kTGFzdEluZGV4ID0gZmluZExhc3RJbmRleDtcbiAgICBsb2Rhc2guZmluZExhc3RLZXkgPSBmaW5kTGFzdEtleTtcbiAgICBsb2Rhc2guZmxvb3IgPSBmbG9vcjtcbiAgICBsb2Rhc2guZm9yRWFjaCA9IGZvckVhY2g7XG4gICAgbG9kYXNoLmZvckVhY2hSaWdodCA9IGZvckVhY2hSaWdodDtcbiAgICBsb2Rhc2guZm9ySW4gPSBmb3JJbjtcbiAgICBsb2Rhc2guZm9ySW5SaWdodCA9IGZvckluUmlnaHQ7XG4gICAgbG9kYXNoLmZvck93biA9IGZvck93bjtcbiAgICBsb2Rhc2guZm9yT3duUmlnaHQgPSBmb3JPd25SaWdodDtcbiAgICBsb2Rhc2guZ2V0ID0gZ2V0O1xuICAgIGxvZGFzaC5ndCA9IGd0O1xuICAgIGxvZGFzaC5ndGUgPSBndGU7XG4gICAgbG9kYXNoLmhhcyA9IGhhcztcbiAgICBsb2Rhc2guaGFzSW4gPSBoYXNJbjtcbiAgICBsb2Rhc2guaGVhZCA9IGhlYWQ7XG4gICAgbG9kYXNoLmlkZW50aXR5ID0gaWRlbnRpdHk7XG4gICAgbG9kYXNoLmluY2x1ZGVzID0gaW5jbHVkZXM7XG4gICAgbG9kYXNoLmluZGV4T2YgPSBpbmRleE9mO1xuICAgIGxvZGFzaC5pblJhbmdlID0gaW5SYW5nZTtcbiAgICBsb2Rhc2guaW52b2tlID0gaW52b2tlO1xuICAgIGxvZGFzaC5pc0FyZ3VtZW50cyA9IGlzQXJndW1lbnRzO1xuICAgIGxvZGFzaC5pc0FycmF5ID0gaXNBcnJheTtcbiAgICBsb2Rhc2guaXNBcnJheUJ1ZmZlciA9IGlzQXJyYXlCdWZmZXI7XG4gICAgbG9kYXNoLmlzQXJyYXlMaWtlID0gaXNBcnJheUxpa2U7XG4gICAgbG9kYXNoLmlzQXJyYXlMaWtlT2JqZWN0ID0gaXNBcnJheUxpa2VPYmplY3Q7XG4gICAgbG9kYXNoLmlzQm9vbGVhbiA9IGlzQm9vbGVhbjtcbiAgICBsb2Rhc2guaXNCdWZmZXIgPSBpc0J1ZmZlcjtcbiAgICBsb2Rhc2guaXNEYXRlID0gaXNEYXRlO1xuICAgIGxvZGFzaC5pc0VsZW1lbnQgPSBpc0VsZW1lbnQ7XG4gICAgbG9kYXNoLmlzRW1wdHkgPSBpc0VtcHR5O1xuICAgIGxvZGFzaC5pc0VxdWFsID0gaXNFcXVhbDtcbiAgICBsb2Rhc2guaXNFcXVhbFdpdGggPSBpc0VxdWFsV2l0aDtcbiAgICBsb2Rhc2guaXNFcnJvciA9IGlzRXJyb3I7XG4gICAgbG9kYXNoLmlzRmluaXRlID0gaXNGaW5pdGU7XG4gICAgbG9kYXNoLmlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uO1xuICAgIGxvZGFzaC5pc0ludGVnZXIgPSBpc0ludGVnZXI7XG4gICAgbG9kYXNoLmlzTGVuZ3RoID0gaXNMZW5ndGg7XG4gICAgbG9kYXNoLmlzTWFwID0gaXNNYXA7XG4gICAgbG9kYXNoLmlzTWF0Y2ggPSBpc01hdGNoO1xuICAgIGxvZGFzaC5pc01hdGNoV2l0aCA9IGlzTWF0Y2hXaXRoO1xuICAgIGxvZGFzaC5pc05hTiA9IGlzTmFOO1xuICAgIGxvZGFzaC5pc05hdGl2ZSA9IGlzTmF0aXZlO1xuICAgIGxvZGFzaC5pc05pbCA9IGlzTmlsO1xuICAgIGxvZGFzaC5pc051bGwgPSBpc051bGw7XG4gICAgbG9kYXNoLmlzTnVtYmVyID0gaXNOdW1iZXI7XG4gICAgbG9kYXNoLmlzT2JqZWN0ID0gaXNPYmplY3Q7XG4gICAgbG9kYXNoLmlzT2JqZWN0TGlrZSA9IGlzT2JqZWN0TGlrZTtcbiAgICBsb2Rhc2guaXNQbGFpbk9iamVjdCA9IGlzUGxhaW5PYmplY3Q7XG4gICAgbG9kYXNoLmlzUmVnRXhwID0gaXNSZWdFeHA7XG4gICAgbG9kYXNoLmlzU2FmZUludGVnZXIgPSBpc1NhZmVJbnRlZ2VyO1xuICAgIGxvZGFzaC5pc1NldCA9IGlzU2V0O1xuICAgIGxvZGFzaC5pc1N0cmluZyA9IGlzU3RyaW5nO1xuICAgIGxvZGFzaC5pc1N5bWJvbCA9IGlzU3ltYm9sO1xuICAgIGxvZGFzaC5pc1R5cGVkQXJyYXkgPSBpc1R5cGVkQXJyYXk7XG4gICAgbG9kYXNoLmlzVW5kZWZpbmVkID0gaXNVbmRlZmluZWQ7XG4gICAgbG9kYXNoLmlzV2Vha01hcCA9IGlzV2Vha01hcDtcbiAgICBsb2Rhc2guaXNXZWFrU2V0ID0gaXNXZWFrU2V0O1xuICAgIGxvZGFzaC5qb2luID0gam9pbjtcbiAgICBsb2Rhc2gua2ViYWJDYXNlID0ga2ViYWJDYXNlO1xuICAgIGxvZGFzaC5sYXN0ID0gbGFzdDtcbiAgICBsb2Rhc2gubGFzdEluZGV4T2YgPSBsYXN0SW5kZXhPZjtcbiAgICBsb2Rhc2gubG93ZXJDYXNlID0gbG93ZXJDYXNlO1xuICAgIGxvZGFzaC5sb3dlckZpcnN0ID0gbG93ZXJGaXJzdDtcbiAgICBsb2Rhc2gubHQgPSBsdDtcbiAgICBsb2Rhc2gubHRlID0gbHRlO1xuICAgIGxvZGFzaC5tYXggPSBtYXg7XG4gICAgbG9kYXNoLm1heEJ5ID0gbWF4Qnk7XG4gICAgbG9kYXNoLm1lYW4gPSBtZWFuO1xuICAgIGxvZGFzaC5tZWFuQnkgPSBtZWFuQnk7XG4gICAgbG9kYXNoLm1pbiA9IG1pbjtcbiAgICBsb2Rhc2gubWluQnkgPSBtaW5CeTtcbiAgICBsb2Rhc2guc3R1YkFycmF5ID0gc3R1YkFycmF5O1xuICAgIGxvZGFzaC5zdHViRmFsc2UgPSBzdHViRmFsc2U7XG4gICAgbG9kYXNoLnN0dWJPYmplY3QgPSBzdHViT2JqZWN0O1xuICAgIGxvZGFzaC5zdHViU3RyaW5nID0gc3R1YlN0cmluZztcbiAgICBsb2Rhc2guc3R1YlRydWUgPSBzdHViVHJ1ZTtcbiAgICBsb2Rhc2gubXVsdGlwbHkgPSBtdWx0aXBseTtcbiAgICBsb2Rhc2gubnRoID0gbnRoO1xuICAgIGxvZGFzaC5ub0NvbmZsaWN0ID0gbm9Db25mbGljdDtcbiAgICBsb2Rhc2gubm9vcCA9IG5vb3A7XG4gICAgbG9kYXNoLm5vdyA9IG5vdztcbiAgICBsb2Rhc2gucGFkID0gcGFkO1xuICAgIGxvZGFzaC5wYWRFbmQgPSBwYWRFbmQ7XG4gICAgbG9kYXNoLnBhZFN0YXJ0ID0gcGFkU3RhcnQ7XG4gICAgbG9kYXNoLnBhcnNlSW50ID0gcGFyc2VJbnQ7XG4gICAgbG9kYXNoLnJhbmRvbSA9IHJhbmRvbTtcbiAgICBsb2Rhc2gucmVkdWNlID0gcmVkdWNlO1xuICAgIGxvZGFzaC5yZWR1Y2VSaWdodCA9IHJlZHVjZVJpZ2h0O1xuICAgIGxvZGFzaC5yZXBlYXQgPSByZXBlYXQ7XG4gICAgbG9kYXNoLnJlcGxhY2UgPSByZXBsYWNlO1xuICAgIGxvZGFzaC5yZXN1bHQgPSByZXN1bHQ7XG4gICAgbG9kYXNoLnJvdW5kID0gcm91bmQ7XG4gICAgbG9kYXNoLnJ1bkluQ29udGV4dCA9IHJ1bkluQ29udGV4dDtcbiAgICBsb2Rhc2guc2FtcGxlID0gc2FtcGxlO1xuICAgIGxvZGFzaC5zaXplID0gc2l6ZTtcbiAgICBsb2Rhc2guc25ha2VDYXNlID0gc25ha2VDYXNlO1xuICAgIGxvZGFzaC5zb21lID0gc29tZTtcbiAgICBsb2Rhc2guc29ydGVkSW5kZXggPSBzb3J0ZWRJbmRleDtcbiAgICBsb2Rhc2guc29ydGVkSW5kZXhCeSA9IHNvcnRlZEluZGV4Qnk7XG4gICAgbG9kYXNoLnNvcnRlZEluZGV4T2YgPSBzb3J0ZWRJbmRleE9mO1xuICAgIGxvZGFzaC5zb3J0ZWRMYXN0SW5kZXggPSBzb3J0ZWRMYXN0SW5kZXg7XG4gICAgbG9kYXNoLnNvcnRlZExhc3RJbmRleEJ5ID0gc29ydGVkTGFzdEluZGV4Qnk7XG4gICAgbG9kYXNoLnNvcnRlZExhc3RJbmRleE9mID0gc29ydGVkTGFzdEluZGV4T2Y7XG4gICAgbG9kYXNoLnN0YXJ0Q2FzZSA9IHN0YXJ0Q2FzZTtcbiAgICBsb2Rhc2guc3RhcnRzV2l0aCA9IHN0YXJ0c1dpdGg7XG4gICAgbG9kYXNoLnN1YnRyYWN0ID0gc3VidHJhY3Q7XG4gICAgbG9kYXNoLnN1bSA9IHN1bTtcbiAgICBsb2Rhc2guc3VtQnkgPSBzdW1CeTtcbiAgICBsb2Rhc2gudGVtcGxhdGUgPSB0ZW1wbGF0ZTtcbiAgICBsb2Rhc2gudGltZXMgPSB0aW1lcztcbiAgICBsb2Rhc2gudG9GaW5pdGUgPSB0b0Zpbml0ZTtcbiAgICBsb2Rhc2gudG9JbnRlZ2VyID0gdG9JbnRlZ2VyO1xuICAgIGxvZGFzaC50b0xlbmd0aCA9IHRvTGVuZ3RoO1xuICAgIGxvZGFzaC50b0xvd2VyID0gdG9Mb3dlcjtcbiAgICBsb2Rhc2gudG9OdW1iZXIgPSB0b051bWJlcjtcbiAgICBsb2Rhc2gudG9TYWZlSW50ZWdlciA9IHRvU2FmZUludGVnZXI7XG4gICAgbG9kYXNoLnRvU3RyaW5nID0gdG9TdHJpbmc7XG4gICAgbG9kYXNoLnRvVXBwZXIgPSB0b1VwcGVyO1xuICAgIGxvZGFzaC50cmltID0gdHJpbTtcbiAgICBsb2Rhc2gudHJpbUVuZCA9IHRyaW1FbmQ7XG4gICAgbG9kYXNoLnRyaW1TdGFydCA9IHRyaW1TdGFydDtcbiAgICBsb2Rhc2gudHJ1bmNhdGUgPSB0cnVuY2F0ZTtcbiAgICBsb2Rhc2gudW5lc2NhcGUgPSB1bmVzY2FwZTtcbiAgICBsb2Rhc2gudW5pcXVlSWQgPSB1bmlxdWVJZDtcbiAgICBsb2Rhc2gudXBwZXJDYXNlID0gdXBwZXJDYXNlO1xuICAgIGxvZGFzaC51cHBlckZpcnN0ID0gdXBwZXJGaXJzdDtcblxuICAgIC8vIEFkZCBhbGlhc2VzLlxuICAgIGxvZGFzaC5lYWNoID0gZm9yRWFjaDtcbiAgICBsb2Rhc2guZWFjaFJpZ2h0ID0gZm9yRWFjaFJpZ2h0O1xuICAgIGxvZGFzaC5maXJzdCA9IGhlYWQ7XG5cbiAgICBtaXhpbihsb2Rhc2gsIChmdW5jdGlvbigpIHtcbiAgICAgIHZhciBzb3VyY2UgPSB7fTtcbiAgICAgIGJhc2VGb3JPd24obG9kYXNoLCBmdW5jdGlvbihmdW5jLCBtZXRob2ROYW1lKSB7XG4gICAgICAgIGlmICghaGFzT3duUHJvcGVydHkuY2FsbChsb2Rhc2gucHJvdG90eXBlLCBtZXRob2ROYW1lKSkge1xuICAgICAgICAgIHNvdXJjZVttZXRob2ROYW1lXSA9IGZ1bmM7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHNvdXJjZTtcbiAgICB9KCkpLCB7ICdjaGFpbic6IGZhbHNlIH0pO1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogVGhlIHNlbWFudGljIHZlcnNpb24gbnVtYmVyLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICBsb2Rhc2guVkVSU0lPTiA9IFZFUlNJT047XG5cbiAgICAvLyBBc3NpZ24gZGVmYXVsdCBwbGFjZWhvbGRlcnMuXG4gICAgYXJyYXlFYWNoKFsnYmluZCcsICdiaW5kS2V5JywgJ2N1cnJ5JywgJ2N1cnJ5UmlnaHQnLCAncGFydGlhbCcsICdwYXJ0aWFsUmlnaHQnXSwgZnVuY3Rpb24obWV0aG9kTmFtZSkge1xuICAgICAgbG9kYXNoW21ldGhvZE5hbWVdLnBsYWNlaG9sZGVyID0gbG9kYXNoO1xuICAgIH0pO1xuXG4gICAgLy8gQWRkIGBMYXp5V3JhcHBlcmAgbWV0aG9kcyBmb3IgYF8uZHJvcGAgYW5kIGBfLnRha2VgIHZhcmlhbnRzLlxuICAgIGFycmF5RWFjaChbJ2Ryb3AnLCAndGFrZSddLCBmdW5jdGlvbihtZXRob2ROYW1lLCBpbmRleCkge1xuICAgICAgTGF6eVdyYXBwZXIucHJvdG90eXBlW21ldGhvZE5hbWVdID0gZnVuY3Rpb24obikge1xuICAgICAgICBuID0gbiA9PT0gdW5kZWZpbmVkID8gMSA6IG5hdGl2ZU1heCh0b0ludGVnZXIobiksIDApO1xuXG4gICAgICAgIHZhciByZXN1bHQgPSAodGhpcy5fX2ZpbHRlcmVkX18gJiYgIWluZGV4KVxuICAgICAgICAgID8gbmV3IExhenlXcmFwcGVyKHRoaXMpXG4gICAgICAgICAgOiB0aGlzLmNsb25lKCk7XG5cbiAgICAgICAgaWYgKHJlc3VsdC5fX2ZpbHRlcmVkX18pIHtcbiAgICAgICAgICByZXN1bHQuX190YWtlQ291bnRfXyA9IG5hdGl2ZU1pbihuLCByZXN1bHQuX190YWtlQ291bnRfXyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzdWx0Ll9fdmlld3NfXy5wdXNoKHtcbiAgICAgICAgICAgICdzaXplJzogbmF0aXZlTWluKG4sIE1BWF9BUlJBWV9MRU5HVEgpLFxuICAgICAgICAgICAgJ3R5cGUnOiBtZXRob2ROYW1lICsgKHJlc3VsdC5fX2Rpcl9fIDwgMCA/ICdSaWdodCcgOiAnJylcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfTtcblxuICAgICAgTGF6eVdyYXBwZXIucHJvdG90eXBlW21ldGhvZE5hbWUgKyAnUmlnaHQnXSA9IGZ1bmN0aW9uKG4pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmV2ZXJzZSgpW21ldGhvZE5hbWVdKG4pLnJldmVyc2UoKTtcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICAvLyBBZGQgYExhenlXcmFwcGVyYCBtZXRob2RzIHRoYXQgYWNjZXB0IGFuIGBpdGVyYXRlZWAgdmFsdWUuXG4gICAgYXJyYXlFYWNoKFsnZmlsdGVyJywgJ21hcCcsICd0YWtlV2hpbGUnXSwgZnVuY3Rpb24obWV0aG9kTmFtZSwgaW5kZXgpIHtcbiAgICAgIHZhciB0eXBlID0gaW5kZXggKyAxLFxuICAgICAgICAgIGlzRmlsdGVyID0gdHlwZSA9PSBMQVpZX0ZJTFRFUl9GTEFHIHx8IHR5cGUgPT0gTEFaWV9XSElMRV9GTEFHO1xuXG4gICAgICBMYXp5V3JhcHBlci5wcm90b3R5cGVbbWV0aG9kTmFtZV0gPSBmdW5jdGlvbihpdGVyYXRlZSkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gdGhpcy5jbG9uZSgpO1xuICAgICAgICByZXN1bHQuX19pdGVyYXRlZXNfXy5wdXNoKHtcbiAgICAgICAgICAnaXRlcmF0ZWUnOiBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMyksXG4gICAgICAgICAgJ3R5cGUnOiB0eXBlXG4gICAgICAgIH0pO1xuICAgICAgICByZXN1bHQuX19maWx0ZXJlZF9fID0gcmVzdWx0Ll9fZmlsdGVyZWRfXyB8fCBpc0ZpbHRlcjtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICAvLyBBZGQgYExhenlXcmFwcGVyYCBtZXRob2RzIGZvciBgXy5oZWFkYCBhbmQgYF8ubGFzdGAuXG4gICAgYXJyYXlFYWNoKFsnaGVhZCcsICdsYXN0J10sIGZ1bmN0aW9uKG1ldGhvZE5hbWUsIGluZGV4KSB7XG4gICAgICB2YXIgdGFrZU5hbWUgPSAndGFrZScgKyAoaW5kZXggPyAnUmlnaHQnIDogJycpO1xuXG4gICAgICBMYXp5V3JhcHBlci5wcm90b3R5cGVbbWV0aG9kTmFtZV0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXNbdGFrZU5hbWVdKDEpLnZhbHVlKClbMF07XG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgLy8gQWRkIGBMYXp5V3JhcHBlcmAgbWV0aG9kcyBmb3IgYF8uaW5pdGlhbGAgYW5kIGBfLnRhaWxgLlxuICAgIGFycmF5RWFjaChbJ2luaXRpYWwnLCAndGFpbCddLCBmdW5jdGlvbihtZXRob2ROYW1lLCBpbmRleCkge1xuICAgICAgdmFyIGRyb3BOYW1lID0gJ2Ryb3AnICsgKGluZGV4ID8gJycgOiAnUmlnaHQnKTtcblxuICAgICAgTGF6eVdyYXBwZXIucHJvdG90eXBlW21ldGhvZE5hbWVdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9fZmlsdGVyZWRfXyA/IG5ldyBMYXp5V3JhcHBlcih0aGlzKSA6IHRoaXNbZHJvcE5hbWVdKDEpO1xuICAgICAgfTtcbiAgICB9KTtcblxuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS5jb21wYWN0ID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5maWx0ZXIoaWRlbnRpdHkpO1xuICAgIH07XG5cbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUuZmluZCA9IGZ1bmN0aW9uKHByZWRpY2F0ZSkge1xuICAgICAgcmV0dXJuIHRoaXMuZmlsdGVyKHByZWRpY2F0ZSkuaGVhZCgpO1xuICAgIH07XG5cbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUuZmluZExhc3QgPSBmdW5jdGlvbihwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiB0aGlzLnJldmVyc2UoKS5maW5kKHByZWRpY2F0ZSk7XG4gICAgfTtcblxuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS5pbnZva2VNYXAgPSBiYXNlUmVzdChmdW5jdGlvbihwYXRoLCBhcmdzKSB7XG4gICAgICBpZiAodHlwZW9mIHBhdGggPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm4gbmV3IExhenlXcmFwcGVyKHRoaXMpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBiYXNlSW52b2tlKHZhbHVlLCBwYXRoLCBhcmdzKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLnJlamVjdCA9IGZ1bmN0aW9uKHByZWRpY2F0ZSkge1xuICAgICAgcmV0dXJuIHRoaXMuZmlsdGVyKG5lZ2F0ZShnZXRJdGVyYXRlZShwcmVkaWNhdGUpKSk7XG4gICAgfTtcblxuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS5zbGljZSA9IGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgICAgIHN0YXJ0ID0gdG9JbnRlZ2VyKHN0YXJ0KTtcblxuICAgICAgdmFyIHJlc3VsdCA9IHRoaXM7XG4gICAgICBpZiAocmVzdWx0Ll9fZmlsdGVyZWRfXyAmJiAoc3RhcnQgPiAwIHx8IGVuZCA8IDApKSB7XG4gICAgICAgIHJldHVybiBuZXcgTGF6eVdyYXBwZXIocmVzdWx0KTtcbiAgICAgIH1cbiAgICAgIGlmIChzdGFydCA8IDApIHtcbiAgICAgICAgcmVzdWx0ID0gcmVzdWx0LnRha2VSaWdodCgtc3RhcnQpO1xuICAgICAgfSBlbHNlIGlmIChzdGFydCkge1xuICAgICAgICByZXN1bHQgPSByZXN1bHQuZHJvcChzdGFydCk7XG4gICAgICB9XG4gICAgICBpZiAoZW5kICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgZW5kID0gdG9JbnRlZ2VyKGVuZCk7XG4gICAgICAgIHJlc3VsdCA9IGVuZCA8IDAgPyByZXN1bHQuZHJvcFJpZ2h0KC1lbmQpIDogcmVzdWx0LnRha2UoZW5kIC0gc3RhcnQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuXG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLnRha2VSaWdodFdoaWxlID0gZnVuY3Rpb24ocHJlZGljYXRlKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZXZlcnNlKCkudGFrZVdoaWxlKHByZWRpY2F0ZSkucmV2ZXJzZSgpO1xuICAgIH07XG5cbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUudG9BcnJheSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMudGFrZShNQVhfQVJSQVlfTEVOR1RIKTtcbiAgICB9O1xuXG4gICAgLy8gQWRkIGBMYXp5V3JhcHBlcmAgbWV0aG9kcyB0byBgbG9kYXNoLnByb3RvdHlwZWAuXG4gICAgYmFzZUZvck93bihMYXp5V3JhcHBlci5wcm90b3R5cGUsIGZ1bmN0aW9uKGZ1bmMsIG1ldGhvZE5hbWUpIHtcbiAgICAgIHZhciBjaGVja0l0ZXJhdGVlID0gL14oPzpmaWx0ZXJ8ZmluZHxtYXB8cmVqZWN0KXxXaGlsZSQvLnRlc3QobWV0aG9kTmFtZSksXG4gICAgICAgICAgaXNUYWtlciA9IC9eKD86aGVhZHxsYXN0KSQvLnRlc3QobWV0aG9kTmFtZSksXG4gICAgICAgICAgbG9kYXNoRnVuYyA9IGxvZGFzaFtpc1Rha2VyID8gKCd0YWtlJyArIChtZXRob2ROYW1lID09ICdsYXN0JyA/ICdSaWdodCcgOiAnJykpIDogbWV0aG9kTmFtZV0sXG4gICAgICAgICAgcmV0VW53cmFwcGVkID0gaXNUYWtlciB8fCAvXmZpbmQvLnRlc3QobWV0aG9kTmFtZSk7XG5cbiAgICAgIGlmICghbG9kYXNoRnVuYykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBsb2Rhc2gucHJvdG90eXBlW21ldGhvZE5hbWVdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IHRoaXMuX193cmFwcGVkX18sXG4gICAgICAgICAgICBhcmdzID0gaXNUYWtlciA/IFsxXSA6IGFyZ3VtZW50cyxcbiAgICAgICAgICAgIGlzTGF6eSA9IHZhbHVlIGluc3RhbmNlb2YgTGF6eVdyYXBwZXIsXG4gICAgICAgICAgICBpdGVyYXRlZSA9IGFyZ3NbMF0sXG4gICAgICAgICAgICB1c2VMYXp5ID0gaXNMYXp5IHx8IGlzQXJyYXkodmFsdWUpO1xuXG4gICAgICAgIHZhciBpbnRlcmNlcHRvciA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgdmFyIHJlc3VsdCA9IGxvZGFzaEZ1bmMuYXBwbHkobG9kYXNoLCBhcnJheVB1c2goW3ZhbHVlXSwgYXJncykpO1xuICAgICAgICAgIHJldHVybiAoaXNUYWtlciAmJiBjaGFpbkFsbCkgPyByZXN1bHRbMF0gOiByZXN1bHQ7XG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKHVzZUxhenkgJiYgY2hlY2tJdGVyYXRlZSAmJiB0eXBlb2YgaXRlcmF0ZWUgPT0gJ2Z1bmN0aW9uJyAmJiBpdGVyYXRlZS5sZW5ndGggIT0gMSkge1xuICAgICAgICAgIC8vIEF2b2lkIGxhenkgdXNlIGlmIHRoZSBpdGVyYXRlZSBoYXMgYSBcImxlbmd0aFwiIHZhbHVlIG90aGVyIHRoYW4gYDFgLlxuICAgICAgICAgIGlzTGF6eSA9IHVzZUxhenkgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgY2hhaW5BbGwgPSB0aGlzLl9fY2hhaW5fXyxcbiAgICAgICAgICAgIGlzSHlicmlkID0gISF0aGlzLl9fYWN0aW9uc19fLmxlbmd0aCxcbiAgICAgICAgICAgIGlzVW53cmFwcGVkID0gcmV0VW53cmFwcGVkICYmICFjaGFpbkFsbCxcbiAgICAgICAgICAgIG9ubHlMYXp5ID0gaXNMYXp5ICYmICFpc0h5YnJpZDtcblxuICAgICAgICBpZiAoIXJldFVud3JhcHBlZCAmJiB1c2VMYXp5KSB7XG4gICAgICAgICAgdmFsdWUgPSBvbmx5TGF6eSA/IHZhbHVlIDogbmV3IExhenlXcmFwcGVyKHRoaXMpO1xuICAgICAgICAgIHZhciByZXN1bHQgPSBmdW5jLmFwcGx5KHZhbHVlLCBhcmdzKTtcbiAgICAgICAgICByZXN1bHQuX19hY3Rpb25zX18ucHVzaCh7ICdmdW5jJzogdGhydSwgJ2FyZ3MnOiBbaW50ZXJjZXB0b3JdLCAndGhpc0FyZyc6IHVuZGVmaW5lZCB9KTtcbiAgICAgICAgICByZXR1cm4gbmV3IExvZGFzaFdyYXBwZXIocmVzdWx0LCBjaGFpbkFsbCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzVW53cmFwcGVkICYmIG9ubHlMYXp5KSB7XG4gICAgICAgICAgcmV0dXJuIGZ1bmMuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICAgIH1cbiAgICAgICAgcmVzdWx0ID0gdGhpcy50aHJ1KGludGVyY2VwdG9yKTtcbiAgICAgICAgcmV0dXJuIGlzVW53cmFwcGVkID8gKGlzVGFrZXIgPyByZXN1bHQudmFsdWUoKVswXSA6IHJlc3VsdC52YWx1ZSgpKSA6IHJlc3VsdDtcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICAvLyBBZGQgYEFycmF5YCBtZXRob2RzIHRvIGBsb2Rhc2gucHJvdG90eXBlYC5cbiAgICBhcnJheUVhY2goWydwb3AnLCAncHVzaCcsICdzaGlmdCcsICdzb3J0JywgJ3NwbGljZScsICd1bnNoaWZ0J10sIGZ1bmN0aW9uKG1ldGhvZE5hbWUpIHtcbiAgICAgIHZhciBmdW5jID0gYXJyYXlQcm90b1ttZXRob2ROYW1lXSxcbiAgICAgICAgICBjaGFpbk5hbWUgPSAvXig/OnB1c2h8c29ydHx1bnNoaWZ0KSQvLnRlc3QobWV0aG9kTmFtZSkgPyAndGFwJyA6ICd0aHJ1JyxcbiAgICAgICAgICByZXRVbndyYXBwZWQgPSAvXig/OnBvcHxzaGlmdCkkLy50ZXN0KG1ldGhvZE5hbWUpO1xuXG4gICAgICBsb2Rhc2gucHJvdG90eXBlW21ldGhvZE5hbWVdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzO1xuICAgICAgICBpZiAocmV0VW53cmFwcGVkICYmICF0aGlzLl9fY2hhaW5fXykge1xuICAgICAgICAgIHZhciB2YWx1ZSA9IHRoaXMudmFsdWUoKTtcbiAgICAgICAgICByZXR1cm4gZnVuYy5hcHBseShpc0FycmF5KHZhbHVlKSA/IHZhbHVlIDogW10sIGFyZ3MpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzW2NoYWluTmFtZV0oZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gZnVuYy5hcHBseShpc0FycmF5KHZhbHVlKSA/IHZhbHVlIDogW10sIGFyZ3MpO1xuICAgICAgICB9KTtcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICAvLyBNYXAgbWluaWZpZWQgbWV0aG9kIG5hbWVzIHRvIHRoZWlyIHJlYWwgbmFtZXMuXG4gICAgYmFzZUZvck93bihMYXp5V3JhcHBlci5wcm90b3R5cGUsIGZ1bmN0aW9uKGZ1bmMsIG1ldGhvZE5hbWUpIHtcbiAgICAgIHZhciBsb2Rhc2hGdW5jID0gbG9kYXNoW21ldGhvZE5hbWVdO1xuICAgICAgaWYgKGxvZGFzaEZ1bmMpIHtcbiAgICAgICAgdmFyIGtleSA9IGxvZGFzaEZ1bmMubmFtZSArICcnO1xuICAgICAgICBpZiAoIWhhc093blByb3BlcnR5LmNhbGwocmVhbE5hbWVzLCBrZXkpKSB7XG4gICAgICAgICAgcmVhbE5hbWVzW2tleV0gPSBbXTtcbiAgICAgICAgfVxuICAgICAgICByZWFsTmFtZXNba2V5XS5wdXNoKHsgJ25hbWUnOiBtZXRob2ROYW1lLCAnZnVuYyc6IGxvZGFzaEZ1bmMgfSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZWFsTmFtZXNbY3JlYXRlSHlicmlkKHVuZGVmaW5lZCwgV1JBUF9CSU5EX0tFWV9GTEFHKS5uYW1lXSA9IFt7XG4gICAgICAnbmFtZSc6ICd3cmFwcGVyJyxcbiAgICAgICdmdW5jJzogdW5kZWZpbmVkXG4gICAgfV07XG5cbiAgICAvLyBBZGQgbWV0aG9kcyB0byBgTGF6eVdyYXBwZXJgLlxuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS5jbG9uZSA9IGxhenlDbG9uZTtcbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUucmV2ZXJzZSA9IGxhenlSZXZlcnNlO1xuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS52YWx1ZSA9IGxhenlWYWx1ZTtcblxuICAgIC8vIEFkZCBjaGFpbiBzZXF1ZW5jZSBtZXRob2RzIHRvIHRoZSBgbG9kYXNoYCB3cmFwcGVyLlxuICAgIGxvZGFzaC5wcm90b3R5cGUuYXQgPSB3cmFwcGVyQXQ7XG4gICAgbG9kYXNoLnByb3RvdHlwZS5jaGFpbiA9IHdyYXBwZXJDaGFpbjtcbiAgICBsb2Rhc2gucHJvdG90eXBlLmNvbW1pdCA9IHdyYXBwZXJDb21taXQ7XG4gICAgbG9kYXNoLnByb3RvdHlwZS5uZXh0ID0gd3JhcHBlck5leHQ7XG4gICAgbG9kYXNoLnByb3RvdHlwZS5wbGFudCA9IHdyYXBwZXJQbGFudDtcbiAgICBsb2Rhc2gucHJvdG90eXBlLnJldmVyc2UgPSB3cmFwcGVyUmV2ZXJzZTtcbiAgICBsb2Rhc2gucHJvdG90eXBlLnRvSlNPTiA9IGxvZGFzaC5wcm90b3R5cGUudmFsdWVPZiA9IGxvZGFzaC5wcm90b3R5cGUudmFsdWUgPSB3cmFwcGVyVmFsdWU7XG5cbiAgICAvLyBBZGQgbGF6eSBhbGlhc2VzLlxuICAgIGxvZGFzaC5wcm90b3R5cGUuZmlyc3QgPSBsb2Rhc2gucHJvdG90eXBlLmhlYWQ7XG5cbiAgICBpZiAoc3ltSXRlcmF0b3IpIHtcbiAgICAgIGxvZGFzaC5wcm90b3R5cGVbc3ltSXRlcmF0b3JdID0gd3JhcHBlclRvSXRlcmF0b3I7XG4gICAgfVxuICAgIHJldHVybiBsb2Rhc2g7XG4gIH0pO1xuXG4gIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gIC8vIEV4cG9ydCBsb2Rhc2guXG4gIHZhciBfID0gcnVuSW5Db250ZXh0KCk7XG5cbiAgLy8gU29tZSBBTUQgYnVpbGQgb3B0aW1pemVycywgbGlrZSByLmpzLCBjaGVjayBmb3IgY29uZGl0aW9uIHBhdHRlcm5zIGxpa2U6XG4gIGlmICh0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGRlZmluZS5hbWQgPT0gJ29iamVjdCcgJiYgZGVmaW5lLmFtZCkge1xuICAgIC8vIEV4cG9zZSBMb2Rhc2ggb24gdGhlIGdsb2JhbCBvYmplY3QgdG8gcHJldmVudCBlcnJvcnMgd2hlbiBMb2Rhc2ggaXNcbiAgICAvLyBsb2FkZWQgYnkgYSBzY3JpcHQgdGFnIGluIHRoZSBwcmVzZW5jZSBvZiBhbiBBTUQgbG9hZGVyLlxuICAgIC8vIFNlZSBodHRwOi8vcmVxdWlyZWpzLm9yZy9kb2NzL2Vycm9ycy5odG1sI21pc21hdGNoIGZvciBtb3JlIGRldGFpbHMuXG4gICAgLy8gVXNlIGBfLm5vQ29uZmxpY3RgIHRvIHJlbW92ZSBMb2Rhc2ggZnJvbSB0aGUgZ2xvYmFsIG9iamVjdC5cbiAgICByb290Ll8gPSBfO1xuXG4gICAgLy8gRGVmaW5lIGFzIGFuIGFub255bW91cyBtb2R1bGUgc28sIHRocm91Z2ggcGF0aCBtYXBwaW5nLCBpdCBjYW4gYmVcbiAgICAvLyByZWZlcmVuY2VkIGFzIHRoZSBcInVuZGVyc2NvcmVcIiBtb2R1bGUuXG4gICAgZGVmaW5lKGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIF87XG4gICAgfSk7XG4gIH1cbiAgLy8gQ2hlY2sgZm9yIGBleHBvcnRzYCBhZnRlciBgZGVmaW5lYCBpbiBjYXNlIGEgYnVpbGQgb3B0aW1pemVyIGFkZHMgaXQuXG4gIGVsc2UgaWYgKGZyZWVNb2R1bGUpIHtcbiAgICAvLyBFeHBvcnQgZm9yIE5vZGUuanMuXG4gICAgKGZyZWVNb2R1bGUuZXhwb3J0cyA9IF8pLl8gPSBfO1xuICAgIC8vIEV4cG9ydCBmb3IgQ29tbW9uSlMgc3VwcG9ydC5cbiAgICBmcmVlRXhwb3J0cy5fID0gXztcbiAgfVxuICBlbHNlIHtcbiAgICAvLyBFeHBvcnQgdG8gdGhlIGdsb2JhbCBvYmplY3QuXG4gICAgcm9vdC5fID0gXztcbiAgfVxufS5jYWxsKHRoaXMpKTtcbiIsInZhciBjZWlsID0gTWF0aC5jZWlsO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcblxuLy8gYFRvSW50ZWdlcmAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy10b2ludGVnZXJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIHJldHVybiBpc05hTihhcmd1bWVudCA9ICthcmd1bWVudCkgPyAwIDogKGFyZ3VtZW50ID4gMCA/IGZsb29yIDogY2VpbCkoYXJndW1lbnQpO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oaWRlJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgdHJ5IHtcbiAgICBoaWRlKGdsb2JhbCwga2V5LCB2YWx1ZSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgZ2xvYmFsW2tleV0gPSB2YWx1ZTtcbiAgfSByZXR1cm4gdmFsdWU7XG59O1xuIiwidmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKGl0KS5zbGljZSg4LCAtMSk7XG59O1xuIiwidmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG5cbi8vIGBUb09iamVjdGAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy10b29iamVjdFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgcmV0dXJuIE9iamVjdChyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKGFyZ3VtZW50KSk7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYml0bWFwLCB2YWx1ZSkge1xuICByZXR1cm4ge1xuICAgIGVudW1lcmFibGU6ICEoYml0bWFwICYgMSksXG4gICAgY29uZmlndXJhYmxlOiAhKGJpdG1hcCAmIDIpLFxuICAgIHdyaXRhYmxlOiAhKGJpdG1hcCAmIDQpLFxuICAgIHZhbHVlOiB2YWx1ZVxuICB9O1xufTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcblxuLy8gYFRvUHJpbWl0aXZlYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXRvcHJpbWl0aXZlXG4vLyBpbnN0ZWFkIG9mIHRoZSBFUzYgc3BlYyB2ZXJzaW9uLCB3ZSBkaWRuJ3QgaW1wbGVtZW50IEBAdG9QcmltaXRpdmUgY2FzZVxuLy8gYW5kIHRoZSBzZWNvbmQgYXJndW1lbnQgLSBmbGFnIC0gcHJlZmVycmVkIHR5cGUgaXMgYSBzdHJpbmdcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGlucHV0LCBQUkVGRVJSRURfU1RSSU5HKSB7XG4gIGlmICghaXNPYmplY3QoaW5wdXQpKSByZXR1cm4gaW5wdXQ7XG4gIHZhciBmbiwgdmFsO1xuICBpZiAoUFJFRkVSUkVEX1NUUklORyAmJiB0eXBlb2YgKGZuID0gaW5wdXQudG9TdHJpbmcpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaW5wdXQpKSkgcmV0dXJuIHZhbDtcbiAgaWYgKHR5cGVvZiAoZm4gPSBpbnB1dC52YWx1ZU9mKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGlucHV0KSkpIHJldHVybiB2YWw7XG4gIGlmICghUFJFRkVSUkVEX1NUUklORyAmJiB0eXBlb2YgKGZuID0gaW5wdXQudG9TdHJpbmcpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaW5wdXQpKSkgcmV0dXJuIHZhbDtcbiAgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY29udmVydCBvYmplY3QgdG8gcHJpbWl0aXZlIHZhbHVlXCIpO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0ge307XG4iLCIvLyBJRTgtIGRvbid0IGVudW0gYnVnIGtleXNcbm1vZHVsZS5leHBvcnRzID0gW1xuICAnY29uc3RydWN0b3InLFxuICAnaGFzT3duUHJvcGVydHknLFxuICAnaXNQcm90b3R5cGVPZicsXG4gICdwcm9wZXJ0eUlzRW51bWVyYWJsZScsXG4gICd0b0xvY2FsZVN0cmluZycsXG4gICd0b1N0cmluZycsXG4gICd2YWx1ZU9mJ1xuXTtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZi1yYXcnKTtcblxudmFyIHNwbGl0ID0gJycuc3BsaXQ7XG5cbi8vIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgYW5kIG5vbi1lbnVtZXJhYmxlIG9sZCBWOCBzdHJpbmdzXG5tb2R1bGUuZXhwb3J0cyA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gdGhyb3dzIGFuIGVycm9yIGluIHJoaW5vLCBzZWUgaHR0cHM6Ly9naXRodWIuY29tL21vemlsbGEvcmhpbm8vaXNzdWVzLzM0NlxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcHJvdG90eXBlLWJ1aWx0aW5zXG4gIHJldHVybiAhT2JqZWN0KCd6JykucHJvcGVydHlJc0VudW1lcmFibGUoMCk7XG59KSA/IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gY2xhc3NvZihpdCkgPT0gJ1N0cmluZycgPyBzcGxpdC5jYWxsKGl0LCAnJykgOiBPYmplY3QoaXQpO1xufSA6IE9iamVjdDtcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIHByb3BlcnR5SXNFbnVtZXJhYmxlTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1wcm9wZXJ0eS1pcy1lbnVtZXJhYmxlJyk7XG52YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tcHJpbWl0aXZlJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIElFOF9ET01fREVGSU5FID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2llOC1kb20tZGVmaW5lJyk7XG5cbnZhciBuYXRpdmVHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuXG4vLyBgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yXG5leHBvcnRzLmYgPSBERVNDUklQVE9SUyA/IG5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvciA6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKSB7XG4gIE8gPSB0b0luZGV4ZWRPYmplY3QoTyk7XG4gIFAgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcbiAgaWYgKElFOF9ET01fREVGSU5FKSB0cnkge1xuICAgIHJldHVybiBuYXRpdmVHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cbiAgaWYgKGhhcyhPLCBQKSkgcmV0dXJuIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcighcHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUuZi5jYWxsKE8sIFApLCBPW1BdKTtcbn07XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGNyZWF0ZUVsZW1lbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZG9jdW1lbnQtY3JlYXRlLWVsZW1lbnQnKTtcblxuLy8gVGhhbmsncyBJRTggZm9yIGhpcyBmdW5ueSBkZWZpbmVQcm9wZXJ0eVxubW9kdWxlLmV4cG9ydHMgPSAhREVTQ1JJUFRPUlMgJiYgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjcmVhdGVFbGVtZW50KCdkaXYnKSwgJ2EnLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9XG4gIH0pLmEgIT0gNztcbn0pO1xuIiwidmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBzaGFyZWQoJ25hdGl2ZS1mdW5jdGlvbi10by1zdHJpbmcnLCBGdW5jdGlvbi50b1N0cmluZyk7XG4iLCJ2YXIgaWQgPSAwO1xudmFyIHBvc3RmaXggPSBNYXRoLnJhbmRvbSgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuICdTeW1ib2woJyArIFN0cmluZyhrZXkgPT09IHVuZGVmaW5lZCA/ICcnIDoga2V5KSArICcpXycgKyAoKytpZCArIHBvc3RmaXgpLnRvU3RyaW5nKDM2KTtcbn07XG4iLCJ2YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIGluZGV4T2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaW5jbHVkZXMnKS5pbmRleE9mO1xudmFyIGhpZGRlbktleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGlkZGVuLWtleXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqZWN0LCBuYW1lcykge1xuICB2YXIgTyA9IHRvSW5kZXhlZE9iamVjdChvYmplY3QpO1xuICB2YXIgaSA9IDA7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgdmFyIGtleTtcbiAgZm9yIChrZXkgaW4gTykgIWhhcyhoaWRkZW5LZXlzLCBrZXkpICYmIGhhcyhPLCBrZXkpICYmIHJlc3VsdC5wdXNoKGtleSk7XG4gIC8vIERvbid0IGVudW0gYnVnICYgaGlkZGVuIGtleXNcbiAgd2hpbGUgKG5hbWVzLmxlbmd0aCA+IGkpIGlmIChoYXMoTywga2V5ID0gbmFtZXNbaSsrXSkpIHtcbiAgICB+aW5kZXhPZihyZXN1bHQsIGtleSkgfHwgcmVzdWx0LnB1c2goa2V5KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG5cbnZhciBkb2N1bWVudCA9IGdsb2JhbC5kb2N1bWVudDtcbi8vIHR5cGVvZiBkb2N1bWVudC5jcmVhdGVFbGVtZW50IGlzICdvYmplY3QnIGluIG9sZCBJRVxudmFyIEVYSVNUUyA9IGlzT2JqZWN0KGRvY3VtZW50KSAmJiBpc09iamVjdChkb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIEVYSVNUUyA/IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoaXQpIDoge307XG59O1xuIiwidmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdWlkJyk7XG5cbnZhciBrZXlzID0gc2hhcmVkKCdrZXlzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4ga2V5c1trZXldIHx8IChrZXlzW2tleV0gPSB1aWQoa2V5KSk7XG59O1xuIiwidmFyIHBhdGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcGF0aCcpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcblxudmFyIGFGdW5jdGlvbiA9IGZ1bmN0aW9uICh2YXJpYWJsZSkge1xuICByZXR1cm4gdHlwZW9mIHZhcmlhYmxlID09ICdmdW5jdGlvbicgPyB2YXJpYWJsZSA6IHVuZGVmaW5lZDtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG5hbWVzcGFjZSwgbWV0aG9kKSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoIDwgMiA/IGFGdW5jdGlvbihwYXRoW25hbWVzcGFjZV0pIHx8IGFGdW5jdGlvbihnbG9iYWxbbmFtZXNwYWNlXSlcbiAgICA6IHBhdGhbbmFtZXNwYWNlXSAmJiBwYXRoW25hbWVzcGFjZV1bbWV0aG9kXSB8fCBnbG9iYWxbbmFtZXNwYWNlXSAmJiBnbG9iYWxbbmFtZXNwYWNlXVttZXRob2RdO1xufTtcbiIsInZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW50ZWdlcicpO1xuXG52YXIgbWF4ID0gTWF0aC5tYXg7XG52YXIgbWluID0gTWF0aC5taW47XG5cbi8vIEhlbHBlciBmb3IgYSBwb3B1bGFyIHJlcGVhdGluZyBjYXNlIG9mIHRoZSBzcGVjOlxuLy8gTGV0IGludGVnZXIgYmUgPyBUb0ludGVnZXIoaW5kZXgpLlxuLy8gSWYgaW50ZWdlciA8IDAsIGxldCByZXN1bHQgYmUgbWF4KChsZW5ndGggKyBpbnRlZ2VyKSwgMCk7IGVsc2UgbGV0IHJlc3VsdCBiZSBtaW4obGVuZ3RoLCBsZW5ndGgpLlxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaW5kZXgsIGxlbmd0aCkge1xuICB2YXIgaW50ZWdlciA9IHRvSW50ZWdlcihpbmRleCk7XG4gIHJldHVybiBpbnRlZ2VyIDwgMCA/IG1heChpbnRlZ2VyICsgbGVuZ3RoLCAwKSA6IG1pbihpbnRlZ2VyLCBsZW5ndGgpO1xufTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWFycmF5Jyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBTUEVDSUVTID0gd2VsbEtub3duU3ltYm9sKCdzcGVjaWVzJyk7XG5cbi8vIGBBcnJheVNwZWNpZXNDcmVhdGVgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXlzcGVjaWVzY3JlYXRlXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvcmlnaW5hbEFycmF5LCBsZW5ndGgpIHtcbiAgdmFyIEM7XG4gIGlmIChpc0FycmF5KG9yaWdpbmFsQXJyYXkpKSB7XG4gICAgQyA9IG9yaWdpbmFsQXJyYXkuY29uc3RydWN0b3I7XG4gICAgLy8gY3Jvc3MtcmVhbG0gZmFsbGJhY2tcbiAgICBpZiAodHlwZW9mIEMgPT0gJ2Z1bmN0aW9uJyAmJiAoQyA9PT0gQXJyYXkgfHwgaXNBcnJheShDLnByb3RvdHlwZSkpKSBDID0gdW5kZWZpbmVkO1xuICAgIGVsc2UgaWYgKGlzT2JqZWN0KEMpKSB7XG4gICAgICBDID0gQ1tTUEVDSUVTXTtcbiAgICAgIGlmIChDID09PSBudWxsKSBDID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfSByZXR1cm4gbmV3IChDID09PSB1bmRlZmluZWQgPyBBcnJheSA6IEMpKGxlbmd0aCA9PT0gMCA/IDAgOiBsZW5ndGgpO1xufTtcbiIsInZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YtcmF3Jyk7XG5cbi8vIGBJc0FycmF5YCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWlzYXJyYXlcbm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiBpc0FycmF5KGFyZykge1xuICByZXR1cm4gY2xhc3NvZihhcmcpID09ICdBcnJheSc7XG59O1xuIiwiaW1wb3J0IG9iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIi4vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHNvdXJjZSwgZXhjbHVkZWQpIHtcbiAgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307XG4gIHZhciB0YXJnZXQgPSBvYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpO1xuICB2YXIga2V5LCBpO1xuXG4gIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgdmFyIHNvdXJjZVN5bWJvbEtleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZSk7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgc291cmNlU3ltYm9sS2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAga2V5ID0gc291cmNlU3ltYm9sS2V5c1tpXTtcbiAgICAgIGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7XG4gICAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzb3VyY2UsIGtleSkpIGNvbnRpbnVlO1xuICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpIHtcbiAgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307XG4gIHZhciB0YXJnZXQgPSB7fTtcbiAgdmFyIHNvdXJjZUtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpO1xuICB2YXIga2V5LCBpO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAga2V5ID0gc291cmNlS2V5c1tpXTtcbiAgICBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlO1xuICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufSIsInZhciBnO1xuXG4vLyBUaGlzIHdvcmtzIGluIG5vbi1zdHJpY3QgbW9kZVxuZyA9IChmdW5jdGlvbigpIHtcblx0cmV0dXJuIHRoaXM7XG59KSgpO1xuXG50cnkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIGV2YWwgaXMgYWxsb3dlZCAoc2VlIENTUClcblx0ZyA9IGcgfHwgbmV3IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKTtcbn0gY2F0Y2ggKGUpIHtcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcblx0aWYgKHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIpIGcgPSB3aW5kb3c7XG59XG5cbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cbi8vIFdlIHJldHVybiB1bmRlZmluZWQsIGluc3RlYWQgb2Ygbm90aGluZyBoZXJlLCBzbyBpdCdzXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XG5cbm1vZHVsZS5leHBvcnRzID0gZztcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBuYXRpdmVQcm9wZXJ0eUlzRW51bWVyYWJsZSA9IHt9LnByb3BlcnR5SXNFbnVtZXJhYmxlO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG5cbi8vIE5hc2hvcm4gfiBKREs4IGJ1Z1xudmFyIE5BU0hPUk5fQlVHID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yICYmICFuYXRpdmVQcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHsgMTogMiB9LCAxKTtcblxuLy8gYE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGVgIG1ldGhvZCBpbXBsZW1lbnRhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eWlzZW51bWVyYWJsZVxuZXhwb3J0cy5mID0gTkFTSE9STl9CVUcgPyBmdW5jdGlvbiBwcm9wZXJ0eUlzRW51bWVyYWJsZShWKSB7XG4gIHZhciBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRoaXMsIFYpO1xuICByZXR1cm4gISFkZXNjcmlwdG9yICYmIGRlc2NyaXB0b3IuZW51bWVyYWJsZTtcbn0gOiBuYXRpdmVQcm9wZXJ0eUlzRW51bWVyYWJsZTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgc2hhcmVkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZCcpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGlkZScpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciBzZXRHbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LWdsb2JhbCcpO1xudmFyIG5hdGl2ZUZ1bmN0aW9uVG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdG8tc3RyaW5nJyk7XG52YXIgSW50ZXJuYWxTdGF0ZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZScpO1xuXG52YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0O1xudmFyIGVuZm9yY2VJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5lbmZvcmNlO1xudmFyIFRFTVBMQVRFID0gU3RyaW5nKG5hdGl2ZUZ1bmN0aW9uVG9TdHJpbmcpLnNwbGl0KCd0b1N0cmluZycpO1xuXG5zaGFyZWQoJ2luc3BlY3RTb3VyY2UnLCBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIG5hdGl2ZUZ1bmN0aW9uVG9TdHJpbmcuY2FsbChpdCk7XG59KTtcblxuKG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE8sIGtleSwgdmFsdWUsIG9wdGlvbnMpIHtcbiAgdmFyIHVuc2FmZSA9IG9wdGlvbnMgPyAhIW9wdGlvbnMudW5zYWZlIDogZmFsc2U7XG4gIHZhciBzaW1wbGUgPSBvcHRpb25zID8gISFvcHRpb25zLmVudW1lcmFibGUgOiBmYWxzZTtcbiAgdmFyIG5vVGFyZ2V0R2V0ID0gb3B0aW9ucyA/ICEhb3B0aW9ucy5ub1RhcmdldEdldCA6IGZhbHNlO1xuICBpZiAodHlwZW9mIHZhbHVlID09ICdmdW5jdGlvbicpIHtcbiAgICBpZiAodHlwZW9mIGtleSA9PSAnc3RyaW5nJyAmJiAhaGFzKHZhbHVlLCAnbmFtZScpKSBoaWRlKHZhbHVlLCAnbmFtZScsIGtleSk7XG4gICAgZW5mb3JjZUludGVybmFsU3RhdGUodmFsdWUpLnNvdXJjZSA9IFRFTVBMQVRFLmpvaW4odHlwZW9mIGtleSA9PSAnc3RyaW5nJyA/IGtleSA6ICcnKTtcbiAgfVxuICBpZiAoTyA9PT0gZ2xvYmFsKSB7XG4gICAgaWYgKHNpbXBsZSkgT1trZXldID0gdmFsdWU7XG4gICAgZWxzZSBzZXRHbG9iYWwoa2V5LCB2YWx1ZSk7XG4gICAgcmV0dXJuO1xuICB9IGVsc2UgaWYgKCF1bnNhZmUpIHtcbiAgICBkZWxldGUgT1trZXldO1xuICB9IGVsc2UgaWYgKCFub1RhcmdldEdldCAmJiBPW2tleV0pIHtcbiAgICBzaW1wbGUgPSB0cnVlO1xuICB9XG4gIGlmIChzaW1wbGUpIE9ba2V5XSA9IHZhbHVlO1xuICBlbHNlIGhpZGUoTywga2V5LCB2YWx1ZSk7XG4vLyBhZGQgZmFrZSBGdW5jdGlvbiN0b1N0cmluZyBmb3IgY29ycmVjdCB3b3JrIHdyYXBwZWQgbWV0aG9kcyAvIGNvbnN0cnVjdG9ycyB3aXRoIG1ldGhvZHMgbGlrZSBMb0Rhc2ggaXNOYXRpdmVcbn0pKEZ1bmN0aW9uLnByb3RvdHlwZSwgJ3RvU3RyaW5nJywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gIHJldHVybiB0eXBlb2YgdGhpcyA9PSAnZnVuY3Rpb24nICYmIGdldEludGVybmFsU3RhdGUodGhpcykuc291cmNlIHx8IG5hdGl2ZUZ1bmN0aW9uVG9TdHJpbmcuY2FsbCh0aGlzKTtcbn0pO1xuIiwidmFyIGJpbmQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYmluZC1jb250ZXh0Jyk7XG52YXIgSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbmRleGVkLW9iamVjdCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xudmFyIGFycmF5U3BlY2llc0NyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1zcGVjaWVzLWNyZWF0ZScpO1xuXG52YXIgcHVzaCA9IFtdLnB1c2g7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUueyBmb3JFYWNoLCBtYXAsIGZpbHRlciwgc29tZSwgZXZlcnksIGZpbmQsIGZpbmRJbmRleCB9YCBtZXRob2RzIGltcGxlbWVudGF0aW9uXG52YXIgY3JlYXRlTWV0aG9kID0gZnVuY3Rpb24gKFRZUEUpIHtcbiAgdmFyIElTX01BUCA9IFRZUEUgPT0gMTtcbiAgdmFyIElTX0ZJTFRFUiA9IFRZUEUgPT0gMjtcbiAgdmFyIElTX1NPTUUgPSBUWVBFID09IDM7XG4gIHZhciBJU19FVkVSWSA9IFRZUEUgPT0gNDtcbiAgdmFyIElTX0ZJTkRfSU5ERVggPSBUWVBFID09IDY7XG4gIHZhciBOT19IT0xFUyA9IFRZUEUgPT0gNSB8fCBJU19GSU5EX0lOREVYO1xuICByZXR1cm4gZnVuY3Rpb24gKCR0aGlzLCBjYWxsYmFja2ZuLCB0aGF0LCBzcGVjaWZpY0NyZWF0ZSkge1xuICAgIHZhciBPID0gdG9PYmplY3QoJHRoaXMpO1xuICAgIHZhciBzZWxmID0gSW5kZXhlZE9iamVjdChPKTtcbiAgICB2YXIgYm91bmRGdW5jdGlvbiA9IGJpbmQoY2FsbGJhY2tmbiwgdGhhdCwgMyk7XG4gICAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKHNlbGYubGVuZ3RoKTtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciBjcmVhdGUgPSBzcGVjaWZpY0NyZWF0ZSB8fCBhcnJheVNwZWNpZXNDcmVhdGU7XG4gICAgdmFyIHRhcmdldCA9IElTX01BUCA/IGNyZWF0ZSgkdGhpcywgbGVuZ3RoKSA6IElTX0ZJTFRFUiA/IGNyZWF0ZSgkdGhpcywgMCkgOiB1bmRlZmluZWQ7XG4gICAgdmFyIHZhbHVlLCByZXN1bHQ7XG4gICAgZm9yICg7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIGlmIChOT19IT0xFUyB8fCBpbmRleCBpbiBzZWxmKSB7XG4gICAgICB2YWx1ZSA9IHNlbGZbaW5kZXhdO1xuICAgICAgcmVzdWx0ID0gYm91bmRGdW5jdGlvbih2YWx1ZSwgaW5kZXgsIE8pO1xuICAgICAgaWYgKFRZUEUpIHtcbiAgICAgICAgaWYgKElTX01BUCkgdGFyZ2V0W2luZGV4XSA9IHJlc3VsdDsgLy8gbWFwXG4gICAgICAgIGVsc2UgaWYgKHJlc3VsdCkgc3dpdGNoIChUWVBFKSB7XG4gICAgICAgICAgY2FzZSAzOiByZXR1cm4gdHJ1ZTsgICAgICAgICAgICAgIC8vIHNvbWVcbiAgICAgICAgICBjYXNlIDU6IHJldHVybiB2YWx1ZTsgICAgICAgICAgICAgLy8gZmluZFxuICAgICAgICAgIGNhc2UgNjogcmV0dXJuIGluZGV4OyAgICAgICAgICAgICAvLyBmaW5kSW5kZXhcbiAgICAgICAgICBjYXNlIDI6IHB1c2guY2FsbCh0YXJnZXQsIHZhbHVlKTsgLy8gZmlsdGVyXG4gICAgICAgIH0gZWxzZSBpZiAoSVNfRVZFUlkpIHJldHVybiBmYWxzZTsgIC8vIGV2ZXJ5XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBJU19GSU5EX0lOREVYID8gLTEgOiBJU19TT01FIHx8IElTX0VWRVJZID8gSVNfRVZFUlkgOiB0YXJnZXQ7XG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5mb3JFYWNoYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZvcmVhY2hcbiAgZm9yRWFjaDogY3JlYXRlTWV0aG9kKDApLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLm1hcGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5tYXBcbiAgbWFwOiBjcmVhdGVNZXRob2QoMSksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuZmlsdGVyYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZpbHRlclxuICBmaWx0ZXI6IGNyZWF0ZU1ldGhvZCgyKSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5zb21lYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLnNvbWVcbiAgc29tZTogY3JlYXRlTWV0aG9kKDMpLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLmV2ZXJ5YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmV2ZXJ5XG4gIGV2ZXJ5OiBjcmVhdGVNZXRob2QoNCksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuZmluZGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5maW5kXG4gIGZpbmQ6IGNyZWF0ZU1ldGhvZCg1KSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5maW5kSW5kZXhgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZmluZEluZGV4XG4gIGZpbmRJbmRleDogY3JlYXRlTWV0aG9kKDYpXG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKHR5cGVvZiBpdCAhPSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgVHlwZUVycm9yKFN0cmluZyhpdCkgKyAnIGlzIG5vdCBhIGZ1bmN0aW9uJyk7XG4gIH0gcmV0dXJuIGl0O1xufTtcbiIsInZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tYWJzb2x1dGUtaW5kZXgnKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS57IGluZGV4T2YsIGluY2x1ZGVzIH1gIG1ldGhvZHMgaW1wbGVtZW50YXRpb25cbnZhciBjcmVhdGVNZXRob2QgPSBmdW5jdGlvbiAoSVNfSU5DTFVERVMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgZWwsIGZyb21JbmRleCkge1xuICAgIHZhciBPID0gdG9JbmRleGVkT2JqZWN0KCR0aGlzKTtcbiAgICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgIHZhciBpbmRleCA9IHRvQWJzb2x1dGVJbmRleChmcm9tSW5kZXgsIGxlbmd0aCk7XG4gICAgdmFyIHZhbHVlO1xuICAgIC8vIEFycmF5I2luY2x1ZGVzIHVzZXMgU2FtZVZhbHVlWmVybyBlcXVhbGl0eSBhbGdvcml0aG1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgaWYgKElTX0lOQ0xVREVTICYmIGVsICE9IGVsKSB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIHtcbiAgICAgIHZhbHVlID0gT1tpbmRleCsrXTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICAgIGlmICh2YWx1ZSAhPSB2YWx1ZSkgcmV0dXJuIHRydWU7XG4gICAgLy8gQXJyYXkjaW5kZXhPZiBpZ25vcmVzIGhvbGVzLCBBcnJheSNpbmNsdWRlcyAtIG5vdFxuICAgIH0gZWxzZSBmb3IgKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKykge1xuICAgICAgaWYgKChJU19JTkNMVURFUyB8fCBpbmRleCBpbiBPKSAmJiBPW2luZGV4XSA9PT0gZWwpIHJldHVybiBJU19JTkNMVURFUyB8fCBpbmRleCB8fCAwO1xuICAgIH0gcmV0dXJuICFJU19JTkNMVURFUyAmJiAtMTtcbiAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAvLyBgQXJyYXkucHJvdG90eXBlLmluY2x1ZGVzYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmluY2x1ZGVzXG4gIGluY2x1ZGVzOiBjcmVhdGVNZXRob2QodHJ1ZSksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuaW5kZXhPZmAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5pbmRleG9mXG4gIGluZGV4T2Y6IGNyZWF0ZU1ldGhvZChmYWxzZSlcbn07XG4iLCJmdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHtcbiAgaWYgKHNlbGYgPT09IHZvaWQgMCkge1xuICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtcbiAgfVxuXG4gIHJldHVybiBzZWxmO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQ7IiwiZXhwb3J0cy5mID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbiIsInZhciBpbnRlcm5hbE9iamVjdEtleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWtleXMtaW50ZXJuYWwnKTtcbnZhciBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbnVtLWJ1Zy1rZXlzJyk7XG5cbi8vIGBPYmplY3Qua2V5c2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3Qua2V5c1xubW9kdWxlLmV4cG9ydHMgPSBPYmplY3Qua2V5cyB8fCBmdW5jdGlvbiBrZXlzKE8pIHtcbiAgcmV0dXJuIGludGVybmFsT2JqZWN0S2V5cyhPLCBlbnVtQnVnS2V5cyk7XG59O1xuIiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBTUEVDSUVTID0gd2VsbEtub3duU3ltYm9sKCdzcGVjaWVzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE1FVEhPRF9OQU1FKSB7XG4gIHJldHVybiAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIHZhciBhcnJheSA9IFtdO1xuICAgIHZhciBjb25zdHJ1Y3RvciA9IGFycmF5LmNvbnN0cnVjdG9yID0ge307XG4gICAgY29uc3RydWN0b3JbU1BFQ0lFU10gPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4geyBmb286IDEgfTtcbiAgICB9O1xuICAgIHJldHVybiBhcnJheVtNRVRIT0RfTkFNRV0oQm9vbGVhbikuZm9vICE9PSAxO1xuICB9KTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZhbHNlO1xuIiwidmFyIE5BVElWRV9XRUFLX01BUCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uYXRpdmUtd2Vhay1tYXAnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oaWRlJyk7XG52YXIgb2JqZWN0SGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIHNoYXJlZEtleSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQta2V5Jyk7XG52YXIgaGlkZGVuS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oaWRkZW4ta2V5cycpO1xuXG52YXIgV2Vha01hcCA9IGdsb2JhbC5XZWFrTWFwO1xudmFyIHNldCwgZ2V0LCBoYXM7XG5cbnZhciBlbmZvcmNlID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBoYXMoaXQpID8gZ2V0KGl0KSA6IHNldChpdCwge30pO1xufTtcblxudmFyIGdldHRlckZvciA9IGZ1bmN0aW9uIChUWVBFKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoaXQpIHtcbiAgICB2YXIgc3RhdGU7XG4gICAgaWYgKCFpc09iamVjdChpdCkgfHwgKHN0YXRlID0gZ2V0KGl0KSkudHlwZSAhPT0gVFlQRSkge1xuICAgICAgdGhyb3cgVHlwZUVycm9yKCdJbmNvbXBhdGlibGUgcmVjZWl2ZXIsICcgKyBUWVBFICsgJyByZXF1aXJlZCcpO1xuICAgIH0gcmV0dXJuIHN0YXRlO1xuICB9O1xufTtcblxuaWYgKE5BVElWRV9XRUFLX01BUCkge1xuICB2YXIgc3RvcmUgPSBuZXcgV2Vha01hcCgpO1xuICB2YXIgd21nZXQgPSBzdG9yZS5nZXQ7XG4gIHZhciB3bWhhcyA9IHN0b3JlLmhhcztcbiAgdmFyIHdtc2V0ID0gc3RvcmUuc2V0O1xuICBzZXQgPSBmdW5jdGlvbiAoaXQsIG1ldGFkYXRhKSB7XG4gICAgd21zZXQuY2FsbChzdG9yZSwgaXQsIG1ldGFkYXRhKTtcbiAgICByZXR1cm4gbWV0YWRhdGE7XG4gIH07XG4gIGdldCA9IGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiB3bWdldC5jYWxsKHN0b3JlLCBpdCkgfHwge307XG4gIH07XG4gIGhhcyA9IGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiB3bWhhcy5jYWxsKHN0b3JlLCBpdCk7XG4gIH07XG59IGVsc2Uge1xuICB2YXIgU1RBVEUgPSBzaGFyZWRLZXkoJ3N0YXRlJyk7XG4gIGhpZGRlbktleXNbU1RBVEVdID0gdHJ1ZTtcbiAgc2V0ID0gZnVuY3Rpb24gKGl0LCBtZXRhZGF0YSkge1xuICAgIGhpZGUoaXQsIFNUQVRFLCBtZXRhZGF0YSk7XG4gICAgcmV0dXJuIG1ldGFkYXRhO1xuICB9O1xuICBnZXQgPSBmdW5jdGlvbiAoaXQpIHtcbiAgICByZXR1cm4gb2JqZWN0SGFzKGl0LCBTVEFURSkgPyBpdFtTVEFURV0gOiB7fTtcbiAgfTtcbiAgaGFzID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIG9iamVjdEhhcyhpdCwgU1RBVEUpO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc2V0OiBzZXQsXG4gIGdldDogZ2V0LFxuICBoYXM6IGhhcyxcbiAgZW5mb3JjZTogZW5mb3JjZSxcbiAgZ2V0dGVyRm9yOiBnZXR0ZXJGb3Jcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIG5hdGl2ZUZ1bmN0aW9uVG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdG8tc3RyaW5nJyk7XG5cbnZhciBXZWFrTWFwID0gZ2xvYmFsLldlYWtNYXA7XG5cbm1vZHVsZS5leHBvcnRzID0gdHlwZW9mIFdlYWtNYXAgPT09ICdmdW5jdGlvbicgJiYgL25hdGl2ZSBjb2RlLy50ZXN0KG5hdGl2ZUZ1bmN0aW9uVG9TdHJpbmcuY2FsbChXZWFrTWFwKSk7XG4iLCJ2YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIG93bktleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb3duLWtleXMnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGFyZ2V0LCBzb3VyY2UpIHtcbiAgdmFyIGtleXMgPSBvd25LZXlzKHNvdXJjZSk7XG4gIHZhciBkZWZpbmVQcm9wZXJ0eSA9IGRlZmluZVByb3BlcnR5TW9kdWxlLmY7XG4gIHZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUuZjtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgaWYgKCFoYXModGFyZ2V0LCBrZXkpKSBkZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7XG4gIH1cbn07XG4iLCJ2YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciBnZXRPd25Qcm9wZXJ0eU5hbWVzTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LW5hbWVzJyk7XG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LXN5bWJvbHMnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcblxuLy8gYWxsIG9iamVjdCBrZXlzLCBpbmNsdWRlcyBub24tZW51bWVyYWJsZSBhbmQgc3ltYm9sc1xubW9kdWxlLmV4cG9ydHMgPSBnZXRCdWlsdEluKCdSZWZsZWN0JywgJ293bktleXMnKSB8fCBmdW5jdGlvbiBvd25LZXlzKGl0KSB7XG4gIHZhciBrZXlzID0gZ2V0T3duUHJvcGVydHlOYW1lc01vZHVsZS5mKGFuT2JqZWN0KGl0KSk7XG4gIHZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUuZjtcbiAgcmV0dXJuIGdldE93blByb3BlcnR5U3ltYm9scyA/IGtleXMuY29uY2F0KGdldE93blByb3BlcnR5U3ltYm9scyhpdCkpIDoga2V5cztcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbiIsInZhciBpbnRlcm5hbE9iamVjdEtleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWtleXMtaW50ZXJuYWwnKTtcbnZhciBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbnVtLWJ1Zy1rZXlzJyk7XG5cbnZhciBoaWRkZW5LZXlzID0gZW51bUJ1Z0tleXMuY29uY2F0KCdsZW5ndGgnLCAncHJvdG90eXBlJyk7XG5cbi8vIGBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lc2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0b3ducHJvcGVydHluYW1lc1xuZXhwb3J0cy5mID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgfHwgZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhPKSB7XG4gIHJldHVybiBpbnRlcm5hbE9iamVjdEtleXMoTywgaGlkZGVuS2V5cyk7XG59O1xuIiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbnZhciByZXBsYWNlbWVudCA9IC8jfFxcLnByb3RvdHlwZVxcLi87XG5cbnZhciBpc0ZvcmNlZCA9IGZ1bmN0aW9uIChmZWF0dXJlLCBkZXRlY3Rpb24pIHtcbiAgdmFyIHZhbHVlID0gZGF0YVtub3JtYWxpemUoZmVhdHVyZSldO1xuICByZXR1cm4gdmFsdWUgPT0gUE9MWUZJTEwgPyB0cnVlXG4gICAgOiB2YWx1ZSA9PSBOQVRJVkUgPyBmYWxzZVxuICAgIDogdHlwZW9mIGRldGVjdGlvbiA9PSAnZnVuY3Rpb24nID8gZmFpbHMoZGV0ZWN0aW9uKVxuICAgIDogISFkZXRlY3Rpb247XG59O1xuXG52YXIgbm9ybWFsaXplID0gaXNGb3JjZWQubm9ybWFsaXplID0gZnVuY3Rpb24gKHN0cmluZykge1xuICByZXR1cm4gU3RyaW5nKHN0cmluZykucmVwbGFjZShyZXBsYWNlbWVudCwgJy4nKS50b0xvd2VyQ2FzZSgpO1xufTtcblxudmFyIGRhdGEgPSBpc0ZvcmNlZC5kYXRhID0ge307XG52YXIgTkFUSVZFID0gaXNGb3JjZWQuTkFUSVZFID0gJ04nO1xudmFyIFBPTFlGSUxMID0gaXNGb3JjZWQuUE9MWUZJTEwgPSAnUCc7XG5cbm1vZHVsZS5leHBvcnRzID0gaXNGb3JjZWQ7XG4iLCJ2YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtZnVuY3Rpb24nKTtcblxuLy8gb3B0aW9uYWwgLyBzaW1wbGUgY29udGV4dCBiaW5kaW5nXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChmbiwgdGhhdCwgbGVuZ3RoKSB7XG4gIGFGdW5jdGlvbihmbik7XG4gIGlmICh0aGF0ID09PSB1bmRlZmluZWQpIHJldHVybiBmbjtcbiAgc3dpdGNoIChsZW5ndGgpIHtcbiAgICBjYXNlIDA6IHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0KTtcbiAgICB9O1xuICAgIGNhc2UgMTogcmV0dXJuIGZ1bmN0aW9uIChhKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhKTtcbiAgICB9O1xuICAgIGNhc2UgMjogcmV0dXJuIGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiKTtcbiAgICB9O1xuICAgIGNhc2UgMzogcmV0dXJuIGZ1bmN0aW9uIChhLCBiLCBjKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiLCBjKTtcbiAgICB9O1xuICB9XG4gIHJldHVybiBmdW5jdGlvbiAoLyogLi4uYXJncyAqLykge1xuICAgIHJldHVybiBmbi5hcHBseSh0aGF0LCBhcmd1bWVudHMpO1xuICB9O1xufTtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9ICEhT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyAmJiAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBDaHJvbWUgMzggU3ltYm9sIGhhcyBpbmNvcnJlY3QgdG9TdHJpbmcgY29udmVyc2lvblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgcmV0dXJuICFTdHJpbmcoU3ltYm9sKCkpO1xufSk7XG4iLCJmdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7XG4gIGlmIChrZXkgaW4gb2JqKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWVcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBvYmpba2V5XSA9IHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIG9iajtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfZGVmaW5lUHJvcGVydHk7IiwiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBjaGVja0RDRSgpIHtcbiAgLyogZ2xvYmFsIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyAqL1xuICBpZiAoXG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyA9PT0gJ3VuZGVmaW5lZCcgfHxcbiAgICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmNoZWNrRENFICE9PSAnZnVuY3Rpb24nXG4gICkge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vIFRoaXMgYnJhbmNoIGlzIHVucmVhY2hhYmxlIGJlY2F1c2UgdGhpcyBmdW5jdGlvbiBpcyBvbmx5IGNhbGxlZFxuICAgIC8vIGluIHByb2R1Y3Rpb24sIGJ1dCB0aGUgY29uZGl0aW9uIGlzIHRydWUgb25seSBpbiBkZXZlbG9wbWVudC5cbiAgICAvLyBUaGVyZWZvcmUgaWYgdGhlIGJyYW5jaCBpcyBzdGlsbCBoZXJlLCBkZWFkIGNvZGUgZWxpbWluYXRpb24gd2Fzbid0XG4gICAgLy8gcHJvcGVybHkgYXBwbGllZC5cbiAgICAvLyBEb24ndCBjaGFuZ2UgdGhlIG1lc3NhZ2UuIFJlYWN0IERldlRvb2xzIHJlbGllcyBvbiBpdC4gQWxzbyBtYWtlIHN1cmVcbiAgICAvLyB0aGlzIG1lc3NhZ2UgZG9lc24ndCBvY2N1ciBlbHNld2hlcmUgaW4gdGhpcyBmdW5jdGlvbiwgb3IgaXQgd2lsbCBjYXVzZVxuICAgIC8vIGEgZmFsc2UgcG9zaXRpdmUuXG4gICAgdGhyb3cgbmV3IEVycm9yKCdeX14nKTtcbiAgfVxuICB0cnkge1xuICAgIC8vIFZlcmlmeSB0aGF0IHRoZSBjb2RlIGFib3ZlIGhhcyBiZWVuIGRlYWQgY29kZSBlbGltaW5hdGVkIChEQ0UnZCkuXG4gICAgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmNoZWNrRENFKGNoZWNrRENFKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgLy8gRGV2VG9vbHMgc2hvdWxkbid0IGNyYXNoIFJlYWN0LCBubyBtYXR0ZXIgd2hhdC5cbiAgICAvLyBXZSBzaG91bGQgc3RpbGwgcmVwb3J0IGluIGNhc2Ugd2UgYnJlYWsgdGhpcyBjb2RlLlxuICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgfVxufVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICAvLyBEQ0UgY2hlY2sgc2hvdWxkIGhhcHBlbiBiZWZvcmUgUmVhY3RET00gYnVuZGxlIGV4ZWN1dGVzIHNvIHRoYXRcbiAgLy8gRGV2VG9vbHMgY2FuIHJlcG9ydCBiYWQgbWluaWZpY2F0aW9uIGR1cmluZyBpbmplY3Rpb24uXG4gIGNoZWNrRENFKCk7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXByaW1pdGl2ZScpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcbnZhciBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIHZhciBwcm9wZXJ0eUtleSA9IHRvUHJpbWl0aXZlKGtleSk7XG4gIGlmIChwcm9wZXJ0eUtleSBpbiBvYmplY3QpIGRlZmluZVByb3BlcnR5TW9kdWxlLmYob2JqZWN0LCBwcm9wZXJ0eUtleSwgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDAsIHZhbHVlKSk7XG4gIGVsc2Ugb2JqZWN0W3Byb3BlcnR5S2V5XSA9IHZhbHVlO1xufTtcbiIsInZhciBjb3JlID0gbW9kdWxlLmV4cG9ydHMgPSB7IHZlcnNpb246ICcyLjYuOScgfTtcbmlmICh0eXBlb2YgX19lID09ICdudW1iZXInKSBfX2UgPSBjb3JlOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBVc2UgaW52YXJpYW50KCkgdG8gYXNzZXJ0IHN0YXRlIHdoaWNoIHlvdXIgcHJvZ3JhbSBhc3N1bWVzIHRvIGJlIHRydWUuXG4gKlxuICogUHJvdmlkZSBzcHJpbnRmLXN0eWxlIGZvcm1hdCAob25seSAlcyBpcyBzdXBwb3J0ZWQpIGFuZCBhcmd1bWVudHNcbiAqIHRvIHByb3ZpZGUgaW5mb3JtYXRpb24gYWJvdXQgd2hhdCBicm9rZSBhbmQgd2hhdCB5b3Ugd2VyZVxuICogZXhwZWN0aW5nLlxuICpcbiAqIFRoZSBpbnZhcmlhbnQgbWVzc2FnZSB3aWxsIGJlIHN0cmlwcGVkIGluIHByb2R1Y3Rpb24sIGJ1dCB0aGUgaW52YXJpYW50XG4gKiB3aWxsIHJlbWFpbiB0byBlbnN1cmUgbG9naWMgZG9lcyBub3QgZGlmZmVyIGluIHByb2R1Y3Rpb24uXG4gKi9cblxudmFyIGludmFyaWFudCA9IGZ1bmN0aW9uKGNvbmRpdGlvbiwgZm9ybWF0LCBhLCBiLCBjLCBkLCBlLCBmKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFyaWFudCByZXF1aXJlcyBhbiBlcnJvciBtZXNzYWdlIGFyZ3VtZW50Jyk7XG4gICAgfVxuICB9XG5cbiAgaWYgKCFjb25kaXRpb24pIHtcbiAgICB2YXIgZXJyb3I7XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBlcnJvciA9IG5ldyBFcnJvcihcbiAgICAgICAgJ01pbmlmaWVkIGV4Y2VwdGlvbiBvY2N1cnJlZDsgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50ICcgK1xuICAgICAgICAnZm9yIHRoZSBmdWxsIGVycm9yIG1lc3NhZ2UgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy4nXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYXJncyA9IFthLCBiLCBjLCBkLCBlLCBmXTtcbiAgICAgIHZhciBhcmdJbmRleCA9IDA7XG4gICAgICBlcnJvciA9IG5ldyBFcnJvcihcbiAgICAgICAgZm9ybWF0LnJlcGxhY2UoLyVzL2csIGZ1bmN0aW9uKCkgeyByZXR1cm4gYXJnc1thcmdJbmRleCsrXTsgfSlcbiAgICAgICk7XG4gICAgICBlcnJvci5uYW1lID0gJ0ludmFyaWFudCBWaW9sYXRpb24nO1xuICAgIH1cblxuICAgIGVycm9yLmZyYW1lc1RvUG9wID0gMTsgLy8gd2UgZG9uJ3QgY2FyZSBhYm91dCBpbnZhcmlhbnQncyBvd24gZnJhbWVcbiAgICB0aHJvdyBlcnJvcjtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBpbnZhcmlhbnQ7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTUVUSE9EX05BTUUsIGFyZ3VtZW50KSB7XG4gIHZhciBtZXRob2QgPSBbXVtNRVRIT0RfTkFNRV07XG4gIHJldHVybiAhbWV0aG9kIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVzZWxlc3MtY2FsbCxuby10aHJvdy1saXRlcmFsXG4gICAgbWV0aG9kLmNhbGwobnVsbCwgYXJndW1lbnQgfHwgZnVuY3Rpb24gKCkgeyB0aHJvdyAxOyB9LCAxKTtcbiAgfSk7XG59O1xuIiwiLy8gYSBzdHJpbmcgb2YgYWxsIHZhbGlkIHVuaWNvZGUgd2hpdGVzcGFjZXNcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBtYXgtbGVuXG5tb2R1bGUuZXhwb3J0cyA9ICdcXHUwMDA5XFx1MDAwQVxcdTAwMEJcXHUwMDBDXFx1MDAwRFxcdTAwMjBcXHUwMEEwXFx1MTY4MFxcdTIwMDBcXHUyMDAxXFx1MjAwMlxcdTIwMDNcXHUyMDA0XFx1MjAwNVxcdTIwMDZcXHUyMDA3XFx1MjAwOFxcdTIwMDlcXHUyMDBBXFx1MjAyRlxcdTIwNUZcXHUzMDAwXFx1MjAyOFxcdTIwMjlcXHVGRUZGJztcbiIsIi8qXG5vYmplY3QtYXNzaWduXG4oYykgU2luZHJlIFNvcmh1c1xuQGxpY2Vuc2UgTUlUXG4qL1xuXG4ndXNlIHN0cmljdCc7XG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyAqL1xudmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIHByb3BJc0VudW1lcmFibGUgPSBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuXG5mdW5jdGlvbiB0b09iamVjdCh2YWwpIHtcblx0aWYgKHZhbCA9PT0gbnVsbCB8fCB2YWwgPT09IHVuZGVmaW5lZCkge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ09iamVjdC5hc3NpZ24gY2Fubm90IGJlIGNhbGxlZCB3aXRoIG51bGwgb3IgdW5kZWZpbmVkJyk7XG5cdH1cblxuXHRyZXR1cm4gT2JqZWN0KHZhbCk7XG59XG5cbmZ1bmN0aW9uIHNob3VsZFVzZU5hdGl2ZSgpIHtcblx0dHJ5IHtcblx0XHRpZiAoIU9iamVjdC5hc3NpZ24pIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBEZXRlY3QgYnVnZ3kgcHJvcGVydHkgZW51bWVyYXRpb24gb3JkZXIgaW4gb2xkZXIgVjggdmVyc2lvbnMuXG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD00MTE4XG5cdFx0dmFyIHRlc3QxID0gbmV3IFN0cmluZygnYWJjJyk7ICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ldy13cmFwcGVyc1xuXHRcdHRlc3QxWzVdID0gJ2RlJztcblx0XHRpZiAoT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGVzdDEpWzBdID09PSAnNScpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2XG5cdFx0dmFyIHRlc3QyID0ge307XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCAxMDsgaSsrKSB7XG5cdFx0XHR0ZXN0MlsnXycgKyBTdHJpbmcuZnJvbUNoYXJDb2RlKGkpXSA9IGk7XG5cdFx0fVxuXHRcdHZhciBvcmRlcjIgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MikubWFwKGZ1bmN0aW9uIChuKSB7XG5cdFx0XHRyZXR1cm4gdGVzdDJbbl07XG5cdFx0fSk7XG5cdFx0aWYgKG9yZGVyMi5qb2luKCcnKSAhPT0gJzAxMjM0NTY3ODknKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzA1NlxuXHRcdHZhciB0ZXN0MyA9IHt9O1xuXHRcdCdhYmNkZWZnaGlqa2xtbm9wcXJzdCcuc3BsaXQoJycpLmZvckVhY2goZnVuY3Rpb24gKGxldHRlcikge1xuXHRcdFx0dGVzdDNbbGV0dGVyXSA9IGxldHRlcjtcblx0XHR9KTtcblx0XHRpZiAoT2JqZWN0LmtleXMoT2JqZWN0LmFzc2lnbih7fSwgdGVzdDMpKS5qb2luKCcnKSAhPT1cblx0XHRcdFx0J2FiY2RlZmdoaWprbG1ub3BxcnN0Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdHJldHVybiB0cnVlO1xuXHR9IGNhdGNoIChlcnIpIHtcblx0XHQvLyBXZSBkb24ndCBleHBlY3QgYW55IG9mIHRoZSBhYm92ZSB0byB0aHJvdywgYnV0IGJldHRlciB0byBiZSBzYWZlLlxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNob3VsZFVzZU5hdGl2ZSgpID8gT2JqZWN0LmFzc2lnbiA6IGZ1bmN0aW9uICh0YXJnZXQsIHNvdXJjZSkge1xuXHR2YXIgZnJvbTtcblx0dmFyIHRvID0gdG9PYmplY3QodGFyZ2V0KTtcblx0dmFyIHN5bWJvbHM7XG5cblx0Zm9yICh2YXIgcyA9IDE7IHMgPCBhcmd1bWVudHMubGVuZ3RoOyBzKyspIHtcblx0XHRmcm9tID0gT2JqZWN0KGFyZ3VtZW50c1tzXSk7XG5cblx0XHRmb3IgKHZhciBrZXkgaW4gZnJvbSkge1xuXHRcdFx0aWYgKGhhc093blByb3BlcnR5LmNhbGwoZnJvbSwga2V5KSkge1xuXHRcdFx0XHR0b1trZXldID0gZnJvbVtrZXldO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmIChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcblx0XHRcdHN5bWJvbHMgPSBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoZnJvbSk7XG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHN5bWJvbHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0aWYgKHByb3BJc0VudW1lcmFibGUuY2FsbChmcm9tLCBzeW1ib2xzW2ldKSkge1xuXHRcdFx0XHRcdHRvW3N5bWJvbHNbaV1dID0gZnJvbVtzeW1ib2xzW2ldXTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiB0bztcbn07XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBSZWFjdElzID0gcmVxdWlyZSgncmVhY3QtaXMnKTtcblxuICAvLyBCeSBleHBsaWNpdGx5IHVzaW5nIGBwcm9wLXR5cGVzYCB5b3UgYXJlIG9wdGluZyBpbnRvIG5ldyBkZXZlbG9wbWVudCBiZWhhdmlvci5cbiAgLy8gaHR0cDovL2ZiLm1lL3Byb3AtdHlwZXMtaW4tcHJvZFxuICB2YXIgdGhyb3dPbkRpcmVjdEFjY2VzcyA9IHRydWU7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mYWN0b3J5V2l0aFR5cGVDaGVja2VycycpKFJlYWN0SXMuaXNFbGVtZW50LCB0aHJvd09uRGlyZWN0QWNjZXNzKTtcbn0gZWxzZSB7XG4gIC8vIEJ5IGV4cGxpY2l0bHkgdXNpbmcgYHByb3AtdHlwZXNgIHlvdSBhcmUgb3B0aW5nIGludG8gbmV3IHByb2R1Y3Rpb24gYmVoYXZpb3IuXG4gIC8vIGh0dHA6Ly9mYi5tZS9wcm9wLXR5cGVzLWluLXByb2RcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2ZhY3RvcnlXaXRoVGhyb3dpbmdTaGltcycpKCk7XG59XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciAkbWFwID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWl0ZXJhdGlvbicpLm1hcDtcbnZhciBhcnJheU1ldGhvZEhhc1NwZWNpZXNTdXBwb3J0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1oYXMtc3BlY2llcy1zdXBwb3J0Jyk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUubWFwYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5tYXBcbi8vIHdpdGggYWRkaW5nIHN1cHBvcnQgb2YgQEBzcGVjaWVzXG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiAhYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCgnbWFwJykgfSwge1xuICBtYXA6IGZ1bmN0aW9uIG1hcChjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHJldHVybiAkbWFwKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xuXG52YXIgJGV4cG9ydCA9IGZ1bmN0aW9uICh0eXBlLCBuYW1lLCBzb3VyY2UpIHtcbiAgdmFyIElTX0ZPUkNFRCA9IHR5cGUgJiAkZXhwb3J0LkY7XG4gIHZhciBJU19HTE9CQUwgPSB0eXBlICYgJGV4cG9ydC5HO1xuICB2YXIgSVNfU1RBVElDID0gdHlwZSAmICRleHBvcnQuUztcbiAgdmFyIElTX1BST1RPID0gdHlwZSAmICRleHBvcnQuUDtcbiAgdmFyIElTX0JJTkQgPSB0eXBlICYgJGV4cG9ydC5CO1xuICB2YXIgSVNfV1JBUCA9IHR5cGUgJiAkZXhwb3J0Llc7XG4gIHZhciBleHBvcnRzID0gSVNfR0xPQkFMID8gY29yZSA6IGNvcmVbbmFtZV0gfHwgKGNvcmVbbmFtZV0gPSB7fSk7XG4gIHZhciBleHBQcm90byA9IGV4cG9ydHNbUFJPVE9UWVBFXTtcbiAgdmFyIHRhcmdldCA9IElTX0dMT0JBTCA/IGdsb2JhbCA6IElTX1NUQVRJQyA/IGdsb2JhbFtuYW1lXSA6IChnbG9iYWxbbmFtZV0gfHwge30pW1BST1RPVFlQRV07XG4gIHZhciBrZXksIG93biwgb3V0O1xuICBpZiAoSVNfR0xPQkFMKSBzb3VyY2UgPSBuYW1lO1xuICBmb3IgKGtleSBpbiBzb3VyY2UpIHtcbiAgICAvLyBjb250YWlucyBpbiBuYXRpdmVcbiAgICBvd24gPSAhSVNfRk9SQ0VEICYmIHRhcmdldCAmJiB0YXJnZXRba2V5XSAhPT0gdW5kZWZpbmVkO1xuICAgIGlmIChvd24gJiYgaGFzKGV4cG9ydHMsIGtleSkpIGNvbnRpbnVlO1xuICAgIC8vIGV4cG9ydCBuYXRpdmUgb3IgcGFzc2VkXG4gICAgb3V0ID0gb3duID8gdGFyZ2V0W2tleV0gOiBzb3VyY2Vba2V5XTtcbiAgICAvLyBwcmV2ZW50IGdsb2JhbCBwb2xsdXRpb24gZm9yIG5hbWVzcGFjZXNcbiAgICBleHBvcnRzW2tleV0gPSBJU19HTE9CQUwgJiYgdHlwZW9mIHRhcmdldFtrZXldICE9ICdmdW5jdGlvbicgPyBzb3VyY2Vba2V5XVxuICAgIC8vIGJpbmQgdGltZXJzIHRvIGdsb2JhbCBmb3IgY2FsbCBmcm9tIGV4cG9ydCBjb250ZXh0XG4gICAgOiBJU19CSU5EICYmIG93biA/IGN0eChvdXQsIGdsb2JhbClcbiAgICAvLyB3cmFwIGdsb2JhbCBjb25zdHJ1Y3RvcnMgZm9yIHByZXZlbnQgY2hhbmdlIHRoZW0gaW4gbGlicmFyeVxuICAgIDogSVNfV1JBUCAmJiB0YXJnZXRba2V5XSA9PSBvdXQgPyAoZnVuY3Rpb24gKEMpIHtcbiAgICAgIHZhciBGID0gZnVuY3Rpb24gKGEsIGIsIGMpIHtcbiAgICAgICAgaWYgKHRoaXMgaW5zdGFuY2VvZiBDKSB7XG4gICAgICAgICAgc3dpdGNoIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICAgICAgICBjYXNlIDA6IHJldHVybiBuZXcgQygpO1xuICAgICAgICAgICAgY2FzZSAxOiByZXR1cm4gbmV3IEMoYSk7XG4gICAgICAgICAgICBjYXNlIDI6IHJldHVybiBuZXcgQyhhLCBiKTtcbiAgICAgICAgICB9IHJldHVybiBuZXcgQyhhLCBiLCBjKTtcbiAgICAgICAgfSByZXR1cm4gQy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfTtcbiAgICAgIEZbUFJPVE9UWVBFXSA9IENbUFJPVE9UWVBFXTtcbiAgICAgIHJldHVybiBGO1xuICAgIC8vIG1ha2Ugc3RhdGljIHZlcnNpb25zIGZvciBwcm90b3R5cGUgbWV0aG9kc1xuICAgIH0pKG91dCkgOiBJU19QUk9UTyAmJiB0eXBlb2Ygb3V0ID09ICdmdW5jdGlvbicgPyBjdHgoRnVuY3Rpb24uY2FsbCwgb3V0KSA6IG91dDtcbiAgICAvLyBleHBvcnQgcHJvdG8gbWV0aG9kcyB0byBjb3JlLiVDT05TVFJVQ1RPUiUubWV0aG9kcy4lTkFNRSVcbiAgICBpZiAoSVNfUFJPVE8pIHtcbiAgICAgIChleHBvcnRzLnZpcnR1YWwgfHwgKGV4cG9ydHMudmlydHVhbCA9IHt9KSlba2V5XSA9IG91dDtcbiAgICAgIC8vIGV4cG9ydCBwcm90byBtZXRob2RzIHRvIGNvcmUuJUNPTlNUUlVDVE9SJS5wcm90b3R5cGUuJU5BTUUlXG4gICAgICBpZiAodHlwZSAmICRleHBvcnQuUiAmJiBleHBQcm90byAmJiAhZXhwUHJvdG9ba2V5XSkgaGlkZShleHBQcm90bywga2V5LCBvdXQpO1xuICAgIH1cbiAgfVxufTtcbi8vIHR5cGUgYml0bWFwXG4kZXhwb3J0LkYgPSAxOyAgIC8vIGZvcmNlZFxuJGV4cG9ydC5HID0gMjsgICAvLyBnbG9iYWxcbiRleHBvcnQuUyA9IDQ7ICAgLy8gc3RhdGljXG4kZXhwb3J0LlAgPSA4OyAgIC8vIHByb3RvXG4kZXhwb3J0LkIgPSAxNjsgIC8vIGJpbmRcbiRleHBvcnQuVyA9IDMyOyAgLy8gd3JhcFxuJGV4cG9ydC5VID0gNjQ7ICAvLyBzYWZlXG4kZXhwb3J0LlIgPSAxMjg7IC8vIHJlYWwgcHJvdG8gbWV0aG9kIGZvciBgbGlicmFyeWBcbm1vZHVsZS5leHBvcnRzID0gJGV4cG9ydDtcbiIsIi8vIFRoYW5rJ3MgSUU4IGZvciBoaXMgZnVubnkgZGVmaW5lUHJvcGVydHlcbm1vZHVsZS5leHBvcnRzID0gIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCAnYScsIHsgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9IH0pLmEgIT0gNztcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgc3RyaW5naWZ5ID0gcmVxdWlyZSgnLi9zdHJpbmdpZnknKTtcbnZhciBwYXJzZSA9IHJlcXVpcmUoJy4vcGFyc2UnKTtcbnZhciBmb3JtYXRzID0gcmVxdWlyZSgnLi9mb3JtYXRzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIGZvcm1hdHM6IGZvcm1hdHMsXG4gICAgcGFyc2U6IHBhcnNlLFxuICAgIHN0cmluZ2lmeTogc3RyaW5naWZ5XG59O1xuIiwidmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG52YXIgd2hpdGVzcGFjZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2hpdGVzcGFjZXMnKTtcblxudmFyIHdoaXRlc3BhY2UgPSAnWycgKyB3aGl0ZXNwYWNlcyArICddJztcbnZhciBsdHJpbSA9IFJlZ0V4cCgnXicgKyB3aGl0ZXNwYWNlICsgd2hpdGVzcGFjZSArICcqJyk7XG52YXIgcnRyaW0gPSBSZWdFeHAod2hpdGVzcGFjZSArIHdoaXRlc3BhY2UgKyAnKiQnKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUueyB0cmltLCB0cmltU3RhcnQsIHRyaW1FbmQsIHRyaW1MZWZ0LCB0cmltUmlnaHQgfWAgbWV0aG9kcyBpbXBsZW1lbnRhdGlvblxudmFyIGNyZWF0ZU1ldGhvZCA9IGZ1bmN0aW9uIChUWVBFKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMpIHtcbiAgICB2YXIgc3RyaW5nID0gU3RyaW5nKHJlcXVpcmVPYmplY3RDb2VyY2libGUoJHRoaXMpKTtcbiAgICBpZiAoVFlQRSAmIDEpIHN0cmluZyA9IHN0cmluZy5yZXBsYWNlKGx0cmltLCAnJyk7XG4gICAgaWYgKFRZUEUgJiAyKSBzdHJpbmcgPSBzdHJpbmcucmVwbGFjZShydHJpbSwgJycpO1xuICAgIHJldHVybiBzdHJpbmc7XG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgLy8gYFN0cmluZy5wcm90b3R5cGUueyB0cmltTGVmdCwgdHJpbVN0YXJ0IH1gIG1ldGhvZHNcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS50cmltc3RhcnRcbiAgc3RhcnQ6IGNyZWF0ZU1ldGhvZCgxKSxcbiAgLy8gYFN0cmluZy5wcm90b3R5cGUueyB0cmltUmlnaHQsIHRyaW1FbmQgfWAgbWV0aG9kc1xuICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnRyaW1lbmRcbiAgZW5kOiBjcmVhdGVNZXRob2QoMiksXG4gIC8vIGBTdHJpbmcucHJvdG90eXBlLnRyaW1gIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnRyaW1cbiAgdHJpbTogY3JlYXRlTWV0aG9kKDMpXG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihtb2R1bGUpIHtcblx0aWYgKCFtb2R1bGUud2VicGFja1BvbHlmaWxsKSB7XG5cdFx0bW9kdWxlLmRlcHJlY2F0ZSA9IGZ1bmN0aW9uKCkge307XG5cdFx0bW9kdWxlLnBhdGhzID0gW107XG5cdFx0Ly8gbW9kdWxlLnBhcmVudCA9IHVuZGVmaW5lZCBieSBkZWZhdWx0XG5cdFx0aWYgKCFtb2R1bGUuY2hpbGRyZW4pIG1vZHVsZS5jaGlsZHJlbiA9IFtdO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwibG9hZGVkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmw7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJpZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5pO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdG1vZHVsZS53ZWJwYWNrUG9seWZpbGwgPSAxO1xuXHR9XG5cdHJldHVybiBtb2R1bGU7XG59O1xuIiwiZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfY2xhc3NDYWxsQ2hlY2s7IiwiZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICB9XG59XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gIGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgcmV0dXJuIENvbnN0cnVjdG9yO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9jcmVhdGVDbGFzczsiLCJ2YXIgX3R5cGVvZiA9IHJlcXVpcmUoXCIuLi9oZWxwZXJzL3R5cGVvZlwiKTtcblxudmFyIGFzc2VydFRoaXNJbml0aWFsaXplZCA9IHJlcXVpcmUoXCIuL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiKTtcblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkge1xuICBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSkge1xuICAgIHJldHVybiBjYWxsO1xuICB9XG5cbiAgcmV0dXJuIGFzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjsiLCJmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2Yobykge1xuICBtb2R1bGUuZXhwb3J0cyA9IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7XG4gICAgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTtcbiAgfTtcbiAgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfZ2V0UHJvdG90eXBlT2Y7IiwidmFyIHNldFByb3RvdHlwZU9mID0gcmVxdWlyZShcIi4vc2V0UHJvdG90eXBlT2ZcIik7XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpO1xuICB9XG5cbiAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7XG4gICAgY29uc3RydWN0b3I6IHtcbiAgICAgIHZhbHVlOiBzdWJDbGFzcyxcbiAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfVxuICB9KTtcbiAgaWYgKHN1cGVyQ2xhc3MpIHNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfaW5oZXJpdHM7IiwiZnVuY3Rpb24gX2V4dGVuZHMoKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcblxuICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9O1xuXG4gIHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9leHRlbmRzOyIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy84NiNpc3N1ZWNvbW1lbnQtMTE1NzU5MDI4XG52YXIgZ2xvYmFsID0gbW9kdWxlLmV4cG9ydHMgPSB0eXBlb2Ygd2luZG93ICE9ICd1bmRlZmluZWQnICYmIHdpbmRvdy5NYXRoID09IE1hdGhcbiAgPyB3aW5kb3cgOiB0eXBlb2Ygc2VsZiAhPSAndW5kZWZpbmVkJyAmJiBzZWxmLk1hdGggPT0gTWF0aCA/IHNlbGZcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jXG4gIDogRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcbmlmICh0eXBlb2YgX19nID09ICdudW1iZXInKSBfX2cgPSBnbG9iYWw7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0eXBlb2YgaXQgPT09ICdvYmplY3QnID8gaXQgIT09IG51bGwgOiB0eXBlb2YgaXQgPT09ICdmdW5jdGlvbic7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZXhlYykge1xuICB0cnkge1xuICAgIHJldHVybiAhIWV4ZWMoKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59O1xuIiwiLy8gMTkuMS4yLjE0IC8gMTUuMi4zLjE0IE9iamVjdC5rZXlzKE8pXG52YXIgJGtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cy1pbnRlcm5hbCcpO1xudmFyIGVudW1CdWdLZXlzID0gcmVxdWlyZSgnLi9fZW51bS1idWcta2V5cycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5rZXlzIHx8IGZ1bmN0aW9uIGtleXMoTykge1xuICByZXR1cm4gJGtleXMoTywgZW51bUJ1Z0tleXMpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gY2hlY2tEQ0UoKSB7XG4gIC8qIGdsb2JhbCBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gKi9cbiAgaWYgKFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gPT09ICd1bmRlZmluZWQnIHx8XG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRSAhPT0gJ2Z1bmN0aW9uJ1xuICApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyBUaGlzIGJyYW5jaCBpcyB1bnJlYWNoYWJsZSBiZWNhdXNlIHRoaXMgZnVuY3Rpb24gaXMgb25seSBjYWxsZWRcbiAgICAvLyBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGNvbmRpdGlvbiBpcyB0cnVlIG9ubHkgaW4gZGV2ZWxvcG1lbnQuXG4gICAgLy8gVGhlcmVmb3JlIGlmIHRoZSBicmFuY2ggaXMgc3RpbGwgaGVyZSwgZGVhZCBjb2RlIGVsaW1pbmF0aW9uIHdhc24ndFxuICAgIC8vIHByb3Blcmx5IGFwcGxpZWQuXG4gICAgLy8gRG9uJ3QgY2hhbmdlIHRoZSBtZXNzYWdlLiBSZWFjdCBEZXZUb29scyByZWxpZXMgb24gaXQuIEFsc28gbWFrZSBzdXJlXG4gICAgLy8gdGhpcyBtZXNzYWdlIGRvZXNuJ3Qgb2NjdXIgZWxzZXdoZXJlIGluIHRoaXMgZnVuY3Rpb24sIG9yIGl0IHdpbGwgY2F1c2VcbiAgICAvLyBhIGZhbHNlIHBvc2l0aXZlLlxuICAgIHRocm93IG5ldyBFcnJvcignXl9eJyk7XG4gIH1cbiAgdHJ5IHtcbiAgICAvLyBWZXJpZnkgdGhhdCB0aGUgY29kZSBhYm92ZSBoYXMgYmVlbiBkZWFkIGNvZGUgZWxpbWluYXRlZCAoRENFJ2QpLlxuICAgIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRShjaGVja0RDRSk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIC8vIERldlRvb2xzIHNob3VsZG4ndCBjcmFzaCBSZWFjdCwgbm8gbWF0dGVyIHdoYXQuXG4gICAgLy8gV2Ugc2hvdWxkIHN0aWxsIHJlcG9ydCBpbiBjYXNlIHdlIGJyZWFrIHRoaXMgY29kZS5cbiAgICBjb25zb2xlLmVycm9yKGVycik7XG4gIH1cbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgLy8gRENFIGNoZWNrIHNob3VsZCBoYXBwZW4gYmVmb3JlIFJlYWN0RE9NIGJ1bmRsZSBleGVjdXRlcyBzbyB0aGF0XG4gIC8vIERldlRvb2xzIGNhbiByZXBvcnQgYmFkIG1pbmlmaWNhdGlvbiBkdXJpbmcgaW5qZWN0aW9uLlxuICBjaGVja0RDRSgpO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20uZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gbWVtaXplKCBmbiwgb3B0aW9ucyApIHtcblx0dmFyIHNpemUgPSAwLFxuXHRcdG1heFNpemUsIGhlYWQsIHRhaWw7XG5cblx0aWYgKCBvcHRpb25zICYmIG9wdGlvbnMubWF4U2l6ZSApIHtcblx0XHRtYXhTaXplID0gb3B0aW9ucy5tYXhTaXplO1xuXHR9XG5cblx0ZnVuY3Rpb24gbWVtb2l6ZWQoIC8qIC4uLmFyZ3MgKi8gKSB7XG5cdFx0dmFyIG5vZGUgPSBoZWFkLFxuXHRcdFx0bGVuID0gYXJndW1lbnRzLmxlbmd0aCxcblx0XHRcdGFyZ3MsIGk7XG5cblx0XHRzZWFyY2hDYWNoZTogd2hpbGUgKCBub2RlICkge1xuXHRcdFx0Ly8gUGVyZm9ybSBhIHNoYWxsb3cgZXF1YWxpdHkgdGVzdCB0byBjb25maXJtIHRoYXQgd2hldGhlciB0aGUgbm9kZVxuXHRcdFx0Ly8gdW5kZXIgdGVzdCBpcyBhIGNhbmRpZGF0ZSBmb3IgdGhlIGFyZ3VtZW50cyBwYXNzZWQuIFR3byBhcnJheXNcblx0XHRcdC8vIGFyZSBzaGFsbG93bHkgZXF1YWwgaWYgdGhlaXIgbGVuZ3RoIG1hdGNoZXMgYW5kIGVhY2ggZW50cnkgaXNcblx0XHRcdC8vIHN0cmljdGx5IGVxdWFsIGJldHdlZW4gdGhlIHR3byBzZXRzLiBBdm9pZCBhYnN0cmFjdGluZyB0byBhXG5cdFx0XHQvLyBmdW5jdGlvbiB3aGljaCBjb3VsZCBpbmN1ciBhbiBhcmd1bWVudHMgbGVha2luZyBkZW9wdGltaXphdGlvbi5cblxuXHRcdFx0Ly8gQ2hlY2sgd2hldGhlciBub2RlIGFyZ3VtZW50cyBtYXRjaCBhcmd1bWVudHMgbGVuZ3RoXG5cdFx0XHRpZiAoIG5vZGUuYXJncy5sZW5ndGggIT09IGFyZ3VtZW50cy5sZW5ndGggKSB7XG5cdFx0XHRcdG5vZGUgPSBub2RlLm5leHQ7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDaGVjayB3aGV0aGVyIG5vZGUgYXJndW1lbnRzIG1hdGNoIGFyZ3VtZW50cyB2YWx1ZXNcblx0XHRcdGZvciAoIGkgPSAwOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRcdGlmICggbm9kZS5hcmdzWyBpIF0gIT09IGFyZ3VtZW50c1sgaSBdICkge1xuXHRcdFx0XHRcdG5vZGUgPSBub2RlLm5leHQ7XG5cdFx0XHRcdFx0Y29udGludWUgc2VhcmNoQ2FjaGU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gQXQgdGhpcyBwb2ludCB3ZSBjYW4gYXNzdW1lIHdlJ3ZlIGZvdW5kIGEgbWF0Y2hcblxuXHRcdFx0Ly8gU3VyZmFjZSBtYXRjaGVkIG5vZGUgdG8gaGVhZCBpZiBub3QgYWxyZWFkeVxuXHRcdFx0aWYgKCBub2RlICE9PSBoZWFkICkge1xuXHRcdFx0XHQvLyBBcyB0YWlsLCBzaGlmdCB0byBwcmV2aW91cy4gTXVzdCBvbmx5IHNoaWZ0IGlmIG5vdCBhbHNvXG5cdFx0XHRcdC8vIGhlYWQsIHNpbmNlIGlmIGJvdGggaGVhZCBhbmQgdGFpbCwgdGhlcmUgaXMgbm8gcHJldmlvdXMuXG5cdFx0XHRcdGlmICggbm9kZSA9PT0gdGFpbCApIHtcblx0XHRcdFx0XHR0YWlsID0gbm9kZS5wcmV2O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQWRqdXN0IHNpYmxpbmdzIHRvIHBvaW50IHRvIGVhY2ggb3RoZXIuIElmIG5vZGUgd2FzIHRhaWwsXG5cdFx0XHRcdC8vIHRoaXMgYWxzbyBoYW5kbGVzIG5ldyB0YWlsJ3MgZW1wdHkgYG5leHRgIGFzc2lnbm1lbnQuXG5cdFx0XHRcdG5vZGUucHJldi5uZXh0ID0gbm9kZS5uZXh0O1xuXHRcdFx0XHRpZiAoIG5vZGUubmV4dCApIHtcblx0XHRcdFx0XHRub2RlLm5leHQucHJldiA9IG5vZGUucHJldjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdG5vZGUubmV4dCA9IGhlYWQ7XG5cdFx0XHRcdG5vZGUucHJldiA9IG51bGw7XG5cdFx0XHRcdGhlYWQucHJldiA9IG5vZGU7XG5cdFx0XHRcdGhlYWQgPSBub2RlO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZXR1cm4gaW1tZWRpYXRlbHlcblx0XHRcdHJldHVybiBub2RlLnZhbDtcblx0XHR9XG5cblx0XHQvLyBObyBjYWNoZWQgdmFsdWUgZm91bmQuIENvbnRpbnVlIHRvIGluc2VydGlvbiBwaGFzZTpcblxuXHRcdC8vIENyZWF0ZSBhIGNvcHkgb2YgYXJndW1lbnRzIChhdm9pZCBsZWFraW5nIGRlb3B0aW1pemF0aW9uKVxuXHRcdGFyZ3MgPSBuZXcgQXJyYXkoIGxlbiApO1xuXHRcdGZvciAoIGkgPSAwOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRhcmdzWyBpIF0gPSBhcmd1bWVudHNbIGkgXTtcblx0XHR9XG5cblx0XHRub2RlID0ge1xuXHRcdFx0YXJnczogYXJncyxcblxuXHRcdFx0Ly8gR2VuZXJhdGUgdGhlIHJlc3VsdCBmcm9tIG9yaWdpbmFsIGZ1bmN0aW9uXG5cdFx0XHR2YWw6IGZuLmFwcGx5KCBudWxsLCBhcmdzIClcblx0XHR9O1xuXG5cdFx0Ly8gRG9uJ3QgbmVlZCB0byBjaGVjayB3aGV0aGVyIG5vZGUgaXMgYWxyZWFkeSBoZWFkLCBzaW5jZSBpdCB3b3VsZFxuXHRcdC8vIGhhdmUgYmVlbiByZXR1cm5lZCBhYm92ZSBhbHJlYWR5IGlmIGl0IHdhc1xuXG5cdFx0Ly8gU2hpZnQgZXhpc3RpbmcgaGVhZCBkb3duIGxpc3Rcblx0XHRpZiAoIGhlYWQgKSB7XG5cdFx0XHRoZWFkLnByZXYgPSBub2RlO1xuXHRcdFx0bm9kZS5uZXh0ID0gaGVhZDtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Ly8gSWYgbm8gaGVhZCwgZm9sbG93cyB0aGF0IHRoZXJlJ3Mgbm8gdGFpbCAoYXQgaW5pdGlhbCBvciByZXNldClcblx0XHRcdHRhaWwgPSBub2RlO1xuXHRcdH1cblxuXHRcdC8vIFRyaW0gdGFpbCBpZiB3ZSdyZSByZWFjaGVkIG1heCBzaXplIGFuZCBhcmUgcGVuZGluZyBjYWNoZSBpbnNlcnRpb25cblx0XHRpZiAoIHNpemUgPT09IG1heFNpemUgKSB7XG5cdFx0XHR0YWlsID0gdGFpbC5wcmV2O1xuXHRcdFx0dGFpbC5uZXh0ID0gbnVsbDtcblx0XHR9IGVsc2Uge1xuXHRcdFx0c2l6ZSsrO1xuXHRcdH1cblxuXHRcdGhlYWQgPSBub2RlO1xuXG5cdFx0cmV0dXJuIG5vZGUudmFsO1xuXHR9XG5cblx0bWVtb2l6ZWQuY2xlYXIgPSBmdW5jdGlvbigpIHtcblx0XHRoZWFkID0gbnVsbDtcblx0XHR0YWlsID0gbnVsbDtcblx0XHRzaXplID0gMDtcblx0fTtcblxuXHRpZiAoIHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAndGVzdCcgKSB7XG5cdFx0Ly8gQ2FjaGUgaXMgbm90IGV4cG9zZWQgaW4gdGhlIHB1YmxpYyBBUEksIGJ1dCB1c2VkIGluIHRlc3RzIHRvIGVuc3VyZVxuXHRcdC8vIGV4cGVjdGVkIGxpc3QgcHJvZ3Jlc3Npb25cblx0XHRtZW1vaXplZC5nZXRDYWNoZSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIFsgaGVhZCwgdGFpbCwgc2l6ZSBdO1xuXHRcdH07XG5cdH1cblxuXHRyZXR1cm4gbWVtb2l6ZWQ7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9hc3NpZ25cIik7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9rZXlzXCIpOyIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyICRmaWx0ZXIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uJykuZmlsdGVyO1xudmFyIGFycmF5TWV0aG9kSGFzU3BlY2llc1N1cHBvcnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLWhhcy1zcGVjaWVzLXN1cHBvcnQnKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5maWx0ZXJgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZpbHRlclxuLy8gd2l0aCBhZGRpbmcgc3VwcG9ydCBvZiBAQHNwZWNpZXNcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6ICFhcnJheU1ldGhvZEhhc1NwZWNpZXNTdXBwb3J0KCdmaWx0ZXInKSB9LCB7XG4gIGZpbHRlcjogZnVuY3Rpb24gZmlsdGVyKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgcmV0dXJuICRmaWx0ZXIodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWZ1bmN0aW9uJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBzbG9wcHlBcnJheU1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zbG9wcHktYXJyYXktbWV0aG9kJyk7XG5cbnZhciBuYXRpdmVTb3J0ID0gW10uc29ydDtcbnZhciB0ZXN0ID0gWzEsIDIsIDNdO1xuXG4vLyBJRTgtXG52YXIgRkFJTFNfT05fVU5ERUZJTkVEID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICB0ZXN0LnNvcnQodW5kZWZpbmVkKTtcbn0pO1xuLy8gVjggYnVnXG52YXIgRkFJTFNfT05fTlVMTCA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgdGVzdC5zb3J0KG51bGwpO1xufSk7XG4vLyBPbGQgV2ViS2l0XG52YXIgU0xPUFBZX01FVEhPRCA9IHNsb3BweUFycmF5TWV0aG9kKCdzb3J0Jyk7XG5cbnZhciBGT1JDRUQgPSBGQUlMU19PTl9VTkRFRklORUQgfHwgIUZBSUxTX09OX05VTEwgfHwgU0xPUFBZX01FVEhPRDtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5zb3J0YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5zb3J0XG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBGT1JDRUQgfSwge1xuICBzb3J0OiBmdW5jdGlvbiBzb3J0KGNvbXBhcmVmbikge1xuICAgIHJldHVybiBjb21wYXJlZm4gPT09IHVuZGVmaW5lZFxuICAgICAgPyBuYXRpdmVTb3J0LmNhbGwodG9PYmplY3QodGhpcykpXG4gICAgICA6IG5hdGl2ZVNvcnQuY2FsbCh0b09iamVjdCh0aGlzKSwgYUZ1bmN0aW9uKGNvbXBhcmVmbikpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1hYnNvbHV0ZS1pbmRleCcpO1xudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbnRlZ2VyJyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgYXJyYXlTcGVjaWVzQ3JlYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LXNwZWNpZXMtY3JlYXRlJyk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5Jyk7XG52YXIgYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1tZXRob2QtaGFzLXNwZWNpZXMtc3VwcG9ydCcpO1xuXG52YXIgbWF4ID0gTWF0aC5tYXg7XG52YXIgbWluID0gTWF0aC5taW47XG52YXIgTUFYX1NBRkVfSU5URUdFUiA9IDB4MUZGRkZGRkZGRkZGRkY7XG52YXIgTUFYSU1VTV9BTExPV0VEX0xFTkdUSF9FWENFRURFRCA9ICdNYXhpbXVtIGFsbG93ZWQgbGVuZ3RoIGV4Y2VlZGVkJztcblxuLy8gYEFycmF5LnByb3RvdHlwZS5zcGxpY2VgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLnNwbGljZVxuLy8gd2l0aCBhZGRpbmcgc3VwcG9ydCBvZiBAQHNwZWNpZXNcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6ICFhcnJheU1ldGhvZEhhc1NwZWNpZXNTdXBwb3J0KCdzcGxpY2UnKSB9LCB7XG4gIHNwbGljZTogZnVuY3Rpb24gc3BsaWNlKHN0YXJ0LCBkZWxldGVDb3VudCAvKiAsIC4uLml0ZW1zICovKSB7XG4gICAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgICB2YXIgbGVuID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgIHZhciBhY3R1YWxTdGFydCA9IHRvQWJzb2x1dGVJbmRleChzdGFydCwgbGVuKTtcbiAgICB2YXIgYXJndW1lbnRzTGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgaW5zZXJ0Q291bnQsIGFjdHVhbERlbGV0ZUNvdW50LCBBLCBrLCBmcm9tLCB0bztcbiAgICBpZiAoYXJndW1lbnRzTGVuZ3RoID09PSAwKSB7XG4gICAgICBpbnNlcnRDb3VudCA9IGFjdHVhbERlbGV0ZUNvdW50ID0gMDtcbiAgICB9IGVsc2UgaWYgKGFyZ3VtZW50c0xlbmd0aCA9PT0gMSkge1xuICAgICAgaW5zZXJ0Q291bnQgPSAwO1xuICAgICAgYWN0dWFsRGVsZXRlQ291bnQgPSBsZW4gLSBhY3R1YWxTdGFydDtcbiAgICB9IGVsc2Uge1xuICAgICAgaW5zZXJ0Q291bnQgPSBhcmd1bWVudHNMZW5ndGggLSAyO1xuICAgICAgYWN0dWFsRGVsZXRlQ291bnQgPSBtaW4obWF4KHRvSW50ZWdlcihkZWxldGVDb3VudCksIDApLCBsZW4gLSBhY3R1YWxTdGFydCk7XG4gICAgfVxuICAgIGlmIChsZW4gKyBpbnNlcnRDb3VudCAtIGFjdHVhbERlbGV0ZUNvdW50ID4gTUFYX1NBRkVfSU5URUdFUikge1xuICAgICAgdGhyb3cgVHlwZUVycm9yKE1BWElNVU1fQUxMT1dFRF9MRU5HVEhfRVhDRUVERUQpO1xuICAgIH1cbiAgICBBID0gYXJyYXlTcGVjaWVzQ3JlYXRlKE8sIGFjdHVhbERlbGV0ZUNvdW50KTtcbiAgICBmb3IgKGsgPSAwOyBrIDwgYWN0dWFsRGVsZXRlQ291bnQ7IGsrKykge1xuICAgICAgZnJvbSA9IGFjdHVhbFN0YXJ0ICsgaztcbiAgICAgIGlmIChmcm9tIGluIE8pIGNyZWF0ZVByb3BlcnR5KEEsIGssIE9bZnJvbV0pO1xuICAgIH1cbiAgICBBLmxlbmd0aCA9IGFjdHVhbERlbGV0ZUNvdW50O1xuICAgIGlmIChpbnNlcnRDb3VudCA8IGFjdHVhbERlbGV0ZUNvdW50KSB7XG4gICAgICBmb3IgKGsgPSBhY3R1YWxTdGFydDsgayA8IGxlbiAtIGFjdHVhbERlbGV0ZUNvdW50OyBrKyspIHtcbiAgICAgICAgZnJvbSA9IGsgKyBhY3R1YWxEZWxldGVDb3VudDtcbiAgICAgICAgdG8gPSBrICsgaW5zZXJ0Q291bnQ7XG4gICAgICAgIGlmIChmcm9tIGluIE8pIE9bdG9dID0gT1tmcm9tXTtcbiAgICAgICAgZWxzZSBkZWxldGUgT1t0b107XG4gICAgICB9XG4gICAgICBmb3IgKGsgPSBsZW47IGsgPiBsZW4gLSBhY3R1YWxEZWxldGVDb3VudCArIGluc2VydENvdW50OyBrLS0pIGRlbGV0ZSBPW2sgLSAxXTtcbiAgICB9IGVsc2UgaWYgKGluc2VydENvdW50ID4gYWN0dWFsRGVsZXRlQ291bnQpIHtcbiAgICAgIGZvciAoayA9IGxlbiAtIGFjdHVhbERlbGV0ZUNvdW50OyBrID4gYWN0dWFsU3RhcnQ7IGstLSkge1xuICAgICAgICBmcm9tID0gayArIGFjdHVhbERlbGV0ZUNvdW50IC0gMTtcbiAgICAgICAgdG8gPSBrICsgaW5zZXJ0Q291bnQgLSAxO1xuICAgICAgICBpZiAoZnJvbSBpbiBPKSBPW3RvXSA9IE9bZnJvbV07XG4gICAgICAgIGVsc2UgZGVsZXRlIE9bdG9dO1xuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKGsgPSAwOyBrIDwgaW5zZXJ0Q291bnQ7IGsrKykge1xuICAgICAgT1trICsgYWN0dWFsU3RhcnRdID0gYXJndW1lbnRzW2sgKyAyXTtcbiAgICB9XG4gICAgTy5sZW5ndGggPSBsZW4gLSBhY3R1YWxEZWxldGVDb3VudCArIGluc2VydENvdW50O1xuICAgIHJldHVybiBBO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIG5hdGl2ZUtleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWtleXMnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG52YXIgRkFJTFNfT05fUFJJTUlUSVZFUyA9IGZhaWxzKGZ1bmN0aW9uICgpIHsgbmF0aXZlS2V5cygxKTsgfSk7XG5cbi8vIGBPYmplY3Qua2V5c2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3Qua2V5c1xuJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogRkFJTFNfT05fUFJJTUlUSVZFUyB9LCB7XG4gIGtleXM6IGZ1bmN0aW9uIGtleXMoaXQpIHtcbiAgICByZXR1cm4gbmF0aXZlS2V5cyh0b09iamVjdChpdCkpO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIHBhcnNlSW50SW1wbGVtZW50YXRpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcGFyc2UtaW50Jyk7XG5cbi8vIGBwYXJzZUludGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1wYXJzZWludC1zdHJpbmctcmFkaXhcbiQoeyBnbG9iYWw6IHRydWUsIGZvcmNlZDogcGFyc2VJbnQgIT0gcGFyc2VJbnRJbXBsZW1lbnRhdGlvbiB9LCB7XG4gIHBhcnNlSW50OiBwYXJzZUludEltcGxlbWVudGF0aW9uXG59KTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgdHJpbSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctdHJpbScpLnRyaW07XG52YXIgd2hpdGVzcGFjZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2hpdGVzcGFjZXMnKTtcblxudmFyIG5hdGl2ZVBhcnNlSW50ID0gZ2xvYmFsLnBhcnNlSW50O1xudmFyIGhleCA9IC9eWystXT8wW1h4XS87XG52YXIgRk9SQ0VEID0gbmF0aXZlUGFyc2VJbnQod2hpdGVzcGFjZXMgKyAnMDgnKSAhPT0gOCB8fCBuYXRpdmVQYXJzZUludCh3aGl0ZXNwYWNlcyArICcweDE2JykgIT09IDIyO1xuXG4vLyBgcGFyc2VJbnRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcGFyc2VpbnQtc3RyaW5nLXJhZGl4XG5tb2R1bGUuZXhwb3J0cyA9IEZPUkNFRCA/IGZ1bmN0aW9uIHBhcnNlSW50KHN0cmluZywgcmFkaXgpIHtcbiAgdmFyIFMgPSB0cmltKFN0cmluZyhzdHJpbmcpKTtcbiAgcmV0dXJuIG5hdGl2ZVBhcnNlSW50KFMsIChyYWRpeCA+Pj4gMCkgfHwgKGhleC50ZXN0KFMpID8gMTYgOiAxMCkpO1xufSA6IG5hdGl2ZVBhcnNlSW50O1xuIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNi45LjBcbiAqIHJlYWN0LnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO3ZhciBoPXJlcXVpcmUoXCJvYmplY3QtYXNzaWduXCIpLG49XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcixwPW4/U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIik6NjAxMDMscT1uP1N5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYscj1uP1N5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKTo2MDEwNyx0PW4/U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpOjYwMTA4LHU9bj9TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIik6NjAxMTQsdj1uP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKTo2MDEwOSx3PW4/U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIik6NjAxMTAseD1uP1N5bWJvbC5mb3IoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKTo2MDExMix5PW4/U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlXCIpOjYwMTEzLGFhPW4/U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlX2xpc3RcIik6NjAxMjAsYmE9bj9TeW1ib2wuZm9yKFwicmVhY3QubWVtb1wiKTpcbjYwMTE1LGNhPW4/U3ltYm9sLmZvcihcInJlYWN0LmxhenlcIik6NjAxMTY7biYmU3ltYm9sLmZvcihcInJlYWN0LmZ1bmRhbWVudGFsXCIpO24mJlN5bWJvbC5mb3IoXCJyZWFjdC5yZXNwb25kZXJcIik7dmFyIHo9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yO1xuZnVuY3Rpb24gQShhKXtmb3IodmFyIGI9YS5tZXNzYWdlLGQ9XCJodHRwczovL3JlYWN0anMub3JnL2RvY3MvZXJyb3ItZGVjb2Rlci5odG1sP2ludmFyaWFudD1cIitiLGM9MTtjPGFyZ3VtZW50cy5sZW5ndGg7YysrKWQrPVwiJmFyZ3NbXT1cIitlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2NdKTthLm1lc3NhZ2U9XCJNaW5pZmllZCBSZWFjdCBlcnJvciAjXCIrYitcIjsgdmlzaXQgXCIrZCtcIiBmb3IgdGhlIGZ1bGwgbWVzc2FnZSBvciB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIGZ1bGwgZXJyb3JzIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuIFwiO3JldHVybiBhfXZhciBCPXtpc01vdW50ZWQ6ZnVuY3Rpb24oKXtyZXR1cm4hMX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlUmVwbGFjZVN0YXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlU2V0U3RhdGU6ZnVuY3Rpb24oKXt9fSxDPXt9O1xuZnVuY3Rpb24gRChhLGIsZCl7dGhpcy5wcm9wcz1hO3RoaXMuY29udGV4dD1iO3RoaXMucmVmcz1DO3RoaXMudXBkYXRlcj1kfHxCfUQucHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnQ9e307RC5wcm90b3R5cGUuc2V0U3RhdGU9ZnVuY3Rpb24oYSxiKXtpZihcIm9iamVjdFwiIT09dHlwZW9mIGEmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBhJiZudWxsIT1hKXRocm93IEEoRXJyb3IoODUpKTt0aGlzLnVwZGF0ZXIuZW5xdWV1ZVNldFN0YXRlKHRoaXMsYSxiLFwic2V0U3RhdGVcIil9O0QucHJvdG90eXBlLmZvcmNlVXBkYXRlPWZ1bmN0aW9uKGEpe3RoaXMudXBkYXRlci5lbnF1ZXVlRm9yY2VVcGRhdGUodGhpcyxhLFwiZm9yY2VVcGRhdGVcIil9O2Z1bmN0aW9uIEUoKXt9RS5wcm90b3R5cGU9RC5wcm90b3R5cGU7ZnVuY3Rpb24gRihhLGIsZCl7dGhpcy5wcm9wcz1hO3RoaXMuY29udGV4dD1iO3RoaXMucmVmcz1DO3RoaXMudXBkYXRlcj1kfHxCfXZhciBHPUYucHJvdG90eXBlPW5ldyBFO1xuRy5jb25zdHJ1Y3Rvcj1GO2goRyxELnByb3RvdHlwZSk7Ry5pc1B1cmVSZWFjdENvbXBvbmVudD0hMDt2YXIgSD17Y3VycmVudDpudWxsfSxJPXtzdXNwZW5zZTpudWxsfSxKPXtjdXJyZW50Om51bGx9LEs9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxMPXtrZXk6ITAscmVmOiEwLF9fc2VsZjohMCxfX3NvdXJjZTohMH07XG5mdW5jdGlvbiBNKGEsYixkKXt2YXIgYz12b2lkIDAsZT17fSxnPW51bGwsaz1udWxsO2lmKG51bGwhPWIpZm9yKGMgaW4gdm9pZCAwIT09Yi5yZWYmJihrPWIucmVmKSx2b2lkIDAhPT1iLmtleSYmKGc9XCJcIitiLmtleSksYilLLmNhbGwoYixjKSYmIUwuaGFzT3duUHJvcGVydHkoYykmJihlW2NdPWJbY10pO3ZhciBmPWFyZ3VtZW50cy5sZW5ndGgtMjtpZigxPT09ZillLmNoaWxkcmVuPWQ7ZWxzZSBpZigxPGYpe2Zvcih2YXIgbD1BcnJheShmKSxtPTA7bTxmO20rKylsW21dPWFyZ3VtZW50c1ttKzJdO2UuY2hpbGRyZW49bH1pZihhJiZhLmRlZmF1bHRQcm9wcylmb3IoYyBpbiBmPWEuZGVmYXVsdFByb3BzLGYpdm9pZCAwPT09ZVtjXSYmKGVbY109ZltjXSk7cmV0dXJueyQkdHlwZW9mOnAsdHlwZTphLGtleTpnLHJlZjprLHByb3BzOmUsX293bmVyOkouY3VycmVudH19XG5mdW5jdGlvbiBkYShhLGIpe3JldHVybnskJHR5cGVvZjpwLHR5cGU6YS50eXBlLGtleTpiLHJlZjphLnJlZixwcm9wczphLnByb3BzLF9vd25lcjphLl9vd25lcn19ZnVuY3Rpb24gTihhKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZhLiQkdHlwZW9mPT09cH1mdW5jdGlvbiBlc2NhcGUoYSl7dmFyIGI9e1wiPVwiOlwiPTBcIixcIjpcIjpcIj0yXCJ9O3JldHVyblwiJFwiKyhcIlwiK2EpLnJlcGxhY2UoL1s9Ol0vZyxmdW5jdGlvbihhKXtyZXR1cm4gYlthXX0pfXZhciBPPS9cXC8rL2csUD1bXTtmdW5jdGlvbiBRKGEsYixkLGMpe2lmKFAubGVuZ3RoKXt2YXIgZT1QLnBvcCgpO2UucmVzdWx0PWE7ZS5rZXlQcmVmaXg9YjtlLmZ1bmM9ZDtlLmNvbnRleHQ9YztlLmNvdW50PTA7cmV0dXJuIGV9cmV0dXJue3Jlc3VsdDphLGtleVByZWZpeDpiLGZ1bmM6ZCxjb250ZXh0OmMsY291bnQ6MH19XG5mdW5jdGlvbiBSKGEpe2EucmVzdWx0PW51bGw7YS5rZXlQcmVmaXg9bnVsbDthLmZ1bmM9bnVsbDthLmNvbnRleHQ9bnVsbDthLmNvdW50PTA7MTA+UC5sZW5ndGgmJlAucHVzaChhKX1cbmZ1bmN0aW9uIFMoYSxiLGQsYyl7dmFyIGU9dHlwZW9mIGE7aWYoXCJ1bmRlZmluZWRcIj09PWV8fFwiYm9vbGVhblwiPT09ZSlhPW51bGw7dmFyIGc9ITE7aWYobnVsbD09PWEpZz0hMDtlbHNlIHN3aXRjaChlKXtjYXNlIFwic3RyaW5nXCI6Y2FzZSBcIm51bWJlclwiOmc9ITA7YnJlYWs7Y2FzZSBcIm9iamVjdFwiOnN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIHA6Y2FzZSBxOmc9ITB9fWlmKGcpcmV0dXJuIGQoYyxhLFwiXCI9PT1iP1wiLlwiK1QoYSwwKTpiKSwxO2c9MDtiPVwiXCI9PT1iP1wiLlwiOmIrXCI6XCI7aWYoQXJyYXkuaXNBcnJheShhKSlmb3IodmFyIGs9MDtrPGEubGVuZ3RoO2srKyl7ZT1hW2tdO3ZhciBmPWIrVChlLGspO2crPVMoZSxmLGQsYyl9ZWxzZSBpZihudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBhP2Y9bnVsbDooZj16JiZhW3pdfHxhW1wiQEBpdGVyYXRvclwiXSxmPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBmP2Y6bnVsbCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGYpZm9yKGE9Zi5jYWxsKGEpLGs9XG4wOyEoZT1hLm5leHQoKSkuZG9uZTspZT1lLnZhbHVlLGY9YitUKGUsaysrKSxnKz1TKGUsZixkLGMpO2Vsc2UgaWYoXCJvYmplY3RcIj09PWUpdGhyb3cgZD1cIlwiK2EsQShFcnJvcigzMSksXCJbb2JqZWN0IE9iamVjdF1cIj09PWQ/XCJvYmplY3Qgd2l0aCBrZXlzIHtcIitPYmplY3Qua2V5cyhhKS5qb2luKFwiLCBcIikrXCJ9XCI6ZCxcIlwiKTtyZXR1cm4gZ31mdW5jdGlvbiBVKGEsYixkKXtyZXR1cm4gbnVsbD09YT8wOlMoYSxcIlwiLGIsZCl9ZnVuY3Rpb24gVChhLGIpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJm51bGwhPWEua2V5P2VzY2FwZShhLmtleSk6Yi50b1N0cmluZygzNil9ZnVuY3Rpb24gZWEoYSxiKXthLmZ1bmMuY2FsbChhLmNvbnRleHQsYixhLmNvdW50KyspfVxuZnVuY3Rpb24gZmEoYSxiLGQpe3ZhciBjPWEucmVzdWx0LGU9YS5rZXlQcmVmaXg7YT1hLmZ1bmMuY2FsbChhLmNvbnRleHQsYixhLmNvdW50KyspO0FycmF5LmlzQXJyYXkoYSk/VihhLGMsZCxmdW5jdGlvbihhKXtyZXR1cm4gYX0pOm51bGwhPWEmJihOKGEpJiYoYT1kYShhLGUrKCFhLmtleXx8YiYmYi5rZXk9PT1hLmtleT9cIlwiOihcIlwiK2Eua2V5KS5yZXBsYWNlKE8sXCIkJi9cIikrXCIvXCIpK2QpKSxjLnB1c2goYSkpfWZ1bmN0aW9uIFYoYSxiLGQsYyxlKXt2YXIgZz1cIlwiO251bGwhPWQmJihnPShcIlwiK2QpLnJlcGxhY2UoTyxcIiQmL1wiKStcIi9cIik7Yj1RKGIsZyxjLGUpO1UoYSxmYSxiKTtSKGIpfWZ1bmN0aW9uIFcoKXt2YXIgYT1ILmN1cnJlbnQ7aWYobnVsbD09PWEpdGhyb3cgQShFcnJvcigzMjEpKTtyZXR1cm4gYX1cbnZhciBYPXtDaGlsZHJlbjp7bWFwOmZ1bmN0aW9uKGEsYixkKXtpZihudWxsPT1hKXJldHVybiBhO3ZhciBjPVtdO1YoYSxjLG51bGwsYixkKTtyZXR1cm4gY30sZm9yRWFjaDpmdW5jdGlvbihhLGIsZCl7aWYobnVsbD09YSlyZXR1cm4gYTtiPVEobnVsbCxudWxsLGIsZCk7VShhLGVhLGIpO1IoYil9LGNvdW50OmZ1bmN0aW9uKGEpe3JldHVybiBVKGEsZnVuY3Rpb24oKXtyZXR1cm4gbnVsbH0sbnVsbCl9LHRvQXJyYXk6ZnVuY3Rpb24oYSl7dmFyIGI9W107VihhLGIsbnVsbCxmdW5jdGlvbihhKXtyZXR1cm4gYX0pO3JldHVybiBifSxvbmx5OmZ1bmN0aW9uKGEpe2lmKCFOKGEpKXRocm93IEEoRXJyb3IoMTQzKSk7cmV0dXJuIGF9fSxjcmVhdGVSZWY6ZnVuY3Rpb24oKXtyZXR1cm57Y3VycmVudDpudWxsfX0sQ29tcG9uZW50OkQsUHVyZUNvbXBvbmVudDpGLGNyZWF0ZUNvbnRleHQ6ZnVuY3Rpb24oYSxiKXt2b2lkIDA9PT1iJiYoYj1udWxsKTthPXskJHR5cGVvZjp3LF9jYWxjdWxhdGVDaGFuZ2VkQml0czpiLFxuX2N1cnJlbnRWYWx1ZTphLF9jdXJyZW50VmFsdWUyOmEsX3RocmVhZENvdW50OjAsUHJvdmlkZXI6bnVsbCxDb25zdW1lcjpudWxsfTthLlByb3ZpZGVyPXskJHR5cGVvZjp2LF9jb250ZXh0OmF9O3JldHVybiBhLkNvbnN1bWVyPWF9LGZvcndhcmRSZWY6ZnVuY3Rpb24oYSl7cmV0dXJueyQkdHlwZW9mOngscmVuZGVyOmF9fSxsYXp5OmZ1bmN0aW9uKGEpe3JldHVybnskJHR5cGVvZjpjYSxfY3RvcjphLF9zdGF0dXM6LTEsX3Jlc3VsdDpudWxsfX0sbWVtbzpmdW5jdGlvbihhLGIpe3JldHVybnskJHR5cGVvZjpiYSx0eXBlOmEsY29tcGFyZTp2b2lkIDA9PT1iP251bGw6Yn19LHVzZUNhbGxiYWNrOmZ1bmN0aW9uKGEsYil7cmV0dXJuIFcoKS51c2VDYWxsYmFjayhhLGIpfSx1c2VDb250ZXh0OmZ1bmN0aW9uKGEsYil7cmV0dXJuIFcoKS51c2VDb250ZXh0KGEsYil9LHVzZUVmZmVjdDpmdW5jdGlvbihhLGIpe3JldHVybiBXKCkudXNlRWZmZWN0KGEsYil9LHVzZUltcGVyYXRpdmVIYW5kbGU6ZnVuY3Rpb24oYSxcbmIsZCl7cmV0dXJuIFcoKS51c2VJbXBlcmF0aXZlSGFuZGxlKGEsYixkKX0sdXNlRGVidWdWYWx1ZTpmdW5jdGlvbigpe30sdXNlTGF5b3V0RWZmZWN0OmZ1bmN0aW9uKGEsYil7cmV0dXJuIFcoKS51c2VMYXlvdXRFZmZlY3QoYSxiKX0sdXNlTWVtbzpmdW5jdGlvbihhLGIpe3JldHVybiBXKCkudXNlTWVtbyhhLGIpfSx1c2VSZWR1Y2VyOmZ1bmN0aW9uKGEsYixkKXtyZXR1cm4gVygpLnVzZVJlZHVjZXIoYSxiLGQpfSx1c2VSZWY6ZnVuY3Rpb24oYSl7cmV0dXJuIFcoKS51c2VSZWYoYSl9LHVzZVN0YXRlOmZ1bmN0aW9uKGEpe3JldHVybiBXKCkudXNlU3RhdGUoYSl9LEZyYWdtZW50OnIsUHJvZmlsZXI6dSxTdHJpY3RNb2RlOnQsU3VzcGVuc2U6eSx1bnN0YWJsZV9TdXNwZW5zZUxpc3Q6YWEsY3JlYXRlRWxlbWVudDpNLGNsb25lRWxlbWVudDpmdW5jdGlvbihhLGIsZCl7aWYobnVsbD09PWF8fHZvaWQgMD09PWEpdGhyb3cgQShFcnJvcigyNjcpLGEpO3ZhciBjPXZvaWQgMCxlPVxuaCh7fSxhLnByb3BzKSxnPWEua2V5LGs9YS5yZWYsZj1hLl9vd25lcjtpZihudWxsIT1iKXt2b2lkIDAhPT1iLnJlZiYmKGs9Yi5yZWYsZj1KLmN1cnJlbnQpO3ZvaWQgMCE9PWIua2V5JiYoZz1cIlwiK2Iua2V5KTt2YXIgbD12b2lkIDA7YS50eXBlJiZhLnR5cGUuZGVmYXVsdFByb3BzJiYobD1hLnR5cGUuZGVmYXVsdFByb3BzKTtmb3IoYyBpbiBiKUsuY2FsbChiLGMpJiYhTC5oYXNPd25Qcm9wZXJ0eShjKSYmKGVbY109dm9pZCAwPT09YltjXSYmdm9pZCAwIT09bD9sW2NdOmJbY10pfWM9YXJndW1lbnRzLmxlbmd0aC0yO2lmKDE9PT1jKWUuY2hpbGRyZW49ZDtlbHNlIGlmKDE8Yyl7bD1BcnJheShjKTtmb3IodmFyIG09MDttPGM7bSsrKWxbbV09YXJndW1lbnRzW20rMl07ZS5jaGlsZHJlbj1sfXJldHVybnskJHR5cGVvZjpwLHR5cGU6YS50eXBlLGtleTpnLHJlZjprLHByb3BzOmUsX293bmVyOmZ9fSxjcmVhdGVGYWN0b3J5OmZ1bmN0aW9uKGEpe3ZhciBiPU0uYmluZChudWxsLGEpO1xuYi50eXBlPWE7cmV0dXJuIGJ9LGlzVmFsaWRFbGVtZW50Ok4sdmVyc2lvbjpcIjE2LjkuMFwiLHVuc3RhYmxlX3dpdGhTdXNwZW5zZUNvbmZpZzpmdW5jdGlvbihhLGIpe3ZhciBkPUkuc3VzcGVuc2U7SS5zdXNwZW5zZT12b2lkIDA9PT1iP251bGw6Yjt0cnl7YSgpfWZpbmFsbHl7SS5zdXNwZW5zZT1kfX0sX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ6e1JlYWN0Q3VycmVudERpc3BhdGNoZXI6SCxSZWFjdEN1cnJlbnRCYXRjaENvbmZpZzpJLFJlYWN0Q3VycmVudE93bmVyOkosSXNTb21lUmVuZGVyZXJBY3Rpbmc6e2N1cnJlbnQ6ITF9LGFzc2lnbjpofX0sWT17ZGVmYXVsdDpYfSxaPVkmJlh8fFk7bW9kdWxlLmV4cG9ydHM9Wi5kZWZhdWx0fHxaO1xuIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNi45LjBcbiAqIHJlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbi8qXG4gTW9kZXJuaXpyIDMuMC4wcHJlIChDdXN0b20gQnVpbGQpIHwgTUlUXG4qL1xuJ3VzZSBzdHJpY3QnO3ZhciBhYT1yZXF1aXJlKFwicmVhY3RcIiksbT1yZXF1aXJlKFwib2JqZWN0LWFzc2lnblwiKSxxPXJlcXVpcmUoXCJzY2hlZHVsZXJcIik7ZnVuY3Rpb24gdChhKXtmb3IodmFyIGI9YS5tZXNzYWdlLGM9XCJodHRwczovL3JlYWN0anMub3JnL2RvY3MvZXJyb3ItZGVjb2Rlci5odG1sP2ludmFyaWFudD1cIitiLGQ9MTtkPGFyZ3VtZW50cy5sZW5ndGg7ZCsrKWMrPVwiJmFyZ3NbXT1cIitlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2RdKTthLm1lc3NhZ2U9XCJNaW5pZmllZCBSZWFjdCBlcnJvciAjXCIrYitcIjsgdmlzaXQgXCIrYytcIiBmb3IgdGhlIGZ1bGwgbWVzc2FnZSBvciB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIGZ1bGwgZXJyb3JzIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuIFwiO3JldHVybiBhfWlmKCFhYSl0aHJvdyB0KEVycm9yKDIyNykpO3ZhciBiYT1udWxsLGNhPXt9O1xuZnVuY3Rpb24gZGEoKXtpZihiYSlmb3IodmFyIGEgaW4gY2Epe3ZhciBiPWNhW2FdLGM9YmEuaW5kZXhPZihhKTtpZighKC0xPGMpKXRocm93IHQoRXJyb3IoOTYpLGEpO2lmKCFlYVtjXSl7aWYoIWIuZXh0cmFjdEV2ZW50cyl0aHJvdyB0KEVycm9yKDk3KSxhKTtlYVtjXT1iO2M9Yi5ldmVudFR5cGVzO2Zvcih2YXIgZCBpbiBjKXt2YXIgZT12b2lkIDA7dmFyIGY9Y1tkXSxoPWIsZz1kO2lmKGZhLmhhc093blByb3BlcnR5KGcpKXRocm93IHQoRXJyb3IoOTkpLGcpO2ZhW2ddPWY7dmFyIGs9Zi5waGFzZWRSZWdpc3RyYXRpb25OYW1lcztpZihrKXtmb3IoZSBpbiBrKWsuaGFzT3duUHJvcGVydHkoZSkmJmhhKGtbZV0saCxnKTtlPSEwfWVsc2UgZi5yZWdpc3RyYXRpb25OYW1lPyhoYShmLnJlZ2lzdHJhdGlvbk5hbWUsaCxnKSxlPSEwKTplPSExO2lmKCFlKXRocm93IHQoRXJyb3IoOTgpLGQsYSk7fX19fVxuZnVuY3Rpb24gaGEoYSxiLGMpe2lmKGlhW2FdKXRocm93IHQoRXJyb3IoMTAwKSxhKTtpYVthXT1iO2phW2FdPWIuZXZlbnRUeXBlc1tjXS5kZXBlbmRlbmNpZXN9dmFyIGVhPVtdLGZhPXt9LGlhPXt9LGphPXt9O2Z1bmN0aW9uIGthKGEsYixjLGQsZSxmLGgsZyxrKXt2YXIgbD1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMyk7dHJ5e2IuYXBwbHkoYyxsKX1jYXRjaChuKXt0aGlzLm9uRXJyb3Iobil9fXZhciBsYT0hMSxtYT1udWxsLG5hPSExLG9hPW51bGwscGE9e29uRXJyb3I6ZnVuY3Rpb24oYSl7bGE9ITA7bWE9YX19O2Z1bmN0aW9uIHFhKGEsYixjLGQsZSxmLGgsZyxrKXtsYT0hMTttYT1udWxsO2thLmFwcGx5KHBhLGFyZ3VtZW50cyl9XG5mdW5jdGlvbiByYShhLGIsYyxkLGUsZixoLGcsayl7cWEuYXBwbHkodGhpcyxhcmd1bWVudHMpO2lmKGxhKXtpZihsYSl7dmFyIGw9bWE7bGE9ITE7bWE9bnVsbH1lbHNlIHRocm93IHQoRXJyb3IoMTk4KSk7bmF8fChuYT0hMCxvYT1sKX19dmFyIHNhPW51bGwsdGE9bnVsbCx2YT1udWxsO2Z1bmN0aW9uIHdhKGEsYixjKXt2YXIgZD1hLnR5cGV8fFwidW5rbm93bi1ldmVudFwiO2EuY3VycmVudFRhcmdldD12YShjKTtyYShkLGIsdm9pZCAwLGEpO2EuY3VycmVudFRhcmdldD1udWxsfWZ1bmN0aW9uIHhhKGEsYil7aWYobnVsbD09Yil0aHJvdyB0KEVycm9yKDMwKSk7aWYobnVsbD09YSlyZXR1cm4gYjtpZihBcnJheS5pc0FycmF5KGEpKXtpZihBcnJheS5pc0FycmF5KGIpKXJldHVybiBhLnB1c2guYXBwbHkoYSxiKSxhO2EucHVzaChiKTtyZXR1cm4gYX1yZXR1cm4gQXJyYXkuaXNBcnJheShiKT9bYV0uY29uY2F0KGIpOlthLGJdfVxuZnVuY3Rpb24geWEoYSxiLGMpe0FycmF5LmlzQXJyYXkoYSk/YS5mb3JFYWNoKGIsYyk6YSYmYi5jYWxsKGMsYSl9dmFyIHphPW51bGw7ZnVuY3Rpb24gQWEoYSl7aWYoYSl7dmFyIGI9YS5fZGlzcGF0Y2hMaXN0ZW5lcnMsYz1hLl9kaXNwYXRjaEluc3RhbmNlcztpZihBcnJheS5pc0FycmF5KGIpKWZvcih2YXIgZD0wO2Q8Yi5sZW5ndGgmJiFhLmlzUHJvcGFnYXRpb25TdG9wcGVkKCk7ZCsrKXdhKGEsYltkXSxjW2RdKTtlbHNlIGImJndhKGEsYixjKTthLl9kaXNwYXRjaExpc3RlbmVycz1udWxsO2EuX2Rpc3BhdGNoSW5zdGFuY2VzPW51bGw7YS5pc1BlcnNpc3RlbnQoKXx8YS5jb25zdHJ1Y3Rvci5yZWxlYXNlKGEpfX1mdW5jdGlvbiBCYShhKXtudWxsIT09YSYmKHphPXhhKHphLGEpKTthPXphO3phPW51bGw7aWYoYSl7eWEoYSxBYSk7aWYoemEpdGhyb3cgdChFcnJvcig5NSkpO2lmKG5hKXRocm93IGE9b2EsbmE9ITEsb2E9bnVsbCxhO319XG52YXIgQ2E9e2luamVjdEV2ZW50UGx1Z2luT3JkZXI6ZnVuY3Rpb24oYSl7aWYoYmEpdGhyb3cgdChFcnJvcigxMDEpKTtiYT1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhKTtkYSgpfSxpbmplY3RFdmVudFBsdWdpbnNCeU5hbWU6ZnVuY3Rpb24oYSl7dmFyIGI9ITEsYztmb3IoYyBpbiBhKWlmKGEuaGFzT3duUHJvcGVydHkoYykpe3ZhciBkPWFbY107aWYoIWNhLmhhc093blByb3BlcnR5KGMpfHxjYVtjXSE9PWQpe2lmKGNhW2NdKXRocm93IHQoRXJyb3IoMTAyKSxjKTtjYVtjXT1kO2I9ITB9fWImJmRhKCl9fTtcbmZ1bmN0aW9uIERhKGEsYil7dmFyIGM9YS5zdGF0ZU5vZGU7aWYoIWMpcmV0dXJuIG51bGw7dmFyIGQ9c2EoYyk7aWYoIWQpcmV0dXJuIG51bGw7Yz1kW2JdO2E6c3dpdGNoKGIpe2Nhc2UgXCJvbkNsaWNrXCI6Y2FzZSBcIm9uQ2xpY2tDYXB0dXJlXCI6Y2FzZSBcIm9uRG91YmxlQ2xpY2tcIjpjYXNlIFwib25Eb3VibGVDbGlja0NhcHR1cmVcIjpjYXNlIFwib25Nb3VzZURvd25cIjpjYXNlIFwib25Nb3VzZURvd25DYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VNb3ZlXCI6Y2FzZSBcIm9uTW91c2VNb3ZlQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlVXBcIjpjYXNlIFwib25Nb3VzZVVwQ2FwdHVyZVwiOihkPSFkLmRpc2FibGVkKXx8KGE9YS50eXBlLGQ9IShcImJ1dHRvblwiPT09YXx8XCJpbnB1dFwiPT09YXx8XCJzZWxlY3RcIj09PWF8fFwidGV4dGFyZWFcIj09PWEpKTthPSFkO2JyZWFrIGE7ZGVmYXVsdDphPSExfWlmKGEpcmV0dXJuIG51bGw7aWYoYyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGMpdGhyb3cgdChFcnJvcigyMzEpLGIsdHlwZW9mIGMpO1xucmV0dXJuIGN9dmFyIEVhPU1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnNsaWNlKDIpLEZhPVwiX19yZWFjdEludGVybmFsSW5zdGFuY2UkXCIrRWEsR2E9XCJfX3JlYWN0RXZlbnRIYW5kbGVycyRcIitFYTtmdW5jdGlvbiBIYShhKXtpZihhW0ZhXSlyZXR1cm4gYVtGYV07Zm9yKDshYVtGYV07KWlmKGEucGFyZW50Tm9kZSlhPWEucGFyZW50Tm9kZTtlbHNlIHJldHVybiBudWxsO2E9YVtGYV07cmV0dXJuIDU9PT1hLnRhZ3x8Nj09PWEudGFnP2E6bnVsbH1mdW5jdGlvbiBJYShhKXthPWFbRmFdO3JldHVybiFhfHw1IT09YS50YWcmJjYhPT1hLnRhZz9udWxsOmF9ZnVuY3Rpb24gSmEoYSl7aWYoNT09PWEudGFnfHw2PT09YS50YWcpcmV0dXJuIGEuc3RhdGVOb2RlO3Rocm93IHQoRXJyb3IoMzMpKTt9ZnVuY3Rpb24gS2EoYSl7cmV0dXJuIGFbR2FdfHxudWxsfWZ1bmN0aW9uIExhKGEpe2RvIGE9YS5yZXR1cm47d2hpbGUoYSYmNSE9PWEudGFnKTtyZXR1cm4gYT9hOm51bGx9XG5mdW5jdGlvbiBNYShhLGIsYyl7aWYoYj1EYShhLGMuZGlzcGF0Y2hDb25maWcucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXNbYl0pKWMuX2Rpc3BhdGNoTGlzdGVuZXJzPXhhKGMuX2Rpc3BhdGNoTGlzdGVuZXJzLGIpLGMuX2Rpc3BhdGNoSW5zdGFuY2VzPXhhKGMuX2Rpc3BhdGNoSW5zdGFuY2VzLGEpfWZ1bmN0aW9uIE5hKGEpe2lmKGEmJmEuZGlzcGF0Y2hDb25maWcucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXMpe2Zvcih2YXIgYj1hLl90YXJnZXRJbnN0LGM9W107YjspYy5wdXNoKGIpLGI9TGEoYik7Zm9yKGI9Yy5sZW5ndGg7MDxiLS07KU1hKGNbYl0sXCJjYXB0dXJlZFwiLGEpO2ZvcihiPTA7YjxjLmxlbmd0aDtiKyspTWEoY1tiXSxcImJ1YmJsZWRcIixhKX19XG5mdW5jdGlvbiBPYShhLGIsYyl7YSYmYyYmYy5kaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lJiYoYj1EYShhLGMuZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZSkpJiYoYy5fZGlzcGF0Y2hMaXN0ZW5lcnM9eGEoYy5fZGlzcGF0Y2hMaXN0ZW5lcnMsYiksYy5fZGlzcGF0Y2hJbnN0YW5jZXM9eGEoYy5fZGlzcGF0Y2hJbnN0YW5jZXMsYSkpfWZ1bmN0aW9uIFBhKGEpe2EmJmEuZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZSYmT2EoYS5fdGFyZ2V0SW5zdCxudWxsLGEpfWZ1bmN0aW9uIFFhKGEpe3lhKGEsTmEpfXZhciBSYT0hKFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93fHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvdy5kb2N1bWVudHx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XG5mdW5jdGlvbiBTYShhLGIpe3ZhciBjPXt9O2NbYS50b0xvd2VyQ2FzZSgpXT1iLnRvTG93ZXJDYXNlKCk7Y1tcIldlYmtpdFwiK2FdPVwid2Via2l0XCIrYjtjW1wiTW96XCIrYV09XCJtb3pcIitiO3JldHVybiBjfXZhciBUYT17YW5pbWF0aW9uZW5kOlNhKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25FbmRcIiksYW5pbWF0aW9uaXRlcmF0aW9uOlNhKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25JdGVyYXRpb25cIiksYW5pbWF0aW9uc3RhcnQ6U2EoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvblN0YXJ0XCIpLHRyYW5zaXRpb25lbmQ6U2EoXCJUcmFuc2l0aW9uXCIsXCJUcmFuc2l0aW9uRW5kXCIpfSxVYT17fSxWYT17fTtcblJhJiYoVmE9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKS5zdHlsZSxcIkFuaW1hdGlvbkV2ZW50XCJpbiB3aW5kb3d8fChkZWxldGUgVGEuYW5pbWF0aW9uZW5kLmFuaW1hdGlvbixkZWxldGUgVGEuYW5pbWF0aW9uaXRlcmF0aW9uLmFuaW1hdGlvbixkZWxldGUgVGEuYW5pbWF0aW9uc3RhcnQuYW5pbWF0aW9uKSxcIlRyYW5zaXRpb25FdmVudFwiaW4gd2luZG93fHxkZWxldGUgVGEudHJhbnNpdGlvbmVuZC50cmFuc2l0aW9uKTtmdW5jdGlvbiBXYShhKXtpZihVYVthXSlyZXR1cm4gVWFbYV07aWYoIVRhW2FdKXJldHVybiBhO3ZhciBiPVRhW2FdLGM7Zm9yKGMgaW4gYilpZihiLmhhc093blByb3BlcnR5KGMpJiZjIGluIFZhKXJldHVybiBVYVthXT1iW2NdO3JldHVybiBhfVxudmFyIFhhPVdhKFwiYW5pbWF0aW9uZW5kXCIpLFlhPVdhKFwiYW5pbWF0aW9uaXRlcmF0aW9uXCIpLFphPVdhKFwiYW5pbWF0aW9uc3RhcnRcIiksYWI9V2EoXCJ0cmFuc2l0aW9uZW5kXCIpLGJiPVwiYWJvcnQgY2FucGxheSBjYW5wbGF5dGhyb3VnaCBkdXJhdGlvbmNoYW5nZSBlbXB0aWVkIGVuY3J5cHRlZCBlbmRlZCBlcnJvciBsb2FkZWRkYXRhIGxvYWRlZG1ldGFkYXRhIGxvYWRzdGFydCBwYXVzZSBwbGF5IHBsYXlpbmcgcHJvZ3Jlc3MgcmF0ZWNoYW5nZSBzZWVrZWQgc2Vla2luZyBzdGFsbGVkIHN1c3BlbmQgdGltZXVwZGF0ZSB2b2x1bWVjaGFuZ2Ugd2FpdGluZ1wiLnNwbGl0KFwiIFwiKSxjYj1udWxsLGRiPW51bGwsZWI9bnVsbDtcbmZ1bmN0aW9uIGZiKCl7aWYoZWIpcmV0dXJuIGViO3ZhciBhLGI9ZGIsYz1iLmxlbmd0aCxkLGU9XCJ2YWx1ZVwiaW4gY2I/Y2IudmFsdWU6Y2IudGV4dENvbnRlbnQsZj1lLmxlbmd0aDtmb3IoYT0wO2E8YyYmYlthXT09PWVbYV07YSsrKTt2YXIgaD1jLWE7Zm9yKGQ9MTtkPD1oJiZiW2MtZF09PT1lW2YtZF07ZCsrKTtyZXR1cm4gZWI9ZS5zbGljZShhLDE8ZD8xLWQ6dm9pZCAwKX1mdW5jdGlvbiBnYigpe3JldHVybiEwfWZ1bmN0aW9uIGhiKCl7cmV0dXJuITF9XG5mdW5jdGlvbiB5KGEsYixjLGQpe3RoaXMuZGlzcGF0Y2hDb25maWc9YTt0aGlzLl90YXJnZXRJbnN0PWI7dGhpcy5uYXRpdmVFdmVudD1jO2E9dGhpcy5jb25zdHJ1Y3Rvci5JbnRlcmZhY2U7Zm9yKHZhciBlIGluIGEpYS5oYXNPd25Qcm9wZXJ0eShlKSYmKChiPWFbZV0pP3RoaXNbZV09YihjKTpcInRhcmdldFwiPT09ZT90aGlzLnRhcmdldD1kOnRoaXNbZV09Y1tlXSk7dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQ9KG51bGwhPWMuZGVmYXVsdFByZXZlbnRlZD9jLmRlZmF1bHRQcmV2ZW50ZWQ6ITE9PT1jLnJldHVyblZhbHVlKT9nYjpoYjt0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkPWhiO3JldHVybiB0aGlzfVxubSh5LnByb3RvdHlwZSx7cHJldmVudERlZmF1bHQ6ZnVuY3Rpb24oKXt0aGlzLmRlZmF1bHRQcmV2ZW50ZWQ9ITA7dmFyIGE9dGhpcy5uYXRpdmVFdmVudDthJiYoYS5wcmV2ZW50RGVmYXVsdD9hLnByZXZlbnREZWZhdWx0KCk6XCJ1bmtub3duXCIhPT10eXBlb2YgYS5yZXR1cm5WYWx1ZSYmKGEucmV0dXJuVmFsdWU9ITEpLHRoaXMuaXNEZWZhdWx0UHJldmVudGVkPWdiKX0sc3RvcFByb3BhZ2F0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5uYXRpdmVFdmVudDthJiYoYS5zdG9wUHJvcGFnYXRpb24/YS5zdG9wUHJvcGFnYXRpb24oKTpcInVua25vd25cIiE9PXR5cGVvZiBhLmNhbmNlbEJ1YmJsZSYmKGEuY2FuY2VsQnViYmxlPSEwKSx0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkPWdiKX0scGVyc2lzdDpmdW5jdGlvbigpe3RoaXMuaXNQZXJzaXN0ZW50PWdifSxpc1BlcnNpc3RlbnQ6aGIsZGVzdHJ1Y3RvcjpmdW5jdGlvbigpe3ZhciBhPXRoaXMuY29uc3RydWN0b3IuSW50ZXJmYWNlLFxuYjtmb3IoYiBpbiBhKXRoaXNbYl09bnVsbDt0aGlzLm5hdGl2ZUV2ZW50PXRoaXMuX3RhcmdldEluc3Q9dGhpcy5kaXNwYXRjaENvbmZpZz1udWxsO3RoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQ9aGI7dGhpcy5fZGlzcGF0Y2hJbnN0YW5jZXM9dGhpcy5fZGlzcGF0Y2hMaXN0ZW5lcnM9bnVsbH19KTt5LkludGVyZmFjZT17dHlwZTpudWxsLHRhcmdldDpudWxsLGN1cnJlbnRUYXJnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gbnVsbH0sZXZlbnRQaGFzZTpudWxsLGJ1YmJsZXM6bnVsbCxjYW5jZWxhYmxlOm51bGwsdGltZVN0YW1wOmZ1bmN0aW9uKGEpe3JldHVybiBhLnRpbWVTdGFtcHx8RGF0ZS5ub3coKX0sZGVmYXVsdFByZXZlbnRlZDpudWxsLGlzVHJ1c3RlZDpudWxsfTtcbnkuZXh0ZW5kPWZ1bmN0aW9uKGEpe2Z1bmN0aW9uIGIoKXt9ZnVuY3Rpb24gYygpe3JldHVybiBkLmFwcGx5KHRoaXMsYXJndW1lbnRzKX12YXIgZD10aGlzO2IucHJvdG90eXBlPWQucHJvdG90eXBlO3ZhciBlPW5ldyBiO20oZSxjLnByb3RvdHlwZSk7Yy5wcm90b3R5cGU9ZTtjLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1jO2MuSW50ZXJmYWNlPW0oe30sZC5JbnRlcmZhY2UsYSk7Yy5leHRlbmQ9ZC5leHRlbmQ7aWIoYyk7cmV0dXJuIGN9O2liKHkpO2Z1bmN0aW9uIGpiKGEsYixjLGQpe2lmKHRoaXMuZXZlbnRQb29sLmxlbmd0aCl7dmFyIGU9dGhpcy5ldmVudFBvb2wucG9wKCk7dGhpcy5jYWxsKGUsYSxiLGMsZCk7cmV0dXJuIGV9cmV0dXJuIG5ldyB0aGlzKGEsYixjLGQpfVxuZnVuY3Rpb24ga2IoYSl7aWYoIShhIGluc3RhbmNlb2YgdGhpcykpdGhyb3cgdChFcnJvcigyNzkpKTthLmRlc3RydWN0b3IoKTsxMD50aGlzLmV2ZW50UG9vbC5sZW5ndGgmJnRoaXMuZXZlbnRQb29sLnB1c2goYSl9ZnVuY3Rpb24gaWIoYSl7YS5ldmVudFBvb2w9W107YS5nZXRQb29sZWQ9amI7YS5yZWxlYXNlPWtifXZhciBsYj15LmV4dGVuZCh7ZGF0YTpudWxsfSksbWI9eS5leHRlbmQoe2RhdGE6bnVsbH0pLG5iPVs5LDEzLDI3LDMyXSxvYj1SYSYmXCJDb21wb3NpdGlvbkV2ZW50XCJpbiB3aW5kb3cscGI9bnVsbDtSYSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYocGI9ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKTtcbnZhciBxYj1SYSYmXCJUZXh0RXZlbnRcImluIHdpbmRvdyYmIXBiLHNiPVJhJiYoIW9ifHxwYiYmODxwYiYmMTE+PXBiKSx0Yj1TdHJpbmcuZnJvbUNoYXJDb2RlKDMyKSx1Yj17YmVmb3JlSW5wdXQ6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25CZWZvcmVJbnB1dFwiLGNhcHR1cmVkOlwib25CZWZvcmVJbnB1dENhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOltcImNvbXBvc2l0aW9uZW5kXCIsXCJrZXlwcmVzc1wiLFwidGV4dElucHV0XCIsXCJwYXN0ZVwiXX0sY29tcG9zaXRpb25FbmQ6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25Db21wb3NpdGlvbkVuZFwiLGNhcHR1cmVkOlwib25Db21wb3NpdGlvbkVuZENhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwiYmx1ciBjb21wb3NpdGlvbmVuZCBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKX0sY29tcG9zaXRpb25TdGFydDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkNvbXBvc2l0aW9uU3RhcnRcIixcbmNhcHR1cmVkOlwib25Db21wb3NpdGlvblN0YXJ0Q2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJibHVyIGNvbXBvc2l0aW9uc3RhcnQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIil9LGNvbXBvc2l0aW9uVXBkYXRlOntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ29tcG9zaXRpb25VcGRhdGVcIixjYXB0dXJlZDpcIm9uQ29tcG9zaXRpb25VcGRhdGVDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcImJsdXIgY29tcG9zaXRpb251cGRhdGUga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIil9fSx2Yj0hMTtcbmZ1bmN0aW9uIHdiKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJrZXl1cFwiOnJldHVybi0xIT09bmIuaW5kZXhPZihiLmtleUNvZGUpO2Nhc2UgXCJrZXlkb3duXCI6cmV0dXJuIDIyOSE9PWIua2V5Q29kZTtjYXNlIFwia2V5cHJlc3NcIjpjYXNlIFwibW91c2Vkb3duXCI6Y2FzZSBcImJsdXJcIjpyZXR1cm4hMDtkZWZhdWx0OnJldHVybiExfX1mdW5jdGlvbiB4YihhKXthPWEuZGV0YWlsO3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmXCJkYXRhXCJpbiBhP2EuZGF0YTpudWxsfXZhciB5Yj0hMTtmdW5jdGlvbiBBYihhLGIpe3N3aXRjaChhKXtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpyZXR1cm4geGIoYik7Y2FzZSBcImtleXByZXNzXCI6aWYoMzIhPT1iLndoaWNoKXJldHVybiBudWxsO3ZiPSEwO3JldHVybiB0YjtjYXNlIFwidGV4dElucHV0XCI6cmV0dXJuIGE9Yi5kYXRhLGE9PT10YiYmdmI/bnVsbDphO2RlZmF1bHQ6cmV0dXJuIG51bGx9fVxuZnVuY3Rpb24gQmIoYSxiKXtpZih5YilyZXR1cm5cImNvbXBvc2l0aW9uZW5kXCI9PT1hfHwhb2ImJndiKGEsYik/KGE9ZmIoKSxlYj1kYj1jYj1udWxsLHliPSExLGEpOm51bGw7c3dpdGNoKGEpe2Nhc2UgXCJwYXN0ZVwiOnJldHVybiBudWxsO2Nhc2UgXCJrZXlwcmVzc1wiOmlmKCEoYi5jdHJsS2V5fHxiLmFsdEtleXx8Yi5tZXRhS2V5KXx8Yi5jdHJsS2V5JiZiLmFsdEtleSl7aWYoYi5jaGFyJiYxPGIuY2hhci5sZW5ndGgpcmV0dXJuIGIuY2hhcjtpZihiLndoaWNoKXJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKGIud2hpY2gpfXJldHVybiBudWxsO2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOnJldHVybiBzYiYmXCJrb1wiIT09Yi5sb2NhbGU/bnVsbDpiLmRhdGE7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG52YXIgQ2I9e2V2ZW50VHlwZXM6dWIsZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT12b2lkIDA7dmFyIGY9dm9pZCAwO2lmKG9iKWI6e3N3aXRjaChhKXtjYXNlIFwiY29tcG9zaXRpb25zdGFydFwiOmU9dWIuY29tcG9zaXRpb25TdGFydDticmVhayBiO2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOmU9dWIuY29tcG9zaXRpb25FbmQ7YnJlYWsgYjtjYXNlIFwiY29tcG9zaXRpb251cGRhdGVcIjplPXViLmNvbXBvc2l0aW9uVXBkYXRlO2JyZWFrIGJ9ZT12b2lkIDB9ZWxzZSB5Yj93YihhLGMpJiYoZT11Yi5jb21wb3NpdGlvbkVuZCk6XCJrZXlkb3duXCI9PT1hJiYyMjk9PT1jLmtleUNvZGUmJihlPXViLmNvbXBvc2l0aW9uU3RhcnQpO2U/KHNiJiZcImtvXCIhPT1jLmxvY2FsZSYmKHlifHxlIT09dWIuY29tcG9zaXRpb25TdGFydD9lPT09dWIuY29tcG9zaXRpb25FbmQmJnliJiYoZj1mYigpKTooY2I9ZCxkYj1cInZhbHVlXCJpbiBjYj9jYi52YWx1ZTpjYi50ZXh0Q29udGVudCx5Yj1cbiEwKSksZT1sYi5nZXRQb29sZWQoZSxiLGMsZCksZj9lLmRhdGE9ZjooZj14YihjKSxudWxsIT09ZiYmKGUuZGF0YT1mKSksUWEoZSksZj1lKTpmPW51bGw7KGE9cWI/QWIoYSxjKTpCYihhLGMpKT8oYj1tYi5nZXRQb29sZWQodWIuYmVmb3JlSW5wdXQsYixjLGQpLGIuZGF0YT1hLFFhKGIpKTpiPW51bGw7cmV0dXJuIG51bGw9PT1mP2I6bnVsbD09PWI/ZjpbZixiXX19LERiPW51bGwsRWI9bnVsbCxGYj1udWxsO2Z1bmN0aW9uIEdiKGEpe2lmKGE9dGEoYSkpe2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBEYil0aHJvdyB0KEVycm9yKDI4MCkpO3ZhciBiPXNhKGEuc3RhdGVOb2RlKTtEYihhLnN0YXRlTm9kZSxhLnR5cGUsYil9fWZ1bmN0aW9uIEhiKGEpe0ViP0ZiP0ZiLnB1c2goYSk6RmI9W2FdOkViPWF9ZnVuY3Rpb24gSWIoKXtpZihFYil7dmFyIGE9RWIsYj1GYjtGYj1FYj1udWxsO0diKGEpO2lmKGIpZm9yKGE9MDthPGIubGVuZ3RoO2ErKylHYihiW2FdKX19XG5mdW5jdGlvbiBKYihhLGIpe3JldHVybiBhKGIpfWZ1bmN0aW9uIEtiKGEsYixjLGQpe3JldHVybiBhKGIsYyxkKX1mdW5jdGlvbiBMYigpe312YXIgTWI9SmIsTmI9ITE7ZnVuY3Rpb24gT2IoKXtpZihudWxsIT09RWJ8fG51bGwhPT1GYilMYigpLEliKCl9dmFyIFBiPXtjb2xvcjohMCxkYXRlOiEwLGRhdGV0aW1lOiEwLFwiZGF0ZXRpbWUtbG9jYWxcIjohMCxlbWFpbDohMCxtb250aDohMCxudW1iZXI6ITAscGFzc3dvcmQ6ITAscmFuZ2U6ITAsc2VhcmNoOiEwLHRlbDohMCx0ZXh0OiEwLHRpbWU6ITAsdXJsOiEwLHdlZWs6ITB9O2Z1bmN0aW9uIFFiKGEpe3ZhciBiPWEmJmEubm9kZU5hbWUmJmEubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm5cImlucHV0XCI9PT1iPyEhUGJbYS50eXBlXTpcInRleHRhcmVhXCI9PT1iPyEwOiExfVxuZnVuY3Rpb24gUmIoYSl7YT1hLnRhcmdldHx8YS5zcmNFbGVtZW50fHx3aW5kb3c7YS5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCYmKGE9YS5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCk7cmV0dXJuIDM9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZTphfWZ1bmN0aW9uIFNiKGEpe2lmKCFSYSlyZXR1cm4hMTthPVwib25cIithO3ZhciBiPWEgaW4gZG9jdW1lbnQ7Ynx8KGI9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSxiLnNldEF0dHJpYnV0ZShhLFwicmV0dXJuO1wiKSxiPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBiW2FdKTtyZXR1cm4gYn1mdW5jdGlvbiBUYihhKXt2YXIgYj1hLnR5cGU7cmV0dXJuKGE9YS5ub2RlTmFtZSkmJlwiaW5wdXRcIj09PWEudG9Mb3dlckNhc2UoKSYmKFwiY2hlY2tib3hcIj09PWJ8fFwicmFkaW9cIj09PWIpfVxuZnVuY3Rpb24gVWIoYSl7dmFyIGI9VGIoYSk/XCJjaGVja2VkXCI6XCJ2YWx1ZVwiLGM9T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihhLmNvbnN0cnVjdG9yLnByb3RvdHlwZSxiKSxkPVwiXCIrYVtiXTtpZighYS5oYXNPd25Qcm9wZXJ0eShiKSYmXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBjJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5nZXQmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLnNldCl7dmFyIGU9Yy5nZXQsZj1jLnNldDtPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxiLHtjb25maWd1cmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGUuY2FsbCh0aGlzKX0sc2V0OmZ1bmN0aW9uKGEpe2Q9XCJcIithO2YuY2FsbCh0aGlzLGEpfX0pO09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLGIse2VudW1lcmFibGU6Yy5lbnVtZXJhYmxlfSk7cmV0dXJue2dldFZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIGR9LHNldFZhbHVlOmZ1bmN0aW9uKGEpe2Q9XCJcIithfSxzdG9wVHJhY2tpbmc6ZnVuY3Rpb24oKXthLl92YWx1ZVRyYWNrZXI9XG5udWxsO2RlbGV0ZSBhW2JdfX19fWZ1bmN0aW9uIFZiKGEpe2EuX3ZhbHVlVHJhY2tlcnx8KGEuX3ZhbHVlVHJhY2tlcj1VYihhKSl9ZnVuY3Rpb24gV2IoYSl7aWYoIWEpcmV0dXJuITE7dmFyIGI9YS5fdmFsdWVUcmFja2VyO2lmKCFiKXJldHVybiEwO3ZhciBjPWIuZ2V0VmFsdWUoKTt2YXIgZD1cIlwiO2EmJihkPVRiKGEpP2EuY2hlY2tlZD9cInRydWVcIjpcImZhbHNlXCI6YS52YWx1ZSk7YT1kO3JldHVybiBhIT09Yz8oYi5zZXRWYWx1ZShhKSwhMCk6ITF9dmFyIFhiPWFhLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEO1hiLmhhc093blByb3BlcnR5KFwiUmVhY3RDdXJyZW50RGlzcGF0Y2hlclwiKXx8KFhiLlJlYWN0Q3VycmVudERpc3BhdGNoZXI9e2N1cnJlbnQ6bnVsbH0pO1hiLmhhc093blByb3BlcnR5KFwiUmVhY3RDdXJyZW50QmF0Y2hDb25maWdcIil8fChYYi5SZWFjdEN1cnJlbnRCYXRjaENvbmZpZz17c3VzcGVuc2U6bnVsbH0pO1xudmFyIFliPS9eKC4qKVtcXFxcXFwvXS8sQj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuZm9yLFpiPUI/U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIik6NjAxMDMsJGI9Qj9TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpOjYwMTA2LGFjPUI/U3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpOjYwMTA3LGJjPUI/U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpOjYwMTA4LGNjPUI/U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpOjYwMTE0LGRjPUI/U3ltYm9sLmZvcihcInJlYWN0LnByb3ZpZGVyXCIpOjYwMTA5LGVjPUI/U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIik6NjAxMTAsZmM9Qj9TeW1ib2wuZm9yKFwicmVhY3QuY29uY3VycmVudF9tb2RlXCIpOjYwMTExLGdjPUI/U3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpOjYwMTEyLGhjPUI/U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlXCIpOjYwMTEzLGljPUI/U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlX2xpc3RcIik6XG42MDEyMCxqYz1CP1N5bWJvbC5mb3IoXCJyZWFjdC5tZW1vXCIpOjYwMTE1LGtjPUI/U3ltYm9sLmZvcihcInJlYWN0LmxhenlcIik6NjAxMTY7QiYmU3ltYm9sLmZvcihcInJlYWN0LmZ1bmRhbWVudGFsXCIpO0ImJlN5bWJvbC5mb3IoXCJyZWFjdC5yZXNwb25kZXJcIik7dmFyIGxjPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcjtmdW5jdGlvbiBtYyhhKXtpZihudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBhKXJldHVybiBudWxsO2E9bGMmJmFbbGNdfHxhW1wiQEBpdGVyYXRvclwiXTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hOm51bGx9XG5mdW5jdGlvbiBvYyhhKXtpZihudWxsPT1hKXJldHVybiBudWxsO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKXJldHVybiBhLmRpc3BsYXlOYW1lfHxhLm5hbWV8fG51bGw7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBhKXJldHVybiBhO3N3aXRjaChhKXtjYXNlIGFjOnJldHVyblwiRnJhZ21lbnRcIjtjYXNlICRiOnJldHVyblwiUG9ydGFsXCI7Y2FzZSBjYzpyZXR1cm5cIlByb2ZpbGVyXCI7Y2FzZSBiYzpyZXR1cm5cIlN0cmljdE1vZGVcIjtjYXNlIGhjOnJldHVyblwiU3VzcGVuc2VcIjtjYXNlIGljOnJldHVyblwiU3VzcGVuc2VMaXN0XCJ9aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhKXN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIGVjOnJldHVyblwiQ29udGV4dC5Db25zdW1lclwiO2Nhc2UgZGM6cmV0dXJuXCJDb250ZXh0LlByb3ZpZGVyXCI7Y2FzZSBnYzp2YXIgYj1hLnJlbmRlcjtiPWIuZGlzcGxheU5hbWV8fGIubmFtZXx8XCJcIjtyZXR1cm4gYS5kaXNwbGF5TmFtZXx8KFwiXCIhPT1iP1wiRm9yd2FyZFJlZihcIitiK1wiKVwiOlxuXCJGb3J3YXJkUmVmXCIpO2Nhc2UgamM6cmV0dXJuIG9jKGEudHlwZSk7Y2FzZSBrYzppZihhPTE9PT1hLl9zdGF0dXM/YS5fcmVzdWx0Om51bGwpcmV0dXJuIG9jKGEpfXJldHVybiBudWxsfWZ1bmN0aW9uIHBjKGEpe3ZhciBiPVwiXCI7ZG97YTpzd2l0Y2goYS50YWcpe2Nhc2UgMzpjYXNlIDQ6Y2FzZSA2OmNhc2UgNzpjYXNlIDEwOmNhc2UgOTp2YXIgYz1cIlwiO2JyZWFrIGE7ZGVmYXVsdDp2YXIgZD1hLl9kZWJ1Z093bmVyLGU9YS5fZGVidWdTb3VyY2UsZj1vYyhhLnR5cGUpO2M9bnVsbDtkJiYoYz1vYyhkLnR5cGUpKTtkPWY7Zj1cIlwiO2U/Zj1cIiAoYXQgXCIrZS5maWxlTmFtZS5yZXBsYWNlKFliLFwiXCIpK1wiOlwiK2UubGluZU51bWJlcitcIilcIjpjJiYoZj1cIiAoY3JlYXRlZCBieSBcIitjK1wiKVwiKTtjPVwiXFxuICAgIGluIFwiKyhkfHxcIlVua25vd25cIikrZn1iKz1jO2E9YS5yZXR1cm59d2hpbGUoYSk7cmV0dXJuIGJ9XG52YXIgcWM9L15bOkEtWl9hLXpcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyRkZcXHUwMzcwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRdWzpBLVpfYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXFwtLjAtOVxcdTAwQjdcXHUwMzAwLVxcdTAzNkZcXHUyMDNGLVxcdTIwNDBdKiQvLHJjPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksc2M9e30sdGM9e307XG5mdW5jdGlvbiB1YyhhKXtpZihyYy5jYWxsKHRjLGEpKXJldHVybiEwO2lmKHJjLmNhbGwoc2MsYSkpcmV0dXJuITE7aWYocWMudGVzdChhKSlyZXR1cm4gdGNbYV09ITA7c2NbYV09ITA7cmV0dXJuITF9ZnVuY3Rpb24gdmMoYSxiLGMsZCl7aWYobnVsbCE9PWMmJjA9PT1jLnR5cGUpcmV0dXJuITE7c3dpdGNoKHR5cGVvZiBiKXtjYXNlIFwiZnVuY3Rpb25cIjpjYXNlIFwic3ltYm9sXCI6cmV0dXJuITA7Y2FzZSBcImJvb2xlYW5cIjppZihkKXJldHVybiExO2lmKG51bGwhPT1jKXJldHVybiFjLmFjY2VwdHNCb29sZWFuczthPWEudG9Mb3dlckNhc2UoKS5zbGljZSgwLDUpO3JldHVyblwiZGF0YS1cIiE9PWEmJlwiYXJpYS1cIiE9PWE7ZGVmYXVsdDpyZXR1cm4hMX19XG5mdW5jdGlvbiB3YyhhLGIsYyxkKXtpZihudWxsPT09Ynx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiBifHx2YyhhLGIsYyxkKSlyZXR1cm4hMDtpZihkKXJldHVybiExO2lmKG51bGwhPT1jKXN3aXRjaChjLnR5cGUpe2Nhc2UgMzpyZXR1cm4hYjtjYXNlIDQ6cmV0dXJuITE9PT1iO2Nhc2UgNTpyZXR1cm4gaXNOYU4oYik7Y2FzZSA2OnJldHVybiBpc05hTihiKXx8MT5ifXJldHVybiExfWZ1bmN0aW9uIEQoYSxiLGMsZCxlLGYpe3RoaXMuYWNjZXB0c0Jvb2xlYW5zPTI9PT1ifHwzPT09Ynx8ND09PWI7dGhpcy5hdHRyaWJ1dGVOYW1lPWQ7dGhpcy5hdHRyaWJ1dGVOYW1lc3BhY2U9ZTt0aGlzLm11c3RVc2VQcm9wZXJ0eT1jO3RoaXMucHJvcGVydHlOYW1lPWE7dGhpcy50eXBlPWI7dGhpcy5zYW5pdGl6ZVVSTD1mfXZhciBGPXt9O1xuXCJjaGlsZHJlbiBkYW5nZXJvdXNseVNldElubmVySFRNTCBkZWZhdWx0VmFsdWUgZGVmYXVsdENoZWNrZWQgaW5uZXJIVE1MIHN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZyBzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmcgc3R5bGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXtGW2FdPW5ldyBEKGEsMCwhMSxhLG51bGwsITEpfSk7W1tcImFjY2VwdENoYXJzZXRcIixcImFjY2VwdC1jaGFyc2V0XCJdLFtcImNsYXNzTmFtZVwiLFwiY2xhc3NcIl0sW1wiaHRtbEZvclwiLFwiZm9yXCJdLFtcImh0dHBFcXVpdlwiLFwiaHR0cC1lcXVpdlwiXV0uZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hWzBdO0ZbYl09bmV3IEQoYiwxLCExLGFbMV0sbnVsbCwhMSl9KTtbXCJjb250ZW50RWRpdGFibGVcIixcImRyYWdnYWJsZVwiLFwic3BlbGxDaGVja1wiLFwidmFsdWVcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtGW2FdPW5ldyBEKGEsMiwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSl9KTtcbltcImF1dG9SZXZlcnNlXCIsXCJleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkXCIsXCJmb2N1c2FibGVcIixcInByZXNlcnZlQWxwaGFcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtGW2FdPW5ldyBEKGEsMiwhMSxhLG51bGwsITEpfSk7XCJhbGxvd0Z1bGxTY3JlZW4gYXN5bmMgYXV0b0ZvY3VzIGF1dG9QbGF5IGNvbnRyb2xzIGRlZmF1bHQgZGVmZXIgZGlzYWJsZWQgZGlzYWJsZVBpY3R1cmVJblBpY3R1cmUgZm9ybU5vVmFsaWRhdGUgaGlkZGVuIGxvb3Agbm9Nb2R1bGUgbm9WYWxpZGF0ZSBvcGVuIHBsYXlzSW5saW5lIHJlYWRPbmx5IHJlcXVpcmVkIHJldmVyc2VkIHNjb3BlZCBzZWFtbGVzcyBpdGVtU2NvcGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXtGW2FdPW5ldyBEKGEsMywhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSl9KTtcbltcImNoZWNrZWRcIixcIm11bHRpcGxlXCIsXCJtdXRlZFwiLFwic2VsZWN0ZWRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtGW2FdPW5ldyBEKGEsMywhMCxhLG51bGwsITEpfSk7W1wiY2FwdHVyZVwiLFwiZG93bmxvYWRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtGW2FdPW5ldyBEKGEsNCwhMSxhLG51bGwsITEpfSk7W1wiY29sc1wiLFwicm93c1wiLFwic2l6ZVwiLFwic3BhblwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0ZbYV09bmV3IEQoYSw2LCExLGEsbnVsbCwhMSl9KTtbXCJyb3dTcGFuXCIsXCJzdGFydFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0ZbYV09bmV3IEQoYSw1LCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExKX0pO3ZhciB4Yz0vW1xcLTpdKFthLXpdKS9nO2Z1bmN0aW9uIHljKGEpe3JldHVybiBhWzFdLnRvVXBwZXJDYXNlKCl9XG5cImFjY2VudC1oZWlnaHQgYWxpZ25tZW50LWJhc2VsaW5lIGFyYWJpYy1mb3JtIGJhc2VsaW5lLXNoaWZ0IGNhcC1oZWlnaHQgY2xpcC1wYXRoIGNsaXAtcnVsZSBjb2xvci1pbnRlcnBvbGF0aW9uIGNvbG9yLWludGVycG9sYXRpb24tZmlsdGVycyBjb2xvci1wcm9maWxlIGNvbG9yLXJlbmRlcmluZyBkb21pbmFudC1iYXNlbGluZSBlbmFibGUtYmFja2dyb3VuZCBmaWxsLW9wYWNpdHkgZmlsbC1ydWxlIGZsb29kLWNvbG9yIGZsb29kLW9wYWNpdHkgZm9udC1mYW1pbHkgZm9udC1zaXplIGZvbnQtc2l6ZS1hZGp1c3QgZm9udC1zdHJldGNoIGZvbnQtc3R5bGUgZm9udC12YXJpYW50IGZvbnQtd2VpZ2h0IGdseXBoLW5hbWUgZ2x5cGgtb3JpZW50YXRpb24taG9yaXpvbnRhbCBnbHlwaC1vcmllbnRhdGlvbi12ZXJ0aWNhbCBob3Jpei1hZHYteCBob3Jpei1vcmlnaW4teCBpbWFnZS1yZW5kZXJpbmcgbGV0dGVyLXNwYWNpbmcgbGlnaHRpbmctY29sb3IgbWFya2VyLWVuZCBtYXJrZXItbWlkIG1hcmtlci1zdGFydCBvdmVybGluZS1wb3NpdGlvbiBvdmVybGluZS10aGlja25lc3MgcGFpbnQtb3JkZXIgcGFub3NlLTEgcG9pbnRlci1ldmVudHMgcmVuZGVyaW5nLWludGVudCBzaGFwZS1yZW5kZXJpbmcgc3RvcC1jb2xvciBzdG9wLW9wYWNpdHkgc3RyaWtldGhyb3VnaC1wb3NpdGlvbiBzdHJpa2V0aHJvdWdoLXRoaWNrbmVzcyBzdHJva2UtZGFzaGFycmF5IHN0cm9rZS1kYXNob2Zmc2V0IHN0cm9rZS1saW5lY2FwIHN0cm9rZS1saW5lam9pbiBzdHJva2UtbWl0ZXJsaW1pdCBzdHJva2Utb3BhY2l0eSBzdHJva2Utd2lkdGggdGV4dC1hbmNob3IgdGV4dC1kZWNvcmF0aW9uIHRleHQtcmVuZGVyaW5nIHVuZGVybGluZS1wb3NpdGlvbiB1bmRlcmxpbmUtdGhpY2tuZXNzIHVuaWNvZGUtYmlkaSB1bmljb2RlLXJhbmdlIHVuaXRzLXBlci1lbSB2LWFscGhhYmV0aWMgdi1oYW5naW5nIHYtaWRlb2dyYXBoaWMgdi1tYXRoZW1hdGljYWwgdmVjdG9yLWVmZmVjdCB2ZXJ0LWFkdi15IHZlcnQtb3JpZ2luLXggdmVydC1vcmlnaW4teSB3b3JkLXNwYWNpbmcgd3JpdGluZy1tb2RlIHhtbG5zOnhsaW5rIHgtaGVpZ2h0XCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKHhjLFxueWMpO0ZbYl09bmV3IEQoYiwxLCExLGEsbnVsbCwhMSl9KTtcInhsaW5rOmFjdHVhdGUgeGxpbms6YXJjcm9sZSB4bGluazpyb2xlIHhsaW5rOnNob3cgeGxpbms6dGl0bGUgeGxpbms6dHlwZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZSh4Yyx5Yyk7RltiXT1uZXcgRChiLDEsITEsYSxcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIiwhMSl9KTtbXCJ4bWw6YmFzZVwiLFwieG1sOmxhbmdcIixcInhtbDpzcGFjZVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZSh4Yyx5Yyk7RltiXT1uZXcgRChiLDEsITEsYSxcImh0dHA6Ly93d3cudzMub3JnL1hNTC8xOTk4L25hbWVzcGFjZVwiLCExKX0pO1tcInRhYkluZGV4XCIsXCJjcm9zc09yaWdpblwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0ZbYV09bmV3IEQoYSwxLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExKX0pO1xuRi54bGlua0hyZWY9bmV3IEQoXCJ4bGlua0hyZWZcIiwxLCExLFwieGxpbms6aHJlZlwiLFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiLCEwKTtbXCJzcmNcIixcImhyZWZcIixcImFjdGlvblwiLFwiZm9ybUFjdGlvblwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0ZbYV09bmV3IEQoYSwxLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCEwKX0pO1xuZnVuY3Rpb24gemMoYSxiLGMsZCl7dmFyIGU9Ri5oYXNPd25Qcm9wZXJ0eShiKT9GW2JdOm51bGw7dmFyIGY9bnVsbCE9PWU/MD09PWUudHlwZTpkPyExOiEoMjxiLmxlbmd0aCl8fFwib1wiIT09YlswXSYmXCJPXCIhPT1iWzBdfHxcIm5cIiE9PWJbMV0mJlwiTlwiIT09YlsxXT8hMTohMDtmfHwod2MoYixjLGUsZCkmJihjPW51bGwpLGR8fG51bGw9PT1lP3VjKGIpJiYobnVsbD09PWM/YS5yZW1vdmVBdHRyaWJ1dGUoYik6YS5zZXRBdHRyaWJ1dGUoYixcIlwiK2MpKTplLm11c3RVc2VQcm9wZXJ0eT9hW2UucHJvcGVydHlOYW1lXT1udWxsPT09Yz8zPT09ZS50eXBlPyExOlwiXCI6YzooYj1lLmF0dHJpYnV0ZU5hbWUsZD1lLmF0dHJpYnV0ZU5hbWVzcGFjZSxudWxsPT09Yz9hLnJlbW92ZUF0dHJpYnV0ZShiKTooZT1lLnR5cGUsYz0zPT09ZXx8ND09PWUmJiEwPT09Yz9cIlwiOlwiXCIrYyxkP2Euc2V0QXR0cmlidXRlTlMoZCxiLGMpOmEuc2V0QXR0cmlidXRlKGIsYykpKSl9XG5mdW5jdGlvbiBBYyhhKXtzd2l0Y2godHlwZW9mIGEpe2Nhc2UgXCJib29sZWFuXCI6Y2FzZSBcIm51bWJlclwiOmNhc2UgXCJvYmplY3RcIjpjYXNlIFwic3RyaW5nXCI6Y2FzZSBcInVuZGVmaW5lZFwiOnJldHVybiBhO2RlZmF1bHQ6cmV0dXJuXCJcIn19ZnVuY3Rpb24gQmMoYSxiKXt2YXIgYz1iLmNoZWNrZWQ7cmV0dXJuIG0oe30sYix7ZGVmYXVsdENoZWNrZWQ6dm9pZCAwLGRlZmF1bHRWYWx1ZTp2b2lkIDAsdmFsdWU6dm9pZCAwLGNoZWNrZWQ6bnVsbCE9Yz9jOmEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsQ2hlY2tlZH0pfVxuZnVuY3Rpb24gQ2MoYSxiKXt2YXIgYz1udWxsPT1iLmRlZmF1bHRWYWx1ZT9cIlwiOmIuZGVmYXVsdFZhbHVlLGQ9bnVsbCE9Yi5jaGVja2VkP2IuY2hlY2tlZDpiLmRlZmF1bHRDaGVja2VkO2M9QWMobnVsbCE9Yi52YWx1ZT9iLnZhbHVlOmMpO2EuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbENoZWNrZWQ6ZCxpbml0aWFsVmFsdWU6Yyxjb250cm9sbGVkOlwiY2hlY2tib3hcIj09PWIudHlwZXx8XCJyYWRpb1wiPT09Yi50eXBlP251bGwhPWIuY2hlY2tlZDpudWxsIT1iLnZhbHVlfX1mdW5jdGlvbiBEYyhhLGIpe2I9Yi5jaGVja2VkO251bGwhPWImJnpjKGEsXCJjaGVja2VkXCIsYiwhMSl9XG5mdW5jdGlvbiBFYyhhLGIpe0RjKGEsYik7dmFyIGM9QWMoYi52YWx1ZSksZD1iLnR5cGU7aWYobnVsbCE9YylpZihcIm51bWJlclwiPT09ZCl7aWYoMD09PWMmJlwiXCI9PT1hLnZhbHVlfHxhLnZhbHVlIT1jKWEudmFsdWU9XCJcIitjfWVsc2UgYS52YWx1ZSE9PVwiXCIrYyYmKGEudmFsdWU9XCJcIitjKTtlbHNlIGlmKFwic3VibWl0XCI9PT1kfHxcInJlc2V0XCI9PT1kKXthLnJlbW92ZUF0dHJpYnV0ZShcInZhbHVlXCIpO3JldHVybn1iLmhhc093blByb3BlcnR5KFwidmFsdWVcIik/RmMoYSxiLnR5cGUsYyk6Yi5oYXNPd25Qcm9wZXJ0eShcImRlZmF1bHRWYWx1ZVwiKSYmRmMoYSxiLnR5cGUsQWMoYi5kZWZhdWx0VmFsdWUpKTtudWxsPT1iLmNoZWNrZWQmJm51bGwhPWIuZGVmYXVsdENoZWNrZWQmJihhLmRlZmF1bHRDaGVja2VkPSEhYi5kZWZhdWx0Q2hlY2tlZCl9XG5mdW5jdGlvbiBHYyhhLGIsYyl7aWYoYi5oYXNPd25Qcm9wZXJ0eShcInZhbHVlXCIpfHxiLmhhc093blByb3BlcnR5KFwiZGVmYXVsdFZhbHVlXCIpKXt2YXIgZD1iLnR5cGU7aWYoIShcInN1Ym1pdFwiIT09ZCYmXCJyZXNldFwiIT09ZHx8dm9pZCAwIT09Yi52YWx1ZSYmbnVsbCE9PWIudmFsdWUpKXJldHVybjtiPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTtjfHxiPT09YS52YWx1ZXx8KGEudmFsdWU9Yik7YS5kZWZhdWx0VmFsdWU9Yn1jPWEubmFtZTtcIlwiIT09YyYmKGEubmFtZT1cIlwiKTthLmRlZmF1bHRDaGVja2VkPSFhLmRlZmF1bHRDaGVja2VkO2EuZGVmYXVsdENoZWNrZWQ9ISFhLl93cmFwcGVyU3RhdGUuaW5pdGlhbENoZWNrZWQ7XCJcIiE9PWMmJihhLm5hbWU9Yyl9XG5mdW5jdGlvbiBGYyhhLGIsYyl7aWYoXCJudW1iZXJcIiE9PWJ8fGEub3duZXJEb2N1bWVudC5hY3RpdmVFbGVtZW50IT09YSludWxsPT1jP2EuZGVmYXVsdFZhbHVlPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTphLmRlZmF1bHRWYWx1ZSE9PVwiXCIrYyYmKGEuZGVmYXVsdFZhbHVlPVwiXCIrYyl9dmFyIEhjPXtjaGFuZ2U6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25DaGFuZ2VcIixjYXB0dXJlZDpcIm9uQ2hhbmdlQ2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJibHVyIGNoYW5nZSBjbGljayBmb2N1cyBpbnB1dCBrZXlkb3duIGtleXVwIHNlbGVjdGlvbmNoYW5nZVwiLnNwbGl0KFwiIFwiKX19O2Z1bmN0aW9uIEljKGEsYixjKXthPXkuZ2V0UG9vbGVkKEhjLmNoYW5nZSxhLGIsYyk7YS50eXBlPVwiY2hhbmdlXCI7SGIoYyk7UWEoYSk7cmV0dXJuIGF9dmFyIEpjPW51bGwsS2M9bnVsbDtmdW5jdGlvbiBMYyhhKXtCYShhKX1cbmZ1bmN0aW9uIE1jKGEpe3ZhciBiPUphKGEpO2lmKFdiKGIpKXJldHVybiBhfWZ1bmN0aW9uIE5jKGEsYil7aWYoXCJjaGFuZ2VcIj09PWEpcmV0dXJuIGJ9dmFyIE9jPSExO1JhJiYoT2M9U2IoXCJpbnB1dFwiKSYmKCFkb2N1bWVudC5kb2N1bWVudE1vZGV8fDk8ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKSk7ZnVuY3Rpb24gUGMoKXtKYyYmKEpjLmRldGFjaEV2ZW50KFwib25wcm9wZXJ0eWNoYW5nZVwiLFFjKSxLYz1KYz1udWxsKX1mdW5jdGlvbiBRYyhhKXtpZihcInZhbHVlXCI9PT1hLnByb3BlcnR5TmFtZSYmTWMoS2MpKWlmKGE9SWMoS2MsYSxSYihhKSksTmIpQmEoYSk7ZWxzZXtOYj0hMDt0cnl7SmIoTGMsYSl9ZmluYWxseXtOYj0hMSxPYigpfX19ZnVuY3Rpb24gUmMoYSxiLGMpe1wiZm9jdXNcIj09PWE/KFBjKCksSmM9YixLYz1jLEpjLmF0dGFjaEV2ZW50KFwib25wcm9wZXJ0eWNoYW5nZVwiLFFjKSk6XCJibHVyXCI9PT1hJiZQYygpfVxuZnVuY3Rpb24gU2MoYSl7aWYoXCJzZWxlY3Rpb25jaGFuZ2VcIj09PWF8fFwia2V5dXBcIj09PWF8fFwia2V5ZG93blwiPT09YSlyZXR1cm4gTWMoS2MpfWZ1bmN0aW9uIFRjKGEsYil7aWYoXCJjbGlja1wiPT09YSlyZXR1cm4gTWMoYil9ZnVuY3Rpb24gVWMoYSxiKXtpZihcImlucHV0XCI9PT1hfHxcImNoYW5nZVwiPT09YSlyZXR1cm4gTWMoYil9XG52YXIgVmM9e2V2ZW50VHlwZXM6SGMsX2lzSW5wdXRFdmVudFN1cHBvcnRlZDpPYyxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPWI/SmEoYik6d2luZG93LGY9dm9pZCAwLGg9dm9pZCAwLGc9ZS5ub2RlTmFtZSYmZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1wic2VsZWN0XCI9PT1nfHxcImlucHV0XCI9PT1nJiZcImZpbGVcIj09PWUudHlwZT9mPU5jOlFiKGUpP09jP2Y9VWM6KGY9U2MsaD1SYyk6KGc9ZS5ub2RlTmFtZSkmJlwiaW5wdXRcIj09PWcudG9Mb3dlckNhc2UoKSYmKFwiY2hlY2tib3hcIj09PWUudHlwZXx8XCJyYWRpb1wiPT09ZS50eXBlKSYmKGY9VGMpO2lmKGYmJihmPWYoYSxiKSkpcmV0dXJuIEljKGYsYyxkKTtoJiZoKGEsZSxiKTtcImJsdXJcIj09PWEmJihhPWUuX3dyYXBwZXJTdGF0ZSkmJmEuY29udHJvbGxlZCYmXCJudW1iZXJcIj09PWUudHlwZSYmRmMoZSxcIm51bWJlclwiLGUudmFsdWUpfX0sV2M9eS5leHRlbmQoe3ZpZXc6bnVsbCxkZXRhaWw6bnVsbH0pLFhjPXtBbHQ6XCJhbHRLZXlcIixcbkNvbnRyb2w6XCJjdHJsS2V5XCIsTWV0YTpcIm1ldGFLZXlcIixTaGlmdDpcInNoaWZ0S2V5XCJ9O2Z1bmN0aW9uIFljKGEpe3ZhciBiPXRoaXMubmF0aXZlRXZlbnQ7cmV0dXJuIGIuZ2V0TW9kaWZpZXJTdGF0ZT9iLmdldE1vZGlmaWVyU3RhdGUoYSk6KGE9WGNbYV0pPyEhYlthXTohMX1mdW5jdGlvbiBaYygpe3JldHVybiBZY31cbnZhciAkYz0wLGFkPTAsYmQ9ITEsY2Q9ITEsZGQ9V2MuZXh0ZW5kKHtzY3JlZW5YOm51bGwsc2NyZWVuWTpudWxsLGNsaWVudFg6bnVsbCxjbGllbnRZOm51bGwscGFnZVg6bnVsbCxwYWdlWTpudWxsLGN0cmxLZXk6bnVsbCxzaGlmdEtleTpudWxsLGFsdEtleTpudWxsLG1ldGFLZXk6bnVsbCxnZXRNb2RpZmllclN0YXRlOlpjLGJ1dHRvbjpudWxsLGJ1dHRvbnM6bnVsbCxyZWxhdGVkVGFyZ2V0OmZ1bmN0aW9uKGEpe3JldHVybiBhLnJlbGF0ZWRUYXJnZXR8fChhLmZyb21FbGVtZW50PT09YS5zcmNFbGVtZW50P2EudG9FbGVtZW50OmEuZnJvbUVsZW1lbnQpfSxtb3ZlbWVudFg6ZnVuY3Rpb24oYSl7aWYoXCJtb3ZlbWVudFhcImluIGEpcmV0dXJuIGEubW92ZW1lbnRYO3ZhciBiPSRjOyRjPWEuc2NyZWVuWDtyZXR1cm4gYmQ/XCJtb3VzZW1vdmVcIj09PWEudHlwZT9hLnNjcmVlblgtYjowOihiZD0hMCwwKX0sbW92ZW1lbnRZOmZ1bmN0aW9uKGEpe2lmKFwibW92ZW1lbnRZXCJpbiBhKXJldHVybiBhLm1vdmVtZW50WTtcbnZhciBiPWFkO2FkPWEuc2NyZWVuWTtyZXR1cm4gY2Q/XCJtb3VzZW1vdmVcIj09PWEudHlwZT9hLnNjcmVlblktYjowOihjZD0hMCwwKX19KSxlZD1kZC5leHRlbmQoe3BvaW50ZXJJZDpudWxsLHdpZHRoOm51bGwsaGVpZ2h0Om51bGwscHJlc3N1cmU6bnVsbCx0YW5nZW50aWFsUHJlc3N1cmU6bnVsbCx0aWx0WDpudWxsLHRpbHRZOm51bGwsdHdpc3Q6bnVsbCxwb2ludGVyVHlwZTpudWxsLGlzUHJpbWFyeTpudWxsfSksZmQ9e21vdXNlRW50ZXI6e3JlZ2lzdHJhdGlvbk5hbWU6XCJvbk1vdXNlRW50ZXJcIixkZXBlbmRlbmNpZXM6W1wibW91c2VvdXRcIixcIm1vdXNlb3ZlclwiXX0sbW91c2VMZWF2ZTp7cmVnaXN0cmF0aW9uTmFtZTpcIm9uTW91c2VMZWF2ZVwiLGRlcGVuZGVuY2llczpbXCJtb3VzZW91dFwiLFwibW91c2VvdmVyXCJdfSxwb2ludGVyRW50ZXI6e3JlZ2lzdHJhdGlvbk5hbWU6XCJvblBvaW50ZXJFbnRlclwiLGRlcGVuZGVuY2llczpbXCJwb2ludGVyb3V0XCIsXCJwb2ludGVyb3ZlclwiXX0scG9pbnRlckxlYXZlOntyZWdpc3RyYXRpb25OYW1lOlwib25Qb2ludGVyTGVhdmVcIixcbmRlcGVuZGVuY2llczpbXCJwb2ludGVyb3V0XCIsXCJwb2ludGVyb3ZlclwiXX19LGdkPXtldmVudFR5cGVzOmZkLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9XCJtb3VzZW92ZXJcIj09PWF8fFwicG9pbnRlcm92ZXJcIj09PWEsZj1cIm1vdXNlb3V0XCI9PT1hfHxcInBvaW50ZXJvdXRcIj09PWE7aWYoZSYmKGMucmVsYXRlZFRhcmdldHx8Yy5mcm9tRWxlbWVudCl8fCFmJiYhZSlyZXR1cm4gbnVsbDtlPWQud2luZG93PT09ZD9kOihlPWQub3duZXJEb2N1bWVudCk/ZS5kZWZhdWx0Vmlld3x8ZS5wYXJlbnRXaW5kb3c6d2luZG93O2Y/KGY9YixiPShiPWMucmVsYXRlZFRhcmdldHx8Yy50b0VsZW1lbnQpP0hhKGIpOm51bGwpOmY9bnVsbDtpZihmPT09YilyZXR1cm4gbnVsbDt2YXIgaD12b2lkIDAsZz12b2lkIDAsaz12b2lkIDAsbD12b2lkIDA7aWYoXCJtb3VzZW91dFwiPT09YXx8XCJtb3VzZW92ZXJcIj09PWEpaD1kZCxnPWZkLm1vdXNlTGVhdmUsaz1mZC5tb3VzZUVudGVyLGw9XCJtb3VzZVwiO1xuZWxzZSBpZihcInBvaW50ZXJvdXRcIj09PWF8fFwicG9pbnRlcm92ZXJcIj09PWEpaD1lZCxnPWZkLnBvaW50ZXJMZWF2ZSxrPWZkLnBvaW50ZXJFbnRlcixsPVwicG9pbnRlclwiO3ZhciBuPW51bGw9PWY/ZTpKYShmKTtlPW51bGw9PWI/ZTpKYShiKTthPWguZ2V0UG9vbGVkKGcsZixjLGQpO2EudHlwZT1sK1wibGVhdmVcIjthLnRhcmdldD1uO2EucmVsYXRlZFRhcmdldD1lO2M9aC5nZXRQb29sZWQoayxiLGMsZCk7Yy50eXBlPWwrXCJlbnRlclwiO2MudGFyZ2V0PWU7Yy5yZWxhdGVkVGFyZ2V0PW47ZD1iO2lmKGYmJmQpYTp7Yj1mO2U9ZDtsPTA7Zm9yKGg9YjtoO2g9TGEoaCkpbCsrO2g9MDtmb3Ioaz1lO2s7az1MYShrKSloKys7Zm9yKDswPGwtaDspYj1MYShiKSxsLS07Zm9yKDswPGgtbDspZT1MYShlKSxoLS07Zm9yKDtsLS07KXtpZihiPT09ZXx8Yj09PWUuYWx0ZXJuYXRlKWJyZWFrIGE7Yj1MYShiKTtlPUxhKGUpfWI9bnVsbH1lbHNlIGI9bnVsbDtlPWI7Zm9yKGI9W107ZiYmZiE9PWU7KXtsPVxuZi5hbHRlcm5hdGU7aWYobnVsbCE9PWwmJmw9PT1lKWJyZWFrO2IucHVzaChmKTtmPUxhKGYpfWZvcihmPVtdO2QmJmQhPT1lOyl7bD1kLmFsdGVybmF0ZTtpZihudWxsIT09bCYmbD09PWUpYnJlYWs7Zi5wdXNoKGQpO2Q9TGEoZCl9Zm9yKGQ9MDtkPGIubGVuZ3RoO2QrKylPYShiW2RdLFwiYnViYmxlZFwiLGEpO2ZvcihkPWYubGVuZ3RoOzA8ZC0tOylPYShmW2RdLFwiY2FwdHVyZWRcIixjKTtyZXR1cm5bYSxjXX19O2Z1bmN0aW9uIGhkKGEsYil7cmV0dXJuIGE9PT1iJiYoMCE9PWF8fDEvYT09PTEvYil8fGEhPT1hJiZiIT09Yn12YXIgaWQ9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbmZ1bmN0aW9uIGpkKGEsYil7aWYoaGQoYSxiKSlyZXR1cm4hMDtpZihcIm9iamVjdFwiIT09dHlwZW9mIGF8fG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGJ8fG51bGw9PT1iKXJldHVybiExO3ZhciBjPU9iamVjdC5rZXlzKGEpLGQ9T2JqZWN0LmtleXMoYik7aWYoYy5sZW5ndGghPT1kLmxlbmd0aClyZXR1cm4hMTtmb3IoZD0wO2Q8Yy5sZW5ndGg7ZCsrKWlmKCFpZC5jYWxsKGIsY1tkXSl8fCFoZChhW2NbZF1dLGJbY1tkXV0pKXJldHVybiExO3JldHVybiEwfWZ1bmN0aW9uIGtkKGEsYil7cmV0dXJue3Jlc3BvbmRlcjphLHByb3BzOmJ9fW5ldyBNYXA7bmV3IE1hcDtuZXcgU2V0O25ldyBNYXA7XG5mdW5jdGlvbiBsZChhKXt2YXIgYj1hO2lmKGEuYWx0ZXJuYXRlKWZvcig7Yi5yZXR1cm47KWI9Yi5yZXR1cm47ZWxzZXtpZigwIT09KGIuZWZmZWN0VGFnJjIpKXJldHVybiAxO2Zvcig7Yi5yZXR1cm47KWlmKGI9Yi5yZXR1cm4sMCE9PShiLmVmZmVjdFRhZyYyKSlyZXR1cm4gMX1yZXR1cm4gMz09PWIudGFnPzI6M31mdW5jdGlvbiBvZChhKXtpZigyIT09bGQoYSkpdGhyb3cgdChFcnJvcigxODgpKTt9XG5mdW5jdGlvbiBwZChhKXt2YXIgYj1hLmFsdGVybmF0ZTtpZighYil7Yj1sZChhKTtpZigzPT09Yil0aHJvdyB0KEVycm9yKDE4OCkpO3JldHVybiAxPT09Yj9udWxsOmF9Zm9yKHZhciBjPWEsZD1iOzspe3ZhciBlPWMucmV0dXJuO2lmKG51bGw9PT1lKWJyZWFrO3ZhciBmPWUuYWx0ZXJuYXRlO2lmKG51bGw9PT1mKXtkPWUucmV0dXJuO2lmKG51bGwhPT1kKXtjPWQ7Y29udGludWV9YnJlYWt9aWYoZS5jaGlsZD09PWYuY2hpbGQpe2ZvcihmPWUuY2hpbGQ7Zjspe2lmKGY9PT1jKXJldHVybiBvZChlKSxhO2lmKGY9PT1kKXJldHVybiBvZChlKSxiO2Y9Zi5zaWJsaW5nfXRocm93IHQoRXJyb3IoMTg4KSk7fWlmKGMucmV0dXJuIT09ZC5yZXR1cm4pYz1lLGQ9ZjtlbHNle2Zvcih2YXIgaD0hMSxnPWUuY2hpbGQ7Zzspe2lmKGc9PT1jKXtoPSEwO2M9ZTtkPWY7YnJlYWt9aWYoZz09PWQpe2g9ITA7ZD1lO2M9ZjticmVha31nPWcuc2libGluZ31pZighaCl7Zm9yKGc9Zi5jaGlsZDtnOyl7aWYoZz09PVxuYyl7aD0hMDtjPWY7ZD1lO2JyZWFrfWlmKGc9PT1kKXtoPSEwO2Q9ZjtjPWU7YnJlYWt9Zz1nLnNpYmxpbmd9aWYoIWgpdGhyb3cgdChFcnJvcigxODkpKTt9fWlmKGMuYWx0ZXJuYXRlIT09ZCl0aHJvdyB0KEVycm9yKDE5MCkpO31pZigzIT09Yy50YWcpdGhyb3cgdChFcnJvcigxODgpKTtyZXR1cm4gYy5zdGF0ZU5vZGUuY3VycmVudD09PWM/YTpifWZ1bmN0aW9uIHFkKGEpe2E9cGQoYSk7aWYoIWEpcmV0dXJuIG51bGw7Zm9yKHZhciBiPWE7Oyl7aWYoNT09PWIudGFnfHw2PT09Yi50YWcpcmV0dXJuIGI7aWYoYi5jaGlsZCliLmNoaWxkLnJldHVybj1iLGI9Yi5jaGlsZDtlbHNle2lmKGI9PT1hKWJyZWFrO2Zvcig7IWIuc2libGluZzspe2lmKCFiLnJldHVybnx8Yi5yZXR1cm49PT1hKXJldHVybiBudWxsO2I9Yi5yZXR1cm59Yi5zaWJsaW5nLnJldHVybj1iLnJldHVybjtiPWIuc2libGluZ319cmV0dXJuIG51bGx9XG52YXIgcmQ9eS5leHRlbmQoe2FuaW1hdGlvbk5hbWU6bnVsbCxlbGFwc2VkVGltZTpudWxsLHBzZXVkb0VsZW1lbnQ6bnVsbH0pLHNkPXkuZXh0ZW5kKHtjbGlwYm9hcmREYXRhOmZ1bmN0aW9uKGEpe3JldHVyblwiY2xpcGJvYXJkRGF0YVwiaW4gYT9hLmNsaXBib2FyZERhdGE6d2luZG93LmNsaXBib2FyZERhdGF9fSksdGQ9V2MuZXh0ZW5kKHtyZWxhdGVkVGFyZ2V0Om51bGx9KTtmdW5jdGlvbiB1ZChhKXt2YXIgYj1hLmtleUNvZGU7XCJjaGFyQ29kZVwiaW4gYT8oYT1hLmNoYXJDb2RlLDA9PT1hJiYxMz09PWImJihhPTEzKSk6YT1iOzEwPT09YSYmKGE9MTMpO3JldHVybiAzMjw9YXx8MTM9PT1hP2E6MH1cbnZhciB2ZD17RXNjOlwiRXNjYXBlXCIsU3BhY2ViYXI6XCIgXCIsTGVmdDpcIkFycm93TGVmdFwiLFVwOlwiQXJyb3dVcFwiLFJpZ2h0OlwiQXJyb3dSaWdodFwiLERvd246XCJBcnJvd0Rvd25cIixEZWw6XCJEZWxldGVcIixXaW46XCJPU1wiLE1lbnU6XCJDb250ZXh0TWVudVwiLEFwcHM6XCJDb250ZXh0TWVudVwiLFNjcm9sbDpcIlNjcm9sbExvY2tcIixNb3pQcmludGFibGVLZXk6XCJVbmlkZW50aWZpZWRcIn0sd2Q9ezg6XCJCYWNrc3BhY2VcIiw5OlwiVGFiXCIsMTI6XCJDbGVhclwiLDEzOlwiRW50ZXJcIiwxNjpcIlNoaWZ0XCIsMTc6XCJDb250cm9sXCIsMTg6XCJBbHRcIiwxOTpcIlBhdXNlXCIsMjA6XCJDYXBzTG9ja1wiLDI3OlwiRXNjYXBlXCIsMzI6XCIgXCIsMzM6XCJQYWdlVXBcIiwzNDpcIlBhZ2VEb3duXCIsMzU6XCJFbmRcIiwzNjpcIkhvbWVcIiwzNzpcIkFycm93TGVmdFwiLDM4OlwiQXJyb3dVcFwiLDM5OlwiQXJyb3dSaWdodFwiLDQwOlwiQXJyb3dEb3duXCIsNDU6XCJJbnNlcnRcIiw0NjpcIkRlbGV0ZVwiLDExMjpcIkYxXCIsMTEzOlwiRjJcIiwxMTQ6XCJGM1wiLDExNTpcIkY0XCIsXG4xMTY6XCJGNVwiLDExNzpcIkY2XCIsMTE4OlwiRjdcIiwxMTk6XCJGOFwiLDEyMDpcIkY5XCIsMTIxOlwiRjEwXCIsMTIyOlwiRjExXCIsMTIzOlwiRjEyXCIsMTQ0OlwiTnVtTG9ja1wiLDE0NTpcIlNjcm9sbExvY2tcIiwyMjQ6XCJNZXRhXCJ9LHhkPVdjLmV4dGVuZCh7a2V5OmZ1bmN0aW9uKGEpe2lmKGEua2V5KXt2YXIgYj12ZFthLmtleV18fGEua2V5O2lmKFwiVW5pZGVudGlmaWVkXCIhPT1iKXJldHVybiBifXJldHVyblwia2V5cHJlc3NcIj09PWEudHlwZT8oYT11ZChhKSwxMz09PWE/XCJFbnRlclwiOlN0cmluZy5mcm9tQ2hhckNvZGUoYSkpOlwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/d2RbYS5rZXlDb2RlXXx8XCJVbmlkZW50aWZpZWRcIjpcIlwifSxsb2NhdGlvbjpudWxsLGN0cmxLZXk6bnVsbCxzaGlmdEtleTpudWxsLGFsdEtleTpudWxsLG1ldGFLZXk6bnVsbCxyZXBlYXQ6bnVsbCxsb2NhbGU6bnVsbCxnZXRNb2RpZmllclN0YXRlOlpjLGNoYXJDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PVxuYS50eXBlP3VkKGEpOjB9LGtleUNvZGU6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9hLmtleUNvZGU6MH0sd2hpY2g6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlwcmVzc1wiPT09YS50eXBlP3VkKGEpOlwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9fSkseWQ9ZGQuZXh0ZW5kKHtkYXRhVHJhbnNmZXI6bnVsbH0pLHpkPVdjLmV4dGVuZCh7dG91Y2hlczpudWxsLHRhcmdldFRvdWNoZXM6bnVsbCxjaGFuZ2VkVG91Y2hlczpudWxsLGFsdEtleTpudWxsLG1ldGFLZXk6bnVsbCxjdHJsS2V5Om51bGwsc2hpZnRLZXk6bnVsbCxnZXRNb2RpZmllclN0YXRlOlpjfSksQWQ9eS5leHRlbmQoe3Byb3BlcnR5TmFtZTpudWxsLGVsYXBzZWRUaW1lOm51bGwscHNldWRvRWxlbWVudDpudWxsfSksQmQ9ZGQuZXh0ZW5kKHtkZWx0YVg6ZnVuY3Rpb24oYSl7cmV0dXJuXCJkZWx0YVhcImluIGE/YS5kZWx0YVg6XCJ3aGVlbERlbHRhWFwiaW5cbmE/LWEud2hlZWxEZWx0YVg6MH0sZGVsdGFZOmZ1bmN0aW9uKGEpe3JldHVyblwiZGVsdGFZXCJpbiBhP2EuZGVsdGFZOlwid2hlZWxEZWx0YVlcImluIGE/LWEud2hlZWxEZWx0YVk6XCJ3aGVlbERlbHRhXCJpbiBhPy1hLndoZWVsRGVsdGE6MH0sZGVsdGFaOm51bGwsZGVsdGFNb2RlOm51bGx9KSxDZD1bW1wiYmx1clwiLFwiYmx1clwiLDBdLFtcImNhbmNlbFwiLFwiY2FuY2VsXCIsMF0sW1wiY2xpY2tcIixcImNsaWNrXCIsMF0sW1wiY2xvc2VcIixcImNsb3NlXCIsMF0sW1wiY29udGV4dG1lbnVcIixcImNvbnRleHRNZW51XCIsMF0sW1wiY29weVwiLFwiY29weVwiLDBdLFtcImN1dFwiLFwiY3V0XCIsMF0sW1wiYXV4Y2xpY2tcIixcImF1eENsaWNrXCIsMF0sW1wiZGJsY2xpY2tcIixcImRvdWJsZUNsaWNrXCIsMF0sW1wiZHJhZ2VuZFwiLFwiZHJhZ0VuZFwiLDBdLFtcImRyYWdzdGFydFwiLFwiZHJhZ1N0YXJ0XCIsMF0sW1wiZHJvcFwiLFwiZHJvcFwiLDBdLFtcImZvY3VzXCIsXCJmb2N1c1wiLDBdLFtcImlucHV0XCIsXCJpbnB1dFwiLDBdLFtcImludmFsaWRcIixcImludmFsaWRcIiwwXSxcbltcImtleWRvd25cIixcImtleURvd25cIiwwXSxbXCJrZXlwcmVzc1wiLFwia2V5UHJlc3NcIiwwXSxbXCJrZXl1cFwiLFwia2V5VXBcIiwwXSxbXCJtb3VzZWRvd25cIixcIm1vdXNlRG93blwiLDBdLFtcIm1vdXNldXBcIixcIm1vdXNlVXBcIiwwXSxbXCJwYXN0ZVwiLFwicGFzdGVcIiwwXSxbXCJwYXVzZVwiLFwicGF1c2VcIiwwXSxbXCJwbGF5XCIsXCJwbGF5XCIsMF0sW1wicG9pbnRlcmNhbmNlbFwiLFwicG9pbnRlckNhbmNlbFwiLDBdLFtcInBvaW50ZXJkb3duXCIsXCJwb2ludGVyRG93blwiLDBdLFtcInBvaW50ZXJ1cFwiLFwicG9pbnRlclVwXCIsMF0sW1wicmF0ZWNoYW5nZVwiLFwicmF0ZUNoYW5nZVwiLDBdLFtcInJlc2V0XCIsXCJyZXNldFwiLDBdLFtcInNlZWtlZFwiLFwic2Vla2VkXCIsMF0sW1wic3VibWl0XCIsXCJzdWJtaXRcIiwwXSxbXCJ0b3VjaGNhbmNlbFwiLFwidG91Y2hDYW5jZWxcIiwwXSxbXCJ0b3VjaGVuZFwiLFwidG91Y2hFbmRcIiwwXSxbXCJ0b3VjaHN0YXJ0XCIsXCJ0b3VjaFN0YXJ0XCIsMF0sW1widm9sdW1lY2hhbmdlXCIsXCJ2b2x1bWVDaGFuZ2VcIiwwXSxbXCJkcmFnXCIsXCJkcmFnXCIsXG4xXSxbXCJkcmFnZW50ZXJcIixcImRyYWdFbnRlclwiLDFdLFtcImRyYWdleGl0XCIsXCJkcmFnRXhpdFwiLDFdLFtcImRyYWdsZWF2ZVwiLFwiZHJhZ0xlYXZlXCIsMV0sW1wiZHJhZ292ZXJcIixcImRyYWdPdmVyXCIsMV0sW1wibW91c2Vtb3ZlXCIsXCJtb3VzZU1vdmVcIiwxXSxbXCJtb3VzZW91dFwiLFwibW91c2VPdXRcIiwxXSxbXCJtb3VzZW92ZXJcIixcIm1vdXNlT3ZlclwiLDFdLFtcInBvaW50ZXJtb3ZlXCIsXCJwb2ludGVyTW92ZVwiLDFdLFtcInBvaW50ZXJvdXRcIixcInBvaW50ZXJPdXRcIiwxXSxbXCJwb2ludGVyb3ZlclwiLFwicG9pbnRlck92ZXJcIiwxXSxbXCJzY3JvbGxcIixcInNjcm9sbFwiLDFdLFtcInRvZ2dsZVwiLFwidG9nZ2xlXCIsMV0sW1widG91Y2htb3ZlXCIsXCJ0b3VjaE1vdmVcIiwxXSxbXCJ3aGVlbFwiLFwid2hlZWxcIiwxXSxbXCJhYm9ydFwiLFwiYWJvcnRcIiwyXSxbWGEsXCJhbmltYXRpb25FbmRcIiwyXSxbWWEsXCJhbmltYXRpb25JdGVyYXRpb25cIiwyXSxbWmEsXCJhbmltYXRpb25TdGFydFwiLDJdLFtcImNhbnBsYXlcIixcImNhblBsYXlcIiwyXSxbXCJjYW5wbGF5dGhyb3VnaFwiLFxuXCJjYW5QbGF5VGhyb3VnaFwiLDJdLFtcImR1cmF0aW9uY2hhbmdlXCIsXCJkdXJhdGlvbkNoYW5nZVwiLDJdLFtcImVtcHRpZWRcIixcImVtcHRpZWRcIiwyXSxbXCJlbmNyeXB0ZWRcIixcImVuY3J5cHRlZFwiLDJdLFtcImVuZGVkXCIsXCJlbmRlZFwiLDJdLFtcImVycm9yXCIsXCJlcnJvclwiLDJdLFtcImdvdHBvaW50ZXJjYXB0dXJlXCIsXCJnb3RQb2ludGVyQ2FwdHVyZVwiLDJdLFtcImxvYWRcIixcImxvYWRcIiwyXSxbXCJsb2FkZWRkYXRhXCIsXCJsb2FkZWREYXRhXCIsMl0sW1wibG9hZGVkbWV0YWRhdGFcIixcImxvYWRlZE1ldGFkYXRhXCIsMl0sW1wibG9hZHN0YXJ0XCIsXCJsb2FkU3RhcnRcIiwyXSxbXCJsb3N0cG9pbnRlcmNhcHR1cmVcIixcImxvc3RQb2ludGVyQ2FwdHVyZVwiLDJdLFtcInBsYXlpbmdcIixcInBsYXlpbmdcIiwyXSxbXCJwcm9ncmVzc1wiLFwicHJvZ3Jlc3NcIiwyXSxbXCJzZWVraW5nXCIsXCJzZWVraW5nXCIsMl0sW1wic3RhbGxlZFwiLFwic3RhbGxlZFwiLDJdLFtcInN1c3BlbmRcIixcInN1c3BlbmRcIiwyXSxbXCJ0aW1ldXBkYXRlXCIsXCJ0aW1lVXBkYXRlXCIsXG4yXSxbYWIsXCJ0cmFuc2l0aW9uRW5kXCIsMl0sW1wid2FpdGluZ1wiLFwid2FpdGluZ1wiLDJdXSxEZD17fSxFZD17fSxGZD0wO2Zvcig7RmQ8Q2QubGVuZ3RoO0ZkKyspe3ZhciBHZD1DZFtGZF0sSGQ9R2RbMF0sSWQ9R2RbMV0sSmQ9R2RbMl0sS2Q9XCJvblwiKyhJZFswXS50b1VwcGVyQ2FzZSgpK0lkLnNsaWNlKDEpKSxMZD17cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6S2QsY2FwdHVyZWQ6S2QrXCJDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpbSGRdLGV2ZW50UHJpb3JpdHk6SmR9O0RkW0lkXT1MZDtFZFtIZF09TGR9XG52YXIgTWQ9e2V2ZW50VHlwZXM6RGQsZ2V0RXZlbnRQcmlvcml0eTpmdW5jdGlvbihhKXthPUVkW2FdO3JldHVybiB2b2lkIDAhPT1hP2EuZXZlbnRQcmlvcml0eToyfSxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPUVkW2FdO2lmKCFlKXJldHVybiBudWxsO3N3aXRjaChhKXtjYXNlIFwia2V5cHJlc3NcIjppZigwPT09dWQoYykpcmV0dXJuIG51bGw7Y2FzZSBcImtleWRvd25cIjpjYXNlIFwia2V5dXBcIjphPXhkO2JyZWFrO2Nhc2UgXCJibHVyXCI6Y2FzZSBcImZvY3VzXCI6YT10ZDticmVhaztjYXNlIFwiY2xpY2tcIjppZigyPT09Yy5idXR0b24pcmV0dXJuIG51bGw7Y2FzZSBcImF1eGNsaWNrXCI6Y2FzZSBcImRibGNsaWNrXCI6Y2FzZSBcIm1vdXNlZG93blwiOmNhc2UgXCJtb3VzZW1vdmVcIjpjYXNlIFwibW91c2V1cFwiOmNhc2UgXCJtb3VzZW91dFwiOmNhc2UgXCJtb3VzZW92ZXJcIjpjYXNlIFwiY29udGV4dG1lbnVcIjphPWRkO2JyZWFrO2Nhc2UgXCJkcmFnXCI6Y2FzZSBcImRyYWdlbmRcIjpjYXNlIFwiZHJhZ2VudGVyXCI6Y2FzZSBcImRyYWdleGl0XCI6Y2FzZSBcImRyYWdsZWF2ZVwiOmNhc2UgXCJkcmFnb3ZlclwiOmNhc2UgXCJkcmFnc3RhcnRcIjpjYXNlIFwiZHJvcFwiOmE9XG55ZDticmVhaztjYXNlIFwidG91Y2hjYW5jZWxcIjpjYXNlIFwidG91Y2hlbmRcIjpjYXNlIFwidG91Y2htb3ZlXCI6Y2FzZSBcInRvdWNoc3RhcnRcIjphPXpkO2JyZWFrO2Nhc2UgWGE6Y2FzZSBZYTpjYXNlIFphOmE9cmQ7YnJlYWs7Y2FzZSBhYjphPUFkO2JyZWFrO2Nhc2UgXCJzY3JvbGxcIjphPVdjO2JyZWFrO2Nhc2UgXCJ3aGVlbFwiOmE9QmQ7YnJlYWs7Y2FzZSBcImNvcHlcIjpjYXNlIFwiY3V0XCI6Y2FzZSBcInBhc3RlXCI6YT1zZDticmVhaztjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwibG9zdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcInBvaW50ZXJjYW5jZWxcIjpjYXNlIFwicG9pbnRlcmRvd25cIjpjYXNlIFwicG9pbnRlcm1vdmVcIjpjYXNlIFwicG9pbnRlcm91dFwiOmNhc2UgXCJwb2ludGVyb3ZlclwiOmNhc2UgXCJwb2ludGVydXBcIjphPWVkO2JyZWFrO2RlZmF1bHQ6YT15fWI9YS5nZXRQb29sZWQoZSxiLGMsZCk7UWEoYik7cmV0dXJuIGJ9fSxOZD1NZC5nZXRFdmVudFByaW9yaXR5LE9kPVtdO1xuZnVuY3Rpb24gUGQoYSl7dmFyIGI9YS50YXJnZXRJbnN0LGM9Yjtkb3tpZighYyl7YS5hbmNlc3RvcnMucHVzaChjKTticmVha312YXIgZDtmb3IoZD1jO2QucmV0dXJuOylkPWQucmV0dXJuO2Q9MyE9PWQudGFnP251bGw6ZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztpZighZClicmVhazthLmFuY2VzdG9ycy5wdXNoKGMpO2M9SGEoZCl9d2hpbGUoYyk7Zm9yKGM9MDtjPGEuYW5jZXN0b3JzLmxlbmd0aDtjKyspe2I9YS5hbmNlc3RvcnNbY107dmFyIGU9UmIoYS5uYXRpdmVFdmVudCk7ZD1hLnRvcExldmVsVHlwZTtmb3IodmFyIGY9YS5uYXRpdmVFdmVudCxoPW51bGwsZz0wO2c8ZWEubGVuZ3RoO2crKyl7dmFyIGs9ZWFbZ107ayYmKGs9ay5leHRyYWN0RXZlbnRzKGQsYixmLGUpKSYmKGg9eGEoaCxrKSl9QmEoaCl9fXZhciBRZD0hMDtmdW5jdGlvbiBHKGEsYil7UmQoYixhLCExKX1cbmZ1bmN0aW9uIFJkKGEsYixjKXtzd2l0Y2goTmQoYikpe2Nhc2UgMDp2YXIgZD1TZC5iaW5kKG51bGwsYiwxKTticmVhaztjYXNlIDE6ZD1UZC5iaW5kKG51bGwsYiwxKTticmVhaztkZWZhdWx0OmQ9VWQuYmluZChudWxsLGIsMSl9Yz9hLmFkZEV2ZW50TGlzdGVuZXIoYixkLCEwKTphLmFkZEV2ZW50TGlzdGVuZXIoYixkLCExKX1mdW5jdGlvbiBTZChhLGIsYyl7TmJ8fExiKCk7dmFyIGQ9VWQsZT1OYjtOYj0hMDt0cnl7S2IoZCxhLGIsYyl9ZmluYWxseXsoTmI9ZSl8fE9iKCl9fWZ1bmN0aW9uIFRkKGEsYixjKXtVZChhLGIsYyl9XG5mdW5jdGlvbiBVZChhLGIsYyl7aWYoUWQpe2I9UmIoYyk7Yj1IYShiKTtudWxsPT09Ynx8XCJudW1iZXJcIiE9PXR5cGVvZiBiLnRhZ3x8Mj09PWxkKGIpfHwoYj1udWxsKTtpZihPZC5sZW5ndGgpe3ZhciBkPU9kLnBvcCgpO2QudG9wTGV2ZWxUeXBlPWE7ZC5uYXRpdmVFdmVudD1jO2QudGFyZ2V0SW5zdD1iO2E9ZH1lbHNlIGE9e3RvcExldmVsVHlwZTphLG5hdGl2ZUV2ZW50OmMsdGFyZ2V0SW5zdDpiLGFuY2VzdG9yczpbXX07dHJ5e2lmKGM9YSxOYilQZChjLHZvaWQgMCk7ZWxzZXtOYj0hMDt0cnl7TWIoUGQsYyx2b2lkIDApfWZpbmFsbHl7TmI9ITEsT2IoKX19fWZpbmFsbHl7YS50b3BMZXZlbFR5cGU9bnVsbCxhLm5hdGl2ZUV2ZW50PW51bGwsYS50YXJnZXRJbnN0PW51bGwsYS5hbmNlc3RvcnMubGVuZ3RoPTAsMTA+T2QubGVuZ3RoJiZPZC5wdXNoKGEpfX19dmFyIFZkPW5ldyAoXCJmdW5jdGlvblwiPT09dHlwZW9mIFdlYWtNYXA/V2Vha01hcDpNYXApO1xuZnVuY3Rpb24gV2QoYSl7dmFyIGI9VmQuZ2V0KGEpO3ZvaWQgMD09PWImJihiPW5ldyBTZXQsVmQuc2V0KGEsYikpO3JldHVybiBifWZ1bmN0aW9uIFhkKGEpe2E9YXx8KFwidW5kZWZpbmVkXCIhPT10eXBlb2YgZG9jdW1lbnQ/ZG9jdW1lbnQ6dm9pZCAwKTtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIGEpcmV0dXJuIG51bGw7dHJ5e3JldHVybiBhLmFjdGl2ZUVsZW1lbnR8fGEuYm9keX1jYXRjaChiKXtyZXR1cm4gYS5ib2R5fX1mdW5jdGlvbiBZZChhKXtmb3IoO2EmJmEuZmlyc3RDaGlsZDspYT1hLmZpcnN0Q2hpbGQ7cmV0dXJuIGF9XG5mdW5jdGlvbiBaZChhLGIpe3ZhciBjPVlkKGEpO2E9MDtmb3IodmFyIGQ7Yzspe2lmKDM9PT1jLm5vZGVUeXBlKXtkPWErYy50ZXh0Q29udGVudC5sZW5ndGg7aWYoYTw9YiYmZD49YilyZXR1cm57bm9kZTpjLG9mZnNldDpiLWF9O2E9ZH1hOntmb3IoO2M7KXtpZihjLm5leHRTaWJsaW5nKXtjPWMubmV4dFNpYmxpbmc7YnJlYWsgYX1jPWMucGFyZW50Tm9kZX1jPXZvaWQgMH1jPVlkKGMpfX1mdW5jdGlvbiAkZChhLGIpe3JldHVybiBhJiZiP2E9PT1iPyEwOmEmJjM9PT1hLm5vZGVUeXBlPyExOmImJjM9PT1iLm5vZGVUeXBlPyRkKGEsYi5wYXJlbnROb2RlKTpcImNvbnRhaW5zXCJpbiBhP2EuY29udGFpbnMoYik6YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbj8hIShhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGIpJjE2KTohMTohMX1cbmZ1bmN0aW9uIGFlKCl7Zm9yKHZhciBhPXdpbmRvdyxiPVhkKCk7YiBpbnN0YW5jZW9mIGEuSFRNTElGcmFtZUVsZW1lbnQ7KXt0cnl7dmFyIGM9XCJzdHJpbmdcIj09PXR5cGVvZiBiLmNvbnRlbnRXaW5kb3cubG9jYXRpb24uaHJlZn1jYXRjaChkKXtjPSExfWlmKGMpYT1iLmNvbnRlbnRXaW5kb3c7ZWxzZSBicmVhaztiPVhkKGEuZG9jdW1lbnQpfXJldHVybiBifWZ1bmN0aW9uIGJlKGEpe3ZhciBiPWEmJmEubm9kZU5hbWUmJmEubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm4gYiYmKFwiaW5wdXRcIj09PWImJihcInRleHRcIj09PWEudHlwZXx8XCJzZWFyY2hcIj09PWEudHlwZXx8XCJ0ZWxcIj09PWEudHlwZXx8XCJ1cmxcIj09PWEudHlwZXx8XCJwYXNzd29yZFwiPT09YS50eXBlKXx8XCJ0ZXh0YXJlYVwiPT09Ynx8XCJ0cnVlXCI9PT1hLmNvbnRlbnRFZGl0YWJsZSl9XG52YXIgY2U9UmEmJlwiZG9jdW1lbnRNb2RlXCJpbiBkb2N1bWVudCYmMTE+PWRvY3VtZW50LmRvY3VtZW50TW9kZSxkZT17c2VsZWN0OntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uU2VsZWN0XCIsY2FwdHVyZWQ6XCJvblNlbGVjdENhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwiYmx1ciBjb250ZXh0bWVudSBkcmFnZW5kIGZvY3VzIGtleWRvd24ga2V5dXAgbW91c2Vkb3duIG1vdXNldXAgc2VsZWN0aW9uY2hhbmdlXCIuc3BsaXQoXCIgXCIpfX0sZWU9bnVsbCxmZT1udWxsLGdlPW51bGwsaGU9ITE7XG5mdW5jdGlvbiBpZShhLGIpe3ZhciBjPWIud2luZG93PT09Yj9iLmRvY3VtZW50Ojk9PT1iLm5vZGVUeXBlP2I6Yi5vd25lckRvY3VtZW50O2lmKGhlfHxudWxsPT1lZXx8ZWUhPT1YZChjKSlyZXR1cm4gbnVsbDtjPWVlO1wic2VsZWN0aW9uU3RhcnRcImluIGMmJmJlKGMpP2M9e3N0YXJ0OmMuc2VsZWN0aW9uU3RhcnQsZW5kOmMuc2VsZWN0aW9uRW5kfTooYz0oYy5vd25lckRvY3VtZW50JiZjLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXd8fHdpbmRvdykuZ2V0U2VsZWN0aW9uKCksYz17YW5jaG9yTm9kZTpjLmFuY2hvck5vZGUsYW5jaG9yT2Zmc2V0OmMuYW5jaG9yT2Zmc2V0LGZvY3VzTm9kZTpjLmZvY3VzTm9kZSxmb2N1c09mZnNldDpjLmZvY3VzT2Zmc2V0fSk7cmV0dXJuIGdlJiZqZChnZSxjKT9udWxsOihnZT1jLGE9eS5nZXRQb29sZWQoZGUuc2VsZWN0LGZlLGEsYiksYS50eXBlPVwic2VsZWN0XCIsYS50YXJnZXQ9ZWUsUWEoYSksYSl9XG52YXIgamU9e2V2ZW50VHlwZXM6ZGUsZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1kLndpbmRvdz09PWQ/ZC5kb2N1bWVudDo5PT09ZC5ub2RlVHlwZT9kOmQub3duZXJEb2N1bWVudCxmO2lmKCEoZj0hZSkpe2E6e2U9V2QoZSk7Zj1qYS5vblNlbGVjdDtmb3IodmFyIGg9MDtoPGYubGVuZ3RoO2grKylpZighZS5oYXMoZltoXSkpe2U9ITE7YnJlYWsgYX1lPSEwfWY9IWV9aWYoZilyZXR1cm4gbnVsbDtlPWI/SmEoYik6d2luZG93O3N3aXRjaChhKXtjYXNlIFwiZm9jdXNcIjppZihRYihlKXx8XCJ0cnVlXCI9PT1lLmNvbnRlbnRFZGl0YWJsZSllZT1lLGZlPWIsZ2U9bnVsbDticmVhaztjYXNlIFwiYmx1clwiOmdlPWZlPWVlPW51bGw7YnJlYWs7Y2FzZSBcIm1vdXNlZG93blwiOmhlPSEwO2JyZWFrO2Nhc2UgXCJjb250ZXh0bWVudVwiOmNhc2UgXCJtb3VzZXVwXCI6Y2FzZSBcImRyYWdlbmRcIjpyZXR1cm4gaGU9ITEsaWUoYyxkKTtjYXNlIFwic2VsZWN0aW9uY2hhbmdlXCI6aWYoY2UpYnJlYWs7XG5jYXNlIFwia2V5ZG93blwiOmNhc2UgXCJrZXl1cFwiOnJldHVybiBpZShjLGQpfXJldHVybiBudWxsfX07Q2EuaW5qZWN0RXZlbnRQbHVnaW5PcmRlcihcIlJlc3BvbmRlckV2ZW50UGx1Z2luIFNpbXBsZUV2ZW50UGx1Z2luIEVudGVyTGVhdmVFdmVudFBsdWdpbiBDaGFuZ2VFdmVudFBsdWdpbiBTZWxlY3RFdmVudFBsdWdpbiBCZWZvcmVJbnB1dEV2ZW50UGx1Z2luXCIuc3BsaXQoXCIgXCIpKTtzYT1LYTt0YT1JYTt2YT1KYTtDYS5pbmplY3RFdmVudFBsdWdpbnNCeU5hbWUoe1NpbXBsZUV2ZW50UGx1Z2luOk1kLEVudGVyTGVhdmVFdmVudFBsdWdpbjpnZCxDaGFuZ2VFdmVudFBsdWdpbjpWYyxTZWxlY3RFdmVudFBsdWdpbjpqZSxCZWZvcmVJbnB1dEV2ZW50UGx1Z2luOkNifSk7ZnVuY3Rpb24ga2UoYSl7dmFyIGI9XCJcIjthYS5DaGlsZHJlbi5mb3JFYWNoKGEsZnVuY3Rpb24oYSl7bnVsbCE9YSYmKGIrPWEpfSk7cmV0dXJuIGJ9XG5mdW5jdGlvbiBsZShhLGIpe2E9bSh7Y2hpbGRyZW46dm9pZCAwfSxiKTtpZihiPWtlKGIuY2hpbGRyZW4pKWEuY2hpbGRyZW49YjtyZXR1cm4gYX1mdW5jdGlvbiBtZShhLGIsYyxkKXthPWEub3B0aW9ucztpZihiKXtiPXt9O2Zvcih2YXIgZT0wO2U8Yy5sZW5ndGg7ZSsrKWJbXCIkXCIrY1tlXV09ITA7Zm9yKGM9MDtjPGEubGVuZ3RoO2MrKyllPWIuaGFzT3duUHJvcGVydHkoXCIkXCIrYVtjXS52YWx1ZSksYVtjXS5zZWxlY3RlZCE9PWUmJihhW2NdLnNlbGVjdGVkPWUpLGUmJmQmJihhW2NdLmRlZmF1bHRTZWxlY3RlZD0hMCl9ZWxzZXtjPVwiXCIrQWMoYyk7Yj1udWxsO2ZvcihlPTA7ZTxhLmxlbmd0aDtlKyspe2lmKGFbZV0udmFsdWU9PT1jKXthW2VdLnNlbGVjdGVkPSEwO2QmJihhW2VdLmRlZmF1bHRTZWxlY3RlZD0hMCk7cmV0dXJufW51bGwhPT1ifHxhW2VdLmRpc2FibGVkfHwoYj1hW2VdKX1udWxsIT09YiYmKGIuc2VsZWN0ZWQ9ITApfX1cbmZ1bmN0aW9uIG5lKGEsYil7aWYobnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCl0aHJvdyB0KEVycm9yKDkxKSk7cmV0dXJuIG0oe30sYix7dmFsdWU6dm9pZCAwLGRlZmF1bHRWYWx1ZTp2b2lkIDAsY2hpbGRyZW46XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlfSl9ZnVuY3Rpb24gb2UoYSxiKXt2YXIgYz1iLnZhbHVlO2lmKG51bGw9PWMpe2M9Yi5kZWZhdWx0VmFsdWU7Yj1iLmNoaWxkcmVuO2lmKG51bGwhPWIpe2lmKG51bGwhPWMpdGhyb3cgdChFcnJvcig5MikpO2lmKEFycmF5LmlzQXJyYXkoYikpe2lmKCEoMT49Yi5sZW5ndGgpKXRocm93IHQoRXJyb3IoOTMpKTtiPWJbMF19Yz1ifW51bGw9PWMmJihjPVwiXCIpfWEuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbFZhbHVlOkFjKGMpfX1cbmZ1bmN0aW9uIHBlKGEsYil7dmFyIGM9QWMoYi52YWx1ZSksZD1BYyhiLmRlZmF1bHRWYWx1ZSk7bnVsbCE9YyYmKGM9XCJcIitjLGMhPT1hLnZhbHVlJiYoYS52YWx1ZT1jKSxudWxsPT1iLmRlZmF1bHRWYWx1ZSYmYS5kZWZhdWx0VmFsdWUhPT1jJiYoYS5kZWZhdWx0VmFsdWU9YykpO251bGwhPWQmJihhLmRlZmF1bHRWYWx1ZT1cIlwiK2QpfWZ1bmN0aW9uIHFlKGEpe3ZhciBiPWEudGV4dENvbnRlbnQ7Yj09PWEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWUmJihhLnZhbHVlPWIpfXZhciByZT17aHRtbDpcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIixtYXRobWw6XCJodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MXCIsc3ZnOlwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIn07XG5mdW5jdGlvbiBzZShhKXtzd2l0Y2goYSl7Y2FzZSBcInN2Z1wiOnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIjtjYXNlIFwibWF0aFwiOnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTFwiO2RlZmF1bHQ6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCJ9fWZ1bmN0aW9uIHRlKGEsYil7cmV0dXJuIG51bGw9PWF8fFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiPT09YT9zZShiKTpcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI9PT1hJiZcImZvcmVpZ25PYmplY3RcIj09PWI/XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI6YX1cbnZhciB1ZT12b2lkIDAsdmU9ZnVuY3Rpb24oYSl7cmV0dXJuXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBNU0FwcCYmTVNBcHAuZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24/ZnVuY3Rpb24oYixjLGQsZSl7TVNBcHAuZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24oZnVuY3Rpb24oKXtyZXR1cm4gYShiLGMsZCxlKX0pfTphfShmdW5jdGlvbihhLGIpe2lmKGEubmFtZXNwYWNlVVJJIT09cmUuc3ZnfHxcImlubmVySFRNTFwiaW4gYSlhLmlubmVySFRNTD1iO2Vsc2V7dWU9dWV8fGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7dWUuaW5uZXJIVE1MPVwiPHN2Zz5cIitiK1wiPC9zdmc+XCI7Zm9yKGI9dWUuZmlyc3RDaGlsZDthLmZpcnN0Q2hpbGQ7KWEucmVtb3ZlQ2hpbGQoYS5maXJzdENoaWxkKTtmb3IoO2IuZmlyc3RDaGlsZDspYS5hcHBlbmRDaGlsZChiLmZpcnN0Q2hpbGQpfX0pO1xuZnVuY3Rpb24gd2UoYSxiKXtpZihiKXt2YXIgYz1hLmZpcnN0Q2hpbGQ7aWYoYyYmYz09PWEubGFzdENoaWxkJiYzPT09Yy5ub2RlVHlwZSl7Yy5ub2RlVmFsdWU9YjtyZXR1cm59fWEudGV4dENvbnRlbnQ9Yn1cbnZhciB4ZT17YW5pbWF0aW9uSXRlcmF0aW9uQ291bnQ6ITAsYm9yZGVySW1hZ2VPdXRzZXQ6ITAsYm9yZGVySW1hZ2VTbGljZTohMCxib3JkZXJJbWFnZVdpZHRoOiEwLGJveEZsZXg6ITAsYm94RmxleEdyb3VwOiEwLGJveE9yZGluYWxHcm91cDohMCxjb2x1bW5Db3VudDohMCxjb2x1bW5zOiEwLGZsZXg6ITAsZmxleEdyb3c6ITAsZmxleFBvc2l0aXZlOiEwLGZsZXhTaHJpbms6ITAsZmxleE5lZ2F0aXZlOiEwLGZsZXhPcmRlcjohMCxncmlkQXJlYTohMCxncmlkUm93OiEwLGdyaWRSb3dFbmQ6ITAsZ3JpZFJvd1NwYW46ITAsZ3JpZFJvd1N0YXJ0OiEwLGdyaWRDb2x1bW46ITAsZ3JpZENvbHVtbkVuZDohMCxncmlkQ29sdW1uU3BhbjohMCxncmlkQ29sdW1uU3RhcnQ6ITAsZm9udFdlaWdodDohMCxsaW5lQ2xhbXA6ITAsbGluZUhlaWdodDohMCxvcGFjaXR5OiEwLG9yZGVyOiEwLG9ycGhhbnM6ITAsdGFiU2l6ZTohMCx3aWRvd3M6ITAsekluZGV4OiEwLHpvb206ITAsZmlsbE9wYWNpdHk6ITAsXG5mbG9vZE9wYWNpdHk6ITAsc3RvcE9wYWNpdHk6ITAsc3Ryb2tlRGFzaGFycmF5OiEwLHN0cm9rZURhc2hvZmZzZXQ6ITAsc3Ryb2tlTWl0ZXJsaW1pdDohMCxzdHJva2VPcGFjaXR5OiEwLHN0cm9rZVdpZHRoOiEwfSx5ZT1bXCJXZWJraXRcIixcIm1zXCIsXCJNb3pcIixcIk9cIl07T2JqZWN0LmtleXMoeGUpLmZvckVhY2goZnVuY3Rpb24oYSl7eWUuZm9yRWFjaChmdW5jdGlvbihiKXtiPWIrYS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSthLnN1YnN0cmluZygxKTt4ZVtiXT14ZVthXX0pfSk7ZnVuY3Rpb24gemUoYSxiLGMpe3JldHVybiBudWxsPT1ifHxcImJvb2xlYW5cIj09PXR5cGVvZiBifHxcIlwiPT09Yj9cIlwiOmN8fFwibnVtYmVyXCIhPT10eXBlb2YgYnx8MD09PWJ8fHhlLmhhc093blByb3BlcnR5KGEpJiZ4ZVthXT8oXCJcIitiKS50cmltKCk6YitcInB4XCJ9XG5mdW5jdGlvbiBBZShhLGIpe2E9YS5zdHlsZTtmb3IodmFyIGMgaW4gYilpZihiLmhhc093blByb3BlcnR5KGMpKXt2YXIgZD0wPT09Yy5pbmRleE9mKFwiLS1cIiksZT16ZShjLGJbY10sZCk7XCJmbG9hdFwiPT09YyYmKGM9XCJjc3NGbG9hdFwiKTtkP2Euc2V0UHJvcGVydHkoYyxlKTphW2NdPWV9fXZhciBDZT1tKHttZW51aXRlbTohMH0se2FyZWE6ITAsYmFzZTohMCxicjohMCxjb2w6ITAsZW1iZWQ6ITAsaHI6ITAsaW1nOiEwLGlucHV0OiEwLGtleWdlbjohMCxsaW5rOiEwLG1ldGE6ITAscGFyYW06ITAsc291cmNlOiEwLHRyYWNrOiEwLHdicjohMH0pO1xuZnVuY3Rpb24gRGUoYSxiKXtpZihiKXtpZihDZVthXSYmKG51bGwhPWIuY2hpbGRyZW58fG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpKXRocm93IHQoRXJyb3IoMTM3KSxhLFwiXCIpO2lmKG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpe2lmKG51bGwhPWIuY2hpbGRyZW4pdGhyb3cgdChFcnJvcig2MCkpO2lmKCEoXCJvYmplY3RcIj09PXR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZcIl9faHRtbFwiaW4gYi5kYW5nZXJvdXNseVNldElubmVySFRNTCkpdGhyb3cgdChFcnJvcig2MSkpO31pZihudWxsIT1iLnN0eWxlJiZcIm9iamVjdFwiIT09dHlwZW9mIGIuc3R5bGUpdGhyb3cgdChFcnJvcig2MiksXCJcIik7fX1cbmZ1bmN0aW9uIEVlKGEsYil7aWYoLTE9PT1hLmluZGV4T2YoXCItXCIpKXJldHVyblwic3RyaW5nXCI9PT10eXBlb2YgYi5pcztzd2l0Y2goYSl7Y2FzZSBcImFubm90YXRpb24teG1sXCI6Y2FzZSBcImNvbG9yLXByb2ZpbGVcIjpjYXNlIFwiZm9udC1mYWNlXCI6Y2FzZSBcImZvbnQtZmFjZS1zcmNcIjpjYXNlIFwiZm9udC1mYWNlLXVyaVwiOmNhc2UgXCJmb250LWZhY2UtZm9ybWF0XCI6Y2FzZSBcImZvbnQtZmFjZS1uYW1lXCI6Y2FzZSBcIm1pc3NpbmctZ2x5cGhcIjpyZXR1cm4hMTtkZWZhdWx0OnJldHVybiEwfX1cbmZ1bmN0aW9uIEZlKGEsYil7YT05PT09YS5ub2RlVHlwZXx8MTE9PT1hLm5vZGVUeXBlP2E6YS5vd25lckRvY3VtZW50O3ZhciBjPVdkKGEpO2I9amFbYl07Zm9yKHZhciBkPTA7ZDxiLmxlbmd0aDtkKyspe3ZhciBlPWJbZF07aWYoIWMuaGFzKGUpKXtzd2l0Y2goZSl7Y2FzZSBcInNjcm9sbFwiOlJkKGEsXCJzY3JvbGxcIiwhMCk7YnJlYWs7Y2FzZSBcImZvY3VzXCI6Y2FzZSBcImJsdXJcIjpSZChhLFwiZm9jdXNcIiwhMCk7UmQoYSxcImJsdXJcIiwhMCk7Yy5hZGQoXCJibHVyXCIpO2MuYWRkKFwiZm9jdXNcIik7YnJlYWs7Y2FzZSBcImNhbmNlbFwiOmNhc2UgXCJjbG9zZVwiOlNiKGUpJiZSZChhLGUsITApO2JyZWFrO2Nhc2UgXCJpbnZhbGlkXCI6Y2FzZSBcInN1Ym1pdFwiOmNhc2UgXCJyZXNldFwiOmJyZWFrO2RlZmF1bHQ6LTE9PT1iYi5pbmRleE9mKGUpJiZHKGUsYSl9Yy5hZGQoZSl9fX1mdW5jdGlvbiBHZSgpe312YXIgSGU9bnVsbCxJZT1udWxsO1xuZnVuY3Rpb24gSmUoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImJ1dHRvblwiOmNhc2UgXCJpbnB1dFwiOmNhc2UgXCJzZWxlY3RcIjpjYXNlIFwidGV4dGFyZWFcIjpyZXR1cm4hIWIuYXV0b0ZvY3VzfXJldHVybiExfWZ1bmN0aW9uIEtlKGEsYil7cmV0dXJuXCJ0ZXh0YXJlYVwiPT09YXx8XCJvcHRpb25cIj09PWF8fFwibm9zY3JpcHRcIj09PWF8fFwic3RyaW5nXCI9PT10eXBlb2YgYi5jaGlsZHJlbnx8XCJudW1iZXJcIj09PXR5cGVvZiBiLmNoaWxkcmVufHxcIm9iamVjdFwiPT09dHlwZW9mIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJm51bGwhPT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MLl9faHRtbH12YXIgTGU9XCJmdW5jdGlvblwiPT09dHlwZW9mIHNldFRpbWVvdXQ/c2V0VGltZW91dDp2b2lkIDAsTWU9XCJmdW5jdGlvblwiPT09dHlwZW9mIGNsZWFyVGltZW91dD9jbGVhclRpbWVvdXQ6dm9pZCAwO1xuZnVuY3Rpb24gTmUoYSl7Zm9yKDtudWxsIT1hO2E9YS5uZXh0U2libGluZyl7dmFyIGI9YS5ub2RlVHlwZTtpZigxPT09Ynx8Mz09PWIpYnJlYWt9cmV0dXJuIGF9bmV3IFNldDt2YXIgT2U9W10sUGU9LTE7ZnVuY3Rpb24gSChhKXswPlBlfHwoYS5jdXJyZW50PU9lW1BlXSxPZVtQZV09bnVsbCxQZS0tKX1mdW5jdGlvbiBKKGEsYil7UGUrKztPZVtQZV09YS5jdXJyZW50O2EuY3VycmVudD1ifXZhciBRZT17fSxMPXtjdXJyZW50OlFlfSxNPXtjdXJyZW50OiExfSxSZT1RZTtcbmZ1bmN0aW9uIFNlKGEsYil7dmFyIGM9YS50eXBlLmNvbnRleHRUeXBlcztpZighYylyZXR1cm4gUWU7dmFyIGQ9YS5zdGF0ZU5vZGU7aWYoZCYmZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PT09YilyZXR1cm4gZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dDt2YXIgZT17fSxmO2ZvcihmIGluIGMpZVtmXT1iW2ZdO2QmJihhPWEuc3RhdGVOb2RlLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD1iLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ9ZSk7cmV0dXJuIGV9ZnVuY3Rpb24gTihhKXthPWEuY2hpbGRDb250ZXh0VHlwZXM7cmV0dXJuIG51bGwhPT1hJiZ2b2lkIDAhPT1hfWZ1bmN0aW9uIFRlKGEpe0goTSxhKTtIKEwsYSl9ZnVuY3Rpb24gVWUoYSl7SChNLGEpO0goTCxhKX1cbmZ1bmN0aW9uIFZlKGEsYixjKXtpZihMLmN1cnJlbnQhPT1RZSl0aHJvdyB0KEVycm9yKDE2OCkpO0ooTCxiLGEpO0ooTSxjLGEpfWZ1bmN0aW9uIFdlKGEsYixjKXt2YXIgZD1hLnN0YXRlTm9kZTthPWIuY2hpbGRDb250ZXh0VHlwZXM7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGQuZ2V0Q2hpbGRDb250ZXh0KXJldHVybiBjO2Q9ZC5nZXRDaGlsZENvbnRleHQoKTtmb3IodmFyIGUgaW4gZClpZighKGUgaW4gYSkpdGhyb3cgdChFcnJvcigxMDgpLG9jKGIpfHxcIlVua25vd25cIixlKTtyZXR1cm4gbSh7fSxjLGQpfWZ1bmN0aW9uIFhlKGEpe3ZhciBiPWEuc3RhdGVOb2RlO2I9YiYmYi5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dHx8UWU7UmU9TC5jdXJyZW50O0ooTCxiLGEpO0ooTSxNLmN1cnJlbnQsYSk7cmV0dXJuITB9XG5mdW5jdGlvbiBZZShhLGIsYyl7dmFyIGQ9YS5zdGF0ZU5vZGU7aWYoIWQpdGhyb3cgdChFcnJvcigxNjkpKTtjPyhiPVdlKGEsYixSZSksZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dD1iLEgoTSxhKSxIKEwsYSksSihMLGIsYSkpOkgoTSxhKTtKKE0sYyxhKX1cbnZhciBaZT1xLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eSwkZT1xLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2ssYWY9cS51bnN0YWJsZV9jYW5jZWxDYWxsYmFjayxiZj1xLnVuc3RhYmxlX3Nob3VsZFlpZWxkLGNmPXEudW5zdGFibGVfcmVxdWVzdFBhaW50LGRmPXEudW5zdGFibGVfbm93LGVmPXEudW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWwsZmY9cS51bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eSxoZj1xLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5LGpmPXEudW5zdGFibGVfTm9ybWFsUHJpb3JpdHksa2Y9cS51bnN0YWJsZV9Mb3dQcmlvcml0eSxsZj1xLnVuc3RhYmxlX0lkbGVQcmlvcml0eSxtZj17fSxuZj12b2lkIDAhPT1jZj9jZjpmdW5jdGlvbigpe30sb2Y9bnVsbCxwZj1udWxsLHFmPSExLHJmPWRmKCksc2Y9MUU0PnJmP2RmOmZ1bmN0aW9uKCl7cmV0dXJuIGRmKCktcmZ9O1xuZnVuY3Rpb24gdGYoKXtzd2l0Y2goZWYoKSl7Y2FzZSBmZjpyZXR1cm4gOTk7Y2FzZSBoZjpyZXR1cm4gOTg7Y2FzZSBqZjpyZXR1cm4gOTc7Y2FzZSBrZjpyZXR1cm4gOTY7Y2FzZSBsZjpyZXR1cm4gOTU7ZGVmYXVsdDp0aHJvdyB0KEVycm9yKDMzMikpO319ZnVuY3Rpb24gdWYoYSl7c3dpdGNoKGEpe2Nhc2UgOTk6cmV0dXJuIGZmO2Nhc2UgOTg6cmV0dXJuIGhmO2Nhc2UgOTc6cmV0dXJuIGpmO2Nhc2UgOTY6cmV0dXJuIGtmO2Nhc2UgOTU6cmV0dXJuIGxmO2RlZmF1bHQ6dGhyb3cgdChFcnJvcigzMzIpKTt9fWZ1bmN0aW9uIHZmKGEsYil7YT11ZihhKTtyZXR1cm4gWmUoYSxiKX1mdW5jdGlvbiB3ZihhLGIsYyl7YT11ZihhKTtyZXR1cm4gJGUoYSxiLGMpfWZ1bmN0aW9uIHhmKGEpe251bGw9PT1vZj8ob2Y9W2FdLHBmPSRlKGZmLHlmKSk6b2YucHVzaChhKTtyZXR1cm4gbWZ9ZnVuY3Rpb24gTygpe251bGwhPT1wZiYmYWYocGYpO3lmKCl9XG5mdW5jdGlvbiB5Zigpe2lmKCFxZiYmbnVsbCE9PW9mKXtxZj0hMDt2YXIgYT0wO3RyeXt2YXIgYj1vZjt2Zig5OSxmdW5jdGlvbigpe2Zvcig7YTxiLmxlbmd0aDthKyspe3ZhciBjPWJbYV07ZG8gYz1jKCEwKTt3aGlsZShudWxsIT09Yyl9fSk7b2Y9bnVsbH1jYXRjaChjKXt0aHJvdyBudWxsIT09b2YmJihvZj1vZi5zbGljZShhKzEpKSwkZShmZixPKSxjO31maW5hbGx5e3FmPSExfX19ZnVuY3Rpb24gemYoYSxiKXtpZigxMDczNzQxODIzPT09YilyZXR1cm4gOTk7aWYoMT09PWIpcmV0dXJuIDk1O2E9MTAqKDEwNzM3NDE4MjEtYiktMTAqKDEwNzM3NDE4MjEtYSk7cmV0dXJuIDA+PWE/OTk6MjUwPj1hPzk4OjUyNTA+PWE/OTc6OTV9ZnVuY3Rpb24gQWYoYSxiKXtpZihhJiZhLmRlZmF1bHRQcm9wcyl7Yj1tKHt9LGIpO2E9YS5kZWZhdWx0UHJvcHM7Zm9yKHZhciBjIGluIGEpdm9pZCAwPT09YltjXSYmKGJbY109YVtjXSl9cmV0dXJuIGJ9XG5mdW5jdGlvbiBCZihhKXt2YXIgYj1hLl9yZXN1bHQ7c3dpdGNoKGEuX3N0YXR1cyl7Y2FzZSAxOnJldHVybiBiO2Nhc2UgMjp0aHJvdyBiO2Nhc2UgMDp0aHJvdyBiO2RlZmF1bHQ6YS5fc3RhdHVzPTA7Yj1hLl9jdG9yO2I9YigpO2IudGhlbihmdW5jdGlvbihiKXswPT09YS5fc3RhdHVzJiYoYj1iLmRlZmF1bHQsYS5fc3RhdHVzPTEsYS5fcmVzdWx0PWIpfSxmdW5jdGlvbihiKXswPT09YS5fc3RhdHVzJiYoYS5fc3RhdHVzPTIsYS5fcmVzdWx0PWIpfSk7c3dpdGNoKGEuX3N0YXR1cyl7Y2FzZSAxOnJldHVybiBhLl9yZXN1bHQ7Y2FzZSAyOnRocm93IGEuX3Jlc3VsdDt9YS5fcmVzdWx0PWI7dGhyb3cgYjt9fXZhciBDZj17Y3VycmVudDpudWxsfSxEZj1udWxsLEVmPW51bGwsRmY9bnVsbDtmdW5jdGlvbiBHZigpe0ZmPUVmPURmPW51bGx9XG5mdW5jdGlvbiBIZihhLGIpe3ZhciBjPWEudHlwZS5fY29udGV4dDtKKENmLGMuX2N1cnJlbnRWYWx1ZSxhKTtjLl9jdXJyZW50VmFsdWU9Yn1mdW5jdGlvbiBJZihhKXt2YXIgYj1DZi5jdXJyZW50O0goQ2YsYSk7YS50eXBlLl9jb250ZXh0Ll9jdXJyZW50VmFsdWU9Yn1mdW5jdGlvbiBKZihhLGIpe2Zvcig7bnVsbCE9PWE7KXt2YXIgYz1hLmFsdGVybmF0ZTtpZihhLmNoaWxkRXhwaXJhdGlvblRpbWU8YilhLmNoaWxkRXhwaXJhdGlvblRpbWU9YixudWxsIT09YyYmYy5jaGlsZEV4cGlyYXRpb25UaW1lPGImJihjLmNoaWxkRXhwaXJhdGlvblRpbWU9Yik7ZWxzZSBpZihudWxsIT09YyYmYy5jaGlsZEV4cGlyYXRpb25UaW1lPGIpYy5jaGlsZEV4cGlyYXRpb25UaW1lPWI7ZWxzZSBicmVhazthPWEucmV0dXJufX1cbmZ1bmN0aW9uIEtmKGEsYil7RGY9YTtGZj1FZj1udWxsO2E9YS5kZXBlbmRlbmNpZXM7bnVsbCE9PWEmJm51bGwhPT1hLmZpcnN0Q29udGV4dCYmKGEuZXhwaXJhdGlvblRpbWU+PWImJihMZj0hMCksYS5maXJzdENvbnRleHQ9bnVsbCl9ZnVuY3Rpb24gTWYoYSxiKXtpZihGZiE9PWEmJiExIT09YiYmMCE9PWIpe2lmKFwibnVtYmVyXCIhPT10eXBlb2YgYnx8MTA3Mzc0MTgyMz09PWIpRmY9YSxiPTEwNzM3NDE4MjM7Yj17Y29udGV4dDphLG9ic2VydmVkQml0czpiLG5leHQ6bnVsbH07aWYobnVsbD09PUVmKXtpZihudWxsPT09RGYpdGhyb3cgdChFcnJvcigzMDgpKTtFZj1iO0RmLmRlcGVuZGVuY2llcz17ZXhwaXJhdGlvblRpbWU6MCxmaXJzdENvbnRleHQ6YixyZXNwb25kZXJzOm51bGx9fWVsc2UgRWY9RWYubmV4dD1ifXJldHVybiBhLl9jdXJyZW50VmFsdWV9dmFyIE5mPSExO1xuZnVuY3Rpb24gT2YoYSl7cmV0dXJue2Jhc2VTdGF0ZTphLGZpcnN0VXBkYXRlOm51bGwsbGFzdFVwZGF0ZTpudWxsLGZpcnN0Q2FwdHVyZWRVcGRhdGU6bnVsbCxsYXN0Q2FwdHVyZWRVcGRhdGU6bnVsbCxmaXJzdEVmZmVjdDpudWxsLGxhc3RFZmZlY3Q6bnVsbCxmaXJzdENhcHR1cmVkRWZmZWN0Om51bGwsbGFzdENhcHR1cmVkRWZmZWN0Om51bGx9fWZ1bmN0aW9uIFBmKGEpe3JldHVybntiYXNlU3RhdGU6YS5iYXNlU3RhdGUsZmlyc3RVcGRhdGU6YS5maXJzdFVwZGF0ZSxsYXN0VXBkYXRlOmEubGFzdFVwZGF0ZSxmaXJzdENhcHR1cmVkVXBkYXRlOm51bGwsbGFzdENhcHR1cmVkVXBkYXRlOm51bGwsZmlyc3RFZmZlY3Q6bnVsbCxsYXN0RWZmZWN0Om51bGwsZmlyc3RDYXB0dXJlZEVmZmVjdDpudWxsLGxhc3RDYXB0dXJlZEVmZmVjdDpudWxsfX1cbmZ1bmN0aW9uIFFmKGEsYil7cmV0dXJue2V4cGlyYXRpb25UaW1lOmEsc3VzcGVuc2VDb25maWc6Yix0YWc6MCxwYXlsb2FkOm51bGwsY2FsbGJhY2s6bnVsbCxuZXh0Om51bGwsbmV4dEVmZmVjdDpudWxsfX1mdW5jdGlvbiBSZihhLGIpe251bGw9PT1hLmxhc3RVcGRhdGU/YS5maXJzdFVwZGF0ZT1hLmxhc3RVcGRhdGU9YjooYS5sYXN0VXBkYXRlLm5leHQ9YixhLmxhc3RVcGRhdGU9Yil9XG5mdW5jdGlvbiBTZihhLGIpe3ZhciBjPWEuYWx0ZXJuYXRlO2lmKG51bGw9PT1jKXt2YXIgZD1hLnVwZGF0ZVF1ZXVlO3ZhciBlPW51bGw7bnVsbD09PWQmJihkPWEudXBkYXRlUXVldWU9T2YoYS5tZW1vaXplZFN0YXRlKSl9ZWxzZSBkPWEudXBkYXRlUXVldWUsZT1jLnVwZGF0ZVF1ZXVlLG51bGw9PT1kP251bGw9PT1lPyhkPWEudXBkYXRlUXVldWU9T2YoYS5tZW1vaXplZFN0YXRlKSxlPWMudXBkYXRlUXVldWU9T2YoYy5tZW1vaXplZFN0YXRlKSk6ZD1hLnVwZGF0ZVF1ZXVlPVBmKGUpOm51bGw9PT1lJiYoZT1jLnVwZGF0ZVF1ZXVlPVBmKGQpKTtudWxsPT09ZXx8ZD09PWU/UmYoZCxiKTpudWxsPT09ZC5sYXN0VXBkYXRlfHxudWxsPT09ZS5sYXN0VXBkYXRlPyhSZihkLGIpLFJmKGUsYikpOihSZihkLGIpLGUubGFzdFVwZGF0ZT1iKX1cbmZ1bmN0aW9uIFRmKGEsYil7dmFyIGM9YS51cGRhdGVRdWV1ZTtjPW51bGw9PT1jP2EudXBkYXRlUXVldWU9T2YoYS5tZW1vaXplZFN0YXRlKTpVZihhLGMpO251bGw9PT1jLmxhc3RDYXB0dXJlZFVwZGF0ZT9jLmZpcnN0Q2FwdHVyZWRVcGRhdGU9Yy5sYXN0Q2FwdHVyZWRVcGRhdGU9YjooYy5sYXN0Q2FwdHVyZWRVcGRhdGUubmV4dD1iLGMubGFzdENhcHR1cmVkVXBkYXRlPWIpfWZ1bmN0aW9uIFVmKGEsYil7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbCE9PWMmJmI9PT1jLnVwZGF0ZVF1ZXVlJiYoYj1hLnVwZGF0ZVF1ZXVlPVBmKGIpKTtyZXR1cm4gYn1cbmZ1bmN0aW9uIFZmKGEsYixjLGQsZSxmKXtzd2l0Y2goYy50YWcpe2Nhc2UgMTpyZXR1cm4gYT1jLnBheWxvYWQsXCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YS5jYWxsKGYsZCxlKTphO2Nhc2UgMzphLmVmZmVjdFRhZz1hLmVmZmVjdFRhZyYtMjA0OXw2NDtjYXNlIDA6YT1jLnBheWxvYWQ7ZT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hLmNhbGwoZixkLGUpOmE7aWYobnVsbD09PWV8fHZvaWQgMD09PWUpYnJlYWs7cmV0dXJuIG0oe30sZCxlKTtjYXNlIDI6TmY9ITB9cmV0dXJuIGR9XG5mdW5jdGlvbiBXZihhLGIsYyxkLGUpe05mPSExO2I9VWYoYSxiKTtmb3IodmFyIGY9Yi5iYXNlU3RhdGUsaD1udWxsLGc9MCxrPWIuZmlyc3RVcGRhdGUsbD1mO251bGwhPT1rOyl7dmFyIG49ay5leHBpcmF0aW9uVGltZTtuPGU/KG51bGw9PT1oJiYoaD1rLGY9bCksZzxuJiYoZz1uKSk6KFhmKG4say5zdXNwZW5zZUNvbmZpZyksbD1WZihhLGIsayxsLGMsZCksbnVsbCE9PWsuY2FsbGJhY2smJihhLmVmZmVjdFRhZ3w9MzIsay5uZXh0RWZmZWN0PW51bGwsbnVsbD09PWIubGFzdEVmZmVjdD9iLmZpcnN0RWZmZWN0PWIubGFzdEVmZmVjdD1rOihiLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1rLGIubGFzdEVmZmVjdD1rKSkpO2s9ay5uZXh0fW49bnVsbDtmb3Ioaz1iLmZpcnN0Q2FwdHVyZWRVcGRhdGU7bnVsbCE9PWs7KXt2YXIgej1rLmV4cGlyYXRpb25UaW1lO3o8ZT8obnVsbD09PW4mJihuPWssbnVsbD09PWgmJihmPWwpKSxnPHomJihnPXopKToobD1WZihhLGIsayxsLGMsZCksbnVsbCE9PVxuay5jYWxsYmFjayYmKGEuZWZmZWN0VGFnfD0zMixrLm5leHRFZmZlY3Q9bnVsbCxudWxsPT09Yi5sYXN0Q2FwdHVyZWRFZmZlY3Q/Yi5maXJzdENhcHR1cmVkRWZmZWN0PWIubGFzdENhcHR1cmVkRWZmZWN0PWs6KGIubGFzdENhcHR1cmVkRWZmZWN0Lm5leHRFZmZlY3Q9ayxiLmxhc3RDYXB0dXJlZEVmZmVjdD1rKSkpO2s9ay5uZXh0fW51bGw9PT1oJiYoYi5sYXN0VXBkYXRlPW51bGwpO251bGw9PT1uP2IubGFzdENhcHR1cmVkVXBkYXRlPW51bGw6YS5lZmZlY3RUYWd8PTMyO251bGw9PT1oJiZudWxsPT09biYmKGY9bCk7Yi5iYXNlU3RhdGU9ZjtiLmZpcnN0VXBkYXRlPWg7Yi5maXJzdENhcHR1cmVkVXBkYXRlPW47YS5leHBpcmF0aW9uVGltZT1nO2EubWVtb2l6ZWRTdGF0ZT1sfVxuZnVuY3Rpb24gWWYoYSxiLGMpe251bGwhPT1iLmZpcnN0Q2FwdHVyZWRVcGRhdGUmJihudWxsIT09Yi5sYXN0VXBkYXRlJiYoYi5sYXN0VXBkYXRlLm5leHQ9Yi5maXJzdENhcHR1cmVkVXBkYXRlLGIubGFzdFVwZGF0ZT1iLmxhc3RDYXB0dXJlZFVwZGF0ZSksYi5maXJzdENhcHR1cmVkVXBkYXRlPWIubGFzdENhcHR1cmVkVXBkYXRlPW51bGwpO1pmKGIuZmlyc3RFZmZlY3QsYyk7Yi5maXJzdEVmZmVjdD1iLmxhc3RFZmZlY3Q9bnVsbDtaZihiLmZpcnN0Q2FwdHVyZWRFZmZlY3QsYyk7Yi5maXJzdENhcHR1cmVkRWZmZWN0PWIubGFzdENhcHR1cmVkRWZmZWN0PW51bGx9ZnVuY3Rpb24gWmYoYSxiKXtmb3IoO251bGwhPT1hOyl7dmFyIGM9YS5jYWxsYmFjaztpZihudWxsIT09Yyl7YS5jYWxsYmFjaz1udWxsO3ZhciBkPWI7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGMpdGhyb3cgdChFcnJvcigxOTEpLGMpO2MuY2FsbChkKX1hPWEubmV4dEVmZmVjdH19XG52YXIgJGY9WGIuUmVhY3RDdXJyZW50QmF0Y2hDb25maWcsYWc9KG5ldyBhYS5Db21wb25lbnQpLnJlZnM7ZnVuY3Rpb24gYmcoYSxiLGMsZCl7Yj1hLm1lbW9pemVkU3RhdGU7Yz1jKGQsYik7Yz1udWxsPT09Y3x8dm9pZCAwPT09Yz9iOm0oe30sYixjKTthLm1lbW9pemVkU3RhdGU9YztkPWEudXBkYXRlUXVldWU7bnVsbCE9PWQmJjA9PT1hLmV4cGlyYXRpb25UaW1lJiYoZC5iYXNlU3RhdGU9Yyl9XG52YXIgZmc9e2lzTW91bnRlZDpmdW5jdGlvbihhKXtyZXR1cm4oYT1hLl9yZWFjdEludGVybmFsRmliZXIpPzI9PT1sZChhKTohMX0sZW5xdWV1ZVNldFN0YXRlOmZ1bmN0aW9uKGEsYixjKXthPWEuX3JlYWN0SW50ZXJuYWxGaWJlcjt2YXIgZD1jZygpLGU9JGYuc3VzcGVuc2U7ZD1kZyhkLGEsZSk7ZT1RZihkLGUpO2UucGF5bG9hZD1iO3ZvaWQgMCE9PWMmJm51bGwhPT1jJiYoZS5jYWxsYmFjaz1jKTtTZihhLGUpO2VnKGEsZCl9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oYSxiLGMpe2E9YS5fcmVhY3RJbnRlcm5hbEZpYmVyO3ZhciBkPWNnKCksZT0kZi5zdXNwZW5zZTtkPWRnKGQsYSxlKTtlPVFmKGQsZSk7ZS50YWc9MTtlLnBheWxvYWQ9Yjt2b2lkIDAhPT1jJiZudWxsIT09YyYmKGUuY2FsbGJhY2s9Yyk7U2YoYSxlKTtlZyhhLGQpfSxlbnF1ZXVlRm9yY2VVcGRhdGU6ZnVuY3Rpb24oYSxiKXthPWEuX3JlYWN0SW50ZXJuYWxGaWJlcjt2YXIgYz1jZygpLGQ9JGYuc3VzcGVuc2U7XG5jPWRnKGMsYSxkKTtkPVFmKGMsZCk7ZC50YWc9Mjt2b2lkIDAhPT1iJiZudWxsIT09YiYmKGQuY2FsbGJhY2s9Yik7U2YoYSxkKTtlZyhhLGMpfX07ZnVuY3Rpb24gZ2coYSxiLGMsZCxlLGYsaCl7YT1hLnN0YXRlTm9kZTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5zaG91bGRDb21wb25lbnRVcGRhdGU/YS5zaG91bGRDb21wb25lbnRVcGRhdGUoZCxmLGgpOmIucHJvdG90eXBlJiZiLnByb3RvdHlwZS5pc1B1cmVSZWFjdENvbXBvbmVudD8hamQoYyxkKXx8IWpkKGUsZik6ITB9XG5mdW5jdGlvbiBoZyhhLGIsYyl7dmFyIGQ9ITEsZT1RZTt2YXIgZj1iLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWY/Zj1NZihmKTooZT1OKGIpP1JlOkwuY3VycmVudCxkPWIuY29udGV4dFR5cGVzLGY9KGQ9bnVsbCE9PWQmJnZvaWQgMCE9PWQpP1NlKGEsZSk6UWUpO2I9bmV3IGIoYyxmKTthLm1lbW9pemVkU3RhdGU9bnVsbCE9PWIuc3RhdGUmJnZvaWQgMCE9PWIuc3RhdGU/Yi5zdGF0ZTpudWxsO2IudXBkYXRlcj1mZzthLnN0YXRlTm9kZT1iO2IuX3JlYWN0SW50ZXJuYWxGaWJlcj1hO2QmJihhPWEuc3RhdGVOb2RlLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD1lLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ9Zik7cmV0dXJuIGJ9XG5mdW5jdGlvbiBpZyhhLGIsYyxkKXthPWIuc3RhdGU7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmYi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKGMsZCk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJmIuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoYyxkKTtiLnN0YXRlIT09YSYmZmcuZW5xdWV1ZVJlcGxhY2VTdGF0ZShiLGIuc3RhdGUsbnVsbCl9XG5mdW5jdGlvbiBqZyhhLGIsYyxkKXt2YXIgZT1hLnN0YXRlTm9kZTtlLnByb3BzPWM7ZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGU7ZS5yZWZzPWFnO3ZhciBmPWIuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09Zj9lLmNvbnRleHQ9TWYoZik6KGY9TihiKT9SZTpMLmN1cnJlbnQsZS5jb250ZXh0PVNlKGEsZikpO2Y9YS51cGRhdGVRdWV1ZTtudWxsIT09ZiYmKFdmKGEsZixjLGUsZCksZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGUpO2Y9Yi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7XCJmdW5jdGlvblwiPT09dHlwZW9mIGYmJihiZyhhLGIsZixjKSxlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmXCJmdW5jdGlvblwiIT09XG50eXBlb2YgZS5jb21wb25lbnRXaWxsTW91bnR8fChiPWUuc3RhdGUsXCJmdW5jdGlvblwiPT09dHlwZW9mIGUuY29tcG9uZW50V2lsbE1vdW50JiZlLmNvbXBvbmVudFdpbGxNb3VudCgpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJmUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpLGIhPT1lLnN0YXRlJiZmZy5lbnF1ZXVlUmVwbGFjZVN0YXRlKGUsZS5zdGF0ZSxudWxsKSxmPWEudXBkYXRlUXVldWUsbnVsbCE9PWYmJihXZihhLGYsYyxlLGQpLGUuc3RhdGU9YS5tZW1vaXplZFN0YXRlKSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGUuY29tcG9uZW50RGlkTW91bnQmJihhLmVmZmVjdFRhZ3w9NCl9dmFyIGtnPUFycmF5LmlzQXJyYXk7XG5mdW5jdGlvbiBsZyhhLGIsYyl7YT1jLnJlZjtpZihudWxsIT09YSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGEmJlwib2JqZWN0XCIhPT10eXBlb2YgYSl7aWYoYy5fb3duZXIpe2M9Yy5fb3duZXI7dmFyIGQ9dm9pZCAwO2lmKGMpe2lmKDEhPT1jLnRhZyl0aHJvdyB0KEVycm9yKDMwOSkpO2Q9Yy5zdGF0ZU5vZGV9aWYoIWQpdGhyb3cgdChFcnJvcigxNDcpLGEpO3ZhciBlPVwiXCIrYTtpZihudWxsIT09YiYmbnVsbCE9PWIucmVmJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5yZWYmJmIucmVmLl9zdHJpbmdSZWY9PT1lKXJldHVybiBiLnJlZjtiPWZ1bmN0aW9uKGEpe3ZhciBiPWQucmVmcztiPT09YWcmJihiPWQucmVmcz17fSk7bnVsbD09PWE/ZGVsZXRlIGJbZV06YltlXT1hfTtiLl9zdHJpbmdSZWY9ZTtyZXR1cm4gYn1pZihcInN0cmluZ1wiIT09dHlwZW9mIGEpdGhyb3cgdChFcnJvcigyODQpKTtpZighYy5fb3duZXIpdGhyb3cgdChFcnJvcigyOTApLGEpO31yZXR1cm4gYX1cbmZ1bmN0aW9uIG1nKGEsYil7aWYoXCJ0ZXh0YXJlYVwiIT09YS50eXBlKXRocm93IHQoRXJyb3IoMzEpLFwiW29iamVjdCBPYmplY3RdXCI9PT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYik/XCJvYmplY3Qgd2l0aCBrZXlzIHtcIitPYmplY3Qua2V5cyhiKS5qb2luKFwiLCBcIikrXCJ9XCI6YixcIlwiKTt9XG5mdW5jdGlvbiBuZyhhKXtmdW5jdGlvbiBiKGIsYyl7aWYoYSl7dmFyIGQ9Yi5sYXN0RWZmZWN0O251bGwhPT1kPyhkLm5leHRFZmZlY3Q9YyxiLmxhc3RFZmZlY3Q9Yyk6Yi5maXJzdEVmZmVjdD1iLmxhc3RFZmZlY3Q9YztjLm5leHRFZmZlY3Q9bnVsbDtjLmVmZmVjdFRhZz04fX1mdW5jdGlvbiBjKGMsZCl7aWYoIWEpcmV0dXJuIG51bGw7Zm9yKDtudWxsIT09ZDspYihjLGQpLGQ9ZC5zaWJsaW5nO3JldHVybiBudWxsfWZ1bmN0aW9uIGQoYSxiKXtmb3IoYT1uZXcgTWFwO251bGwhPT1iOyludWxsIT09Yi5rZXk/YS5zZXQoYi5rZXksYik6YS5zZXQoYi5pbmRleCxiKSxiPWIuc2libGluZztyZXR1cm4gYX1mdW5jdGlvbiBlKGEsYixjKXthPW9nKGEsYixjKTthLmluZGV4PTA7YS5zaWJsaW5nPW51bGw7cmV0dXJuIGF9ZnVuY3Rpb24gZihiLGMsZCl7Yi5pbmRleD1kO2lmKCFhKXJldHVybiBjO2Q9Yi5hbHRlcm5hdGU7aWYobnVsbCE9PWQpcmV0dXJuIGQ9ZC5pbmRleCxkPGM/KGIuZWZmZWN0VGFnPVxuMixjKTpkO2IuZWZmZWN0VGFnPTI7cmV0dXJuIGN9ZnVuY3Rpb24gaChiKXthJiZudWxsPT09Yi5hbHRlcm5hdGUmJihiLmVmZmVjdFRhZz0yKTtyZXR1cm4gYn1mdW5jdGlvbiBnKGEsYixjLGQpe2lmKG51bGw9PT1ifHw2IT09Yi50YWcpcmV0dXJuIGI9cGcoYyxhLm1vZGUsZCksYi5yZXR1cm49YSxiO2I9ZShiLGMsZCk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBrKGEsYixjLGQpe2lmKG51bGwhPT1iJiZiLmVsZW1lbnRUeXBlPT09Yy50eXBlKXJldHVybiBkPWUoYixjLnByb3BzLGQpLGQucmVmPWxnKGEsYixjKSxkLnJldHVybj1hLGQ7ZD1xZyhjLnR5cGUsYy5rZXksYy5wcm9wcyxudWxsLGEubW9kZSxkKTtkLnJlZj1sZyhhLGIsYyk7ZC5yZXR1cm49YTtyZXR1cm4gZH1mdW5jdGlvbiBsKGEsYixjLGQpe2lmKG51bGw9PT1ifHw0IT09Yi50YWd8fGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8hPT1jLmNvbnRhaW5lckluZm98fGIuc3RhdGVOb2RlLmltcGxlbWVudGF0aW9uIT09XG5jLmltcGxlbWVudGF0aW9uKXJldHVybiBiPXJnKGMsYS5tb2RlLGQpLGIucmV0dXJuPWEsYjtiPWUoYixjLmNoaWxkcmVufHxbXSxkKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIG4oYSxiLGMsZCxmKXtpZihudWxsPT09Ynx8NyE9PWIudGFnKXJldHVybiBiPXNnKGMsYS5tb2RlLGQsZiksYi5yZXR1cm49YSxiO2I9ZShiLGMsZCk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiB6KGEsYixjKXtpZihcInN0cmluZ1wiPT09dHlwZW9mIGJ8fFwibnVtYmVyXCI9PT10eXBlb2YgYilyZXR1cm4gYj1wZyhcIlwiK2IsYS5tb2RlLGMpLGIucmV0dXJuPWEsYjtpZihcIm9iamVjdFwiPT09dHlwZW9mIGImJm51bGwhPT1iKXtzd2l0Y2goYi4kJHR5cGVvZil7Y2FzZSBaYjpyZXR1cm4gYz1xZyhiLnR5cGUsYi5rZXksYi5wcm9wcyxudWxsLGEubW9kZSxjKSxjLnJlZj1sZyhhLG51bGwsYiksYy5yZXR1cm49YSxjO2Nhc2UgJGI6cmV0dXJuIGI9cmcoYixhLm1vZGUsYyksYi5yZXR1cm49YSxifWlmKGtnKGIpfHxcbm1jKGIpKXJldHVybiBiPXNnKGIsYS5tb2RlLGMsbnVsbCksYi5yZXR1cm49YSxiO21nKGEsYil9cmV0dXJuIG51bGx9ZnVuY3Rpb24geChhLGIsYyxkKXt2YXIgZT1udWxsIT09Yj9iLmtleTpudWxsO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgY3x8XCJudW1iZXJcIj09PXR5cGVvZiBjKXJldHVybiBudWxsIT09ZT9udWxsOmcoYSxiLFwiXCIrYyxkKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGMmJm51bGwhPT1jKXtzd2l0Y2goYy4kJHR5cGVvZil7Y2FzZSBaYjpyZXR1cm4gYy5rZXk9PT1lP2MudHlwZT09PWFjP24oYSxiLGMucHJvcHMuY2hpbGRyZW4sZCxlKTprKGEsYixjLGQpOm51bGw7Y2FzZSAkYjpyZXR1cm4gYy5rZXk9PT1lP2woYSxiLGMsZCk6bnVsbH1pZihrZyhjKXx8bWMoYykpcmV0dXJuIG51bGwhPT1lP251bGw6bihhLGIsYyxkLG51bGwpO21nKGEsYyl9cmV0dXJuIG51bGx9ZnVuY3Rpb24gdihhLGIsYyxkLGUpe2lmKFwic3RyaW5nXCI9PT10eXBlb2YgZHx8XCJudW1iZXJcIj09PXR5cGVvZiBkKXJldHVybiBhPVxuYS5nZXQoYyl8fG51bGwsZyhiLGEsXCJcIitkLGUpO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgZCYmbnVsbCE9PWQpe3N3aXRjaChkLiQkdHlwZW9mKXtjYXNlIFpiOnJldHVybiBhPWEuZ2V0KG51bGw9PT1kLmtleT9jOmQua2V5KXx8bnVsbCxkLnR5cGU9PT1hYz9uKGIsYSxkLnByb3BzLmNoaWxkcmVuLGUsZC5rZXkpOmsoYixhLGQsZSk7Y2FzZSAkYjpyZXR1cm4gYT1hLmdldChudWxsPT09ZC5rZXk/YzpkLmtleSl8fG51bGwsbChiLGEsZCxlKX1pZihrZyhkKXx8bWMoZCkpcmV0dXJuIGE9YS5nZXQoYyl8fG51bGwsbihiLGEsZCxlLG51bGwpO21nKGIsZCl9cmV0dXJuIG51bGx9ZnVuY3Rpb24gcmIoZSxoLGcsayl7Zm9yKHZhciBsPW51bGwsdT1udWxsLG49aCx3PWg9MCxDPW51bGw7bnVsbCE9PW4mJnc8Zy5sZW5ndGg7dysrKXtuLmluZGV4Pnc/KEM9bixuPW51bGwpOkM9bi5zaWJsaW5nO3ZhciBwPXgoZSxuLGdbd10sayk7aWYobnVsbD09PXApe251bGw9PT1uJiYobj1DKTticmVha31hJiZcbm4mJm51bGw9PT1wLmFsdGVybmF0ZSYmYihlLG4pO2g9ZihwLGgsdyk7bnVsbD09PXU/bD1wOnUuc2libGluZz1wO3U9cDtuPUN9aWYodz09PWcubGVuZ3RoKXJldHVybiBjKGUsbiksbDtpZihudWxsPT09bil7Zm9yKDt3PGcubGVuZ3RoO3crKyluPXooZSxnW3ddLGspLG51bGwhPT1uJiYoaD1mKG4saCx3KSxudWxsPT09dT9sPW46dS5zaWJsaW5nPW4sdT1uKTtyZXR1cm4gbH1mb3Iobj1kKGUsbik7dzxnLmxlbmd0aDt3KyspQz12KG4sZSx3LGdbd10sayksbnVsbCE9PUMmJihhJiZudWxsIT09Qy5hbHRlcm5hdGUmJm4uZGVsZXRlKG51bGw9PT1DLmtleT93OkMua2V5KSxoPWYoQyxoLHcpLG51bGw9PT11P2w9Qzp1LnNpYmxpbmc9Qyx1PUMpO2EmJm4uZm9yRWFjaChmdW5jdGlvbihhKXtyZXR1cm4gYihlLGEpfSk7cmV0dXJuIGx9ZnVuY3Rpb24gQmUoZSxoLGcsayl7dmFyIGw9bWMoZyk7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGwpdGhyb3cgdChFcnJvcigxNTApKTtnPWwuY2FsbChnKTtcbmlmKG51bGw9PWcpdGhyb3cgdChFcnJvcigxNTEpKTtmb3IodmFyIG49bD1udWxsLHU9aCx3PWg9MCxDPW51bGwscD1nLm5leHQoKTtudWxsIT09dSYmIXAuZG9uZTt3KysscD1nLm5leHQoKSl7dS5pbmRleD53PyhDPXUsdT1udWxsKTpDPXUuc2libGluZzt2YXIgcj14KGUsdSxwLnZhbHVlLGspO2lmKG51bGw9PT1yKXtudWxsPT09dSYmKHU9Qyk7YnJlYWt9YSYmdSYmbnVsbD09PXIuYWx0ZXJuYXRlJiZiKGUsdSk7aD1mKHIsaCx3KTtudWxsPT09bj9sPXI6bi5zaWJsaW5nPXI7bj1yO3U9Q31pZihwLmRvbmUpcmV0dXJuIGMoZSx1KSxsO2lmKG51bGw9PT11KXtmb3IoOyFwLmRvbmU7dysrLHA9Zy5uZXh0KCkpcD16KGUscC52YWx1ZSxrKSxudWxsIT09cCYmKGg9ZihwLGgsdyksbnVsbD09PW4/bD1wOm4uc2libGluZz1wLG49cCk7cmV0dXJuIGx9Zm9yKHU9ZChlLHUpOyFwLmRvbmU7dysrLHA9Zy5uZXh0KCkpcD12KHUsZSx3LHAudmFsdWUsayksbnVsbCE9PXAmJihhJiZudWxsIT09XG5wLmFsdGVybmF0ZSYmdS5kZWxldGUobnVsbD09PXAua2V5P3c6cC5rZXkpLGg9ZihwLGgsdyksbnVsbD09PW4/bD1wOm4uc2libGluZz1wLG49cCk7YSYmdS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3JldHVybiBiKGUsYSl9KTtyZXR1cm4gbH1yZXR1cm4gZnVuY3Rpb24oYSxkLGYsZyl7dmFyIGs9XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09ZiYmZi50eXBlPT09YWMmJm51bGw9PT1mLmtleTtrJiYoZj1mLnByb3BzLmNoaWxkcmVuKTt2YXIgbD1cIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mO2lmKGwpc3dpdGNoKGYuJCR0eXBlb2Ype2Nhc2UgWmI6YTp7bD1mLmtleTtmb3Ioaz1kO251bGwhPT1rOyl7aWYoay5rZXk9PT1sKXtpZig3PT09ay50YWc/Zi50eXBlPT09YWM6ay5lbGVtZW50VHlwZT09PWYudHlwZSl7YyhhLGsuc2libGluZyk7ZD1lKGssZi50eXBlPT09YWM/Zi5wcm9wcy5jaGlsZHJlbjpmLnByb3BzLGcpO2QucmVmPWxnKGEsayxmKTtkLnJldHVybj1hO2E9ZDticmVhayBhfWMoYSxcbmspO2JyZWFrfWVsc2UgYihhLGspO2s9ay5zaWJsaW5nfWYudHlwZT09PWFjPyhkPXNnKGYucHJvcHMuY2hpbGRyZW4sYS5tb2RlLGcsZi5rZXkpLGQucmV0dXJuPWEsYT1kKTooZz1xZyhmLnR5cGUsZi5rZXksZi5wcm9wcyxudWxsLGEubW9kZSxnKSxnLnJlZj1sZyhhLGQsZiksZy5yZXR1cm49YSxhPWcpfXJldHVybiBoKGEpO2Nhc2UgJGI6YTp7Zm9yKGs9Zi5rZXk7bnVsbCE9PWQ7KXtpZihkLmtleT09PWspe2lmKDQ9PT1kLnRhZyYmZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbz09PWYuY29udGFpbmVySW5mbyYmZC5zdGF0ZU5vZGUuaW1wbGVtZW50YXRpb249PT1mLmltcGxlbWVudGF0aW9uKXtjKGEsZC5zaWJsaW5nKTtkPWUoZCxmLmNoaWxkcmVufHxbXSxnKTtkLnJldHVybj1hO2E9ZDticmVhayBhfWMoYSxkKTticmVha31lbHNlIGIoYSxkKTtkPWQuc2libGluZ31kPXJnKGYsYS5tb2RlLGcpO2QucmV0dXJuPWE7YT1kfXJldHVybiBoKGEpfWlmKFwic3RyaW5nXCI9PT10eXBlb2YgZnx8XG5cIm51bWJlclwiPT09dHlwZW9mIGYpcmV0dXJuIGY9XCJcIitmLG51bGwhPT1kJiY2PT09ZC50YWc/KGMoYSxkLnNpYmxpbmcpLGQ9ZShkLGYsZyksZC5yZXR1cm49YSxhPWQpOihjKGEsZCksZD1wZyhmLGEubW9kZSxnKSxkLnJldHVybj1hLGE9ZCksaChhKTtpZihrZyhmKSlyZXR1cm4gcmIoYSxkLGYsZyk7aWYobWMoZikpcmV0dXJuIEJlKGEsZCxmLGcpO2wmJm1nKGEsZik7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBmJiYhaylzd2l0Y2goYS50YWcpe2Nhc2UgMTpjYXNlIDA6dGhyb3cgYT1hLnR5cGUsdChFcnJvcigxNTIpLGEuZGlzcGxheU5hbWV8fGEubmFtZXx8XCJDb21wb25lbnRcIik7fXJldHVybiBjKGEsZCl9fXZhciB0Zz1uZyghMCksdWc9bmcoITEpLHZnPXt9LHdnPXtjdXJyZW50OnZnfSx4Zz17Y3VycmVudDp2Z30seWc9e2N1cnJlbnQ6dmd9O2Z1bmN0aW9uIHpnKGEpe2lmKGE9PT12Zyl0aHJvdyB0KEVycm9yKDE3NCkpO3JldHVybiBhfVxuZnVuY3Rpb24gQWcoYSxiKXtKKHlnLGIsYSk7Sih4ZyxhLGEpO0ood2csdmcsYSk7dmFyIGM9Yi5ub2RlVHlwZTtzd2l0Y2goYyl7Y2FzZSA5OmNhc2UgMTE6Yj0oYj1iLmRvY3VtZW50RWxlbWVudCk/Yi5uYW1lc3BhY2VVUkk6dGUobnVsbCxcIlwiKTticmVhaztkZWZhdWx0OmM9OD09PWM/Yi5wYXJlbnROb2RlOmIsYj1jLm5hbWVzcGFjZVVSSXx8bnVsbCxjPWMudGFnTmFtZSxiPXRlKGIsYyl9SCh3ZyxhKTtKKHdnLGIsYSl9ZnVuY3Rpb24gQmcoYSl7SCh3ZyxhKTtIKHhnLGEpO0goeWcsYSl9ZnVuY3Rpb24gQ2coYSl7emcoeWcuY3VycmVudCk7dmFyIGI9emcod2cuY3VycmVudCk7dmFyIGM9dGUoYixhLnR5cGUpO2IhPT1jJiYoSih4ZyxhLGEpLEood2csYyxhKSl9ZnVuY3Rpb24gRGcoYSl7eGcuY3VycmVudD09PWEmJihIKHdnLGEpLEgoeGcsYSkpfXZhciBFZz0xLEZnPTEsR2c9MixQPXtjdXJyZW50OjB9O1xuZnVuY3Rpb24gSGcoYSl7Zm9yKHZhciBiPWE7bnVsbCE9PWI7KXtpZigxMz09PWIudGFnKXtpZihudWxsIT09Yi5tZW1vaXplZFN0YXRlKXJldHVybiBifWVsc2UgaWYoMTk9PT1iLnRhZyYmdm9pZCAwIT09Yi5tZW1vaXplZFByb3BzLnJldmVhbE9yZGVyKXtpZigwIT09KGIuZWZmZWN0VGFnJjY0KSlyZXR1cm4gYn1lbHNlIGlmKG51bGwhPT1iLmNoaWxkKXtiLmNoaWxkLnJldHVybj1iO2I9Yi5jaGlsZDtjb250aW51ZX1pZihiPT09YSlicmVhaztmb3IoO251bGw9PT1iLnNpYmxpbmc7KXtpZihudWxsPT09Yi5yZXR1cm58fGIucmV0dXJuPT09YSlyZXR1cm4gbnVsbDtiPWIucmV0dXJufWIuc2libGluZy5yZXR1cm49Yi5yZXR1cm47Yj1iLnNpYmxpbmd9cmV0dXJuIG51bGx9XG52YXIgSWc9MCxKZz0yLEtnPTQsTGc9OCxNZz0xNixOZz0zMixPZz02NCxQZz0xMjgsUWc9WGIuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcixSZz0wLFNnPW51bGwsUT1udWxsLFRnPW51bGwsVWc9bnVsbCxSPW51bGwsVmc9bnVsbCxXZz0wLFhnPW51bGwsWWc9MCxaZz0hMSwkZz1udWxsLGFoPTA7ZnVuY3Rpb24gYmgoKXt0aHJvdyB0KEVycm9yKDMyMSkpO31mdW5jdGlvbiBjaChhLGIpe2lmKG51bGw9PT1iKXJldHVybiExO2Zvcih2YXIgYz0wO2M8Yi5sZW5ndGgmJmM8YS5sZW5ndGg7YysrKWlmKCFoZChhW2NdLGJbY10pKXJldHVybiExO3JldHVybiEwfVxuZnVuY3Rpb24gZGgoYSxiLGMsZCxlLGYpe1JnPWY7U2c9YjtUZz1udWxsIT09YT9hLm1lbW9pemVkU3RhdGU6bnVsbDtRZy5jdXJyZW50PW51bGw9PT1UZz9laDpmaDtiPWMoZCxlKTtpZihaZyl7ZG8gWmc9ITEsYWgrPTEsVGc9bnVsbCE9PWE/YS5tZW1vaXplZFN0YXRlOm51bGwsVmc9VWcsWGc9Uj1RPW51bGwsUWcuY3VycmVudD1maCxiPWMoZCxlKTt3aGlsZShaZyk7JGc9bnVsbDthaD0wfVFnLmN1cnJlbnQ9aGg7YT1TZzthLm1lbW9pemVkU3RhdGU9VWc7YS5leHBpcmF0aW9uVGltZT1XZzthLnVwZGF0ZVF1ZXVlPVhnO2EuZWZmZWN0VGFnfD1ZZzthPW51bGwhPT1RJiZudWxsIT09US5uZXh0O1JnPTA7Vmc9Uj1VZz1UZz1RPVNnPW51bGw7V2c9MDtYZz1udWxsO1lnPTA7aWYoYSl0aHJvdyB0KEVycm9yKDMwMCkpO3JldHVybiBifVxuZnVuY3Rpb24gaWgoKXtRZy5jdXJyZW50PWhoO1JnPTA7Vmc9Uj1VZz1UZz1RPVNnPW51bGw7V2c9MDtYZz1udWxsO1lnPTA7Wmc9ITE7JGc9bnVsbDthaD0wfWZ1bmN0aW9uIGpoKCl7dmFyIGE9e21lbW9pemVkU3RhdGU6bnVsbCxiYXNlU3RhdGU6bnVsbCxxdWV1ZTpudWxsLGJhc2VVcGRhdGU6bnVsbCxuZXh0Om51bGx9O251bGw9PT1SP1VnPVI9YTpSPVIubmV4dD1hO3JldHVybiBSfWZ1bmN0aW9uIGtoKCl7aWYobnVsbCE9PVZnKVI9VmcsVmc9Ui5uZXh0LFE9VGcsVGc9bnVsbCE9PVE/US5uZXh0Om51bGw7ZWxzZXtpZihudWxsPT09VGcpdGhyb3cgdChFcnJvcigzMTApKTtRPVRnO3ZhciBhPXttZW1vaXplZFN0YXRlOlEubWVtb2l6ZWRTdGF0ZSxiYXNlU3RhdGU6US5iYXNlU3RhdGUscXVldWU6US5xdWV1ZSxiYXNlVXBkYXRlOlEuYmFzZVVwZGF0ZSxuZXh0Om51bGx9O1I9bnVsbD09PVI/VWc9YTpSLm5leHQ9YTtUZz1RLm5leHR9cmV0dXJuIFJ9XG5mdW5jdGlvbiBsaChhLGIpe3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBiP2IoYSk6Yn1cbmZ1bmN0aW9uIG1oKGEpe3ZhciBiPWtoKCksYz1iLnF1ZXVlO2lmKG51bGw9PT1jKXRocm93IHQoRXJyb3IoMzExKSk7Yy5sYXN0UmVuZGVyZWRSZWR1Y2VyPWE7aWYoMDxhaCl7dmFyIGQ9Yy5kaXNwYXRjaDtpZihudWxsIT09JGcpe3ZhciBlPSRnLmdldChjKTtpZih2b2lkIDAhPT1lKXskZy5kZWxldGUoYyk7dmFyIGY9Yi5tZW1vaXplZFN0YXRlO2RvIGY9YShmLGUuYWN0aW9uKSxlPWUubmV4dDt3aGlsZShudWxsIT09ZSk7aGQoZixiLm1lbW9pemVkU3RhdGUpfHwoTGY9ITApO2IubWVtb2l6ZWRTdGF0ZT1mO2IuYmFzZVVwZGF0ZT09PWMubGFzdCYmKGIuYmFzZVN0YXRlPWYpO2MubGFzdFJlbmRlcmVkU3RhdGU9ZjtyZXR1cm5bZixkXX19cmV0dXJuW2IubWVtb2l6ZWRTdGF0ZSxkXX1kPWMubGFzdDt2YXIgaD1iLmJhc2VVcGRhdGU7Zj1iLmJhc2VTdGF0ZTtudWxsIT09aD8obnVsbCE9PWQmJihkLm5leHQ9bnVsbCksZD1oLm5leHQpOmQ9bnVsbCE9PWQ/ZC5uZXh0Om51bGw7aWYobnVsbCE9PVxuZCl7dmFyIGc9ZT1udWxsLGs9ZCxsPSExO2Rve3ZhciBuPWsuZXhwaXJhdGlvblRpbWU7bjxSZz8obHx8KGw9ITAsZz1oLGU9Ziksbj5XZyYmKFdnPW4pKTooWGYobixrLnN1c3BlbnNlQ29uZmlnKSxmPWsuZWFnZXJSZWR1Y2VyPT09YT9rLmVhZ2VyU3RhdGU6YShmLGsuYWN0aW9uKSk7aD1rO2s9ay5uZXh0fXdoaWxlKG51bGwhPT1rJiZrIT09ZCk7bHx8KGc9aCxlPWYpO2hkKGYsYi5tZW1vaXplZFN0YXRlKXx8KExmPSEwKTtiLm1lbW9pemVkU3RhdGU9ZjtiLmJhc2VVcGRhdGU9ZztiLmJhc2VTdGF0ZT1lO2MubGFzdFJlbmRlcmVkU3RhdGU9Zn1yZXR1cm5bYi5tZW1vaXplZFN0YXRlLGMuZGlzcGF0Y2hdfVxuZnVuY3Rpb24gbmgoYSxiLGMsZCl7YT17dGFnOmEsY3JlYXRlOmIsZGVzdHJveTpjLGRlcHM6ZCxuZXh0Om51bGx9O251bGw9PT1YZz8oWGc9e2xhc3RFZmZlY3Q6bnVsbH0sWGcubGFzdEVmZmVjdD1hLm5leHQ9YSk6KGI9WGcubGFzdEVmZmVjdCxudWxsPT09Yj9YZy5sYXN0RWZmZWN0PWEubmV4dD1hOihjPWIubmV4dCxiLm5leHQ9YSxhLm5leHQ9YyxYZy5sYXN0RWZmZWN0PWEpKTtyZXR1cm4gYX1mdW5jdGlvbiBvaChhLGIsYyxkKXt2YXIgZT1qaCgpO1lnfD1hO2UubWVtb2l6ZWRTdGF0ZT1uaChiLGMsdm9pZCAwLHZvaWQgMD09PWQ/bnVsbDpkKX1cbmZ1bmN0aW9uIHBoKGEsYixjLGQpe3ZhciBlPWtoKCk7ZD12b2lkIDA9PT1kP251bGw6ZDt2YXIgZj12b2lkIDA7aWYobnVsbCE9PVEpe3ZhciBoPVEubWVtb2l6ZWRTdGF0ZTtmPWguZGVzdHJveTtpZihudWxsIT09ZCYmY2goZCxoLmRlcHMpKXtuaChJZyxjLGYsZCk7cmV0dXJufX1ZZ3w9YTtlLm1lbW9pemVkU3RhdGU9bmgoYixjLGYsZCl9ZnVuY3Rpb24gcWgoYSxiKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYilyZXR1cm4gYT1hKCksYihhKSxmdW5jdGlvbigpe2IobnVsbCl9O2lmKG51bGwhPT1iJiZ2b2lkIDAhPT1iKXJldHVybiBhPWEoKSxiLmN1cnJlbnQ9YSxmdW5jdGlvbigpe2IuY3VycmVudD1udWxsfX1mdW5jdGlvbiByaCgpe31cbmZ1bmN0aW9uIHNoKGEsYixjKXtpZighKDI1PmFoKSl0aHJvdyB0KEVycm9yKDMwMSkpO3ZhciBkPWEuYWx0ZXJuYXRlO2lmKGE9PT1TZ3x8bnVsbCE9PWQmJmQ9PT1TZylpZihaZz0hMCxhPXtleHBpcmF0aW9uVGltZTpSZyxzdXNwZW5zZUNvbmZpZzpudWxsLGFjdGlvbjpjLGVhZ2VyUmVkdWNlcjpudWxsLGVhZ2VyU3RhdGU6bnVsbCxuZXh0Om51bGx9LG51bGw9PT0kZyYmKCRnPW5ldyBNYXApLGM9JGcuZ2V0KGIpLHZvaWQgMD09PWMpJGcuc2V0KGIsYSk7ZWxzZXtmb3IoYj1jO251bGwhPT1iLm5leHQ7KWI9Yi5uZXh0O2IubmV4dD1hfWVsc2V7dmFyIGU9Y2coKSxmPSRmLnN1c3BlbnNlO2U9ZGcoZSxhLGYpO2Y9e2V4cGlyYXRpb25UaW1lOmUsc3VzcGVuc2VDb25maWc6ZixhY3Rpb246YyxlYWdlclJlZHVjZXI6bnVsbCxlYWdlclN0YXRlOm51bGwsbmV4dDpudWxsfTt2YXIgaD1iLmxhc3Q7aWYobnVsbD09PWgpZi5uZXh0PWY7ZWxzZXt2YXIgZz1oLm5leHQ7bnVsbCE9PWcmJlxuKGYubmV4dD1nKTtoLm5leHQ9Zn1iLmxhc3Q9ZjtpZigwPT09YS5leHBpcmF0aW9uVGltZSYmKG51bGw9PT1kfHwwPT09ZC5leHBpcmF0aW9uVGltZSkmJihkPWIubGFzdFJlbmRlcmVkUmVkdWNlcixudWxsIT09ZCkpdHJ5e3ZhciBrPWIubGFzdFJlbmRlcmVkU3RhdGUsbD1kKGssYyk7Zi5lYWdlclJlZHVjZXI9ZDtmLmVhZ2VyU3RhdGU9bDtpZihoZChsLGspKXJldHVybn1jYXRjaChuKXt9ZmluYWxseXt9ZWcoYSxlKX19XG52YXIgaGg9e3JlYWRDb250ZXh0Ok1mLHVzZUNhbGxiYWNrOmJoLHVzZUNvbnRleHQ6YmgsdXNlRWZmZWN0OmJoLHVzZUltcGVyYXRpdmVIYW5kbGU6YmgsdXNlTGF5b3V0RWZmZWN0OmJoLHVzZU1lbW86YmgsdXNlUmVkdWNlcjpiaCx1c2VSZWY6YmgsdXNlU3RhdGU6YmgsdXNlRGVidWdWYWx1ZTpiaCx1c2VSZXNwb25kZXI6Ymh9LGVoPXtyZWFkQ29udGV4dDpNZix1c2VDYWxsYmFjazpmdW5jdGlvbihhLGIpe2poKCkubWVtb2l6ZWRTdGF0ZT1bYSx2b2lkIDA9PT1iP251bGw6Yl07cmV0dXJuIGF9LHVzZUNvbnRleHQ6TWYsdXNlRWZmZWN0OmZ1bmN0aW9uKGEsYil7cmV0dXJuIG9oKDUxNixQZ3xPZyxhLGIpfSx1c2VJbXBlcmF0aXZlSGFuZGxlOmZ1bmN0aW9uKGEsYixjKXtjPW51bGwhPT1jJiZ2b2lkIDAhPT1jP2MuY29uY2F0KFthXSk6bnVsbDtyZXR1cm4gb2goNCxLZ3xOZyxxaC5iaW5kKG51bGwsYixhKSxjKX0sdXNlTGF5b3V0RWZmZWN0OmZ1bmN0aW9uKGEsYil7cmV0dXJuIG9oKDQsXG5LZ3xOZyxhLGIpfSx1c2VNZW1vOmZ1bmN0aW9uKGEsYil7dmFyIGM9amgoKTtiPXZvaWQgMD09PWI/bnVsbDpiO2E9YSgpO2MubWVtb2l6ZWRTdGF0ZT1bYSxiXTtyZXR1cm4gYX0sdXNlUmVkdWNlcjpmdW5jdGlvbihhLGIsYyl7dmFyIGQ9amgoKTtiPXZvaWQgMCE9PWM/YyhiKTpiO2QubWVtb2l6ZWRTdGF0ZT1kLmJhc2VTdGF0ZT1iO2E9ZC5xdWV1ZT17bGFzdDpudWxsLGRpc3BhdGNoOm51bGwsbGFzdFJlbmRlcmVkUmVkdWNlcjphLGxhc3RSZW5kZXJlZFN0YXRlOmJ9O2E9YS5kaXNwYXRjaD1zaC5iaW5kKG51bGwsU2csYSk7cmV0dXJuW2QubWVtb2l6ZWRTdGF0ZSxhXX0sdXNlUmVmOmZ1bmN0aW9uKGEpe3ZhciBiPWpoKCk7YT17Y3VycmVudDphfTtyZXR1cm4gYi5tZW1vaXplZFN0YXRlPWF9LHVzZVN0YXRlOmZ1bmN0aW9uKGEpe3ZhciBiPWpoKCk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGEmJihhPWEoKSk7Yi5tZW1vaXplZFN0YXRlPWIuYmFzZVN0YXRlPWE7YT1iLnF1ZXVlPVxue2xhc3Q6bnVsbCxkaXNwYXRjaDpudWxsLGxhc3RSZW5kZXJlZFJlZHVjZXI6bGgsbGFzdFJlbmRlcmVkU3RhdGU6YX07YT1hLmRpc3BhdGNoPXNoLmJpbmQobnVsbCxTZyxhKTtyZXR1cm5bYi5tZW1vaXplZFN0YXRlLGFdfSx1c2VEZWJ1Z1ZhbHVlOnJoLHVzZVJlc3BvbmRlcjprZH0sZmg9e3JlYWRDb250ZXh0Ok1mLHVzZUNhbGxiYWNrOmZ1bmN0aW9uKGEsYil7dmFyIGM9a2goKTtiPXZvaWQgMD09PWI/bnVsbDpiO3ZhciBkPWMubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZCYmbnVsbCE9PWImJmNoKGIsZFsxXSkpcmV0dXJuIGRbMF07Yy5tZW1vaXplZFN0YXRlPVthLGJdO3JldHVybiBhfSx1c2VDb250ZXh0Ok1mLHVzZUVmZmVjdDpmdW5jdGlvbihhLGIpe3JldHVybiBwaCg1MTYsUGd8T2csYSxiKX0sdXNlSW1wZXJhdGl2ZUhhbmRsZTpmdW5jdGlvbihhLGIsYyl7Yz1udWxsIT09YyYmdm9pZCAwIT09Yz9jLmNvbmNhdChbYV0pOm51bGw7cmV0dXJuIHBoKDQsS2d8TmcscWguYmluZChudWxsLFxuYixhKSxjKX0sdXNlTGF5b3V0RWZmZWN0OmZ1bmN0aW9uKGEsYil7cmV0dXJuIHBoKDQsS2d8TmcsYSxiKX0sdXNlTWVtbzpmdW5jdGlvbihhLGIpe3ZhciBjPWtoKCk7Yj12b2lkIDA9PT1iP251bGw6Yjt2YXIgZD1jLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWQmJm51bGwhPT1iJiZjaChiLGRbMV0pKXJldHVybiBkWzBdO2E9YSgpO2MubWVtb2l6ZWRTdGF0ZT1bYSxiXTtyZXR1cm4gYX0sdXNlUmVkdWNlcjptaCx1c2VSZWY6ZnVuY3Rpb24oKXtyZXR1cm4ga2goKS5tZW1vaXplZFN0YXRlfSx1c2VTdGF0ZTpmdW5jdGlvbihhKXtyZXR1cm4gbWgobGgsYSl9LHVzZURlYnVnVmFsdWU6cmgsdXNlUmVzcG9uZGVyOmtkfSx0aD1udWxsLHVoPW51bGwsdmg9ITE7XG5mdW5jdGlvbiB3aChhLGIpe3ZhciBjPXhoKDUsbnVsbCxudWxsLDApO2MuZWxlbWVudFR5cGU9XCJERUxFVEVEXCI7Yy50eXBlPVwiREVMRVRFRFwiO2Muc3RhdGVOb2RlPWI7Yy5yZXR1cm49YTtjLmVmZmVjdFRhZz04O251bGwhPT1hLmxhc3RFZmZlY3Q/KGEubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWMsYS5sYXN0RWZmZWN0PWMpOmEuZmlyc3RFZmZlY3Q9YS5sYXN0RWZmZWN0PWN9ZnVuY3Rpb24geWgoYSxiKXtzd2l0Y2goYS50YWcpe2Nhc2UgNTp2YXIgYz1hLnR5cGU7Yj0xIT09Yi5ub2RlVHlwZXx8Yy50b0xvd2VyQ2FzZSgpIT09Yi5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpP251bGw6YjtyZXR1cm4gbnVsbCE9PWI/KGEuc3RhdGVOb2RlPWIsITApOiExO2Nhc2UgNjpyZXR1cm4gYj1cIlwiPT09YS5wZW5kaW5nUHJvcHN8fDMhPT1iLm5vZGVUeXBlP251bGw6YixudWxsIT09Yj8oYS5zdGF0ZU5vZGU9YiwhMCk6ITE7Y2FzZSAxMzpyZXR1cm4hMTtkZWZhdWx0OnJldHVybiExfX1cbmZ1bmN0aW9uIHpoKGEpe2lmKHZoKXt2YXIgYj11aDtpZihiKXt2YXIgYz1iO2lmKCF5aChhLGIpKXtiPU5lKGMubmV4dFNpYmxpbmcpO2lmKCFifHwheWgoYSxiKSl7YS5lZmZlY3RUYWd8PTI7dmg9ITE7dGg9YTtyZXR1cm59d2godGgsYyl9dGg9YTt1aD1OZShiLmZpcnN0Q2hpbGQpfWVsc2UgYS5lZmZlY3RUYWd8PTIsdmg9ITEsdGg9YX19ZnVuY3Rpb24gQWgoYSl7Zm9yKGE9YS5yZXR1cm47bnVsbCE9PWEmJjUhPT1hLnRhZyYmMyE9PWEudGFnJiYxOCE9PWEudGFnOylhPWEucmV0dXJuO3RoPWF9XG5mdW5jdGlvbiBCaChhKXtpZihhIT09dGgpcmV0dXJuITE7aWYoIXZoKXJldHVybiBBaChhKSx2aD0hMCwhMTt2YXIgYj1hLnR5cGU7aWYoNSE9PWEudGFnfHxcImhlYWRcIiE9PWImJlwiYm9keVwiIT09YiYmIUtlKGIsYS5tZW1vaXplZFByb3BzKSlmb3IoYj11aDtiOyl3aChhLGIpLGI9TmUoYi5uZXh0U2libGluZyk7QWgoYSk7dWg9dGg/TmUoYS5zdGF0ZU5vZGUubmV4dFNpYmxpbmcpOm51bGw7cmV0dXJuITB9ZnVuY3Rpb24gQ2goKXt1aD10aD1udWxsO3ZoPSExfXZhciBEaD1YYi5SZWFjdEN1cnJlbnRPd25lcixMZj0hMTtmdW5jdGlvbiBTKGEsYixjLGQpe2IuY2hpbGQ9bnVsbD09PWE/dWcoYixudWxsLGMsZCk6dGcoYixhLmNoaWxkLGMsZCl9XG5mdW5jdGlvbiBFaChhLGIsYyxkLGUpe2M9Yy5yZW5kZXI7dmFyIGY9Yi5yZWY7S2YoYixlKTtkPWRoKGEsYixjLGQsZixlKTtpZihudWxsIT09YSYmIUxmKXJldHVybiBiLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWUsYi5lZmZlY3RUYWcmPS01MTcsYS5leHBpcmF0aW9uVGltZTw9ZSYmKGEuZXhwaXJhdGlvblRpbWU9MCksRmgoYSxiLGUpO2IuZWZmZWN0VGFnfD0xO1MoYSxiLGQsZSk7cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiBHaChhLGIsYyxkLGUsZil7aWYobnVsbD09PWEpe3ZhciBoPWMudHlwZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgaCYmIUhoKGgpJiZ2b2lkIDA9PT1oLmRlZmF1bHRQcm9wcyYmbnVsbD09PWMuY29tcGFyZSYmdm9pZCAwPT09Yy5kZWZhdWx0UHJvcHMpcmV0dXJuIGIudGFnPTE1LGIudHlwZT1oLEloKGEsYixoLGQsZSxmKTthPXFnKGMudHlwZSxudWxsLGQsbnVsbCxiLm1vZGUsZik7YS5yZWY9Yi5yZWY7YS5yZXR1cm49YjtyZXR1cm4gYi5jaGlsZD1hfWg9YS5jaGlsZDtpZihlPGYmJihlPWgubWVtb2l6ZWRQcm9wcyxjPWMuY29tcGFyZSxjPW51bGwhPT1jP2M6amQsYyhlLGQpJiZhLnJlZj09PWIucmVmKSlyZXR1cm4gRmgoYSxiLGYpO2IuZWZmZWN0VGFnfD0xO2E9b2coaCxkLGYpO2EucmVmPWIucmVmO2EucmV0dXJuPWI7cmV0dXJuIGIuY2hpbGQ9YX1cbmZ1bmN0aW9uIEloKGEsYixjLGQsZSxmKXtyZXR1cm4gbnVsbCE9PWEmJmpkKGEubWVtb2l6ZWRQcm9wcyxkKSYmYS5yZWY9PT1iLnJlZiYmKExmPSExLGU8Zik/RmgoYSxiLGYpOkpoKGEsYixjLGQsZil9ZnVuY3Rpb24gS2goYSxiKXt2YXIgYz1iLnJlZjtpZihudWxsPT09YSYmbnVsbCE9PWN8fG51bGwhPT1hJiZhLnJlZiE9PWMpYi5lZmZlY3RUYWd8PTEyOH1mdW5jdGlvbiBKaChhLGIsYyxkLGUpe3ZhciBmPU4oYyk/UmU6TC5jdXJyZW50O2Y9U2UoYixmKTtLZihiLGUpO2M9ZGgoYSxiLGMsZCxmLGUpO2lmKG51bGwhPT1hJiYhTGYpcmV0dXJuIGIudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZSxiLmVmZmVjdFRhZyY9LTUxNyxhLmV4cGlyYXRpb25UaW1lPD1lJiYoYS5leHBpcmF0aW9uVGltZT0wKSxGaChhLGIsZSk7Yi5lZmZlY3RUYWd8PTE7UyhhLGIsYyxlKTtyZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIExoKGEsYixjLGQsZSl7aWYoTihjKSl7dmFyIGY9ITA7WGUoYil9ZWxzZSBmPSExO0tmKGIsZSk7aWYobnVsbD09PWIuc3RhdGVOb2RlKW51bGwhPT1hJiYoYS5hbHRlcm5hdGU9bnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZWZmZWN0VGFnfD0yKSxoZyhiLGMsZCxlKSxqZyhiLGMsZCxlKSxkPSEwO2Vsc2UgaWYobnVsbD09PWEpe3ZhciBoPWIuc3RhdGVOb2RlLGc9Yi5tZW1vaXplZFByb3BzO2gucHJvcHM9Zzt2YXIgaz1oLmNvbnRleHQsbD1jLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgbCYmbnVsbCE9PWw/bD1NZihsKToobD1OKGMpP1JlOkwuY3VycmVudCxsPVNlKGIsbCkpO3ZhciBuPWMuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzLHo9XCJmdW5jdGlvblwiPT09dHlwZW9mIG58fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBoLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlO3p8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBoLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZcblwiZnVuY3Rpb25cIiE9PXR5cGVvZiBoLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHN8fChnIT09ZHx8ayE9PWwpJiZpZyhiLGgsZCxsKTtOZj0hMTt2YXIgeD1iLm1lbW9pemVkU3RhdGU7az1oLnN0YXRlPXg7dmFyIHY9Yi51cGRhdGVRdWV1ZTtudWxsIT09diYmKFdmKGIsdixkLGgsZSksaz1iLm1lbW9pemVkU3RhdGUpO2chPT1kfHx4IT09a3x8TS5jdXJyZW50fHxOZj8oXCJmdW5jdGlvblwiPT09dHlwZW9mIG4mJihiZyhiLGMsbixkKSxrPWIubWVtb2l6ZWRTdGF0ZSksKGc9TmZ8fGdnKGIsYyxnLGQseCxrLGwpKT8oenx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGguVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGguY29tcG9uZW50V2lsbE1vdW50fHwoXCJmdW5jdGlvblwiPT09dHlwZW9mIGguY29tcG9uZW50V2lsbE1vdW50JiZoLmNvbXBvbmVudFdpbGxNb3VudCgpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBoLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJlxuaC5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCkpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBoLmNvbXBvbmVudERpZE1vdW50JiYoYi5lZmZlY3RUYWd8PTQpKTooXCJmdW5jdGlvblwiPT09dHlwZW9mIGguY29tcG9uZW50RGlkTW91bnQmJihiLmVmZmVjdFRhZ3w9NCksYi5tZW1vaXplZFByb3BzPWQsYi5tZW1vaXplZFN0YXRlPWspLGgucHJvcHM9ZCxoLnN0YXRlPWssaC5jb250ZXh0PWwsZD1nKTooXCJmdW5jdGlvblwiPT09dHlwZW9mIGguY29tcG9uZW50RGlkTW91bnQmJihiLmVmZmVjdFRhZ3w9NCksZD0hMSl9ZWxzZSBoPWIuc3RhdGVOb2RlLGc9Yi5tZW1vaXplZFByb3BzLGgucHJvcHM9Yi50eXBlPT09Yi5lbGVtZW50VHlwZT9nOkFmKGIudHlwZSxnKSxrPWguY29udGV4dCxsPWMuY29udGV4dFR5cGUsXCJvYmplY3RcIj09PXR5cGVvZiBsJiZudWxsIT09bD9sPU1mKGwpOihsPU4oYyk/UmU6TC5jdXJyZW50LGw9U2UoYixsKSksbj1jLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcywoej1cblwiZnVuY3Rpb25cIj09PXR5cGVvZiBufHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgaC5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSl8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBoLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgaC5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzfHwoZyE9PWR8fGshPT1sKSYmaWcoYixoLGQsbCksTmY9ITEsaz1iLm1lbW9pemVkU3RhdGUseD1oLnN0YXRlPWssdj1iLnVwZGF0ZVF1ZXVlLG51bGwhPT12JiYoV2YoYix2LGQsaCxlKSx4PWIubWVtb2l6ZWRTdGF0ZSksZyE9PWR8fGshPT14fHxNLmN1cnJlbnR8fE5mPyhcImZ1bmN0aW9uXCI9PT10eXBlb2YgbiYmKGJnKGIsYyxuLGQpLHg9Yi5tZW1vaXplZFN0YXRlKSwobj1OZnx8Z2coYixjLGcsZCxrLHgsbCkpPyh6fHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgaC5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGguY29tcG9uZW50V2lsbFVwZGF0ZXx8XG4oXCJmdW5jdGlvblwiPT09dHlwZW9mIGguY29tcG9uZW50V2lsbFVwZGF0ZSYmaC5jb21wb25lbnRXaWxsVXBkYXRlKGQseCxsKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgaC5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSYmaC5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZShkLHgsbCkpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBoLmNvbXBvbmVudERpZFVwZGF0ZSYmKGIuZWZmZWN0VGFnfD00KSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgaC5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSYmKGIuZWZmZWN0VGFnfD0yNTYpKTooXCJmdW5jdGlvblwiIT09dHlwZW9mIGguY29tcG9uZW50RGlkVXBkYXRlfHxnPT09YS5tZW1vaXplZFByb3BzJiZrPT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PTQpLFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBoLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxnPT09YS5tZW1vaXplZFByb3BzJiZrPT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PTI1NiksYi5tZW1vaXplZFByb3BzPVxuZCxiLm1lbW9pemVkU3RhdGU9eCksaC5wcm9wcz1kLGguc3RhdGU9eCxoLmNvbnRleHQ9bCxkPW4pOihcImZ1bmN0aW9uXCIhPT10eXBlb2YgaC5jb21wb25lbnREaWRVcGRhdGV8fGc9PT1hLm1lbW9pemVkUHJvcHMmJms9PT1hLm1lbW9pemVkU3RhdGV8fChiLmVmZmVjdFRhZ3w9NCksXCJmdW5jdGlvblwiIT09dHlwZW9mIGguZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fGc9PT1hLm1lbW9pemVkUHJvcHMmJms9PT1hLm1lbW9pemVkU3RhdGV8fChiLmVmZmVjdFRhZ3w9MjU2KSxkPSExKTtyZXR1cm4gTWgoYSxiLGMsZCxmLGUpfVxuZnVuY3Rpb24gTWgoYSxiLGMsZCxlLGYpe0toKGEsYik7dmFyIGg9MCE9PShiLmVmZmVjdFRhZyY2NCk7aWYoIWQmJiFoKXJldHVybiBlJiZZZShiLGMsITEpLEZoKGEsYixmKTtkPWIuc3RhdGVOb2RlO0RoLmN1cnJlbnQ9Yjt2YXIgZz1oJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYy5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I/bnVsbDpkLnJlbmRlcigpO2IuZWZmZWN0VGFnfD0xO251bGwhPT1hJiZoPyhiLmNoaWxkPXRnKGIsYS5jaGlsZCxudWxsLGYpLGIuY2hpbGQ9dGcoYixudWxsLGcsZikpOlMoYSxiLGcsZik7Yi5tZW1vaXplZFN0YXRlPWQuc3RhdGU7ZSYmWWUoYixjLCEwKTtyZXR1cm4gYi5jaGlsZH1mdW5jdGlvbiBOaChhKXt2YXIgYj1hLnN0YXRlTm9kZTtiLnBlbmRpbmdDb250ZXh0P1ZlKGEsYi5wZW5kaW5nQ29udGV4dCxiLnBlbmRpbmdDb250ZXh0IT09Yi5jb250ZXh0KTpiLmNvbnRleHQmJlZlKGEsYi5jb250ZXh0LCExKTtBZyhhLGIuY29udGFpbmVySW5mbyl9XG52YXIgT2g9e307XG5mdW5jdGlvbiBQaChhLGIsYyl7dmFyIGQ9Yi5tb2RlLGU9Yi5wZW5kaW5nUHJvcHMsZj1QLmN1cnJlbnQsaD1udWxsLGc9ITEsazsoaz0wIT09KGIuZWZmZWN0VGFnJjY0KSl8fChrPTAhPT0oZiZHZykmJihudWxsPT09YXx8bnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSkpO2s/KGg9T2gsZz0hMCxiLmVmZmVjdFRhZyY9LTY1KTpudWxsIT09YSYmbnVsbD09PWEubWVtb2l6ZWRTdGF0ZXx8dm9pZCAwPT09ZS5mYWxsYmFja3x8ITA9PT1lLnVuc3RhYmxlX2F2b2lkVGhpc0ZhbGxiYWNrfHwoZnw9RmcpO2YmPUVnO0ooUCxmLGIpO2lmKG51bGw9PT1hKWlmKGcpe2U9ZS5mYWxsYmFjazthPXNnKG51bGwsZCwwLG51bGwpO2EucmV0dXJuPWI7aWYoMD09PShiLm1vZGUmMikpZm9yKGc9bnVsbCE9PWIubWVtb2l6ZWRTdGF0ZT9iLmNoaWxkLmNoaWxkOmIuY2hpbGQsYS5jaGlsZD1nO251bGwhPT1nOylnLnJldHVybj1hLGc9Zy5zaWJsaW5nO2M9c2coZSxkLGMsbnVsbCk7Yy5yZXR1cm49YjthLnNpYmxpbmc9XG5jO2Q9YX1lbHNlIGQ9Yz11ZyhiLG51bGwsZS5jaGlsZHJlbixjKTtlbHNle2lmKG51bGwhPT1hLm1lbW9pemVkU3RhdGUpaWYoZj1hLmNoaWxkLGQ9Zi5zaWJsaW5nLGcpe2U9ZS5mYWxsYmFjaztjPW9nKGYsZi5wZW5kaW5nUHJvcHMsMCk7Yy5yZXR1cm49YjtpZigwPT09KGIubW9kZSYyKSYmKGc9bnVsbCE9PWIubWVtb2l6ZWRTdGF0ZT9iLmNoaWxkLmNoaWxkOmIuY2hpbGQsZyE9PWYuY2hpbGQpKWZvcihjLmNoaWxkPWc7bnVsbCE9PWc7KWcucmV0dXJuPWMsZz1nLnNpYmxpbmc7ZT1vZyhkLGUsZC5leHBpcmF0aW9uVGltZSk7ZS5yZXR1cm49YjtjLnNpYmxpbmc9ZTtkPWM7Yy5jaGlsZEV4cGlyYXRpb25UaW1lPTA7Yz1lfWVsc2UgZD1jPXRnKGIsZi5jaGlsZCxlLmNoaWxkcmVuLGMpO2Vsc2UgaWYoZj1hLmNoaWxkLGcpe2c9ZS5mYWxsYmFjaztlPXNnKG51bGwsZCwwLG51bGwpO2UucmV0dXJuPWI7ZS5jaGlsZD1mO251bGwhPT1mJiYoZi5yZXR1cm49ZSk7aWYoMD09PShiLm1vZGUmXG4yKSlmb3IoZj1udWxsIT09Yi5tZW1vaXplZFN0YXRlP2IuY2hpbGQuY2hpbGQ6Yi5jaGlsZCxlLmNoaWxkPWY7bnVsbCE9PWY7KWYucmV0dXJuPWUsZj1mLnNpYmxpbmc7Yz1zZyhnLGQsYyxudWxsKTtjLnJldHVybj1iO2Uuc2libGluZz1jO2MuZWZmZWN0VGFnfD0yO2Q9ZTtlLmNoaWxkRXhwaXJhdGlvblRpbWU9MH1lbHNlIGM9ZD10ZyhiLGYsZS5jaGlsZHJlbixjKTtiLnN0YXRlTm9kZT1hLnN0YXRlTm9kZX1iLm1lbW9pemVkU3RhdGU9aDtiLmNoaWxkPWQ7cmV0dXJuIGN9ZnVuY3Rpb24gUWgoYSxiLGMsZCxlKXt2YXIgZj1hLm1lbW9pemVkU3RhdGU7bnVsbD09PWY/YS5tZW1vaXplZFN0YXRlPXtpc0JhY2t3YXJkczpiLHJlbmRlcmluZzpudWxsLGxhc3Q6ZCx0YWlsOmMsdGFpbEV4cGlyYXRpb246MCx0YWlsTW9kZTplfTooZi5pc0JhY2t3YXJkcz1iLGYucmVuZGVyaW5nPW51bGwsZi5sYXN0PWQsZi50YWlsPWMsZi50YWlsRXhwaXJhdGlvbj0wLGYudGFpbE1vZGU9ZSl9XG5mdW5jdGlvbiBSaChhLGIsYyl7dmFyIGQ9Yi5wZW5kaW5nUHJvcHMsZT1kLnJldmVhbE9yZGVyLGY9ZC50YWlsO1MoYSxiLGQuY2hpbGRyZW4sYyk7ZD1QLmN1cnJlbnQ7aWYoMCE9PShkJkdnKSlkPWQmRWd8R2csYi5lZmZlY3RUYWd8PTY0O2Vsc2V7aWYobnVsbCE9PWEmJjAhPT0oYS5lZmZlY3RUYWcmNjQpKWE6Zm9yKGE9Yi5jaGlsZDtudWxsIT09YTspe2lmKDEzPT09YS50YWcpe2lmKG51bGwhPT1hLm1lbW9pemVkU3RhdGUpe2EuZXhwaXJhdGlvblRpbWU8YyYmKGEuZXhwaXJhdGlvblRpbWU9Yyk7dmFyIGg9YS5hbHRlcm5hdGU7bnVsbCE9PWgmJmguZXhwaXJhdGlvblRpbWU8YyYmKGguZXhwaXJhdGlvblRpbWU9Yyk7SmYoYS5yZXR1cm4sYyl9fWVsc2UgaWYobnVsbCE9PWEuY2hpbGQpe2EuY2hpbGQucmV0dXJuPWE7YT1hLmNoaWxkO2NvbnRpbnVlfWlmKGE9PT1iKWJyZWFrIGE7Zm9yKDtudWxsPT09YS5zaWJsaW5nOyl7aWYobnVsbD09PWEucmV0dXJufHxhLnJldHVybj09PVxuYilicmVhayBhO2E9YS5yZXR1cm59YS5zaWJsaW5nLnJldHVybj1hLnJldHVybjthPWEuc2libGluZ31kJj1FZ31KKFAsZCxiKTtpZigwPT09KGIubW9kZSYyKSliLm1lbW9pemVkU3RhdGU9bnVsbDtlbHNlIHN3aXRjaChlKXtjYXNlIFwiZm9yd2FyZHNcIjpjPWIuY2hpbGQ7Zm9yKGU9bnVsbDtudWxsIT09YzspZD1jLmFsdGVybmF0ZSxudWxsIT09ZCYmbnVsbD09PUhnKGQpJiYoZT1jKSxjPWMuc2libGluZztjPWU7bnVsbD09PWM/KGU9Yi5jaGlsZCxiLmNoaWxkPW51bGwpOihlPWMuc2libGluZyxjLnNpYmxpbmc9bnVsbCk7UWgoYiwhMSxlLGMsZik7YnJlYWs7Y2FzZSBcImJhY2t3YXJkc1wiOmM9bnVsbDtlPWIuY2hpbGQ7Zm9yKGIuY2hpbGQ9bnVsbDtudWxsIT09ZTspe2Q9ZS5hbHRlcm5hdGU7aWYobnVsbCE9PWQmJm51bGw9PT1IZyhkKSl7Yi5jaGlsZD1lO2JyZWFrfWQ9ZS5zaWJsaW5nO2Uuc2libGluZz1jO2M9ZTtlPWR9UWgoYiwhMCxjLG51bGwsZik7YnJlYWs7Y2FzZSBcInRvZ2V0aGVyXCI6UWgoYixcbiExLG51bGwsbnVsbCx2b2lkIDApO2JyZWFrO2RlZmF1bHQ6Yi5tZW1vaXplZFN0YXRlPW51bGx9cmV0dXJuIGIuY2hpbGR9ZnVuY3Rpb24gRmgoYSxiLGMpe251bGwhPT1hJiYoYi5kZXBlbmRlbmNpZXM9YS5kZXBlbmRlbmNpZXMpO2lmKGIuY2hpbGRFeHBpcmF0aW9uVGltZTxjKXJldHVybiBudWxsO2lmKG51bGwhPT1hJiZiLmNoaWxkIT09YS5jaGlsZCl0aHJvdyB0KEVycm9yKDE1MykpO2lmKG51bGwhPT1iLmNoaWxkKXthPWIuY2hpbGQ7Yz1vZyhhLGEucGVuZGluZ1Byb3BzLGEuZXhwaXJhdGlvblRpbWUpO2IuY2hpbGQ9Yztmb3IoYy5yZXR1cm49YjtudWxsIT09YS5zaWJsaW5nOylhPWEuc2libGluZyxjPWMuc2libGluZz1vZyhhLGEucGVuZGluZ1Byb3BzLGEuZXhwaXJhdGlvblRpbWUpLGMucmV0dXJuPWI7Yy5zaWJsaW5nPW51bGx9cmV0dXJuIGIuY2hpbGR9ZnVuY3Rpb24gU2goYSl7YS5lZmZlY3RUYWd8PTR9XG52YXIgVGg9dm9pZCAwLFVoPXZvaWQgMCxWaD12b2lkIDAsV2g9dm9pZCAwO1RoPWZ1bmN0aW9uKGEsYil7Zm9yKHZhciBjPWIuY2hpbGQ7bnVsbCE9PWM7KXtpZig1PT09Yy50YWd8fDY9PT1jLnRhZylhLmFwcGVuZENoaWxkKGMuc3RhdGVOb2RlKTtlbHNlIGlmKDIwPT09Yy50YWcpYS5hcHBlbmRDaGlsZChjLnN0YXRlTm9kZS5pbnN0YW5jZSk7ZWxzZSBpZig0IT09Yy50YWcmJm51bGwhPT1jLmNoaWxkKXtjLmNoaWxkLnJldHVybj1jO2M9Yy5jaGlsZDtjb250aW51ZX1pZihjPT09YilicmVhaztmb3IoO251bGw9PT1jLnNpYmxpbmc7KXtpZihudWxsPT09Yy5yZXR1cm58fGMucmV0dXJuPT09YilyZXR1cm47Yz1jLnJldHVybn1jLnNpYmxpbmcucmV0dXJuPWMucmV0dXJuO2M9Yy5zaWJsaW5nfX07VWg9ZnVuY3Rpb24oKXt9O1xuVmg9ZnVuY3Rpb24oYSxiLGMsZCxlKXt2YXIgZj1hLm1lbW9pemVkUHJvcHM7aWYoZiE9PWQpe3ZhciBoPWIuc3RhdGVOb2RlO3pnKHdnLmN1cnJlbnQpO2E9bnVsbDtzd2l0Y2goYyl7Y2FzZSBcImlucHV0XCI6Zj1CYyhoLGYpO2Q9QmMoaCxkKTthPVtdO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpmPWxlKGgsZik7ZD1sZShoLGQpO2E9W107YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmY9bSh7fSxmLHt2YWx1ZTp2b2lkIDB9KTtkPW0oe30sZCx7dmFsdWU6dm9pZCAwfSk7YT1bXTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpmPW5lKGgsZik7ZD1uZShoLGQpO2E9W107YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCIhPT10eXBlb2YgZi5vbkNsaWNrJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5vbkNsaWNrJiYoaC5vbmNsaWNrPUdlKX1EZShjLGQpO2g9Yz12b2lkIDA7dmFyIGc9bnVsbDtmb3IoYyBpbiBmKWlmKCFkLmhhc093blByb3BlcnR5KGMpJiZmLmhhc093blByb3BlcnR5KGMpJiZudWxsIT1mW2NdKWlmKFwic3R5bGVcIj09PVxuYyl7dmFyIGs9ZltjXTtmb3IoaCBpbiBrKWsuaGFzT3duUHJvcGVydHkoaCkmJihnfHwoZz17fSksZ1toXT1cIlwiKX1lbHNlXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiIT09YyYmXCJjaGlsZHJlblwiIT09YyYmXCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWMmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1jJiZcImF1dG9Gb2N1c1wiIT09YyYmKGlhLmhhc093blByb3BlcnR5KGMpP2F8fChhPVtdKTooYT1hfHxbXSkucHVzaChjLG51bGwpKTtmb3IoYyBpbiBkKXt2YXIgbD1kW2NdO2s9bnVsbCE9Zj9mW2NdOnZvaWQgMDtpZihkLmhhc093blByb3BlcnR5KGMpJiZsIT09ayYmKG51bGwhPWx8fG51bGwhPWspKWlmKFwic3R5bGVcIj09PWMpaWYoayl7Zm9yKGggaW4gaykhay5oYXNPd25Qcm9wZXJ0eShoKXx8bCYmbC5oYXNPd25Qcm9wZXJ0eShoKXx8KGd8fChnPXt9KSxnW2hdPVwiXCIpO2ZvcihoIGluIGwpbC5oYXNPd25Qcm9wZXJ0eShoKSYma1toXSE9PWxbaF0mJihnfHxcbihnPXt9KSxnW2hdPWxbaF0pfWVsc2UgZ3x8KGF8fChhPVtdKSxhLnB1c2goYyxnKSksZz1sO2Vsc2VcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1jPyhsPWw/bC5fX2h0bWw6dm9pZCAwLGs9az9rLl9faHRtbDp2b2lkIDAsbnVsbCE9bCYmayE9PWwmJihhPWF8fFtdKS5wdXNoKGMsXCJcIitsKSk6XCJjaGlsZHJlblwiPT09Yz9rPT09bHx8XCJzdHJpbmdcIiE9PXR5cGVvZiBsJiZcIm51bWJlclwiIT09dHlwZW9mIGx8fChhPWF8fFtdKS5wdXNoKGMsXCJcIitsKTpcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09YyYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWMmJihpYS5oYXNPd25Qcm9wZXJ0eShjKT8obnVsbCE9bCYmRmUoZSxjKSxhfHxrPT09bHx8KGE9W10pKTooYT1hfHxbXSkucHVzaChjLGwpKX1nJiYoYT1hfHxbXSkucHVzaChcInN0eWxlXCIsZyk7ZT1hOyhiLnVwZGF0ZVF1ZXVlPWUpJiZTaChiKX19O1doPWZ1bmN0aW9uKGEsYixjLGQpe2MhPT1kJiZTaChiKX07XG5mdW5jdGlvbiAkaChhLGIpe3N3aXRjaChhLnRhaWxNb2RlKXtjYXNlIFwiaGlkZGVuXCI6Yj1hLnRhaWw7Zm9yKHZhciBjPW51bGw7bnVsbCE9PWI7KW51bGwhPT1iLmFsdGVybmF0ZSYmKGM9YiksYj1iLnNpYmxpbmc7bnVsbD09PWM/YS50YWlsPW51bGw6Yy5zaWJsaW5nPW51bGw7YnJlYWs7Y2FzZSBcImNvbGxhcHNlZFwiOmM9YS50YWlsO2Zvcih2YXIgZD1udWxsO251bGwhPT1jOyludWxsIT09Yy5hbHRlcm5hdGUmJihkPWMpLGM9Yy5zaWJsaW5nO251bGw9PT1kP2J8fG51bGw9PT1hLnRhaWw/YS50YWlsPW51bGw6YS50YWlsLnNpYmxpbmc9bnVsbDpkLnNpYmxpbmc9bnVsbH19XG5mdW5jdGlvbiBhaShhKXtzd2l0Y2goYS50YWcpe2Nhc2UgMTpOKGEudHlwZSkmJlRlKGEpO3ZhciBiPWEuZWZmZWN0VGFnO3JldHVybiBiJjIwNDg/KGEuZWZmZWN0VGFnPWImLTIwNDl8NjQsYSk6bnVsbDtjYXNlIDM6QmcoYSk7VWUoYSk7Yj1hLmVmZmVjdFRhZztpZigwIT09KGImNjQpKXRocm93IHQoRXJyb3IoMjg1KSk7YS5lZmZlY3RUYWc9YiYtMjA0OXw2NDtyZXR1cm4gYTtjYXNlIDU6cmV0dXJuIERnKGEpLG51bGw7Y2FzZSAxMzpyZXR1cm4gSChQLGEpLGI9YS5lZmZlY3RUYWcsYiYyMDQ4PyhhLmVmZmVjdFRhZz1iJi0yMDQ5fDY0LGEpOm51bGw7Y2FzZSAxODpyZXR1cm4gbnVsbDtjYXNlIDE5OnJldHVybiBIKFAsYSksbnVsbDtjYXNlIDQ6cmV0dXJuIEJnKGEpLG51bGw7Y2FzZSAxMDpyZXR1cm4gSWYoYSksbnVsbDtkZWZhdWx0OnJldHVybiBudWxsfX1mdW5jdGlvbiBiaShhLGIpe3JldHVybnt2YWx1ZTphLHNvdXJjZTpiLHN0YWNrOnBjKGIpfX1cbnZhciBjaT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgV2Vha1NldD9XZWFrU2V0OlNldDtmdW5jdGlvbiBkaShhLGIpe3ZhciBjPWIuc291cmNlLGQ9Yi5zdGFjaztudWxsPT09ZCYmbnVsbCE9PWMmJihkPXBjKGMpKTtudWxsIT09YyYmb2MoYy50eXBlKTtiPWIudmFsdWU7bnVsbCE9PWEmJjE9PT1hLnRhZyYmb2MoYS50eXBlKTt0cnl7Y29uc29sZS5lcnJvcihiKX1jYXRjaChlKXtzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dGhyb3cgZTt9KX19ZnVuY3Rpb24gZWkoYSxiKXt0cnl7Yi5wcm9wcz1hLm1lbW9pemVkUHJvcHMsYi5zdGF0ZT1hLm1lbW9pemVkU3RhdGUsYi5jb21wb25lbnRXaWxsVW5tb3VudCgpfWNhdGNoKGMpe2ZpKGEsYyl9fWZ1bmN0aW9uIGdpKGEpe3ZhciBiPWEucmVmO2lmKG51bGwhPT1iKWlmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBiKXRyeXtiKG51bGwpfWNhdGNoKGMpe2ZpKGEsYyl9ZWxzZSBiLmN1cnJlbnQ9bnVsbH1cbmZ1bmN0aW9uIGhpKGEsYixjKXtjPWMudXBkYXRlUXVldWU7Yz1udWxsIT09Yz9jLmxhc3RFZmZlY3Q6bnVsbDtpZihudWxsIT09Yyl7dmFyIGQ9Yz1jLm5leHQ7ZG97aWYoKGQudGFnJmEpIT09SWcpe3ZhciBlPWQuZGVzdHJveTtkLmRlc3Ryb3k9dm9pZCAwO3ZvaWQgMCE9PWUmJmUoKX0oZC50YWcmYikhPT1JZyYmKGU9ZC5jcmVhdGUsZC5kZXN0cm95PWUoKSk7ZD1kLm5leHR9d2hpbGUoZCE9PWMpfX1cbmZ1bmN0aW9uIGlpKGEsYil7XCJmdW5jdGlvblwiPT09dHlwZW9mIGppJiZqaShhKTtzd2l0Y2goYS50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTQ6Y2FzZSAxNTp2YXIgYz1hLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1jJiYoYz1jLmxhc3RFZmZlY3QsbnVsbCE9PWMpKXt2YXIgZD1jLm5leHQ7dmYoOTc8Yj85NzpiLGZ1bmN0aW9uKCl7dmFyIGI9ZDtkb3t2YXIgYz1iLmRlc3Ryb3k7aWYodm9pZCAwIT09Yyl7dmFyIGg9YTt0cnl7YygpfWNhdGNoKGcpe2ZpKGgsZyl9fWI9Yi5uZXh0fXdoaWxlKGIhPT1kKX0pfWJyZWFrO2Nhc2UgMTpnaShhKTtiPWEuc3RhdGVOb2RlO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLmNvbXBvbmVudFdpbGxVbm1vdW50JiZlaShhLGIpO2JyZWFrO2Nhc2UgNTpnaShhKTticmVhaztjYXNlIDQ6a2koYSxiKX19XG5mdW5jdGlvbiBsaShhLGIpe2Zvcih2YXIgYz1hOzspaWYoaWkoYyxiKSxudWxsIT09Yy5jaGlsZCYmNCE9PWMudGFnKWMuY2hpbGQucmV0dXJuPWMsYz1jLmNoaWxkO2Vsc2V7aWYoYz09PWEpYnJlYWs7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWMucmV0dXJufHxjLnJldHVybj09PWEpcmV0dXJuO2M9Yy5yZXR1cm59Yy5zaWJsaW5nLnJldHVybj1jLnJldHVybjtjPWMuc2libGluZ319ZnVuY3Rpb24gbWkoYSl7cmV0dXJuIDU9PT1hLnRhZ3x8Mz09PWEudGFnfHw0PT09YS50YWd9XG5mdW5jdGlvbiBuaShhKXthOntmb3IodmFyIGI9YS5yZXR1cm47bnVsbCE9PWI7KXtpZihtaShiKSl7dmFyIGM9YjticmVhayBhfWI9Yi5yZXR1cm59dGhyb3cgdChFcnJvcigxNjApKTt9Yj1jLnN0YXRlTm9kZTtzd2l0Y2goYy50YWcpe2Nhc2UgNTp2YXIgZD0hMTticmVhaztjYXNlIDM6Yj1iLmNvbnRhaW5lckluZm87ZD0hMDticmVhaztjYXNlIDQ6Yj1iLmNvbnRhaW5lckluZm87ZD0hMDticmVhaztkZWZhdWx0OnRocm93IHQoRXJyb3IoMTYxKSk7fWMuZWZmZWN0VGFnJjE2JiYod2UoYixcIlwiKSxjLmVmZmVjdFRhZyY9LTE3KTthOmI6Zm9yKGM9YTs7KXtmb3IoO251bGw9PT1jLnNpYmxpbmc7KXtpZihudWxsPT09Yy5yZXR1cm58fG1pKGMucmV0dXJuKSl7Yz1udWxsO2JyZWFrIGF9Yz1jLnJldHVybn1jLnNpYmxpbmcucmV0dXJuPWMucmV0dXJuO2ZvcihjPWMuc2libGluZzs1IT09Yy50YWcmJjYhPT1jLnRhZyYmMTghPT1jLnRhZzspe2lmKGMuZWZmZWN0VGFnJjIpY29udGludWUgYjtcbmlmKG51bGw9PT1jLmNoaWxkfHw0PT09Yy50YWcpY29udGludWUgYjtlbHNlIGMuY2hpbGQucmV0dXJuPWMsYz1jLmNoaWxkfWlmKCEoYy5lZmZlY3RUYWcmMikpe2M9Yy5zdGF0ZU5vZGU7YnJlYWsgYX19Zm9yKHZhciBlPWE7Oyl7dmFyIGY9NT09PWUudGFnfHw2PT09ZS50YWc7aWYoZnx8MjA9PT1lLnRhZyl7dmFyIGg9Zj9lLnN0YXRlTm9kZTplLnN0YXRlTm9kZS5pbnN0YW5jZTtpZihjKWlmKGQpe2Y9Yjt2YXIgZz1oO2g9Yzs4PT09Zi5ub2RlVHlwZT9mLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGcsaCk6Zi5pbnNlcnRCZWZvcmUoZyxoKX1lbHNlIGIuaW5zZXJ0QmVmb3JlKGgsYyk7ZWxzZSBkPyhnPWIsOD09PWcubm9kZVR5cGU/KGY9Zy5wYXJlbnROb2RlLGYuaW5zZXJ0QmVmb3JlKGgsZykpOihmPWcsZi5hcHBlbmRDaGlsZChoKSksZz1nLl9yZWFjdFJvb3RDb250YWluZXIsbnVsbCE9PWcmJnZvaWQgMCE9PWd8fG51bGwhPT1mLm9uY2xpY2t8fChmLm9uY2xpY2s9R2UpKTpcbmIuYXBwZW5kQ2hpbGQoaCl9ZWxzZSBpZig0IT09ZS50YWcmJm51bGwhPT1lLmNoaWxkKXtlLmNoaWxkLnJldHVybj1lO2U9ZS5jaGlsZDtjb250aW51ZX1pZihlPT09YSlicmVhaztmb3IoO251bGw9PT1lLnNpYmxpbmc7KXtpZihudWxsPT09ZS5yZXR1cm58fGUucmV0dXJuPT09YSlyZXR1cm47ZT1lLnJldHVybn1lLnNpYmxpbmcucmV0dXJuPWUucmV0dXJuO2U9ZS5zaWJsaW5nfX1cbmZ1bmN0aW9uIGtpKGEsYil7Zm9yKHZhciBjPWEsZD0hMSxlPXZvaWQgMCxmPXZvaWQgMDs7KXtpZighZCl7ZD1jLnJldHVybjthOmZvcig7Oyl7aWYobnVsbD09PWQpdGhyb3cgdChFcnJvcigxNjApKTtlPWQuc3RhdGVOb2RlO3N3aXRjaChkLnRhZyl7Y2FzZSA1OmY9ITE7YnJlYWsgYTtjYXNlIDM6ZT1lLmNvbnRhaW5lckluZm87Zj0hMDticmVhayBhO2Nhc2UgNDplPWUuY29udGFpbmVySW5mbztmPSEwO2JyZWFrIGF9ZD1kLnJldHVybn1kPSEwfWlmKDU9PT1jLnRhZ3x8Nj09PWMudGFnKWlmKGxpKGMsYiksZil7dmFyIGg9ZSxnPWMuc3RhdGVOb2RlOzg9PT1oLm5vZGVUeXBlP2gucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChnKTpoLnJlbW92ZUNoaWxkKGcpfWVsc2UgZS5yZW1vdmVDaGlsZChjLnN0YXRlTm9kZSk7ZWxzZSBpZigyMD09PWMudGFnKWc9Yy5zdGF0ZU5vZGUuaW5zdGFuY2UsbGkoYyxiKSxmPyhoPWUsOD09PWgubm9kZVR5cGU/aC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGcpOlxuaC5yZW1vdmVDaGlsZChnKSk6ZS5yZW1vdmVDaGlsZChnKTtlbHNlIGlmKDQ9PT1jLnRhZyl7aWYobnVsbCE9PWMuY2hpbGQpe2U9Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztmPSEwO2MuY2hpbGQucmV0dXJuPWM7Yz1jLmNoaWxkO2NvbnRpbnVlfX1lbHNlIGlmKGlpKGMsYiksbnVsbCE9PWMuY2hpbGQpe2MuY2hpbGQucmV0dXJuPWM7Yz1jLmNoaWxkO2NvbnRpbnVlfWlmKGM9PT1hKWJyZWFrO2Zvcig7bnVsbD09PWMuc2libGluZzspe2lmKG51bGw9PT1jLnJldHVybnx8Yy5yZXR1cm49PT1hKXJldHVybjtjPWMucmV0dXJuOzQ9PT1jLnRhZyYmKGQ9ITEpfWMuc2libGluZy5yZXR1cm49Yy5yZXR1cm47Yz1jLnNpYmxpbmd9fVxuZnVuY3Rpb24gb2koYSxiKXtzd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTQ6Y2FzZSAxNTpoaShLZyxMZyxiKTticmVhaztjYXNlIDE6YnJlYWs7Y2FzZSA1OnZhciBjPWIuc3RhdGVOb2RlO2lmKG51bGwhPWMpe3ZhciBkPWIubWVtb2l6ZWRQcm9wcyxlPW51bGwhPT1hP2EubWVtb2l6ZWRQcm9wczpkO2E9Yi50eXBlO3ZhciBmPWIudXBkYXRlUXVldWU7Yi51cGRhdGVRdWV1ZT1udWxsO2lmKG51bGwhPT1mKXtjW0dhXT1kO1wiaW5wdXRcIj09PWEmJlwicmFkaW9cIj09PWQudHlwZSYmbnVsbCE9ZC5uYW1lJiZEYyhjLGQpO0VlKGEsZSk7Yj1FZShhLGQpO2ZvcihlPTA7ZTxmLmxlbmd0aDtlKz0yKXt2YXIgaD1mW2VdLGc9ZltlKzFdO1wic3R5bGVcIj09PWg/QWUoYyxnKTpcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1oP3ZlKGMsZyk6XCJjaGlsZHJlblwiPT09aD93ZShjLGcpOnpjKGMsaCxnLGIpfXN3aXRjaChhKXtjYXNlIFwiaW5wdXRcIjpFYyhjLGQpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOnBlKGMsXG5kKTticmVhaztjYXNlIFwic2VsZWN0XCI6Yj1jLl93cmFwcGVyU3RhdGUud2FzTXVsdGlwbGUsYy5fd3JhcHBlclN0YXRlLndhc011bHRpcGxlPSEhZC5tdWx0aXBsZSxhPWQudmFsdWUsbnVsbCE9YT9tZShjLCEhZC5tdWx0aXBsZSxhLCExKTpiIT09ISFkLm11bHRpcGxlJiYobnVsbCE9ZC5kZWZhdWx0VmFsdWU/bWUoYywhIWQubXVsdGlwbGUsZC5kZWZhdWx0VmFsdWUsITApOm1lKGMsISFkLm11bHRpcGxlLGQubXVsdGlwbGU/W106XCJcIiwhMSkpfX19YnJlYWs7Y2FzZSA2OmlmKG51bGw9PT1iLnN0YXRlTm9kZSl0aHJvdyB0KEVycm9yKDE2MikpO2Iuc3RhdGVOb2RlLm5vZGVWYWx1ZT1iLm1lbW9pemVkUHJvcHM7YnJlYWs7Y2FzZSAzOmJyZWFrO2Nhc2UgMTI6YnJlYWs7Y2FzZSAxMzpjPWI7bnVsbD09PWIubWVtb2l6ZWRTdGF0ZT9kPSExOihkPSEwLGM9Yi5jaGlsZCxwaT1zZigpKTtpZihudWxsIT09YylhOmZvcihhPWM7Oyl7aWYoNT09PWEudGFnKWY9YS5zdGF0ZU5vZGUsZD8oZj1cbmYuc3R5bGUsXCJmdW5jdGlvblwiPT09dHlwZW9mIGYuc2V0UHJvcGVydHk/Zi5zZXRQcm9wZXJ0eShcImRpc3BsYXlcIixcIm5vbmVcIixcImltcG9ydGFudFwiKTpmLmRpc3BsYXk9XCJub25lXCIpOihmPWEuc3RhdGVOb2RlLGU9YS5tZW1vaXplZFByb3BzLnN0eWxlLGU9dm9pZCAwIT09ZSYmbnVsbCE9PWUmJmUuaGFzT3duUHJvcGVydHkoXCJkaXNwbGF5XCIpP2UuZGlzcGxheTpudWxsLGYuc3R5bGUuZGlzcGxheT16ZShcImRpc3BsYXlcIixlKSk7ZWxzZSBpZig2PT09YS50YWcpYS5zdGF0ZU5vZGUubm9kZVZhbHVlPWQ/XCJcIjphLm1lbW9pemVkUHJvcHM7ZWxzZSBpZigxMz09PWEudGFnJiZudWxsIT09YS5tZW1vaXplZFN0YXRlKXtmPWEuY2hpbGQuc2libGluZztmLnJldHVybj1hO2E9Zjtjb250aW51ZX1lbHNlIGlmKG51bGwhPT1hLmNoaWxkKXthLmNoaWxkLnJldHVybj1hO2E9YS5jaGlsZDtjb250aW51ZX1pZihhPT09YylicmVhayBhO2Zvcig7bnVsbD09PWEuc2libGluZzspe2lmKG51bGw9PT1cbmEucmV0dXJufHxhLnJldHVybj09PWMpYnJlYWsgYTthPWEucmV0dXJufWEuc2libGluZy5yZXR1cm49YS5yZXR1cm47YT1hLnNpYmxpbmd9cWkoYik7YnJlYWs7Y2FzZSAxOTpxaShiKTticmVhaztjYXNlIDE3OmJyZWFrO2Nhc2UgMjA6YnJlYWs7ZGVmYXVsdDp0aHJvdyB0KEVycm9yKDE2MykpO319ZnVuY3Rpb24gcWkoYSl7dmFyIGI9YS51cGRhdGVRdWV1ZTtpZihudWxsIT09Yil7YS51cGRhdGVRdWV1ZT1udWxsO3ZhciBjPWEuc3RhdGVOb2RlO251bGw9PT1jJiYoYz1hLnN0YXRlTm9kZT1uZXcgY2kpO2IuZm9yRWFjaChmdW5jdGlvbihiKXt2YXIgZD1yaS5iaW5kKG51bGwsYSxiKTtjLmhhcyhiKXx8KGMuYWRkKGIpLGIudGhlbihkLGQpKX0pfX12YXIgc2k9XCJmdW5jdGlvblwiPT09dHlwZW9mIFdlYWtNYXA/V2Vha01hcDpNYXA7XG5mdW5jdGlvbiB0aShhLGIsYyl7Yz1RZihjLG51bGwpO2MudGFnPTM7Yy5wYXlsb2FkPXtlbGVtZW50Om51bGx9O3ZhciBkPWIudmFsdWU7Yy5jYWxsYmFjaz1mdW5jdGlvbigpe3VpfHwodWk9ITAsdmk9ZCk7ZGkoYSxiKX07cmV0dXJuIGN9XG5mdW5jdGlvbiB3aShhLGIsYyl7Yz1RZihjLG51bGwpO2MudGFnPTM7dmFyIGQ9YS50eXBlLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcjtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZCl7dmFyIGU9Yi52YWx1ZTtjLnBheWxvYWQ9ZnVuY3Rpb24oKXtkaShhLGIpO3JldHVybiBkKGUpfX12YXIgZj1hLnN0YXRlTm9kZTtudWxsIT09ZiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGYuY29tcG9uZW50RGlkQ2F0Y2gmJihjLmNhbGxiYWNrPWZ1bmN0aW9uKCl7XCJmdW5jdGlvblwiIT09dHlwZW9mIGQmJihudWxsPT09eGk/eGk9bmV3IFNldChbdGhpc10pOnhpLmFkZCh0aGlzKSxkaShhLGIpKTt2YXIgYz1iLnN0YWNrO3RoaXMuY29tcG9uZW50RGlkQ2F0Y2goYi52YWx1ZSx7Y29tcG9uZW50U3RhY2s6bnVsbCE9PWM/YzpcIlwifSl9KTtyZXR1cm4gY31cbnZhciB5aT1NYXRoLmNlaWwsemk9WGIuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcixBaT1YYi5SZWFjdEN1cnJlbnRPd25lcixUPTAsQmk9OCxDaT0xNixEaT0zMixFaT0wLEZpPTEsR2k9MixIaT0zLElpPTQsVT1ULEppPW51bGwsVj1udWxsLFc9MCxYPUVpLEtpPTEwNzM3NDE4MjMsTGk9MTA3Mzc0MTgyMyxNaT1udWxsLE5pPSExLHBpPTAsT2k9NTAwLFk9bnVsbCx1aT0hMSx2aT1udWxsLHhpPW51bGwsUGk9ITEsUWk9bnVsbCxSaT05MCxTaT0wLFRpPW51bGwsVWk9MCxWaT1udWxsLFdpPTA7ZnVuY3Rpb24gY2coKXtyZXR1cm4oVSYoQ2l8RGkpKSE9PVQ/MTA3Mzc0MTgyMS0oc2YoKS8xMHwwKTowIT09V2k/V2k6V2k9MTA3Mzc0MTgyMS0oc2YoKS8xMHwwKX1cbmZ1bmN0aW9uIGRnKGEsYixjKXtiPWIubW9kZTtpZigwPT09KGImMikpcmV0dXJuIDEwNzM3NDE4MjM7dmFyIGQ9dGYoKTtpZigwPT09KGImNCkpcmV0dXJuIDk5PT09ZD8xMDczNzQxODIzOjEwNzM3NDE4MjI7aWYoKFUmQ2kpIT09VClyZXR1cm4gVztpZihudWxsIT09YylhPTEwNzM3NDE4MjEtMjUqKCgoMTA3Mzc0MTgyMS1hKyhjLnRpbWVvdXRNc3wwfHw1RTMpLzEwKS8yNXwwKSsxKTtlbHNlIHN3aXRjaChkKXtjYXNlIDk5OmE9MTA3Mzc0MTgyMzticmVhaztjYXNlIDk4OmE9MTA3Mzc0MTgyMS0xMCooKCgxMDczNzQxODIxLWErMTUpLzEwfDApKzEpO2JyZWFrO2Nhc2UgOTc6Y2FzZSA5NjphPTEwNzM3NDE4MjEtMjUqKCgoMTA3Mzc0MTgyMS1hKzUwMCkvMjV8MCkrMSk7YnJlYWs7Y2FzZSA5NTphPTE7YnJlYWs7ZGVmYXVsdDp0aHJvdyB0KEVycm9yKDMyNikpO31udWxsIT09SmkmJmE9PT1XJiYtLWE7cmV0dXJuIGF9dmFyIFhpPTA7XG5mdW5jdGlvbiBlZyhhLGIpe2lmKDUwPFVpKXRocm93IFVpPTAsVmk9bnVsbCx0KEVycm9yKDE4NSkpO2E9WWkoYSxiKTtpZihudWxsIT09YSl7YS5waW5nVGltZT0wO3ZhciBjPXRmKCk7aWYoMTA3Mzc0MTgyMz09PWIpaWYoKFUmQmkpIT09VCYmKFUmKENpfERpKSk9PT1UKWZvcih2YXIgZD1aKGEsMTA3Mzc0MTgyMywhMCk7bnVsbCE9PWQ7KWQ9ZCghMCk7ZWxzZSBaaShhLDk5LDEwNzM3NDE4MjMpLFU9PT1UJiZPKCk7ZWxzZSBaaShhLGMsYik7KFUmNCk9PT1UfHw5OCE9PWMmJjk5IT09Y3x8KG51bGw9PT1UaT9UaT1uZXcgTWFwKFtbYSxiXV0pOihjPVRpLmdldChhKSwodm9pZCAwPT09Y3x8Yz5iKSYmVGkuc2V0KGEsYikpKX19XG5mdW5jdGlvbiBZaShhLGIpe2EuZXhwaXJhdGlvblRpbWU8YiYmKGEuZXhwaXJhdGlvblRpbWU9Yik7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbCE9PWMmJmMuZXhwaXJhdGlvblRpbWU8YiYmKGMuZXhwaXJhdGlvblRpbWU9Yik7dmFyIGQ9YS5yZXR1cm4sZT1udWxsO2lmKG51bGw9PT1kJiYzPT09YS50YWcpZT1hLnN0YXRlTm9kZTtlbHNlIGZvcig7bnVsbCE9PWQ7KXtjPWQuYWx0ZXJuYXRlO2QuY2hpbGRFeHBpcmF0aW9uVGltZTxiJiYoZC5jaGlsZEV4cGlyYXRpb25UaW1lPWIpO251bGwhPT1jJiZjLmNoaWxkRXhwaXJhdGlvblRpbWU8YiYmKGMuY2hpbGRFeHBpcmF0aW9uVGltZT1iKTtpZihudWxsPT09ZC5yZXR1cm4mJjM9PT1kLnRhZyl7ZT1kLnN0YXRlTm9kZTticmVha31kPWQucmV0dXJufW51bGwhPT1lJiYoYj5lLmZpcnN0UGVuZGluZ1RpbWUmJihlLmZpcnN0UGVuZGluZ1RpbWU9YiksYT1lLmxhc3RQZW5kaW5nVGltZSwwPT09YXx8YjxhKSYmKGUubGFzdFBlbmRpbmdUaW1lPVxuYik7cmV0dXJuIGV9ZnVuY3Rpb24gWmkoYSxiLGMpe2lmKGEuY2FsbGJhY2tFeHBpcmF0aW9uVGltZTxjKXt2YXIgZD1hLmNhbGxiYWNrTm9kZTtudWxsIT09ZCYmZCE9PW1mJiZhZihkKTthLmNhbGxiYWNrRXhwaXJhdGlvblRpbWU9YzsxMDczNzQxODIzPT09Yz9hLmNhbGxiYWNrTm9kZT14ZigkaS5iaW5kKG51bGwsYSxaLmJpbmQobnVsbCxhLGMpKSk6KGQ9bnVsbCwxIT09YyYmKGQ9e3RpbWVvdXQ6MTAqKDEwNzM3NDE4MjEtYyktc2YoKX0pLGEuY2FsbGJhY2tOb2RlPXdmKGIsJGkuYmluZChudWxsLGEsWi5iaW5kKG51bGwsYSxjKSksZCkpfX1mdW5jdGlvbiAkaShhLGIsYyl7dmFyIGQ9YS5jYWxsYmFja05vZGUsZT1udWxsO3RyeXtyZXR1cm4gZT1iKGMpLG51bGwhPT1lPyRpLmJpbmQobnVsbCxhLGUpOm51bGx9ZmluYWxseXtudWxsPT09ZSYmZD09PWEuY2FsbGJhY2tOb2RlJiYoYS5jYWxsYmFja05vZGU9bnVsbCxhLmNhbGxiYWNrRXhwaXJhdGlvblRpbWU9MCl9fVxuZnVuY3Rpb24gYWooKXsoVSYoMXxDaXxEaSkpPT09VCYmKGJqKCksY2ooKSl9ZnVuY3Rpb24gZGooYSxiKXt2YXIgYz1hLmZpcnN0QmF0Y2g7cmV0dXJuIG51bGwhPT1jJiZjLl9kZWZlciYmYy5fZXhwaXJhdGlvblRpbWU+PWI/KHdmKDk3LGZ1bmN0aW9uKCl7Yy5fb25Db21wbGV0ZSgpO3JldHVybiBudWxsfSksITApOiExfWZ1bmN0aW9uIGJqKCl7aWYobnVsbCE9PVRpKXt2YXIgYT1UaTtUaT1udWxsO2EuZm9yRWFjaChmdW5jdGlvbihhLGMpe3hmKFouYmluZChudWxsLGMsYSkpfSk7TygpfX1mdW5jdGlvbiBlaihhLGIpe3ZhciBjPVU7VXw9MTt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXtVPWMsVT09PVQmJk8oKX19ZnVuY3Rpb24gZmooYSxiLGMsZCl7dmFyIGU9VTtVfD00O3RyeXtyZXR1cm4gdmYoOTgsYS5iaW5kKG51bGwsYixjLGQpKX1maW5hbGx5e1U9ZSxVPT09VCYmTygpfX1cbmZ1bmN0aW9uIGdqKGEsYil7dmFyIGM9VTtVJj0tMjtVfD1CaTt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXtVPWMsVT09PVQmJk8oKX19XG5mdW5jdGlvbiBoaihhLGIpe2EuZmluaXNoZWRXb3JrPW51bGw7YS5maW5pc2hlZEV4cGlyYXRpb25UaW1lPTA7dmFyIGM9YS50aW1lb3V0SGFuZGxlOy0xIT09YyYmKGEudGltZW91dEhhbmRsZT0tMSxNZShjKSk7aWYobnVsbCE9PVYpZm9yKGM9Vi5yZXR1cm47bnVsbCE9PWM7KXt2YXIgZD1jO3N3aXRjaChkLnRhZyl7Y2FzZSAxOnZhciBlPWQudHlwZS5jaGlsZENvbnRleHRUeXBlcztudWxsIT09ZSYmdm9pZCAwIT09ZSYmVGUoZCk7YnJlYWs7Y2FzZSAzOkJnKGQpO1VlKGQpO2JyZWFrO2Nhc2UgNTpEZyhkKTticmVhaztjYXNlIDQ6QmcoZCk7YnJlYWs7Y2FzZSAxMzpIKFAsZCk7YnJlYWs7Y2FzZSAxOTpIKFAsZCk7YnJlYWs7Y2FzZSAxMDpJZihkKX1jPWMucmV0dXJufUppPWE7Vj1vZyhhLmN1cnJlbnQsbnVsbCxiKTtXPWI7WD1FaTtMaT1LaT0xMDczNzQxODIzO01pPW51bGw7Tmk9ITF9XG5mdW5jdGlvbiBaKGEsYixjKXtpZigoVSYoQ2l8RGkpKSE9PVQpdGhyb3cgdChFcnJvcigzMjcpKTtpZihhLmZpcnN0UGVuZGluZ1RpbWU8YilyZXR1cm4gbnVsbDtpZihjJiZhLmZpbmlzaGVkRXhwaXJhdGlvblRpbWU9PT1iKXJldHVybiBpai5iaW5kKG51bGwsYSk7Y2ooKTtpZihhIT09Sml8fGIhPT1XKWhqKGEsYik7ZWxzZSBpZihYPT09SGkpaWYoTmkpaGooYSxiKTtlbHNle3ZhciBkPWEubGFzdFBlbmRpbmdUaW1lO2lmKGQ8YilyZXR1cm4gWi5iaW5kKG51bGwsYSxkKX1pZihudWxsIT09Vil7ZD1VO1V8PUNpO3ZhciBlPXppLmN1cnJlbnQ7bnVsbD09PWUmJihlPWhoKTt6aS5jdXJyZW50PWhoO2lmKGMpe2lmKDEwNzM3NDE4MjMhPT1iKXt2YXIgZj1jZygpO2lmKGY8YilyZXR1cm4gVT1kLEdmKCksemkuY3VycmVudD1lLFouYmluZChudWxsLGEsZil9fWVsc2UgV2k9MDtkbyB0cnl7aWYoYylmb3IoO251bGwhPT1WOylWPWpqKFYpO2Vsc2UgZm9yKDtudWxsIT09ViYmIWJmKCk7KVY9XG5qaihWKTticmVha31jYXRjaChyYil7R2YoKTtpaCgpO2Y9VjtpZihudWxsPT09Znx8bnVsbD09PWYucmV0dXJuKXRocm93IGhqKGEsYiksVT1kLHJiO2E6e3ZhciBoPWEsZz1mLnJldHVybixrPWYsbD1yYixuPVc7ay5lZmZlY3RUYWd8PTEwMjQ7ay5maXJzdEVmZmVjdD1rLmxhc3RFZmZlY3Q9bnVsbDtpZihudWxsIT09bCYmXCJvYmplY3RcIj09PXR5cGVvZiBsJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgbC50aGVuKXt2YXIgej1sLHg9MCE9PShQLmN1cnJlbnQmRmcpO2w9Zztkb3t2YXIgdjtpZih2PTEzPT09bC50YWcpbnVsbCE9PWwubWVtb2l6ZWRTdGF0ZT92PSExOih2PWwubWVtb2l6ZWRQcm9wcyx2PXZvaWQgMD09PXYuZmFsbGJhY2s/ITE6ITAhPT12LnVuc3RhYmxlX2F2b2lkVGhpc0ZhbGxiYWNrPyEwOng/ITE6ITApO2lmKHYpe2c9bC51cGRhdGVRdWV1ZTtudWxsPT09Zz8oZz1uZXcgU2V0LGcuYWRkKHopLGwudXBkYXRlUXVldWU9Zyk6Zy5hZGQoeik7aWYoMD09PShsLm1vZGUmXG4yKSl7bC5lZmZlY3RUYWd8PTY0O2suZWZmZWN0VGFnJj0tMTk1NzsxPT09ay50YWcmJihudWxsPT09ay5hbHRlcm5hdGU/ay50YWc9MTc6KG49UWYoMTA3Mzc0MTgyMyxudWxsKSxuLnRhZz0yLFNmKGssbikpKTtrLmV4cGlyYXRpb25UaW1lPTEwNzM3NDE4MjM7YnJlYWsgYX1rPWg7aD1uO3g9ay5waW5nQ2FjaGU7bnVsbD09PXg/KHg9ay5waW5nQ2FjaGU9bmV3IHNpLGc9bmV3IFNldCx4LnNldCh6LGcpKTooZz14LmdldCh6KSx2b2lkIDA9PT1nJiYoZz1uZXcgU2V0LHguc2V0KHosZykpKTtnLmhhcyhoKXx8KGcuYWRkKGgpLGs9a2ouYmluZChudWxsLGsseixoKSx6LnRoZW4oayxrKSk7bC5lZmZlY3RUYWd8PTIwNDg7bC5leHBpcmF0aW9uVGltZT1uO2JyZWFrIGF9bD1sLnJldHVybn13aGlsZShudWxsIT09bCk7bD1FcnJvcigob2Moay50eXBlKXx8XCJBIFJlYWN0IGNvbXBvbmVudFwiKStcIiBzdXNwZW5kZWQgd2hpbGUgcmVuZGVyaW5nLCBidXQgbm8gZmFsbGJhY2sgVUkgd2FzIHNwZWNpZmllZC5cXG5cXG5BZGQgYSA8U3VzcGVuc2UgZmFsbGJhY2s9Li4uPiBjb21wb25lbnQgaGlnaGVyIGluIHRoZSB0cmVlIHRvIHByb3ZpZGUgYSBsb2FkaW5nIGluZGljYXRvciBvciBwbGFjZWhvbGRlciB0byBkaXNwbGF5LlwiK1xucGMoaykpfVghPT1JaSYmKFg9RmkpO2w9YmkobCxrKTtrPWc7ZG97c3dpdGNoKGsudGFnKXtjYXNlIDM6ay5lZmZlY3RUYWd8PTIwNDg7ay5leHBpcmF0aW9uVGltZT1uO249dGkoayxsLG4pO1RmKGssbik7YnJlYWsgYTtjYXNlIDE6aWYoej1sLGg9ay50eXBlLGc9ay5zdGF0ZU5vZGUsMD09PShrLmVmZmVjdFRhZyY2NCkmJihcImZ1bmN0aW9uXCI9PT10eXBlb2YgaC5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3J8fG51bGwhPT1nJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRDYXRjaCYmKG51bGw9PT14aXx8IXhpLmhhcyhnKSkpKXtrLmVmZmVjdFRhZ3w9MjA0ODtrLmV4cGlyYXRpb25UaW1lPW47bj13aShrLHosbik7VGYoayxuKTticmVhayBhfX1rPWsucmV0dXJufXdoaWxlKG51bGwhPT1rKX1WPWxqKGYpfXdoaWxlKDEpO1U9ZDtHZigpO3ppLmN1cnJlbnQ9ZTtpZihudWxsIT09VilyZXR1cm4gWi5iaW5kKG51bGwsYSxiKX1hLmZpbmlzaGVkV29yaz1hLmN1cnJlbnQuYWx0ZXJuYXRlO1xuYS5maW5pc2hlZEV4cGlyYXRpb25UaW1lPWI7aWYoZGooYSxiKSlyZXR1cm4gbnVsbDtKaT1udWxsO3N3aXRjaChYKXtjYXNlIEVpOnRocm93IHQoRXJyb3IoMzI4KSk7Y2FzZSBGaTpyZXR1cm4gZD1hLmxhc3RQZW5kaW5nVGltZSxkPGI/Wi5iaW5kKG51bGwsYSxkKTpjP2lqLmJpbmQobnVsbCxhKTooaGooYSxiKSx4ZihaLmJpbmQobnVsbCxhLGIpKSxudWxsKTtjYXNlIEdpOmlmKDEwNzM3NDE4MjM9PT1LaSYmIWMmJihjPXBpK09pLXNmKCksMTA8Yykpe2lmKE5pKXJldHVybiBoaihhLGIpLFouYmluZChudWxsLGEsYik7ZD1hLmxhc3RQZW5kaW5nVGltZTtpZihkPGIpcmV0dXJuIFouYmluZChudWxsLGEsZCk7YS50aW1lb3V0SGFuZGxlPUxlKGlqLmJpbmQobnVsbCxhKSxjKTtyZXR1cm4gbnVsbH1yZXR1cm4gaWouYmluZChudWxsLGEpO2Nhc2UgSGk6aWYoIWMpe2lmKE5pKXJldHVybiBoaihhLGIpLFouYmluZChudWxsLGEsYik7Yz1hLmxhc3RQZW5kaW5nVGltZTtpZihjPGIpcmV0dXJuIFouYmluZChudWxsLFxuYSxjKTsxMDczNzQxODIzIT09TGk/Yz0xMCooMTA3Mzc0MTgyMS1MaSktc2YoKToxMDczNzQxODIzPT09S2k/Yz0wOihjPTEwKigxMDczNzQxODIxLUtpKS01RTMsZD1zZigpLGI9MTAqKDEwNzM3NDE4MjEtYiktZCxjPWQtYywwPmMmJihjPTApLGM9KDEyMD5jPzEyMDo0ODA+Yz80ODA6MTA4MD5jPzEwODA6MTkyMD5jPzE5MjA6M0UzPmM/M0UzOjQzMjA+Yz80MzIwOjE5NjAqeWkoYy8xOTYwKSktYyxiPGMmJihjPWIpKTtpZigxMDxjKXJldHVybiBhLnRpbWVvdXRIYW5kbGU9TGUoaWouYmluZChudWxsLGEpLGMpLG51bGx9cmV0dXJuIGlqLmJpbmQobnVsbCxhKTtjYXNlIElpOnJldHVybiFjJiYxMDczNzQxODIzIT09S2kmJm51bGwhPT1NaSYmKGQ9S2ksZT1NaSxiPWUuYnVzeU1pbkR1cmF0aW9uTXN8MCwwPj1iP2I9MDooYz1lLmJ1c3lEZWxheU1zfDAsZD1zZigpLSgxMCooMTA3Mzc0MTgyMS1kKS0oZS50aW1lb3V0TXN8MHx8NUUzKSksYj1kPD1jPzA6YytiLWQpLDEwPGIpPyhhLnRpbWVvdXRIYW5kbGU9XG5MZShpai5iaW5kKG51bGwsYSksYiksbnVsbCk6aWouYmluZChudWxsLGEpO2RlZmF1bHQ6dGhyb3cgdChFcnJvcigzMjkpKTt9fWZ1bmN0aW9uIFhmKGEsYil7YTxLaSYmMTxhJiYoS2k9YSk7bnVsbCE9PWImJmE8TGkmJjE8YSYmKExpPWEsTWk9Yil9ZnVuY3Rpb24gamooYSl7dmFyIGI9bWooYS5hbHRlcm5hdGUsYSxXKTthLm1lbW9pemVkUHJvcHM9YS5wZW5kaW5nUHJvcHM7bnVsbD09PWImJihiPWxqKGEpKTtBaS5jdXJyZW50PW51bGw7cmV0dXJuIGJ9XG5mdW5jdGlvbiBsaihhKXtWPWE7ZG97dmFyIGI9Vi5hbHRlcm5hdGU7YT1WLnJldHVybjtpZigwPT09KFYuZWZmZWN0VGFnJjEwMjQpKXthOnt2YXIgYz1iO2I9Vjt2YXIgZD1XLGU9Yi5wZW5kaW5nUHJvcHM7c3dpdGNoKGIudGFnKXtjYXNlIDI6YnJlYWs7Y2FzZSAxNjpicmVhaztjYXNlIDE1OmNhc2UgMDpicmVhaztjYXNlIDE6TihiLnR5cGUpJiZUZShiKTticmVhaztjYXNlIDM6QmcoYik7VWUoYik7ZD1iLnN0YXRlTm9kZTtkLnBlbmRpbmdDb250ZXh0JiYoZC5jb250ZXh0PWQucGVuZGluZ0NvbnRleHQsZC5wZW5kaW5nQ29udGV4dD1udWxsKTtpZihudWxsPT09Y3x8bnVsbD09PWMuY2hpbGQpQmgoYiksYi5lZmZlY3RUYWcmPS0zO1VoKGIpO2JyZWFrO2Nhc2UgNTpEZyhiKTtkPXpnKHlnLmN1cnJlbnQpO3ZhciBmPWIudHlwZTtpZihudWxsIT09YyYmbnVsbCE9Yi5zdGF0ZU5vZGUpVmgoYyxiLGYsZSxkKSxjLnJlZiE9PWIucmVmJiYoYi5lZmZlY3RUYWd8PTEyOCk7ZWxzZSBpZihlKXt2YXIgaD1cbnpnKHdnLmN1cnJlbnQpO2lmKEJoKGIpKXtjPWI7ZT12b2lkIDA7Zj1jLnN0YXRlTm9kZTt2YXIgZz1jLnR5cGUsaz1jLm1lbW9pemVkUHJvcHM7ZltGYV09YztmW0dhXT1rO3N3aXRjaChnKXtjYXNlIFwiaWZyYW1lXCI6Y2FzZSBcIm9iamVjdFwiOmNhc2UgXCJlbWJlZFwiOkcoXCJsb2FkXCIsZik7YnJlYWs7Y2FzZSBcInZpZGVvXCI6Y2FzZSBcImF1ZGlvXCI6Zm9yKHZhciBsPTA7bDxiYi5sZW5ndGg7bCsrKUcoYmJbbF0sZik7YnJlYWs7Y2FzZSBcInNvdXJjZVwiOkcoXCJlcnJvclwiLGYpO2JyZWFrO2Nhc2UgXCJpbWdcIjpjYXNlIFwiaW1hZ2VcIjpjYXNlIFwibGlua1wiOkcoXCJlcnJvclwiLGYpO0coXCJsb2FkXCIsZik7YnJlYWs7Y2FzZSBcImZvcm1cIjpHKFwicmVzZXRcIixmKTtHKFwic3VibWl0XCIsZik7YnJlYWs7Y2FzZSBcImRldGFpbHNcIjpHKFwidG9nZ2xlXCIsZik7YnJlYWs7Y2FzZSBcImlucHV0XCI6Q2MoZixrKTtHKFwiaW52YWxpZFwiLGYpO0ZlKGQsXCJvbkNoYW5nZVwiKTticmVhaztjYXNlIFwic2VsZWN0XCI6Zi5fd3JhcHBlclN0YXRlPVxue3dhc011bHRpcGxlOiEhay5tdWx0aXBsZX07RyhcImludmFsaWRcIixmKTtGZShkLFwib25DaGFuZ2VcIik7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6b2UoZixrKSxHKFwiaW52YWxpZFwiLGYpLEZlKGQsXCJvbkNoYW5nZVwiKX1EZShnLGspO2w9bnVsbDtmb3IoZSBpbiBrKWsuaGFzT3duUHJvcGVydHkoZSkmJihoPWtbZV0sXCJjaGlsZHJlblwiPT09ZT9cInN0cmluZ1wiPT09dHlwZW9mIGg/Zi50ZXh0Q29udGVudCE9PWgmJihsPVtcImNoaWxkcmVuXCIsaF0pOlwibnVtYmVyXCI9PT10eXBlb2YgaCYmZi50ZXh0Q29udGVudCE9PVwiXCIraCYmKGw9W1wiY2hpbGRyZW5cIixcIlwiK2hdKTppYS5oYXNPd25Qcm9wZXJ0eShlKSYmbnVsbCE9aCYmRmUoZCxlKSk7c3dpdGNoKGcpe2Nhc2UgXCJpbnB1dFwiOlZiKGYpO0djKGYsaywhMCk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6VmIoZik7cWUoZixrKTticmVhaztjYXNlIFwic2VsZWN0XCI6Y2FzZSBcIm9wdGlvblwiOmJyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiPT09dHlwZW9mIGsub25DbGljayYmXG4oZi5vbmNsaWNrPUdlKX1kPWw7Yy51cGRhdGVRdWV1ZT1kO251bGwhPT1kJiZTaChiKX1lbHNle2s9ZjtjPWU7Zz1iO2w9OT09PWQubm9kZVR5cGU/ZDpkLm93bmVyRG9jdW1lbnQ7aD09PXJlLmh0bWwmJihoPXNlKGspKTtoPT09cmUuaHRtbD9cInNjcmlwdFwiPT09az8oaz1sLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksay5pbm5lckhUTUw9XCI8c2NyaXB0PlxceDNjL3NjcmlwdD5cIixsPWsucmVtb3ZlQ2hpbGQoay5maXJzdENoaWxkKSk6XCJzdHJpbmdcIj09PXR5cGVvZiBjLmlzP2w9bC5jcmVhdGVFbGVtZW50KGsse2lzOmMuaXN9KToobD1sLmNyZWF0ZUVsZW1lbnQoayksXCJzZWxlY3RcIj09PWsmJihrPWwsYy5tdWx0aXBsZT9rLm11bHRpcGxlPSEwOmMuc2l6ZSYmKGsuc2l6ZT1jLnNpemUpKSk6bD1sLmNyZWF0ZUVsZW1lbnROUyhoLGspO2s9bDtrW0ZhXT1nO2tbR2FdPWM7Yz1rO1RoKGMsYiwhMSwhMSk7Zz1jO3ZhciBuPWQsej1FZShmLGUpO3N3aXRjaChmKXtjYXNlIFwiaWZyYW1lXCI6Y2FzZSBcIm9iamVjdFwiOmNhc2UgXCJlbWJlZFwiOkcoXCJsb2FkXCIsXG5nKTtkPWU7YnJlYWs7Y2FzZSBcInZpZGVvXCI6Y2FzZSBcImF1ZGlvXCI6Zm9yKGQ9MDtkPGJiLmxlbmd0aDtkKyspRyhiYltkXSxnKTtkPWU7YnJlYWs7Y2FzZSBcInNvdXJjZVwiOkcoXCJlcnJvclwiLGcpO2Q9ZTticmVhaztjYXNlIFwiaW1nXCI6Y2FzZSBcImltYWdlXCI6Y2FzZSBcImxpbmtcIjpHKFwiZXJyb3JcIixnKTtHKFwibG9hZFwiLGcpO2Q9ZTticmVhaztjYXNlIFwiZm9ybVwiOkcoXCJyZXNldFwiLGcpO0coXCJzdWJtaXRcIixnKTtkPWU7YnJlYWs7Y2FzZSBcImRldGFpbHNcIjpHKFwidG9nZ2xlXCIsZyk7ZD1lO2JyZWFrO2Nhc2UgXCJpbnB1dFwiOkNjKGcsZSk7ZD1CYyhnLGUpO0coXCJpbnZhbGlkXCIsZyk7RmUobixcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpkPWxlKGcsZSk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmcuX3dyYXBwZXJTdGF0ZT17d2FzTXVsdGlwbGU6ISFlLm11bHRpcGxlfTtkPW0oe30sZSx7dmFsdWU6dm9pZCAwfSk7RyhcImludmFsaWRcIixnKTtGZShuLFwib25DaGFuZ2VcIik7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6b2UoZyxcbmUpO2Q9bmUoZyxlKTtHKFwiaW52YWxpZFwiLGcpO0ZlKG4sXCJvbkNoYW5nZVwiKTticmVhaztkZWZhdWx0OmQ9ZX1EZShmLGQpO2s9dm9pZCAwO2w9ZjtoPWc7dmFyIHg9ZDtmb3IoayBpbiB4KWlmKHguaGFzT3duUHJvcGVydHkoaykpe3ZhciB2PXhba107XCJzdHlsZVwiPT09az9BZShoLHYpOlwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWs/KHY9dj92Ll9faHRtbDp2b2lkIDAsbnVsbCE9diYmdmUoaCx2KSk6XCJjaGlsZHJlblwiPT09az9cInN0cmluZ1wiPT09dHlwZW9mIHY/KFwidGV4dGFyZWFcIiE9PWx8fFwiXCIhPT12KSYmd2UoaCx2KTpcIm51bWJlclwiPT09dHlwZW9mIHYmJndlKGgsXCJcIit2KTpcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09ayYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWsmJlwiYXV0b0ZvY3VzXCIhPT1rJiYoaWEuaGFzT3duUHJvcGVydHkoayk/bnVsbCE9diYmRmUobixrKTpudWxsIT12JiZ6YyhoLGssdix6KSl9c3dpdGNoKGYpe2Nhc2UgXCJpbnB1dFwiOlZiKGcpO1xuR2MoZyxlLCExKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpWYihnKTtxZShnLGUpO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpudWxsIT1lLnZhbHVlJiZnLnNldEF0dHJpYnV0ZShcInZhbHVlXCIsXCJcIitBYyhlLnZhbHVlKSk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmQ9ZztnPWU7ZC5tdWx0aXBsZT0hIWcubXVsdGlwbGU7az1nLnZhbHVlO251bGwhPWs/bWUoZCwhIWcubXVsdGlwbGUsaywhMSk6bnVsbCE9Zy5kZWZhdWx0VmFsdWUmJm1lKGQsISFnLm11bHRpcGxlLGcuZGVmYXVsdFZhbHVlLCEwKTticmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLm9uQ2xpY2smJihnLm9uY2xpY2s9R2UpfUplKGYsZSkmJlNoKGIpO2Iuc3RhdGVOb2RlPWN9bnVsbCE9PWIucmVmJiYoYi5lZmZlY3RUYWd8PTEyOCl9ZWxzZSBpZihudWxsPT09Yi5zdGF0ZU5vZGUpdGhyb3cgdChFcnJvcigxNjYpKTticmVhaztjYXNlIDY6aWYoYyYmbnVsbCE9Yi5zdGF0ZU5vZGUpV2goYyxiLGMubWVtb2l6ZWRQcm9wcyxcbmUpO2Vsc2V7aWYoXCJzdHJpbmdcIiE9PXR5cGVvZiBlJiZudWxsPT09Yi5zdGF0ZU5vZGUpdGhyb3cgdChFcnJvcigxNjYpKTtjPXpnKHlnLmN1cnJlbnQpO3pnKHdnLmN1cnJlbnQpO0JoKGIpPyhkPWIuc3RhdGVOb2RlLGM9Yi5tZW1vaXplZFByb3BzLGRbRmFdPWIsZC5ub2RlVmFsdWUhPT1jJiZTaChiKSk6KGQ9YixjPSg5PT09Yy5ub2RlVHlwZT9jOmMub3duZXJEb2N1bWVudCkuY3JlYXRlVGV4dE5vZGUoZSksY1tGYV09YixkLnN0YXRlTm9kZT1jKX1icmVhaztjYXNlIDExOmJyZWFrO2Nhc2UgMTM6SChQLGIpO2U9Yi5tZW1vaXplZFN0YXRlO2lmKDAhPT0oYi5lZmZlY3RUYWcmNjQpKXtiLmV4cGlyYXRpb25UaW1lPWQ7YnJlYWsgYX1kPW51bGwhPT1lO2U9ITE7bnVsbD09PWM/QmgoYik6KGY9Yy5tZW1vaXplZFN0YXRlLGU9bnVsbCE9PWYsZHx8bnVsbD09PWZ8fChmPWMuY2hpbGQuc2libGluZyxudWxsIT09ZiYmKGc9Yi5maXJzdEVmZmVjdCxudWxsIT09Zz8oYi5maXJzdEVmZmVjdD1cbmYsZi5uZXh0RWZmZWN0PWcpOihiLmZpcnN0RWZmZWN0PWIubGFzdEVmZmVjdD1mLGYubmV4dEVmZmVjdD1udWxsKSxmLmVmZmVjdFRhZz04KSkpO2lmKGQmJiFlJiYwIT09KGIubW9kZSYyKSlpZihudWxsPT09YyYmITAhPT1iLm1lbW9pemVkUHJvcHMudW5zdGFibGVfYXZvaWRUaGlzRmFsbGJhY2t8fDAhPT0oUC5jdXJyZW50JkZnKSlYPT09RWkmJihYPUdpKTtlbHNlIGlmKFg9PT1FaXx8WD09PUdpKVg9SGk7aWYoZHx8ZSliLmVmZmVjdFRhZ3w9NDticmVhaztjYXNlIDc6YnJlYWs7Y2FzZSA4OmJyZWFrO2Nhc2UgMTI6YnJlYWs7Y2FzZSA0OkJnKGIpO1VoKGIpO2JyZWFrO2Nhc2UgMTA6SWYoYik7YnJlYWs7Y2FzZSA5OmJyZWFrO2Nhc2UgMTQ6YnJlYWs7Y2FzZSAxNzpOKGIudHlwZSkmJlRlKGIpO2JyZWFrO2Nhc2UgMTg6YnJlYWs7Y2FzZSAxOTpIKFAsYik7ZT1iLm1lbW9pemVkU3RhdGU7aWYobnVsbD09PWUpYnJlYWs7Zj0wIT09KGIuZWZmZWN0VGFnJjY0KTtnPWUucmVuZGVyaW5nO1xuaWYobnVsbD09PWcpaWYoZikkaChlLCExKTtlbHNle2lmKFghPT1FaXx8bnVsbCE9PWMmJjAhPT0oYy5lZmZlY3RUYWcmNjQpKWZvcihjPWIuY2hpbGQ7bnVsbCE9PWM7KXtnPUhnKGMpO2lmKG51bGwhPT1nKXtiLmVmZmVjdFRhZ3w9NjQ7JGgoZSwhMSk7Yz1nLnVwZGF0ZVF1ZXVlO251bGwhPT1jJiYoYi51cGRhdGVRdWV1ZT1jLGIuZWZmZWN0VGFnfD00KTtiLmZpcnN0RWZmZWN0PWIubGFzdEVmZmVjdD1udWxsO2ZvcihjPWIuY2hpbGQ7bnVsbCE9PWM7KWU9YyxmPWQsZS5lZmZlY3RUYWcmPTIsZS5uZXh0RWZmZWN0PW51bGwsZS5maXJzdEVmZmVjdD1udWxsLGUubGFzdEVmZmVjdD1udWxsLGc9ZS5hbHRlcm5hdGUsbnVsbD09PWc/KGUuY2hpbGRFeHBpcmF0aW9uVGltZT0wLGUuZXhwaXJhdGlvblRpbWU9ZixlLmNoaWxkPW51bGwsZS5tZW1vaXplZFByb3BzPW51bGwsZS5tZW1vaXplZFN0YXRlPW51bGwsZS51cGRhdGVRdWV1ZT1udWxsLGUuZGVwZW5kZW5jaWVzPW51bGwpOihlLmNoaWxkRXhwaXJhdGlvblRpbWU9XG5nLmNoaWxkRXhwaXJhdGlvblRpbWUsZS5leHBpcmF0aW9uVGltZT1nLmV4cGlyYXRpb25UaW1lLGUuY2hpbGQ9Zy5jaGlsZCxlLm1lbW9pemVkUHJvcHM9Zy5tZW1vaXplZFByb3BzLGUubWVtb2l6ZWRTdGF0ZT1nLm1lbW9pemVkU3RhdGUsZS51cGRhdGVRdWV1ZT1nLnVwZGF0ZVF1ZXVlLGY9Zy5kZXBlbmRlbmNpZXMsZS5kZXBlbmRlbmNpZXM9bnVsbD09PWY/bnVsbDp7ZXhwaXJhdGlvblRpbWU6Zi5leHBpcmF0aW9uVGltZSxmaXJzdENvbnRleHQ6Zi5maXJzdENvbnRleHQscmVzcG9uZGVyczpmLnJlc3BvbmRlcnN9KSxjPWMuc2libGluZztKKFAsUC5jdXJyZW50JkVnfEdnLGIpO2I9Yi5jaGlsZDticmVhayBhfWM9Yy5zaWJsaW5nfX1lbHNle2lmKCFmKWlmKGM9SGcoZyksbnVsbCE9PWMpe2lmKGIuZWZmZWN0VGFnfD02NCxmPSEwLCRoKGUsITApLG51bGw9PT1lLnRhaWwmJlwiaGlkZGVuXCI9PT1lLnRhaWxNb2RlKXtkPWMudXBkYXRlUXVldWU7bnVsbCE9PWQmJihiLnVwZGF0ZVF1ZXVlPVxuZCxiLmVmZmVjdFRhZ3w9NCk7Yj1iLmxhc3RFZmZlY3Q9ZS5sYXN0RWZmZWN0O251bGwhPT1iJiYoYi5uZXh0RWZmZWN0PW51bGwpO2JyZWFrfX1lbHNlIHNmKCk+ZS50YWlsRXhwaXJhdGlvbiYmMTxkJiYoYi5lZmZlY3RUYWd8PTY0LGY9ITAsJGgoZSwhMSksYi5leHBpcmF0aW9uVGltZT1iLmNoaWxkRXhwaXJhdGlvblRpbWU9ZC0xKTtlLmlzQmFja3dhcmRzPyhnLnNpYmxpbmc9Yi5jaGlsZCxiLmNoaWxkPWcpOihkPWUubGFzdCxudWxsIT09ZD9kLnNpYmxpbmc9ZzpiLmNoaWxkPWcsZS5sYXN0PWcpfWlmKG51bGwhPT1lLnRhaWwpezA9PT1lLnRhaWxFeHBpcmF0aW9uJiYoZS50YWlsRXhwaXJhdGlvbj1zZigpKzUwMCk7ZD1lLnRhaWw7ZS5yZW5kZXJpbmc9ZDtlLnRhaWw9ZC5zaWJsaW5nO2UubGFzdEVmZmVjdD1iLmxhc3RFZmZlY3Q7ZC5zaWJsaW5nPW51bGw7Yz1QLmN1cnJlbnQ7Yz1mP2MmRWd8R2c6YyZFZztKKFAsYyxiKTtiPWQ7YnJlYWsgYX1icmVhaztjYXNlIDIwOmJyZWFrO1xuZGVmYXVsdDp0aHJvdyB0KEVycm9yKDE1NikpO31iPW51bGx9ZD1WO2lmKDE9PT1XfHwxIT09ZC5jaGlsZEV4cGlyYXRpb25UaW1lKXtjPTA7Zm9yKGU9ZC5jaGlsZDtudWxsIT09ZTspZj1lLmV4cGlyYXRpb25UaW1lLGc9ZS5jaGlsZEV4cGlyYXRpb25UaW1lLGY+YyYmKGM9ZiksZz5jJiYoYz1nKSxlPWUuc2libGluZztkLmNoaWxkRXhwaXJhdGlvblRpbWU9Y31pZihudWxsIT09YilyZXR1cm4gYjtudWxsIT09YSYmMD09PShhLmVmZmVjdFRhZyYxMDI0KSYmKG51bGw9PT1hLmZpcnN0RWZmZWN0JiYoYS5maXJzdEVmZmVjdD1WLmZpcnN0RWZmZWN0KSxudWxsIT09Vi5sYXN0RWZmZWN0JiYobnVsbCE9PWEubGFzdEVmZmVjdCYmKGEubGFzdEVmZmVjdC5uZXh0RWZmZWN0PVYuZmlyc3RFZmZlY3QpLGEubGFzdEVmZmVjdD1WLmxhc3RFZmZlY3QpLDE8Vi5lZmZlY3RUYWcmJihudWxsIT09YS5sYXN0RWZmZWN0P2EubGFzdEVmZmVjdC5uZXh0RWZmZWN0PVY6YS5maXJzdEVmZmVjdD1WLFxuYS5sYXN0RWZmZWN0PVYpKX1lbHNle2I9YWkoVixXKTtpZihudWxsIT09YilyZXR1cm4gYi5lZmZlY3RUYWcmPTEwMjMsYjtudWxsIT09YSYmKGEuZmlyc3RFZmZlY3Q9YS5sYXN0RWZmZWN0PW51bGwsYS5lZmZlY3RUYWd8PTEwMjQpfWI9Vi5zaWJsaW5nO2lmKG51bGwhPT1iKXJldHVybiBiO1Y9YX13aGlsZShudWxsIT09Vik7WD09PUVpJiYoWD1JaSk7cmV0dXJuIG51bGx9ZnVuY3Rpb24gaWooYSl7dmFyIGI9dGYoKTt2Zig5OSxuai5iaW5kKG51bGwsYSxiKSk7bnVsbCE9PVFpJiZ3Zig5NyxmdW5jdGlvbigpe2NqKCk7cmV0dXJuIG51bGx9KTtyZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIG5qKGEsYil7Y2ooKTtpZigoVSYoQ2l8RGkpKSE9PVQpdGhyb3cgdChFcnJvcigzMjcpKTt2YXIgYz1hLmZpbmlzaGVkV29yayxkPWEuZmluaXNoZWRFeHBpcmF0aW9uVGltZTtpZihudWxsPT09YylyZXR1cm4gbnVsbDthLmZpbmlzaGVkV29yaz1udWxsO2EuZmluaXNoZWRFeHBpcmF0aW9uVGltZT0wO2lmKGM9PT1hLmN1cnJlbnQpdGhyb3cgdChFcnJvcigxNzcpKTthLmNhbGxiYWNrTm9kZT1udWxsO2EuY2FsbGJhY2tFeHBpcmF0aW9uVGltZT0wO3ZhciBlPWMuZXhwaXJhdGlvblRpbWUsZj1jLmNoaWxkRXhwaXJhdGlvblRpbWU7ZT1mPmU/ZjplO2EuZmlyc3RQZW5kaW5nVGltZT1lO2U8YS5sYXN0UGVuZGluZ1RpbWUmJihhLmxhc3RQZW5kaW5nVGltZT1lKTthPT09SmkmJihWPUppPW51bGwsVz0wKTsxPGMuZWZmZWN0VGFnP251bGwhPT1jLmxhc3RFZmZlY3Q/KGMubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWMsZT1jLmZpcnN0RWZmZWN0KTplPWM6ZT1jLmZpcnN0RWZmZWN0O1xuaWYobnVsbCE9PWUpe2Y9VTtVfD1EaTtBaS5jdXJyZW50PW51bGw7SGU9UWQ7dmFyIGg9YWUoKTtpZihiZShoKSl7aWYoXCJzZWxlY3Rpb25TdGFydFwiaW4gaCl2YXIgZz17c3RhcnQ6aC5zZWxlY3Rpb25TdGFydCxlbmQ6aC5zZWxlY3Rpb25FbmR9O2Vsc2UgYTp7Zz0oZz1oLm93bmVyRG9jdW1lbnQpJiZnLmRlZmF1bHRWaWV3fHx3aW5kb3c7dmFyIGs9Zy5nZXRTZWxlY3Rpb24mJmcuZ2V0U2VsZWN0aW9uKCk7aWYoayYmMCE9PWsucmFuZ2VDb3VudCl7Zz1rLmFuY2hvck5vZGU7dmFyIGw9ay5hbmNob3JPZmZzZXQsbj1rLmZvY3VzTm9kZTtrPWsuZm9jdXNPZmZzZXQ7dHJ5e2cubm9kZVR5cGUsbi5ub2RlVHlwZX1jYXRjaCh6Yil7Zz1udWxsO2JyZWFrIGF9dmFyIHo9MCx4PS0xLHY9LTEscmI9MCxCZT0wLHU9aCx3PW51bGw7Yjpmb3IoOzspe2Zvcih2YXIgQzs7KXt1IT09Z3x8MCE9PWwmJjMhPT11Lm5vZGVUeXBlfHwoeD16K2wpO3UhPT1ufHwwIT09ayYmMyE9PXUubm9kZVR5cGV8fFxuKHY9eitrKTszPT09dS5ub2RlVHlwZSYmKHorPXUubm9kZVZhbHVlLmxlbmd0aCk7aWYobnVsbD09PShDPXUuZmlyc3RDaGlsZCkpYnJlYWs7dz11O3U9Q31mb3IoOzspe2lmKHU9PT1oKWJyZWFrIGI7dz09PWcmJisrcmI9PT1sJiYoeD16KTt3PT09biYmKytCZT09PWsmJih2PXopO2lmKG51bGwhPT0oQz11Lm5leHRTaWJsaW5nKSlicmVhazt1PXc7dz11LnBhcmVudE5vZGV9dT1DfWc9LTE9PT14fHwtMT09PXY/bnVsbDp7c3RhcnQ6eCxlbmQ6dn19ZWxzZSBnPW51bGx9Zz1nfHx7c3RhcnQ6MCxlbmQ6MH19ZWxzZSBnPW51bGw7SWU9e2ZvY3VzZWRFbGVtOmgsc2VsZWN0aW9uUmFuZ2U6Z307UWQ9ITE7WT1lO2RvIHRyeXtmb3IoO251bGwhPT1ZOyl7aWYoMCE9PShZLmVmZmVjdFRhZyYyNTYpKXt2YXIgST1ZLmFsdGVybmF0ZTtoPVk7c3dpdGNoKGgudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OmhpKEpnLElnLGgpO2JyZWFrO2Nhc2UgMTppZihoLmVmZmVjdFRhZyYyNTYmJm51bGwhPT1cbkkpe3ZhciBFPUkubWVtb2l6ZWRQcm9wcyx1YT1JLm1lbW9pemVkU3RhdGUsZ2g9aC5zdGF0ZU5vZGUsb2o9Z2guZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUoaC5lbGVtZW50VHlwZT09PWgudHlwZT9FOkFmKGgudHlwZSxFKSx1YSk7Z2guX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGU9b2p9YnJlYWs7Y2FzZSAzOmNhc2UgNTpjYXNlIDY6Y2FzZSA0OmNhc2UgMTc6YnJlYWs7ZGVmYXVsdDp0aHJvdyB0KEVycm9yKDE2MykpO319WT1ZLm5leHRFZmZlY3R9fWNhdGNoKHpiKXtpZihudWxsPT09WSl0aHJvdyB0KEVycm9yKDMzMCkpO2ZpKFksemIpO1k9WS5uZXh0RWZmZWN0fXdoaWxlKG51bGwhPT1ZKTtZPWU7ZG8gdHJ5e2ZvcihJPWI7bnVsbCE9PVk7KXt2YXIgQT1ZLmVmZmVjdFRhZztBJjE2JiZ3ZShZLnN0YXRlTm9kZSxcIlwiKTtpZihBJjEyOCl7dmFyIHA9WS5hbHRlcm5hdGU7aWYobnVsbCE9PXApe3ZhciByPXAucmVmO251bGwhPT1yJiYoXCJmdW5jdGlvblwiPT09dHlwZW9mIHI/XG5yKG51bGwpOnIuY3VycmVudD1udWxsKX19c3dpdGNoKEEmMTQpe2Nhc2UgMjpuaShZKTtZLmVmZmVjdFRhZyY9LTM7YnJlYWs7Y2FzZSA2Om5pKFkpO1kuZWZmZWN0VGFnJj0tMztvaShZLmFsdGVybmF0ZSxZKTticmVhaztjYXNlIDQ6b2koWS5hbHRlcm5hdGUsWSk7YnJlYWs7Y2FzZSA4OkU9WTtraShFLEkpO0UucmV0dXJuPW51bGw7RS5jaGlsZD1udWxsO0UubWVtb2l6ZWRTdGF0ZT1udWxsO0UudXBkYXRlUXVldWU9bnVsbDtFLmRlcGVuZGVuY2llcz1udWxsO3ZhciBLPUUuYWx0ZXJuYXRlO251bGwhPT1LJiYoSy5yZXR1cm49bnVsbCxLLmNoaWxkPW51bGwsSy5tZW1vaXplZFN0YXRlPW51bGwsSy51cGRhdGVRdWV1ZT1udWxsLEsuZGVwZW5kZW5jaWVzPW51bGwpfVk9WS5uZXh0RWZmZWN0fX1jYXRjaCh6Yil7aWYobnVsbD09PVkpdGhyb3cgdChFcnJvcigzMzApKTtmaShZLHpiKTtZPVkubmV4dEVmZmVjdH13aGlsZShudWxsIT09WSk7cj1JZTtwPWFlKCk7QT1yLmZvY3VzZWRFbGVtO1xuST1yLnNlbGVjdGlvblJhbmdlO2lmKHAhPT1BJiZBJiZBLm93bmVyRG9jdW1lbnQmJiRkKEEub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsQSkpe251bGwhPT1JJiZiZShBKSYmKHA9SS5zdGFydCxyPUkuZW5kLHZvaWQgMD09PXImJihyPXApLFwic2VsZWN0aW9uU3RhcnRcImluIEE/KEEuc2VsZWN0aW9uU3RhcnQ9cCxBLnNlbGVjdGlvbkVuZD1NYXRoLm1pbihyLEEudmFsdWUubGVuZ3RoKSk6KHI9KHA9QS5vd25lckRvY3VtZW50fHxkb2N1bWVudCkmJnAuZGVmYXVsdFZpZXd8fHdpbmRvdyxyLmdldFNlbGVjdGlvbiYmKHI9ci5nZXRTZWxlY3Rpb24oKSxFPUEudGV4dENvbnRlbnQubGVuZ3RoLEs9TWF0aC5taW4oSS5zdGFydCxFKSxJPXZvaWQgMD09PUkuZW5kP0s6TWF0aC5taW4oSS5lbmQsRSksIXIuZXh0ZW5kJiZLPkkmJihFPUksST1LLEs9RSksRT1aZChBLEspLHVhPVpkKEEsSSksRSYmdWEmJigxIT09ci5yYW5nZUNvdW50fHxyLmFuY2hvck5vZGUhPT1FLm5vZGV8fHIuYW5jaG9yT2Zmc2V0IT09XG5FLm9mZnNldHx8ci5mb2N1c05vZGUhPT11YS5ub2RlfHxyLmZvY3VzT2Zmc2V0IT09dWEub2Zmc2V0KSYmKHA9cC5jcmVhdGVSYW5nZSgpLHAuc2V0U3RhcnQoRS5ub2RlLEUub2Zmc2V0KSxyLnJlbW92ZUFsbFJhbmdlcygpLEs+ST8oci5hZGRSYW5nZShwKSxyLmV4dGVuZCh1YS5ub2RlLHVhLm9mZnNldCkpOihwLnNldEVuZCh1YS5ub2RlLHVhLm9mZnNldCksci5hZGRSYW5nZShwKSkpKSkpO3A9W107Zm9yKHI9QTtyPXIucGFyZW50Tm9kZTspMT09PXIubm9kZVR5cGUmJnAucHVzaCh7ZWxlbWVudDpyLGxlZnQ6ci5zY3JvbGxMZWZ0LHRvcDpyLnNjcm9sbFRvcH0pO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBBLmZvY3VzJiZBLmZvY3VzKCk7Zm9yKEE9MDtBPHAubGVuZ3RoO0ErKylyPXBbQV0sci5lbGVtZW50LnNjcm9sbExlZnQ9ci5sZWZ0LHIuZWxlbWVudC5zY3JvbGxUb3A9ci50b3B9SWU9bnVsbDtRZD0hIUhlO0hlPW51bGw7YS5jdXJyZW50PWM7WT1lO2RvIHRyeXtmb3IoQT1kO251bGwhPT1cblk7KXt2YXIgJGE9WS5lZmZlY3RUYWc7aWYoJGEmMzYpe3ZhciBuYz1ZLmFsdGVybmF0ZTtwPVk7cj1BO3N3aXRjaChwLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpoaShNZyxOZyxwKTticmVhaztjYXNlIDE6dmFyIG1kPXAuc3RhdGVOb2RlO2lmKHAuZWZmZWN0VGFnJjQpaWYobnVsbD09PW5jKW1kLmNvbXBvbmVudERpZE1vdW50KCk7ZWxzZXt2YXIgRmo9cC5lbGVtZW50VHlwZT09PXAudHlwZT9uYy5tZW1vaXplZFByb3BzOkFmKHAudHlwZSxuYy5tZW1vaXplZFByb3BzKTttZC5jb21wb25lbnREaWRVcGRhdGUoRmosbmMubWVtb2l6ZWRTdGF0ZSxtZC5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZSl9dmFyIFhoPXAudXBkYXRlUXVldWU7bnVsbCE9PVhoJiZZZihwLFhoLG1kLHIpO2JyZWFrO2Nhc2UgMzp2YXIgWWg9cC51cGRhdGVRdWV1ZTtpZihudWxsIT09WWgpe0s9bnVsbDtpZihudWxsIT09cC5jaGlsZClzd2l0Y2gocC5jaGlsZC50YWcpe2Nhc2UgNTpLPVxucC5jaGlsZC5zdGF0ZU5vZGU7YnJlYWs7Y2FzZSAxOks9cC5jaGlsZC5zdGF0ZU5vZGV9WWYocCxZaCxLLHIpfWJyZWFrO2Nhc2UgNTp2YXIgR2o9cC5zdGF0ZU5vZGU7bnVsbD09PW5jJiZwLmVmZmVjdFRhZyY0JiYocj1HaixKZShwLnR5cGUscC5tZW1vaXplZFByb3BzKSYmci5mb2N1cygpKTticmVhaztjYXNlIDY6YnJlYWs7Y2FzZSA0OmJyZWFrO2Nhc2UgMTI6YnJlYWs7Y2FzZSAxMzpjYXNlIDE5OmNhc2UgMTc6Y2FzZSAyMDpicmVhaztkZWZhdWx0OnRocm93IHQoRXJyb3IoMTYzKSk7fX1pZigkYSYxMjgpe3ZhciBuZD1ZLnJlZjtpZihudWxsIT09bmQpe3ZhciBaaD1ZLnN0YXRlTm9kZTtzd2l0Y2goWS50YWcpe2Nhc2UgNTp2YXIgZ2Y9Wmg7YnJlYWs7ZGVmYXVsdDpnZj1aaH1cImZ1bmN0aW9uXCI9PT10eXBlb2YgbmQ/bmQoZ2YpOm5kLmN1cnJlbnQ9Z2Z9fSRhJjUxMiYmKFBpPSEwKTtZPVkubmV4dEVmZmVjdH19Y2F0Y2goemIpe2lmKG51bGw9PT1ZKXRocm93IHQoRXJyb3IoMzMwKSk7XG5maShZLHpiKTtZPVkubmV4dEVmZmVjdH13aGlsZShudWxsIT09WSk7WT1udWxsO25mKCk7VT1mfWVsc2UgYS5jdXJyZW50PWM7aWYoUGkpUGk9ITEsUWk9YSxTaT1kLFJpPWI7ZWxzZSBmb3IoWT1lO251bGwhPT1ZOyliPVkubmV4dEVmZmVjdCxZLm5leHRFZmZlY3Q9bnVsbCxZPWI7Yj1hLmZpcnN0UGVuZGluZ1RpbWU7MCE9PWI/KCRhPWNnKCksJGE9emYoJGEsYiksWmkoYSwkYSxiKSk6eGk9bnVsbDtcImZ1bmN0aW9uXCI9PT10eXBlb2YgcGomJnBqKGMuc3RhdGVOb2RlLGQpOzEwNzM3NDE4MjM9PT1iP2E9PT1WaT9VaSsrOihVaT0wLFZpPWEpOlVpPTA7aWYodWkpdGhyb3cgdWk9ITEsYT12aSx2aT1udWxsLGE7aWYoKFUmQmkpIT09VClyZXR1cm4gbnVsbDtPKCk7cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBjaigpe2lmKG51bGw9PT1RaSlyZXR1cm4hMTt2YXIgYT1RaSxiPVNpLGM9Umk7UWk9bnVsbDtTaT0wO1JpPTkwO3JldHVybiB2Zig5NzxjPzk3OmMscWouYmluZChudWxsLGEsYikpfWZ1bmN0aW9uIHFqKGEpe2lmKChVJihDaXxEaSkpIT09VCl0aHJvdyB0KEVycm9yKDMzMSkpO3ZhciBiPVU7VXw9RGk7Zm9yKGE9YS5jdXJyZW50LmZpcnN0RWZmZWN0O251bGwhPT1hOyl7dHJ5e3ZhciBjPWE7aWYoMCE9PShjLmVmZmVjdFRhZyY1MTIpKXN3aXRjaChjLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpoaShQZyxJZyxjKSxoaShJZyxPZyxjKX19Y2F0Y2goZCl7aWYobnVsbD09PWEpdGhyb3cgdChFcnJvcigzMzApKTtmaShhLGQpfWM9YS5uZXh0RWZmZWN0O2EubmV4dEVmZmVjdD1udWxsO2E9Y31VPWI7TygpO3JldHVybiEwfVxuZnVuY3Rpb24gcmooYSxiLGMpe2I9YmkoYyxiKTtiPXRpKGEsYiwxMDczNzQxODIzKTtTZihhLGIpO2E9WWkoYSwxMDczNzQxODIzKTtudWxsIT09YSYmWmkoYSw5OSwxMDczNzQxODIzKX1mdW5jdGlvbiBmaShhLGIpe2lmKDM9PT1hLnRhZylyaihhLGEsYik7ZWxzZSBmb3IodmFyIGM9YS5yZXR1cm47bnVsbCE9PWM7KXtpZigzPT09Yy50YWcpe3JqKGMsYSxiKTticmVha31lbHNlIGlmKDE9PT1jLnRhZyl7dmFyIGQ9Yy5zdGF0ZU5vZGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGMudHlwZS5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3J8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmNvbXBvbmVudERpZENhdGNoJiYobnVsbD09PXhpfHwheGkuaGFzKGQpKSl7YT1iaShiLGEpO2E9d2koYyxhLDEwNzM3NDE4MjMpO1NmKGMsYSk7Yz1ZaShjLDEwNzM3NDE4MjMpO251bGwhPT1jJiZaaShjLDk5LDEwNzM3NDE4MjMpO2JyZWFrfX1jPWMucmV0dXJufX1cbmZ1bmN0aW9uIGtqKGEsYixjKXt2YXIgZD1hLnBpbmdDYWNoZTtudWxsIT09ZCYmZC5kZWxldGUoYik7Smk9PT1hJiZXPT09Yz9YPT09SGl8fFg9PT1HaSYmMTA3Mzc0MTgyMz09PUtpJiZzZigpLXBpPE9pP2hqKGEsVyk6Tmk9ITA6YS5sYXN0UGVuZGluZ1RpbWU8Y3x8KGI9YS5waW5nVGltZSwwIT09YiYmYjxjfHwoYS5waW5nVGltZT1jLGEuZmluaXNoZWRFeHBpcmF0aW9uVGltZT09PWMmJihhLmZpbmlzaGVkRXhwaXJhdGlvblRpbWU9MCxhLmZpbmlzaGVkV29yaz1udWxsKSxiPWNnKCksYj16ZihiLGMpLFppKGEsYixjKSkpfWZ1bmN0aW9uIHJpKGEsYil7dmFyIGM9YS5zdGF0ZU5vZGU7bnVsbCE9PWMmJmMuZGVsZXRlKGIpO2M9Y2coKTtiPWRnKGMsYSxudWxsKTtjPXpmKGMsYik7YT1ZaShhLGIpO251bGwhPT1hJiZaaShhLGMsYil9dmFyIG1qPXZvaWQgMDtcbm1qPWZ1bmN0aW9uKGEsYixjKXt2YXIgZD1iLmV4cGlyYXRpb25UaW1lO2lmKG51bGwhPT1hKXt2YXIgZT1iLnBlbmRpbmdQcm9wcztpZihhLm1lbW9pemVkUHJvcHMhPT1lfHxNLmN1cnJlbnQpTGY9ITA7ZWxzZSBpZihkPGMpe0xmPSExO3N3aXRjaChiLnRhZyl7Y2FzZSAzOk5oKGIpO0NoKCk7YnJlYWs7Y2FzZSA1OkNnKGIpO2lmKGIubW9kZSY0JiYxIT09YyYmZS5oaWRkZW4pcmV0dXJuIGIuZXhwaXJhdGlvblRpbWU9Yi5jaGlsZEV4cGlyYXRpb25UaW1lPTEsbnVsbDticmVhaztjYXNlIDE6TihiLnR5cGUpJiZYZShiKTticmVhaztjYXNlIDQ6QWcoYixiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKTticmVhaztjYXNlIDEwOkhmKGIsYi5tZW1vaXplZFByb3BzLnZhbHVlKTticmVhaztjYXNlIDEzOmlmKG51bGwhPT1iLm1lbW9pemVkU3RhdGUpe2Q9Yi5jaGlsZC5jaGlsZEV4cGlyYXRpb25UaW1lO2lmKDAhPT1kJiZkPj1jKXJldHVybiBQaChhLGIsYyk7SihQLFAuY3VycmVudCZcbkVnLGIpO2I9RmgoYSxiLGMpO3JldHVybiBudWxsIT09Yj9iLnNpYmxpbmc6bnVsbH1KKFAsUC5jdXJyZW50JkVnLGIpO2JyZWFrO2Nhc2UgMTk6ZD1iLmNoaWxkRXhwaXJhdGlvblRpbWU+PWM7aWYoMCE9PShhLmVmZmVjdFRhZyY2NCkpe2lmKGQpcmV0dXJuIFJoKGEsYixjKTtiLmVmZmVjdFRhZ3w9NjR9ZT1iLm1lbW9pemVkU3RhdGU7bnVsbCE9PWUmJihlLnJlbmRlcmluZz1udWxsLGUudGFpbD1udWxsKTtKKFAsUC5jdXJyZW50LGIpO2lmKCFkKXJldHVybiBudWxsfXJldHVybiBGaChhLGIsYyl9fWVsc2UgTGY9ITE7Yi5leHBpcmF0aW9uVGltZT0wO3N3aXRjaChiLnRhZyl7Y2FzZSAyOmQ9Yi50eXBlO251bGwhPT1hJiYoYS5hbHRlcm5hdGU9bnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZWZmZWN0VGFnfD0yKTthPWIucGVuZGluZ1Byb3BzO2U9U2UoYixMLmN1cnJlbnQpO0tmKGIsYyk7ZT1kaChudWxsLGIsZCxhLGUsYyk7Yi5lZmZlY3RUYWd8PTE7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBlJiZcbm51bGwhPT1lJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5yZW5kZXImJnZvaWQgMD09PWUuJCR0eXBlb2Ype2IudGFnPTE7aWgoKTtpZihOKGQpKXt2YXIgZj0hMDtYZShiKX1lbHNlIGY9ITE7Yi5tZW1vaXplZFN0YXRlPW51bGwhPT1lLnN0YXRlJiZ2b2lkIDAhPT1lLnN0YXRlP2Uuc3RhdGU6bnVsbDt2YXIgaD1kLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcztcImZ1bmN0aW9uXCI9PT10eXBlb2YgaCYmYmcoYixkLGgsYSk7ZS51cGRhdGVyPWZnO2Iuc3RhdGVOb2RlPWU7ZS5fcmVhY3RJbnRlcm5hbEZpYmVyPWI7amcoYixkLGEsYyk7Yj1NaChudWxsLGIsZCwhMCxmLGMpfWVsc2UgYi50YWc9MCxTKG51bGwsYixlLGMpLGI9Yi5jaGlsZDtyZXR1cm4gYjtjYXNlIDE2OmU9Yi5lbGVtZW50VHlwZTtudWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmVmZmVjdFRhZ3w9Mik7YT1iLnBlbmRpbmdQcm9wcztlPUJmKGUpO2IudHlwZT1lO2Y9Yi50YWc9c2ooZSk7XG5hPUFmKGUsYSk7c3dpdGNoKGYpe2Nhc2UgMDpiPUpoKG51bGwsYixlLGEsYyk7YnJlYWs7Y2FzZSAxOmI9TGgobnVsbCxiLGUsYSxjKTticmVhaztjYXNlIDExOmI9RWgobnVsbCxiLGUsYSxjKTticmVhaztjYXNlIDE0OmI9R2gobnVsbCxiLGUsQWYoZS50eXBlLGEpLGQsYyk7YnJlYWs7ZGVmYXVsdDp0aHJvdyB0KEVycm9yKDMwNiksZSxcIlwiKTt9cmV0dXJuIGI7Y2FzZSAwOnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTpBZihkLGUpLEpoKGEsYixkLGUsYyk7Y2FzZSAxOnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTpBZihkLGUpLExoKGEsYixkLGUsYyk7Y2FzZSAzOk5oKGIpO2Q9Yi51cGRhdGVRdWV1ZTtpZihudWxsPT09ZCl0aHJvdyB0KEVycm9yKDI4MikpO2U9Yi5tZW1vaXplZFN0YXRlO2U9bnVsbCE9PWU/ZS5lbGVtZW50Om51bGw7V2YoYixkLGIucGVuZGluZ1Byb3BzLFxubnVsbCxjKTtkPWIubWVtb2l6ZWRTdGF0ZS5lbGVtZW50O2lmKGQ9PT1lKUNoKCksYj1GaChhLGIsYyk7ZWxzZXtlPWIuc3RhdGVOb2RlO2lmKGU9KG51bGw9PT1hfHxudWxsPT09YS5jaGlsZCkmJmUuaHlkcmF0ZSl1aD1OZShiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvLmZpcnN0Q2hpbGQpLHRoPWIsZT12aD0hMDtlPyhiLmVmZmVjdFRhZ3w9MixiLmNoaWxkPXVnKGIsbnVsbCxkLGMpKTooUyhhLGIsZCxjKSxDaCgpKTtiPWIuY2hpbGR9cmV0dXJuIGI7Y2FzZSA1OnJldHVybiBDZyhiKSxudWxsPT09YSYmemgoYiksZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxmPW51bGwhPT1hP2EubWVtb2l6ZWRQcm9wczpudWxsLGg9ZS5jaGlsZHJlbixLZShkLGUpP2g9bnVsbDpudWxsIT09ZiYmS2UoZCxmKSYmKGIuZWZmZWN0VGFnfD0xNiksS2goYSxiKSxiLm1vZGUmNCYmMSE9PWMmJmUuaGlkZGVuPyhiLmV4cGlyYXRpb25UaW1lPWIuY2hpbGRFeHBpcmF0aW9uVGltZT0xLGI9bnVsbCk6XG4oUyhhLGIsaCxjKSxiPWIuY2hpbGQpLGI7Y2FzZSA2OnJldHVybiBudWxsPT09YSYmemgoYiksbnVsbDtjYXNlIDEzOnJldHVybiBQaChhLGIsYyk7Y2FzZSA0OnJldHVybiBBZyhiLGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pLGQ9Yi5wZW5kaW5nUHJvcHMsbnVsbD09PWE/Yi5jaGlsZD10ZyhiLG51bGwsZCxjKTpTKGEsYixkLGMpLGIuY2hpbGQ7Y2FzZSAxMTpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6QWYoZCxlKSxFaChhLGIsZCxlLGMpO2Nhc2UgNzpyZXR1cm4gUyhhLGIsYi5wZW5kaW5nUHJvcHMsYyksYi5jaGlsZDtjYXNlIDg6cmV0dXJuIFMoYSxiLGIucGVuZGluZ1Byb3BzLmNoaWxkcmVuLGMpLGIuY2hpbGQ7Y2FzZSAxMjpyZXR1cm4gUyhhLGIsYi5wZW5kaW5nUHJvcHMuY2hpbGRyZW4sYyksYi5jaGlsZDtjYXNlIDEwOmE6e2Q9Yi50eXBlLl9jb250ZXh0O2U9Yi5wZW5kaW5nUHJvcHM7aD1iLm1lbW9pemVkUHJvcHM7XG5mPWUudmFsdWU7SGYoYixmKTtpZihudWxsIT09aCl7dmFyIGc9aC52YWx1ZTtmPWhkKGcsZik/MDooXCJmdW5jdGlvblwiPT09dHlwZW9mIGQuX2NhbGN1bGF0ZUNoYW5nZWRCaXRzP2QuX2NhbGN1bGF0ZUNoYW5nZWRCaXRzKGcsZik6MTA3Mzc0MTgyMyl8MDtpZigwPT09Zil7aWYoaC5jaGlsZHJlbj09PWUuY2hpbGRyZW4mJiFNLmN1cnJlbnQpe2I9RmgoYSxiLGMpO2JyZWFrIGF9fWVsc2UgZm9yKGc9Yi5jaGlsZCxudWxsIT09ZyYmKGcucmV0dXJuPWIpO251bGwhPT1nOyl7dmFyIGs9Zy5kZXBlbmRlbmNpZXM7aWYobnVsbCE9PWspe2g9Zy5jaGlsZDtmb3IodmFyIGw9ay5maXJzdENvbnRleHQ7bnVsbCE9PWw7KXtpZihsLmNvbnRleHQ9PT1kJiYwIT09KGwub2JzZXJ2ZWRCaXRzJmYpKXsxPT09Zy50YWcmJihsPVFmKGMsbnVsbCksbC50YWc9MixTZihnLGwpKTtnLmV4cGlyYXRpb25UaW1lPGMmJihnLmV4cGlyYXRpb25UaW1lPWMpO2w9Zy5hbHRlcm5hdGU7bnVsbCE9PWwmJmwuZXhwaXJhdGlvblRpbWU8XG5jJiYobC5leHBpcmF0aW9uVGltZT1jKTtKZihnLnJldHVybixjKTtrLmV4cGlyYXRpb25UaW1lPGMmJihrLmV4cGlyYXRpb25UaW1lPWMpO2JyZWFrfWw9bC5uZXh0fX1lbHNlIGg9MTA9PT1nLnRhZz9nLnR5cGU9PT1iLnR5cGU/bnVsbDpnLmNoaWxkOmcuY2hpbGQ7aWYobnVsbCE9PWgpaC5yZXR1cm49ZztlbHNlIGZvcihoPWc7bnVsbCE9PWg7KXtpZihoPT09Yil7aD1udWxsO2JyZWFrfWc9aC5zaWJsaW5nO2lmKG51bGwhPT1nKXtnLnJldHVybj1oLnJldHVybjtoPWc7YnJlYWt9aD1oLnJldHVybn1nPWh9fVMoYSxiLGUuY2hpbGRyZW4sYyk7Yj1iLmNoaWxkfXJldHVybiBiO2Nhc2UgOTpyZXR1cm4gZT1iLnR5cGUsZj1iLnBlbmRpbmdQcm9wcyxkPWYuY2hpbGRyZW4sS2YoYixjKSxlPU1mKGUsZi51bnN0YWJsZV9vYnNlcnZlZEJpdHMpLGQ9ZChlKSxiLmVmZmVjdFRhZ3w9MSxTKGEsYixkLGMpLGIuY2hpbGQ7Y2FzZSAxNDpyZXR1cm4gZT1iLnR5cGUsZj1BZihlLGIucGVuZGluZ1Byb3BzKSxcbmY9QWYoZS50eXBlLGYpLEdoKGEsYixlLGYsZCxjKTtjYXNlIDE1OnJldHVybiBJaChhLGIsYi50eXBlLGIucGVuZGluZ1Byb3BzLGQsYyk7Y2FzZSAxNzpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6QWYoZCxlKSxudWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmVmZmVjdFRhZ3w9MiksYi50YWc9MSxOKGQpPyhhPSEwLFhlKGIpKTphPSExLEtmKGIsYyksaGcoYixkLGUsYyksamcoYixkLGUsYyksTWgobnVsbCxiLGQsITAsYSxjKTtjYXNlIDE5OnJldHVybiBSaChhLGIsYyl9dGhyb3cgdChFcnJvcigxNTYpKTt9O3ZhciBwaj1udWxsLGppPW51bGw7XG5mdW5jdGlvbiB0aihhKXtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXylyZXR1cm4hMTt2YXIgYj1fX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX187aWYoYi5pc0Rpc2FibGVkfHwhYi5zdXBwb3J0c0ZpYmVyKXJldHVybiEwO3RyeXt2YXIgYz1iLmluamVjdChhKTtwaj1mdW5jdGlvbihhKXt0cnl7Yi5vbkNvbW1pdEZpYmVyUm9vdChjLGEsdm9pZCAwLDY0PT09KGEuY3VycmVudC5lZmZlY3RUYWcmNjQpKX1jYXRjaChlKXt9fTtqaT1mdW5jdGlvbihhKXt0cnl7Yi5vbkNvbW1pdEZpYmVyVW5tb3VudChjLGEpfWNhdGNoKGUpe319fWNhdGNoKGQpe31yZXR1cm4hMH1cbmZ1bmN0aW9uIHVqKGEsYixjLGQpe3RoaXMudGFnPWE7dGhpcy5rZXk9Yzt0aGlzLnNpYmxpbmc9dGhpcy5jaGlsZD10aGlzLnJldHVybj10aGlzLnN0YXRlTm9kZT10aGlzLnR5cGU9dGhpcy5lbGVtZW50VHlwZT1udWxsO3RoaXMuaW5kZXg9MDt0aGlzLnJlZj1udWxsO3RoaXMucGVuZGluZ1Byb3BzPWI7dGhpcy5kZXBlbmRlbmNpZXM9dGhpcy5tZW1vaXplZFN0YXRlPXRoaXMudXBkYXRlUXVldWU9dGhpcy5tZW1vaXplZFByb3BzPW51bGw7dGhpcy5tb2RlPWQ7dGhpcy5lZmZlY3RUYWc9MDt0aGlzLmxhc3RFZmZlY3Q9dGhpcy5maXJzdEVmZmVjdD10aGlzLm5leHRFZmZlY3Q9bnVsbDt0aGlzLmNoaWxkRXhwaXJhdGlvblRpbWU9dGhpcy5leHBpcmF0aW9uVGltZT0wO3RoaXMuYWx0ZXJuYXRlPW51bGx9ZnVuY3Rpb24geGgoYSxiLGMsZCl7cmV0dXJuIG5ldyB1aihhLGIsYyxkKX1cbmZ1bmN0aW9uIEhoKGEpe2E9YS5wcm90b3R5cGU7cmV0dXJuISghYXx8IWEuaXNSZWFjdENvbXBvbmVudCl9ZnVuY3Rpb24gc2ooYSl7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpcmV0dXJuIEhoKGEpPzE6MDtpZih2b2lkIDAhPT1hJiZudWxsIT09YSl7YT1hLiQkdHlwZW9mO2lmKGE9PT1nYylyZXR1cm4gMTE7aWYoYT09PWpjKXJldHVybiAxNH1yZXR1cm4gMn1cbmZ1bmN0aW9uIG9nKGEsYil7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbD09PWM/KGM9eGgoYS50YWcsYixhLmtleSxhLm1vZGUpLGMuZWxlbWVudFR5cGU9YS5lbGVtZW50VHlwZSxjLnR5cGU9YS50eXBlLGMuc3RhdGVOb2RlPWEuc3RhdGVOb2RlLGMuYWx0ZXJuYXRlPWEsYS5hbHRlcm5hdGU9Yyk6KGMucGVuZGluZ1Byb3BzPWIsYy5lZmZlY3RUYWc9MCxjLm5leHRFZmZlY3Q9bnVsbCxjLmZpcnN0RWZmZWN0PW51bGwsYy5sYXN0RWZmZWN0PW51bGwpO2MuY2hpbGRFeHBpcmF0aW9uVGltZT1hLmNoaWxkRXhwaXJhdGlvblRpbWU7Yy5leHBpcmF0aW9uVGltZT1hLmV4cGlyYXRpb25UaW1lO2MuY2hpbGQ9YS5jaGlsZDtjLm1lbW9pemVkUHJvcHM9YS5tZW1vaXplZFByb3BzO2MubWVtb2l6ZWRTdGF0ZT1hLm1lbW9pemVkU3RhdGU7Yy51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlO2I9YS5kZXBlbmRlbmNpZXM7Yy5kZXBlbmRlbmNpZXM9bnVsbD09PWI/bnVsbDp7ZXhwaXJhdGlvblRpbWU6Yi5leHBpcmF0aW9uVGltZSxcbmZpcnN0Q29udGV4dDpiLmZpcnN0Q29udGV4dCxyZXNwb25kZXJzOmIucmVzcG9uZGVyc307Yy5zaWJsaW5nPWEuc2libGluZztjLmluZGV4PWEuaW5kZXg7Yy5yZWY9YS5yZWY7cmV0dXJuIGN9XG5mdW5jdGlvbiBxZyhhLGIsYyxkLGUsZil7dmFyIGg9MjtkPWE7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpSGgoYSkmJihoPTEpO2Vsc2UgaWYoXCJzdHJpbmdcIj09PXR5cGVvZiBhKWg9NTtlbHNlIGE6c3dpdGNoKGEpe2Nhc2UgYWM6cmV0dXJuIHNnKGMuY2hpbGRyZW4sZSxmLGIpO2Nhc2UgZmM6aD04O2V8PTc7YnJlYWs7Y2FzZSBiYzpoPTg7ZXw9MTticmVhaztjYXNlIGNjOnJldHVybiBhPXhoKDEyLGMsYixlfDgpLGEuZWxlbWVudFR5cGU9Y2MsYS50eXBlPWNjLGEuZXhwaXJhdGlvblRpbWU9ZixhO2Nhc2UgaGM6cmV0dXJuIGE9eGgoMTMsYyxiLGUpLGEudHlwZT1oYyxhLmVsZW1lbnRUeXBlPWhjLGEuZXhwaXJhdGlvblRpbWU9ZixhO2Nhc2UgaWM6cmV0dXJuIGE9eGgoMTksYyxiLGUpLGEuZWxlbWVudFR5cGU9aWMsYS5leHBpcmF0aW9uVGltZT1mLGE7ZGVmYXVsdDppZihcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hKXN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIGRjOmg9XG4xMDticmVhayBhO2Nhc2UgZWM6aD05O2JyZWFrIGE7Y2FzZSBnYzpoPTExO2JyZWFrIGE7Y2FzZSBqYzpoPTE0O2JyZWFrIGE7Y2FzZSBrYzpoPTE2O2Q9bnVsbDticmVhayBhfXRocm93IHQoRXJyb3IoMTMwKSxudWxsPT1hP2E6dHlwZW9mIGEsXCJcIik7fWI9eGgoaCxjLGIsZSk7Yi5lbGVtZW50VHlwZT1hO2IudHlwZT1kO2IuZXhwaXJhdGlvblRpbWU9ZjtyZXR1cm4gYn1mdW5jdGlvbiBzZyhhLGIsYyxkKXthPXhoKDcsYSxkLGIpO2EuZXhwaXJhdGlvblRpbWU9YztyZXR1cm4gYX1mdW5jdGlvbiBwZyhhLGIsYyl7YT14aCg2LGEsbnVsbCxiKTthLmV4cGlyYXRpb25UaW1lPWM7cmV0dXJuIGF9XG5mdW5jdGlvbiByZyhhLGIsYyl7Yj14aCg0LG51bGwhPT1hLmNoaWxkcmVuP2EuY2hpbGRyZW46W10sYS5rZXksYik7Yi5leHBpcmF0aW9uVGltZT1jO2Iuc3RhdGVOb2RlPXtjb250YWluZXJJbmZvOmEuY29udGFpbmVySW5mbyxwZW5kaW5nQ2hpbGRyZW46bnVsbCxpbXBsZW1lbnRhdGlvbjphLmltcGxlbWVudGF0aW9ufTtyZXR1cm4gYn1cbmZ1bmN0aW9uIHZqKGEsYixjKXt0aGlzLnRhZz1iO3RoaXMuY3VycmVudD1udWxsO3RoaXMuY29udGFpbmVySW5mbz1hO3RoaXMucGluZ0NhY2hlPXRoaXMucGVuZGluZ0NoaWxkcmVuPW51bGw7dGhpcy5maW5pc2hlZEV4cGlyYXRpb25UaW1lPTA7dGhpcy5maW5pc2hlZFdvcms9bnVsbDt0aGlzLnRpbWVvdXRIYW5kbGU9LTE7dGhpcy5wZW5kaW5nQ29udGV4dD10aGlzLmNvbnRleHQ9bnVsbDt0aGlzLmh5ZHJhdGU9Yzt0aGlzLmNhbGxiYWNrTm9kZT10aGlzLmZpcnN0QmF0Y2g9bnVsbDt0aGlzLnBpbmdUaW1lPXRoaXMubGFzdFBlbmRpbmdUaW1lPXRoaXMuZmlyc3RQZW5kaW5nVGltZT10aGlzLmNhbGxiYWNrRXhwaXJhdGlvblRpbWU9MH1mdW5jdGlvbiB3aihhLGIsYyl7YT1uZXcgdmooYSxiLGMpO2I9eGgoMyxudWxsLG51bGwsMj09PWI/NzoxPT09Yj8zOjApO2EuY3VycmVudD1iO3JldHVybiBiLnN0YXRlTm9kZT1hfVxuZnVuY3Rpb24geGooYSxiLGMsZCxlLGYpe3ZhciBoPWIuY3VycmVudDthOmlmKGMpe2M9Yy5fcmVhY3RJbnRlcm5hbEZpYmVyO2I6e2lmKDIhPT1sZChjKXx8MSE9PWMudGFnKXRocm93IHQoRXJyb3IoMTcwKSk7dmFyIGc9Yztkb3tzd2l0Y2goZy50YWcpe2Nhc2UgMzpnPWcuc3RhdGVOb2RlLmNvbnRleHQ7YnJlYWsgYjtjYXNlIDE6aWYoTihnLnR5cGUpKXtnPWcuc3RhdGVOb2RlLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0O2JyZWFrIGJ9fWc9Zy5yZXR1cm59d2hpbGUobnVsbCE9PWcpO3Rocm93IHQoRXJyb3IoMTcxKSk7fWlmKDE9PT1jLnRhZyl7dmFyIGs9Yy50eXBlO2lmKE4oaykpe2M9V2UoYyxrLGcpO2JyZWFrIGF9fWM9Z31lbHNlIGM9UWU7bnVsbD09PWIuY29udGV4dD9iLmNvbnRleHQ9YzpiLnBlbmRpbmdDb250ZXh0PWM7Yj1mO2U9UWYoZCxlKTtlLnBheWxvYWQ9e2VsZW1lbnQ6YX07Yj12b2lkIDA9PT1iP251bGw6YjtudWxsIT09YiYmXG4oZS5jYWxsYmFjaz1iKTtTZihoLGUpO2VnKGgsZCk7cmV0dXJuIGR9ZnVuY3Rpb24geWooYSxiLGMsZCl7dmFyIGU9Yi5jdXJyZW50LGY9Y2coKSxoPSRmLnN1c3BlbnNlO2U9ZGcoZixlLGgpO3JldHVybiB4aihhLGIsYyxlLGgsZCl9ZnVuY3Rpb24gemooYSl7YT1hLmN1cnJlbnQ7aWYoIWEuY2hpbGQpcmV0dXJuIG51bGw7c3dpdGNoKGEuY2hpbGQudGFnKXtjYXNlIDU6cmV0dXJuIGEuY2hpbGQuc3RhdGVOb2RlO2RlZmF1bHQ6cmV0dXJuIGEuY2hpbGQuc3RhdGVOb2RlfX1mdW5jdGlvbiBBaihhLGIsYyl7dmFyIGQ9Mzxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbM10/YXJndW1lbnRzWzNdOm51bGw7cmV0dXJueyQkdHlwZW9mOiRiLGtleTpudWxsPT1kP251bGw6XCJcIitkLGNoaWxkcmVuOmEsY29udGFpbmVySW5mbzpiLGltcGxlbWVudGF0aW9uOmN9fVxuRGI9ZnVuY3Rpb24oYSxiLGMpe3N3aXRjaChiKXtjYXNlIFwiaW5wdXRcIjpFYyhhLGMpO2I9Yy5uYW1lO2lmKFwicmFkaW9cIj09PWMudHlwZSYmbnVsbCE9Yil7Zm9yKGM9YTtjLnBhcmVudE5vZGU7KWM9Yy5wYXJlbnROb2RlO2M9Yy5xdWVyeVNlbGVjdG9yQWxsKFwiaW5wdXRbbmFtZT1cIitKU09OLnN0cmluZ2lmeShcIlwiK2IpKyddW3R5cGU9XCJyYWRpb1wiXScpO2ZvcihiPTA7YjxjLmxlbmd0aDtiKyspe3ZhciBkPWNbYl07aWYoZCE9PWEmJmQuZm9ybT09PWEuZm9ybSl7dmFyIGU9S2EoZCk7aWYoIWUpdGhyb3cgdChFcnJvcig5MCkpO1diKGQpO0VjKGQsZSl9fX1icmVhaztjYXNlIFwidGV4dGFyZWFcIjpwZShhLGMpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpiPWMudmFsdWUsbnVsbCE9YiYmbWUoYSwhIWMubXVsdGlwbGUsYiwhMSl9fTtcbmZ1bmN0aW9uIEJqKGEpe3ZhciBiPTEwNzM3NDE4MjEtMjUqKCgoMTA3Mzc0MTgyMS1jZygpKzUwMCkvMjV8MCkrMSk7Yjw9WGkmJi0tYjt0aGlzLl9leHBpcmF0aW9uVGltZT1YaT1iO3RoaXMuX3Jvb3Q9YTt0aGlzLl9jYWxsYmFja3M9dGhpcy5fbmV4dD1udWxsO3RoaXMuX2hhc0NoaWxkcmVuPXRoaXMuX2RpZENvbXBsZXRlPSExO3RoaXMuX2NoaWxkcmVuPW51bGw7dGhpcy5fZGVmZXI9ITB9QmoucHJvdG90eXBlLnJlbmRlcj1mdW5jdGlvbihhKXtpZighdGhpcy5fZGVmZXIpdGhyb3cgdChFcnJvcigyNTApKTt0aGlzLl9oYXNDaGlsZHJlbj0hMDt0aGlzLl9jaGlsZHJlbj1hO3ZhciBiPXRoaXMuX3Jvb3QuX2ludGVybmFsUm9vdCxjPXRoaXMuX2V4cGlyYXRpb25UaW1lLGQ9bmV3IENqO3hqKGEsYixudWxsLGMsbnVsbCxkLl9vbkNvbW1pdCk7cmV0dXJuIGR9O1xuQmoucHJvdG90eXBlLnRoZW49ZnVuY3Rpb24oYSl7aWYodGhpcy5fZGlkQ29tcGxldGUpYSgpO2Vsc2V7dmFyIGI9dGhpcy5fY2FsbGJhY2tzO251bGw9PT1iJiYoYj10aGlzLl9jYWxsYmFja3M9W10pO2IucHVzaChhKX19O1xuQmoucHJvdG90eXBlLmNvbW1pdD1mdW5jdGlvbigpe3ZhciBhPXRoaXMuX3Jvb3QuX2ludGVybmFsUm9vdCxiPWEuZmlyc3RCYXRjaDtpZighdGhpcy5fZGVmZXJ8fG51bGw9PT1iKXRocm93IHQoRXJyb3IoMjUxKSk7aWYodGhpcy5faGFzQ2hpbGRyZW4pe3ZhciBjPXRoaXMuX2V4cGlyYXRpb25UaW1lO2lmKGIhPT10aGlzKXt0aGlzLl9oYXNDaGlsZHJlbiYmKGM9dGhpcy5fZXhwaXJhdGlvblRpbWU9Yi5fZXhwaXJhdGlvblRpbWUsdGhpcy5yZW5kZXIodGhpcy5fY2hpbGRyZW4pKTtmb3IodmFyIGQ9bnVsbCxlPWI7ZSE9PXRoaXM7KWQ9ZSxlPWUuX25leHQ7aWYobnVsbD09PWQpdGhyb3cgdChFcnJvcigyNTEpKTtkLl9uZXh0PWUuX25leHQ7dGhpcy5fbmV4dD1iO2EuZmlyc3RCYXRjaD10aGlzfXRoaXMuX2RlZmVyPSExO2I9YztpZigoVSYoQ2l8RGkpKSE9PVQpdGhyb3cgdChFcnJvcigyNTMpKTt4ZihaLmJpbmQobnVsbCxhLGIpKTtPKCk7Yj10aGlzLl9uZXh0O3RoaXMuX25leHQ9XG5udWxsO2I9YS5maXJzdEJhdGNoPWI7bnVsbCE9PWImJmIuX2hhc0NoaWxkcmVuJiZiLnJlbmRlcihiLl9jaGlsZHJlbil9ZWxzZSB0aGlzLl9uZXh0PW51bGwsdGhpcy5fZGVmZXI9ITF9O0JqLnByb3RvdHlwZS5fb25Db21wbGV0ZT1mdW5jdGlvbigpe2lmKCF0aGlzLl9kaWRDb21wbGV0ZSl7dGhpcy5fZGlkQ29tcGxldGU9ITA7dmFyIGE9dGhpcy5fY2FsbGJhY2tzO2lmKG51bGwhPT1hKWZvcih2YXIgYj0wO2I8YS5sZW5ndGg7YisrKSgwLGFbYl0pKCl9fTtmdW5jdGlvbiBDaigpe3RoaXMuX2NhbGxiYWNrcz1udWxsO3RoaXMuX2RpZENvbW1pdD0hMTt0aGlzLl9vbkNvbW1pdD10aGlzLl9vbkNvbW1pdC5iaW5kKHRoaXMpfUNqLnByb3RvdHlwZS50aGVuPWZ1bmN0aW9uKGEpe2lmKHRoaXMuX2RpZENvbW1pdClhKCk7ZWxzZXt2YXIgYj10aGlzLl9jYWxsYmFja3M7bnVsbD09PWImJihiPXRoaXMuX2NhbGxiYWNrcz1bXSk7Yi5wdXNoKGEpfX07XG5Dai5wcm90b3R5cGUuX29uQ29tbWl0PWZ1bmN0aW9uKCl7aWYoIXRoaXMuX2RpZENvbW1pdCl7dGhpcy5fZGlkQ29tbWl0PSEwO3ZhciBhPXRoaXMuX2NhbGxiYWNrcztpZihudWxsIT09YSlmb3IodmFyIGI9MDtiPGEubGVuZ3RoO2IrKyl7dmFyIGM9YVtiXTtpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgYyl0aHJvdyB0KEVycm9yKDE5MSksYyk7YygpfX19O2Z1bmN0aW9uIERqKGEsYixjKXt0aGlzLl9pbnRlcm5hbFJvb3Q9d2ooYSxiLGMpfWZ1bmN0aW9uIEVqKGEsYil7dGhpcy5faW50ZXJuYWxSb290PXdqKGEsMixiKX1Fai5wcm90b3R5cGUucmVuZGVyPURqLnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24oYSxiKXt2YXIgYz10aGlzLl9pbnRlcm5hbFJvb3QsZD1uZXcgQ2o7Yj12b2lkIDA9PT1iP251bGw6YjtudWxsIT09YiYmZC50aGVuKGIpO3lqKGEsYyxudWxsLGQuX29uQ29tbWl0KTtyZXR1cm4gZH07XG5Fai5wcm90b3R5cGUudW5tb3VudD1Eai5wcm90b3R5cGUudW5tb3VudD1mdW5jdGlvbihhKXt2YXIgYj10aGlzLl9pbnRlcm5hbFJvb3QsYz1uZXcgQ2o7YT12b2lkIDA9PT1hP251bGw6YTtudWxsIT09YSYmYy50aGVuKGEpO3lqKG51bGwsYixudWxsLGMuX29uQ29tbWl0KTtyZXR1cm4gY307RWoucHJvdG90eXBlLmNyZWF0ZUJhdGNoPWZ1bmN0aW9uKCl7dmFyIGE9bmV3IEJqKHRoaXMpLGI9YS5fZXhwaXJhdGlvblRpbWUsYz10aGlzLl9pbnRlcm5hbFJvb3QsZD1jLmZpcnN0QmF0Y2g7aWYobnVsbD09PWQpYy5maXJzdEJhdGNoPWEsYS5fbmV4dD1udWxsO2Vsc2V7Zm9yKGM9bnVsbDtudWxsIT09ZCYmZC5fZXhwaXJhdGlvblRpbWU+PWI7KWM9ZCxkPWQuX25leHQ7YS5fbmV4dD1kO251bGwhPT1jJiYoYy5fbmV4dD1hKX1yZXR1cm4gYX07XG5mdW5jdGlvbiBIaihhKXtyZXR1cm4hKCFhfHwxIT09YS5ub2RlVHlwZSYmOSE9PWEubm9kZVR5cGUmJjExIT09YS5ub2RlVHlwZSYmKDghPT1hLm5vZGVUeXBlfHxcIiByZWFjdC1tb3VudC1wb2ludC11bnN0YWJsZSBcIiE9PWEubm9kZVZhbHVlKSl9SmI9ZWo7S2I9Zmo7TGI9YWo7TWI9ZnVuY3Rpb24oYSxiKXt2YXIgYz1VO1V8PTI7dHJ5e3JldHVybiBhKGIpfWZpbmFsbHl7VT1jLFU9PT1UJiZPKCl9fTtmdW5jdGlvbiBJaihhLGIpe2J8fChiPWE/OT09PWEubm9kZVR5cGU/YS5kb2N1bWVudEVsZW1lbnQ6YS5maXJzdENoaWxkOm51bGwsYj0hKCFifHwxIT09Yi5ub2RlVHlwZXx8IWIuaGFzQXR0cmlidXRlKFwiZGF0YS1yZWFjdHJvb3RcIikpKTtpZighYilmb3IodmFyIGM7Yz1hLmxhc3RDaGlsZDspYS5yZW1vdmVDaGlsZChjKTtyZXR1cm4gbmV3IERqKGEsMCxiKX1cbmZ1bmN0aW9uIEpqKGEsYixjLGQsZSl7dmFyIGY9Yy5fcmVhY3RSb290Q29udGFpbmVyLGg9dm9pZCAwO2lmKGYpe2g9Zi5faW50ZXJuYWxSb290O2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlKXt2YXIgZz1lO2U9ZnVuY3Rpb24oKXt2YXIgYT16aihoKTtnLmNhbGwoYSl9fXlqKGIsaCxhLGUpfWVsc2V7Zj1jLl9yZWFjdFJvb3RDb250YWluZXI9SWooYyxkKTtoPWYuX2ludGVybmFsUm9vdDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZSl7dmFyIGs9ZTtlPWZ1bmN0aW9uKCl7dmFyIGE9emooaCk7ay5jYWxsKGEpfX1naihmdW5jdGlvbigpe3lqKGIsaCxhLGUpfSl9cmV0dXJuIHpqKGgpfWZ1bmN0aW9uIEtqKGEsYil7dmFyIGM9Mjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOm51bGw7aWYoIUhqKGIpKXRocm93IHQoRXJyb3IoMjAwKSk7cmV0dXJuIEFqKGEsYixudWxsLGMpfVxudmFyIE5qPXtjcmVhdGVQb3J0YWw6S2osZmluZERPTU5vZGU6ZnVuY3Rpb24oYSl7aWYobnVsbD09YSlhPW51bGw7ZWxzZSBpZigxIT09YS5ub2RlVHlwZSl7dmFyIGI9YS5fcmVhY3RJbnRlcm5hbEZpYmVyO2lmKHZvaWQgMD09PWIpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLnJlbmRlcil0aHJvdyB0KEVycm9yKDE4OCkpO3Rocm93IHQoRXJyb3IoMjY4KSxPYmplY3Qua2V5cyhhKSk7fWE9cWQoYik7YT1udWxsPT09YT9udWxsOmEuc3RhdGVOb2RlfXJldHVybiBhfSxoeWRyYXRlOmZ1bmN0aW9uKGEsYixjKXtpZighSGooYikpdGhyb3cgdChFcnJvcigyMDApKTtyZXR1cm4gSmoobnVsbCxhLGIsITAsYyl9LHJlbmRlcjpmdW5jdGlvbihhLGIsYyl7aWYoIUhqKGIpKXRocm93IHQoRXJyb3IoMjAwKSk7cmV0dXJuIEpqKG51bGwsYSxiLCExLGMpfSx1bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcjpmdW5jdGlvbihhLGIsYyxkKXtpZighSGooYykpdGhyb3cgdChFcnJvcigyMDApKTtcbmlmKG51bGw9PWF8fHZvaWQgMD09PWEuX3JlYWN0SW50ZXJuYWxGaWJlcil0aHJvdyB0KEVycm9yKDM4KSk7cmV0dXJuIEpqKGEsYixjLCExLGQpfSx1bm1vdW50Q29tcG9uZW50QXROb2RlOmZ1bmN0aW9uKGEpe2lmKCFIaihhKSl0aHJvdyB0KEVycm9yKDQwKSk7cmV0dXJuIGEuX3JlYWN0Um9vdENvbnRhaW5lcj8oZ2ooZnVuY3Rpb24oKXtKaihudWxsLG51bGwsYSwhMSxmdW5jdGlvbigpe2EuX3JlYWN0Um9vdENvbnRhaW5lcj1udWxsfSl9KSwhMCk6ITF9LHVuc3RhYmxlX2NyZWF0ZVBvcnRhbDpmdW5jdGlvbigpe3JldHVybiBLai5hcHBseSh2b2lkIDAsYXJndW1lbnRzKX0sdW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXM6ZWosdW5zdGFibGVfaW50ZXJhY3RpdmVVcGRhdGVzOmZ1bmN0aW9uKGEsYixjLGQpe2FqKCk7cmV0dXJuIGZqKGEsYixjLGQpfSx1bnN0YWJsZV9kaXNjcmV0ZVVwZGF0ZXM6ZmosdW5zdGFibGVfZmx1c2hEaXNjcmV0ZVVwZGF0ZXM6YWosZmx1c2hTeW5jOmZ1bmN0aW9uKGEsXG5iKXtpZigoVSYoQ2l8RGkpKSE9PVQpdGhyb3cgdChFcnJvcigxODcpKTt2YXIgYz1VO1V8PTE7dHJ5e3JldHVybiB2Zig5OSxhLmJpbmQobnVsbCxiKSl9ZmluYWxseXtVPWMsTygpfX0sdW5zdGFibGVfY3JlYXRlUm9vdDpMaix1bnN0YWJsZV9jcmVhdGVTeW5jUm9vdDpNaix1bnN0YWJsZV9mbHVzaENvbnRyb2xsZWQ6ZnVuY3Rpb24oYSl7dmFyIGI9VTtVfD0xO3RyeXt2Zig5OSxhKX1maW5hbGx5e1U9YixVPT09VCYmTygpfX0sX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ6e0V2ZW50czpbSWEsSmEsS2EsQ2EuaW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lLGZhLFFhLGZ1bmN0aW9uKGEpe3lhKGEsUGEpfSxIYixJYixVZCxCYSxjaix7Y3VycmVudDohMX1dfX07XG5mdW5jdGlvbiBMaihhLGIpe2lmKCFIaihhKSl0aHJvdyB0KEVycm9yKDI5OSksXCJ1bnN0YWJsZV9jcmVhdGVSb290XCIpO3JldHVybiBuZXcgRWooYSxudWxsIT1iJiYhMD09PWIuaHlkcmF0ZSl9ZnVuY3Rpb24gTWooYSxiKXtpZighSGooYSkpdGhyb3cgdChFcnJvcigyOTkpLFwidW5zdGFibGVfY3JlYXRlUm9vdFwiKTtyZXR1cm4gbmV3IERqKGEsMSxudWxsIT1iJiYhMD09PWIuaHlkcmF0ZSl9XG4oZnVuY3Rpb24oYSl7dmFyIGI9YS5maW5kRmliZXJCeUhvc3RJbnN0YW5jZTtyZXR1cm4gdGoobSh7fSxhLHtvdmVycmlkZUhvb2tTdGF0ZTpudWxsLG92ZXJyaWRlUHJvcHM6bnVsbCxzZXRTdXNwZW5zZUhhbmRsZXI6bnVsbCxzY2hlZHVsZVVwZGF0ZTpudWxsLGN1cnJlbnREaXNwYXRjaGVyUmVmOlhiLlJlYWN0Q3VycmVudERpc3BhdGNoZXIsZmluZEhvc3RJbnN0YW5jZUJ5RmliZXI6ZnVuY3Rpb24oYSl7YT1xZChhKTtyZXR1cm4gbnVsbD09PWE/bnVsbDphLnN0YXRlTm9kZX0sZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U6ZnVuY3Rpb24oYSl7cmV0dXJuIGI/YihhKTpudWxsfSxmaW5kSG9zdEluc3RhbmNlc0ZvclJlZnJlc2g6bnVsbCxzY2hlZHVsZVJlZnJlc2g6bnVsbCxzY2hlZHVsZVJvb3Q6bnVsbCxzZXRSZWZyZXNoSGFuZGxlcjpudWxsLGdldEN1cnJlbnRGaWJlcjpudWxsfSkpfSkoe2ZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOkhhLGJ1bmRsZVR5cGU6MCx2ZXJzaW9uOlwiMTYuOS4wXCIsXG5yZW5kZXJlclBhY2thZ2VOYW1lOlwicmVhY3QtZG9tXCJ9KTt2YXIgT2o9e2RlZmF1bHQ6Tmp9LFBqPU9qJiZOanx8T2o7bW9kdWxlLmV4cG9ydHM9UGouZGVmYXVsdHx8UGo7XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3NjaGVkdWxlci5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYwLjE1LjBcbiAqIHNjaGVkdWxlci5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cyxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgZD12b2lkIDAsZT12b2lkIDAsZz12b2lkIDAsbT12b2lkIDAsbj12b2lkIDA7ZXhwb3J0cy51bnN0YWJsZV9ub3c9dm9pZCAwO2V4cG9ydHMudW5zdGFibGVfZm9yY2VGcmFtZVJhdGU9dm9pZCAwO1xuaWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3d8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBNZXNzYWdlQ2hhbm5lbCl7dmFyIHA9bnVsbCxxPW51bGwscj1mdW5jdGlvbigpe2lmKG51bGwhPT1wKXRyeXt2YXIgYT1leHBvcnRzLnVuc3RhYmxlX25vdygpO3AoITAsYSk7cD1udWxsfWNhdGNoKGIpe3Rocm93IHNldFRpbWVvdXQociwwKSxiO319O2V4cG9ydHMudW5zdGFibGVfbm93PWZ1bmN0aW9uKCl7cmV0dXJuIERhdGUubm93KCl9O2Q9ZnVuY3Rpb24oYSl7bnVsbCE9PXA/c2V0VGltZW91dChkLDAsYSk6KHA9YSxzZXRUaW1lb3V0KHIsMCkpfTtlPWZ1bmN0aW9uKGEsYil7cT1zZXRUaW1lb3V0KGEsYil9O2c9ZnVuY3Rpb24oKXtjbGVhclRpbWVvdXQocSl9O209ZnVuY3Rpb24oKXtyZXR1cm4hMX07bj1leHBvcnRzLnVuc3RhYmxlX2ZvcmNlRnJhbWVSYXRlPWZ1bmN0aW9uKCl7fX1lbHNle3ZhciB0PXdpbmRvdy5wZXJmb3JtYW5jZSx1PXdpbmRvdy5EYXRlLHY9d2luZG93LnNldFRpbWVvdXQsXG53PXdpbmRvdy5jbGVhclRpbWVvdXQseD13aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lLHk9d2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lO1widW5kZWZpbmVkXCIhPT10eXBlb2YgY29uc29sZSYmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiB4JiZjb25zb2xlLmVycm9yKFwiVGhpcyBicm93c2VyIGRvZXNuJ3Qgc3VwcG9ydCByZXF1ZXN0QW5pbWF0aW9uRnJhbWUuIE1ha2Ugc3VyZSB0aGF0IHlvdSBsb2FkIGEgcG9seWZpbGwgaW4gb2xkZXIgYnJvd3NlcnMuIGh0dHBzOi8vZmIubWUvcmVhY3QtcG9seWZpbGxzXCIpLFwiZnVuY3Rpb25cIiE9PXR5cGVvZiB5JiZjb25zb2xlLmVycm9yKFwiVGhpcyBicm93c2VyIGRvZXNuJ3Qgc3VwcG9ydCBjYW5jZWxBbmltYXRpb25GcmFtZS4gTWFrZSBzdXJlIHRoYXQgeW91IGxvYWQgYSBwb2x5ZmlsbCBpbiBvbGRlciBicm93c2Vycy4gaHR0cHM6Ly9mYi5tZS9yZWFjdC1wb2x5ZmlsbHNcIikpO2V4cG9ydHMudW5zdGFibGVfbm93PVwib2JqZWN0XCI9PT10eXBlb2YgdCYmXG5cImZ1bmN0aW9uXCI9PT10eXBlb2YgdC5ub3c/ZnVuY3Rpb24oKXtyZXR1cm4gdC5ub3coKX06ZnVuY3Rpb24oKXtyZXR1cm4gdS5ub3coKX07dmFyIHo9ITEsQT1udWxsLEI9LTEsQz0tMSxEPTMzLjMzLEU9LTEsRj0tMSxHPTAsSD0hMTttPWZ1bmN0aW9uKCl7cmV0dXJuIGV4cG9ydHMudW5zdGFibGVfbm93KCk+PUd9O249ZnVuY3Rpb24oKXt9O2V4cG9ydHMudW5zdGFibGVfZm9yY2VGcmFtZVJhdGU9ZnVuY3Rpb24oYSl7MD5hfHwxMjU8YT9jb25zb2xlLmVycm9yKFwiZm9yY2VGcmFtZVJhdGUgdGFrZXMgYSBwb3NpdGl2ZSBpbnQgYmV0d2VlbiAwIGFuZCAxMjUsIGZvcmNpbmcgZnJhbWVyYXRlcyBoaWdoZXIgdGhhbiAxMjUgZnBzIGlzIG5vdCB1bnN1cHBvcnRlZFwiKTowPGE/KEQ9TWF0aC5mbG9vcigxRTMvYSksSD0hMCk6KEQ9MzMuMzMsSD0hMSl9O3ZhciBKPWZ1bmN0aW9uKCl7aWYobnVsbCE9PUEpe3ZhciBhPWV4cG9ydHMudW5zdGFibGVfbm93KCksYj0wPEctYTt0cnl7QShiLFxuYSl8fChBPW51bGwpfWNhdGNoKGMpe3Rocm93IEkucG9zdE1lc3NhZ2UobnVsbCksYzt9fX0sSz1uZXcgTWVzc2FnZUNoYW5uZWwsST1LLnBvcnQyO0sucG9ydDEub25tZXNzYWdlPUo7dmFyIEw9ZnVuY3Rpb24oYSl7aWYobnVsbD09PUEpRj1FPS0xLHo9ITE7ZWxzZXt6PSEwO3goZnVuY3Rpb24oYSl7dyhCKTtMKGEpfSk7dmFyIGI9ZnVuY3Rpb24oKXtHPWV4cG9ydHMudW5zdGFibGVfbm93KCkrRC8yO0ooKTtCPXYoYiwzKkQpfTtCPXYoYiwzKkQpO2lmKC0xIT09RSYmLjE8YS1FKXt2YXIgYz1hLUU7IUgmJi0xIT09RiYmYzxEJiZGPEQmJihEPWM8Rj9GOmMsOC4zMz5EJiYoRD04LjMzKSk7Rj1jfUU9YTtHPWErRDtJLnBvc3RNZXNzYWdlKG51bGwpfX07ZD1mdW5jdGlvbihhKXtBPWE7enx8KHo9ITAseChmdW5jdGlvbihhKXtMKGEpfSkpfTtlPWZ1bmN0aW9uKGEsYil7Qz12KGZ1bmN0aW9uKCl7YShleHBvcnRzLnVuc3RhYmxlX25vdygpKX0sYil9O2c9ZnVuY3Rpb24oKXt3KEMpO1xuQz0tMX19dmFyIE09bnVsbCxOPW51bGwsTz1udWxsLFA9MyxRPSExLFI9ITEsUz0hMTtcbmZ1bmN0aW9uIFQoYSxiKXt2YXIgYz1hLm5leHQ7aWYoYz09PWEpTT1udWxsO2Vsc2V7YT09PU0mJihNPWMpO3ZhciBmPWEucHJldmlvdXM7Zi5uZXh0PWM7Yy5wcmV2aW91cz1mfWEubmV4dD1hLnByZXZpb3VzPW51bGw7Yz1hLmNhbGxiYWNrO2Y9UDt2YXIgbD1PO1A9YS5wcmlvcml0eUxldmVsO089YTt0cnl7dmFyIGg9YS5leHBpcmF0aW9uVGltZTw9Yjtzd2l0Y2goUCl7Y2FzZSAxOnZhciBrPWMoaCk7YnJlYWs7Y2FzZSAyOms9YyhoKTticmVhaztjYXNlIDM6az1jKGgpO2JyZWFrO2Nhc2UgNDprPWMoaCk7YnJlYWs7Y2FzZSA1Oms9YyhoKX19Y2F0Y2goWil7dGhyb3cgWjt9ZmluYWxseXtQPWYsTz1sfWlmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBrKWlmKGI9YS5leHBpcmF0aW9uVGltZSxhLmNhbGxiYWNrPWssbnVsbD09PU0pTT1hLm5leHQ9YS5wcmV2aW91cz1hO2Vsc2V7az1udWxsO2g9TTtkb3tpZihiPD1oLmV4cGlyYXRpb25UaW1lKXtrPWg7YnJlYWt9aD1oLm5leHR9d2hpbGUoaCE9PVxuTSk7bnVsbD09PWs/az1NOms9PT1NJiYoTT1hKTtiPWsucHJldmlvdXM7Yi5uZXh0PWsucHJldmlvdXM9YTthLm5leHQ9azthLnByZXZpb3VzPWJ9fWZ1bmN0aW9uIFUoYSl7aWYobnVsbCE9PU4mJk4uc3RhcnRUaW1lPD1hKXtkb3t2YXIgYj1OLGM9Yi5uZXh0O2lmKGI9PT1jKU49bnVsbDtlbHNle049Yzt2YXIgZj1iLnByZXZpb3VzO2YubmV4dD1jO2MucHJldmlvdXM9Zn1iLm5leHQ9Yi5wcmV2aW91cz1udWxsO1YoYixiLmV4cGlyYXRpb25UaW1lKX13aGlsZShudWxsIT09TiYmTi5zdGFydFRpbWU8PWEpfX1mdW5jdGlvbiBXKGEpe1M9ITE7VShhKTtSfHwobnVsbCE9PU0/KFI9ITAsZChYKSk6bnVsbCE9PU4mJmUoVyxOLnN0YXJ0VGltZS1hKSl9XG5mdW5jdGlvbiBYKGEsYil7Uj0hMTtTJiYoUz0hMSxnKCkpO1UoYik7UT0hMDt0cnl7aWYoIWEpZm9yKDtudWxsIT09TSYmTS5leHBpcmF0aW9uVGltZTw9YjspVChNLGIpLGI9ZXhwb3J0cy51bnN0YWJsZV9ub3coKSxVKGIpO2Vsc2UgaWYobnVsbCE9PU0pe2RvIFQoTSxiKSxiPWV4cG9ydHMudW5zdGFibGVfbm93KCksVShiKTt3aGlsZShudWxsIT09TSYmIW0oKSl9aWYobnVsbCE9PU0pcmV0dXJuITA7bnVsbCE9PU4mJmUoVyxOLnN0YXJ0VGltZS1iKTtyZXR1cm4hMX1maW5hbGx5e1E9ITF9fWZ1bmN0aW9uIFkoYSl7c3dpdGNoKGEpe2Nhc2UgMTpyZXR1cm4tMTtjYXNlIDI6cmV0dXJuIDI1MDtjYXNlIDU6cmV0dXJuIDEwNzM3NDE4MjM7Y2FzZSA0OnJldHVybiAxRTQ7ZGVmYXVsdDpyZXR1cm4gNUUzfX1cbmZ1bmN0aW9uIFYoYSxiKXtpZihudWxsPT09TSlNPWEubmV4dD1hLnByZXZpb3VzPWE7ZWxzZXt2YXIgYz1udWxsLGY9TTtkb3tpZihiPGYuZXhwaXJhdGlvblRpbWUpe2M9ZjticmVha31mPWYubmV4dH13aGlsZShmIT09TSk7bnVsbD09PWM/Yz1NOmM9PT1NJiYoTT1hKTtiPWMucHJldmlvdXM7Yi5uZXh0PWMucHJldmlvdXM9YTthLm5leHQ9YzthLnByZXZpb3VzPWJ9fXZhciBhYT1uO2V4cG9ydHMudW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHk9MTtleHBvcnRzLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5PTI7ZXhwb3J0cy51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eT0zO2V4cG9ydHMudW5zdGFibGVfSWRsZVByaW9yaXR5PTU7ZXhwb3J0cy51bnN0YWJsZV9Mb3dQcmlvcml0eT00O1xuZXhwb3J0cy51bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHk9ZnVuY3Rpb24oYSxiKXtzd2l0Y2goYSl7Y2FzZSAxOmNhc2UgMjpjYXNlIDM6Y2FzZSA0OmNhc2UgNTpicmVhaztkZWZhdWx0OmE9M312YXIgYz1QO1A9YTt0cnl7cmV0dXJuIGIoKX1maW5hbGx5e1A9Y319O2V4cG9ydHMudW5zdGFibGVfbmV4dD1mdW5jdGlvbihhKXtzd2l0Y2goUCl7Y2FzZSAxOmNhc2UgMjpjYXNlIDM6dmFyIGI9MzticmVhaztkZWZhdWx0OmI9UH12YXIgYz1QO1A9Yjt0cnl7cmV0dXJuIGEoKX1maW5hbGx5e1A9Y319O1xuZXhwb3J0cy51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrPWZ1bmN0aW9uKGEsYixjKXt2YXIgZj1leHBvcnRzLnVuc3RhYmxlX25vdygpO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYyYmbnVsbCE9PWMpe3ZhciBsPWMuZGVsYXk7bD1cIm51bWJlclwiPT09dHlwZW9mIGwmJjA8bD9mK2w6ZjtjPVwibnVtYmVyXCI9PT10eXBlb2YgYy50aW1lb3V0P2MudGltZW91dDpZKGEpfWVsc2UgYz1ZKGEpLGw9ZjtjPWwrYzthPXtjYWxsYmFjazpiLHByaW9yaXR5TGV2ZWw6YSxzdGFydFRpbWU6bCxleHBpcmF0aW9uVGltZTpjLG5leHQ6bnVsbCxwcmV2aW91czpudWxsfTtpZihsPmYpe2M9bDtpZihudWxsPT09TilOPWEubmV4dD1hLnByZXZpb3VzPWE7ZWxzZXtiPW51bGw7dmFyIGg9Tjtkb3tpZihjPGguc3RhcnRUaW1lKXtiPWg7YnJlYWt9aD1oLm5leHR9d2hpbGUoaCE9PU4pO251bGw9PT1iP2I9TjpiPT09TiYmKE49YSk7Yz1iLnByZXZpb3VzO2MubmV4dD1iLnByZXZpb3VzPWE7YS5uZXh0PWI7YS5wcmV2aW91cz1cbmN9bnVsbD09PU0mJk49PT1hJiYoUz9nKCk6Uz0hMCxlKFcsbC1mKSl9ZWxzZSBWKGEsYyksUnx8UXx8KFI9ITAsZChYKSk7cmV0dXJuIGF9O2V4cG9ydHMudW5zdGFibGVfY2FuY2VsQ2FsbGJhY2s9ZnVuY3Rpb24oYSl7dmFyIGI9YS5uZXh0O2lmKG51bGwhPT1iKXtpZihhPT09YilhPT09TT9NPW51bGw6YT09PU4mJihOPW51bGwpO2Vsc2V7YT09PU0/TT1iOmE9PT1OJiYoTj1iKTt2YXIgYz1hLnByZXZpb3VzO2MubmV4dD1iO2IucHJldmlvdXM9Y31hLm5leHQ9YS5wcmV2aW91cz1udWxsfX07ZXhwb3J0cy51bnN0YWJsZV93cmFwQ2FsbGJhY2s9ZnVuY3Rpb24oYSl7dmFyIGI9UDtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgYz1QO1A9Yjt0cnl7cmV0dXJuIGEuYXBwbHkodGhpcyxhcmd1bWVudHMpfWZpbmFsbHl7UD1jfX19O2V4cG9ydHMudW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWw9ZnVuY3Rpb24oKXtyZXR1cm4gUH07XG5leHBvcnRzLnVuc3RhYmxlX3Nob3VsZFlpZWxkPWZ1bmN0aW9uKCl7dmFyIGE9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtVKGEpO3JldHVybiBudWxsIT09TyYmbnVsbCE9PU0mJk0uc3RhcnRUaW1lPD1hJiZNLmV4cGlyYXRpb25UaW1lPE8uZXhwaXJhdGlvblRpbWV8fG0oKX07ZXhwb3J0cy51bnN0YWJsZV9yZXF1ZXN0UGFpbnQ9YWE7ZXhwb3J0cy51bnN0YWJsZV9jb250aW51ZUV4ZWN1dGlvbj1mdW5jdGlvbigpe1J8fFF8fChSPSEwLGQoWCkpfTtleHBvcnRzLnVuc3RhYmxlX3BhdXNlRXhlY3V0aW9uPWZ1bmN0aW9uKCl7fTtleHBvcnRzLnVuc3RhYmxlX2dldEZpcnN0Q2FsbGJhY2tOb2RlPWZ1bmN0aW9uKCl7cmV0dXJuIE19O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1hcnJheScpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1hYnNvbHV0ZS1pbmRleCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIGNyZWF0ZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eScpO1xudmFyIGFycmF5TWV0aG9kSGFzU3BlY2llc1N1cHBvcnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLWhhcy1zcGVjaWVzLXN1cHBvcnQnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIFNQRUNJRVMgPSB3ZWxsS25vd25TeW1ib2woJ3NwZWNpZXMnKTtcbnZhciBuYXRpdmVTbGljZSA9IFtdLnNsaWNlO1xudmFyIG1heCA9IE1hdGgubWF4O1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLnNsaWNlYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5zbGljZVxuLy8gZmFsbGJhY2sgZm9yIG5vdCBhcnJheS1saWtlIEVTMyBzdHJpbmdzIGFuZCBET00gb2JqZWN0c1xuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGZvcmNlZDogIWFycmF5TWV0aG9kSGFzU3BlY2llc1N1cHBvcnQoJ3NsaWNlJykgfSwge1xuICBzbGljZTogZnVuY3Rpb24gc2xpY2Uoc3RhcnQsIGVuZCkge1xuICAgIHZhciBPID0gdG9JbmRleGVkT2JqZWN0KHRoaXMpO1xuICAgIHZhciBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgdmFyIGsgPSB0b0Fic29sdXRlSW5kZXgoc3RhcnQsIGxlbmd0aCk7XG4gICAgdmFyIGZpbiA9IHRvQWJzb2x1dGVJbmRleChlbmQgPT09IHVuZGVmaW5lZCA/IGxlbmd0aCA6IGVuZCwgbGVuZ3RoKTtcbiAgICAvLyBpbmxpbmUgYEFycmF5U3BlY2llc0NyZWF0ZWAgZm9yIHVzYWdlIG5hdGl2ZSBgQXJyYXkjc2xpY2VgIHdoZXJlIGl0J3MgcG9zc2libGVcbiAgICB2YXIgQ29uc3RydWN0b3IsIHJlc3VsdCwgbjtcbiAgICBpZiAoaXNBcnJheShPKSkge1xuICAgICAgQ29uc3RydWN0b3IgPSBPLmNvbnN0cnVjdG9yO1xuICAgICAgLy8gY3Jvc3MtcmVhbG0gZmFsbGJhY2tcbiAgICAgIGlmICh0eXBlb2YgQ29uc3RydWN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiAoQ29uc3RydWN0b3IgPT09IEFycmF5IHx8IGlzQXJyYXkoQ29uc3RydWN0b3IucHJvdG90eXBlKSkpIHtcbiAgICAgICAgQ29uc3RydWN0b3IgPSB1bmRlZmluZWQ7XG4gICAgICB9IGVsc2UgaWYgKGlzT2JqZWN0KENvbnN0cnVjdG9yKSkge1xuICAgICAgICBDb25zdHJ1Y3RvciA9IENvbnN0cnVjdG9yW1NQRUNJRVNdO1xuICAgICAgICBpZiAoQ29uc3RydWN0b3IgPT09IG51bGwpIENvbnN0cnVjdG9yID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgaWYgKENvbnN0cnVjdG9yID09PSBBcnJheSB8fCBDb25zdHJ1Y3RvciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBuYXRpdmVTbGljZS5jYWxsKE8sIGssIGZpbik7XG4gICAgICB9XG4gICAgfVxuICAgIHJlc3VsdCA9IG5ldyAoQ29uc3RydWN0b3IgPT09IHVuZGVmaW5lZCA/IEFycmF5IDogQ29uc3RydWN0b3IpKG1heChmaW4gLSBrLCAwKSk7XG4gICAgZm9yIChuID0gMDsgayA8IGZpbjsgaysrLCBuKyspIGlmIChrIGluIE8pIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwgbiwgT1trXSk7XG4gICAgcmVzdWx0Lmxlbmd0aCA9IG47XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufSk7XG4iLCJmdW5jdGlvbiBfdHlwZW9mMihvYmopIHsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YyID0gZnVuY3Rpb24gX3R5cGVvZjIob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mMiA9IGZ1bmN0aW9uIF90eXBlb2YyKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZjIob2JqKTsgfVxuXG5mdW5jdGlvbiBfdHlwZW9mKG9iaikge1xuICBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIF90eXBlb2YyKFN5bWJvbC5pdGVyYXRvcikgPT09IFwic3ltYm9sXCIpIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikge1xuICAgICAgcmV0dXJuIF90eXBlb2YyKG9iaik7XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikge1xuICAgICAgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IF90eXBlb2YyKG9iaik7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBfdHlwZW9mKG9iaik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX3R5cGVvZjsiLCJmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkge1xuICBtb2R1bGUuZXhwb3J0cyA9IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkge1xuICAgIG8uX19wcm90b19fID0gcDtcbiAgICByZXR1cm4gbztcbiAgfTtcblxuICByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9zZXRQcm90b3R5cGVPZjsiLCIndXNlIHN0cmljdCc7XG5cbnZhciBoYXMgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIGlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xuXG52YXIgaGV4VGFibGUgPSAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBhcnJheSA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMjU2OyArK2kpIHtcbiAgICAgICAgYXJyYXkucHVzaCgnJScgKyAoKGkgPCAxNiA/ICcwJyA6ICcnKSArIGkudG9TdHJpbmcoMTYpKS50b1VwcGVyQ2FzZSgpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gYXJyYXk7XG59KCkpO1xuXG52YXIgY29tcGFjdFF1ZXVlID0gZnVuY3Rpb24gY29tcGFjdFF1ZXVlKHF1ZXVlKSB7XG4gICAgd2hpbGUgKHF1ZXVlLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgdmFyIGl0ZW0gPSBxdWV1ZS5wb3AoKTtcbiAgICAgICAgdmFyIG9iaiA9IGl0ZW0ub2JqW2l0ZW0ucHJvcF07XG5cbiAgICAgICAgaWYgKGlzQXJyYXkob2JqKSkge1xuICAgICAgICAgICAgdmFyIGNvbXBhY3RlZCA9IFtdO1xuXG4gICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IG9iai5sZW5ndGg7ICsraikge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygb2JqW2pdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgICAgICBjb21wYWN0ZWQucHVzaChvYmpbal0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaXRlbS5vYmpbaXRlbS5wcm9wXSA9IGNvbXBhY3RlZDtcbiAgICAgICAgfVxuICAgIH1cbn07XG5cbnZhciBhcnJheVRvT2JqZWN0ID0gZnVuY3Rpb24gYXJyYXlUb09iamVjdChzb3VyY2UsIG9wdGlvbnMpIHtcbiAgICB2YXIgb2JqID0gb3B0aW9ucyAmJiBvcHRpb25zLnBsYWluT2JqZWN0cyA/IE9iamVjdC5jcmVhdGUobnVsbCkgOiB7fTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNvdXJjZS5sZW5ndGg7ICsraSkge1xuICAgICAgICBpZiAodHlwZW9mIHNvdXJjZVtpXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIG9ialtpXSA9IHNvdXJjZVtpXTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBvYmo7XG59O1xuXG52YXIgbWVyZ2UgPSBmdW5jdGlvbiBtZXJnZSh0YXJnZXQsIHNvdXJjZSwgb3B0aW9ucykge1xuICAgIGlmICghc291cmNlKSB7XG4gICAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBzb3VyY2UgIT09ICdvYmplY3QnKSB7XG4gICAgICAgIGlmIChpc0FycmF5KHRhcmdldCkpIHtcbiAgICAgICAgICAgIHRhcmdldC5wdXNoKHNvdXJjZSk7XG4gICAgICAgIH0gZWxzZSBpZiAodGFyZ2V0ICYmIHR5cGVvZiB0YXJnZXQgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICBpZiAoKG9wdGlvbnMgJiYgKG9wdGlvbnMucGxhaW5PYmplY3RzIHx8IG9wdGlvbnMuYWxsb3dQcm90b3R5cGVzKSkgfHwgIWhhcy5jYWxsKE9iamVjdC5wcm90b3R5cGUsIHNvdXJjZSkpIHtcbiAgICAgICAgICAgICAgICB0YXJnZXRbc291cmNlXSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gW3RhcmdldCwgc291cmNlXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgfVxuXG4gICAgaWYgKCF0YXJnZXQgfHwgdHlwZW9mIHRhcmdldCAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgcmV0dXJuIFt0YXJnZXRdLmNvbmNhdChzb3VyY2UpO1xuICAgIH1cblxuICAgIHZhciBtZXJnZVRhcmdldCA9IHRhcmdldDtcbiAgICBpZiAoaXNBcnJheSh0YXJnZXQpICYmICFpc0FycmF5KHNvdXJjZSkpIHtcbiAgICAgICAgbWVyZ2VUYXJnZXQgPSBhcnJheVRvT2JqZWN0KHRhcmdldCwgb3B0aW9ucyk7XG4gICAgfVxuXG4gICAgaWYgKGlzQXJyYXkodGFyZ2V0KSAmJiBpc0FycmF5KHNvdXJjZSkpIHtcbiAgICAgICAgc291cmNlLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0sIGkpIHtcbiAgICAgICAgICAgIGlmIChoYXMuY2FsbCh0YXJnZXQsIGkpKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRhcmdldEl0ZW0gPSB0YXJnZXRbaV07XG4gICAgICAgICAgICAgICAgaWYgKHRhcmdldEl0ZW0gJiYgdHlwZW9mIHRhcmdldEl0ZW0gPT09ICdvYmplY3QnICYmIGl0ZW0gJiYgdHlwZW9mIGl0ZW0gPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldFtpXSA9IG1lcmdlKHRhcmdldEl0ZW0sIGl0ZW0sIG9wdGlvbnMpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldC5wdXNoKGl0ZW0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0W2ldID0gaXRlbTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKHNvdXJjZSkucmVkdWNlKGZ1bmN0aW9uIChhY2MsIGtleSkge1xuICAgICAgICB2YXIgdmFsdWUgPSBzb3VyY2Vba2V5XTtcblxuICAgICAgICBpZiAoaGFzLmNhbGwoYWNjLCBrZXkpKSB7XG4gICAgICAgICAgICBhY2Nba2V5XSA9IG1lcmdlKGFjY1trZXldLCB2YWx1ZSwgb3B0aW9ucyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBhY2Nba2V5XSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhY2M7XG4gICAgfSwgbWVyZ2VUYXJnZXQpO1xufTtcblxudmFyIGFzc2lnbiA9IGZ1bmN0aW9uIGFzc2lnblNpbmdsZVNvdXJjZSh0YXJnZXQsIHNvdXJjZSkge1xuICAgIHJldHVybiBPYmplY3Qua2V5cyhzb3VyY2UpLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBrZXkpIHtcbiAgICAgICAgYWNjW2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgcmV0dXJuIGFjYztcbiAgICB9LCB0YXJnZXQpO1xufTtcblxudmFyIGRlY29kZSA9IGZ1bmN0aW9uIChzdHIsIGRlY29kZXIsIGNoYXJzZXQpIHtcbiAgICB2YXIgc3RyV2l0aG91dFBsdXMgPSBzdHIucmVwbGFjZSgvXFwrL2csICcgJyk7XG4gICAgaWYgKGNoYXJzZXQgPT09ICdpc28tODg1OS0xJykge1xuICAgICAgICAvLyB1bmVzY2FwZSBuZXZlciB0aHJvd3MsIG5vIHRyeS4uLmNhdGNoIG5lZWRlZDpcbiAgICAgICAgcmV0dXJuIHN0cldpdGhvdXRQbHVzLnJlcGxhY2UoLyVbMC05YS1mXXsyfS9naSwgdW5lc2NhcGUpO1xuICAgIH1cbiAgICAvLyB1dGYtOFxuICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBkZWNvZGVVUklDb21wb25lbnQoc3RyV2l0aG91dFBsdXMpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIHN0cldpdGhvdXRQbHVzO1xuICAgIH1cbn07XG5cbnZhciBlbmNvZGUgPSBmdW5jdGlvbiBlbmNvZGUoc3RyLCBkZWZhdWx0RW5jb2RlciwgY2hhcnNldCkge1xuICAgIC8vIFRoaXMgY29kZSB3YXMgb3JpZ2luYWxseSB3cml0dGVuIGJ5IEJyaWFuIFdoaXRlIChtc2NkZXgpIGZvciB0aGUgaW8uanMgY29yZSBxdWVyeXN0cmluZyBsaWJyYXJ5LlxuICAgIC8vIEl0IGhhcyBiZWVuIGFkYXB0ZWQgaGVyZSBmb3Igc3RyaWN0ZXIgYWRoZXJlbmNlIHRvIFJGQyAzOTg2XG4gICAgaWYgKHN0ci5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIHN0cjtcbiAgICB9XG5cbiAgICB2YXIgc3RyaW5nID0gc3RyO1xuICAgIGlmICh0eXBlb2Ygc3RyID09PSAnc3ltYm9sJykge1xuICAgICAgICBzdHJpbmcgPSBTeW1ib2wucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoc3RyKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBzdHIgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHN0cmluZyA9IFN0cmluZyhzdHIpO1xuICAgIH1cblxuICAgIGlmIChjaGFyc2V0ID09PSAnaXNvLTg4NTktMScpIHtcbiAgICAgICAgcmV0dXJuIGVzY2FwZShzdHJpbmcpLnJlcGxhY2UoLyV1WzAtOWEtZl17NH0vZ2ksIGZ1bmN0aW9uICgkMCkge1xuICAgICAgICAgICAgcmV0dXJuICclMjYlMjMnICsgcGFyc2VJbnQoJDAuc2xpY2UoMiksIDE2KSArICclM0InO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICB2YXIgb3V0ID0gJyc7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHJpbmcubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgdmFyIGMgPSBzdHJpbmcuY2hhckNvZGVBdChpKTtcblxuICAgICAgICBpZiAoXG4gICAgICAgICAgICBjID09PSAweDJEIC8vIC1cbiAgICAgICAgICAgIHx8IGMgPT09IDB4MkUgLy8gLlxuICAgICAgICAgICAgfHwgYyA9PT0gMHg1RiAvLyBfXG4gICAgICAgICAgICB8fCBjID09PSAweDdFIC8vIH5cbiAgICAgICAgICAgIHx8IChjID49IDB4MzAgJiYgYyA8PSAweDM5KSAvLyAwLTlcbiAgICAgICAgICAgIHx8IChjID49IDB4NDEgJiYgYyA8PSAweDVBKSAvLyBhLXpcbiAgICAgICAgICAgIHx8IChjID49IDB4NjEgJiYgYyA8PSAweDdBKSAvLyBBLVpcbiAgICAgICAgKSB7XG4gICAgICAgICAgICBvdXQgKz0gc3RyaW5nLmNoYXJBdChpKTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGMgPCAweDgwKSB7XG4gICAgICAgICAgICBvdXQgPSBvdXQgKyBoZXhUYWJsZVtjXTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGMgPCAweDgwMCkge1xuICAgICAgICAgICAgb3V0ID0gb3V0ICsgKGhleFRhYmxlWzB4QzAgfCAoYyA+PiA2KV0gKyBoZXhUYWJsZVsweDgwIHwgKGMgJiAweDNGKV0pO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYyA8IDB4RDgwMCB8fCBjID49IDB4RTAwMCkge1xuICAgICAgICAgICAgb3V0ID0gb3V0ICsgKGhleFRhYmxlWzB4RTAgfCAoYyA+PiAxMildICsgaGV4VGFibGVbMHg4MCB8ICgoYyA+PiA2KSAmIDB4M0YpXSArIGhleFRhYmxlWzB4ODAgfCAoYyAmIDB4M0YpXSk7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGkgKz0gMTtcbiAgICAgICAgYyA9IDB4MTAwMDAgKyAoKChjICYgMHgzRkYpIDw8IDEwKSB8IChzdHJpbmcuY2hhckNvZGVBdChpKSAmIDB4M0ZGKSk7XG4gICAgICAgIG91dCArPSBoZXhUYWJsZVsweEYwIHwgKGMgPj4gMTgpXVxuICAgICAgICAgICAgKyBoZXhUYWJsZVsweDgwIHwgKChjID4+IDEyKSAmIDB4M0YpXVxuICAgICAgICAgICAgKyBoZXhUYWJsZVsweDgwIHwgKChjID4+IDYpICYgMHgzRildXG4gICAgICAgICAgICArIGhleFRhYmxlWzB4ODAgfCAoYyAmIDB4M0YpXTtcbiAgICB9XG5cbiAgICByZXR1cm4gb3V0O1xufTtcblxudmFyIGNvbXBhY3QgPSBmdW5jdGlvbiBjb21wYWN0KHZhbHVlKSB7XG4gICAgdmFyIHF1ZXVlID0gW3sgb2JqOiB7IG86IHZhbHVlIH0sIHByb3A6ICdvJyB9XTtcbiAgICB2YXIgcmVmcyA9IFtdO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBxdWV1ZS5sZW5ndGg7ICsraSkge1xuICAgICAgICB2YXIgaXRlbSA9IHF1ZXVlW2ldO1xuICAgICAgICB2YXIgb2JqID0gaXRlbS5vYmpbaXRlbS5wcm9wXTtcblxuICAgICAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iaik7XG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwga2V5cy5sZW5ndGg7ICsraikge1xuICAgICAgICAgICAgdmFyIGtleSA9IGtleXNbal07XG4gICAgICAgICAgICB2YXIgdmFsID0gb2JqW2tleV07XG4gICAgICAgICAgICBpZiAodHlwZW9mIHZhbCA9PT0gJ29iamVjdCcgJiYgdmFsICE9PSBudWxsICYmIHJlZnMuaW5kZXhPZih2YWwpID09PSAtMSkge1xuICAgICAgICAgICAgICAgIHF1ZXVlLnB1c2goeyBvYmo6IG9iaiwgcHJvcDoga2V5IH0pO1xuICAgICAgICAgICAgICAgIHJlZnMucHVzaCh2YWwpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgY29tcGFjdFF1ZXVlKHF1ZXVlKTtcblxuICAgIHJldHVybiB2YWx1ZTtcbn07XG5cbnZhciBpc1JlZ0V4cCA9IGZ1bmN0aW9uIGlzUmVnRXhwKG9iaikge1xuICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqKSA9PT0gJ1tvYmplY3QgUmVnRXhwXSc7XG59O1xuXG52YXIgaXNCdWZmZXIgPSBmdW5jdGlvbiBpc0J1ZmZlcihvYmopIHtcbiAgICBpZiAoIW9iaiB8fCB0eXBlb2Ygb2JqICE9PSAnb2JqZWN0Jykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuICEhKG9iai5jb25zdHJ1Y3RvciAmJiBvYmouY29uc3RydWN0b3IuaXNCdWZmZXIgJiYgb2JqLmNvbnN0cnVjdG9yLmlzQnVmZmVyKG9iaikpO1xufTtcblxudmFyIGNvbWJpbmUgPSBmdW5jdGlvbiBjb21iaW5lKGEsIGIpIHtcbiAgICByZXR1cm4gW10uY29uY2F0KGEsIGIpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgYXJyYXlUb09iamVjdDogYXJyYXlUb09iamVjdCxcbiAgICBhc3NpZ246IGFzc2lnbixcbiAgICBjb21iaW5lOiBjb21iaW5lLFxuICAgIGNvbXBhY3Q6IGNvbXBhY3QsXG4gICAgZGVjb2RlOiBkZWNvZGUsXG4gICAgZW5jb2RlOiBlbmNvZGUsXG4gICAgaXNCdWZmZXI6IGlzQnVmZmVyLFxuICAgIGlzUmVnRXhwOiBpc1JlZ0V4cCxcbiAgICBtZXJnZTogbWVyZ2Vcbn07XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmICghaXNPYmplY3QoaXQpKSB0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBhbiBvYmplY3QhJyk7XG4gIHJldHVybiBpdDtcbn07XG4iLCIvLyB0byBpbmRleGVkIG9iamVjdCwgdG9PYmplY3Qgd2l0aCBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIHN0cmluZ3NcbnZhciBJT2JqZWN0ID0gcmVxdWlyZSgnLi9faW9iamVjdCcpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gSU9iamVjdChkZWZpbmVkKGl0KSk7XG59O1xuIiwiLyogZ2xvYmFsIHdpbmRvdywgZXhwb3J0cywgZGVmaW5lICovXG5cbiFmdW5jdGlvbigpIHtcbiAgICAndXNlIHN0cmljdCdcblxuICAgIHZhciByZSA9IHtcbiAgICAgICAgbm90X3N0cmluZzogL1tec10vLFxuICAgICAgICBub3RfYm9vbDogL1tedF0vLFxuICAgICAgICBub3RfdHlwZTogL1teVF0vLFxuICAgICAgICBub3RfcHJpbWl0aXZlOiAvW152XS8sXG4gICAgICAgIG51bWJlcjogL1tkaWVmZ10vLFxuICAgICAgICBudW1lcmljX2FyZzogL1tiY2RpZWZndXhYXS8sXG4gICAgICAgIGpzb246IC9bal0vLFxuICAgICAgICBub3RfanNvbjogL1teal0vLFxuICAgICAgICB0ZXh0OiAvXlteXFx4MjVdKy8sXG4gICAgICAgIG1vZHVsbzogL15cXHgyNXsyfS8sXG4gICAgICAgIHBsYWNlaG9sZGVyOiAvXlxceDI1KD86KFsxLTldXFxkKilcXCR8XFwoKFteKV0rKVxcKSk/KFxcKyk/KDB8J1teJF0pPygtKT8oXFxkKyk/KD86XFwuKFxcZCspKT8oW2ItZ2lqb3N0VHV2eFhdKS8sXG4gICAgICAgIGtleTogL14oW2Etel9dW2Etel9cXGRdKikvaSxcbiAgICAgICAga2V5X2FjY2VzczogL15cXC4oW2Etel9dW2Etel9cXGRdKikvaSxcbiAgICAgICAgaW5kZXhfYWNjZXNzOiAvXlxcWyhcXGQrKVxcXS8sXG4gICAgICAgIHNpZ246IC9eWystXS9cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzcHJpbnRmKGtleSkge1xuICAgICAgICAvLyBgYXJndW1lbnRzYCBpcyBub3QgYW4gYXJyYXksIGJ1dCBzaG91bGQgYmUgZmluZSBmb3IgdGhpcyBjYWxsXG4gICAgICAgIHJldHVybiBzcHJpbnRmX2Zvcm1hdChzcHJpbnRmX3BhcnNlKGtleSksIGFyZ3VtZW50cylcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB2c3ByaW50ZihmbXQsIGFyZ3YpIHtcbiAgICAgICAgcmV0dXJuIHNwcmludGYuYXBwbHkobnVsbCwgW2ZtdF0uY29uY2F0KGFyZ3YgfHwgW10pKVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNwcmludGZfZm9ybWF0KHBhcnNlX3RyZWUsIGFyZ3YpIHtcbiAgICAgICAgdmFyIGN1cnNvciA9IDEsIHRyZWVfbGVuZ3RoID0gcGFyc2VfdHJlZS5sZW5ndGgsIGFyZywgb3V0cHV0ID0gJycsIGksIGssIHBoLCBwYWQsIHBhZF9jaGFyYWN0ZXIsIHBhZF9sZW5ndGgsIGlzX3Bvc2l0aXZlLCBzaWduXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCB0cmVlX2xlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHBhcnNlX3RyZWVbaV0gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgb3V0cHV0ICs9IHBhcnNlX3RyZWVbaV1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBwYXJzZV90cmVlW2ldID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgIHBoID0gcGFyc2VfdHJlZVtpXSAvLyBjb252ZW5pZW5jZSBwdXJwb3NlcyBvbmx5XG4gICAgICAgICAgICAgICAgaWYgKHBoLmtleXMpIHsgLy8ga2V5d29yZCBhcmd1bWVudFxuICAgICAgICAgICAgICAgICAgICBhcmcgPSBhcmd2W2N1cnNvcl1cbiAgICAgICAgICAgICAgICAgICAgZm9yIChrID0gMDsgayA8IHBoLmtleXMubGVuZ3RoOyBrKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhcmcgPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKHNwcmludGYoJ1tzcHJpbnRmXSBDYW5ub3QgYWNjZXNzIHByb3BlcnR5IFwiJXNcIiBvZiB1bmRlZmluZWQgdmFsdWUgXCIlc1wiJywgcGgua2V5c1trXSwgcGgua2V5c1trLTFdKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZyA9IGFyZ1twaC5rZXlzW2tdXVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHBoLnBhcmFtX25vKSB7IC8vIHBvc2l0aW9uYWwgYXJndW1lbnQgKGV4cGxpY2l0KVxuICAgICAgICAgICAgICAgICAgICBhcmcgPSBhcmd2W3BoLnBhcmFtX25vXVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHsgLy8gcG9zaXRpb25hbCBhcmd1bWVudCAoaW1wbGljaXQpXG4gICAgICAgICAgICAgICAgICAgIGFyZyA9IGFyZ3ZbY3Vyc29yKytdXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKHJlLm5vdF90eXBlLnRlc3QocGgudHlwZSkgJiYgcmUubm90X3ByaW1pdGl2ZS50ZXN0KHBoLnR5cGUpICYmIGFyZyBpbnN0YW5jZW9mIEZ1bmN0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIGFyZyA9IGFyZygpXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKHJlLm51bWVyaWNfYXJnLnRlc3QocGgudHlwZSkgJiYgKHR5cGVvZiBhcmcgIT09ICdudW1iZXInICYmIGlzTmFOKGFyZykpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3Ioc3ByaW50ZignW3NwcmludGZdIGV4cGVjdGluZyBudW1iZXIgYnV0IGZvdW5kICVUJywgYXJnKSlcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAocmUubnVtYmVyLnRlc3QocGgudHlwZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgaXNfcG9zaXRpdmUgPSBhcmcgPj0gMFxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHN3aXRjaCAocGgudHlwZSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdiJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZyA9IHBhcnNlSW50KGFyZywgMTApLnRvU3RyaW5nKDIpXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdjJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZyA9IFN0cmluZy5mcm9tQ2hhckNvZGUocGFyc2VJbnQoYXJnLCAxMCkpXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdkJzpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnaSc6XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmcgPSBwYXJzZUludChhcmcsIDEwKVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnaic6XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmcgPSBKU09OLnN0cmluZ2lmeShhcmcsIG51bGwsIHBoLndpZHRoID8gcGFyc2VJbnQocGgud2lkdGgpIDogMClcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2UnOlxuICAgICAgICAgICAgICAgICAgICAgICAgYXJnID0gcGgucHJlY2lzaW9uID8gcGFyc2VGbG9hdChhcmcpLnRvRXhwb25lbnRpYWwocGgucHJlY2lzaW9uKSA6IHBhcnNlRmxvYXQoYXJnKS50b0V4cG9uZW50aWFsKClcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2YnOlxuICAgICAgICAgICAgICAgICAgICAgICAgYXJnID0gcGgucHJlY2lzaW9uID8gcGFyc2VGbG9hdChhcmcpLnRvRml4ZWQocGgucHJlY2lzaW9uKSA6IHBhcnNlRmxvYXQoYXJnKVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnZyc6XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmcgPSBwaC5wcmVjaXNpb24gPyBTdHJpbmcoTnVtYmVyKGFyZy50b1ByZWNpc2lvbihwaC5wcmVjaXNpb24pKSkgOiBwYXJzZUZsb2F0KGFyZylcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ28nOlxuICAgICAgICAgICAgICAgICAgICAgICAgYXJnID0gKHBhcnNlSW50KGFyZywgMTApID4+PiAwKS50b1N0cmluZyg4KVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAncyc6XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmcgPSBTdHJpbmcoYXJnKVxuICAgICAgICAgICAgICAgICAgICAgICAgYXJnID0gKHBoLnByZWNpc2lvbiA/IGFyZy5zdWJzdHJpbmcoMCwgcGgucHJlY2lzaW9uKSA6IGFyZylcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3QnOlxuICAgICAgICAgICAgICAgICAgICAgICAgYXJnID0gU3RyaW5nKCEhYXJnKVxuICAgICAgICAgICAgICAgICAgICAgICAgYXJnID0gKHBoLnByZWNpc2lvbiA/IGFyZy5zdWJzdHJpbmcoMCwgcGgucHJlY2lzaW9uKSA6IGFyZylcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ1QnOlxuICAgICAgICAgICAgICAgICAgICAgICAgYXJnID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGFyZykuc2xpY2UoOCwgLTEpLnRvTG93ZXJDYXNlKClcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZyA9IChwaC5wcmVjaXNpb24gPyBhcmcuc3Vic3RyaW5nKDAsIHBoLnByZWNpc2lvbikgOiBhcmcpXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgICAgICBjYXNlICd1JzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZyA9IHBhcnNlSW50KGFyZywgMTApID4+PiAwXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgICAgICBjYXNlICd2JzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZyA9IGFyZy52YWx1ZU9mKClcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZyA9IChwaC5wcmVjaXNpb24gPyBhcmcuc3Vic3RyaW5nKDAsIHBoLnByZWNpc2lvbikgOiBhcmcpXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgICAgICBjYXNlICd4JzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZyA9IChwYXJzZUludChhcmcsIDEwKSA+Pj4gMCkudG9TdHJpbmcoMTYpXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdYJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZyA9IChwYXJzZUludChhcmcsIDEwKSA+Pj4gMCkudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKClcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChyZS5qc29uLnRlc3QocGgudHlwZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0ICs9IGFyZ1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlLm51bWJlci50ZXN0KHBoLnR5cGUpICYmICghaXNfcG9zaXRpdmUgfHwgcGguc2lnbikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpZ24gPSBpc19wb3NpdGl2ZSA/ICcrJyA6ICctJ1xuICAgICAgICAgICAgICAgICAgICAgICAgYXJnID0gYXJnLnRvU3RyaW5nKCkucmVwbGFjZShyZS5zaWduLCAnJylcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpZ24gPSAnJ1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHBhZF9jaGFyYWN0ZXIgPSBwaC5wYWRfY2hhciA/IHBoLnBhZF9jaGFyID09PSAnMCcgPyAnMCcgOiBwaC5wYWRfY2hhci5jaGFyQXQoMSkgOiAnICdcbiAgICAgICAgICAgICAgICAgICAgcGFkX2xlbmd0aCA9IHBoLndpZHRoIC0gKHNpZ24gKyBhcmcpLmxlbmd0aFxuICAgICAgICAgICAgICAgICAgICBwYWQgPSBwaC53aWR0aCA/IChwYWRfbGVuZ3RoID4gMCA/IHBhZF9jaGFyYWN0ZXIucmVwZWF0KHBhZF9sZW5ndGgpIDogJycpIDogJydcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0ICs9IHBoLmFsaWduID8gc2lnbiArIGFyZyArIHBhZCA6IChwYWRfY2hhcmFjdGVyID09PSAnMCcgPyBzaWduICsgcGFkICsgYXJnIDogcGFkICsgc2lnbiArIGFyZylcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG91dHB1dFxuICAgIH1cblxuICAgIHZhciBzcHJpbnRmX2NhY2hlID0gT2JqZWN0LmNyZWF0ZShudWxsKVxuXG4gICAgZnVuY3Rpb24gc3ByaW50Zl9wYXJzZShmbXQpIHtcbiAgICAgICAgaWYgKHNwcmludGZfY2FjaGVbZm10XSkge1xuICAgICAgICAgICAgcmV0dXJuIHNwcmludGZfY2FjaGVbZm10XVxuICAgICAgICB9XG5cbiAgICAgICAgdmFyIF9mbXQgPSBmbXQsIG1hdGNoLCBwYXJzZV90cmVlID0gW10sIGFyZ19uYW1lcyA9IDBcbiAgICAgICAgd2hpbGUgKF9mbXQpIHtcbiAgICAgICAgICAgIGlmICgobWF0Y2ggPSByZS50ZXh0LmV4ZWMoX2ZtdCkpICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcGFyc2VfdHJlZS5wdXNoKG1hdGNoWzBdKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoKG1hdGNoID0gcmUubW9kdWxvLmV4ZWMoX2ZtdCkpICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcGFyc2VfdHJlZS5wdXNoKCclJylcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKChtYXRjaCA9IHJlLnBsYWNlaG9sZGVyLmV4ZWMoX2ZtdCkpICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgaWYgKG1hdGNoWzJdKSB7XG4gICAgICAgICAgICAgICAgICAgIGFyZ19uYW1lcyB8PSAxXG4gICAgICAgICAgICAgICAgICAgIHZhciBmaWVsZF9saXN0ID0gW10sIHJlcGxhY2VtZW50X2ZpZWxkID0gbWF0Y2hbMl0sIGZpZWxkX21hdGNoID0gW11cbiAgICAgICAgICAgICAgICAgICAgaWYgKChmaWVsZF9tYXRjaCA9IHJlLmtleS5leGVjKHJlcGxhY2VtZW50X2ZpZWxkKSkgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpZWxkX2xpc3QucHVzaChmaWVsZF9tYXRjaFsxXSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlICgocmVwbGFjZW1lbnRfZmllbGQgPSByZXBsYWNlbWVudF9maWVsZC5zdWJzdHJpbmcoZmllbGRfbWF0Y2hbMF0ubGVuZ3RoKSkgIT09ICcnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKChmaWVsZF9tYXRjaCA9IHJlLmtleV9hY2Nlc3MuZXhlYyhyZXBsYWNlbWVudF9maWVsZCkpICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpZWxkX2xpc3QucHVzaChmaWVsZF9tYXRjaFsxXSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoKGZpZWxkX21hdGNoID0gcmUuaW5kZXhfYWNjZXNzLmV4ZWMocmVwbGFjZW1lbnRfZmllbGQpKSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWVsZF9saXN0LnB1c2goZmllbGRfbWF0Y2hbMV0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgU3ludGF4RXJyb3IoJ1tzcHJpbnRmXSBmYWlsZWQgdG8gcGFyc2UgbmFtZWQgYXJndW1lbnQga2V5JylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgU3ludGF4RXJyb3IoJ1tzcHJpbnRmXSBmYWlsZWQgdG8gcGFyc2UgbmFtZWQgYXJndW1lbnQga2V5JylcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtYXRjaFsyXSA9IGZpZWxkX2xpc3RcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGFyZ19uYW1lcyB8PSAyXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChhcmdfbmFtZXMgPT09IDMpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdbc3ByaW50Zl0gbWl4aW5nIHBvc2l0aW9uYWwgYW5kIG5hbWVkIHBsYWNlaG9sZGVycyBpcyBub3QgKHlldCkgc3VwcG9ydGVkJylcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBwYXJzZV90cmVlLnB1c2goXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiBtYXRjaFswXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtX25vOiAgICBtYXRjaFsxXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleXM6ICAgICAgICBtYXRjaFsyXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpZ246ICAgICAgICBtYXRjaFszXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhZF9jaGFyOiAgICBtYXRjaFs0XSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsaWduOiAgICAgICBtYXRjaFs1XSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAgICAgICBtYXRjaFs2XSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHByZWNpc2lvbjogICBtYXRjaFs3XSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICAgICAgICBtYXRjaFs4XVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFN5bnRheEVycm9yKCdbc3ByaW50Zl0gdW5leHBlY3RlZCBwbGFjZWhvbGRlcicpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBfZm10ID0gX2ZtdC5zdWJzdHJpbmcobWF0Y2hbMF0ubGVuZ3RoKVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzcHJpbnRmX2NhY2hlW2ZtdF0gPSBwYXJzZV90cmVlXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogZXhwb3J0IHRvIGVpdGhlciBicm93c2VyIG9yIG5vZGUuanNcbiAgICAgKi9cbiAgICAvKiBlc2xpbnQtZGlzYWJsZSBxdW90ZS1wcm9wcyAqL1xuICAgIGlmICh0eXBlb2YgZXhwb3J0cyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgZXhwb3J0c1snc3ByaW50ZiddID0gc3ByaW50ZlxuICAgICAgICBleHBvcnRzWyd2c3ByaW50ZiddID0gdnNwcmludGZcbiAgICB9XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHdpbmRvd1snc3ByaW50ZiddID0gc3ByaW50ZlxuICAgICAgICB3aW5kb3dbJ3ZzcHJpbnRmJ10gPSB2c3ByaW50ZlxuXG4gICAgICAgIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZVsnYW1kJ10pIHtcbiAgICAgICAgICAgIGRlZmluZShmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAnc3ByaW50Zic6IHNwcmludGYsXG4gICAgICAgICAgICAgICAgICAgICd2c3ByaW50Zic6IHZzcHJpbnRmXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKiBlc2xpbnQtZW5hYmxlIHF1b3RlLXByb3BzICovXG59KCk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcInJlZ2VuZXJhdG9yLXJ1bnRpbWVcIik7XG4iLCIvKiBnbG9iYWwgd2luZG93LCBleHBvcnRzLCBkZWZpbmUgKi9cblxuIWZ1bmN0aW9uKCkge1xuICAgICd1c2Ugc3RyaWN0J1xuXG4gICAgdmFyIHJlID0ge1xuICAgICAgICBub3Rfc3RyaW5nOiAvW15zXS8sXG4gICAgICAgIG5vdF9ib29sOiAvW150XS8sXG4gICAgICAgIG5vdF90eXBlOiAvW15UXS8sXG4gICAgICAgIG5vdF9wcmltaXRpdmU6IC9bXnZdLyxcbiAgICAgICAgbnVtYmVyOiAvW2RpZWZnXS8sXG4gICAgICAgIG51bWVyaWNfYXJnOiAvW2JjZGllZmd1eFhdLyxcbiAgICAgICAganNvbjogL1tqXS8sXG4gICAgICAgIG5vdF9qc29uOiAvW15qXS8sXG4gICAgICAgIHRleHQ6IC9eW15cXHgyNV0rLyxcbiAgICAgICAgbW9kdWxvOiAvXlxceDI1ezJ9LyxcbiAgICAgICAgcGxhY2Vob2xkZXI6IC9eXFx4MjUoPzooWzEtOV1cXGQqKVxcJHxcXCgoW14pXSspXFwpKT8oXFwrKT8oMHwnW14kXSk/KC0pPyhcXGQrKT8oPzpcXC4oXFxkKykpPyhbYi1naWpvc3RUdXZ4WF0pLyxcbiAgICAgICAga2V5OiAvXihbYS16X11bYS16X1xcZF0qKS9pLFxuICAgICAgICBrZXlfYWNjZXNzOiAvXlxcLihbYS16X11bYS16X1xcZF0qKS9pLFxuICAgICAgICBpbmRleF9hY2Nlc3M6IC9eXFxbKFxcZCspXFxdLyxcbiAgICAgICAgc2lnbjogL15bKy1dL1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNwcmludGYoa2V5KSB7XG4gICAgICAgIC8vIGBhcmd1bWVudHNgIGlzIG5vdCBhbiBhcnJheSwgYnV0IHNob3VsZCBiZSBmaW5lIGZvciB0aGlzIGNhbGxcbiAgICAgICAgcmV0dXJuIHNwcmludGZfZm9ybWF0KHNwcmludGZfcGFyc2Uoa2V5KSwgYXJndW1lbnRzKVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHZzcHJpbnRmKGZtdCwgYXJndikge1xuICAgICAgICByZXR1cm4gc3ByaW50Zi5hcHBseShudWxsLCBbZm10XS5jb25jYXQoYXJndiB8fCBbXSkpXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc3ByaW50Zl9mb3JtYXQocGFyc2VfdHJlZSwgYXJndikge1xuICAgICAgICB2YXIgY3Vyc29yID0gMSwgdHJlZV9sZW5ndGggPSBwYXJzZV90cmVlLmxlbmd0aCwgYXJnLCBvdXRwdXQgPSAnJywgaSwgaywgcGgsIHBhZCwgcGFkX2NoYXJhY3RlciwgcGFkX2xlbmd0aCwgaXNfcG9zaXRpdmUsIHNpZ25cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IHRyZWVfbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgcGFyc2VfdHJlZVtpXSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICBvdXRwdXQgKz0gcGFyc2VfdHJlZVtpXVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIHBhcnNlX3RyZWVbaV0gPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgcGggPSBwYXJzZV90cmVlW2ldIC8vIGNvbnZlbmllbmNlIHB1cnBvc2VzIG9ubHlcbiAgICAgICAgICAgICAgICBpZiAocGgua2V5cykgeyAvLyBrZXl3b3JkIGFyZ3VtZW50XG4gICAgICAgICAgICAgICAgICAgIGFyZyA9IGFyZ3ZbY3Vyc29yXVxuICAgICAgICAgICAgICAgICAgICBmb3IgKGsgPSAwOyBrIDwgcGgua2V5cy5sZW5ndGg7IGsrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFyZyA9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3Ioc3ByaW50ZignW3NwcmludGZdIENhbm5vdCBhY2Nlc3MgcHJvcGVydHkgXCIlc1wiIG9mIHVuZGVmaW5lZCB2YWx1ZSBcIiVzXCInLCBwaC5rZXlzW2tdLCBwaC5rZXlzW2stMV0pKVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYXJnID0gYXJnW3BoLmtleXNba11dXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAocGgucGFyYW1fbm8pIHsgLy8gcG9zaXRpb25hbCBhcmd1bWVudCAoZXhwbGljaXQpXG4gICAgICAgICAgICAgICAgICAgIGFyZyA9IGFyZ3ZbcGgucGFyYW1fbm9dXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgeyAvLyBwb3NpdGlvbmFsIGFyZ3VtZW50IChpbXBsaWNpdClcbiAgICAgICAgICAgICAgICAgICAgYXJnID0gYXJndltjdXJzb3IrK11cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAocmUubm90X3R5cGUudGVzdChwaC50eXBlKSAmJiByZS5ub3RfcHJpbWl0aXZlLnRlc3QocGgudHlwZSkgJiYgYXJnIGluc3RhbmNlb2YgRnVuY3Rpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgYXJnID0gYXJnKClcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAocmUubnVtZXJpY19hcmcudGVzdChwaC50eXBlKSAmJiAodHlwZW9mIGFyZyAhPT0gJ251bWJlcicgJiYgaXNOYU4oYXJnKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihzcHJpbnRmKCdbc3ByaW50Zl0gZXhwZWN0aW5nIG51bWJlciBidXQgZm91bmQgJVQnLCBhcmcpKVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChyZS5udW1iZXIudGVzdChwaC50eXBlKSkge1xuICAgICAgICAgICAgICAgICAgICBpc19wb3NpdGl2ZSA9IGFyZyA+PSAwXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgc3dpdGNoIChwaC50eXBlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2InOlxuICAgICAgICAgICAgICAgICAgICAgICAgYXJnID0gcGFyc2VJbnQoYXJnLCAxMCkudG9TdHJpbmcoMilcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2MnOlxuICAgICAgICAgICAgICAgICAgICAgICAgYXJnID0gU3RyaW5nLmZyb21DaGFyQ29kZShwYXJzZUludChhcmcsIDEwKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2QnOlxuICAgICAgICAgICAgICAgICAgICBjYXNlICdpJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZyA9IHBhcnNlSW50KGFyZywgMTApXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdqJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZyA9IEpTT04uc3RyaW5naWZ5KGFyZywgbnVsbCwgcGgud2lkdGggPyBwYXJzZUludChwaC53aWR0aCkgOiAwKVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnZSc6XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmcgPSBwaC5wcmVjaXNpb24gPyBwYXJzZUZsb2F0KGFyZykudG9FeHBvbmVudGlhbChwaC5wcmVjaXNpb24pIDogcGFyc2VGbG9hdChhcmcpLnRvRXhwb25lbnRpYWwoKVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnZic6XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmcgPSBwaC5wcmVjaXNpb24gPyBwYXJzZUZsb2F0KGFyZykudG9GaXhlZChwaC5wcmVjaXNpb24pIDogcGFyc2VGbG9hdChhcmcpXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdnJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZyA9IHBoLnByZWNpc2lvbiA/IFN0cmluZyhOdW1iZXIoYXJnLnRvUHJlY2lzaW9uKHBoLnByZWNpc2lvbikpKSA6IHBhcnNlRmxvYXQoYXJnKVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnbyc6XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmcgPSAocGFyc2VJbnQoYXJnLCAxMCkgPj4+IDApLnRvU3RyaW5nKDgpXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdzJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZyA9IFN0cmluZyhhcmcpXG4gICAgICAgICAgICAgICAgICAgICAgICBhcmcgPSAocGgucHJlY2lzaW9uID8gYXJnLnN1YnN0cmluZygwLCBwaC5wcmVjaXNpb24pIDogYXJnKVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAndCc6XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmcgPSBTdHJpbmcoISFhcmcpXG4gICAgICAgICAgICAgICAgICAgICAgICBhcmcgPSAocGgucHJlY2lzaW9uID8gYXJnLnN1YnN0cmluZygwLCBwaC5wcmVjaXNpb24pIDogYXJnKVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnVCc6XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYXJnKS5zbGljZSg4LCAtMSkudG9Mb3dlckNhc2UoKVxuICAgICAgICAgICAgICAgICAgICAgICAgYXJnID0gKHBoLnByZWNpc2lvbiA/IGFyZy5zdWJzdHJpbmcoMCwgcGgucHJlY2lzaW9uKSA6IGFyZylcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3UnOlxuICAgICAgICAgICAgICAgICAgICAgICAgYXJnID0gcGFyc2VJbnQoYXJnLCAxMCkgPj4+IDBcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3YnOlxuICAgICAgICAgICAgICAgICAgICAgICAgYXJnID0gYXJnLnZhbHVlT2YoKVxuICAgICAgICAgICAgICAgICAgICAgICAgYXJnID0gKHBoLnByZWNpc2lvbiA/IGFyZy5zdWJzdHJpbmcoMCwgcGgucHJlY2lzaW9uKSA6IGFyZylcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3gnOlxuICAgICAgICAgICAgICAgICAgICAgICAgYXJnID0gKHBhcnNlSW50KGFyZywgMTApID4+PiAwKS50b1N0cmluZygxNilcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ1gnOlxuICAgICAgICAgICAgICAgICAgICAgICAgYXJnID0gKHBhcnNlSW50KGFyZywgMTApID4+PiAwKS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHJlLmpzb24udGVzdChwaC50eXBlKSkge1xuICAgICAgICAgICAgICAgICAgICBvdXRwdXQgKz0gYXJnXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAocmUubnVtYmVyLnRlc3QocGgudHlwZSkgJiYgKCFpc19wb3NpdGl2ZSB8fCBwaC5zaWduKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2lnbiA9IGlzX3Bvc2l0aXZlID8gJysnIDogJy0nXG4gICAgICAgICAgICAgICAgICAgICAgICBhcmcgPSBhcmcudG9TdHJpbmcoKS5yZXBsYWNlKHJlLnNpZ24sICcnKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2lnbiA9ICcnXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcGFkX2NoYXJhY3RlciA9IHBoLnBhZF9jaGFyID8gcGgucGFkX2NoYXIgPT09ICcwJyA/ICcwJyA6IHBoLnBhZF9jaGFyLmNoYXJBdCgxKSA6ICcgJ1xuICAgICAgICAgICAgICAgICAgICBwYWRfbGVuZ3RoID0gcGgud2lkdGggLSAoc2lnbiArIGFyZykubGVuZ3RoXG4gICAgICAgICAgICAgICAgICAgIHBhZCA9IHBoLndpZHRoID8gKHBhZF9sZW5ndGggPiAwID8gcGFkX2NoYXJhY3Rlci5yZXBlYXQocGFkX2xlbmd0aCkgOiAnJykgOiAnJ1xuICAgICAgICAgICAgICAgICAgICBvdXRwdXQgKz0gcGguYWxpZ24gPyBzaWduICsgYXJnICsgcGFkIDogKHBhZF9jaGFyYWN0ZXIgPT09ICcwJyA/IHNpZ24gKyBwYWQgKyBhcmcgOiBwYWQgKyBzaWduICsgYXJnKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb3V0cHV0XG4gICAgfVxuXG4gICAgdmFyIHNwcmludGZfY2FjaGUgPSBPYmplY3QuY3JlYXRlKG51bGwpXG5cbiAgICBmdW5jdGlvbiBzcHJpbnRmX3BhcnNlKGZtdCkge1xuICAgICAgICBpZiAoc3ByaW50Zl9jYWNoZVtmbXRdKSB7XG4gICAgICAgICAgICByZXR1cm4gc3ByaW50Zl9jYWNoZVtmbXRdXG4gICAgICAgIH1cblxuICAgICAgICB2YXIgX2ZtdCA9IGZtdCwgbWF0Y2gsIHBhcnNlX3RyZWUgPSBbXSwgYXJnX25hbWVzID0gMFxuICAgICAgICB3aGlsZSAoX2ZtdCkge1xuICAgICAgICAgICAgaWYgKChtYXRjaCA9IHJlLnRleHQuZXhlYyhfZm10KSkgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBwYXJzZV90cmVlLnB1c2gobWF0Y2hbMF0pXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICgobWF0Y2ggPSByZS5tb2R1bG8uZXhlYyhfZm10KSkgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBwYXJzZV90cmVlLnB1c2goJyUnKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoKG1hdGNoID0gcmUucGxhY2Vob2xkZXIuZXhlYyhfZm10KSkgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBpZiAobWF0Y2hbMl0pIHtcbiAgICAgICAgICAgICAgICAgICAgYXJnX25hbWVzIHw9IDFcbiAgICAgICAgICAgICAgICAgICAgdmFyIGZpZWxkX2xpc3QgPSBbXSwgcmVwbGFjZW1lbnRfZmllbGQgPSBtYXRjaFsyXSwgZmllbGRfbWF0Y2ggPSBbXVxuICAgICAgICAgICAgICAgICAgICBpZiAoKGZpZWxkX21hdGNoID0gcmUua2V5LmV4ZWMocmVwbGFjZW1lbnRfZmllbGQpKSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZmllbGRfbGlzdC5wdXNoKGZpZWxkX21hdGNoWzFdKVxuICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKChyZXBsYWNlbWVudF9maWVsZCA9IHJlcGxhY2VtZW50X2ZpZWxkLnN1YnN0cmluZyhmaWVsZF9tYXRjaFswXS5sZW5ndGgpKSAhPT0gJycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoKGZpZWxkX21hdGNoID0gcmUua2V5X2FjY2Vzcy5leGVjKHJlcGxhY2VtZW50X2ZpZWxkKSkgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmllbGRfbGlzdC5wdXNoKGZpZWxkX21hdGNoWzFdKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICgoZmllbGRfbWF0Y2ggPSByZS5pbmRleF9hY2Nlc3MuZXhlYyhyZXBsYWNlbWVudF9maWVsZCkpICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpZWxkX2xpc3QucHVzaChmaWVsZF9tYXRjaFsxXSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBTeW50YXhFcnJvcignW3NwcmludGZdIGZhaWxlZCB0byBwYXJzZSBuYW1lZCBhcmd1bWVudCBrZXknKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBTeW50YXhFcnJvcignW3NwcmludGZdIGZhaWxlZCB0byBwYXJzZSBuYW1lZCBhcmd1bWVudCBrZXknKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1hdGNoWzJdID0gZmllbGRfbGlzdFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgYXJnX25hbWVzIHw9IDJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGFyZ19uYW1lcyA9PT0gMykge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1tzcHJpbnRmXSBtaXhpbmcgcG9zaXRpb25hbCBhbmQgbmFtZWQgcGxhY2Vob2xkZXJzIGlzIG5vdCAoeWV0KSBzdXBwb3J0ZWQnKVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHBhcnNlX3RyZWUucHVzaChcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6IG1hdGNoWzBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1fbm86ICAgIG1hdGNoWzFdLFxuICAgICAgICAgICAgICAgICAgICAgICAga2V5czogICAgICAgIG1hdGNoWzJdLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2lnbjogICAgICAgIG1hdGNoWzNdLFxuICAgICAgICAgICAgICAgICAgICAgICAgcGFkX2NoYXI6ICAgIG1hdGNoWzRdLFxuICAgICAgICAgICAgICAgICAgICAgICAgYWxpZ246ICAgICAgIG1hdGNoWzVdLFxuICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6ICAgICAgIG1hdGNoWzZdLFxuICAgICAgICAgICAgICAgICAgICAgICAgcHJlY2lzaW9uOiAgIG1hdGNoWzddLFxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogICAgICAgIG1hdGNoWzhdXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgU3ludGF4RXJyb3IoJ1tzcHJpbnRmXSB1bmV4cGVjdGVkIHBsYWNlaG9sZGVyJylcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF9mbXQgPSBfZm10LnN1YnN0cmluZyhtYXRjaFswXS5sZW5ndGgpXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNwcmludGZfY2FjaGVbZm10XSA9IHBhcnNlX3RyZWVcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBleHBvcnQgdG8gZWl0aGVyIGJyb3dzZXIgb3Igbm9kZS5qc1xuICAgICAqL1xuICAgIC8qIGVzbGludC1kaXNhYmxlIHF1b3RlLXByb3BzICovXG4gICAgaWYgKHR5cGVvZiBleHBvcnRzICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBleHBvcnRzWydzcHJpbnRmJ10gPSBzcHJpbnRmXG4gICAgICAgIGV4cG9ydHNbJ3ZzcHJpbnRmJ10gPSB2c3ByaW50ZlxuICAgIH1cbiAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgd2luZG93WydzcHJpbnRmJ10gPSBzcHJpbnRmXG4gICAgICAgIHdpbmRvd1sndnNwcmludGYnXSA9IHZzcHJpbnRmXG5cbiAgICAgICAgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lWydhbWQnXSkge1xuICAgICAgICAgICAgZGVmaW5lKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICdzcHJpbnRmJzogc3ByaW50ZixcbiAgICAgICAgICAgICAgICAgICAgJ3ZzcHJpbnRmJzogdnNwcmludGZcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgfVxuICAgIC8qIGVzbGludC1lbmFibGUgcXVvdGUtcHJvcHMgKi9cbn0oKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENvcHlyaWdodCAyMDE1LCBZYWhvbyEgSW5jLlxuICogQ29weXJpZ2h0cyBsaWNlbnNlZCB1bmRlciB0aGUgTmV3IEJTRCBMaWNlbnNlLiBTZWUgdGhlIGFjY29tcGFueWluZyBMSUNFTlNFIGZpbGUgZm9yIHRlcm1zLlxuICovXG52YXIgUmVhY3RJcyA9IHJlcXVpcmUoJ3JlYWN0LWlzJyk7XG52YXIgUkVBQ1RfU1RBVElDUyA9IHtcbiAgICBjaGlsZENvbnRleHRUeXBlczogdHJ1ZSxcbiAgICBjb250ZXh0VHlwZTogdHJ1ZSxcbiAgICBjb250ZXh0VHlwZXM6IHRydWUsXG4gICAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICAgIGRpc3BsYXlOYW1lOiB0cnVlLFxuICAgIGdldERlZmF1bHRQcm9wczogdHJ1ZSxcbiAgICBnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I6IHRydWUsXG4gICAgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzOiB0cnVlLFxuICAgIG1peGluczogdHJ1ZSxcbiAgICBwcm9wVHlwZXM6IHRydWUsXG4gICAgdHlwZTogdHJ1ZVxufTtcblxudmFyIEtOT1dOX1NUQVRJQ1MgPSB7XG4gICAgbmFtZTogdHJ1ZSxcbiAgICBsZW5ndGg6IHRydWUsXG4gICAgcHJvdG90eXBlOiB0cnVlLFxuICAgIGNhbGxlcjogdHJ1ZSxcbiAgICBjYWxsZWU6IHRydWUsXG4gICAgYXJndW1lbnRzOiB0cnVlLFxuICAgIGFyaXR5OiB0cnVlXG59O1xuXG52YXIgRk9SV0FSRF9SRUZfU1RBVElDUyA9IHtcbiAgICAnJCR0eXBlb2YnOiB0cnVlLFxuICAgIHJlbmRlcjogdHJ1ZSxcbiAgICBkZWZhdWx0UHJvcHM6IHRydWUsXG4gICAgZGlzcGxheU5hbWU6IHRydWUsXG4gICAgcHJvcFR5cGVzOiB0cnVlXG59O1xuXG52YXIgTUVNT19TVEFUSUNTID0ge1xuICAgICckJHR5cGVvZic6IHRydWUsXG4gICAgY29tcGFyZTogdHJ1ZSxcbiAgICBkZWZhdWx0UHJvcHM6IHRydWUsXG4gICAgZGlzcGxheU5hbWU6IHRydWUsXG4gICAgcHJvcFR5cGVzOiB0cnVlLFxuICAgIHR5cGU6IHRydWVcbn07XG5cbnZhciBUWVBFX1NUQVRJQ1MgPSB7fTtcblRZUEVfU1RBVElDU1tSZWFjdElzLkZvcndhcmRSZWZdID0gRk9SV0FSRF9SRUZfU1RBVElDUztcblxuZnVuY3Rpb24gZ2V0U3RhdGljcyhjb21wb25lbnQpIHtcbiAgICBpZiAoUmVhY3RJcy5pc01lbW8oY29tcG9uZW50KSkge1xuICAgICAgICByZXR1cm4gTUVNT19TVEFUSUNTO1xuICAgIH1cbiAgICByZXR1cm4gVFlQRV9TVEFUSUNTW2NvbXBvbmVudFsnJCR0eXBlb2YnXV0gfHwgUkVBQ1RfU1RBVElDUztcbn1cblxudmFyIGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIGdldE93blByb3BlcnR5TmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG52YXIgb2JqZWN0UHJvdG90eXBlID0gT2JqZWN0LnByb3RvdHlwZTtcblxuZnVuY3Rpb24gaG9pc3ROb25SZWFjdFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50LCBzb3VyY2VDb21wb25lbnQsIGJsYWNrbGlzdCkge1xuICAgIGlmICh0eXBlb2Ygc291cmNlQ29tcG9uZW50ICE9PSAnc3RyaW5nJykge1xuICAgICAgICAvLyBkb24ndCBob2lzdCBvdmVyIHN0cmluZyAoaHRtbCkgY29tcG9uZW50c1xuXG4gICAgICAgIGlmIChvYmplY3RQcm90b3R5cGUpIHtcbiAgICAgICAgICAgIHZhciBpbmhlcml0ZWRDb21wb25lbnQgPSBnZXRQcm90b3R5cGVPZihzb3VyY2VDb21wb25lbnQpO1xuICAgICAgICAgICAgaWYgKGluaGVyaXRlZENvbXBvbmVudCAmJiBpbmhlcml0ZWRDb21wb25lbnQgIT09IG9iamVjdFByb3RvdHlwZSkge1xuICAgICAgICAgICAgICAgIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKHRhcmdldENvbXBvbmVudCwgaW5oZXJpdGVkQ29tcG9uZW50LCBibGFja2xpc3QpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGtleXMgPSBnZXRPd25Qcm9wZXJ0eU5hbWVzKHNvdXJjZUNvbXBvbmVudCk7XG5cbiAgICAgICAgaWYgKGdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgICAgICAgICAga2V5cyA9IGtleXMuY29uY2F0KGdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2VDb21wb25lbnQpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB0YXJnZXRTdGF0aWNzID0gZ2V0U3RhdGljcyh0YXJnZXRDb21wb25lbnQpO1xuICAgICAgICB2YXIgc291cmNlU3RhdGljcyA9IGdldFN0YXRpY3Moc291cmNlQ29tcG9uZW50KTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgICAgICAgICAgaWYgKCFLTk9XTl9TVEFUSUNTW2tleV0gJiYgIShibGFja2xpc3QgJiYgYmxhY2tsaXN0W2tleV0pICYmICEoc291cmNlU3RhdGljcyAmJiBzb3VyY2VTdGF0aWNzW2tleV0pICYmICEodGFyZ2V0U3RhdGljcyAmJiB0YXJnZXRTdGF0aWNzW2tleV0pKSB7XG4gICAgICAgICAgICAgICAgdmFyIGRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlQ29tcG9uZW50LCBrZXkpO1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEF2b2lkIGZhaWx1cmVzIGZyb20gcmVhZC1vbmx5IHByb3BlcnRpZXNcbiAgICAgICAgICAgICAgICAgICAgZGVmaW5lUHJvcGVydHkodGFyZ2V0Q29tcG9uZW50LCBrZXksIGRlc2NyaXB0b3IpO1xuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGFyZ2V0Q29tcG9uZW50O1xuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXRDb21wb25lbnQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaG9pc3ROb25SZWFjdFN0YXRpY3M7XG4iLCIvKiBnbG9iYWwgd2luZG93ICovXG5pbXBvcnQgcG9ueWZpbGwgZnJvbSAnLi9wb255ZmlsbC5qcyc7XG5cbnZhciByb290O1xuXG5pZiAodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnKSB7XG4gIHJvb3QgPSBzZWxmO1xufSBlbHNlIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICByb290ID0gd2luZG93O1xufSBlbHNlIGlmICh0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJykge1xuICByb290ID0gZ2xvYmFsO1xufSBlbHNlIGlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJykge1xuICByb290ID0gbW9kdWxlO1xufSBlbHNlIHtcbiAgcm9vdCA9IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG59XG5cbnZhciByZXN1bHQgPSBwb255ZmlsbChyb290KTtcbmV4cG9ydCBkZWZhdWx0IHJlc3VsdDtcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImNvcmUtanMvbGlicmFyeS9mbi9kYXRlL25vd1wiKTsiLCIndXNlIHN0cmljdCc7XG5cbnZhciByZXBsYWNlID0gU3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlO1xudmFyIHBlcmNlbnRUd2VudGllcyA9IC8lMjAvZztcblxudmFyIHV0aWwgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG5cbnZhciBGb3JtYXQgPSB7XG4gICAgUkZDMTczODogJ1JGQzE3MzgnLFxuICAgIFJGQzM5ODY6ICdSRkMzOTg2J1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB1dGlsLmFzc2lnbihcbiAgICB7XG4gICAgICAgICdkZWZhdWx0JzogRm9ybWF0LlJGQzM5ODYsXG4gICAgICAgIGZvcm1hdHRlcnM6IHtcbiAgICAgICAgICAgIFJGQzE3Mzg6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiByZXBsYWNlLmNhbGwodmFsdWUsIHBlcmNlbnRUd2VudGllcywgJysnKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBSRkMzOTg2OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gU3RyaW5nKHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG4gICAgRm9ybWF0XG4pO1xuIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgSUU4X0RPTV9ERUZJTkUgPSByZXF1aXJlKCcuL19pZTgtZG9tLWRlZmluZScpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG52YXIgZFAgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG5cbmV4cG9ydHMuZiA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBPYmplY3QuZGVmaW5lUHJvcGVydHkgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGFuT2JqZWN0KEF0dHJpYnV0ZXMpO1xuICBpZiAoSUU4X0RPTV9ERUZJTkUpIHRyeSB7XG4gICAgcmV0dXJuIGRQKE8sIFAsIEF0dHJpYnV0ZXMpO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbiAgaWYgKCdnZXQnIGluIEF0dHJpYnV0ZXMgfHwgJ3NldCcgaW4gQXR0cmlidXRlcykgdGhyb3cgVHlwZUVycm9yKCdBY2Nlc3NvcnMgbm90IHN1cHBvcnRlZCEnKTtcbiAgaWYgKCd2YWx1ZScgaW4gQXR0cmlidXRlcykgT1tQXSA9IEF0dHJpYnV0ZXMudmFsdWU7XG4gIHJldHVybiBPO1xufTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGRvY3VtZW50ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuZG9jdW1lbnQ7XG4vLyB0eXBlb2YgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCBpcyAnb2JqZWN0JyBpbiBvbGQgSUVcbnZhciBpcyA9IGlzT2JqZWN0KGRvY3VtZW50KSAmJiBpc09iamVjdChkb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpcyA/IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoaXQpIDoge307XG59O1xuIiwidmFyIGhhc093blByb3BlcnR5ID0ge30uaGFzT3duUHJvcGVydHk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwga2V5KSB7XG4gIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGl0LCBrZXkpO1xufTtcbiIsIi8vIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgYW5kIG5vbi1lbnVtZXJhYmxlIG9sZCBWOCBzdHJpbmdzXG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcHJvdG90eXBlLWJ1aWx0aW5zXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdCgneicpLnByb3BlcnR5SXNFbnVtZXJhYmxlKDApID8gT2JqZWN0IDogZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBjb2YoaXQpID09ICdTdHJpbmcnID8gaXQuc3BsaXQoJycpIDogT2JqZWN0KGl0KTtcbn07XG4iLCIvLyA3LjIuMSBSZXF1aXJlT2JqZWN0Q29lcmNpYmxlKGFyZ3VtZW50KVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKGl0ID09IHVuZGVmaW5lZCkgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY2FsbCBtZXRob2Qgb24gIFwiICsgaXQpO1xuICByZXR1cm4gaXQ7XG59O1xuIiwiLy8gNy4xLjQgVG9JbnRlZ2VyXG52YXIgY2VpbCA9IE1hdGguY2VpbDtcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXNOYU4oaXQgPSAraXQpID8gMCA6IChpdCA+IDAgPyBmbG9vciA6IGNlaWwpKGl0KTtcbn07XG4iLCJ2YXIgc2hhcmVkID0gcmVxdWlyZSgnLi9fc2hhcmVkJykoJ2tleXMnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4gc2hhcmVkW2tleV0gfHwgKHNoYXJlZFtrZXldID0gdWlkKGtleSkpO1xufTtcbiIsIi8vIElFIDgtIGRvbid0IGVudW0gYnVnIGtleXNcbm1vZHVsZS5leHBvcnRzID0gKFxuICAnY29uc3RydWN0b3IsaGFzT3duUHJvcGVydHksaXNQcm90b3R5cGVPZixwcm9wZXJ0eUlzRW51bWVyYWJsZSx0b0xvY2FsZVN0cmluZyx0b1N0cmluZyx2YWx1ZU9mJ1xuKS5zcGxpdCgnLCcpO1xuIiwiZXhwb3J0cy5mID0ge30ucHJvcGVydHlJc0VudW1lcmFibGU7XG4iLCIvLyA3LjEuMTMgVG9PYmplY3QoYXJndW1lbnQpXG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBPYmplY3QoZGVmaW5lZChpdCkpO1xufTtcbiIsInZhciBhcnJheVdpdGhIb2xlcyA9IHJlcXVpcmUoXCIuL2FycmF5V2l0aEhvbGVzXCIpO1xuXG52YXIgaXRlcmFibGVUb0FycmF5TGltaXQgPSByZXF1aXJlKFwiLi9pdGVyYWJsZVRvQXJyYXlMaW1pdFwiKTtcblxudmFyIG5vbkl0ZXJhYmxlUmVzdCA9IHJlcXVpcmUoXCIuL25vbkl0ZXJhYmxlUmVzdFwiKTtcblxuZnVuY3Rpb24gX3NsaWNlZFRvQXJyYXkoYXJyLCBpKSB7XG4gIHJldHVybiBhcnJheVdpdGhIb2xlcyhhcnIpIHx8IGl0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgfHwgbm9uSXRlcmFibGVSZXN0KCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX3NsaWNlZFRvQXJyYXk7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9jcmVhdGVcIik7IiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWlzLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzeW1ib2xPYnNlcnZhYmxlUG9ueWZpbGwocm9vdCkge1xuXHR2YXIgcmVzdWx0O1xuXHR2YXIgU3ltYm9sID0gcm9vdC5TeW1ib2w7XG5cblx0aWYgKHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicpIHtcblx0XHRpZiAoU3ltYm9sLm9ic2VydmFibGUpIHtcblx0XHRcdHJlc3VsdCA9IFN5bWJvbC5vYnNlcnZhYmxlO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXN1bHQgPSBTeW1ib2woJ29ic2VydmFibGUnKTtcblx0XHRcdFN5bWJvbC5vYnNlcnZhYmxlID0gcmVzdWx0O1xuXHRcdH1cblx0fSBlbHNlIHtcblx0XHRyZXN1bHQgPSAnQEBvYnNlcnZhYmxlJztcblx0fVxuXG5cdHJldHVybiByZXN1bHQ7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC92YWx1ZXNcIik7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL251bWJlci9pcy1pbnRlZ2VyXCIpOyIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTYuOS4wXG4gKiByZWFjdC5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0Jzt2YXIgaD1yZXF1aXJlKFwib2JqZWN0LWFzc2lnblwiKSxuPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3IscD1uP1N5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpOjYwMTAzLHE9bj9TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpOjYwMTA2LHI9bj9TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIik6NjAxMDcsdD1uP1N5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTo2MDEwOCx1PW4/U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpOjYwMTE0LHY9bj9TeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIik6NjAxMDksdz1uP1N5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpOjYwMTEwLHg9bj9TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIik6NjAxMTIseT1uP1N5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKTo2MDExMyxhYT1uP1N5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZV9saXN0XCIpOjYwMTIwLGJhPW4/U3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIik6XG42MDExNSxjYT1uP1N5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpOjYwMTE2O24mJlN5bWJvbC5mb3IoXCJyZWFjdC5mdW5kYW1lbnRhbFwiKTtuJiZTeW1ib2wuZm9yKFwicmVhY3QucmVzcG9uZGVyXCIpO3ZhciB6PVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcjtcbmZ1bmN0aW9uIEEoYSl7Zm9yKHZhciBiPWEubWVzc2FnZSxkPVwiaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2Vycm9yLWRlY29kZXIuaHRtbD9pbnZhcmlhbnQ9XCIrYixjPTE7Yzxhcmd1bWVudHMubGVuZ3RoO2MrKylkKz1cIiZhcmdzW109XCIrZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1tjXSk7YS5tZXNzYWdlPVwiTWluaWZpZWQgUmVhY3QgZXJyb3IgI1wiK2IrXCI7IHZpc2l0IFwiK2QrXCIgZm9yIHRoZSBmdWxsIG1lc3NhZ2Ugb3IgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciBmdWxsIGVycm9ycyBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLiBcIjtyZXR1cm4gYX12YXIgQj17aXNNb3VudGVkOmZ1bmN0aW9uKCl7cmV0dXJuITF9LGVucXVldWVGb3JjZVVwZGF0ZTpmdW5jdGlvbigpe30sZW5xdWV1ZVJlcGxhY2VTdGF0ZTpmdW5jdGlvbigpe30sZW5xdWV1ZVNldFN0YXRlOmZ1bmN0aW9uKCl7fX0sQz17fTtcbmZ1bmN0aW9uIEQoYSxiLGQpe3RoaXMucHJvcHM9YTt0aGlzLmNvbnRleHQ9Yjt0aGlzLnJlZnM9Qzt0aGlzLnVwZGF0ZXI9ZHx8Qn1ELnByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50PXt9O0QucHJvdG90eXBlLnNldFN0YXRlPWZ1bmN0aW9uKGEsYil7aWYoXCJvYmplY3RcIiE9PXR5cGVvZiBhJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmbnVsbCE9YSl0aHJvdyBBKEVycm9yKDg1KSk7dGhpcy51cGRhdGVyLmVucXVldWVTZXRTdGF0ZSh0aGlzLGEsYixcInNldFN0YXRlXCIpfTtELnByb3RvdHlwZS5mb3JjZVVwZGF0ZT1mdW5jdGlvbihhKXt0aGlzLnVwZGF0ZXIuZW5xdWV1ZUZvcmNlVXBkYXRlKHRoaXMsYSxcImZvcmNlVXBkYXRlXCIpfTtmdW5jdGlvbiBFKCl7fUUucHJvdG90eXBlPUQucHJvdG90eXBlO2Z1bmN0aW9uIEYoYSxiLGQpe3RoaXMucHJvcHM9YTt0aGlzLmNvbnRleHQ9Yjt0aGlzLnJlZnM9Qzt0aGlzLnVwZGF0ZXI9ZHx8Qn12YXIgRz1GLnByb3RvdHlwZT1uZXcgRTtcbkcuY29uc3RydWN0b3I9RjtoKEcsRC5wcm90b3R5cGUpO0cuaXNQdXJlUmVhY3RDb21wb25lbnQ9ITA7dmFyIEg9e2N1cnJlbnQ6bnVsbH0sST17c3VzcGVuc2U6bnVsbH0sSj17Y3VycmVudDpudWxsfSxLPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksTD17a2V5OiEwLHJlZjohMCxfX3NlbGY6ITAsX19zb3VyY2U6ITB9O1xuZnVuY3Rpb24gTShhLGIsZCl7dmFyIGM9dm9pZCAwLGU9e30sZz1udWxsLGs9bnVsbDtpZihudWxsIT1iKWZvcihjIGluIHZvaWQgMCE9PWIucmVmJiYoaz1iLnJlZiksdm9pZCAwIT09Yi5rZXkmJihnPVwiXCIrYi5rZXkpLGIpSy5jYWxsKGIsYykmJiFMLmhhc093blByb3BlcnR5KGMpJiYoZVtjXT1iW2NdKTt2YXIgZj1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWYpZS5jaGlsZHJlbj1kO2Vsc2UgaWYoMTxmKXtmb3IodmFyIGw9QXJyYXkoZiksbT0wO208ZjttKyspbFttXT1hcmd1bWVudHNbbSsyXTtlLmNoaWxkcmVuPWx9aWYoYSYmYS5kZWZhdWx0UHJvcHMpZm9yKGMgaW4gZj1hLmRlZmF1bHRQcm9wcyxmKXZvaWQgMD09PWVbY10mJihlW2NdPWZbY10pO3JldHVybnskJHR5cGVvZjpwLHR5cGU6YSxrZXk6ZyxyZWY6ayxwcm9wczplLF9vd25lcjpKLmN1cnJlbnR9fVxuZnVuY3Rpb24gZGEoYSxiKXtyZXR1cm57JCR0eXBlb2Y6cCx0eXBlOmEudHlwZSxrZXk6YixyZWY6YS5yZWYscHJvcHM6YS5wcm9wcyxfb3duZXI6YS5fb3duZXJ9fWZ1bmN0aW9uIE4oYSl7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmYS4kJHR5cGVvZj09PXB9ZnVuY3Rpb24gZXNjYXBlKGEpe3ZhciBiPXtcIj1cIjpcIj0wXCIsXCI6XCI6XCI9MlwifTtyZXR1cm5cIiRcIisoXCJcIithKS5yZXBsYWNlKC9bPTpdL2csZnVuY3Rpb24oYSl7cmV0dXJuIGJbYV19KX12YXIgTz0vXFwvKy9nLFA9W107ZnVuY3Rpb24gUShhLGIsZCxjKXtpZihQLmxlbmd0aCl7dmFyIGU9UC5wb3AoKTtlLnJlc3VsdD1hO2Uua2V5UHJlZml4PWI7ZS5mdW5jPWQ7ZS5jb250ZXh0PWM7ZS5jb3VudD0wO3JldHVybiBlfXJldHVybntyZXN1bHQ6YSxrZXlQcmVmaXg6YixmdW5jOmQsY29udGV4dDpjLGNvdW50OjB9fVxuZnVuY3Rpb24gUihhKXthLnJlc3VsdD1udWxsO2Eua2V5UHJlZml4PW51bGw7YS5mdW5jPW51bGw7YS5jb250ZXh0PW51bGw7YS5jb3VudD0wOzEwPlAubGVuZ3RoJiZQLnB1c2goYSl9XG5mdW5jdGlvbiBTKGEsYixkLGMpe3ZhciBlPXR5cGVvZiBhO2lmKFwidW5kZWZpbmVkXCI9PT1lfHxcImJvb2xlYW5cIj09PWUpYT1udWxsO3ZhciBnPSExO2lmKG51bGw9PT1hKWc9ITA7ZWxzZSBzd2l0Y2goZSl7Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJudW1iZXJcIjpnPSEwO2JyZWFrO2Nhc2UgXCJvYmplY3RcIjpzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSBwOmNhc2UgcTpnPSEwfX1pZihnKXJldHVybiBkKGMsYSxcIlwiPT09Yj9cIi5cIitUKGEsMCk6YiksMTtnPTA7Yj1cIlwiPT09Yj9cIi5cIjpiK1wiOlwiO2lmKEFycmF5LmlzQXJyYXkoYSkpZm9yKHZhciBrPTA7azxhLmxlbmd0aDtrKyspe2U9YVtrXTt2YXIgZj1iK1QoZSxrKTtnKz1TKGUsZixkLGMpfWVsc2UgaWYobnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYT9mPW51bGw6KGY9eiYmYVt6XXx8YVtcIkBAaXRlcmF0b3JcIl0sZj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgZj9mOm51bGwpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBmKWZvcihhPWYuY2FsbChhKSxrPVxuMDshKGU9YS5uZXh0KCkpLmRvbmU7KWU9ZS52YWx1ZSxmPWIrVChlLGsrKyksZys9UyhlLGYsZCxjKTtlbHNlIGlmKFwib2JqZWN0XCI9PT1lKXRocm93IGQ9XCJcIithLEEoRXJyb3IoMzEpLFwiW29iamVjdCBPYmplY3RdXCI9PT1kP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYSkuam9pbihcIiwgXCIpK1wifVwiOmQsXCJcIik7cmV0dXJuIGd9ZnVuY3Rpb24gVShhLGIsZCl7cmV0dXJuIG51bGw9PWE/MDpTKGEsXCJcIixiLGQpfWZ1bmN0aW9uIFQoYSxiKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZudWxsIT1hLmtleT9lc2NhcGUoYS5rZXkpOmIudG9TdHJpbmcoMzYpfWZ1bmN0aW9uIGVhKGEsYil7YS5mdW5jLmNhbGwoYS5jb250ZXh0LGIsYS5jb3VudCsrKX1cbmZ1bmN0aW9uIGZhKGEsYixkKXt2YXIgYz1hLnJlc3VsdCxlPWEua2V5UHJlZml4O2E9YS5mdW5jLmNhbGwoYS5jb250ZXh0LGIsYS5jb3VudCsrKTtBcnJheS5pc0FycmF5KGEpP1YoYSxjLGQsZnVuY3Rpb24oYSl7cmV0dXJuIGF9KTpudWxsIT1hJiYoTihhKSYmKGE9ZGEoYSxlKyghYS5rZXl8fGImJmIua2V5PT09YS5rZXk/XCJcIjooXCJcIithLmtleSkucmVwbGFjZShPLFwiJCYvXCIpK1wiL1wiKStkKSksYy5wdXNoKGEpKX1mdW5jdGlvbiBWKGEsYixkLGMsZSl7dmFyIGc9XCJcIjtudWxsIT1kJiYoZz0oXCJcIitkKS5yZXBsYWNlKE8sXCIkJi9cIikrXCIvXCIpO2I9UShiLGcsYyxlKTtVKGEsZmEsYik7UihiKX1mdW5jdGlvbiBXKCl7dmFyIGE9SC5jdXJyZW50O2lmKG51bGw9PT1hKXRocm93IEEoRXJyb3IoMzIxKSk7cmV0dXJuIGF9XG52YXIgWD17Q2hpbGRyZW46e21hcDpmdW5jdGlvbihhLGIsZCl7aWYobnVsbD09YSlyZXR1cm4gYTt2YXIgYz1bXTtWKGEsYyxudWxsLGIsZCk7cmV0dXJuIGN9LGZvckVhY2g6ZnVuY3Rpb24oYSxiLGQpe2lmKG51bGw9PWEpcmV0dXJuIGE7Yj1RKG51bGwsbnVsbCxiLGQpO1UoYSxlYSxiKTtSKGIpfSxjb3VudDpmdW5jdGlvbihhKXtyZXR1cm4gVShhLGZ1bmN0aW9uKCl7cmV0dXJuIG51bGx9LG51bGwpfSx0b0FycmF5OmZ1bmN0aW9uKGEpe3ZhciBiPVtdO1YoYSxiLG51bGwsZnVuY3Rpb24oYSl7cmV0dXJuIGF9KTtyZXR1cm4gYn0sb25seTpmdW5jdGlvbihhKXtpZighTihhKSl0aHJvdyBBKEVycm9yKDE0MykpO3JldHVybiBhfX0sY3JlYXRlUmVmOmZ1bmN0aW9uKCl7cmV0dXJue2N1cnJlbnQ6bnVsbH19LENvbXBvbmVudDpELFB1cmVDb21wb25lbnQ6RixjcmVhdGVDb250ZXh0OmZ1bmN0aW9uKGEsYil7dm9pZCAwPT09YiYmKGI9bnVsbCk7YT17JCR0eXBlb2Y6dyxfY2FsY3VsYXRlQ2hhbmdlZEJpdHM6Yixcbl9jdXJyZW50VmFsdWU6YSxfY3VycmVudFZhbHVlMjphLF90aHJlYWRDb3VudDowLFByb3ZpZGVyOm51bGwsQ29uc3VtZXI6bnVsbH07YS5Qcm92aWRlcj17JCR0eXBlb2Y6dixfY29udGV4dDphfTtyZXR1cm4gYS5Db25zdW1lcj1hfSxmb3J3YXJkUmVmOmZ1bmN0aW9uKGEpe3JldHVybnskJHR5cGVvZjp4LHJlbmRlcjphfX0sbGF6eTpmdW5jdGlvbihhKXtyZXR1cm57JCR0eXBlb2Y6Y2EsX2N0b3I6YSxfc3RhdHVzOi0xLF9yZXN1bHQ6bnVsbH19LG1lbW86ZnVuY3Rpb24oYSxiKXtyZXR1cm57JCR0eXBlb2Y6YmEsdHlwZTphLGNvbXBhcmU6dm9pZCAwPT09Yj9udWxsOmJ9fSx1c2VDYWxsYmFjazpmdW5jdGlvbihhLGIpe3JldHVybiBXKCkudXNlQ2FsbGJhY2soYSxiKX0sdXNlQ29udGV4dDpmdW5jdGlvbihhLGIpe3JldHVybiBXKCkudXNlQ29udGV4dChhLGIpfSx1c2VFZmZlY3Q6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVygpLnVzZUVmZmVjdChhLGIpfSx1c2VJbXBlcmF0aXZlSGFuZGxlOmZ1bmN0aW9uKGEsXG5iLGQpe3JldHVybiBXKCkudXNlSW1wZXJhdGl2ZUhhbmRsZShhLGIsZCl9LHVzZURlYnVnVmFsdWU6ZnVuY3Rpb24oKXt9LHVzZUxheW91dEVmZmVjdDpmdW5jdGlvbihhLGIpe3JldHVybiBXKCkudXNlTGF5b3V0RWZmZWN0KGEsYil9LHVzZU1lbW86ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVygpLnVzZU1lbW8oYSxiKX0sdXNlUmVkdWNlcjpmdW5jdGlvbihhLGIsZCl7cmV0dXJuIFcoKS51c2VSZWR1Y2VyKGEsYixkKX0sdXNlUmVmOmZ1bmN0aW9uKGEpe3JldHVybiBXKCkudXNlUmVmKGEpfSx1c2VTdGF0ZTpmdW5jdGlvbihhKXtyZXR1cm4gVygpLnVzZVN0YXRlKGEpfSxGcmFnbWVudDpyLFByb2ZpbGVyOnUsU3RyaWN0TW9kZTp0LFN1c3BlbnNlOnksdW5zdGFibGVfU3VzcGVuc2VMaXN0OmFhLGNyZWF0ZUVsZW1lbnQ6TSxjbG9uZUVsZW1lbnQ6ZnVuY3Rpb24oYSxiLGQpe2lmKG51bGw9PT1hfHx2b2lkIDA9PT1hKXRocm93IEEoRXJyb3IoMjY3KSxhKTt2YXIgYz12b2lkIDAsZT1cbmgoe30sYS5wcm9wcyksZz1hLmtleSxrPWEucmVmLGY9YS5fb3duZXI7aWYobnVsbCE9Yil7dm9pZCAwIT09Yi5yZWYmJihrPWIucmVmLGY9Si5jdXJyZW50KTt2b2lkIDAhPT1iLmtleSYmKGc9XCJcIitiLmtleSk7dmFyIGw9dm9pZCAwO2EudHlwZSYmYS50eXBlLmRlZmF1bHRQcm9wcyYmKGw9YS50eXBlLmRlZmF1bHRQcm9wcyk7Zm9yKGMgaW4gYilLLmNhbGwoYixjKSYmIUwuaGFzT3duUHJvcGVydHkoYykmJihlW2NdPXZvaWQgMD09PWJbY10mJnZvaWQgMCE9PWw/bFtjXTpiW2NdKX1jPWFyZ3VtZW50cy5sZW5ndGgtMjtpZigxPT09YyllLmNoaWxkcmVuPWQ7ZWxzZSBpZigxPGMpe2w9QXJyYXkoYyk7Zm9yKHZhciBtPTA7bTxjO20rKylsW21dPWFyZ3VtZW50c1ttKzJdO2UuY2hpbGRyZW49bH1yZXR1cm57JCR0eXBlb2Y6cCx0eXBlOmEudHlwZSxrZXk6ZyxyZWY6ayxwcm9wczplLF9vd25lcjpmfX0sY3JlYXRlRmFjdG9yeTpmdW5jdGlvbihhKXt2YXIgYj1NLmJpbmQobnVsbCxhKTtcbmIudHlwZT1hO3JldHVybiBifSxpc1ZhbGlkRWxlbWVudDpOLHZlcnNpb246XCIxNi45LjBcIix1bnN0YWJsZV93aXRoU3VzcGVuc2VDb25maWc6ZnVuY3Rpb24oYSxiKXt2YXIgZD1JLnN1c3BlbnNlO0kuc3VzcGVuc2U9dm9pZCAwPT09Yj9udWxsOmI7dHJ5e2EoKX1maW5hbGx5e0kuc3VzcGVuc2U9ZH19LF9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEOntSZWFjdEN1cnJlbnREaXNwYXRjaGVyOkgsUmVhY3RDdXJyZW50QmF0Y2hDb25maWc6SSxSZWFjdEN1cnJlbnRPd25lcjpKLElzU29tZVJlbmRlcmVyQWN0aW5nOntjdXJyZW50OiExfSxhc3NpZ246aH19LFk9e2RlZmF1bHQ6WH0sWj1ZJiZYfHxZO21vZHVsZS5leHBvcnRzPVouZGVmYXVsdHx8WjtcbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTYuOS4wXG4gKiByZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4vKlxuIE1vZGVybml6ciAzLjAuMHByZSAoQ3VzdG9tIEJ1aWxkKSB8IE1JVFxuKi9cbid1c2Ugc3RyaWN0Jzt2YXIgYWE9cmVxdWlyZShcInJlYWN0XCIpLG09cmVxdWlyZShcIm9iamVjdC1hc3NpZ25cIikscT1yZXF1aXJlKFwic2NoZWR1bGVyXCIpO2Z1bmN0aW9uIHQoYSl7Zm9yKHZhciBiPWEubWVzc2FnZSxjPVwiaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2Vycm9yLWRlY29kZXIuaHRtbD9pbnZhcmlhbnQ9XCIrYixkPTE7ZDxhcmd1bWVudHMubGVuZ3RoO2QrKyljKz1cIiZhcmdzW109XCIrZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1tkXSk7YS5tZXNzYWdlPVwiTWluaWZpZWQgUmVhY3QgZXJyb3IgI1wiK2IrXCI7IHZpc2l0IFwiK2MrXCIgZm9yIHRoZSBmdWxsIG1lc3NhZ2Ugb3IgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciBmdWxsIGVycm9ycyBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLiBcIjtyZXR1cm4gYX1pZighYWEpdGhyb3cgdChFcnJvcigyMjcpKTt2YXIgYmE9bnVsbCxjYT17fTtcbmZ1bmN0aW9uIGRhKCl7aWYoYmEpZm9yKHZhciBhIGluIGNhKXt2YXIgYj1jYVthXSxjPWJhLmluZGV4T2YoYSk7aWYoISgtMTxjKSl0aHJvdyB0KEVycm9yKDk2KSxhKTtpZighZWFbY10pe2lmKCFiLmV4dHJhY3RFdmVudHMpdGhyb3cgdChFcnJvcig5NyksYSk7ZWFbY109YjtjPWIuZXZlbnRUeXBlcztmb3IodmFyIGQgaW4gYyl7dmFyIGU9dm9pZCAwO3ZhciBmPWNbZF0saD1iLGc9ZDtpZihmYS5oYXNPd25Qcm9wZXJ0eShnKSl0aHJvdyB0KEVycm9yKDk5KSxnKTtmYVtnXT1mO3ZhciBrPWYucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM7aWYoayl7Zm9yKGUgaW4gaylrLmhhc093blByb3BlcnR5KGUpJiZoYShrW2VdLGgsZyk7ZT0hMH1lbHNlIGYucmVnaXN0cmF0aW9uTmFtZT8oaGEoZi5yZWdpc3RyYXRpb25OYW1lLGgsZyksZT0hMCk6ZT0hMTtpZighZSl0aHJvdyB0KEVycm9yKDk4KSxkLGEpO319fX1cbmZ1bmN0aW9uIGhhKGEsYixjKXtpZihpYVthXSl0aHJvdyB0KEVycm9yKDEwMCksYSk7aWFbYV09YjtqYVthXT1iLmV2ZW50VHlwZXNbY10uZGVwZW5kZW5jaWVzfXZhciBlYT1bXSxmYT17fSxpYT17fSxqYT17fTtmdW5jdGlvbiBrYShhLGIsYyxkLGUsZixoLGcsayl7dmFyIGw9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDMpO3RyeXtiLmFwcGx5KGMsbCl9Y2F0Y2gobil7dGhpcy5vbkVycm9yKG4pfX12YXIgbGE9ITEsbWE9bnVsbCxuYT0hMSxvYT1udWxsLHBhPXtvbkVycm9yOmZ1bmN0aW9uKGEpe2xhPSEwO21hPWF9fTtmdW5jdGlvbiBxYShhLGIsYyxkLGUsZixoLGcsayl7bGE9ITE7bWE9bnVsbDtrYS5hcHBseShwYSxhcmd1bWVudHMpfVxuZnVuY3Rpb24gcmEoYSxiLGMsZCxlLGYsaCxnLGspe3FhLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtpZihsYSl7aWYobGEpe3ZhciBsPW1hO2xhPSExO21hPW51bGx9ZWxzZSB0aHJvdyB0KEVycm9yKDE5OCkpO25hfHwobmE9ITAsb2E9bCl9fXZhciBzYT1udWxsLHRhPW51bGwsdmE9bnVsbDtmdW5jdGlvbiB3YShhLGIsYyl7dmFyIGQ9YS50eXBlfHxcInVua25vd24tZXZlbnRcIjthLmN1cnJlbnRUYXJnZXQ9dmEoYyk7cmEoZCxiLHZvaWQgMCxhKTthLmN1cnJlbnRUYXJnZXQ9bnVsbH1mdW5jdGlvbiB4YShhLGIpe2lmKG51bGw9PWIpdGhyb3cgdChFcnJvcigzMCkpO2lmKG51bGw9PWEpcmV0dXJuIGI7aWYoQXJyYXkuaXNBcnJheShhKSl7aWYoQXJyYXkuaXNBcnJheShiKSlyZXR1cm4gYS5wdXNoLmFwcGx5KGEsYiksYTthLnB1c2goYik7cmV0dXJuIGF9cmV0dXJuIEFycmF5LmlzQXJyYXkoYik/W2FdLmNvbmNhdChiKTpbYSxiXX1cbmZ1bmN0aW9uIHlhKGEsYixjKXtBcnJheS5pc0FycmF5KGEpP2EuZm9yRWFjaChiLGMpOmEmJmIuY2FsbChjLGEpfXZhciB6YT1udWxsO2Z1bmN0aW9uIEFhKGEpe2lmKGEpe3ZhciBiPWEuX2Rpc3BhdGNoTGlzdGVuZXJzLGM9YS5fZGlzcGF0Y2hJbnN0YW5jZXM7aWYoQXJyYXkuaXNBcnJheShiKSlmb3IodmFyIGQ9MDtkPGIubGVuZ3RoJiYhYS5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpO2QrKyl3YShhLGJbZF0sY1tkXSk7ZWxzZSBiJiZ3YShhLGIsYyk7YS5fZGlzcGF0Y2hMaXN0ZW5lcnM9bnVsbDthLl9kaXNwYXRjaEluc3RhbmNlcz1udWxsO2EuaXNQZXJzaXN0ZW50KCl8fGEuY29uc3RydWN0b3IucmVsZWFzZShhKX19ZnVuY3Rpb24gQmEoYSl7bnVsbCE9PWEmJih6YT14YSh6YSxhKSk7YT16YTt6YT1udWxsO2lmKGEpe3lhKGEsQWEpO2lmKHphKXRocm93IHQoRXJyb3IoOTUpKTtpZihuYSl0aHJvdyBhPW9hLG5hPSExLG9hPW51bGwsYTt9fVxudmFyIENhPXtpbmplY3RFdmVudFBsdWdpbk9yZGVyOmZ1bmN0aW9uKGEpe2lmKGJhKXRocm93IHQoRXJyb3IoMTAxKSk7YmE9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYSk7ZGEoKX0saW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lOmZ1bmN0aW9uKGEpe3ZhciBiPSExLGM7Zm9yKGMgaW4gYSlpZihhLmhhc093blByb3BlcnR5KGMpKXt2YXIgZD1hW2NdO2lmKCFjYS5oYXNPd25Qcm9wZXJ0eShjKXx8Y2FbY10hPT1kKXtpZihjYVtjXSl0aHJvdyB0KEVycm9yKDEwMiksYyk7Y2FbY109ZDtiPSEwfX1iJiZkYSgpfX07XG5mdW5jdGlvbiBEYShhLGIpe3ZhciBjPWEuc3RhdGVOb2RlO2lmKCFjKXJldHVybiBudWxsO3ZhciBkPXNhKGMpO2lmKCFkKXJldHVybiBudWxsO2M9ZFtiXTthOnN3aXRjaChiKXtjYXNlIFwib25DbGlja1wiOmNhc2UgXCJvbkNsaWNrQ2FwdHVyZVwiOmNhc2UgXCJvbkRvdWJsZUNsaWNrXCI6Y2FzZSBcIm9uRG91YmxlQ2xpY2tDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VEb3duXCI6Y2FzZSBcIm9uTW91c2VEb3duQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlTW92ZVwiOmNhc2UgXCJvbk1vdXNlTW92ZUNhcHR1cmVcIjpjYXNlIFwib25Nb3VzZVVwXCI6Y2FzZSBcIm9uTW91c2VVcENhcHR1cmVcIjooZD0hZC5kaXNhYmxlZCl8fChhPWEudHlwZSxkPSEoXCJidXR0b25cIj09PWF8fFwiaW5wdXRcIj09PWF8fFwic2VsZWN0XCI9PT1hfHxcInRleHRhcmVhXCI9PT1hKSk7YT0hZDticmVhayBhO2RlZmF1bHQ6YT0hMX1pZihhKXJldHVybiBudWxsO2lmKGMmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBjKXRocm93IHQoRXJyb3IoMjMxKSxiLHR5cGVvZiBjKTtcbnJldHVybiBjfXZhciBFYT1NYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zbGljZSgyKSxGYT1cIl9fcmVhY3RJbnRlcm5hbEluc3RhbmNlJFwiK0VhLEdhPVwiX19yZWFjdEV2ZW50SGFuZGxlcnMkXCIrRWE7ZnVuY3Rpb24gSGEoYSl7aWYoYVtGYV0pcmV0dXJuIGFbRmFdO2Zvcig7IWFbRmFdOylpZihhLnBhcmVudE5vZGUpYT1hLnBhcmVudE5vZGU7ZWxzZSByZXR1cm4gbnVsbDthPWFbRmFdO3JldHVybiA1PT09YS50YWd8fDY9PT1hLnRhZz9hOm51bGx9ZnVuY3Rpb24gSWEoYSl7YT1hW0ZhXTtyZXR1cm4hYXx8NSE9PWEudGFnJiY2IT09YS50YWc/bnVsbDphfWZ1bmN0aW9uIEphKGEpe2lmKDU9PT1hLnRhZ3x8Nj09PWEudGFnKXJldHVybiBhLnN0YXRlTm9kZTt0aHJvdyB0KEVycm9yKDMzKSk7fWZ1bmN0aW9uIEthKGEpe3JldHVybiBhW0dhXXx8bnVsbH1mdW5jdGlvbiBMYShhKXtkbyBhPWEucmV0dXJuO3doaWxlKGEmJjUhPT1hLnRhZyk7cmV0dXJuIGE/YTpudWxsfVxuZnVuY3Rpb24gTWEoYSxiLGMpe2lmKGI9RGEoYSxjLmRpc3BhdGNoQ29uZmlnLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzW2JdKSljLl9kaXNwYXRjaExpc3RlbmVycz14YShjLl9kaXNwYXRjaExpc3RlbmVycyxiKSxjLl9kaXNwYXRjaEluc3RhbmNlcz14YShjLl9kaXNwYXRjaEluc3RhbmNlcyxhKX1mdW5jdGlvbiBOYShhKXtpZihhJiZhLmRpc3BhdGNoQ29uZmlnLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzKXtmb3IodmFyIGI9YS5fdGFyZ2V0SW5zdCxjPVtdO2I7KWMucHVzaChiKSxiPUxhKGIpO2ZvcihiPWMubGVuZ3RoOzA8Yi0tOylNYShjW2JdLFwiY2FwdHVyZWRcIixhKTtmb3IoYj0wO2I8Yy5sZW5ndGg7YisrKU1hKGNbYl0sXCJidWJibGVkXCIsYSl9fVxuZnVuY3Rpb24gT2EoYSxiLGMpe2EmJmMmJmMuZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZSYmKGI9RGEoYSxjLmRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWUpKSYmKGMuX2Rpc3BhdGNoTGlzdGVuZXJzPXhhKGMuX2Rpc3BhdGNoTGlzdGVuZXJzLGIpLGMuX2Rpc3BhdGNoSW5zdGFuY2VzPXhhKGMuX2Rpc3BhdGNoSW5zdGFuY2VzLGEpKX1mdW5jdGlvbiBQYShhKXthJiZhLmRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWUmJk9hKGEuX3RhcmdldEluc3QsbnVsbCxhKX1mdW5jdGlvbiBRYShhKXt5YShhLE5hKX12YXIgUmE9IShcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvd3x8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3cuZG9jdW1lbnR8fFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xuZnVuY3Rpb24gU2EoYSxiKXt2YXIgYz17fTtjW2EudG9Mb3dlckNhc2UoKV09Yi50b0xvd2VyQ2FzZSgpO2NbXCJXZWJraXRcIithXT1cIndlYmtpdFwiK2I7Y1tcIk1velwiK2FdPVwibW96XCIrYjtyZXR1cm4gY312YXIgVGE9e2FuaW1hdGlvbmVuZDpTYShcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uRW5kXCIpLGFuaW1hdGlvbml0ZXJhdGlvbjpTYShcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uSXRlcmF0aW9uXCIpLGFuaW1hdGlvbnN0YXJ0OlNhKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25TdGFydFwiKSx0cmFuc2l0aW9uZW5kOlNhKFwiVHJhbnNpdGlvblwiLFwiVHJhbnNpdGlvbkVuZFwiKX0sVWE9e30sVmE9e307XG5SYSYmKFZhPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikuc3R5bGUsXCJBbmltYXRpb25FdmVudFwiaW4gd2luZG93fHwoZGVsZXRlIFRhLmFuaW1hdGlvbmVuZC5hbmltYXRpb24sZGVsZXRlIFRhLmFuaW1hdGlvbml0ZXJhdGlvbi5hbmltYXRpb24sZGVsZXRlIFRhLmFuaW1hdGlvbnN0YXJ0LmFuaW1hdGlvbiksXCJUcmFuc2l0aW9uRXZlbnRcImluIHdpbmRvd3x8ZGVsZXRlIFRhLnRyYW5zaXRpb25lbmQudHJhbnNpdGlvbik7ZnVuY3Rpb24gV2EoYSl7aWYoVWFbYV0pcmV0dXJuIFVhW2FdO2lmKCFUYVthXSlyZXR1cm4gYTt2YXIgYj1UYVthXSxjO2ZvcihjIGluIGIpaWYoYi5oYXNPd25Qcm9wZXJ0eShjKSYmYyBpbiBWYSlyZXR1cm4gVWFbYV09YltjXTtyZXR1cm4gYX1cbnZhciBYYT1XYShcImFuaW1hdGlvbmVuZFwiKSxZYT1XYShcImFuaW1hdGlvbml0ZXJhdGlvblwiKSxaYT1XYShcImFuaW1hdGlvbnN0YXJ0XCIpLGFiPVdhKFwidHJhbnNpdGlvbmVuZFwiKSxiYj1cImFib3J0IGNhbnBsYXkgY2FucGxheXRocm91Z2ggZHVyYXRpb25jaGFuZ2UgZW1wdGllZCBlbmNyeXB0ZWQgZW5kZWQgZXJyb3IgbG9hZGVkZGF0YSBsb2FkZWRtZXRhZGF0YSBsb2Fkc3RhcnQgcGF1c2UgcGxheSBwbGF5aW5nIHByb2dyZXNzIHJhdGVjaGFuZ2Ugc2Vla2VkIHNlZWtpbmcgc3RhbGxlZCBzdXNwZW5kIHRpbWV1cGRhdGUgdm9sdW1lY2hhbmdlIHdhaXRpbmdcIi5zcGxpdChcIiBcIiksY2I9bnVsbCxkYj1udWxsLGViPW51bGw7XG5mdW5jdGlvbiBmYigpe2lmKGViKXJldHVybiBlYjt2YXIgYSxiPWRiLGM9Yi5sZW5ndGgsZCxlPVwidmFsdWVcImluIGNiP2NiLnZhbHVlOmNiLnRleHRDb250ZW50LGY9ZS5sZW5ndGg7Zm9yKGE9MDthPGMmJmJbYV09PT1lW2FdO2ErKyk7dmFyIGg9Yy1hO2ZvcihkPTE7ZDw9aCYmYltjLWRdPT09ZVtmLWRdO2QrKyk7cmV0dXJuIGViPWUuc2xpY2UoYSwxPGQ/MS1kOnZvaWQgMCl9ZnVuY3Rpb24gZ2IoKXtyZXR1cm4hMH1mdW5jdGlvbiBoYigpe3JldHVybiExfVxuZnVuY3Rpb24geShhLGIsYyxkKXt0aGlzLmRpc3BhdGNoQ29uZmlnPWE7dGhpcy5fdGFyZ2V0SW5zdD1iO3RoaXMubmF0aXZlRXZlbnQ9YzthPXRoaXMuY29uc3RydWN0b3IuSW50ZXJmYWNlO2Zvcih2YXIgZSBpbiBhKWEuaGFzT3duUHJvcGVydHkoZSkmJigoYj1hW2VdKT90aGlzW2VdPWIoYyk6XCJ0YXJnZXRcIj09PWU/dGhpcy50YXJnZXQ9ZDp0aGlzW2VdPWNbZV0pO3RoaXMuaXNEZWZhdWx0UHJldmVudGVkPShudWxsIT1jLmRlZmF1bHRQcmV2ZW50ZWQ/Yy5kZWZhdWx0UHJldmVudGVkOiExPT09Yy5yZXR1cm5WYWx1ZSk/Z2I6aGI7dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1oYjtyZXR1cm4gdGhpc31cbm0oeS5wcm90b3R5cGUse3ByZXZlbnREZWZhdWx0OmZ1bmN0aW9uKCl7dGhpcy5kZWZhdWx0UHJldmVudGVkPSEwO3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEucHJldmVudERlZmF1bHQ/YS5wcmV2ZW50RGVmYXVsdCgpOlwidW5rbm93blwiIT09dHlwZW9mIGEucmV0dXJuVmFsdWUmJihhLnJldHVyblZhbHVlPSExKSx0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD1nYil9LHN0b3BQcm9wYWdhdGlvbjpmdW5jdGlvbigpe3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEuc3RvcFByb3BhZ2F0aW9uP2Euc3RvcFByb3BhZ2F0aW9uKCk6XCJ1bmtub3duXCIhPT10eXBlb2YgYS5jYW5jZWxCdWJibGUmJihhLmNhbmNlbEJ1YmJsZT0hMCksdGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1nYil9LHBlcnNpc3Q6ZnVuY3Rpb24oKXt0aGlzLmlzUGVyc2lzdGVudD1nYn0saXNQZXJzaXN0ZW50OmhiLGRlc3RydWN0b3I6ZnVuY3Rpb24oKXt2YXIgYT10aGlzLmNvbnN0cnVjdG9yLkludGVyZmFjZSxcbmI7Zm9yKGIgaW4gYSl0aGlzW2JdPW51bGw7dGhpcy5uYXRpdmVFdmVudD10aGlzLl90YXJnZXRJbnN0PXRoaXMuZGlzcGF0Y2hDb25maWc9bnVsbDt0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkPXRoaXMuaXNEZWZhdWx0UHJldmVudGVkPWhiO3RoaXMuX2Rpc3BhdGNoSW5zdGFuY2VzPXRoaXMuX2Rpc3BhdGNoTGlzdGVuZXJzPW51bGx9fSk7eS5JbnRlcmZhY2U9e3R5cGU6bnVsbCx0YXJnZXQ6bnVsbCxjdXJyZW50VGFyZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIG51bGx9LGV2ZW50UGhhc2U6bnVsbCxidWJibGVzOm51bGwsY2FuY2VsYWJsZTpudWxsLHRpbWVTdGFtcDpmdW5jdGlvbihhKXtyZXR1cm4gYS50aW1lU3RhbXB8fERhdGUubm93KCl9LGRlZmF1bHRQcmV2ZW50ZWQ6bnVsbCxpc1RydXN0ZWQ6bnVsbH07XG55LmV4dGVuZD1mdW5jdGlvbihhKXtmdW5jdGlvbiBiKCl7fWZ1bmN0aW9uIGMoKXtyZXR1cm4gZC5hcHBseSh0aGlzLGFyZ3VtZW50cyl9dmFyIGQ9dGhpcztiLnByb3RvdHlwZT1kLnByb3RvdHlwZTt2YXIgZT1uZXcgYjttKGUsYy5wcm90b3R5cGUpO2MucHJvdG90eXBlPWU7Yy5wcm90b3R5cGUuY29uc3RydWN0b3I9YztjLkludGVyZmFjZT1tKHt9LGQuSW50ZXJmYWNlLGEpO2MuZXh0ZW5kPWQuZXh0ZW5kO2liKGMpO3JldHVybiBjfTtpYih5KTtmdW5jdGlvbiBqYihhLGIsYyxkKXtpZih0aGlzLmV2ZW50UG9vbC5sZW5ndGgpe3ZhciBlPXRoaXMuZXZlbnRQb29sLnBvcCgpO3RoaXMuY2FsbChlLGEsYixjLGQpO3JldHVybiBlfXJldHVybiBuZXcgdGhpcyhhLGIsYyxkKX1cbmZ1bmN0aW9uIGtiKGEpe2lmKCEoYSBpbnN0YW5jZW9mIHRoaXMpKXRocm93IHQoRXJyb3IoMjc5KSk7YS5kZXN0cnVjdG9yKCk7MTA+dGhpcy5ldmVudFBvb2wubGVuZ3RoJiZ0aGlzLmV2ZW50UG9vbC5wdXNoKGEpfWZ1bmN0aW9uIGliKGEpe2EuZXZlbnRQb29sPVtdO2EuZ2V0UG9vbGVkPWpiO2EucmVsZWFzZT1rYn12YXIgbGI9eS5leHRlbmQoe2RhdGE6bnVsbH0pLG1iPXkuZXh0ZW5kKHtkYXRhOm51bGx9KSxuYj1bOSwxMywyNywzMl0sb2I9UmEmJlwiQ29tcG9zaXRpb25FdmVudFwiaW4gd2luZG93LHBiPW51bGw7UmEmJlwiZG9jdW1lbnRNb2RlXCJpbiBkb2N1bWVudCYmKHBiPWRvY3VtZW50LmRvY3VtZW50TW9kZSk7XG52YXIgcWI9UmEmJlwiVGV4dEV2ZW50XCJpbiB3aW5kb3cmJiFwYixzYj1SYSYmKCFvYnx8cGImJjg8cGImJjExPj1wYiksdGI9U3RyaW5nLmZyb21DaGFyQ29kZSgzMiksdWI9e2JlZm9yZUlucHV0OntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQmVmb3JlSW5wdXRcIixjYXB0dXJlZDpcIm9uQmVmb3JlSW5wdXRDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpbXCJjb21wb3NpdGlvbmVuZFwiLFwia2V5cHJlc3NcIixcInRleHRJbnB1dFwiLFwicGFzdGVcIl19LGNvbXBvc2l0aW9uRW5kOntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ29tcG9zaXRpb25FbmRcIixjYXB0dXJlZDpcIm9uQ29tcG9zaXRpb25FbmRDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcImJsdXIgY29tcG9zaXRpb25lbmQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIil9LGNvbXBvc2l0aW9uU3RhcnQ6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25Db21wb3NpdGlvblN0YXJ0XCIsXG5jYXB0dXJlZDpcIm9uQ29tcG9zaXRpb25TdGFydENhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwiYmx1ciBjb21wb3NpdGlvbnN0YXJ0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpfSxjb21wb3NpdGlvblVwZGF0ZTp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkNvbXBvc2l0aW9uVXBkYXRlXCIsY2FwdHVyZWQ6XCJvbkNvbXBvc2l0aW9uVXBkYXRlQ2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJibHVyIGNvbXBvc2l0aW9udXBkYXRlIGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpfX0sdmI9ITE7XG5mdW5jdGlvbiB3YihhLGIpe3N3aXRjaChhKXtjYXNlIFwia2V5dXBcIjpyZXR1cm4tMSE9PW5iLmluZGV4T2YoYi5rZXlDb2RlKTtjYXNlIFwia2V5ZG93blwiOnJldHVybiAyMjkhPT1iLmtleUNvZGU7Y2FzZSBcImtleXByZXNzXCI6Y2FzZSBcIm1vdXNlZG93blwiOmNhc2UgXCJibHVyXCI6cmV0dXJuITA7ZGVmYXVsdDpyZXR1cm4hMX19ZnVuY3Rpb24geGIoYSl7YT1hLmRldGFpbDtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJlwiZGF0YVwiaW4gYT9hLmRhdGE6bnVsbH12YXIgeWI9ITE7ZnVuY3Rpb24gQWIoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6cmV0dXJuIHhiKGIpO2Nhc2UgXCJrZXlwcmVzc1wiOmlmKDMyIT09Yi53aGljaClyZXR1cm4gbnVsbDt2Yj0hMDtyZXR1cm4gdGI7Y2FzZSBcInRleHRJbnB1dFwiOnJldHVybiBhPWIuZGF0YSxhPT09dGImJnZiP251bGw6YTtkZWZhdWx0OnJldHVybiBudWxsfX1cbmZ1bmN0aW9uIEJiKGEsYil7aWYoeWIpcmV0dXJuXCJjb21wb3NpdGlvbmVuZFwiPT09YXx8IW9iJiZ3YihhLGIpPyhhPWZiKCksZWI9ZGI9Y2I9bnVsbCx5Yj0hMSxhKTpudWxsO3N3aXRjaChhKXtjYXNlIFwicGFzdGVcIjpyZXR1cm4gbnVsbDtjYXNlIFwia2V5cHJlc3NcIjppZighKGIuY3RybEtleXx8Yi5hbHRLZXl8fGIubWV0YUtleSl8fGIuY3RybEtleSYmYi5hbHRLZXkpe2lmKGIuY2hhciYmMTxiLmNoYXIubGVuZ3RoKXJldHVybiBiLmNoYXI7aWYoYi53aGljaClyZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShiLndoaWNoKX1yZXR1cm4gbnVsbDtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpyZXR1cm4gc2ImJlwia29cIiE9PWIubG9jYWxlP251bGw6Yi5kYXRhO2RlZmF1bHQ6cmV0dXJuIG51bGx9fVxudmFyIENiPXtldmVudFR5cGVzOnViLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9dm9pZCAwO3ZhciBmPXZvaWQgMDtpZihvYiliOntzd2l0Y2goYSl7Y2FzZSBcImNvbXBvc2l0aW9uc3RhcnRcIjplPXViLmNvbXBvc2l0aW9uU3RhcnQ7YnJlYWsgYjtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjplPXViLmNvbXBvc2l0aW9uRW5kO2JyZWFrIGI7Y2FzZSBcImNvbXBvc2l0aW9udXBkYXRlXCI6ZT11Yi5jb21wb3NpdGlvblVwZGF0ZTticmVhayBifWU9dm9pZCAwfWVsc2UgeWI/d2IoYSxjKSYmKGU9dWIuY29tcG9zaXRpb25FbmQpOlwia2V5ZG93blwiPT09YSYmMjI5PT09Yy5rZXlDb2RlJiYoZT11Yi5jb21wb3NpdGlvblN0YXJ0KTtlPyhzYiYmXCJrb1wiIT09Yy5sb2NhbGUmJih5Ynx8ZSE9PXViLmNvbXBvc2l0aW9uU3RhcnQ/ZT09PXViLmNvbXBvc2l0aW9uRW5kJiZ5YiYmKGY9ZmIoKSk6KGNiPWQsZGI9XCJ2YWx1ZVwiaW4gY2I/Y2IudmFsdWU6Y2IudGV4dENvbnRlbnQseWI9XG4hMCkpLGU9bGIuZ2V0UG9vbGVkKGUsYixjLGQpLGY/ZS5kYXRhPWY6KGY9eGIoYyksbnVsbCE9PWYmJihlLmRhdGE9ZikpLFFhKGUpLGY9ZSk6Zj1udWxsOyhhPXFiP0FiKGEsYyk6QmIoYSxjKSk/KGI9bWIuZ2V0UG9vbGVkKHViLmJlZm9yZUlucHV0LGIsYyxkKSxiLmRhdGE9YSxRYShiKSk6Yj1udWxsO3JldHVybiBudWxsPT09Zj9iOm51bGw9PT1iP2Y6W2YsYl19fSxEYj1udWxsLEViPW51bGwsRmI9bnVsbDtmdW5jdGlvbiBHYihhKXtpZihhPXRhKGEpKXtpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgRGIpdGhyb3cgdChFcnJvcigyODApKTt2YXIgYj1zYShhLnN0YXRlTm9kZSk7RGIoYS5zdGF0ZU5vZGUsYS50eXBlLGIpfX1mdW5jdGlvbiBIYihhKXtFYj9GYj9GYi5wdXNoKGEpOkZiPVthXTpFYj1hfWZ1bmN0aW9uIEliKCl7aWYoRWIpe3ZhciBhPUViLGI9RmI7RmI9RWI9bnVsbDtHYihhKTtpZihiKWZvcihhPTA7YTxiLmxlbmd0aDthKyspR2IoYlthXSl9fVxuZnVuY3Rpb24gSmIoYSxiKXtyZXR1cm4gYShiKX1mdW5jdGlvbiBLYihhLGIsYyxkKXtyZXR1cm4gYShiLGMsZCl9ZnVuY3Rpb24gTGIoKXt9dmFyIE1iPUpiLE5iPSExO2Z1bmN0aW9uIE9iKCl7aWYobnVsbCE9PUVifHxudWxsIT09RmIpTGIoKSxJYigpfXZhciBQYj17Y29sb3I6ITAsZGF0ZTohMCxkYXRldGltZTohMCxcImRhdGV0aW1lLWxvY2FsXCI6ITAsZW1haWw6ITAsbW9udGg6ITAsbnVtYmVyOiEwLHBhc3N3b3JkOiEwLHJhbmdlOiEwLHNlYXJjaDohMCx0ZWw6ITAsdGV4dDohMCx0aW1lOiEwLHVybDohMCx3ZWVrOiEwfTtmdW5jdGlvbiBRYihhKXt2YXIgYj1hJiZhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuXCJpbnB1dFwiPT09Yj8hIVBiW2EudHlwZV06XCJ0ZXh0YXJlYVwiPT09Yj8hMDohMX1cbmZ1bmN0aW9uIFJiKGEpe2E9YS50YXJnZXR8fGEuc3JjRWxlbWVudHx8d2luZG93O2EuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQmJihhPWEuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQpO3JldHVybiAzPT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGU6YX1mdW5jdGlvbiBTYihhKXtpZighUmEpcmV0dXJuITE7YT1cIm9uXCIrYTt2YXIgYj1hIGluIGRvY3VtZW50O2J8fChiPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksYi5zZXRBdHRyaWJ1dGUoYSxcInJldHVybjtcIiksYj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgYlthXSk7cmV0dXJuIGJ9ZnVuY3Rpb24gVGIoYSl7dmFyIGI9YS50eXBlO3JldHVybihhPWEubm9kZU5hbWUpJiZcImlucHV0XCI9PT1hLnRvTG93ZXJDYXNlKCkmJihcImNoZWNrYm94XCI9PT1ifHxcInJhZGlvXCI9PT1iKX1cbmZ1bmN0aW9uIFViKGEpe3ZhciBiPVRiKGEpP1wiY2hlY2tlZFwiOlwidmFsdWVcIixjPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoYS5jb25zdHJ1Y3Rvci5wcm90b3R5cGUsYiksZD1cIlwiK2FbYl07aWYoIWEuaGFzT3duUHJvcGVydHkoYikmJlwidW5kZWZpbmVkXCIhPT10eXBlb2YgYyYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuZ2V0JiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5zZXQpe3ZhciBlPWMuZ2V0LGY9Yy5zZXQ7T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsYix7Y29uZmlndXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBlLmNhbGwodGhpcyl9LHNldDpmdW5jdGlvbihhKXtkPVwiXCIrYTtmLmNhbGwodGhpcyxhKX19KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxiLHtlbnVtZXJhYmxlOmMuZW51bWVyYWJsZX0pO3JldHVybntnZXRWYWx1ZTpmdW5jdGlvbigpe3JldHVybiBkfSxzZXRWYWx1ZTpmdW5jdGlvbihhKXtkPVwiXCIrYX0sc3RvcFRyYWNraW5nOmZ1bmN0aW9uKCl7YS5fdmFsdWVUcmFja2VyPVxubnVsbDtkZWxldGUgYVtiXX19fX1mdW5jdGlvbiBWYihhKXthLl92YWx1ZVRyYWNrZXJ8fChhLl92YWx1ZVRyYWNrZXI9VWIoYSkpfWZ1bmN0aW9uIFdiKGEpe2lmKCFhKXJldHVybiExO3ZhciBiPWEuX3ZhbHVlVHJhY2tlcjtpZighYilyZXR1cm4hMDt2YXIgYz1iLmdldFZhbHVlKCk7dmFyIGQ9XCJcIjthJiYoZD1UYihhKT9hLmNoZWNrZWQ/XCJ0cnVlXCI6XCJmYWxzZVwiOmEudmFsdWUpO2E9ZDtyZXR1cm4gYSE9PWM/KGIuc2V0VmFsdWUoYSksITApOiExfXZhciBYYj1hYS5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRDtYYi5oYXNPd25Qcm9wZXJ0eShcIlJlYWN0Q3VycmVudERpc3BhdGNoZXJcIil8fChYYi5SZWFjdEN1cnJlbnREaXNwYXRjaGVyPXtjdXJyZW50Om51bGx9KTtYYi5oYXNPd25Qcm9wZXJ0eShcIlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnXCIpfHwoWGIuUmVhY3RDdXJyZW50QmF0Y2hDb25maWc9e3N1c3BlbnNlOm51bGx9KTtcbnZhciBZYj0vXiguKilbXFxcXFxcL10vLEI9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcixaYj1CP1N5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpOjYwMTAzLCRiPUI/U3ltYm9sLmZvcihcInJlYWN0LnBvcnRhbFwiKTo2MDEwNixhYz1CP1N5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKTo2MDEwNyxiYz1CP1N5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTo2MDEwOCxjYz1CP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm9maWxlclwiKTo2MDExNCxkYz1CP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKTo2MDEwOSxlYz1CP1N5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpOjYwMTEwLGZjPUI/U3ltYm9sLmZvcihcInJlYWN0LmNvbmN1cnJlbnRfbW9kZVwiKTo2MDExMSxnYz1CP1N5bWJvbC5mb3IoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKTo2MDExMixoYz1CP1N5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKTo2MDExMyxpYz1CP1N5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZV9saXN0XCIpOlxuNjAxMjAsamM9Qj9TeW1ib2wuZm9yKFwicmVhY3QubWVtb1wiKTo2MDExNSxrYz1CP1N5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpOjYwMTE2O0ImJlN5bWJvbC5mb3IoXCJyZWFjdC5mdW5kYW1lbnRhbFwiKTtCJiZTeW1ib2wuZm9yKFwicmVhY3QucmVzcG9uZGVyXCIpO3ZhciBsYz1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3I7ZnVuY3Rpb24gbWMoYSl7aWYobnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYSlyZXR1cm4gbnVsbDthPWxjJiZhW2xjXXx8YVtcIkBAaXRlcmF0b3JcIl07cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YTpudWxsfVxuZnVuY3Rpb24gb2MoYSl7aWYobnVsbD09YSlyZXR1cm4gbnVsbDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlyZXR1cm4gYS5kaXNwbGF5TmFtZXx8YS5uYW1lfHxudWxsO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYSlyZXR1cm4gYTtzd2l0Y2goYSl7Y2FzZSBhYzpyZXR1cm5cIkZyYWdtZW50XCI7Y2FzZSAkYjpyZXR1cm5cIlBvcnRhbFwiO2Nhc2UgY2M6cmV0dXJuXCJQcm9maWxlclwiO2Nhc2UgYmM6cmV0dXJuXCJTdHJpY3RNb2RlXCI7Y2FzZSBoYzpyZXR1cm5cIlN1c3BlbnNlXCI7Y2FzZSBpYzpyZXR1cm5cIlN1c3BlbnNlTGlzdFwifWlmKFwib2JqZWN0XCI9PT10eXBlb2YgYSlzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSBlYzpyZXR1cm5cIkNvbnRleHQuQ29uc3VtZXJcIjtjYXNlIGRjOnJldHVyblwiQ29udGV4dC5Qcm92aWRlclwiO2Nhc2UgZ2M6dmFyIGI9YS5yZW5kZXI7Yj1iLmRpc3BsYXlOYW1lfHxiLm5hbWV8fFwiXCI7cmV0dXJuIGEuZGlzcGxheU5hbWV8fChcIlwiIT09Yj9cIkZvcndhcmRSZWYoXCIrYitcIilcIjpcblwiRm9yd2FyZFJlZlwiKTtjYXNlIGpjOnJldHVybiBvYyhhLnR5cGUpO2Nhc2Uga2M6aWYoYT0xPT09YS5fc3RhdHVzP2EuX3Jlc3VsdDpudWxsKXJldHVybiBvYyhhKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBwYyhhKXt2YXIgYj1cIlwiO2Rve2E6c3dpdGNoKGEudGFnKXtjYXNlIDM6Y2FzZSA0OmNhc2UgNjpjYXNlIDc6Y2FzZSAxMDpjYXNlIDk6dmFyIGM9XCJcIjticmVhayBhO2RlZmF1bHQ6dmFyIGQ9YS5fZGVidWdPd25lcixlPWEuX2RlYnVnU291cmNlLGY9b2MoYS50eXBlKTtjPW51bGw7ZCYmKGM9b2MoZC50eXBlKSk7ZD1mO2Y9XCJcIjtlP2Y9XCIgKGF0IFwiK2UuZmlsZU5hbWUucmVwbGFjZShZYixcIlwiKStcIjpcIitlLmxpbmVOdW1iZXIrXCIpXCI6YyYmKGY9XCIgKGNyZWF0ZWQgYnkgXCIrYytcIilcIik7Yz1cIlxcbiAgICBpbiBcIisoZHx8XCJVbmtub3duXCIpK2Z9Yis9YzthPWEucmV0dXJufXdoaWxlKGEpO3JldHVybiBifVxudmFyIHFjPS9eWzpBLVpfYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXVs6QS1aX2EtelxcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDJGRlxcdTAzNzAtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRFxcLS4wLTlcXHUwMEI3XFx1MDMwMC1cXHUwMzZGXFx1MjAzRi1cXHUyMDQwXSokLyxyYz1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LHNjPXt9LHRjPXt9O1xuZnVuY3Rpb24gdWMoYSl7aWYocmMuY2FsbCh0YyxhKSlyZXR1cm4hMDtpZihyYy5jYWxsKHNjLGEpKXJldHVybiExO2lmKHFjLnRlc3QoYSkpcmV0dXJuIHRjW2FdPSEwO3NjW2FdPSEwO3JldHVybiExfWZ1bmN0aW9uIHZjKGEsYixjLGQpe2lmKG51bGwhPT1jJiYwPT09Yy50eXBlKXJldHVybiExO3N3aXRjaCh0eXBlb2YgYil7Y2FzZSBcImZ1bmN0aW9uXCI6Y2FzZSBcInN5bWJvbFwiOnJldHVybiEwO2Nhc2UgXCJib29sZWFuXCI6aWYoZClyZXR1cm4hMTtpZihudWxsIT09YylyZXR1cm4hYy5hY2NlcHRzQm9vbGVhbnM7YT1hLnRvTG93ZXJDYXNlKCkuc2xpY2UoMCw1KTtyZXR1cm5cImRhdGEtXCIhPT1hJiZcImFyaWEtXCIhPT1hO2RlZmF1bHQ6cmV0dXJuITF9fVxuZnVuY3Rpb24gd2MoYSxiLGMsZCl7aWYobnVsbD09PWJ8fFwidW5kZWZpbmVkXCI9PT10eXBlb2YgYnx8dmMoYSxiLGMsZCkpcmV0dXJuITA7aWYoZClyZXR1cm4hMTtpZihudWxsIT09Yylzd2l0Y2goYy50eXBlKXtjYXNlIDM6cmV0dXJuIWI7Y2FzZSA0OnJldHVybiExPT09YjtjYXNlIDU6cmV0dXJuIGlzTmFOKGIpO2Nhc2UgNjpyZXR1cm4gaXNOYU4oYil8fDE+Yn1yZXR1cm4hMX1mdW5jdGlvbiBEKGEsYixjLGQsZSxmKXt0aGlzLmFjY2VwdHNCb29sZWFucz0yPT09Ynx8Mz09PWJ8fDQ9PT1iO3RoaXMuYXR0cmlidXRlTmFtZT1kO3RoaXMuYXR0cmlidXRlTmFtZXNwYWNlPWU7dGhpcy5tdXN0VXNlUHJvcGVydHk9Yzt0aGlzLnByb3BlcnR5TmFtZT1hO3RoaXMudHlwZT1iO3RoaXMuc2FuaXRpemVVUkw9Zn12YXIgRj17fTtcblwiY2hpbGRyZW4gZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwgZGVmYXVsdFZhbHVlIGRlZmF1bHRDaGVja2VkIGlubmVySFRNTCBzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmcgc3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nIHN0eWxlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7RlthXT1uZXcgRChhLDAsITEsYSxudWxsLCExKX0pO1tbXCJhY2NlcHRDaGFyc2V0XCIsXCJhY2NlcHQtY2hhcnNldFwiXSxbXCJjbGFzc05hbWVcIixcImNsYXNzXCJdLFtcImh0bWxGb3JcIixcImZvclwiXSxbXCJodHRwRXF1aXZcIixcImh0dHAtZXF1aXZcIl1dLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YVswXTtGW2JdPW5ldyBEKGIsMSwhMSxhWzFdLG51bGwsITEpfSk7W1wiY29udGVudEVkaXRhYmxlXCIsXCJkcmFnZ2FibGVcIixcInNwZWxsQ2hlY2tcIixcInZhbHVlXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RlthXT1uZXcgRChhLDIsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEpfSk7XG5bXCJhdXRvUmV2ZXJzZVwiLFwiZXh0ZXJuYWxSZXNvdXJjZXNSZXF1aXJlZFwiLFwiZm9jdXNhYmxlXCIsXCJwcmVzZXJ2ZUFscGhhXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RlthXT1uZXcgRChhLDIsITEsYSxudWxsLCExKX0pO1wiYWxsb3dGdWxsU2NyZWVuIGFzeW5jIGF1dG9Gb2N1cyBhdXRvUGxheSBjb250cm9scyBkZWZhdWx0IGRlZmVyIGRpc2FibGVkIGRpc2FibGVQaWN0dXJlSW5QaWN0dXJlIGZvcm1Ob1ZhbGlkYXRlIGhpZGRlbiBsb29wIG5vTW9kdWxlIG5vVmFsaWRhdGUgb3BlbiBwbGF5c0lubGluZSByZWFkT25seSByZXF1aXJlZCByZXZlcnNlZCBzY29wZWQgc2VhbWxlc3MgaXRlbVNjb3BlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7RlthXT1uZXcgRChhLDMsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEpfSk7XG5bXCJjaGVja2VkXCIsXCJtdWx0aXBsZVwiLFwibXV0ZWRcIixcInNlbGVjdGVkXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RlthXT1uZXcgRChhLDMsITAsYSxudWxsLCExKX0pO1tcImNhcHR1cmVcIixcImRvd25sb2FkXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RlthXT1uZXcgRChhLDQsITEsYSxudWxsLCExKX0pO1tcImNvbHNcIixcInJvd3NcIixcInNpemVcIixcInNwYW5cIl0uZm9yRWFjaChmdW5jdGlvbihhKXtGW2FdPW5ldyBEKGEsNiwhMSxhLG51bGwsITEpfSk7W1wicm93U3BhblwiLFwic3RhcnRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtGW2FdPW5ldyBEKGEsNSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSl9KTt2YXIgeGM9L1tcXC06XShbYS16XSkvZztmdW5jdGlvbiB5YyhhKXtyZXR1cm4gYVsxXS50b1VwcGVyQ2FzZSgpfVxuXCJhY2NlbnQtaGVpZ2h0IGFsaWdubWVudC1iYXNlbGluZSBhcmFiaWMtZm9ybSBiYXNlbGluZS1zaGlmdCBjYXAtaGVpZ2h0IGNsaXAtcGF0aCBjbGlwLXJ1bGUgY29sb3ItaW50ZXJwb2xhdGlvbiBjb2xvci1pbnRlcnBvbGF0aW9uLWZpbHRlcnMgY29sb3ItcHJvZmlsZSBjb2xvci1yZW5kZXJpbmcgZG9taW5hbnQtYmFzZWxpbmUgZW5hYmxlLWJhY2tncm91bmQgZmlsbC1vcGFjaXR5IGZpbGwtcnVsZSBmbG9vZC1jb2xvciBmbG9vZC1vcGFjaXR5IGZvbnQtZmFtaWx5IGZvbnQtc2l6ZSBmb250LXNpemUtYWRqdXN0IGZvbnQtc3RyZXRjaCBmb250LXN0eWxlIGZvbnQtdmFyaWFudCBmb250LXdlaWdodCBnbHlwaC1uYW1lIGdseXBoLW9yaWVudGF0aW9uLWhvcml6b250YWwgZ2x5cGgtb3JpZW50YXRpb24tdmVydGljYWwgaG9yaXotYWR2LXggaG9yaXotb3JpZ2luLXggaW1hZ2UtcmVuZGVyaW5nIGxldHRlci1zcGFjaW5nIGxpZ2h0aW5nLWNvbG9yIG1hcmtlci1lbmQgbWFya2VyLW1pZCBtYXJrZXItc3RhcnQgb3ZlcmxpbmUtcG9zaXRpb24gb3ZlcmxpbmUtdGhpY2tuZXNzIHBhaW50LW9yZGVyIHBhbm9zZS0xIHBvaW50ZXItZXZlbnRzIHJlbmRlcmluZy1pbnRlbnQgc2hhcGUtcmVuZGVyaW5nIHN0b3AtY29sb3Igc3RvcC1vcGFjaXR5IHN0cmlrZXRocm91Z2gtcG9zaXRpb24gc3RyaWtldGhyb3VnaC10aGlja25lc3Mgc3Ryb2tlLWRhc2hhcnJheSBzdHJva2UtZGFzaG9mZnNldCBzdHJva2UtbGluZWNhcCBzdHJva2UtbGluZWpvaW4gc3Ryb2tlLW1pdGVybGltaXQgc3Ryb2tlLW9wYWNpdHkgc3Ryb2tlLXdpZHRoIHRleHQtYW5jaG9yIHRleHQtZGVjb3JhdGlvbiB0ZXh0LXJlbmRlcmluZyB1bmRlcmxpbmUtcG9zaXRpb24gdW5kZXJsaW5lLXRoaWNrbmVzcyB1bmljb2RlLWJpZGkgdW5pY29kZS1yYW5nZSB1bml0cy1wZXItZW0gdi1hbHBoYWJldGljIHYtaGFuZ2luZyB2LWlkZW9ncmFwaGljIHYtbWF0aGVtYXRpY2FsIHZlY3Rvci1lZmZlY3QgdmVydC1hZHYteSB2ZXJ0LW9yaWdpbi14IHZlcnQtb3JpZ2luLXkgd29yZC1zcGFjaW5nIHdyaXRpbmctbW9kZSB4bWxuczp4bGluayB4LWhlaWdodFwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZSh4YyxcbnljKTtGW2JdPW5ldyBEKGIsMSwhMSxhLG51bGwsITEpfSk7XCJ4bGluazphY3R1YXRlIHhsaW5rOmFyY3JvbGUgeGxpbms6cm9sZSB4bGluazpzaG93IHhsaW5rOnRpdGxlIHhsaW5rOnR5cGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UoeGMseWMpO0ZbYl09bmV3IEQoYiwxLCExLGEsXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsITEpfSk7W1wieG1sOmJhc2VcIixcInhtbDpsYW5nXCIsXCJ4bWw6c3BhY2VcIl0uZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UoeGMseWMpO0ZbYl09bmV3IEQoYiwxLCExLGEsXCJodHRwOi8vd3d3LnczLm9yZy9YTUwvMTk5OC9uYW1lc3BhY2VcIiwhMSl9KTtbXCJ0YWJJbmRleFwiLFwiY3Jvc3NPcmlnaW5cIl0uZm9yRWFjaChmdW5jdGlvbihhKXtGW2FdPW5ldyBEKGEsMSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSl9KTtcbkYueGxpbmtIcmVmPW5ldyBEKFwieGxpbmtIcmVmXCIsMSwhMSxcInhsaW5rOmhyZWZcIixcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIiwhMCk7W1wic3JjXCIsXCJocmVmXCIsXCJhY3Rpb25cIixcImZvcm1BY3Rpb25cIl0uZm9yRWFjaChmdW5jdGlvbihhKXtGW2FdPW5ldyBEKGEsMSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMCl9KTtcbmZ1bmN0aW9uIHpjKGEsYixjLGQpe3ZhciBlPUYuaGFzT3duUHJvcGVydHkoYik/RltiXTpudWxsO3ZhciBmPW51bGwhPT1lPzA9PT1lLnR5cGU6ZD8hMTohKDI8Yi5sZW5ndGgpfHxcIm9cIiE9PWJbMF0mJlwiT1wiIT09YlswXXx8XCJuXCIhPT1iWzFdJiZcIk5cIiE9PWJbMV0/ITE6ITA7Znx8KHdjKGIsYyxlLGQpJiYoYz1udWxsKSxkfHxudWxsPT09ZT91YyhiKSYmKG51bGw9PT1jP2EucmVtb3ZlQXR0cmlidXRlKGIpOmEuc2V0QXR0cmlidXRlKGIsXCJcIitjKSk6ZS5tdXN0VXNlUHJvcGVydHk/YVtlLnByb3BlcnR5TmFtZV09bnVsbD09PWM/Mz09PWUudHlwZT8hMTpcIlwiOmM6KGI9ZS5hdHRyaWJ1dGVOYW1lLGQ9ZS5hdHRyaWJ1dGVOYW1lc3BhY2UsbnVsbD09PWM/YS5yZW1vdmVBdHRyaWJ1dGUoYik6KGU9ZS50eXBlLGM9Mz09PWV8fDQ9PT1lJiYhMD09PWM/XCJcIjpcIlwiK2MsZD9hLnNldEF0dHJpYnV0ZU5TKGQsYixjKTphLnNldEF0dHJpYnV0ZShiLGMpKSkpfVxuZnVuY3Rpb24gQWMoYSl7c3dpdGNoKHR5cGVvZiBhKXtjYXNlIFwiYm9vbGVhblwiOmNhc2UgXCJudW1iZXJcIjpjYXNlIFwib2JqZWN0XCI6Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJ1bmRlZmluZWRcIjpyZXR1cm4gYTtkZWZhdWx0OnJldHVyblwiXCJ9fWZ1bmN0aW9uIEJjKGEsYil7dmFyIGM9Yi5jaGVja2VkO3JldHVybiBtKHt9LGIse2RlZmF1bHRDaGVja2VkOnZvaWQgMCxkZWZhdWx0VmFsdWU6dm9pZCAwLHZhbHVlOnZvaWQgMCxjaGVja2VkOm51bGwhPWM/YzphLl93cmFwcGVyU3RhdGUuaW5pdGlhbENoZWNrZWR9KX1cbmZ1bmN0aW9uIENjKGEsYil7dmFyIGM9bnVsbD09Yi5kZWZhdWx0VmFsdWU/XCJcIjpiLmRlZmF1bHRWYWx1ZSxkPW51bGwhPWIuY2hlY2tlZD9iLmNoZWNrZWQ6Yi5kZWZhdWx0Q2hlY2tlZDtjPUFjKG51bGwhPWIudmFsdWU/Yi52YWx1ZTpjKTthLl93cmFwcGVyU3RhdGU9e2luaXRpYWxDaGVja2VkOmQsaW5pdGlhbFZhbHVlOmMsY29udHJvbGxlZDpcImNoZWNrYm94XCI9PT1iLnR5cGV8fFwicmFkaW9cIj09PWIudHlwZT9udWxsIT1iLmNoZWNrZWQ6bnVsbCE9Yi52YWx1ZX19ZnVuY3Rpb24gRGMoYSxiKXtiPWIuY2hlY2tlZDtudWxsIT1iJiZ6YyhhLFwiY2hlY2tlZFwiLGIsITEpfVxuZnVuY3Rpb24gRWMoYSxiKXtEYyhhLGIpO3ZhciBjPUFjKGIudmFsdWUpLGQ9Yi50eXBlO2lmKG51bGwhPWMpaWYoXCJudW1iZXJcIj09PWQpe2lmKDA9PT1jJiZcIlwiPT09YS52YWx1ZXx8YS52YWx1ZSE9YylhLnZhbHVlPVwiXCIrY31lbHNlIGEudmFsdWUhPT1cIlwiK2MmJihhLnZhbHVlPVwiXCIrYyk7ZWxzZSBpZihcInN1Ym1pdFwiPT09ZHx8XCJyZXNldFwiPT09ZCl7YS5yZW1vdmVBdHRyaWJ1dGUoXCJ2YWx1ZVwiKTtyZXR1cm59Yi5oYXNPd25Qcm9wZXJ0eShcInZhbHVlXCIpP0ZjKGEsYi50eXBlLGMpOmIuaGFzT3duUHJvcGVydHkoXCJkZWZhdWx0VmFsdWVcIikmJkZjKGEsYi50eXBlLEFjKGIuZGVmYXVsdFZhbHVlKSk7bnVsbD09Yi5jaGVja2VkJiZudWxsIT1iLmRlZmF1bHRDaGVja2VkJiYoYS5kZWZhdWx0Q2hlY2tlZD0hIWIuZGVmYXVsdENoZWNrZWQpfVxuZnVuY3Rpb24gR2MoYSxiLGMpe2lmKGIuaGFzT3duUHJvcGVydHkoXCJ2YWx1ZVwiKXx8Yi5oYXNPd25Qcm9wZXJ0eShcImRlZmF1bHRWYWx1ZVwiKSl7dmFyIGQ9Yi50eXBlO2lmKCEoXCJzdWJtaXRcIiE9PWQmJlwicmVzZXRcIiE9PWR8fHZvaWQgMCE9PWIudmFsdWUmJm51bGwhPT1iLnZhbHVlKSlyZXR1cm47Yj1cIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWU7Y3x8Yj09PWEudmFsdWV8fChhLnZhbHVlPWIpO2EuZGVmYXVsdFZhbHVlPWJ9Yz1hLm5hbWU7XCJcIiE9PWMmJihhLm5hbWU9XCJcIik7YS5kZWZhdWx0Q2hlY2tlZD0hYS5kZWZhdWx0Q2hlY2tlZDthLmRlZmF1bHRDaGVja2VkPSEhYS5fd3JhcHBlclN0YXRlLmluaXRpYWxDaGVja2VkO1wiXCIhPT1jJiYoYS5uYW1lPWMpfVxuZnVuY3Rpb24gRmMoYSxiLGMpe2lmKFwibnVtYmVyXCIhPT1ifHxhLm93bmVyRG9jdW1lbnQuYWN0aXZlRWxlbWVudCE9PWEpbnVsbD09Yz9hLmRlZmF1bHRWYWx1ZT1cIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWU6YS5kZWZhdWx0VmFsdWUhPT1cIlwiK2MmJihhLmRlZmF1bHRWYWx1ZT1cIlwiK2MpfXZhciBIYz17Y2hhbmdlOntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ2hhbmdlXCIsY2FwdHVyZWQ6XCJvbkNoYW5nZUNhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwiYmx1ciBjaGFuZ2UgY2xpY2sgZm9jdXMgaW5wdXQga2V5ZG93biBrZXl1cCBzZWxlY3Rpb25jaGFuZ2VcIi5zcGxpdChcIiBcIil9fTtmdW5jdGlvbiBJYyhhLGIsYyl7YT15LmdldFBvb2xlZChIYy5jaGFuZ2UsYSxiLGMpO2EudHlwZT1cImNoYW5nZVwiO0hiKGMpO1FhKGEpO3JldHVybiBhfXZhciBKYz1udWxsLEtjPW51bGw7ZnVuY3Rpb24gTGMoYSl7QmEoYSl9XG5mdW5jdGlvbiBNYyhhKXt2YXIgYj1KYShhKTtpZihXYihiKSlyZXR1cm4gYX1mdW5jdGlvbiBOYyhhLGIpe2lmKFwiY2hhbmdlXCI9PT1hKXJldHVybiBifXZhciBPYz0hMTtSYSYmKE9jPVNiKFwiaW5wdXRcIikmJighZG9jdW1lbnQuZG9jdW1lbnRNb2RlfHw5PGRvY3VtZW50LmRvY3VtZW50TW9kZSkpO2Z1bmN0aW9uIFBjKCl7SmMmJihKYy5kZXRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIixRYyksS2M9SmM9bnVsbCl9ZnVuY3Rpb24gUWMoYSl7aWYoXCJ2YWx1ZVwiPT09YS5wcm9wZXJ0eU5hbWUmJk1jKEtjKSlpZihhPUljKEtjLGEsUmIoYSkpLE5iKUJhKGEpO2Vsc2V7TmI9ITA7dHJ5e0piKExjLGEpfWZpbmFsbHl7TmI9ITEsT2IoKX19fWZ1bmN0aW9uIFJjKGEsYixjKXtcImZvY3VzXCI9PT1hPyhQYygpLEpjPWIsS2M9YyxKYy5hdHRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIixRYykpOlwiYmx1clwiPT09YSYmUGMoKX1cbmZ1bmN0aW9uIFNjKGEpe2lmKFwic2VsZWN0aW9uY2hhbmdlXCI9PT1hfHxcImtleXVwXCI9PT1hfHxcImtleWRvd25cIj09PWEpcmV0dXJuIE1jKEtjKX1mdW5jdGlvbiBUYyhhLGIpe2lmKFwiY2xpY2tcIj09PWEpcmV0dXJuIE1jKGIpfWZ1bmN0aW9uIFVjKGEsYil7aWYoXCJpbnB1dFwiPT09YXx8XCJjaGFuZ2VcIj09PWEpcmV0dXJuIE1jKGIpfVxudmFyIFZjPXtldmVudFR5cGVzOkhjLF9pc0lucHV0RXZlbnRTdXBwb3J0ZWQ6T2MsZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1iP0phKGIpOndpbmRvdyxmPXZvaWQgMCxoPXZvaWQgMCxnPWUubm9kZU5hbWUmJmUubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcInNlbGVjdFwiPT09Z3x8XCJpbnB1dFwiPT09ZyYmXCJmaWxlXCI9PT1lLnR5cGU/Zj1OYzpRYihlKT9PYz9mPVVjOihmPVNjLGg9UmMpOihnPWUubm9kZU5hbWUpJiZcImlucHV0XCI9PT1nLnRvTG93ZXJDYXNlKCkmJihcImNoZWNrYm94XCI9PT1lLnR5cGV8fFwicmFkaW9cIj09PWUudHlwZSkmJihmPVRjKTtpZihmJiYoZj1mKGEsYikpKXJldHVybiBJYyhmLGMsZCk7aCYmaChhLGUsYik7XCJibHVyXCI9PT1hJiYoYT1lLl93cmFwcGVyU3RhdGUpJiZhLmNvbnRyb2xsZWQmJlwibnVtYmVyXCI9PT1lLnR5cGUmJkZjKGUsXCJudW1iZXJcIixlLnZhbHVlKX19LFdjPXkuZXh0ZW5kKHt2aWV3Om51bGwsZGV0YWlsOm51bGx9KSxYYz17QWx0OlwiYWx0S2V5XCIsXG5Db250cm9sOlwiY3RybEtleVwiLE1ldGE6XCJtZXRhS2V5XCIsU2hpZnQ6XCJzaGlmdEtleVwifTtmdW5jdGlvbiBZYyhhKXt2YXIgYj10aGlzLm5hdGl2ZUV2ZW50O3JldHVybiBiLmdldE1vZGlmaWVyU3RhdGU/Yi5nZXRNb2RpZmllclN0YXRlKGEpOihhPVhjW2FdKT8hIWJbYV06ITF9ZnVuY3Rpb24gWmMoKXtyZXR1cm4gWWN9XG52YXIgJGM9MCxhZD0wLGJkPSExLGNkPSExLGRkPVdjLmV4dGVuZCh7c2NyZWVuWDpudWxsLHNjcmVlblk6bnVsbCxjbGllbnRYOm51bGwsY2xpZW50WTpudWxsLHBhZ2VYOm51bGwscGFnZVk6bnVsbCxjdHJsS2V5Om51bGwsc2hpZnRLZXk6bnVsbCxhbHRLZXk6bnVsbCxtZXRhS2V5Om51bGwsZ2V0TW9kaWZpZXJTdGF0ZTpaYyxidXR0b246bnVsbCxidXR0b25zOm51bGwscmVsYXRlZFRhcmdldDpmdW5jdGlvbihhKXtyZXR1cm4gYS5yZWxhdGVkVGFyZ2V0fHwoYS5mcm9tRWxlbWVudD09PWEuc3JjRWxlbWVudD9hLnRvRWxlbWVudDphLmZyb21FbGVtZW50KX0sbW92ZW1lbnRYOmZ1bmN0aW9uKGEpe2lmKFwibW92ZW1lbnRYXCJpbiBhKXJldHVybiBhLm1vdmVtZW50WDt2YXIgYj0kYzskYz1hLnNjcmVlblg7cmV0dXJuIGJkP1wibW91c2Vtb3ZlXCI9PT1hLnR5cGU/YS5zY3JlZW5YLWI6MDooYmQ9ITAsMCl9LG1vdmVtZW50WTpmdW5jdGlvbihhKXtpZihcIm1vdmVtZW50WVwiaW4gYSlyZXR1cm4gYS5tb3ZlbWVudFk7XG52YXIgYj1hZDthZD1hLnNjcmVlblk7cmV0dXJuIGNkP1wibW91c2Vtb3ZlXCI9PT1hLnR5cGU/YS5zY3JlZW5ZLWI6MDooY2Q9ITAsMCl9fSksZWQ9ZGQuZXh0ZW5kKHtwb2ludGVySWQ6bnVsbCx3aWR0aDpudWxsLGhlaWdodDpudWxsLHByZXNzdXJlOm51bGwsdGFuZ2VudGlhbFByZXNzdXJlOm51bGwsdGlsdFg6bnVsbCx0aWx0WTpudWxsLHR3aXN0Om51bGwscG9pbnRlclR5cGU6bnVsbCxpc1ByaW1hcnk6bnVsbH0pLGZkPXttb3VzZUVudGVyOntyZWdpc3RyYXRpb25OYW1lOlwib25Nb3VzZUVudGVyXCIsZGVwZW5kZW5jaWVzOltcIm1vdXNlb3V0XCIsXCJtb3VzZW92ZXJcIl19LG1vdXNlTGVhdmU6e3JlZ2lzdHJhdGlvbk5hbWU6XCJvbk1vdXNlTGVhdmVcIixkZXBlbmRlbmNpZXM6W1wibW91c2VvdXRcIixcIm1vdXNlb3ZlclwiXX0scG9pbnRlckVudGVyOntyZWdpc3RyYXRpb25OYW1lOlwib25Qb2ludGVyRW50ZXJcIixkZXBlbmRlbmNpZXM6W1wicG9pbnRlcm91dFwiLFwicG9pbnRlcm92ZXJcIl19LHBvaW50ZXJMZWF2ZTp7cmVnaXN0cmF0aW9uTmFtZTpcIm9uUG9pbnRlckxlYXZlXCIsXG5kZXBlbmRlbmNpZXM6W1wicG9pbnRlcm91dFwiLFwicG9pbnRlcm92ZXJcIl19fSxnZD17ZXZlbnRUeXBlczpmZCxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPVwibW91c2VvdmVyXCI9PT1hfHxcInBvaW50ZXJvdmVyXCI9PT1hLGY9XCJtb3VzZW91dFwiPT09YXx8XCJwb2ludGVyb3V0XCI9PT1hO2lmKGUmJihjLnJlbGF0ZWRUYXJnZXR8fGMuZnJvbUVsZW1lbnQpfHwhZiYmIWUpcmV0dXJuIG51bGw7ZT1kLndpbmRvdz09PWQ/ZDooZT1kLm93bmVyRG9jdW1lbnQpP2UuZGVmYXVsdFZpZXd8fGUucGFyZW50V2luZG93OndpbmRvdztmPyhmPWIsYj0oYj1jLnJlbGF0ZWRUYXJnZXR8fGMudG9FbGVtZW50KT9IYShiKTpudWxsKTpmPW51bGw7aWYoZj09PWIpcmV0dXJuIG51bGw7dmFyIGg9dm9pZCAwLGc9dm9pZCAwLGs9dm9pZCAwLGw9dm9pZCAwO2lmKFwibW91c2VvdXRcIj09PWF8fFwibW91c2VvdmVyXCI9PT1hKWg9ZGQsZz1mZC5tb3VzZUxlYXZlLGs9ZmQubW91c2VFbnRlcixsPVwibW91c2VcIjtcbmVsc2UgaWYoXCJwb2ludGVyb3V0XCI9PT1hfHxcInBvaW50ZXJvdmVyXCI9PT1hKWg9ZWQsZz1mZC5wb2ludGVyTGVhdmUsaz1mZC5wb2ludGVyRW50ZXIsbD1cInBvaW50ZXJcIjt2YXIgbj1udWxsPT1mP2U6SmEoZik7ZT1udWxsPT1iP2U6SmEoYik7YT1oLmdldFBvb2xlZChnLGYsYyxkKTthLnR5cGU9bCtcImxlYXZlXCI7YS50YXJnZXQ9bjthLnJlbGF0ZWRUYXJnZXQ9ZTtjPWguZ2V0UG9vbGVkKGssYixjLGQpO2MudHlwZT1sK1wiZW50ZXJcIjtjLnRhcmdldD1lO2MucmVsYXRlZFRhcmdldD1uO2Q9YjtpZihmJiZkKWE6e2I9ZjtlPWQ7bD0wO2ZvcihoPWI7aDtoPUxhKGgpKWwrKztoPTA7Zm9yKGs9ZTtrO2s9TGEoaykpaCsrO2Zvcig7MDxsLWg7KWI9TGEoYiksbC0tO2Zvcig7MDxoLWw7KWU9TGEoZSksaC0tO2Zvcig7bC0tOyl7aWYoYj09PWV8fGI9PT1lLmFsdGVybmF0ZSlicmVhayBhO2I9TGEoYik7ZT1MYShlKX1iPW51bGx9ZWxzZSBiPW51bGw7ZT1iO2ZvcihiPVtdO2YmJmYhPT1lOyl7bD1cbmYuYWx0ZXJuYXRlO2lmKG51bGwhPT1sJiZsPT09ZSlicmVhaztiLnB1c2goZik7Zj1MYShmKX1mb3IoZj1bXTtkJiZkIT09ZTspe2w9ZC5hbHRlcm5hdGU7aWYobnVsbCE9PWwmJmw9PT1lKWJyZWFrO2YucHVzaChkKTtkPUxhKGQpfWZvcihkPTA7ZDxiLmxlbmd0aDtkKyspT2EoYltkXSxcImJ1YmJsZWRcIixhKTtmb3IoZD1mLmxlbmd0aDswPGQtLTspT2EoZltkXSxcImNhcHR1cmVkXCIsYyk7cmV0dXJuW2EsY119fTtmdW5jdGlvbiBoZChhLGIpe3JldHVybiBhPT09YiYmKDAhPT1hfHwxL2E9PT0xL2IpfHxhIT09YSYmYiE9PWJ9dmFyIGlkPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5mdW5jdGlvbiBqZChhLGIpe2lmKGhkKGEsYikpcmV0dXJuITA7aWYoXCJvYmplY3RcIiE9PXR5cGVvZiBhfHxudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBifHxudWxsPT09YilyZXR1cm4hMTt2YXIgYz1PYmplY3Qua2V5cyhhKSxkPU9iamVjdC5rZXlzKGIpO2lmKGMubGVuZ3RoIT09ZC5sZW5ndGgpcmV0dXJuITE7Zm9yKGQ9MDtkPGMubGVuZ3RoO2QrKylpZighaWQuY2FsbChiLGNbZF0pfHwhaGQoYVtjW2RdXSxiW2NbZF1dKSlyZXR1cm4hMTtyZXR1cm4hMH1mdW5jdGlvbiBrZChhLGIpe3JldHVybntyZXNwb25kZXI6YSxwcm9wczpifX1uZXcgTWFwO25ldyBNYXA7bmV3IFNldDtuZXcgTWFwO1xuZnVuY3Rpb24gbGQoYSl7dmFyIGI9YTtpZihhLmFsdGVybmF0ZSlmb3IoO2IucmV0dXJuOyliPWIucmV0dXJuO2Vsc2V7aWYoMCE9PShiLmVmZmVjdFRhZyYyKSlyZXR1cm4gMTtmb3IoO2IucmV0dXJuOylpZihiPWIucmV0dXJuLDAhPT0oYi5lZmZlY3RUYWcmMikpcmV0dXJuIDF9cmV0dXJuIDM9PT1iLnRhZz8yOjN9ZnVuY3Rpb24gb2QoYSl7aWYoMiE9PWxkKGEpKXRocm93IHQoRXJyb3IoMTg4KSk7fVxuZnVuY3Rpb24gcGQoYSl7dmFyIGI9YS5hbHRlcm5hdGU7aWYoIWIpe2I9bGQoYSk7aWYoMz09PWIpdGhyb3cgdChFcnJvcigxODgpKTtyZXR1cm4gMT09PWI/bnVsbDphfWZvcih2YXIgYz1hLGQ9Yjs7KXt2YXIgZT1jLnJldHVybjtpZihudWxsPT09ZSlicmVhazt2YXIgZj1lLmFsdGVybmF0ZTtpZihudWxsPT09Zil7ZD1lLnJldHVybjtpZihudWxsIT09ZCl7Yz1kO2NvbnRpbnVlfWJyZWFrfWlmKGUuY2hpbGQ9PT1mLmNoaWxkKXtmb3IoZj1lLmNoaWxkO2Y7KXtpZihmPT09YylyZXR1cm4gb2QoZSksYTtpZihmPT09ZClyZXR1cm4gb2QoZSksYjtmPWYuc2libGluZ310aHJvdyB0KEVycm9yKDE4OCkpO31pZihjLnJldHVybiE9PWQucmV0dXJuKWM9ZSxkPWY7ZWxzZXtmb3IodmFyIGg9ITEsZz1lLmNoaWxkO2c7KXtpZihnPT09Yyl7aD0hMDtjPWU7ZD1mO2JyZWFrfWlmKGc9PT1kKXtoPSEwO2Q9ZTtjPWY7YnJlYWt9Zz1nLnNpYmxpbmd9aWYoIWgpe2ZvcihnPWYuY2hpbGQ7Zzspe2lmKGc9PT1cbmMpe2g9ITA7Yz1mO2Q9ZTticmVha31pZihnPT09ZCl7aD0hMDtkPWY7Yz1lO2JyZWFrfWc9Zy5zaWJsaW5nfWlmKCFoKXRocm93IHQoRXJyb3IoMTg5KSk7fX1pZihjLmFsdGVybmF0ZSE9PWQpdGhyb3cgdChFcnJvcigxOTApKTt9aWYoMyE9PWMudGFnKXRocm93IHQoRXJyb3IoMTg4KSk7cmV0dXJuIGMuc3RhdGVOb2RlLmN1cnJlbnQ9PT1jP2E6Yn1mdW5jdGlvbiBxZChhKXthPXBkKGEpO2lmKCFhKXJldHVybiBudWxsO2Zvcih2YXIgYj1hOzspe2lmKDU9PT1iLnRhZ3x8Nj09PWIudGFnKXJldHVybiBiO2lmKGIuY2hpbGQpYi5jaGlsZC5yZXR1cm49YixiPWIuY2hpbGQ7ZWxzZXtpZihiPT09YSlicmVhaztmb3IoOyFiLnNpYmxpbmc7KXtpZighYi5yZXR1cm58fGIucmV0dXJuPT09YSlyZXR1cm4gbnVsbDtiPWIucmV0dXJufWIuc2libGluZy5yZXR1cm49Yi5yZXR1cm47Yj1iLnNpYmxpbmd9fXJldHVybiBudWxsfVxudmFyIHJkPXkuZXh0ZW5kKHthbmltYXRpb25OYW1lOm51bGwsZWxhcHNlZFRpbWU6bnVsbCxwc2V1ZG9FbGVtZW50Om51bGx9KSxzZD15LmV4dGVuZCh7Y2xpcGJvYXJkRGF0YTpmdW5jdGlvbihhKXtyZXR1cm5cImNsaXBib2FyZERhdGFcImluIGE/YS5jbGlwYm9hcmREYXRhOndpbmRvdy5jbGlwYm9hcmREYXRhfX0pLHRkPVdjLmV4dGVuZCh7cmVsYXRlZFRhcmdldDpudWxsfSk7ZnVuY3Rpb24gdWQoYSl7dmFyIGI9YS5rZXlDb2RlO1wiY2hhckNvZGVcImluIGE/KGE9YS5jaGFyQ29kZSwwPT09YSYmMTM9PT1iJiYoYT0xMykpOmE9YjsxMD09PWEmJihhPTEzKTtyZXR1cm4gMzI8PWF8fDEzPT09YT9hOjB9XG52YXIgdmQ9e0VzYzpcIkVzY2FwZVwiLFNwYWNlYmFyOlwiIFwiLExlZnQ6XCJBcnJvd0xlZnRcIixVcDpcIkFycm93VXBcIixSaWdodDpcIkFycm93UmlnaHRcIixEb3duOlwiQXJyb3dEb3duXCIsRGVsOlwiRGVsZXRlXCIsV2luOlwiT1NcIixNZW51OlwiQ29udGV4dE1lbnVcIixBcHBzOlwiQ29udGV4dE1lbnVcIixTY3JvbGw6XCJTY3JvbGxMb2NrXCIsTW96UHJpbnRhYmxlS2V5OlwiVW5pZGVudGlmaWVkXCJ9LHdkPXs4OlwiQmFja3NwYWNlXCIsOTpcIlRhYlwiLDEyOlwiQ2xlYXJcIiwxMzpcIkVudGVyXCIsMTY6XCJTaGlmdFwiLDE3OlwiQ29udHJvbFwiLDE4OlwiQWx0XCIsMTk6XCJQYXVzZVwiLDIwOlwiQ2Fwc0xvY2tcIiwyNzpcIkVzY2FwZVwiLDMyOlwiIFwiLDMzOlwiUGFnZVVwXCIsMzQ6XCJQYWdlRG93blwiLDM1OlwiRW5kXCIsMzY6XCJIb21lXCIsMzc6XCJBcnJvd0xlZnRcIiwzODpcIkFycm93VXBcIiwzOTpcIkFycm93UmlnaHRcIiw0MDpcIkFycm93RG93blwiLDQ1OlwiSW5zZXJ0XCIsNDY6XCJEZWxldGVcIiwxMTI6XCJGMVwiLDExMzpcIkYyXCIsMTE0OlwiRjNcIiwxMTU6XCJGNFwiLFxuMTE2OlwiRjVcIiwxMTc6XCJGNlwiLDExODpcIkY3XCIsMTE5OlwiRjhcIiwxMjA6XCJGOVwiLDEyMTpcIkYxMFwiLDEyMjpcIkYxMVwiLDEyMzpcIkYxMlwiLDE0NDpcIk51bUxvY2tcIiwxNDU6XCJTY3JvbGxMb2NrXCIsMjI0OlwiTWV0YVwifSx4ZD1XYy5leHRlbmQoe2tleTpmdW5jdGlvbihhKXtpZihhLmtleSl7dmFyIGI9dmRbYS5rZXldfHxhLmtleTtpZihcIlVuaWRlbnRpZmllZFwiIT09YilyZXR1cm4gYn1yZXR1cm5cImtleXByZXNzXCI9PT1hLnR5cGU/KGE9dWQoYSksMTM9PT1hP1wiRW50ZXJcIjpTdHJpbmcuZnJvbUNoYXJDb2RlKGEpKTpcImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP3dkW2Eua2V5Q29kZV18fFwiVW5pZGVudGlmaWVkXCI6XCJcIn0sbG9jYXRpb246bnVsbCxjdHJsS2V5Om51bGwsc2hpZnRLZXk6bnVsbCxhbHRLZXk6bnVsbCxtZXRhS2V5Om51bGwscmVwZWF0Om51bGwsbG9jYWxlOm51bGwsZ2V0TW9kaWZpZXJTdGF0ZTpaYyxjaGFyQ29kZTpmdW5jdGlvbihhKXtyZXR1cm5cImtleXByZXNzXCI9PT1cbmEudHlwZT91ZChhKTowfSxrZXlDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9LHdoaWNoOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PWEudHlwZT91ZChhKTpcImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP2Eua2V5Q29kZTowfX0pLHlkPWRkLmV4dGVuZCh7ZGF0YVRyYW5zZmVyOm51bGx9KSx6ZD1XYy5leHRlbmQoe3RvdWNoZXM6bnVsbCx0YXJnZXRUb3VjaGVzOm51bGwsY2hhbmdlZFRvdWNoZXM6bnVsbCxhbHRLZXk6bnVsbCxtZXRhS2V5Om51bGwsY3RybEtleTpudWxsLHNoaWZ0S2V5Om51bGwsZ2V0TW9kaWZpZXJTdGF0ZTpaY30pLEFkPXkuZXh0ZW5kKHtwcm9wZXJ0eU5hbWU6bnVsbCxlbGFwc2VkVGltZTpudWxsLHBzZXVkb0VsZW1lbnQ6bnVsbH0pLEJkPWRkLmV4dGVuZCh7ZGVsdGFYOmZ1bmN0aW9uKGEpe3JldHVyblwiZGVsdGFYXCJpbiBhP2EuZGVsdGFYOlwid2hlZWxEZWx0YVhcImluXG5hPy1hLndoZWVsRGVsdGFYOjB9LGRlbHRhWTpmdW5jdGlvbihhKXtyZXR1cm5cImRlbHRhWVwiaW4gYT9hLmRlbHRhWTpcIndoZWVsRGVsdGFZXCJpbiBhPy1hLndoZWVsRGVsdGFZOlwid2hlZWxEZWx0YVwiaW4gYT8tYS53aGVlbERlbHRhOjB9LGRlbHRhWjpudWxsLGRlbHRhTW9kZTpudWxsfSksQ2Q9W1tcImJsdXJcIixcImJsdXJcIiwwXSxbXCJjYW5jZWxcIixcImNhbmNlbFwiLDBdLFtcImNsaWNrXCIsXCJjbGlja1wiLDBdLFtcImNsb3NlXCIsXCJjbG9zZVwiLDBdLFtcImNvbnRleHRtZW51XCIsXCJjb250ZXh0TWVudVwiLDBdLFtcImNvcHlcIixcImNvcHlcIiwwXSxbXCJjdXRcIixcImN1dFwiLDBdLFtcImF1eGNsaWNrXCIsXCJhdXhDbGlja1wiLDBdLFtcImRibGNsaWNrXCIsXCJkb3VibGVDbGlja1wiLDBdLFtcImRyYWdlbmRcIixcImRyYWdFbmRcIiwwXSxbXCJkcmFnc3RhcnRcIixcImRyYWdTdGFydFwiLDBdLFtcImRyb3BcIixcImRyb3BcIiwwXSxbXCJmb2N1c1wiLFwiZm9jdXNcIiwwXSxbXCJpbnB1dFwiLFwiaW5wdXRcIiwwXSxbXCJpbnZhbGlkXCIsXCJpbnZhbGlkXCIsMF0sXG5bXCJrZXlkb3duXCIsXCJrZXlEb3duXCIsMF0sW1wia2V5cHJlc3NcIixcImtleVByZXNzXCIsMF0sW1wia2V5dXBcIixcImtleVVwXCIsMF0sW1wibW91c2Vkb3duXCIsXCJtb3VzZURvd25cIiwwXSxbXCJtb3VzZXVwXCIsXCJtb3VzZVVwXCIsMF0sW1wicGFzdGVcIixcInBhc3RlXCIsMF0sW1wicGF1c2VcIixcInBhdXNlXCIsMF0sW1wicGxheVwiLFwicGxheVwiLDBdLFtcInBvaW50ZXJjYW5jZWxcIixcInBvaW50ZXJDYW5jZWxcIiwwXSxbXCJwb2ludGVyZG93blwiLFwicG9pbnRlckRvd25cIiwwXSxbXCJwb2ludGVydXBcIixcInBvaW50ZXJVcFwiLDBdLFtcInJhdGVjaGFuZ2VcIixcInJhdGVDaGFuZ2VcIiwwXSxbXCJyZXNldFwiLFwicmVzZXRcIiwwXSxbXCJzZWVrZWRcIixcInNlZWtlZFwiLDBdLFtcInN1Ym1pdFwiLFwic3VibWl0XCIsMF0sW1widG91Y2hjYW5jZWxcIixcInRvdWNoQ2FuY2VsXCIsMF0sW1widG91Y2hlbmRcIixcInRvdWNoRW5kXCIsMF0sW1widG91Y2hzdGFydFwiLFwidG91Y2hTdGFydFwiLDBdLFtcInZvbHVtZWNoYW5nZVwiLFwidm9sdW1lQ2hhbmdlXCIsMF0sW1wiZHJhZ1wiLFwiZHJhZ1wiLFxuMV0sW1wiZHJhZ2VudGVyXCIsXCJkcmFnRW50ZXJcIiwxXSxbXCJkcmFnZXhpdFwiLFwiZHJhZ0V4aXRcIiwxXSxbXCJkcmFnbGVhdmVcIixcImRyYWdMZWF2ZVwiLDFdLFtcImRyYWdvdmVyXCIsXCJkcmFnT3ZlclwiLDFdLFtcIm1vdXNlbW92ZVwiLFwibW91c2VNb3ZlXCIsMV0sW1wibW91c2VvdXRcIixcIm1vdXNlT3V0XCIsMV0sW1wibW91c2VvdmVyXCIsXCJtb3VzZU92ZXJcIiwxXSxbXCJwb2ludGVybW92ZVwiLFwicG9pbnRlck1vdmVcIiwxXSxbXCJwb2ludGVyb3V0XCIsXCJwb2ludGVyT3V0XCIsMV0sW1wicG9pbnRlcm92ZXJcIixcInBvaW50ZXJPdmVyXCIsMV0sW1wic2Nyb2xsXCIsXCJzY3JvbGxcIiwxXSxbXCJ0b2dnbGVcIixcInRvZ2dsZVwiLDFdLFtcInRvdWNobW92ZVwiLFwidG91Y2hNb3ZlXCIsMV0sW1wid2hlZWxcIixcIndoZWVsXCIsMV0sW1wiYWJvcnRcIixcImFib3J0XCIsMl0sW1hhLFwiYW5pbWF0aW9uRW5kXCIsMl0sW1lhLFwiYW5pbWF0aW9uSXRlcmF0aW9uXCIsMl0sW1phLFwiYW5pbWF0aW9uU3RhcnRcIiwyXSxbXCJjYW5wbGF5XCIsXCJjYW5QbGF5XCIsMl0sW1wiY2FucGxheXRocm91Z2hcIixcblwiY2FuUGxheVRocm91Z2hcIiwyXSxbXCJkdXJhdGlvbmNoYW5nZVwiLFwiZHVyYXRpb25DaGFuZ2VcIiwyXSxbXCJlbXB0aWVkXCIsXCJlbXB0aWVkXCIsMl0sW1wiZW5jcnlwdGVkXCIsXCJlbmNyeXB0ZWRcIiwyXSxbXCJlbmRlZFwiLFwiZW5kZWRcIiwyXSxbXCJlcnJvclwiLFwiZXJyb3JcIiwyXSxbXCJnb3Rwb2ludGVyY2FwdHVyZVwiLFwiZ290UG9pbnRlckNhcHR1cmVcIiwyXSxbXCJsb2FkXCIsXCJsb2FkXCIsMl0sW1wibG9hZGVkZGF0YVwiLFwibG9hZGVkRGF0YVwiLDJdLFtcImxvYWRlZG1ldGFkYXRhXCIsXCJsb2FkZWRNZXRhZGF0YVwiLDJdLFtcImxvYWRzdGFydFwiLFwibG9hZFN0YXJ0XCIsMl0sW1wibG9zdHBvaW50ZXJjYXB0dXJlXCIsXCJsb3N0UG9pbnRlckNhcHR1cmVcIiwyXSxbXCJwbGF5aW5nXCIsXCJwbGF5aW5nXCIsMl0sW1wicHJvZ3Jlc3NcIixcInByb2dyZXNzXCIsMl0sW1wic2Vla2luZ1wiLFwic2Vla2luZ1wiLDJdLFtcInN0YWxsZWRcIixcInN0YWxsZWRcIiwyXSxbXCJzdXNwZW5kXCIsXCJzdXNwZW5kXCIsMl0sW1widGltZXVwZGF0ZVwiLFwidGltZVVwZGF0ZVwiLFxuMl0sW2FiLFwidHJhbnNpdGlvbkVuZFwiLDJdLFtcIndhaXRpbmdcIixcIndhaXRpbmdcIiwyXV0sRGQ9e30sRWQ9e30sRmQ9MDtmb3IoO0ZkPENkLmxlbmd0aDtGZCsrKXt2YXIgR2Q9Q2RbRmRdLEhkPUdkWzBdLElkPUdkWzFdLEpkPUdkWzJdLEtkPVwib25cIisoSWRbMF0udG9VcHBlckNhc2UoKStJZC5zbGljZSgxKSksTGQ9e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOktkLGNhcHR1cmVkOktkK1wiQ2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6W0hkXSxldmVudFByaW9yaXR5OkpkfTtEZFtJZF09TGQ7RWRbSGRdPUxkfVxudmFyIE1kPXtldmVudFR5cGVzOkRkLGdldEV2ZW50UHJpb3JpdHk6ZnVuY3Rpb24oYSl7YT1FZFthXTtyZXR1cm4gdm9pZCAwIT09YT9hLmV2ZW50UHJpb3JpdHk6Mn0sZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1FZFthXTtpZighZSlyZXR1cm4gbnVsbDtzd2l0Y2goYSl7Y2FzZSBcImtleXByZXNzXCI6aWYoMD09PXVkKGMpKXJldHVybiBudWxsO2Nhc2UgXCJrZXlkb3duXCI6Y2FzZSBcImtleXVwXCI6YT14ZDticmVhaztjYXNlIFwiYmx1clwiOmNhc2UgXCJmb2N1c1wiOmE9dGQ7YnJlYWs7Y2FzZSBcImNsaWNrXCI6aWYoMj09PWMuYnV0dG9uKXJldHVybiBudWxsO2Nhc2UgXCJhdXhjbGlja1wiOmNhc2UgXCJkYmxjbGlja1wiOmNhc2UgXCJtb3VzZWRvd25cIjpjYXNlIFwibW91c2Vtb3ZlXCI6Y2FzZSBcIm1vdXNldXBcIjpjYXNlIFwibW91c2VvdXRcIjpjYXNlIFwibW91c2VvdmVyXCI6Y2FzZSBcImNvbnRleHRtZW51XCI6YT1kZDticmVhaztjYXNlIFwiZHJhZ1wiOmNhc2UgXCJkcmFnZW5kXCI6Y2FzZSBcImRyYWdlbnRlclwiOmNhc2UgXCJkcmFnZXhpdFwiOmNhc2UgXCJkcmFnbGVhdmVcIjpjYXNlIFwiZHJhZ292ZXJcIjpjYXNlIFwiZHJhZ3N0YXJ0XCI6Y2FzZSBcImRyb3BcIjphPVxueWQ7YnJlYWs7Y2FzZSBcInRvdWNoY2FuY2VsXCI6Y2FzZSBcInRvdWNoZW5kXCI6Y2FzZSBcInRvdWNobW92ZVwiOmNhc2UgXCJ0b3VjaHN0YXJ0XCI6YT16ZDticmVhaztjYXNlIFhhOmNhc2UgWWE6Y2FzZSBaYTphPXJkO2JyZWFrO2Nhc2UgYWI6YT1BZDticmVhaztjYXNlIFwic2Nyb2xsXCI6YT1XYzticmVhaztjYXNlIFwid2hlZWxcIjphPUJkO2JyZWFrO2Nhc2UgXCJjb3B5XCI6Y2FzZSBcImN1dFwiOmNhc2UgXCJwYXN0ZVwiOmE9c2Q7YnJlYWs7Y2FzZSBcImdvdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcImxvc3Rwb2ludGVyY2FwdHVyZVwiOmNhc2UgXCJwb2ludGVyY2FuY2VsXCI6Y2FzZSBcInBvaW50ZXJkb3duXCI6Y2FzZSBcInBvaW50ZXJtb3ZlXCI6Y2FzZSBcInBvaW50ZXJvdXRcIjpjYXNlIFwicG9pbnRlcm92ZXJcIjpjYXNlIFwicG9pbnRlcnVwXCI6YT1lZDticmVhaztkZWZhdWx0OmE9eX1iPWEuZ2V0UG9vbGVkKGUsYixjLGQpO1FhKGIpO3JldHVybiBifX0sTmQ9TWQuZ2V0RXZlbnRQcmlvcml0eSxPZD1bXTtcbmZ1bmN0aW9uIFBkKGEpe3ZhciBiPWEudGFyZ2V0SW5zdCxjPWI7ZG97aWYoIWMpe2EuYW5jZXN0b3JzLnB1c2goYyk7YnJlYWt9dmFyIGQ7Zm9yKGQ9YztkLnJldHVybjspZD1kLnJldHVybjtkPTMhPT1kLnRhZz9udWxsOmQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87aWYoIWQpYnJlYWs7YS5hbmNlc3RvcnMucHVzaChjKTtjPUhhKGQpfXdoaWxlKGMpO2ZvcihjPTA7YzxhLmFuY2VzdG9ycy5sZW5ndGg7YysrKXtiPWEuYW5jZXN0b3JzW2NdO3ZhciBlPVJiKGEubmF0aXZlRXZlbnQpO2Q9YS50b3BMZXZlbFR5cGU7Zm9yKHZhciBmPWEubmF0aXZlRXZlbnQsaD1udWxsLGc9MDtnPGVhLmxlbmd0aDtnKyspe3ZhciBrPWVhW2ddO2smJihrPWsuZXh0cmFjdEV2ZW50cyhkLGIsZixlKSkmJihoPXhhKGgsaykpfUJhKGgpfX12YXIgUWQ9ITA7ZnVuY3Rpb24gRyhhLGIpe1JkKGIsYSwhMSl9XG5mdW5jdGlvbiBSZChhLGIsYyl7c3dpdGNoKE5kKGIpKXtjYXNlIDA6dmFyIGQ9U2QuYmluZChudWxsLGIsMSk7YnJlYWs7Y2FzZSAxOmQ9VGQuYmluZChudWxsLGIsMSk7YnJlYWs7ZGVmYXVsdDpkPVVkLmJpbmQobnVsbCxiLDEpfWM/YS5hZGRFdmVudExpc3RlbmVyKGIsZCwhMCk6YS5hZGRFdmVudExpc3RlbmVyKGIsZCwhMSl9ZnVuY3Rpb24gU2QoYSxiLGMpe05ifHxMYigpO3ZhciBkPVVkLGU9TmI7TmI9ITA7dHJ5e0tiKGQsYSxiLGMpfWZpbmFsbHl7KE5iPWUpfHxPYigpfX1mdW5jdGlvbiBUZChhLGIsYyl7VWQoYSxiLGMpfVxuZnVuY3Rpb24gVWQoYSxiLGMpe2lmKFFkKXtiPVJiKGMpO2I9SGEoYik7bnVsbD09PWJ8fFwibnVtYmVyXCIhPT10eXBlb2YgYi50YWd8fDI9PT1sZChiKXx8KGI9bnVsbCk7aWYoT2QubGVuZ3RoKXt2YXIgZD1PZC5wb3AoKTtkLnRvcExldmVsVHlwZT1hO2QubmF0aXZlRXZlbnQ9YztkLnRhcmdldEluc3Q9YjthPWR9ZWxzZSBhPXt0b3BMZXZlbFR5cGU6YSxuYXRpdmVFdmVudDpjLHRhcmdldEluc3Q6YixhbmNlc3RvcnM6W119O3RyeXtpZihjPWEsTmIpUGQoYyx2b2lkIDApO2Vsc2V7TmI9ITA7dHJ5e01iKFBkLGMsdm9pZCAwKX1maW5hbGx5e05iPSExLE9iKCl9fX1maW5hbGx5e2EudG9wTGV2ZWxUeXBlPW51bGwsYS5uYXRpdmVFdmVudD1udWxsLGEudGFyZ2V0SW5zdD1udWxsLGEuYW5jZXN0b3JzLmxlbmd0aD0wLDEwPk9kLmxlbmd0aCYmT2QucHVzaChhKX19fXZhciBWZD1uZXcgKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBXZWFrTWFwP1dlYWtNYXA6TWFwKTtcbmZ1bmN0aW9uIFdkKGEpe3ZhciBiPVZkLmdldChhKTt2b2lkIDA9PT1iJiYoYj1uZXcgU2V0LFZkLnNldChhLGIpKTtyZXR1cm4gYn1mdW5jdGlvbiBYZChhKXthPWF8fChcInVuZGVmaW5lZFwiIT09dHlwZW9mIGRvY3VtZW50P2RvY3VtZW50OnZvaWQgMCk7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBhKXJldHVybiBudWxsO3RyeXtyZXR1cm4gYS5hY3RpdmVFbGVtZW50fHxhLmJvZHl9Y2F0Y2goYil7cmV0dXJuIGEuYm9keX19ZnVuY3Rpb24gWWQoYSl7Zm9yKDthJiZhLmZpcnN0Q2hpbGQ7KWE9YS5maXJzdENoaWxkO3JldHVybiBhfVxuZnVuY3Rpb24gWmQoYSxiKXt2YXIgYz1ZZChhKTthPTA7Zm9yKHZhciBkO2M7KXtpZigzPT09Yy5ub2RlVHlwZSl7ZD1hK2MudGV4dENvbnRlbnQubGVuZ3RoO2lmKGE8PWImJmQ+PWIpcmV0dXJue25vZGU6YyxvZmZzZXQ6Yi1hfTthPWR9YTp7Zm9yKDtjOyl7aWYoYy5uZXh0U2libGluZyl7Yz1jLm5leHRTaWJsaW5nO2JyZWFrIGF9Yz1jLnBhcmVudE5vZGV9Yz12b2lkIDB9Yz1ZZChjKX19ZnVuY3Rpb24gJGQoYSxiKXtyZXR1cm4gYSYmYj9hPT09Yj8hMDphJiYzPT09YS5ub2RlVHlwZT8hMTpiJiYzPT09Yi5ub2RlVHlwZT8kZChhLGIucGFyZW50Tm9kZSk6XCJjb250YWluc1wiaW4gYT9hLmNvbnRhaW5zKGIpOmEuY29tcGFyZURvY3VtZW50UG9zaXRpb24/ISEoYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihiKSYxNik6ITE6ITF9XG5mdW5jdGlvbiBhZSgpe2Zvcih2YXIgYT13aW5kb3csYj1YZCgpO2IgaW5zdGFuY2VvZiBhLkhUTUxJRnJhbWVFbGVtZW50Oyl7dHJ5e3ZhciBjPVwic3RyaW5nXCI9PT10eXBlb2YgYi5jb250ZW50V2luZG93LmxvY2F0aW9uLmhyZWZ9Y2F0Y2goZCl7Yz0hMX1pZihjKWE9Yi5jb250ZW50V2luZG93O2Vsc2UgYnJlYWs7Yj1YZChhLmRvY3VtZW50KX1yZXR1cm4gYn1mdW5jdGlvbiBiZShhKXt2YXIgYj1hJiZhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuIGImJihcImlucHV0XCI9PT1iJiYoXCJ0ZXh0XCI9PT1hLnR5cGV8fFwic2VhcmNoXCI9PT1hLnR5cGV8fFwidGVsXCI9PT1hLnR5cGV8fFwidXJsXCI9PT1hLnR5cGV8fFwicGFzc3dvcmRcIj09PWEudHlwZSl8fFwidGV4dGFyZWFcIj09PWJ8fFwidHJ1ZVwiPT09YS5jb250ZW50RWRpdGFibGUpfVxudmFyIGNlPVJhJiZcImRvY3VtZW50TW9kZVwiaW4gZG9jdW1lbnQmJjExPj1kb2N1bWVudC5kb2N1bWVudE1vZGUsZGU9e3NlbGVjdDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvblNlbGVjdFwiLGNhcHR1cmVkOlwib25TZWxlY3RDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcImJsdXIgY29udGV4dG1lbnUgZHJhZ2VuZCBmb2N1cyBrZXlkb3duIGtleXVwIG1vdXNlZG93biBtb3VzZXVwIHNlbGVjdGlvbmNoYW5nZVwiLnNwbGl0KFwiIFwiKX19LGVlPW51bGwsZmU9bnVsbCxnZT1udWxsLGhlPSExO1xuZnVuY3Rpb24gaWUoYSxiKXt2YXIgYz1iLndpbmRvdz09PWI/Yi5kb2N1bWVudDo5PT09Yi5ub2RlVHlwZT9iOmIub3duZXJEb2N1bWVudDtpZihoZXx8bnVsbD09ZWV8fGVlIT09WGQoYykpcmV0dXJuIG51bGw7Yz1lZTtcInNlbGVjdGlvblN0YXJ0XCJpbiBjJiZiZShjKT9jPXtzdGFydDpjLnNlbGVjdGlvblN0YXJ0LGVuZDpjLnNlbGVjdGlvbkVuZH06KGM9KGMub3duZXJEb2N1bWVudCYmYy5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3fHx3aW5kb3cpLmdldFNlbGVjdGlvbigpLGM9e2FuY2hvck5vZGU6Yy5hbmNob3JOb2RlLGFuY2hvck9mZnNldDpjLmFuY2hvck9mZnNldCxmb2N1c05vZGU6Yy5mb2N1c05vZGUsZm9jdXNPZmZzZXQ6Yy5mb2N1c09mZnNldH0pO3JldHVybiBnZSYmamQoZ2UsYyk/bnVsbDooZ2U9YyxhPXkuZ2V0UG9vbGVkKGRlLnNlbGVjdCxmZSxhLGIpLGEudHlwZT1cInNlbGVjdFwiLGEudGFyZ2V0PWVlLFFhKGEpLGEpfVxudmFyIGplPXtldmVudFR5cGVzOmRlLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9ZC53aW5kb3c9PT1kP2QuZG9jdW1lbnQ6OT09PWQubm9kZVR5cGU/ZDpkLm93bmVyRG9jdW1lbnQsZjtpZighKGY9IWUpKXthOntlPVdkKGUpO2Y9amEub25TZWxlY3Q7Zm9yKHZhciBoPTA7aDxmLmxlbmd0aDtoKyspaWYoIWUuaGFzKGZbaF0pKXtlPSExO2JyZWFrIGF9ZT0hMH1mPSFlfWlmKGYpcmV0dXJuIG51bGw7ZT1iP0phKGIpOndpbmRvdztzd2l0Y2goYSl7Y2FzZSBcImZvY3VzXCI6aWYoUWIoZSl8fFwidHJ1ZVwiPT09ZS5jb250ZW50RWRpdGFibGUpZWU9ZSxmZT1iLGdlPW51bGw7YnJlYWs7Y2FzZSBcImJsdXJcIjpnZT1mZT1lZT1udWxsO2JyZWFrO2Nhc2UgXCJtb3VzZWRvd25cIjpoZT0hMDticmVhaztjYXNlIFwiY29udGV4dG1lbnVcIjpjYXNlIFwibW91c2V1cFwiOmNhc2UgXCJkcmFnZW5kXCI6cmV0dXJuIGhlPSExLGllKGMsZCk7Y2FzZSBcInNlbGVjdGlvbmNoYW5nZVwiOmlmKGNlKWJyZWFrO1xuY2FzZSBcImtleWRvd25cIjpjYXNlIFwia2V5dXBcIjpyZXR1cm4gaWUoYyxkKX1yZXR1cm4gbnVsbH19O0NhLmluamVjdEV2ZW50UGx1Z2luT3JkZXIoXCJSZXNwb25kZXJFdmVudFBsdWdpbiBTaW1wbGVFdmVudFBsdWdpbiBFbnRlckxlYXZlRXZlbnRQbHVnaW4gQ2hhbmdlRXZlbnRQbHVnaW4gU2VsZWN0RXZlbnRQbHVnaW4gQmVmb3JlSW5wdXRFdmVudFBsdWdpblwiLnNwbGl0KFwiIFwiKSk7c2E9S2E7dGE9SWE7dmE9SmE7Q2EuaW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lKHtTaW1wbGVFdmVudFBsdWdpbjpNZCxFbnRlckxlYXZlRXZlbnRQbHVnaW46Z2QsQ2hhbmdlRXZlbnRQbHVnaW46VmMsU2VsZWN0RXZlbnRQbHVnaW46amUsQmVmb3JlSW5wdXRFdmVudFBsdWdpbjpDYn0pO2Z1bmN0aW9uIGtlKGEpe3ZhciBiPVwiXCI7YWEuQ2hpbGRyZW4uZm9yRWFjaChhLGZ1bmN0aW9uKGEpe251bGwhPWEmJihiKz1hKX0pO3JldHVybiBifVxuZnVuY3Rpb24gbGUoYSxiKXthPW0oe2NoaWxkcmVuOnZvaWQgMH0sYik7aWYoYj1rZShiLmNoaWxkcmVuKSlhLmNoaWxkcmVuPWI7cmV0dXJuIGF9ZnVuY3Rpb24gbWUoYSxiLGMsZCl7YT1hLm9wdGlvbnM7aWYoYil7Yj17fTtmb3IodmFyIGU9MDtlPGMubGVuZ3RoO2UrKyliW1wiJFwiK2NbZV1dPSEwO2ZvcihjPTA7YzxhLmxlbmd0aDtjKyspZT1iLmhhc093blByb3BlcnR5KFwiJFwiK2FbY10udmFsdWUpLGFbY10uc2VsZWN0ZWQhPT1lJiYoYVtjXS5zZWxlY3RlZD1lKSxlJiZkJiYoYVtjXS5kZWZhdWx0U2VsZWN0ZWQ9ITApfWVsc2V7Yz1cIlwiK0FjKGMpO2I9bnVsbDtmb3IoZT0wO2U8YS5sZW5ndGg7ZSsrKXtpZihhW2VdLnZhbHVlPT09Yyl7YVtlXS5zZWxlY3RlZD0hMDtkJiYoYVtlXS5kZWZhdWx0U2VsZWN0ZWQ9ITApO3JldHVybn1udWxsIT09Ynx8YVtlXS5kaXNhYmxlZHx8KGI9YVtlXSl9bnVsbCE9PWImJihiLnNlbGVjdGVkPSEwKX19XG5mdW5jdGlvbiBuZShhLGIpe2lmKG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpdGhyb3cgdChFcnJvcig5MSkpO3JldHVybiBtKHt9LGIse3ZhbHVlOnZvaWQgMCxkZWZhdWx0VmFsdWU6dm9pZCAwLGNoaWxkcmVuOlwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZX0pfWZ1bmN0aW9uIG9lKGEsYil7dmFyIGM9Yi52YWx1ZTtpZihudWxsPT1jKXtjPWIuZGVmYXVsdFZhbHVlO2I9Yi5jaGlsZHJlbjtpZihudWxsIT1iKXtpZihudWxsIT1jKXRocm93IHQoRXJyb3IoOTIpKTtpZihBcnJheS5pc0FycmF5KGIpKXtpZighKDE+PWIubGVuZ3RoKSl0aHJvdyB0KEVycm9yKDkzKSk7Yj1iWzBdfWM9Yn1udWxsPT1jJiYoYz1cIlwiKX1hLl93cmFwcGVyU3RhdGU9e2luaXRpYWxWYWx1ZTpBYyhjKX19XG5mdW5jdGlvbiBwZShhLGIpe3ZhciBjPUFjKGIudmFsdWUpLGQ9QWMoYi5kZWZhdWx0VmFsdWUpO251bGwhPWMmJihjPVwiXCIrYyxjIT09YS52YWx1ZSYmKGEudmFsdWU9YyksbnVsbD09Yi5kZWZhdWx0VmFsdWUmJmEuZGVmYXVsdFZhbHVlIT09YyYmKGEuZGVmYXVsdFZhbHVlPWMpKTtudWxsIT1kJiYoYS5kZWZhdWx0VmFsdWU9XCJcIitkKX1mdW5jdGlvbiBxZShhKXt2YXIgYj1hLnRleHRDb250ZW50O2I9PT1hLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlJiYoYS52YWx1ZT1iKX12YXIgcmU9e2h0bWw6XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCIsbWF0aG1sOlwiaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTFwiLHN2ZzpcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJ9O1xuZnVuY3Rpb24gc2UoYSl7c3dpdGNoKGEpe2Nhc2UgXCJzdmdcIjpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI7Y2FzZSBcIm1hdGhcIjpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUxcIjtkZWZhdWx0OnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwifX1mdW5jdGlvbiB0ZShhLGIpe3JldHVybiBudWxsPT1hfHxcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIj09PWE/c2UoYik6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPT09YSYmXCJmb3JlaWduT2JqZWN0XCI9PT1iP1wiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiOmF9XG52YXIgdWU9dm9pZCAwLHZlPWZ1bmN0aW9uKGEpe3JldHVyblwidW5kZWZpbmVkXCIhPT10eXBlb2YgTVNBcHAmJk1TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uP2Z1bmN0aW9uKGIsYyxkLGUpe01TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uKGZ1bmN0aW9uKCl7cmV0dXJuIGEoYixjLGQsZSl9KX06YX0oZnVuY3Rpb24oYSxiKXtpZihhLm5hbWVzcGFjZVVSSSE9PXJlLnN2Z3x8XCJpbm5lckhUTUxcImluIGEpYS5pbm5lckhUTUw9YjtlbHNle3VlPXVlfHxkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO3VlLmlubmVySFRNTD1cIjxzdmc+XCIrYitcIjwvc3ZnPlwiO2ZvcihiPXVlLmZpcnN0Q2hpbGQ7YS5maXJzdENoaWxkOylhLnJlbW92ZUNoaWxkKGEuZmlyc3RDaGlsZCk7Zm9yKDtiLmZpcnN0Q2hpbGQ7KWEuYXBwZW5kQ2hpbGQoYi5maXJzdENoaWxkKX19KTtcbmZ1bmN0aW9uIHdlKGEsYil7aWYoYil7dmFyIGM9YS5maXJzdENoaWxkO2lmKGMmJmM9PT1hLmxhc3RDaGlsZCYmMz09PWMubm9kZVR5cGUpe2Mubm9kZVZhbHVlPWI7cmV0dXJufX1hLnRleHRDb250ZW50PWJ9XG52YXIgeGU9e2FuaW1hdGlvbkl0ZXJhdGlvbkNvdW50OiEwLGJvcmRlckltYWdlT3V0c2V0OiEwLGJvcmRlckltYWdlU2xpY2U6ITAsYm9yZGVySW1hZ2VXaWR0aDohMCxib3hGbGV4OiEwLGJveEZsZXhHcm91cDohMCxib3hPcmRpbmFsR3JvdXA6ITAsY29sdW1uQ291bnQ6ITAsY29sdW1uczohMCxmbGV4OiEwLGZsZXhHcm93OiEwLGZsZXhQb3NpdGl2ZTohMCxmbGV4U2hyaW5rOiEwLGZsZXhOZWdhdGl2ZTohMCxmbGV4T3JkZXI6ITAsZ3JpZEFyZWE6ITAsZ3JpZFJvdzohMCxncmlkUm93RW5kOiEwLGdyaWRSb3dTcGFuOiEwLGdyaWRSb3dTdGFydDohMCxncmlkQ29sdW1uOiEwLGdyaWRDb2x1bW5FbmQ6ITAsZ3JpZENvbHVtblNwYW46ITAsZ3JpZENvbHVtblN0YXJ0OiEwLGZvbnRXZWlnaHQ6ITAsbGluZUNsYW1wOiEwLGxpbmVIZWlnaHQ6ITAsb3BhY2l0eTohMCxvcmRlcjohMCxvcnBoYW5zOiEwLHRhYlNpemU6ITAsd2lkb3dzOiEwLHpJbmRleDohMCx6b29tOiEwLGZpbGxPcGFjaXR5OiEwLFxuZmxvb2RPcGFjaXR5OiEwLHN0b3BPcGFjaXR5OiEwLHN0cm9rZURhc2hhcnJheTohMCxzdHJva2VEYXNob2Zmc2V0OiEwLHN0cm9rZU1pdGVybGltaXQ6ITAsc3Ryb2tlT3BhY2l0eTohMCxzdHJva2VXaWR0aDohMH0seWU9W1wiV2Via2l0XCIsXCJtc1wiLFwiTW96XCIsXCJPXCJdO09iamVjdC5rZXlzKHhlKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3llLmZvckVhY2goZnVuY3Rpb24oYil7Yj1iK2EuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkrYS5zdWJzdHJpbmcoMSk7eGVbYl09eGVbYV19KX0pO2Z1bmN0aW9uIHplKGEsYixjKXtyZXR1cm4gbnVsbD09Ynx8XCJib29sZWFuXCI9PT10eXBlb2YgYnx8XCJcIj09PWI/XCJcIjpjfHxcIm51bWJlclwiIT09dHlwZW9mIGJ8fDA9PT1ifHx4ZS5oYXNPd25Qcm9wZXJ0eShhKSYmeGVbYV0/KFwiXCIrYikudHJpbSgpOmIrXCJweFwifVxuZnVuY3Rpb24gQWUoYSxiKXthPWEuc3R5bGU7Zm9yKHZhciBjIGluIGIpaWYoYi5oYXNPd25Qcm9wZXJ0eShjKSl7dmFyIGQ9MD09PWMuaW5kZXhPZihcIi0tXCIpLGU9emUoYyxiW2NdLGQpO1wiZmxvYXRcIj09PWMmJihjPVwiY3NzRmxvYXRcIik7ZD9hLnNldFByb3BlcnR5KGMsZSk6YVtjXT1lfX12YXIgQ2U9bSh7bWVudWl0ZW06ITB9LHthcmVhOiEwLGJhc2U6ITAsYnI6ITAsY29sOiEwLGVtYmVkOiEwLGhyOiEwLGltZzohMCxpbnB1dDohMCxrZXlnZW46ITAsbGluazohMCxtZXRhOiEwLHBhcmFtOiEwLHNvdXJjZTohMCx0cmFjazohMCx3YnI6ITB9KTtcbmZ1bmN0aW9uIERlKGEsYil7aWYoYil7aWYoQ2VbYV0mJihudWxsIT1iLmNoaWxkcmVufHxudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKSl0aHJvdyB0KEVycm9yKDEzNyksYSxcIlwiKTtpZihudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKXtpZihudWxsIT1iLmNoaWxkcmVuKXRocm93IHQoRXJyb3IoNjApKTtpZighKFwib2JqZWN0XCI9PT10eXBlb2YgYi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmXCJfX2h0bWxcImluIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpKXRocm93IHQoRXJyb3IoNjEpKTt9aWYobnVsbCE9Yi5zdHlsZSYmXCJvYmplY3RcIiE9PXR5cGVvZiBiLnN0eWxlKXRocm93IHQoRXJyb3IoNjIpLFwiXCIpO319XG5mdW5jdGlvbiBFZShhLGIpe2lmKC0xPT09YS5pbmRleE9mKFwiLVwiKSlyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGIuaXM7c3dpdGNoKGEpe2Nhc2UgXCJhbm5vdGF0aW9uLXhtbFwiOmNhc2UgXCJjb2xvci1wcm9maWxlXCI6Y2FzZSBcImZvbnQtZmFjZVwiOmNhc2UgXCJmb250LWZhY2Utc3JjXCI6Y2FzZSBcImZvbnQtZmFjZS11cmlcIjpjYXNlIFwiZm9udC1mYWNlLWZvcm1hdFwiOmNhc2UgXCJmb250LWZhY2UtbmFtZVwiOmNhc2UgXCJtaXNzaW5nLWdseXBoXCI6cmV0dXJuITE7ZGVmYXVsdDpyZXR1cm4hMH19XG5mdW5jdGlvbiBGZShhLGIpe2E9OT09PWEubm9kZVR5cGV8fDExPT09YS5ub2RlVHlwZT9hOmEub3duZXJEb2N1bWVudDt2YXIgYz1XZChhKTtiPWphW2JdO2Zvcih2YXIgZD0wO2Q8Yi5sZW5ndGg7ZCsrKXt2YXIgZT1iW2RdO2lmKCFjLmhhcyhlKSl7c3dpdGNoKGUpe2Nhc2UgXCJzY3JvbGxcIjpSZChhLFwic2Nyb2xsXCIsITApO2JyZWFrO2Nhc2UgXCJmb2N1c1wiOmNhc2UgXCJibHVyXCI6UmQoYSxcImZvY3VzXCIsITApO1JkKGEsXCJibHVyXCIsITApO2MuYWRkKFwiYmx1clwiKTtjLmFkZChcImZvY3VzXCIpO2JyZWFrO2Nhc2UgXCJjYW5jZWxcIjpjYXNlIFwiY2xvc2VcIjpTYihlKSYmUmQoYSxlLCEwKTticmVhaztjYXNlIFwiaW52YWxpZFwiOmNhc2UgXCJzdWJtaXRcIjpjYXNlIFwicmVzZXRcIjpicmVhaztkZWZhdWx0Oi0xPT09YmIuaW5kZXhPZihlKSYmRyhlLGEpfWMuYWRkKGUpfX19ZnVuY3Rpb24gR2UoKXt9dmFyIEhlPW51bGwsSWU9bnVsbDtcbmZ1bmN0aW9uIEplKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJidXR0b25cIjpjYXNlIFwiaW5wdXRcIjpjYXNlIFwic2VsZWN0XCI6Y2FzZSBcInRleHRhcmVhXCI6cmV0dXJuISFiLmF1dG9Gb2N1c31yZXR1cm4hMX1mdW5jdGlvbiBLZShhLGIpe3JldHVyblwidGV4dGFyZWFcIj09PWF8fFwib3B0aW9uXCI9PT1hfHxcIm5vc2NyaXB0XCI9PT1hfHxcInN0cmluZ1wiPT09dHlwZW9mIGIuY2hpbGRyZW58fFwibnVtYmVyXCI9PT10eXBlb2YgYi5jaGlsZHJlbnx8XCJvYmplY3RcIj09PXR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZudWxsIT09Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmbnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTC5fX2h0bWx9dmFyIExlPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBzZXRUaW1lb3V0P3NldFRpbWVvdXQ6dm9pZCAwLE1lPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBjbGVhclRpbWVvdXQ/Y2xlYXJUaW1lb3V0OnZvaWQgMDtcbmZ1bmN0aW9uIE5lKGEpe2Zvcig7bnVsbCE9YTthPWEubmV4dFNpYmxpbmcpe3ZhciBiPWEubm9kZVR5cGU7aWYoMT09PWJ8fDM9PT1iKWJyZWFrfXJldHVybiBhfW5ldyBTZXQ7dmFyIE9lPVtdLFBlPS0xO2Z1bmN0aW9uIEgoYSl7MD5QZXx8KGEuY3VycmVudD1PZVtQZV0sT2VbUGVdPW51bGwsUGUtLSl9ZnVuY3Rpb24gSihhLGIpe1BlKys7T2VbUGVdPWEuY3VycmVudDthLmN1cnJlbnQ9Yn12YXIgUWU9e30sTD17Y3VycmVudDpRZX0sTT17Y3VycmVudDohMX0sUmU9UWU7XG5mdW5jdGlvbiBTZShhLGIpe3ZhciBjPWEudHlwZS5jb250ZXh0VHlwZXM7aWYoIWMpcmV0dXJuIFFlO3ZhciBkPWEuc3RhdGVOb2RlO2lmKGQmJmQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD09PWIpcmV0dXJuIGQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ7dmFyIGU9e30sZjtmb3IoZiBpbiBjKWVbZl09YltmXTtkJiYoYT1hLnN0YXRlTm9kZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9YixhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0PWUpO3JldHVybiBlfWZ1bmN0aW9uIE4oYSl7YT1hLmNoaWxkQ29udGV4dFR5cGVzO3JldHVybiBudWxsIT09YSYmdm9pZCAwIT09YX1mdW5jdGlvbiBUZShhKXtIKE0sYSk7SChMLGEpfWZ1bmN0aW9uIFVlKGEpe0goTSxhKTtIKEwsYSl9XG5mdW5jdGlvbiBWZShhLGIsYyl7aWYoTC5jdXJyZW50IT09UWUpdGhyb3cgdChFcnJvcigxNjgpKTtKKEwsYixhKTtKKE0sYyxhKX1mdW5jdGlvbiBXZShhLGIsYyl7dmFyIGQ9YS5zdGF0ZU5vZGU7YT1iLmNoaWxkQ29udGV4dFR5cGVzO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBkLmdldENoaWxkQ29udGV4dClyZXR1cm4gYztkPWQuZ2V0Q2hpbGRDb250ZXh0KCk7Zm9yKHZhciBlIGluIGQpaWYoIShlIGluIGEpKXRocm93IHQoRXJyb3IoMTA4KSxvYyhiKXx8XCJVbmtub3duXCIsZSk7cmV0dXJuIG0oe30sYyxkKX1mdW5jdGlvbiBYZShhKXt2YXIgYj1hLnN0YXRlTm9kZTtiPWImJmIuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHR8fFFlO1JlPUwuY3VycmVudDtKKEwsYixhKTtKKE0sTS5jdXJyZW50LGEpO3JldHVybiEwfVxuZnVuY3Rpb24gWWUoYSxiLGMpe3ZhciBkPWEuc3RhdGVOb2RlO2lmKCFkKXRocm93IHQoRXJyb3IoMTY5KSk7Yz8oYj1XZShhLGIsUmUpLGQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQ9YixIKE0sYSksSChMLGEpLEooTCxiLGEpKTpIKE0sYSk7SihNLGMsYSl9XG52YXIgWmU9cS51bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHksJGU9cS51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrLGFmPXEudW5zdGFibGVfY2FuY2VsQ2FsbGJhY2ssYmY9cS51bnN0YWJsZV9zaG91bGRZaWVsZCxjZj1xLnVuc3RhYmxlX3JlcXVlc3RQYWludCxkZj1xLnVuc3RhYmxlX25vdyxlZj1xLnVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsLGZmPXEudW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHksaGY9cS51bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eSxqZj1xLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5LGtmPXEudW5zdGFibGVfTG93UHJpb3JpdHksbGY9cS51bnN0YWJsZV9JZGxlUHJpb3JpdHksbWY9e30sbmY9dm9pZCAwIT09Y2Y/Y2Y6ZnVuY3Rpb24oKXt9LG9mPW51bGwscGY9bnVsbCxxZj0hMSxyZj1kZigpLHNmPTFFND5yZj9kZjpmdW5jdGlvbigpe3JldHVybiBkZigpLXJmfTtcbmZ1bmN0aW9uIHRmKCl7c3dpdGNoKGVmKCkpe2Nhc2UgZmY6cmV0dXJuIDk5O2Nhc2UgaGY6cmV0dXJuIDk4O2Nhc2UgamY6cmV0dXJuIDk3O2Nhc2Uga2Y6cmV0dXJuIDk2O2Nhc2UgbGY6cmV0dXJuIDk1O2RlZmF1bHQ6dGhyb3cgdChFcnJvcigzMzIpKTt9fWZ1bmN0aW9uIHVmKGEpe3N3aXRjaChhKXtjYXNlIDk5OnJldHVybiBmZjtjYXNlIDk4OnJldHVybiBoZjtjYXNlIDk3OnJldHVybiBqZjtjYXNlIDk2OnJldHVybiBrZjtjYXNlIDk1OnJldHVybiBsZjtkZWZhdWx0OnRocm93IHQoRXJyb3IoMzMyKSk7fX1mdW5jdGlvbiB2ZihhLGIpe2E9dWYoYSk7cmV0dXJuIFplKGEsYil9ZnVuY3Rpb24gd2YoYSxiLGMpe2E9dWYoYSk7cmV0dXJuICRlKGEsYixjKX1mdW5jdGlvbiB4ZihhKXtudWxsPT09b2Y/KG9mPVthXSxwZj0kZShmZix5ZikpOm9mLnB1c2goYSk7cmV0dXJuIG1mfWZ1bmN0aW9uIE8oKXtudWxsIT09cGYmJmFmKHBmKTt5ZigpfVxuZnVuY3Rpb24geWYoKXtpZighcWYmJm51bGwhPT1vZil7cWY9ITA7dmFyIGE9MDt0cnl7dmFyIGI9b2Y7dmYoOTksZnVuY3Rpb24oKXtmb3IoO2E8Yi5sZW5ndGg7YSsrKXt2YXIgYz1iW2FdO2RvIGM9YyghMCk7d2hpbGUobnVsbCE9PWMpfX0pO29mPW51bGx9Y2F0Y2goYyl7dGhyb3cgbnVsbCE9PW9mJiYob2Y9b2Yuc2xpY2UoYSsxKSksJGUoZmYsTyksYzt9ZmluYWxseXtxZj0hMX19fWZ1bmN0aW9uIHpmKGEsYil7aWYoMTA3Mzc0MTgyMz09PWIpcmV0dXJuIDk5O2lmKDE9PT1iKXJldHVybiA5NTthPTEwKigxMDczNzQxODIxLWIpLTEwKigxMDczNzQxODIxLWEpO3JldHVybiAwPj1hPzk5OjI1MD49YT85ODo1MjUwPj1hPzk3Ojk1fWZ1bmN0aW9uIEFmKGEsYil7aWYoYSYmYS5kZWZhdWx0UHJvcHMpe2I9bSh7fSxiKTthPWEuZGVmYXVsdFByb3BzO2Zvcih2YXIgYyBpbiBhKXZvaWQgMD09PWJbY10mJihiW2NdPWFbY10pfXJldHVybiBifVxuZnVuY3Rpb24gQmYoYSl7dmFyIGI9YS5fcmVzdWx0O3N3aXRjaChhLl9zdGF0dXMpe2Nhc2UgMTpyZXR1cm4gYjtjYXNlIDI6dGhyb3cgYjtjYXNlIDA6dGhyb3cgYjtkZWZhdWx0OmEuX3N0YXR1cz0wO2I9YS5fY3RvcjtiPWIoKTtiLnRoZW4oZnVuY3Rpb24oYil7MD09PWEuX3N0YXR1cyYmKGI9Yi5kZWZhdWx0LGEuX3N0YXR1cz0xLGEuX3Jlc3VsdD1iKX0sZnVuY3Rpb24oYil7MD09PWEuX3N0YXR1cyYmKGEuX3N0YXR1cz0yLGEuX3Jlc3VsdD1iKX0pO3N3aXRjaChhLl9zdGF0dXMpe2Nhc2UgMTpyZXR1cm4gYS5fcmVzdWx0O2Nhc2UgMjp0aHJvdyBhLl9yZXN1bHQ7fWEuX3Jlc3VsdD1iO3Rocm93IGI7fX12YXIgQ2Y9e2N1cnJlbnQ6bnVsbH0sRGY9bnVsbCxFZj1udWxsLEZmPW51bGw7ZnVuY3Rpb24gR2YoKXtGZj1FZj1EZj1udWxsfVxuZnVuY3Rpb24gSGYoYSxiKXt2YXIgYz1hLnR5cGUuX2NvbnRleHQ7SihDZixjLl9jdXJyZW50VmFsdWUsYSk7Yy5fY3VycmVudFZhbHVlPWJ9ZnVuY3Rpb24gSWYoYSl7dmFyIGI9Q2YuY3VycmVudDtIKENmLGEpO2EudHlwZS5fY29udGV4dC5fY3VycmVudFZhbHVlPWJ9ZnVuY3Rpb24gSmYoYSxiKXtmb3IoO251bGwhPT1hOyl7dmFyIGM9YS5hbHRlcm5hdGU7aWYoYS5jaGlsZEV4cGlyYXRpb25UaW1lPGIpYS5jaGlsZEV4cGlyYXRpb25UaW1lPWIsbnVsbCE9PWMmJmMuY2hpbGRFeHBpcmF0aW9uVGltZTxiJiYoYy5jaGlsZEV4cGlyYXRpb25UaW1lPWIpO2Vsc2UgaWYobnVsbCE9PWMmJmMuY2hpbGRFeHBpcmF0aW9uVGltZTxiKWMuY2hpbGRFeHBpcmF0aW9uVGltZT1iO2Vsc2UgYnJlYWs7YT1hLnJldHVybn19XG5mdW5jdGlvbiBLZihhLGIpe0RmPWE7RmY9RWY9bnVsbDthPWEuZGVwZW5kZW5jaWVzO251bGwhPT1hJiZudWxsIT09YS5maXJzdENvbnRleHQmJihhLmV4cGlyYXRpb25UaW1lPj1iJiYoTGY9ITApLGEuZmlyc3RDb250ZXh0PW51bGwpfWZ1bmN0aW9uIE1mKGEsYil7aWYoRmYhPT1hJiYhMSE9PWImJjAhPT1iKXtpZihcIm51bWJlclwiIT09dHlwZW9mIGJ8fDEwNzM3NDE4MjM9PT1iKUZmPWEsYj0xMDczNzQxODIzO2I9e2NvbnRleHQ6YSxvYnNlcnZlZEJpdHM6YixuZXh0Om51bGx9O2lmKG51bGw9PT1FZil7aWYobnVsbD09PURmKXRocm93IHQoRXJyb3IoMzA4KSk7RWY9YjtEZi5kZXBlbmRlbmNpZXM9e2V4cGlyYXRpb25UaW1lOjAsZmlyc3RDb250ZXh0OmIscmVzcG9uZGVyczpudWxsfX1lbHNlIEVmPUVmLm5leHQ9Yn1yZXR1cm4gYS5fY3VycmVudFZhbHVlfXZhciBOZj0hMTtcbmZ1bmN0aW9uIE9mKGEpe3JldHVybntiYXNlU3RhdGU6YSxmaXJzdFVwZGF0ZTpudWxsLGxhc3RVcGRhdGU6bnVsbCxmaXJzdENhcHR1cmVkVXBkYXRlOm51bGwsbGFzdENhcHR1cmVkVXBkYXRlOm51bGwsZmlyc3RFZmZlY3Q6bnVsbCxsYXN0RWZmZWN0Om51bGwsZmlyc3RDYXB0dXJlZEVmZmVjdDpudWxsLGxhc3RDYXB0dXJlZEVmZmVjdDpudWxsfX1mdW5jdGlvbiBQZihhKXtyZXR1cm57YmFzZVN0YXRlOmEuYmFzZVN0YXRlLGZpcnN0VXBkYXRlOmEuZmlyc3RVcGRhdGUsbGFzdFVwZGF0ZTphLmxhc3RVcGRhdGUsZmlyc3RDYXB0dXJlZFVwZGF0ZTpudWxsLGxhc3RDYXB0dXJlZFVwZGF0ZTpudWxsLGZpcnN0RWZmZWN0Om51bGwsbGFzdEVmZmVjdDpudWxsLGZpcnN0Q2FwdHVyZWRFZmZlY3Q6bnVsbCxsYXN0Q2FwdHVyZWRFZmZlY3Q6bnVsbH19XG5mdW5jdGlvbiBRZihhLGIpe3JldHVybntleHBpcmF0aW9uVGltZTphLHN1c3BlbnNlQ29uZmlnOmIsdGFnOjAscGF5bG9hZDpudWxsLGNhbGxiYWNrOm51bGwsbmV4dDpudWxsLG5leHRFZmZlY3Q6bnVsbH19ZnVuY3Rpb24gUmYoYSxiKXtudWxsPT09YS5sYXN0VXBkYXRlP2EuZmlyc3RVcGRhdGU9YS5sYXN0VXBkYXRlPWI6KGEubGFzdFVwZGF0ZS5uZXh0PWIsYS5sYXN0VXBkYXRlPWIpfVxuZnVuY3Rpb24gU2YoYSxiKXt2YXIgYz1hLmFsdGVybmF0ZTtpZihudWxsPT09Yyl7dmFyIGQ9YS51cGRhdGVRdWV1ZTt2YXIgZT1udWxsO251bGw9PT1kJiYoZD1hLnVwZGF0ZVF1ZXVlPU9mKGEubWVtb2l6ZWRTdGF0ZSkpfWVsc2UgZD1hLnVwZGF0ZVF1ZXVlLGU9Yy51cGRhdGVRdWV1ZSxudWxsPT09ZD9udWxsPT09ZT8oZD1hLnVwZGF0ZVF1ZXVlPU9mKGEubWVtb2l6ZWRTdGF0ZSksZT1jLnVwZGF0ZVF1ZXVlPU9mKGMubWVtb2l6ZWRTdGF0ZSkpOmQ9YS51cGRhdGVRdWV1ZT1QZihlKTpudWxsPT09ZSYmKGU9Yy51cGRhdGVRdWV1ZT1QZihkKSk7bnVsbD09PWV8fGQ9PT1lP1JmKGQsYik6bnVsbD09PWQubGFzdFVwZGF0ZXx8bnVsbD09PWUubGFzdFVwZGF0ZT8oUmYoZCxiKSxSZihlLGIpKTooUmYoZCxiKSxlLmxhc3RVcGRhdGU9Yil9XG5mdW5jdGlvbiBUZihhLGIpe3ZhciBjPWEudXBkYXRlUXVldWU7Yz1udWxsPT09Yz9hLnVwZGF0ZVF1ZXVlPU9mKGEubWVtb2l6ZWRTdGF0ZSk6VWYoYSxjKTtudWxsPT09Yy5sYXN0Q2FwdHVyZWRVcGRhdGU/Yy5maXJzdENhcHR1cmVkVXBkYXRlPWMubGFzdENhcHR1cmVkVXBkYXRlPWI6KGMubGFzdENhcHR1cmVkVXBkYXRlLm5leHQ9YixjLmxhc3RDYXB0dXJlZFVwZGF0ZT1iKX1mdW5jdGlvbiBVZihhLGIpe3ZhciBjPWEuYWx0ZXJuYXRlO251bGwhPT1jJiZiPT09Yy51cGRhdGVRdWV1ZSYmKGI9YS51cGRhdGVRdWV1ZT1QZihiKSk7cmV0dXJuIGJ9XG5mdW5jdGlvbiBWZihhLGIsYyxkLGUsZil7c3dpdGNoKGMudGFnKXtjYXNlIDE6cmV0dXJuIGE9Yy5wYXlsb2FkLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2EuY2FsbChmLGQsZSk6YTtjYXNlIDM6YS5lZmZlY3RUYWc9YS5lZmZlY3RUYWcmLTIwNDl8NjQ7Y2FzZSAwOmE9Yy5wYXlsb2FkO2U9XCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YS5jYWxsKGYsZCxlKTphO2lmKG51bGw9PT1lfHx2b2lkIDA9PT1lKWJyZWFrO3JldHVybiBtKHt9LGQsZSk7Y2FzZSAyOk5mPSEwfXJldHVybiBkfVxuZnVuY3Rpb24gV2YoYSxiLGMsZCxlKXtOZj0hMTtiPVVmKGEsYik7Zm9yKHZhciBmPWIuYmFzZVN0YXRlLGg9bnVsbCxnPTAsaz1iLmZpcnN0VXBkYXRlLGw9ZjtudWxsIT09azspe3ZhciBuPWsuZXhwaXJhdGlvblRpbWU7bjxlPyhudWxsPT09aCYmKGg9ayxmPWwpLGc8biYmKGc9bikpOihYZihuLGsuc3VzcGVuc2VDb25maWcpLGw9VmYoYSxiLGssbCxjLGQpLG51bGwhPT1rLmNhbGxiYWNrJiYoYS5lZmZlY3RUYWd8PTMyLGsubmV4dEVmZmVjdD1udWxsLG51bGw9PT1iLmxhc3RFZmZlY3Q/Yi5maXJzdEVmZmVjdD1iLmxhc3RFZmZlY3Q9azooYi5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9ayxiLmxhc3RFZmZlY3Q9aykpKTtrPWsubmV4dH1uPW51bGw7Zm9yKGs9Yi5maXJzdENhcHR1cmVkVXBkYXRlO251bGwhPT1rOyl7dmFyIHo9ay5leHBpcmF0aW9uVGltZTt6PGU/KG51bGw9PT1uJiYobj1rLG51bGw9PT1oJiYoZj1sKSksZzx6JiYoZz16KSk6KGw9VmYoYSxiLGssbCxjLGQpLG51bGwhPT1cbmsuY2FsbGJhY2smJihhLmVmZmVjdFRhZ3w9MzIsay5uZXh0RWZmZWN0PW51bGwsbnVsbD09PWIubGFzdENhcHR1cmVkRWZmZWN0P2IuZmlyc3RDYXB0dXJlZEVmZmVjdD1iLmxhc3RDYXB0dXJlZEVmZmVjdD1rOihiLmxhc3RDYXB0dXJlZEVmZmVjdC5uZXh0RWZmZWN0PWssYi5sYXN0Q2FwdHVyZWRFZmZlY3Q9aykpKTtrPWsubmV4dH1udWxsPT09aCYmKGIubGFzdFVwZGF0ZT1udWxsKTtudWxsPT09bj9iLmxhc3RDYXB0dXJlZFVwZGF0ZT1udWxsOmEuZWZmZWN0VGFnfD0zMjtudWxsPT09aCYmbnVsbD09PW4mJihmPWwpO2IuYmFzZVN0YXRlPWY7Yi5maXJzdFVwZGF0ZT1oO2IuZmlyc3RDYXB0dXJlZFVwZGF0ZT1uO2EuZXhwaXJhdGlvblRpbWU9ZzthLm1lbW9pemVkU3RhdGU9bH1cbmZ1bmN0aW9uIFlmKGEsYixjKXtudWxsIT09Yi5maXJzdENhcHR1cmVkVXBkYXRlJiYobnVsbCE9PWIubGFzdFVwZGF0ZSYmKGIubGFzdFVwZGF0ZS5uZXh0PWIuZmlyc3RDYXB0dXJlZFVwZGF0ZSxiLmxhc3RVcGRhdGU9Yi5sYXN0Q2FwdHVyZWRVcGRhdGUpLGIuZmlyc3RDYXB0dXJlZFVwZGF0ZT1iLmxhc3RDYXB0dXJlZFVwZGF0ZT1udWxsKTtaZihiLmZpcnN0RWZmZWN0LGMpO2IuZmlyc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0PW51bGw7WmYoYi5maXJzdENhcHR1cmVkRWZmZWN0LGMpO2IuZmlyc3RDYXB0dXJlZEVmZmVjdD1iLmxhc3RDYXB0dXJlZEVmZmVjdD1udWxsfWZ1bmN0aW9uIFpmKGEsYil7Zm9yKDtudWxsIT09YTspe3ZhciBjPWEuY2FsbGJhY2s7aWYobnVsbCE9PWMpe2EuY2FsbGJhY2s9bnVsbDt2YXIgZD1iO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBjKXRocm93IHQoRXJyb3IoMTkxKSxjKTtjLmNhbGwoZCl9YT1hLm5leHRFZmZlY3R9fVxudmFyICRmPVhiLlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnLGFnPShuZXcgYWEuQ29tcG9uZW50KS5yZWZzO2Z1bmN0aW9uIGJnKGEsYixjLGQpe2I9YS5tZW1vaXplZFN0YXRlO2M9YyhkLGIpO2M9bnVsbD09PWN8fHZvaWQgMD09PWM/YjptKHt9LGIsYyk7YS5tZW1vaXplZFN0YXRlPWM7ZD1hLnVwZGF0ZVF1ZXVlO251bGwhPT1kJiYwPT09YS5leHBpcmF0aW9uVGltZSYmKGQuYmFzZVN0YXRlPWMpfVxudmFyIGZnPXtpc01vdW50ZWQ6ZnVuY3Rpb24oYSl7cmV0dXJuKGE9YS5fcmVhY3RJbnRlcm5hbEZpYmVyKT8yPT09bGQoYSk6ITF9LGVucXVldWVTZXRTdGF0ZTpmdW5jdGlvbihhLGIsYyl7YT1hLl9yZWFjdEludGVybmFsRmliZXI7dmFyIGQ9Y2coKSxlPSRmLnN1c3BlbnNlO2Q9ZGcoZCxhLGUpO2U9UWYoZCxlKTtlLnBheWxvYWQ9Yjt2b2lkIDAhPT1jJiZudWxsIT09YyYmKGUuY2FsbGJhY2s9Yyk7U2YoYSxlKTtlZyhhLGQpfSxlbnF1ZXVlUmVwbGFjZVN0YXRlOmZ1bmN0aW9uKGEsYixjKXthPWEuX3JlYWN0SW50ZXJuYWxGaWJlcjt2YXIgZD1jZygpLGU9JGYuc3VzcGVuc2U7ZD1kZyhkLGEsZSk7ZT1RZihkLGUpO2UudGFnPTE7ZS5wYXlsb2FkPWI7dm9pZCAwIT09YyYmbnVsbCE9PWMmJihlLmNhbGxiYWNrPWMpO1NmKGEsZSk7ZWcoYSxkKX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKGEsYil7YT1hLl9yZWFjdEludGVybmFsRmliZXI7dmFyIGM9Y2coKSxkPSRmLnN1c3BlbnNlO1xuYz1kZyhjLGEsZCk7ZD1RZihjLGQpO2QudGFnPTI7dm9pZCAwIT09YiYmbnVsbCE9PWImJihkLmNhbGxiYWNrPWIpO1NmKGEsZCk7ZWcoYSxjKX19O2Z1bmN0aW9uIGdnKGEsYixjLGQsZSxmLGgpe2E9YS5zdGF0ZU5vZGU7cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGEuc2hvdWxkQ29tcG9uZW50VXBkYXRlP2Euc2hvdWxkQ29tcG9uZW50VXBkYXRlKGQsZixoKTpiLnByb3RvdHlwZSYmYi5wcm90b3R5cGUuaXNQdXJlUmVhY3RDb21wb25lbnQ/IWpkKGMsZCl8fCFqZChlLGYpOiEwfVxuZnVuY3Rpb24gaGcoYSxiLGMpe3ZhciBkPSExLGU9UWU7dmFyIGY9Yi5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mP2Y9TWYoZik6KGU9TihiKT9SZTpMLmN1cnJlbnQsZD1iLmNvbnRleHRUeXBlcyxmPShkPW51bGwhPT1kJiZ2b2lkIDAhPT1kKT9TZShhLGUpOlFlKTtiPW5ldyBiKGMsZik7YS5tZW1vaXplZFN0YXRlPW51bGwhPT1iLnN0YXRlJiZ2b2lkIDAhPT1iLnN0YXRlP2Iuc3RhdGU6bnVsbDtiLnVwZGF0ZXI9Zmc7YS5zdGF0ZU5vZGU9YjtiLl9yZWFjdEludGVybmFsRmliZXI9YTtkJiYoYT1hLnN0YXRlTm9kZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9ZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0PWYpO3JldHVybiBifVxuZnVuY3Rpb24gaWcoYSxiLGMsZCl7YT1iLnN0YXRlO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJmIuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhjLGQpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZiLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKGMsZCk7Yi5zdGF0ZSE9PWEmJmZnLmVucXVldWVSZXBsYWNlU3RhdGUoYixiLnN0YXRlLG51bGwpfVxuZnVuY3Rpb24gamcoYSxiLGMsZCl7dmFyIGU9YS5zdGF0ZU5vZGU7ZS5wcm9wcz1jO2Uuc3RhdGU9YS5tZW1vaXplZFN0YXRlO2UucmVmcz1hZzt2YXIgZj1iLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWY/ZS5jb250ZXh0PU1mKGYpOihmPU4oYik/UmU6TC5jdXJyZW50LGUuY29udGV4dD1TZShhLGYpKTtmPWEudXBkYXRlUXVldWU7bnVsbCE9PWYmJihXZihhLGYsYyxlLGQpLGUuc3RhdGU9YS5tZW1vaXplZFN0YXRlKTtmPWIuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBmJiYoYmcoYSxiLGYsYyksZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGUpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wc3x8XCJmdW5jdGlvblwiPT09dHlwZW9mIGUuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJlwiZnVuY3Rpb25cIiE9PVxudHlwZW9mIGUuY29tcG9uZW50V2lsbE1vdW50fHwoYj1lLnN0YXRlLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmNvbXBvbmVudFdpbGxNb3VudCYmZS5jb21wb25lbnRXaWxsTW91bnQoKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQoKSxiIT09ZS5zdGF0ZSYmZmcuZW5xdWV1ZVJlcGxhY2VTdGF0ZShlLGUuc3RhdGUsbnVsbCksZj1hLnVwZGF0ZVF1ZXVlLG51bGwhPT1mJiYoV2YoYSxmLGMsZSxkKSxlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSkpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmNvbXBvbmVudERpZE1vdW50JiYoYS5lZmZlY3RUYWd8PTQpfXZhciBrZz1BcnJheS5pc0FycmF5O1xuZnVuY3Rpb24gbGcoYSxiLGMpe2E9Yy5yZWY7aWYobnVsbCE9PWEmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBhJiZcIm9iamVjdFwiIT09dHlwZW9mIGEpe2lmKGMuX293bmVyKXtjPWMuX293bmVyO3ZhciBkPXZvaWQgMDtpZihjKXtpZigxIT09Yy50YWcpdGhyb3cgdChFcnJvcigzMDkpKTtkPWMuc3RhdGVOb2RlfWlmKCFkKXRocm93IHQoRXJyb3IoMTQ3KSxhKTt2YXIgZT1cIlwiK2E7aWYobnVsbCE9PWImJm51bGwhPT1iLnJlZiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGIucmVmJiZiLnJlZi5fc3RyaW5nUmVmPT09ZSlyZXR1cm4gYi5yZWY7Yj1mdW5jdGlvbihhKXt2YXIgYj1kLnJlZnM7Yj09PWFnJiYoYj1kLnJlZnM9e30pO251bGw9PT1hP2RlbGV0ZSBiW2VdOmJbZV09YX07Yi5fc3RyaW5nUmVmPWU7cmV0dXJuIGJ9aWYoXCJzdHJpbmdcIiE9PXR5cGVvZiBhKXRocm93IHQoRXJyb3IoMjg0KSk7aWYoIWMuX293bmVyKXRocm93IHQoRXJyb3IoMjkwKSxhKTt9cmV0dXJuIGF9XG5mdW5jdGlvbiBtZyhhLGIpe2lmKFwidGV4dGFyZWFcIiE9PWEudHlwZSl0aHJvdyB0KEVycm9yKDMxKSxcIltvYmplY3QgT2JqZWN0XVwiPT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGIpP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYikuam9pbihcIiwgXCIpK1wifVwiOmIsXCJcIik7fVxuZnVuY3Rpb24gbmcoYSl7ZnVuY3Rpb24gYihiLGMpe2lmKGEpe3ZhciBkPWIubGFzdEVmZmVjdDtudWxsIT09ZD8oZC5uZXh0RWZmZWN0PWMsYi5sYXN0RWZmZWN0PWMpOmIuZmlyc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0PWM7Yy5uZXh0RWZmZWN0PW51bGw7Yy5lZmZlY3RUYWc9OH19ZnVuY3Rpb24gYyhjLGQpe2lmKCFhKXJldHVybiBudWxsO2Zvcig7bnVsbCE9PWQ7KWIoYyxkKSxkPWQuc2libGluZztyZXR1cm4gbnVsbH1mdW5jdGlvbiBkKGEsYil7Zm9yKGE9bmV3IE1hcDtudWxsIT09YjspbnVsbCE9PWIua2V5P2Euc2V0KGIua2V5LGIpOmEuc2V0KGIuaW5kZXgsYiksYj1iLnNpYmxpbmc7cmV0dXJuIGF9ZnVuY3Rpb24gZShhLGIsYyl7YT1vZyhhLGIsYyk7YS5pbmRleD0wO2Euc2libGluZz1udWxsO3JldHVybiBhfWZ1bmN0aW9uIGYoYixjLGQpe2IuaW5kZXg9ZDtpZighYSlyZXR1cm4gYztkPWIuYWx0ZXJuYXRlO2lmKG51bGwhPT1kKXJldHVybiBkPWQuaW5kZXgsZDxjPyhiLmVmZmVjdFRhZz1cbjIsYyk6ZDtiLmVmZmVjdFRhZz0yO3JldHVybiBjfWZ1bmN0aW9uIGgoYil7YSYmbnVsbD09PWIuYWx0ZXJuYXRlJiYoYi5lZmZlY3RUYWc9Mik7cmV0dXJuIGJ9ZnVuY3Rpb24gZyhhLGIsYyxkKXtpZihudWxsPT09Ynx8NiE9PWIudGFnKXJldHVybiBiPXBnKGMsYS5tb2RlLGQpLGIucmV0dXJuPWEsYjtiPWUoYixjLGQpO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gayhhLGIsYyxkKXtpZihudWxsIT09YiYmYi5lbGVtZW50VHlwZT09PWMudHlwZSlyZXR1cm4gZD1lKGIsYy5wcm9wcyxkKSxkLnJlZj1sZyhhLGIsYyksZC5yZXR1cm49YSxkO2Q9cWcoYy50eXBlLGMua2V5LGMucHJvcHMsbnVsbCxhLm1vZGUsZCk7ZC5yZWY9bGcoYSxiLGMpO2QucmV0dXJuPWE7cmV0dXJuIGR9ZnVuY3Rpb24gbChhLGIsYyxkKXtpZihudWxsPT09Ynx8NCE9PWIudGFnfHxiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvIT09Yy5jb250YWluZXJJbmZvfHxiLnN0YXRlTm9kZS5pbXBsZW1lbnRhdGlvbiE9PVxuYy5pbXBsZW1lbnRhdGlvbilyZXR1cm4gYj1yZyhjLGEubW9kZSxkKSxiLnJldHVybj1hLGI7Yj1lKGIsYy5jaGlsZHJlbnx8W10sZCk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBuKGEsYixjLGQsZil7aWYobnVsbD09PWJ8fDchPT1iLnRhZylyZXR1cm4gYj1zZyhjLGEubW9kZSxkLGYpLGIucmV0dXJuPWEsYjtiPWUoYixjLGQpO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24geihhLGIsYyl7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBifHxcIm51bWJlclwiPT09dHlwZW9mIGIpcmV0dXJuIGI9cGcoXCJcIitiLGEubW9kZSxjKSxiLnJldHVybj1hLGI7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBiJiZudWxsIT09Yil7c3dpdGNoKGIuJCR0eXBlb2Ype2Nhc2UgWmI6cmV0dXJuIGM9cWcoYi50eXBlLGIua2V5LGIucHJvcHMsbnVsbCxhLm1vZGUsYyksYy5yZWY9bGcoYSxudWxsLGIpLGMucmV0dXJuPWEsYztjYXNlICRiOnJldHVybiBiPXJnKGIsYS5tb2RlLGMpLGIucmV0dXJuPWEsYn1pZihrZyhiKXx8XG5tYyhiKSlyZXR1cm4gYj1zZyhiLGEubW9kZSxjLG51bGwpLGIucmV0dXJuPWEsYjttZyhhLGIpfXJldHVybiBudWxsfWZ1bmN0aW9uIHgoYSxiLGMsZCl7dmFyIGU9bnVsbCE9PWI/Yi5rZXk6bnVsbDtpZihcInN0cmluZ1wiPT09dHlwZW9mIGN8fFwibnVtYmVyXCI9PT10eXBlb2YgYylyZXR1cm4gbnVsbCE9PWU/bnVsbDpnKGEsYixcIlwiK2MsZCk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBjJiZudWxsIT09Yyl7c3dpdGNoKGMuJCR0eXBlb2Ype2Nhc2UgWmI6cmV0dXJuIGMua2V5PT09ZT9jLnR5cGU9PT1hYz9uKGEsYixjLnByb3BzLmNoaWxkcmVuLGQsZSk6ayhhLGIsYyxkKTpudWxsO2Nhc2UgJGI6cmV0dXJuIGMua2V5PT09ZT9sKGEsYixjLGQpOm51bGx9aWYoa2coYyl8fG1jKGMpKXJldHVybiBudWxsIT09ZT9udWxsOm4oYSxiLGMsZCxudWxsKTttZyhhLGMpfXJldHVybiBudWxsfWZ1bmN0aW9uIHYoYSxiLGMsZCxlKXtpZihcInN0cmluZ1wiPT09dHlwZW9mIGR8fFwibnVtYmVyXCI9PT10eXBlb2YgZClyZXR1cm4gYT1cbmEuZ2V0KGMpfHxudWxsLGcoYixhLFwiXCIrZCxlKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGQmJm51bGwhPT1kKXtzd2l0Y2goZC4kJHR5cGVvZil7Y2FzZSBaYjpyZXR1cm4gYT1hLmdldChudWxsPT09ZC5rZXk/YzpkLmtleSl8fG51bGwsZC50eXBlPT09YWM/bihiLGEsZC5wcm9wcy5jaGlsZHJlbixlLGQua2V5KTprKGIsYSxkLGUpO2Nhc2UgJGI6cmV0dXJuIGE9YS5nZXQobnVsbD09PWQua2V5P2M6ZC5rZXkpfHxudWxsLGwoYixhLGQsZSl9aWYoa2coZCl8fG1jKGQpKXJldHVybiBhPWEuZ2V0KGMpfHxudWxsLG4oYixhLGQsZSxudWxsKTttZyhiLGQpfXJldHVybiBudWxsfWZ1bmN0aW9uIHJiKGUsaCxnLGspe2Zvcih2YXIgbD1udWxsLHU9bnVsbCxuPWgsdz1oPTAsQz1udWxsO251bGwhPT1uJiZ3PGcubGVuZ3RoO3crKyl7bi5pbmRleD53PyhDPW4sbj1udWxsKTpDPW4uc2libGluZzt2YXIgcD14KGUsbixnW3ddLGspO2lmKG51bGw9PT1wKXtudWxsPT09biYmKG49Qyk7YnJlYWt9YSYmXG5uJiZudWxsPT09cC5hbHRlcm5hdGUmJmIoZSxuKTtoPWYocCxoLHcpO251bGw9PT11P2w9cDp1LnNpYmxpbmc9cDt1PXA7bj1DfWlmKHc9PT1nLmxlbmd0aClyZXR1cm4gYyhlLG4pLGw7aWYobnVsbD09PW4pe2Zvcig7dzxnLmxlbmd0aDt3Kyspbj16KGUsZ1t3XSxrKSxudWxsIT09biYmKGg9ZihuLGgsdyksbnVsbD09PXU/bD1uOnUuc2libGluZz1uLHU9bik7cmV0dXJuIGx9Zm9yKG49ZChlLG4pO3c8Zy5sZW5ndGg7dysrKUM9dihuLGUsdyxnW3ddLGspLG51bGwhPT1DJiYoYSYmbnVsbCE9PUMuYWx0ZXJuYXRlJiZuLmRlbGV0ZShudWxsPT09Qy5rZXk/dzpDLmtleSksaD1mKEMsaCx3KSxudWxsPT09dT9sPUM6dS5zaWJsaW5nPUMsdT1DKTthJiZuLmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGIoZSxhKX0pO3JldHVybiBsfWZ1bmN0aW9uIEJlKGUsaCxnLGspe3ZhciBsPW1jKGcpO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBsKXRocm93IHQoRXJyb3IoMTUwKSk7Zz1sLmNhbGwoZyk7XG5pZihudWxsPT1nKXRocm93IHQoRXJyb3IoMTUxKSk7Zm9yKHZhciBuPWw9bnVsbCx1PWgsdz1oPTAsQz1udWxsLHA9Zy5uZXh0KCk7bnVsbCE9PXUmJiFwLmRvbmU7dysrLHA9Zy5uZXh0KCkpe3UuaW5kZXg+dz8oQz11LHU9bnVsbCk6Qz11LnNpYmxpbmc7dmFyIHI9eChlLHUscC52YWx1ZSxrKTtpZihudWxsPT09cil7bnVsbD09PXUmJih1PUMpO2JyZWFrfWEmJnUmJm51bGw9PT1yLmFsdGVybmF0ZSYmYihlLHUpO2g9ZihyLGgsdyk7bnVsbD09PW4/bD1yOm4uc2libGluZz1yO249cjt1PUN9aWYocC5kb25lKXJldHVybiBjKGUsdSksbDtpZihudWxsPT09dSl7Zm9yKDshcC5kb25lO3crKyxwPWcubmV4dCgpKXA9eihlLHAudmFsdWUsayksbnVsbCE9PXAmJihoPWYocCxoLHcpLG51bGw9PT1uP2w9cDpuLnNpYmxpbmc9cCxuPXApO3JldHVybiBsfWZvcih1PWQoZSx1KTshcC5kb25lO3crKyxwPWcubmV4dCgpKXA9dih1LGUsdyxwLnZhbHVlLGspLG51bGwhPT1wJiYoYSYmbnVsbCE9PVxucC5hbHRlcm5hdGUmJnUuZGVsZXRlKG51bGw9PT1wLmtleT93OnAua2V5KSxoPWYocCxoLHcpLG51bGw9PT1uP2w9cDpuLnNpYmxpbmc9cCxuPXApO2EmJnUuZm9yRWFjaChmdW5jdGlvbihhKXtyZXR1cm4gYihlLGEpfSk7cmV0dXJuIGx9cmV0dXJuIGZ1bmN0aW9uKGEsZCxmLGcpe3ZhciBrPVwib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWYmJmYudHlwZT09PWFjJiZudWxsPT09Zi5rZXk7ayYmKGY9Zi5wcm9wcy5jaGlsZHJlbik7dmFyIGw9XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09ZjtpZihsKXN3aXRjaChmLiQkdHlwZW9mKXtjYXNlIFpiOmE6e2w9Zi5rZXk7Zm9yKGs9ZDtudWxsIT09azspe2lmKGsua2V5PT09bCl7aWYoNz09PWsudGFnP2YudHlwZT09PWFjOmsuZWxlbWVudFR5cGU9PT1mLnR5cGUpe2MoYSxrLnNpYmxpbmcpO2Q9ZShrLGYudHlwZT09PWFjP2YucHJvcHMuY2hpbGRyZW46Zi5wcm9wcyxnKTtkLnJlZj1sZyhhLGssZik7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX1jKGEsXG5rKTticmVha31lbHNlIGIoYSxrKTtrPWsuc2libGluZ31mLnR5cGU9PT1hYz8oZD1zZyhmLnByb3BzLmNoaWxkcmVuLGEubW9kZSxnLGYua2V5KSxkLnJldHVybj1hLGE9ZCk6KGc9cWcoZi50eXBlLGYua2V5LGYucHJvcHMsbnVsbCxhLm1vZGUsZyksZy5yZWY9bGcoYSxkLGYpLGcucmV0dXJuPWEsYT1nKX1yZXR1cm4gaChhKTtjYXNlICRiOmE6e2ZvcihrPWYua2V5O251bGwhPT1kOyl7aWYoZC5rZXk9PT1rKXtpZig0PT09ZC50YWcmJmQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm89PT1mLmNvbnRhaW5lckluZm8mJmQuc3RhdGVOb2RlLmltcGxlbWVudGF0aW9uPT09Zi5pbXBsZW1lbnRhdGlvbil7YyhhLGQuc2libGluZyk7ZD1lKGQsZi5jaGlsZHJlbnx8W10sZyk7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX1jKGEsZCk7YnJlYWt9ZWxzZSBiKGEsZCk7ZD1kLnNpYmxpbmd9ZD1yZyhmLGEubW9kZSxnKTtkLnJldHVybj1hO2E9ZH1yZXR1cm4gaChhKX1pZihcInN0cmluZ1wiPT09dHlwZW9mIGZ8fFxuXCJudW1iZXJcIj09PXR5cGVvZiBmKXJldHVybiBmPVwiXCIrZixudWxsIT09ZCYmNj09PWQudGFnPyhjKGEsZC5zaWJsaW5nKSxkPWUoZCxmLGcpLGQucmV0dXJuPWEsYT1kKTooYyhhLGQpLGQ9cGcoZixhLm1vZGUsZyksZC5yZXR1cm49YSxhPWQpLGgoYSk7aWYoa2coZikpcmV0dXJuIHJiKGEsZCxmLGcpO2lmKG1jKGYpKXJldHVybiBCZShhLGQsZixnKTtsJiZtZyhhLGYpO2lmKFwidW5kZWZpbmVkXCI9PT10eXBlb2YgZiYmIWspc3dpdGNoKGEudGFnKXtjYXNlIDE6Y2FzZSAwOnRocm93IGE9YS50eXBlLHQoRXJyb3IoMTUyKSxhLmRpc3BsYXlOYW1lfHxhLm5hbWV8fFwiQ29tcG9uZW50XCIpO31yZXR1cm4gYyhhLGQpfX12YXIgdGc9bmcoITApLHVnPW5nKCExKSx2Zz17fSx3Zz17Y3VycmVudDp2Z30seGc9e2N1cnJlbnQ6dmd9LHlnPXtjdXJyZW50OnZnfTtmdW5jdGlvbiB6ZyhhKXtpZihhPT09dmcpdGhyb3cgdChFcnJvcigxNzQpKTtyZXR1cm4gYX1cbmZ1bmN0aW9uIEFnKGEsYil7Sih5ZyxiLGEpO0ooeGcsYSxhKTtKKHdnLHZnLGEpO3ZhciBjPWIubm9kZVR5cGU7c3dpdGNoKGMpe2Nhc2UgOTpjYXNlIDExOmI9KGI9Yi5kb2N1bWVudEVsZW1lbnQpP2IubmFtZXNwYWNlVVJJOnRlKG51bGwsXCJcIik7YnJlYWs7ZGVmYXVsdDpjPTg9PT1jP2IucGFyZW50Tm9kZTpiLGI9Yy5uYW1lc3BhY2VVUkl8fG51bGwsYz1jLnRhZ05hbWUsYj10ZShiLGMpfUgod2csYSk7Sih3ZyxiLGEpfWZ1bmN0aW9uIEJnKGEpe0god2csYSk7SCh4ZyxhKTtIKHlnLGEpfWZ1bmN0aW9uIENnKGEpe3pnKHlnLmN1cnJlbnQpO3ZhciBiPXpnKHdnLmN1cnJlbnQpO3ZhciBjPXRlKGIsYS50eXBlKTtiIT09YyYmKEooeGcsYSxhKSxKKHdnLGMsYSkpfWZ1bmN0aW9uIERnKGEpe3hnLmN1cnJlbnQ9PT1hJiYoSCh3ZyxhKSxIKHhnLGEpKX12YXIgRWc9MSxGZz0xLEdnPTIsUD17Y3VycmVudDowfTtcbmZ1bmN0aW9uIEhnKGEpe2Zvcih2YXIgYj1hO251bGwhPT1iOyl7aWYoMTM9PT1iLnRhZyl7aWYobnVsbCE9PWIubWVtb2l6ZWRTdGF0ZSlyZXR1cm4gYn1lbHNlIGlmKDE5PT09Yi50YWcmJnZvaWQgMCE9PWIubWVtb2l6ZWRQcm9wcy5yZXZlYWxPcmRlcil7aWYoMCE9PShiLmVmZmVjdFRhZyY2NCkpcmV0dXJuIGJ9ZWxzZSBpZihudWxsIT09Yi5jaGlsZCl7Yi5jaGlsZC5yZXR1cm49YjtiPWIuY2hpbGQ7Y29udGludWV9aWYoYj09PWEpYnJlYWs7Zm9yKDtudWxsPT09Yi5zaWJsaW5nOyl7aWYobnVsbD09PWIucmV0dXJufHxiLnJldHVybj09PWEpcmV0dXJuIG51bGw7Yj1iLnJldHVybn1iLnNpYmxpbmcucmV0dXJuPWIucmV0dXJuO2I9Yi5zaWJsaW5nfXJldHVybiBudWxsfVxudmFyIElnPTAsSmc9MixLZz00LExnPTgsTWc9MTYsTmc9MzIsT2c9NjQsUGc9MTI4LFFnPVhiLlJlYWN0Q3VycmVudERpc3BhdGNoZXIsUmc9MCxTZz1udWxsLFE9bnVsbCxUZz1udWxsLFVnPW51bGwsUj1udWxsLFZnPW51bGwsV2c9MCxYZz1udWxsLFlnPTAsWmc9ITEsJGc9bnVsbCxhaD0wO2Z1bmN0aW9uIGJoKCl7dGhyb3cgdChFcnJvcigzMjEpKTt9ZnVuY3Rpb24gY2goYSxiKXtpZihudWxsPT09YilyZXR1cm4hMTtmb3IodmFyIGM9MDtjPGIubGVuZ3RoJiZjPGEubGVuZ3RoO2MrKylpZighaGQoYVtjXSxiW2NdKSlyZXR1cm4hMTtyZXR1cm4hMH1cbmZ1bmN0aW9uIGRoKGEsYixjLGQsZSxmKXtSZz1mO1NnPWI7VGc9bnVsbCE9PWE/YS5tZW1vaXplZFN0YXRlOm51bGw7UWcuY3VycmVudD1udWxsPT09VGc/ZWg6Zmg7Yj1jKGQsZSk7aWYoWmcpe2RvIFpnPSExLGFoKz0xLFRnPW51bGwhPT1hP2EubWVtb2l6ZWRTdGF0ZTpudWxsLFZnPVVnLFhnPVI9UT1udWxsLFFnLmN1cnJlbnQ9ZmgsYj1jKGQsZSk7d2hpbGUoWmcpOyRnPW51bGw7YWg9MH1RZy5jdXJyZW50PWhoO2E9U2c7YS5tZW1vaXplZFN0YXRlPVVnO2EuZXhwaXJhdGlvblRpbWU9V2c7YS51cGRhdGVRdWV1ZT1YZzthLmVmZmVjdFRhZ3w9WWc7YT1udWxsIT09USYmbnVsbCE9PVEubmV4dDtSZz0wO1ZnPVI9VWc9VGc9UT1TZz1udWxsO1dnPTA7WGc9bnVsbDtZZz0wO2lmKGEpdGhyb3cgdChFcnJvcigzMDApKTtyZXR1cm4gYn1cbmZ1bmN0aW9uIGloKCl7UWcuY3VycmVudD1oaDtSZz0wO1ZnPVI9VWc9VGc9UT1TZz1udWxsO1dnPTA7WGc9bnVsbDtZZz0wO1pnPSExOyRnPW51bGw7YWg9MH1mdW5jdGlvbiBqaCgpe3ZhciBhPXttZW1vaXplZFN0YXRlOm51bGwsYmFzZVN0YXRlOm51bGwscXVldWU6bnVsbCxiYXNlVXBkYXRlOm51bGwsbmV4dDpudWxsfTtudWxsPT09Uj9VZz1SPWE6Uj1SLm5leHQ9YTtyZXR1cm4gUn1mdW5jdGlvbiBraCgpe2lmKG51bGwhPT1WZylSPVZnLFZnPVIubmV4dCxRPVRnLFRnPW51bGwhPT1RP1EubmV4dDpudWxsO2Vsc2V7aWYobnVsbD09PVRnKXRocm93IHQoRXJyb3IoMzEwKSk7UT1UZzt2YXIgYT17bWVtb2l6ZWRTdGF0ZTpRLm1lbW9pemVkU3RhdGUsYmFzZVN0YXRlOlEuYmFzZVN0YXRlLHF1ZXVlOlEucXVldWUsYmFzZVVwZGF0ZTpRLmJhc2VVcGRhdGUsbmV4dDpudWxsfTtSPW51bGw9PT1SP1VnPWE6Ui5uZXh0PWE7VGc9US5uZXh0fXJldHVybiBSfVxuZnVuY3Rpb24gbGgoYSxiKXtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYj9iKGEpOmJ9XG5mdW5jdGlvbiBtaChhKXt2YXIgYj1raCgpLGM9Yi5xdWV1ZTtpZihudWxsPT09Yyl0aHJvdyB0KEVycm9yKDMxMSkpO2MubGFzdFJlbmRlcmVkUmVkdWNlcj1hO2lmKDA8YWgpe3ZhciBkPWMuZGlzcGF0Y2g7aWYobnVsbCE9PSRnKXt2YXIgZT0kZy5nZXQoYyk7aWYodm9pZCAwIT09ZSl7JGcuZGVsZXRlKGMpO3ZhciBmPWIubWVtb2l6ZWRTdGF0ZTtkbyBmPWEoZixlLmFjdGlvbiksZT1lLm5leHQ7d2hpbGUobnVsbCE9PWUpO2hkKGYsYi5tZW1vaXplZFN0YXRlKXx8KExmPSEwKTtiLm1lbW9pemVkU3RhdGU9ZjtiLmJhc2VVcGRhdGU9PT1jLmxhc3QmJihiLmJhc2VTdGF0ZT1mKTtjLmxhc3RSZW5kZXJlZFN0YXRlPWY7cmV0dXJuW2YsZF19fXJldHVybltiLm1lbW9pemVkU3RhdGUsZF19ZD1jLmxhc3Q7dmFyIGg9Yi5iYXNlVXBkYXRlO2Y9Yi5iYXNlU3RhdGU7bnVsbCE9PWg/KG51bGwhPT1kJiYoZC5uZXh0PW51bGwpLGQ9aC5uZXh0KTpkPW51bGwhPT1kP2QubmV4dDpudWxsO2lmKG51bGwhPT1cbmQpe3ZhciBnPWU9bnVsbCxrPWQsbD0hMTtkb3t2YXIgbj1rLmV4cGlyYXRpb25UaW1lO248Umc/KGx8fChsPSEwLGc9aCxlPWYpLG4+V2cmJihXZz1uKSk6KFhmKG4say5zdXNwZW5zZUNvbmZpZyksZj1rLmVhZ2VyUmVkdWNlcj09PWE/ay5lYWdlclN0YXRlOmEoZixrLmFjdGlvbikpO2g9aztrPWsubmV4dH13aGlsZShudWxsIT09ayYmayE9PWQpO2x8fChnPWgsZT1mKTtoZChmLGIubWVtb2l6ZWRTdGF0ZSl8fChMZj0hMCk7Yi5tZW1vaXplZFN0YXRlPWY7Yi5iYXNlVXBkYXRlPWc7Yi5iYXNlU3RhdGU9ZTtjLmxhc3RSZW5kZXJlZFN0YXRlPWZ9cmV0dXJuW2IubWVtb2l6ZWRTdGF0ZSxjLmRpc3BhdGNoXX1cbmZ1bmN0aW9uIG5oKGEsYixjLGQpe2E9e3RhZzphLGNyZWF0ZTpiLGRlc3Ryb3k6YyxkZXBzOmQsbmV4dDpudWxsfTtudWxsPT09WGc/KFhnPXtsYXN0RWZmZWN0Om51bGx9LFhnLmxhc3RFZmZlY3Q9YS5uZXh0PWEpOihiPVhnLmxhc3RFZmZlY3QsbnVsbD09PWI/WGcubGFzdEVmZmVjdD1hLm5leHQ9YTooYz1iLm5leHQsYi5uZXh0PWEsYS5uZXh0PWMsWGcubGFzdEVmZmVjdD1hKSk7cmV0dXJuIGF9ZnVuY3Rpb24gb2goYSxiLGMsZCl7dmFyIGU9amgoKTtZZ3w9YTtlLm1lbW9pemVkU3RhdGU9bmgoYixjLHZvaWQgMCx2b2lkIDA9PT1kP251bGw6ZCl9XG5mdW5jdGlvbiBwaChhLGIsYyxkKXt2YXIgZT1raCgpO2Q9dm9pZCAwPT09ZD9udWxsOmQ7dmFyIGY9dm9pZCAwO2lmKG51bGwhPT1RKXt2YXIgaD1RLm1lbW9pemVkU3RhdGU7Zj1oLmRlc3Ryb3k7aWYobnVsbCE9PWQmJmNoKGQsaC5kZXBzKSl7bmgoSWcsYyxmLGQpO3JldHVybn19WWd8PWE7ZS5tZW1vaXplZFN0YXRlPW5oKGIsYyxmLGQpfWZ1bmN0aW9uIHFoKGEsYil7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGIpcmV0dXJuIGE9YSgpLGIoYSksZnVuY3Rpb24oKXtiKG51bGwpfTtpZihudWxsIT09YiYmdm9pZCAwIT09YilyZXR1cm4gYT1hKCksYi5jdXJyZW50PWEsZnVuY3Rpb24oKXtiLmN1cnJlbnQ9bnVsbH19ZnVuY3Rpb24gcmgoKXt9XG5mdW5jdGlvbiBzaChhLGIsYyl7aWYoISgyNT5haCkpdGhyb3cgdChFcnJvcigzMDEpKTt2YXIgZD1hLmFsdGVybmF0ZTtpZihhPT09U2d8fG51bGwhPT1kJiZkPT09U2cpaWYoWmc9ITAsYT17ZXhwaXJhdGlvblRpbWU6Umcsc3VzcGVuc2VDb25maWc6bnVsbCxhY3Rpb246YyxlYWdlclJlZHVjZXI6bnVsbCxlYWdlclN0YXRlOm51bGwsbmV4dDpudWxsfSxudWxsPT09JGcmJigkZz1uZXcgTWFwKSxjPSRnLmdldChiKSx2b2lkIDA9PT1jKSRnLnNldChiLGEpO2Vsc2V7Zm9yKGI9YztudWxsIT09Yi5uZXh0OyliPWIubmV4dDtiLm5leHQ9YX1lbHNle3ZhciBlPWNnKCksZj0kZi5zdXNwZW5zZTtlPWRnKGUsYSxmKTtmPXtleHBpcmF0aW9uVGltZTplLHN1c3BlbnNlQ29uZmlnOmYsYWN0aW9uOmMsZWFnZXJSZWR1Y2VyOm51bGwsZWFnZXJTdGF0ZTpudWxsLG5leHQ6bnVsbH07dmFyIGg9Yi5sYXN0O2lmKG51bGw9PT1oKWYubmV4dD1mO2Vsc2V7dmFyIGc9aC5uZXh0O251bGwhPT1nJiZcbihmLm5leHQ9Zyk7aC5uZXh0PWZ9Yi5sYXN0PWY7aWYoMD09PWEuZXhwaXJhdGlvblRpbWUmJihudWxsPT09ZHx8MD09PWQuZXhwaXJhdGlvblRpbWUpJiYoZD1iLmxhc3RSZW5kZXJlZFJlZHVjZXIsbnVsbCE9PWQpKXRyeXt2YXIgaz1iLmxhc3RSZW5kZXJlZFN0YXRlLGw9ZChrLGMpO2YuZWFnZXJSZWR1Y2VyPWQ7Zi5lYWdlclN0YXRlPWw7aWYoaGQobCxrKSlyZXR1cm59Y2F0Y2gobil7fWZpbmFsbHl7fWVnKGEsZSl9fVxudmFyIGhoPXtyZWFkQ29udGV4dDpNZix1c2VDYWxsYmFjazpiaCx1c2VDb250ZXh0OmJoLHVzZUVmZmVjdDpiaCx1c2VJbXBlcmF0aXZlSGFuZGxlOmJoLHVzZUxheW91dEVmZmVjdDpiaCx1c2VNZW1vOmJoLHVzZVJlZHVjZXI6YmgsdXNlUmVmOmJoLHVzZVN0YXRlOmJoLHVzZURlYnVnVmFsdWU6YmgsdXNlUmVzcG9uZGVyOmJofSxlaD17cmVhZENvbnRleHQ6TWYsdXNlQ2FsbGJhY2s6ZnVuY3Rpb24oYSxiKXtqaCgpLm1lbW9pemVkU3RhdGU9W2Esdm9pZCAwPT09Yj9udWxsOmJdO3JldHVybiBhfSx1c2VDb250ZXh0Ok1mLHVzZUVmZmVjdDpmdW5jdGlvbihhLGIpe3JldHVybiBvaCg1MTYsUGd8T2csYSxiKX0sdXNlSW1wZXJhdGl2ZUhhbmRsZTpmdW5jdGlvbihhLGIsYyl7Yz1udWxsIT09YyYmdm9pZCAwIT09Yz9jLmNvbmNhdChbYV0pOm51bGw7cmV0dXJuIG9oKDQsS2d8TmcscWguYmluZChudWxsLGIsYSksYyl9LHVzZUxheW91dEVmZmVjdDpmdW5jdGlvbihhLGIpe3JldHVybiBvaCg0LFxuS2d8TmcsYSxiKX0sdXNlTWVtbzpmdW5jdGlvbihhLGIpe3ZhciBjPWpoKCk7Yj12b2lkIDA9PT1iP251bGw6YjthPWEoKTtjLm1lbW9pemVkU3RhdGU9W2EsYl07cmV0dXJuIGF9LHVzZVJlZHVjZXI6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPWpoKCk7Yj12b2lkIDAhPT1jP2MoYik6YjtkLm1lbW9pemVkU3RhdGU9ZC5iYXNlU3RhdGU9YjthPWQucXVldWU9e2xhc3Q6bnVsbCxkaXNwYXRjaDpudWxsLGxhc3RSZW5kZXJlZFJlZHVjZXI6YSxsYXN0UmVuZGVyZWRTdGF0ZTpifTthPWEuZGlzcGF0Y2g9c2guYmluZChudWxsLFNnLGEpO3JldHVybltkLm1lbW9pemVkU3RhdGUsYV19LHVzZVJlZjpmdW5jdGlvbihhKXt2YXIgYj1qaCgpO2E9e2N1cnJlbnQ6YX07cmV0dXJuIGIubWVtb2l6ZWRTdGF0ZT1hfSx1c2VTdGF0ZTpmdW5jdGlvbihhKXt2YXIgYj1qaCgpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBhJiYoYT1hKCkpO2IubWVtb2l6ZWRTdGF0ZT1iLmJhc2VTdGF0ZT1hO2E9Yi5xdWV1ZT1cbntsYXN0Om51bGwsZGlzcGF0Y2g6bnVsbCxsYXN0UmVuZGVyZWRSZWR1Y2VyOmxoLGxhc3RSZW5kZXJlZFN0YXRlOmF9O2E9YS5kaXNwYXRjaD1zaC5iaW5kKG51bGwsU2csYSk7cmV0dXJuW2IubWVtb2l6ZWRTdGF0ZSxhXX0sdXNlRGVidWdWYWx1ZTpyaCx1c2VSZXNwb25kZXI6a2R9LGZoPXtyZWFkQ29udGV4dDpNZix1c2VDYWxsYmFjazpmdW5jdGlvbihhLGIpe3ZhciBjPWtoKCk7Yj12b2lkIDA9PT1iP251bGw6Yjt2YXIgZD1jLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWQmJm51bGwhPT1iJiZjaChiLGRbMV0pKXJldHVybiBkWzBdO2MubWVtb2l6ZWRTdGF0ZT1bYSxiXTtyZXR1cm4gYX0sdXNlQ29udGV4dDpNZix1c2VFZmZlY3Q6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gcGgoNTE2LFBnfE9nLGEsYil9LHVzZUltcGVyYXRpdmVIYW5kbGU6ZnVuY3Rpb24oYSxiLGMpe2M9bnVsbCE9PWMmJnZvaWQgMCE9PWM/Yy5jb25jYXQoW2FdKTpudWxsO3JldHVybiBwaCg0LEtnfE5nLHFoLmJpbmQobnVsbCxcbmIsYSksYyl9LHVzZUxheW91dEVmZmVjdDpmdW5jdGlvbihhLGIpe3JldHVybiBwaCg0LEtnfE5nLGEsYil9LHVzZU1lbW86ZnVuY3Rpb24oYSxiKXt2YXIgYz1raCgpO2I9dm9pZCAwPT09Yj9udWxsOmI7dmFyIGQ9Yy5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1kJiZudWxsIT09YiYmY2goYixkWzFdKSlyZXR1cm4gZFswXTthPWEoKTtjLm1lbW9pemVkU3RhdGU9W2EsYl07cmV0dXJuIGF9LHVzZVJlZHVjZXI6bWgsdXNlUmVmOmZ1bmN0aW9uKCl7cmV0dXJuIGtoKCkubWVtb2l6ZWRTdGF0ZX0sdXNlU3RhdGU6ZnVuY3Rpb24oYSl7cmV0dXJuIG1oKGxoLGEpfSx1c2VEZWJ1Z1ZhbHVlOnJoLHVzZVJlc3BvbmRlcjprZH0sdGg9bnVsbCx1aD1udWxsLHZoPSExO1xuZnVuY3Rpb24gd2goYSxiKXt2YXIgYz14aCg1LG51bGwsbnVsbCwwKTtjLmVsZW1lbnRUeXBlPVwiREVMRVRFRFwiO2MudHlwZT1cIkRFTEVURURcIjtjLnN0YXRlTm9kZT1iO2MucmV0dXJuPWE7Yy5lZmZlY3RUYWc9ODtudWxsIT09YS5sYXN0RWZmZWN0PyhhLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1jLGEubGFzdEVmZmVjdD1jKTphLmZpcnN0RWZmZWN0PWEubGFzdEVmZmVjdD1jfWZ1bmN0aW9uIHloKGEsYil7c3dpdGNoKGEudGFnKXtjYXNlIDU6dmFyIGM9YS50eXBlO2I9MSE9PWIubm9kZVR5cGV8fGMudG9Mb3dlckNhc2UoKSE9PWIubm9kZU5hbWUudG9Mb3dlckNhc2UoKT9udWxsOmI7cmV0dXJuIG51bGwhPT1iPyhhLnN0YXRlTm9kZT1iLCEwKTohMTtjYXNlIDY6cmV0dXJuIGI9XCJcIj09PWEucGVuZGluZ1Byb3BzfHwzIT09Yi5ub2RlVHlwZT9udWxsOmIsbnVsbCE9PWI/KGEuc3RhdGVOb2RlPWIsITApOiExO2Nhc2UgMTM6cmV0dXJuITE7ZGVmYXVsdDpyZXR1cm4hMX19XG5mdW5jdGlvbiB6aChhKXtpZih2aCl7dmFyIGI9dWg7aWYoYil7dmFyIGM9YjtpZigheWgoYSxiKSl7Yj1OZShjLm5leHRTaWJsaW5nKTtpZighYnx8IXloKGEsYikpe2EuZWZmZWN0VGFnfD0yO3ZoPSExO3RoPWE7cmV0dXJufXdoKHRoLGMpfXRoPWE7dWg9TmUoYi5maXJzdENoaWxkKX1lbHNlIGEuZWZmZWN0VGFnfD0yLHZoPSExLHRoPWF9fWZ1bmN0aW9uIEFoKGEpe2ZvcihhPWEucmV0dXJuO251bGwhPT1hJiY1IT09YS50YWcmJjMhPT1hLnRhZyYmMTghPT1hLnRhZzspYT1hLnJldHVybjt0aD1hfVxuZnVuY3Rpb24gQmgoYSl7aWYoYSE9PXRoKXJldHVybiExO2lmKCF2aClyZXR1cm4gQWgoYSksdmg9ITAsITE7dmFyIGI9YS50eXBlO2lmKDUhPT1hLnRhZ3x8XCJoZWFkXCIhPT1iJiZcImJvZHlcIiE9PWImJiFLZShiLGEubWVtb2l6ZWRQcm9wcykpZm9yKGI9dWg7Yjspd2goYSxiKSxiPU5lKGIubmV4dFNpYmxpbmcpO0FoKGEpO3VoPXRoP05lKGEuc3RhdGVOb2RlLm5leHRTaWJsaW5nKTpudWxsO3JldHVybiEwfWZ1bmN0aW9uIENoKCl7dWg9dGg9bnVsbDt2aD0hMX12YXIgRGg9WGIuUmVhY3RDdXJyZW50T3duZXIsTGY9ITE7ZnVuY3Rpb24gUyhhLGIsYyxkKXtiLmNoaWxkPW51bGw9PT1hP3VnKGIsbnVsbCxjLGQpOnRnKGIsYS5jaGlsZCxjLGQpfVxuZnVuY3Rpb24gRWgoYSxiLGMsZCxlKXtjPWMucmVuZGVyO3ZhciBmPWIucmVmO0tmKGIsZSk7ZD1kaChhLGIsYyxkLGYsZSk7aWYobnVsbCE9PWEmJiFMZilyZXR1cm4gYi51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlLGIuZWZmZWN0VGFnJj0tNTE3LGEuZXhwaXJhdGlvblRpbWU8PWUmJihhLmV4cGlyYXRpb25UaW1lPTApLEZoKGEsYixlKTtiLmVmZmVjdFRhZ3w9MTtTKGEsYixkLGUpO3JldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gR2goYSxiLGMsZCxlLGYpe2lmKG51bGw9PT1hKXt2YXIgaD1jLnR5cGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGgmJiFIaChoKSYmdm9pZCAwPT09aC5kZWZhdWx0UHJvcHMmJm51bGw9PT1jLmNvbXBhcmUmJnZvaWQgMD09PWMuZGVmYXVsdFByb3BzKXJldHVybiBiLnRhZz0xNSxiLnR5cGU9aCxJaChhLGIsaCxkLGUsZik7YT1xZyhjLnR5cGUsbnVsbCxkLG51bGwsYi5tb2RlLGYpO2EucmVmPWIucmVmO2EucmV0dXJuPWI7cmV0dXJuIGIuY2hpbGQ9YX1oPWEuY2hpbGQ7aWYoZTxmJiYoZT1oLm1lbW9pemVkUHJvcHMsYz1jLmNvbXBhcmUsYz1udWxsIT09Yz9jOmpkLGMoZSxkKSYmYS5yZWY9PT1iLnJlZikpcmV0dXJuIEZoKGEsYixmKTtiLmVmZmVjdFRhZ3w9MTthPW9nKGgsZCxmKTthLnJlZj1iLnJlZjthLnJldHVybj1iO3JldHVybiBiLmNoaWxkPWF9XG5mdW5jdGlvbiBJaChhLGIsYyxkLGUsZil7cmV0dXJuIG51bGwhPT1hJiZqZChhLm1lbW9pemVkUHJvcHMsZCkmJmEucmVmPT09Yi5yZWYmJihMZj0hMSxlPGYpP0ZoKGEsYixmKTpKaChhLGIsYyxkLGYpfWZ1bmN0aW9uIEtoKGEsYil7dmFyIGM9Yi5yZWY7aWYobnVsbD09PWEmJm51bGwhPT1jfHxudWxsIT09YSYmYS5yZWYhPT1jKWIuZWZmZWN0VGFnfD0xMjh9ZnVuY3Rpb24gSmgoYSxiLGMsZCxlKXt2YXIgZj1OKGMpP1JlOkwuY3VycmVudDtmPVNlKGIsZik7S2YoYixlKTtjPWRoKGEsYixjLGQsZixlKTtpZihudWxsIT09YSYmIUxmKXJldHVybiBiLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWUsYi5lZmZlY3RUYWcmPS01MTcsYS5leHBpcmF0aW9uVGltZTw9ZSYmKGEuZXhwaXJhdGlvblRpbWU9MCksRmgoYSxiLGUpO2IuZWZmZWN0VGFnfD0xO1MoYSxiLGMsZSk7cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiBMaChhLGIsYyxkLGUpe2lmKE4oYykpe3ZhciBmPSEwO1hlKGIpfWVsc2UgZj0hMTtLZihiLGUpO2lmKG51bGw9PT1iLnN0YXRlTm9kZSludWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmVmZmVjdFRhZ3w9MiksaGcoYixjLGQsZSksamcoYixjLGQsZSksZD0hMDtlbHNlIGlmKG51bGw9PT1hKXt2YXIgaD1iLnN0YXRlTm9kZSxnPWIubWVtb2l6ZWRQcm9wcztoLnByb3BzPWc7dmFyIGs9aC5jb250ZXh0LGw9Yy5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGwmJm51bGwhPT1sP2w9TWYobCk6KGw9TihjKT9SZTpMLmN1cnJlbnQsbD1TZShiLGwpKTt2YXIgbj1jLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyx6PVwiZnVuY3Rpb25cIj09PXR5cGVvZiBufHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgaC5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZTt6fHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgaC5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmXG5cImZ1bmN0aW9uXCIhPT10eXBlb2YgaC5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzfHwoZyE9PWR8fGshPT1sKSYmaWcoYixoLGQsbCk7TmY9ITE7dmFyIHg9Yi5tZW1vaXplZFN0YXRlO2s9aC5zdGF0ZT14O3ZhciB2PWIudXBkYXRlUXVldWU7bnVsbCE9PXYmJihXZihiLHYsZCxoLGUpLGs9Yi5tZW1vaXplZFN0YXRlKTtnIT09ZHx8eCE9PWt8fE0uY3VycmVudHx8TmY/KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBuJiYoYmcoYixjLG4sZCksaz1iLm1lbW9pemVkU3RhdGUpLChnPU5mfHxnZyhiLGMsZyxkLHgsayxsKSk/KHp8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBoLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBoLmNvbXBvbmVudFdpbGxNb3VudHx8KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBoLmNvbXBvbmVudFdpbGxNb3VudCYmaC5jb21wb25lbnRXaWxsTW91bnQoKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgaC5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZcbmguVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgaC5jb21wb25lbnREaWRNb3VudCYmKGIuZWZmZWN0VGFnfD00KSk6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBoLmNvbXBvbmVudERpZE1vdW50JiYoYi5lZmZlY3RUYWd8PTQpLGIubWVtb2l6ZWRQcm9wcz1kLGIubWVtb2l6ZWRTdGF0ZT1rKSxoLnByb3BzPWQsaC5zdGF0ZT1rLGguY29udGV4dD1sLGQ9Zyk6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBoLmNvbXBvbmVudERpZE1vdW50JiYoYi5lZmZlY3RUYWd8PTQpLGQ9ITEpfWVsc2UgaD1iLnN0YXRlTm9kZSxnPWIubWVtb2l6ZWRQcm9wcyxoLnByb3BzPWIudHlwZT09PWIuZWxlbWVudFR5cGU/ZzpBZihiLnR5cGUsZyksaz1oLmNvbnRleHQsbD1jLmNvbnRleHRUeXBlLFwib2JqZWN0XCI9PT10eXBlb2YgbCYmbnVsbCE9PWw/bD1NZihsKToobD1OKGMpP1JlOkwuY3VycmVudCxsPVNlKGIsbCkpLG49Yy5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMsKHo9XG5cImZ1bmN0aW9uXCI9PT10eXBlb2Ygbnx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGguZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUpfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgaC5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGguY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc3x8KGchPT1kfHxrIT09bCkmJmlnKGIsaCxkLGwpLE5mPSExLGs9Yi5tZW1vaXplZFN0YXRlLHg9aC5zdGF0ZT1rLHY9Yi51cGRhdGVRdWV1ZSxudWxsIT09diYmKFdmKGIsdixkLGgsZSkseD1iLm1lbW9pemVkU3RhdGUpLGchPT1kfHxrIT09eHx8TS5jdXJyZW50fHxOZj8oXCJmdW5jdGlvblwiPT09dHlwZW9mIG4mJihiZyhiLGMsbixkKSx4PWIubWVtb2l6ZWRTdGF0ZSksKG49TmZ8fGdnKGIsYyxnLGQsayx4LGwpKT8oenx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGguVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBoLmNvbXBvbmVudFdpbGxVcGRhdGV8fFxuKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBoLmNvbXBvbmVudFdpbGxVcGRhdGUmJmguY29tcG9uZW50V2lsbFVwZGF0ZShkLHgsbCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGguVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUmJmguVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUoZCx4LGwpKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgaC5jb21wb25lbnREaWRVcGRhdGUmJihiLmVmZmVjdFRhZ3w9NCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGguZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUmJihiLmVmZmVjdFRhZ3w9MjU2KSk6KFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBoLmNvbXBvbmVudERpZFVwZGF0ZXx8Zz09PWEubWVtb2l6ZWRQcm9wcyYmaz09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZWZmZWN0VGFnfD00KSxcImZ1bmN0aW9uXCIhPT10eXBlb2YgaC5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8Zz09PWEubWVtb2l6ZWRQcm9wcyYmaz09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZWZmZWN0VGFnfD0yNTYpLGIubWVtb2l6ZWRQcm9wcz1cbmQsYi5tZW1vaXplZFN0YXRlPXgpLGgucHJvcHM9ZCxoLnN0YXRlPXgsaC5jb250ZXh0PWwsZD1uKTooXCJmdW5jdGlvblwiIT09dHlwZW9mIGguY29tcG9uZW50RGlkVXBkYXRlfHxnPT09YS5tZW1vaXplZFByb3BzJiZrPT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PTQpLFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBoLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxnPT09YS5tZW1vaXplZFByb3BzJiZrPT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PTI1NiksZD0hMSk7cmV0dXJuIE1oKGEsYixjLGQsZixlKX1cbmZ1bmN0aW9uIE1oKGEsYixjLGQsZSxmKXtLaChhLGIpO3ZhciBoPTAhPT0oYi5lZmZlY3RUYWcmNjQpO2lmKCFkJiYhaClyZXR1cm4gZSYmWWUoYixjLCExKSxGaChhLGIsZik7ZD1iLnN0YXRlTm9kZTtEaC5jdXJyZW50PWI7dmFyIGc9aCYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGMuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yP251bGw6ZC5yZW5kZXIoKTtiLmVmZmVjdFRhZ3w9MTtudWxsIT09YSYmaD8oYi5jaGlsZD10ZyhiLGEuY2hpbGQsbnVsbCxmKSxiLmNoaWxkPXRnKGIsbnVsbCxnLGYpKTpTKGEsYixnLGYpO2IubWVtb2l6ZWRTdGF0ZT1kLnN0YXRlO2UmJlllKGIsYywhMCk7cmV0dXJuIGIuY2hpbGR9ZnVuY3Rpb24gTmgoYSl7dmFyIGI9YS5zdGF0ZU5vZGU7Yi5wZW5kaW5nQ29udGV4dD9WZShhLGIucGVuZGluZ0NvbnRleHQsYi5wZW5kaW5nQ29udGV4dCE9PWIuY29udGV4dCk6Yi5jb250ZXh0JiZWZShhLGIuY29udGV4dCwhMSk7QWcoYSxiLmNvbnRhaW5lckluZm8pfVxudmFyIE9oPXt9O1xuZnVuY3Rpb24gUGgoYSxiLGMpe3ZhciBkPWIubW9kZSxlPWIucGVuZGluZ1Byb3BzLGY9UC5jdXJyZW50LGg9bnVsbCxnPSExLGs7KGs9MCE9PShiLmVmZmVjdFRhZyY2NCkpfHwoaz0wIT09KGYmR2cpJiYobnVsbD09PWF8fG51bGwhPT1hLm1lbW9pemVkU3RhdGUpKTtrPyhoPU9oLGc9ITAsYi5lZmZlY3RUYWcmPS02NSk6bnVsbCE9PWEmJm51bGw9PT1hLm1lbW9pemVkU3RhdGV8fHZvaWQgMD09PWUuZmFsbGJhY2t8fCEwPT09ZS51bnN0YWJsZV9hdm9pZFRoaXNGYWxsYmFja3x8KGZ8PUZnKTtmJj1FZztKKFAsZixiKTtpZihudWxsPT09YSlpZihnKXtlPWUuZmFsbGJhY2s7YT1zZyhudWxsLGQsMCxudWxsKTthLnJldHVybj1iO2lmKDA9PT0oYi5tb2RlJjIpKWZvcihnPW51bGwhPT1iLm1lbW9pemVkU3RhdGU/Yi5jaGlsZC5jaGlsZDpiLmNoaWxkLGEuY2hpbGQ9ZztudWxsIT09ZzspZy5yZXR1cm49YSxnPWcuc2libGluZztjPXNnKGUsZCxjLG51bGwpO2MucmV0dXJuPWI7YS5zaWJsaW5nPVxuYztkPWF9ZWxzZSBkPWM9dWcoYixudWxsLGUuY2hpbGRyZW4sYyk7ZWxzZXtpZihudWxsIT09YS5tZW1vaXplZFN0YXRlKWlmKGY9YS5jaGlsZCxkPWYuc2libGluZyxnKXtlPWUuZmFsbGJhY2s7Yz1vZyhmLGYucGVuZGluZ1Byb3BzLDApO2MucmV0dXJuPWI7aWYoMD09PShiLm1vZGUmMikmJihnPW51bGwhPT1iLm1lbW9pemVkU3RhdGU/Yi5jaGlsZC5jaGlsZDpiLmNoaWxkLGchPT1mLmNoaWxkKSlmb3IoYy5jaGlsZD1nO251bGwhPT1nOylnLnJldHVybj1jLGc9Zy5zaWJsaW5nO2U9b2coZCxlLGQuZXhwaXJhdGlvblRpbWUpO2UucmV0dXJuPWI7Yy5zaWJsaW5nPWU7ZD1jO2MuY2hpbGRFeHBpcmF0aW9uVGltZT0wO2M9ZX1lbHNlIGQ9Yz10ZyhiLGYuY2hpbGQsZS5jaGlsZHJlbixjKTtlbHNlIGlmKGY9YS5jaGlsZCxnKXtnPWUuZmFsbGJhY2s7ZT1zZyhudWxsLGQsMCxudWxsKTtlLnJldHVybj1iO2UuY2hpbGQ9ZjtudWxsIT09ZiYmKGYucmV0dXJuPWUpO2lmKDA9PT0oYi5tb2RlJlxuMikpZm9yKGY9bnVsbCE9PWIubWVtb2l6ZWRTdGF0ZT9iLmNoaWxkLmNoaWxkOmIuY2hpbGQsZS5jaGlsZD1mO251bGwhPT1mOylmLnJldHVybj1lLGY9Zi5zaWJsaW5nO2M9c2coZyxkLGMsbnVsbCk7Yy5yZXR1cm49YjtlLnNpYmxpbmc9YztjLmVmZmVjdFRhZ3w9MjtkPWU7ZS5jaGlsZEV4cGlyYXRpb25UaW1lPTB9ZWxzZSBjPWQ9dGcoYixmLGUuY2hpbGRyZW4sYyk7Yi5zdGF0ZU5vZGU9YS5zdGF0ZU5vZGV9Yi5tZW1vaXplZFN0YXRlPWg7Yi5jaGlsZD1kO3JldHVybiBjfWZ1bmN0aW9uIFFoKGEsYixjLGQsZSl7dmFyIGY9YS5tZW1vaXplZFN0YXRlO251bGw9PT1mP2EubWVtb2l6ZWRTdGF0ZT17aXNCYWNrd2FyZHM6YixyZW5kZXJpbmc6bnVsbCxsYXN0OmQsdGFpbDpjLHRhaWxFeHBpcmF0aW9uOjAsdGFpbE1vZGU6ZX06KGYuaXNCYWNrd2FyZHM9YixmLnJlbmRlcmluZz1udWxsLGYubGFzdD1kLGYudGFpbD1jLGYudGFpbEV4cGlyYXRpb249MCxmLnRhaWxNb2RlPWUpfVxuZnVuY3Rpb24gUmgoYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzLGU9ZC5yZXZlYWxPcmRlcixmPWQudGFpbDtTKGEsYixkLmNoaWxkcmVuLGMpO2Q9UC5jdXJyZW50O2lmKDAhPT0oZCZHZykpZD1kJkVnfEdnLGIuZWZmZWN0VGFnfD02NDtlbHNle2lmKG51bGwhPT1hJiYwIT09KGEuZWZmZWN0VGFnJjY0KSlhOmZvcihhPWIuY2hpbGQ7bnVsbCE9PWE7KXtpZigxMz09PWEudGFnKXtpZihudWxsIT09YS5tZW1vaXplZFN0YXRlKXthLmV4cGlyYXRpb25UaW1lPGMmJihhLmV4cGlyYXRpb25UaW1lPWMpO3ZhciBoPWEuYWx0ZXJuYXRlO251bGwhPT1oJiZoLmV4cGlyYXRpb25UaW1lPGMmJihoLmV4cGlyYXRpb25UaW1lPWMpO0pmKGEucmV0dXJuLGMpfX1lbHNlIGlmKG51bGwhPT1hLmNoaWxkKXthLmNoaWxkLnJldHVybj1hO2E9YS5jaGlsZDtjb250aW51ZX1pZihhPT09YilicmVhayBhO2Zvcig7bnVsbD09PWEuc2libGluZzspe2lmKG51bGw9PT1hLnJldHVybnx8YS5yZXR1cm49PT1cbmIpYnJlYWsgYTthPWEucmV0dXJufWEuc2libGluZy5yZXR1cm49YS5yZXR1cm47YT1hLnNpYmxpbmd9ZCY9RWd9SihQLGQsYik7aWYoMD09PShiLm1vZGUmMikpYi5tZW1vaXplZFN0YXRlPW51bGw7ZWxzZSBzd2l0Y2goZSl7Y2FzZSBcImZvcndhcmRzXCI6Yz1iLmNoaWxkO2ZvcihlPW51bGw7bnVsbCE9PWM7KWQ9Yy5hbHRlcm5hdGUsbnVsbCE9PWQmJm51bGw9PT1IZyhkKSYmKGU9YyksYz1jLnNpYmxpbmc7Yz1lO251bGw9PT1jPyhlPWIuY2hpbGQsYi5jaGlsZD1udWxsKTooZT1jLnNpYmxpbmcsYy5zaWJsaW5nPW51bGwpO1FoKGIsITEsZSxjLGYpO2JyZWFrO2Nhc2UgXCJiYWNrd2FyZHNcIjpjPW51bGw7ZT1iLmNoaWxkO2ZvcihiLmNoaWxkPW51bGw7bnVsbCE9PWU7KXtkPWUuYWx0ZXJuYXRlO2lmKG51bGwhPT1kJiZudWxsPT09SGcoZCkpe2IuY2hpbGQ9ZTticmVha31kPWUuc2libGluZztlLnNpYmxpbmc9YztjPWU7ZT1kfVFoKGIsITAsYyxudWxsLGYpO2JyZWFrO2Nhc2UgXCJ0b2dldGhlclwiOlFoKGIsXG4hMSxudWxsLG51bGwsdm9pZCAwKTticmVhaztkZWZhdWx0OmIubWVtb2l6ZWRTdGF0ZT1udWxsfXJldHVybiBiLmNoaWxkfWZ1bmN0aW9uIEZoKGEsYixjKXtudWxsIT09YSYmKGIuZGVwZW5kZW5jaWVzPWEuZGVwZW5kZW5jaWVzKTtpZihiLmNoaWxkRXhwaXJhdGlvblRpbWU8YylyZXR1cm4gbnVsbDtpZihudWxsIT09YSYmYi5jaGlsZCE9PWEuY2hpbGQpdGhyb3cgdChFcnJvcigxNTMpKTtpZihudWxsIT09Yi5jaGlsZCl7YT1iLmNoaWxkO2M9b2coYSxhLnBlbmRpbmdQcm9wcyxhLmV4cGlyYXRpb25UaW1lKTtiLmNoaWxkPWM7Zm9yKGMucmV0dXJuPWI7bnVsbCE9PWEuc2libGluZzspYT1hLnNpYmxpbmcsYz1jLnNpYmxpbmc9b2coYSxhLnBlbmRpbmdQcm9wcyxhLmV4cGlyYXRpb25UaW1lKSxjLnJldHVybj1iO2Muc2libGluZz1udWxsfXJldHVybiBiLmNoaWxkfWZ1bmN0aW9uIFNoKGEpe2EuZWZmZWN0VGFnfD00fVxudmFyIFRoPXZvaWQgMCxVaD12b2lkIDAsVmg9dm9pZCAwLFdoPXZvaWQgMDtUaD1mdW5jdGlvbihhLGIpe2Zvcih2YXIgYz1iLmNoaWxkO251bGwhPT1jOyl7aWYoNT09PWMudGFnfHw2PT09Yy50YWcpYS5hcHBlbmRDaGlsZChjLnN0YXRlTm9kZSk7ZWxzZSBpZigyMD09PWMudGFnKWEuYXBwZW5kQ2hpbGQoYy5zdGF0ZU5vZGUuaW5zdGFuY2UpO2Vsc2UgaWYoNCE9PWMudGFnJiZudWxsIT09Yy5jaGlsZCl7Yy5jaGlsZC5yZXR1cm49YztjPWMuY2hpbGQ7Y29udGludWV9aWYoYz09PWIpYnJlYWs7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWMucmV0dXJufHxjLnJldHVybj09PWIpcmV0dXJuO2M9Yy5yZXR1cm59Yy5zaWJsaW5nLnJldHVybj1jLnJldHVybjtjPWMuc2libGluZ319O1VoPWZ1bmN0aW9uKCl7fTtcblZoPWZ1bmN0aW9uKGEsYixjLGQsZSl7dmFyIGY9YS5tZW1vaXplZFByb3BzO2lmKGYhPT1kKXt2YXIgaD1iLnN0YXRlTm9kZTt6Zyh3Zy5jdXJyZW50KTthPW51bGw7c3dpdGNoKGMpe2Nhc2UgXCJpbnB1dFwiOmY9QmMoaCxmKTtkPUJjKGgsZCk7YT1bXTticmVhaztjYXNlIFwib3B0aW9uXCI6Zj1sZShoLGYpO2Q9bGUoaCxkKTthPVtdO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpmPW0oe30sZix7dmFsdWU6dm9pZCAwfSk7ZD1tKHt9LGQse3ZhbHVlOnZvaWQgMH0pO2E9W107YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6Zj1uZShoLGYpO2Q9bmUoaCxkKTthPVtdO2JyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiIT09dHlwZW9mIGYub25DbGljayYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGQub25DbGljayYmKGgub25jbGljaz1HZSl9RGUoYyxkKTtoPWM9dm9pZCAwO3ZhciBnPW51bGw7Zm9yKGMgaW4gZilpZighZC5oYXNPd25Qcm9wZXJ0eShjKSYmZi5oYXNPd25Qcm9wZXJ0eShjKSYmbnVsbCE9ZltjXSlpZihcInN0eWxlXCI9PT1cbmMpe3ZhciBrPWZbY107Zm9yKGggaW4gaylrLmhhc093blByb3BlcnR5KGgpJiYoZ3x8KGc9e30pLGdbaF09XCJcIil9ZWxzZVwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIiE9PWMmJlwiY2hpbGRyZW5cIiE9PWMmJlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1jJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09YyYmXCJhdXRvRm9jdXNcIiE9PWMmJihpYS5oYXNPd25Qcm9wZXJ0eShjKT9hfHwoYT1bXSk6KGE9YXx8W10pLnB1c2goYyxudWxsKSk7Zm9yKGMgaW4gZCl7dmFyIGw9ZFtjXTtrPW51bGwhPWY/ZltjXTp2b2lkIDA7aWYoZC5oYXNPd25Qcm9wZXJ0eShjKSYmbCE9PWsmJihudWxsIT1sfHxudWxsIT1rKSlpZihcInN0eWxlXCI9PT1jKWlmKGspe2ZvcihoIGluIGspIWsuaGFzT3duUHJvcGVydHkoaCl8fGwmJmwuaGFzT3duUHJvcGVydHkoaCl8fChnfHwoZz17fSksZ1toXT1cIlwiKTtmb3IoaCBpbiBsKWwuaGFzT3duUHJvcGVydHkoaCkmJmtbaF0hPT1sW2hdJiYoZ3x8XG4oZz17fSksZ1toXT1sW2hdKX1lbHNlIGd8fChhfHwoYT1bXSksYS5wdXNoKGMsZykpLGc9bDtlbHNlXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09Yz8obD1sP2wuX19odG1sOnZvaWQgMCxrPWs/ay5fX2h0bWw6dm9pZCAwLG51bGwhPWwmJmshPT1sJiYoYT1hfHxbXSkucHVzaChjLFwiXCIrbCkpOlwiY2hpbGRyZW5cIj09PWM/az09PWx8fFwic3RyaW5nXCIhPT10eXBlb2YgbCYmXCJudW1iZXJcIiE9PXR5cGVvZiBsfHwoYT1hfHxbXSkucHVzaChjLFwiXCIrbCk6XCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWMmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1jJiYoaWEuaGFzT3duUHJvcGVydHkoYyk/KG51bGwhPWwmJkZlKGUsYyksYXx8az09PWx8fChhPVtdKSk6KGE9YXx8W10pLnB1c2goYyxsKSl9ZyYmKGE9YXx8W10pLnB1c2goXCJzdHlsZVwiLGcpO2U9YTsoYi51cGRhdGVRdWV1ZT1lKSYmU2goYil9fTtXaD1mdW5jdGlvbihhLGIsYyxkKXtjIT09ZCYmU2goYil9O1xuZnVuY3Rpb24gJGgoYSxiKXtzd2l0Y2goYS50YWlsTW9kZSl7Y2FzZSBcImhpZGRlblwiOmI9YS50YWlsO2Zvcih2YXIgYz1udWxsO251bGwhPT1iOyludWxsIT09Yi5hbHRlcm5hdGUmJihjPWIpLGI9Yi5zaWJsaW5nO251bGw9PT1jP2EudGFpbD1udWxsOmMuc2libGluZz1udWxsO2JyZWFrO2Nhc2UgXCJjb2xsYXBzZWRcIjpjPWEudGFpbDtmb3IodmFyIGQ9bnVsbDtudWxsIT09YzspbnVsbCE9PWMuYWx0ZXJuYXRlJiYoZD1jKSxjPWMuc2libGluZztudWxsPT09ZD9ifHxudWxsPT09YS50YWlsP2EudGFpbD1udWxsOmEudGFpbC5zaWJsaW5nPW51bGw6ZC5zaWJsaW5nPW51bGx9fVxuZnVuY3Rpb24gYWkoYSl7c3dpdGNoKGEudGFnKXtjYXNlIDE6TihhLnR5cGUpJiZUZShhKTt2YXIgYj1hLmVmZmVjdFRhZztyZXR1cm4gYiYyMDQ4PyhhLmVmZmVjdFRhZz1iJi0yMDQ5fDY0LGEpOm51bGw7Y2FzZSAzOkJnKGEpO1VlKGEpO2I9YS5lZmZlY3RUYWc7aWYoMCE9PShiJjY0KSl0aHJvdyB0KEVycm9yKDI4NSkpO2EuZWZmZWN0VGFnPWImLTIwNDl8NjQ7cmV0dXJuIGE7Y2FzZSA1OnJldHVybiBEZyhhKSxudWxsO2Nhc2UgMTM6cmV0dXJuIEgoUCxhKSxiPWEuZWZmZWN0VGFnLGImMjA0OD8oYS5lZmZlY3RUYWc9YiYtMjA0OXw2NCxhKTpudWxsO2Nhc2UgMTg6cmV0dXJuIG51bGw7Y2FzZSAxOTpyZXR1cm4gSChQLGEpLG51bGw7Y2FzZSA0OnJldHVybiBCZyhhKSxudWxsO2Nhc2UgMTA6cmV0dXJuIElmKGEpLG51bGw7ZGVmYXVsdDpyZXR1cm4gbnVsbH19ZnVuY3Rpb24gYmkoYSxiKXtyZXR1cm57dmFsdWU6YSxzb3VyY2U6YixzdGFjazpwYyhiKX19XG52YXIgY2k9XCJmdW5jdGlvblwiPT09dHlwZW9mIFdlYWtTZXQ/V2Vha1NldDpTZXQ7ZnVuY3Rpb24gZGkoYSxiKXt2YXIgYz1iLnNvdXJjZSxkPWIuc3RhY2s7bnVsbD09PWQmJm51bGwhPT1jJiYoZD1wYyhjKSk7bnVsbCE9PWMmJm9jKGMudHlwZSk7Yj1iLnZhbHVlO251bGwhPT1hJiYxPT09YS50YWcmJm9jKGEudHlwZSk7dHJ5e2NvbnNvbGUuZXJyb3IoYil9Y2F0Y2goZSl7c2V0VGltZW91dChmdW5jdGlvbigpe3Rocm93IGU7fSl9fWZ1bmN0aW9uIGVpKGEsYil7dHJ5e2IucHJvcHM9YS5tZW1vaXplZFByb3BzLGIuc3RhdGU9YS5tZW1vaXplZFN0YXRlLGIuY29tcG9uZW50V2lsbFVubW91bnQoKX1jYXRjaChjKXtmaShhLGMpfX1mdW5jdGlvbiBnaShhKXt2YXIgYj1hLnJlZjtpZihudWxsIT09YilpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYil0cnl7YihudWxsKX1jYXRjaChjKXtmaShhLGMpfWVsc2UgYi5jdXJyZW50PW51bGx9XG5mdW5jdGlvbiBoaShhLGIsYyl7Yz1jLnVwZGF0ZVF1ZXVlO2M9bnVsbCE9PWM/Yy5sYXN0RWZmZWN0Om51bGw7aWYobnVsbCE9PWMpe3ZhciBkPWM9Yy5uZXh0O2Rve2lmKChkLnRhZyZhKSE9PUlnKXt2YXIgZT1kLmRlc3Ryb3k7ZC5kZXN0cm95PXZvaWQgMDt2b2lkIDAhPT1lJiZlKCl9KGQudGFnJmIpIT09SWcmJihlPWQuY3JlYXRlLGQuZGVzdHJveT1lKCkpO2Q9ZC5uZXh0fXdoaWxlKGQhPT1jKX19XG5mdW5jdGlvbiBpaShhLGIpe1wiZnVuY3Rpb25cIj09PXR5cGVvZiBqaSYmamkoYSk7c3dpdGNoKGEudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE0OmNhc2UgMTU6dmFyIGM9YS51cGRhdGVRdWV1ZTtpZihudWxsIT09YyYmKGM9Yy5sYXN0RWZmZWN0LG51bGwhPT1jKSl7dmFyIGQ9Yy5uZXh0O3ZmKDk3PGI/OTc6YixmdW5jdGlvbigpe3ZhciBiPWQ7ZG97dmFyIGM9Yi5kZXN0cm95O2lmKHZvaWQgMCE9PWMpe3ZhciBoPWE7dHJ5e2MoKX1jYXRjaChnKXtmaShoLGcpfX1iPWIubmV4dH13aGlsZShiIT09ZCl9KX1icmVhaztjYXNlIDE6Z2koYSk7Yj1hLnN0YXRlTm9kZTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5jb21wb25lbnRXaWxsVW5tb3VudCYmZWkoYSxiKTticmVhaztjYXNlIDU6Z2koYSk7YnJlYWs7Y2FzZSA0OmtpKGEsYil9fVxuZnVuY3Rpb24gbGkoYSxiKXtmb3IodmFyIGM9YTs7KWlmKGlpKGMsYiksbnVsbCE9PWMuY2hpbGQmJjQhPT1jLnRhZyljLmNoaWxkLnJldHVybj1jLGM9Yy5jaGlsZDtlbHNle2lmKGM9PT1hKWJyZWFrO2Zvcig7bnVsbD09PWMuc2libGluZzspe2lmKG51bGw9PT1jLnJldHVybnx8Yy5yZXR1cm49PT1hKXJldHVybjtjPWMucmV0dXJufWMuc2libGluZy5yZXR1cm49Yy5yZXR1cm47Yz1jLnNpYmxpbmd9fWZ1bmN0aW9uIG1pKGEpe3JldHVybiA1PT09YS50YWd8fDM9PT1hLnRhZ3x8ND09PWEudGFnfVxuZnVuY3Rpb24gbmkoYSl7YTp7Zm9yKHZhciBiPWEucmV0dXJuO251bGwhPT1iOyl7aWYobWkoYikpe3ZhciBjPWI7YnJlYWsgYX1iPWIucmV0dXJufXRocm93IHQoRXJyb3IoMTYwKSk7fWI9Yy5zdGF0ZU5vZGU7c3dpdGNoKGMudGFnKXtjYXNlIDU6dmFyIGQ9ITE7YnJlYWs7Y2FzZSAzOmI9Yi5jb250YWluZXJJbmZvO2Q9ITA7YnJlYWs7Y2FzZSA0OmI9Yi5jb250YWluZXJJbmZvO2Q9ITA7YnJlYWs7ZGVmYXVsdDp0aHJvdyB0KEVycm9yKDE2MSkpO31jLmVmZmVjdFRhZyYxNiYmKHdlKGIsXCJcIiksYy5lZmZlY3RUYWcmPS0xNyk7YTpiOmZvcihjPWE7Oyl7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWMucmV0dXJufHxtaShjLnJldHVybikpe2M9bnVsbDticmVhayBhfWM9Yy5yZXR1cm59Yy5zaWJsaW5nLnJldHVybj1jLnJldHVybjtmb3IoYz1jLnNpYmxpbmc7NSE9PWMudGFnJiY2IT09Yy50YWcmJjE4IT09Yy50YWc7KXtpZihjLmVmZmVjdFRhZyYyKWNvbnRpbnVlIGI7XG5pZihudWxsPT09Yy5jaGlsZHx8ND09PWMudGFnKWNvbnRpbnVlIGI7ZWxzZSBjLmNoaWxkLnJldHVybj1jLGM9Yy5jaGlsZH1pZighKGMuZWZmZWN0VGFnJjIpKXtjPWMuc3RhdGVOb2RlO2JyZWFrIGF9fWZvcih2YXIgZT1hOzspe3ZhciBmPTU9PT1lLnRhZ3x8Nj09PWUudGFnO2lmKGZ8fDIwPT09ZS50YWcpe3ZhciBoPWY/ZS5zdGF0ZU5vZGU6ZS5zdGF0ZU5vZGUuaW5zdGFuY2U7aWYoYylpZihkKXtmPWI7dmFyIGc9aDtoPWM7OD09PWYubm9kZVR5cGU/Zi5wYXJlbnROb2RlLmluc2VydEJlZm9yZShnLGgpOmYuaW5zZXJ0QmVmb3JlKGcsaCl9ZWxzZSBiLmluc2VydEJlZm9yZShoLGMpO2Vsc2UgZD8oZz1iLDg9PT1nLm5vZGVUeXBlPyhmPWcucGFyZW50Tm9kZSxmLmluc2VydEJlZm9yZShoLGcpKTooZj1nLGYuYXBwZW5kQ2hpbGQoaCkpLGc9Zy5fcmVhY3RSb290Q29udGFpbmVyLG51bGwhPT1nJiZ2b2lkIDAhPT1nfHxudWxsIT09Zi5vbmNsaWNrfHwoZi5vbmNsaWNrPUdlKSk6XG5iLmFwcGVuZENoaWxkKGgpfWVsc2UgaWYoNCE9PWUudGFnJiZudWxsIT09ZS5jaGlsZCl7ZS5jaGlsZC5yZXR1cm49ZTtlPWUuY2hpbGQ7Y29udGludWV9aWYoZT09PWEpYnJlYWs7Zm9yKDtudWxsPT09ZS5zaWJsaW5nOyl7aWYobnVsbD09PWUucmV0dXJufHxlLnJldHVybj09PWEpcmV0dXJuO2U9ZS5yZXR1cm59ZS5zaWJsaW5nLnJldHVybj1lLnJldHVybjtlPWUuc2libGluZ319XG5mdW5jdGlvbiBraShhLGIpe2Zvcih2YXIgYz1hLGQ9ITEsZT12b2lkIDAsZj12b2lkIDA7Oyl7aWYoIWQpe2Q9Yy5yZXR1cm47YTpmb3IoOzspe2lmKG51bGw9PT1kKXRocm93IHQoRXJyb3IoMTYwKSk7ZT1kLnN0YXRlTm9kZTtzd2l0Y2goZC50YWcpe2Nhc2UgNTpmPSExO2JyZWFrIGE7Y2FzZSAzOmU9ZS5jb250YWluZXJJbmZvO2Y9ITA7YnJlYWsgYTtjYXNlIDQ6ZT1lLmNvbnRhaW5lckluZm87Zj0hMDticmVhayBhfWQ9ZC5yZXR1cm59ZD0hMH1pZig1PT09Yy50YWd8fDY9PT1jLnRhZylpZihsaShjLGIpLGYpe3ZhciBoPWUsZz1jLnN0YXRlTm9kZTs4PT09aC5ub2RlVHlwZT9oLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZyk6aC5yZW1vdmVDaGlsZChnKX1lbHNlIGUucmVtb3ZlQ2hpbGQoYy5zdGF0ZU5vZGUpO2Vsc2UgaWYoMjA9PT1jLnRhZylnPWMuc3RhdGVOb2RlLmluc3RhbmNlLGxpKGMsYiksZj8oaD1lLDg9PT1oLm5vZGVUeXBlP2gucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChnKTpcbmgucmVtb3ZlQ2hpbGQoZykpOmUucmVtb3ZlQ2hpbGQoZyk7ZWxzZSBpZig0PT09Yy50YWcpe2lmKG51bGwhPT1jLmNoaWxkKXtlPWMuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87Zj0hMDtjLmNoaWxkLnJldHVybj1jO2M9Yy5jaGlsZDtjb250aW51ZX19ZWxzZSBpZihpaShjLGIpLG51bGwhPT1jLmNoaWxkKXtjLmNoaWxkLnJldHVybj1jO2M9Yy5jaGlsZDtjb250aW51ZX1pZihjPT09YSlicmVhaztmb3IoO251bGw9PT1jLnNpYmxpbmc7KXtpZihudWxsPT09Yy5yZXR1cm58fGMucmV0dXJuPT09YSlyZXR1cm47Yz1jLnJldHVybjs0PT09Yy50YWcmJihkPSExKX1jLnNpYmxpbmcucmV0dXJuPWMucmV0dXJuO2M9Yy5zaWJsaW5nfX1cbmZ1bmN0aW9uIG9pKGEsYil7c3dpdGNoKGIudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE0OmNhc2UgMTU6aGkoS2csTGcsYik7YnJlYWs7Y2FzZSAxOmJyZWFrO2Nhc2UgNTp2YXIgYz1iLnN0YXRlTm9kZTtpZihudWxsIT1jKXt2YXIgZD1iLm1lbW9pemVkUHJvcHMsZT1udWxsIT09YT9hLm1lbW9pemVkUHJvcHM6ZDthPWIudHlwZTt2YXIgZj1iLnVwZGF0ZVF1ZXVlO2IudXBkYXRlUXVldWU9bnVsbDtpZihudWxsIT09Zil7Y1tHYV09ZDtcImlucHV0XCI9PT1hJiZcInJhZGlvXCI9PT1kLnR5cGUmJm51bGwhPWQubmFtZSYmRGMoYyxkKTtFZShhLGUpO2I9RWUoYSxkKTtmb3IoZT0wO2U8Zi5sZW5ndGg7ZSs9Mil7dmFyIGg9ZltlXSxnPWZbZSsxXTtcInN0eWxlXCI9PT1oP0FlKGMsZyk6XCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09aD92ZShjLGcpOlwiY2hpbGRyZW5cIj09PWg/d2UoYyxnKTp6YyhjLGgsZyxiKX1zd2l0Y2goYSl7Y2FzZSBcImlucHV0XCI6RWMoYyxkKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpwZShjLFxuZCk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmI9Yy5fd3JhcHBlclN0YXRlLndhc011bHRpcGxlLGMuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZT0hIWQubXVsdGlwbGUsYT1kLnZhbHVlLG51bGwhPWE/bWUoYywhIWQubXVsdGlwbGUsYSwhMSk6YiE9PSEhZC5tdWx0aXBsZSYmKG51bGwhPWQuZGVmYXVsdFZhbHVlP21lKGMsISFkLm11bHRpcGxlLGQuZGVmYXVsdFZhbHVlLCEwKTptZShjLCEhZC5tdWx0aXBsZSxkLm11bHRpcGxlP1tdOlwiXCIsITEpKX19fWJyZWFrO2Nhc2UgNjppZihudWxsPT09Yi5zdGF0ZU5vZGUpdGhyb3cgdChFcnJvcigxNjIpKTtiLnN0YXRlTm9kZS5ub2RlVmFsdWU9Yi5tZW1vaXplZFByb3BzO2JyZWFrO2Nhc2UgMzpicmVhaztjYXNlIDEyOmJyZWFrO2Nhc2UgMTM6Yz1iO251bGw9PT1iLm1lbW9pemVkU3RhdGU/ZD0hMTooZD0hMCxjPWIuY2hpbGQscGk9c2YoKSk7aWYobnVsbCE9PWMpYTpmb3IoYT1jOzspe2lmKDU9PT1hLnRhZylmPWEuc3RhdGVOb2RlLGQ/KGY9XG5mLnN0eWxlLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBmLnNldFByb3BlcnR5P2Yuc2V0UHJvcGVydHkoXCJkaXNwbGF5XCIsXCJub25lXCIsXCJpbXBvcnRhbnRcIik6Zi5kaXNwbGF5PVwibm9uZVwiKTooZj1hLnN0YXRlTm9kZSxlPWEubWVtb2l6ZWRQcm9wcy5zdHlsZSxlPXZvaWQgMCE9PWUmJm51bGwhPT1lJiZlLmhhc093blByb3BlcnR5KFwiZGlzcGxheVwiKT9lLmRpc3BsYXk6bnVsbCxmLnN0eWxlLmRpc3BsYXk9emUoXCJkaXNwbGF5XCIsZSkpO2Vsc2UgaWYoNj09PWEudGFnKWEuc3RhdGVOb2RlLm5vZGVWYWx1ZT1kP1wiXCI6YS5tZW1vaXplZFByb3BzO2Vsc2UgaWYoMTM9PT1hLnRhZyYmbnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSl7Zj1hLmNoaWxkLnNpYmxpbmc7Zi5yZXR1cm49YTthPWY7Y29udGludWV9ZWxzZSBpZihudWxsIT09YS5jaGlsZCl7YS5jaGlsZC5yZXR1cm49YTthPWEuY2hpbGQ7Y29udGludWV9aWYoYT09PWMpYnJlYWsgYTtmb3IoO251bGw9PT1hLnNpYmxpbmc7KXtpZihudWxsPT09XG5hLnJldHVybnx8YS5yZXR1cm49PT1jKWJyZWFrIGE7YT1hLnJldHVybn1hLnNpYmxpbmcucmV0dXJuPWEucmV0dXJuO2E9YS5zaWJsaW5nfXFpKGIpO2JyZWFrO2Nhc2UgMTk6cWkoYik7YnJlYWs7Y2FzZSAxNzpicmVhaztjYXNlIDIwOmJyZWFrO2RlZmF1bHQ6dGhyb3cgdChFcnJvcigxNjMpKTt9fWZ1bmN0aW9uIHFpKGEpe3ZhciBiPWEudXBkYXRlUXVldWU7aWYobnVsbCE9PWIpe2EudXBkYXRlUXVldWU9bnVsbDt2YXIgYz1hLnN0YXRlTm9kZTtudWxsPT09YyYmKGM9YS5zdGF0ZU5vZGU9bmV3IGNpKTtiLmZvckVhY2goZnVuY3Rpb24oYil7dmFyIGQ9cmkuYmluZChudWxsLGEsYik7Yy5oYXMoYil8fChjLmFkZChiKSxiLnRoZW4oZCxkKSl9KX19dmFyIHNpPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBXZWFrTWFwP1dlYWtNYXA6TWFwO1xuZnVuY3Rpb24gdGkoYSxiLGMpe2M9UWYoYyxudWxsKTtjLnRhZz0zO2MucGF5bG9hZD17ZWxlbWVudDpudWxsfTt2YXIgZD1iLnZhbHVlO2MuY2FsbGJhY2s9ZnVuY3Rpb24oKXt1aXx8KHVpPSEwLHZpPWQpO2RpKGEsYil9O3JldHVybiBjfVxuZnVuY3Rpb24gd2koYSxiLGMpe2M9UWYoYyxudWxsKTtjLnRhZz0zO3ZhciBkPWEudHlwZS5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQpe3ZhciBlPWIudmFsdWU7Yy5wYXlsb2FkPWZ1bmN0aW9uKCl7ZGkoYSxiKTtyZXR1cm4gZChlKX19dmFyIGY9YS5zdGF0ZU5vZGU7bnVsbCE9PWYmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBmLmNvbXBvbmVudERpZENhdGNoJiYoYy5jYWxsYmFjaz1mdW5jdGlvbigpe1wiZnVuY3Rpb25cIiE9PXR5cGVvZiBkJiYobnVsbD09PXhpP3hpPW5ldyBTZXQoW3RoaXNdKTp4aS5hZGQodGhpcyksZGkoYSxiKSk7dmFyIGM9Yi5zdGFjazt0aGlzLmNvbXBvbmVudERpZENhdGNoKGIudmFsdWUse2NvbXBvbmVudFN0YWNrOm51bGwhPT1jP2M6XCJcIn0pfSk7cmV0dXJuIGN9XG52YXIgeWk9TWF0aC5jZWlsLHppPVhiLlJlYWN0Q3VycmVudERpc3BhdGNoZXIsQWk9WGIuUmVhY3RDdXJyZW50T3duZXIsVD0wLEJpPTgsQ2k9MTYsRGk9MzIsRWk9MCxGaT0xLEdpPTIsSGk9MyxJaT00LFU9VCxKaT1udWxsLFY9bnVsbCxXPTAsWD1FaSxLaT0xMDczNzQxODIzLExpPTEwNzM3NDE4MjMsTWk9bnVsbCxOaT0hMSxwaT0wLE9pPTUwMCxZPW51bGwsdWk9ITEsdmk9bnVsbCx4aT1udWxsLFBpPSExLFFpPW51bGwsUmk9OTAsU2k9MCxUaT1udWxsLFVpPTAsVmk9bnVsbCxXaT0wO2Z1bmN0aW9uIGNnKCl7cmV0dXJuKFUmKENpfERpKSkhPT1UPzEwNzM3NDE4MjEtKHNmKCkvMTB8MCk6MCE9PVdpP1dpOldpPTEwNzM3NDE4MjEtKHNmKCkvMTB8MCl9XG5mdW5jdGlvbiBkZyhhLGIsYyl7Yj1iLm1vZGU7aWYoMD09PShiJjIpKXJldHVybiAxMDczNzQxODIzO3ZhciBkPXRmKCk7aWYoMD09PShiJjQpKXJldHVybiA5OT09PWQ/MTA3Mzc0MTgyMzoxMDczNzQxODIyO2lmKChVJkNpKSE9PVQpcmV0dXJuIFc7aWYobnVsbCE9PWMpYT0xMDczNzQxODIxLTI1KigoKDEwNzM3NDE4MjEtYSsoYy50aW1lb3V0TXN8MHx8NUUzKS8xMCkvMjV8MCkrMSk7ZWxzZSBzd2l0Y2goZCl7Y2FzZSA5OTphPTEwNzM3NDE4MjM7YnJlYWs7Y2FzZSA5ODphPTEwNzM3NDE4MjEtMTAqKCgoMTA3Mzc0MTgyMS1hKzE1KS8xMHwwKSsxKTticmVhaztjYXNlIDk3OmNhc2UgOTY6YT0xMDczNzQxODIxLTI1KigoKDEwNzM3NDE4MjEtYSs1MDApLzI1fDApKzEpO2JyZWFrO2Nhc2UgOTU6YT0xO2JyZWFrO2RlZmF1bHQ6dGhyb3cgdChFcnJvcigzMjYpKTt9bnVsbCE9PUppJiZhPT09VyYmLS1hO3JldHVybiBhfXZhciBYaT0wO1xuZnVuY3Rpb24gZWcoYSxiKXtpZig1MDxVaSl0aHJvdyBVaT0wLFZpPW51bGwsdChFcnJvcigxODUpKTthPVlpKGEsYik7aWYobnVsbCE9PWEpe2EucGluZ1RpbWU9MDt2YXIgYz10ZigpO2lmKDEwNzM3NDE4MjM9PT1iKWlmKChVJkJpKSE9PVQmJihVJihDaXxEaSkpPT09VClmb3IodmFyIGQ9WihhLDEwNzM3NDE4MjMsITApO251bGwhPT1kOylkPWQoITApO2Vsc2UgWmkoYSw5OSwxMDczNzQxODIzKSxVPT09VCYmTygpO2Vsc2UgWmkoYSxjLGIpOyhVJjQpPT09VHx8OTghPT1jJiY5OSE9PWN8fChudWxsPT09VGk/VGk9bmV3IE1hcChbW2EsYl1dKTooYz1UaS5nZXQoYSksKHZvaWQgMD09PWN8fGM+YikmJlRpLnNldChhLGIpKSl9fVxuZnVuY3Rpb24gWWkoYSxiKXthLmV4cGlyYXRpb25UaW1lPGImJihhLmV4cGlyYXRpb25UaW1lPWIpO3ZhciBjPWEuYWx0ZXJuYXRlO251bGwhPT1jJiZjLmV4cGlyYXRpb25UaW1lPGImJihjLmV4cGlyYXRpb25UaW1lPWIpO3ZhciBkPWEucmV0dXJuLGU9bnVsbDtpZihudWxsPT09ZCYmMz09PWEudGFnKWU9YS5zdGF0ZU5vZGU7ZWxzZSBmb3IoO251bGwhPT1kOyl7Yz1kLmFsdGVybmF0ZTtkLmNoaWxkRXhwaXJhdGlvblRpbWU8YiYmKGQuY2hpbGRFeHBpcmF0aW9uVGltZT1iKTtudWxsIT09YyYmYy5jaGlsZEV4cGlyYXRpb25UaW1lPGImJihjLmNoaWxkRXhwaXJhdGlvblRpbWU9Yik7aWYobnVsbD09PWQucmV0dXJuJiYzPT09ZC50YWcpe2U9ZC5zdGF0ZU5vZGU7YnJlYWt9ZD1kLnJldHVybn1udWxsIT09ZSYmKGI+ZS5maXJzdFBlbmRpbmdUaW1lJiYoZS5maXJzdFBlbmRpbmdUaW1lPWIpLGE9ZS5sYXN0UGVuZGluZ1RpbWUsMD09PWF8fGI8YSkmJihlLmxhc3RQZW5kaW5nVGltZT1cbmIpO3JldHVybiBlfWZ1bmN0aW9uIFppKGEsYixjKXtpZihhLmNhbGxiYWNrRXhwaXJhdGlvblRpbWU8Yyl7dmFyIGQ9YS5jYWxsYmFja05vZGU7bnVsbCE9PWQmJmQhPT1tZiYmYWYoZCk7YS5jYWxsYmFja0V4cGlyYXRpb25UaW1lPWM7MTA3Mzc0MTgyMz09PWM/YS5jYWxsYmFja05vZGU9eGYoJGkuYmluZChudWxsLGEsWi5iaW5kKG51bGwsYSxjKSkpOihkPW51bGwsMSE9PWMmJihkPXt0aW1lb3V0OjEwKigxMDczNzQxODIxLWMpLXNmKCl9KSxhLmNhbGxiYWNrTm9kZT13ZihiLCRpLmJpbmQobnVsbCxhLFouYmluZChudWxsLGEsYykpLGQpKX19ZnVuY3Rpb24gJGkoYSxiLGMpe3ZhciBkPWEuY2FsbGJhY2tOb2RlLGU9bnVsbDt0cnl7cmV0dXJuIGU9YihjKSxudWxsIT09ZT8kaS5iaW5kKG51bGwsYSxlKTpudWxsfWZpbmFsbHl7bnVsbD09PWUmJmQ9PT1hLmNhbGxiYWNrTm9kZSYmKGEuY2FsbGJhY2tOb2RlPW51bGwsYS5jYWxsYmFja0V4cGlyYXRpb25UaW1lPTApfX1cbmZ1bmN0aW9uIGFqKCl7KFUmKDF8Q2l8RGkpKT09PVQmJihiaigpLGNqKCkpfWZ1bmN0aW9uIGRqKGEsYil7dmFyIGM9YS5maXJzdEJhdGNoO3JldHVybiBudWxsIT09YyYmYy5fZGVmZXImJmMuX2V4cGlyYXRpb25UaW1lPj1iPyh3Zig5NyxmdW5jdGlvbigpe2MuX29uQ29tcGxldGUoKTtyZXR1cm4gbnVsbH0pLCEwKTohMX1mdW5jdGlvbiBiaigpe2lmKG51bGwhPT1UaSl7dmFyIGE9VGk7VGk9bnVsbDthLmZvckVhY2goZnVuY3Rpb24oYSxjKXt4ZihaLmJpbmQobnVsbCxjLGEpKX0pO08oKX19ZnVuY3Rpb24gZWooYSxiKXt2YXIgYz1VO1V8PTE7dHJ5e3JldHVybiBhKGIpfWZpbmFsbHl7VT1jLFU9PT1UJiZPKCl9fWZ1bmN0aW9uIGZqKGEsYixjLGQpe3ZhciBlPVU7VXw9NDt0cnl7cmV0dXJuIHZmKDk4LGEuYmluZChudWxsLGIsYyxkKSl9ZmluYWxseXtVPWUsVT09PVQmJk8oKX19XG5mdW5jdGlvbiBnaihhLGIpe3ZhciBjPVU7VSY9LTI7VXw9Qmk7dHJ5e3JldHVybiBhKGIpfWZpbmFsbHl7VT1jLFU9PT1UJiZPKCl9fVxuZnVuY3Rpb24gaGooYSxiKXthLmZpbmlzaGVkV29yaz1udWxsO2EuZmluaXNoZWRFeHBpcmF0aW9uVGltZT0wO3ZhciBjPWEudGltZW91dEhhbmRsZTstMSE9PWMmJihhLnRpbWVvdXRIYW5kbGU9LTEsTWUoYykpO2lmKG51bGwhPT1WKWZvcihjPVYucmV0dXJuO251bGwhPT1jOyl7dmFyIGQ9Yztzd2l0Y2goZC50YWcpe2Nhc2UgMTp2YXIgZT1kLnR5cGUuY2hpbGRDb250ZXh0VHlwZXM7bnVsbCE9PWUmJnZvaWQgMCE9PWUmJlRlKGQpO2JyZWFrO2Nhc2UgMzpCZyhkKTtVZShkKTticmVhaztjYXNlIDU6RGcoZCk7YnJlYWs7Y2FzZSA0OkJnKGQpO2JyZWFrO2Nhc2UgMTM6SChQLGQpO2JyZWFrO2Nhc2UgMTk6SChQLGQpO2JyZWFrO2Nhc2UgMTA6SWYoZCl9Yz1jLnJldHVybn1KaT1hO1Y9b2coYS5jdXJyZW50LG51bGwsYik7Vz1iO1g9RWk7TGk9S2k9MTA3Mzc0MTgyMztNaT1udWxsO05pPSExfVxuZnVuY3Rpb24gWihhLGIsYyl7aWYoKFUmKENpfERpKSkhPT1UKXRocm93IHQoRXJyb3IoMzI3KSk7aWYoYS5maXJzdFBlbmRpbmdUaW1lPGIpcmV0dXJuIG51bGw7aWYoYyYmYS5maW5pc2hlZEV4cGlyYXRpb25UaW1lPT09YilyZXR1cm4gaWouYmluZChudWxsLGEpO2NqKCk7aWYoYSE9PUppfHxiIT09VyloaihhLGIpO2Vsc2UgaWYoWD09PUhpKWlmKE5pKWhqKGEsYik7ZWxzZXt2YXIgZD1hLmxhc3RQZW5kaW5nVGltZTtpZihkPGIpcmV0dXJuIFouYmluZChudWxsLGEsZCl9aWYobnVsbCE9PVYpe2Q9VTtVfD1DaTt2YXIgZT16aS5jdXJyZW50O251bGw9PT1lJiYoZT1oaCk7emkuY3VycmVudD1oaDtpZihjKXtpZigxMDczNzQxODIzIT09Yil7dmFyIGY9Y2coKTtpZihmPGIpcmV0dXJuIFU9ZCxHZigpLHppLmN1cnJlbnQ9ZSxaLmJpbmQobnVsbCxhLGYpfX1lbHNlIFdpPTA7ZG8gdHJ5e2lmKGMpZm9yKDtudWxsIT09VjspVj1qaihWKTtlbHNlIGZvcig7bnVsbCE9PVYmJiFiZigpOylWPVxuamooVik7YnJlYWt9Y2F0Y2gocmIpe0dmKCk7aWgoKTtmPVY7aWYobnVsbD09PWZ8fG51bGw9PT1mLnJldHVybil0aHJvdyBoaihhLGIpLFU9ZCxyYjthOnt2YXIgaD1hLGc9Zi5yZXR1cm4saz1mLGw9cmIsbj1XO2suZWZmZWN0VGFnfD0xMDI0O2suZmlyc3RFZmZlY3Q9ay5sYXN0RWZmZWN0PW51bGw7aWYobnVsbCE9PWwmJlwib2JqZWN0XCI9PT10eXBlb2YgbCYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGwudGhlbil7dmFyIHo9bCx4PTAhPT0oUC5jdXJyZW50JkZnKTtsPWc7ZG97dmFyIHY7aWYodj0xMz09PWwudGFnKW51bGwhPT1sLm1lbW9pemVkU3RhdGU/dj0hMToodj1sLm1lbW9pemVkUHJvcHMsdj12b2lkIDA9PT12LmZhbGxiYWNrPyExOiEwIT09di51bnN0YWJsZV9hdm9pZFRoaXNGYWxsYmFjaz8hMDp4PyExOiEwKTtpZih2KXtnPWwudXBkYXRlUXVldWU7bnVsbD09PWc/KGc9bmV3IFNldCxnLmFkZCh6KSxsLnVwZGF0ZVF1ZXVlPWcpOmcuYWRkKHopO2lmKDA9PT0obC5tb2RlJlxuMikpe2wuZWZmZWN0VGFnfD02NDtrLmVmZmVjdFRhZyY9LTE5NTc7MT09PWsudGFnJiYobnVsbD09PWsuYWx0ZXJuYXRlP2sudGFnPTE3OihuPVFmKDEwNzM3NDE4MjMsbnVsbCksbi50YWc9MixTZihrLG4pKSk7ay5leHBpcmF0aW9uVGltZT0xMDczNzQxODIzO2JyZWFrIGF9az1oO2g9bjt4PWsucGluZ0NhY2hlO251bGw9PT14Pyh4PWsucGluZ0NhY2hlPW5ldyBzaSxnPW5ldyBTZXQseC5zZXQoeixnKSk6KGc9eC5nZXQoeiksdm9pZCAwPT09ZyYmKGc9bmV3IFNldCx4LnNldCh6LGcpKSk7Zy5oYXMoaCl8fChnLmFkZChoKSxrPWtqLmJpbmQobnVsbCxrLHosaCksei50aGVuKGssaykpO2wuZWZmZWN0VGFnfD0yMDQ4O2wuZXhwaXJhdGlvblRpbWU9bjticmVhayBhfWw9bC5yZXR1cm59d2hpbGUobnVsbCE9PWwpO2w9RXJyb3IoKG9jKGsudHlwZSl8fFwiQSBSZWFjdCBjb21wb25lbnRcIikrXCIgc3VzcGVuZGVkIHdoaWxlIHJlbmRlcmluZywgYnV0IG5vIGZhbGxiYWNrIFVJIHdhcyBzcGVjaWZpZWQuXFxuXFxuQWRkIGEgPFN1c3BlbnNlIGZhbGxiYWNrPS4uLj4gY29tcG9uZW50IGhpZ2hlciBpbiB0aGUgdHJlZSB0byBwcm92aWRlIGEgbG9hZGluZyBpbmRpY2F0b3Igb3IgcGxhY2Vob2xkZXIgdG8gZGlzcGxheS5cIitcbnBjKGspKX1YIT09SWkmJihYPUZpKTtsPWJpKGwsayk7az1nO2Rve3N3aXRjaChrLnRhZyl7Y2FzZSAzOmsuZWZmZWN0VGFnfD0yMDQ4O2suZXhwaXJhdGlvblRpbWU9bjtuPXRpKGssbCxuKTtUZihrLG4pO2JyZWFrIGE7Y2FzZSAxOmlmKHo9bCxoPWsudHlwZSxnPWsuc3RhdGVOb2RlLDA9PT0oay5lZmZlY3RUYWcmNjQpJiYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGguZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yfHxudWxsIT09ZyYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkQ2F0Y2gmJihudWxsPT09eGl8fCF4aS5oYXMoZykpKSl7ay5lZmZlY3RUYWd8PTIwNDg7ay5leHBpcmF0aW9uVGltZT1uO249d2koayx6LG4pO1RmKGssbik7YnJlYWsgYX19az1rLnJldHVybn13aGlsZShudWxsIT09ayl9Vj1saihmKX13aGlsZSgxKTtVPWQ7R2YoKTt6aS5jdXJyZW50PWU7aWYobnVsbCE9PVYpcmV0dXJuIFouYmluZChudWxsLGEsYil9YS5maW5pc2hlZFdvcms9YS5jdXJyZW50LmFsdGVybmF0ZTtcbmEuZmluaXNoZWRFeHBpcmF0aW9uVGltZT1iO2lmKGRqKGEsYikpcmV0dXJuIG51bGw7Smk9bnVsbDtzd2l0Y2goWCl7Y2FzZSBFaTp0aHJvdyB0KEVycm9yKDMyOCkpO2Nhc2UgRmk6cmV0dXJuIGQ9YS5sYXN0UGVuZGluZ1RpbWUsZDxiP1ouYmluZChudWxsLGEsZCk6Yz9pai5iaW5kKG51bGwsYSk6KGhqKGEsYikseGYoWi5iaW5kKG51bGwsYSxiKSksbnVsbCk7Y2FzZSBHaTppZigxMDczNzQxODIzPT09S2kmJiFjJiYoYz1waStPaS1zZigpLDEwPGMpKXtpZihOaSlyZXR1cm4gaGooYSxiKSxaLmJpbmQobnVsbCxhLGIpO2Q9YS5sYXN0UGVuZGluZ1RpbWU7aWYoZDxiKXJldHVybiBaLmJpbmQobnVsbCxhLGQpO2EudGltZW91dEhhbmRsZT1MZShpai5iaW5kKG51bGwsYSksYyk7cmV0dXJuIG51bGx9cmV0dXJuIGlqLmJpbmQobnVsbCxhKTtjYXNlIEhpOmlmKCFjKXtpZihOaSlyZXR1cm4gaGooYSxiKSxaLmJpbmQobnVsbCxhLGIpO2M9YS5sYXN0UGVuZGluZ1RpbWU7aWYoYzxiKXJldHVybiBaLmJpbmQobnVsbCxcbmEsYyk7MTA3Mzc0MTgyMyE9PUxpP2M9MTAqKDEwNzM3NDE4MjEtTGkpLXNmKCk6MTA3Mzc0MTgyMz09PUtpP2M9MDooYz0xMCooMTA3Mzc0MTgyMS1LaSktNUUzLGQ9c2YoKSxiPTEwKigxMDczNzQxODIxLWIpLWQsYz1kLWMsMD5jJiYoYz0wKSxjPSgxMjA+Yz8xMjA6NDgwPmM/NDgwOjEwODA+Yz8xMDgwOjE5MjA+Yz8xOTIwOjNFMz5jPzNFMzo0MzIwPmM/NDMyMDoxOTYwKnlpKGMvMTk2MCkpLWMsYjxjJiYoYz1iKSk7aWYoMTA8YylyZXR1cm4gYS50aW1lb3V0SGFuZGxlPUxlKGlqLmJpbmQobnVsbCxhKSxjKSxudWxsfXJldHVybiBpai5iaW5kKG51bGwsYSk7Y2FzZSBJaTpyZXR1cm4hYyYmMTA3Mzc0MTgyMyE9PUtpJiZudWxsIT09TWkmJihkPUtpLGU9TWksYj1lLmJ1c3lNaW5EdXJhdGlvbk1zfDAsMD49Yj9iPTA6KGM9ZS5idXN5RGVsYXlNc3wwLGQ9c2YoKS0oMTAqKDEwNzM3NDE4MjEtZCktKGUudGltZW91dE1zfDB8fDVFMykpLGI9ZDw9Yz8wOmMrYi1kKSwxMDxiKT8oYS50aW1lb3V0SGFuZGxlPVxuTGUoaWouYmluZChudWxsLGEpLGIpLG51bGwpOmlqLmJpbmQobnVsbCxhKTtkZWZhdWx0OnRocm93IHQoRXJyb3IoMzI5KSk7fX1mdW5jdGlvbiBYZihhLGIpe2E8S2kmJjE8YSYmKEtpPWEpO251bGwhPT1iJiZhPExpJiYxPGEmJihMaT1hLE1pPWIpfWZ1bmN0aW9uIGpqKGEpe3ZhciBiPW1qKGEuYWx0ZXJuYXRlLGEsVyk7YS5tZW1vaXplZFByb3BzPWEucGVuZGluZ1Byb3BzO251bGw9PT1iJiYoYj1saihhKSk7QWkuY3VycmVudD1udWxsO3JldHVybiBifVxuZnVuY3Rpb24gbGooYSl7Vj1hO2Rve3ZhciBiPVYuYWx0ZXJuYXRlO2E9Vi5yZXR1cm47aWYoMD09PShWLmVmZmVjdFRhZyYxMDI0KSl7YTp7dmFyIGM9YjtiPVY7dmFyIGQ9VyxlPWIucGVuZGluZ1Byb3BzO3N3aXRjaChiLnRhZyl7Y2FzZSAyOmJyZWFrO2Nhc2UgMTY6YnJlYWs7Y2FzZSAxNTpjYXNlIDA6YnJlYWs7Y2FzZSAxOk4oYi50eXBlKSYmVGUoYik7YnJlYWs7Y2FzZSAzOkJnKGIpO1VlKGIpO2Q9Yi5zdGF0ZU5vZGU7ZC5wZW5kaW5nQ29udGV4dCYmKGQuY29udGV4dD1kLnBlbmRpbmdDb250ZXh0LGQucGVuZGluZ0NvbnRleHQ9bnVsbCk7aWYobnVsbD09PWN8fG51bGw9PT1jLmNoaWxkKUJoKGIpLGIuZWZmZWN0VGFnJj0tMztVaChiKTticmVhaztjYXNlIDU6RGcoYik7ZD16Zyh5Zy5jdXJyZW50KTt2YXIgZj1iLnR5cGU7aWYobnVsbCE9PWMmJm51bGwhPWIuc3RhdGVOb2RlKVZoKGMsYixmLGUsZCksYy5yZWYhPT1iLnJlZiYmKGIuZWZmZWN0VGFnfD0xMjgpO2Vsc2UgaWYoZSl7dmFyIGg9XG56Zyh3Zy5jdXJyZW50KTtpZihCaChiKSl7Yz1iO2U9dm9pZCAwO2Y9Yy5zdGF0ZU5vZGU7dmFyIGc9Yy50eXBlLGs9Yy5tZW1vaXplZFByb3BzO2ZbRmFdPWM7ZltHYV09aztzd2l0Y2goZyl7Y2FzZSBcImlmcmFtZVwiOmNhc2UgXCJvYmplY3RcIjpjYXNlIFwiZW1iZWRcIjpHKFwibG9hZFwiLGYpO2JyZWFrO2Nhc2UgXCJ2aWRlb1wiOmNhc2UgXCJhdWRpb1wiOmZvcih2YXIgbD0wO2w8YmIubGVuZ3RoO2wrKylHKGJiW2xdLGYpO2JyZWFrO2Nhc2UgXCJzb3VyY2VcIjpHKFwiZXJyb3JcIixmKTticmVhaztjYXNlIFwiaW1nXCI6Y2FzZSBcImltYWdlXCI6Y2FzZSBcImxpbmtcIjpHKFwiZXJyb3JcIixmKTtHKFwibG9hZFwiLGYpO2JyZWFrO2Nhc2UgXCJmb3JtXCI6RyhcInJlc2V0XCIsZik7RyhcInN1Ym1pdFwiLGYpO2JyZWFrO2Nhc2UgXCJkZXRhaWxzXCI6RyhcInRvZ2dsZVwiLGYpO2JyZWFrO2Nhc2UgXCJpbnB1dFwiOkNjKGYsayk7RyhcImludmFsaWRcIixmKTtGZShkLFwib25DaGFuZ2VcIik7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmYuX3dyYXBwZXJTdGF0ZT1cbnt3YXNNdWx0aXBsZTohIWsubXVsdGlwbGV9O0coXCJpbnZhbGlkXCIsZik7RmUoZCxcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOm9lKGYsayksRyhcImludmFsaWRcIixmKSxGZShkLFwib25DaGFuZ2VcIil9RGUoZyxrKTtsPW51bGw7Zm9yKGUgaW4gaylrLmhhc093blByb3BlcnR5KGUpJiYoaD1rW2VdLFwiY2hpbGRyZW5cIj09PWU/XCJzdHJpbmdcIj09PXR5cGVvZiBoP2YudGV4dENvbnRlbnQhPT1oJiYobD1bXCJjaGlsZHJlblwiLGhdKTpcIm51bWJlclwiPT09dHlwZW9mIGgmJmYudGV4dENvbnRlbnQhPT1cIlwiK2gmJihsPVtcImNoaWxkcmVuXCIsXCJcIitoXSk6aWEuaGFzT3duUHJvcGVydHkoZSkmJm51bGwhPWgmJkZlKGQsZSkpO3N3aXRjaChnKXtjYXNlIFwiaW5wdXRcIjpWYihmKTtHYyhmLGssITApO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOlZiKGYpO3FlKGYsayk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJvcHRpb25cIjpicmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIj09PXR5cGVvZiBrLm9uQ2xpY2smJlxuKGYub25jbGljaz1HZSl9ZD1sO2MudXBkYXRlUXVldWU9ZDtudWxsIT09ZCYmU2goYil9ZWxzZXtrPWY7Yz1lO2c9YjtsPTk9PT1kLm5vZGVUeXBlP2Q6ZC5vd25lckRvY3VtZW50O2g9PT1yZS5odG1sJiYoaD1zZShrKSk7aD09PXJlLmh0bWw/XCJzY3JpcHRcIj09PWs/KGs9bC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLGsuaW5uZXJIVE1MPVwiPHNjcmlwdD5cXHgzYy9zY3JpcHQ+XCIsbD1rLnJlbW92ZUNoaWxkKGsuZmlyc3RDaGlsZCkpOlwic3RyaW5nXCI9PT10eXBlb2YgYy5pcz9sPWwuY3JlYXRlRWxlbWVudChrLHtpczpjLmlzfSk6KGw9bC5jcmVhdGVFbGVtZW50KGspLFwic2VsZWN0XCI9PT1rJiYoaz1sLGMubXVsdGlwbGU/ay5tdWx0aXBsZT0hMDpjLnNpemUmJihrLnNpemU9Yy5zaXplKSkpOmw9bC5jcmVhdGVFbGVtZW50TlMoaCxrKTtrPWw7a1tGYV09ZztrW0dhXT1jO2M9aztUaChjLGIsITEsITEpO2c9Yzt2YXIgbj1kLHo9RWUoZixlKTtzd2l0Y2goZil7Y2FzZSBcImlmcmFtZVwiOmNhc2UgXCJvYmplY3RcIjpjYXNlIFwiZW1iZWRcIjpHKFwibG9hZFwiLFxuZyk7ZD1lO2JyZWFrO2Nhc2UgXCJ2aWRlb1wiOmNhc2UgXCJhdWRpb1wiOmZvcihkPTA7ZDxiYi5sZW5ndGg7ZCsrKUcoYmJbZF0sZyk7ZD1lO2JyZWFrO2Nhc2UgXCJzb3VyY2VcIjpHKFwiZXJyb3JcIixnKTtkPWU7YnJlYWs7Y2FzZSBcImltZ1wiOmNhc2UgXCJpbWFnZVwiOmNhc2UgXCJsaW5rXCI6RyhcImVycm9yXCIsZyk7RyhcImxvYWRcIixnKTtkPWU7YnJlYWs7Y2FzZSBcImZvcm1cIjpHKFwicmVzZXRcIixnKTtHKFwic3VibWl0XCIsZyk7ZD1lO2JyZWFrO2Nhc2UgXCJkZXRhaWxzXCI6RyhcInRvZ2dsZVwiLGcpO2Q9ZTticmVhaztjYXNlIFwiaW5wdXRcIjpDYyhnLGUpO2Q9QmMoZyxlKTtHKFwiaW52YWxpZFwiLGcpO0ZlKG4sXCJvbkNoYW5nZVwiKTticmVhaztjYXNlIFwib3B0aW9uXCI6ZD1sZShnLGUpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpnLl93cmFwcGVyU3RhdGU9e3dhc011bHRpcGxlOiEhZS5tdWx0aXBsZX07ZD1tKHt9LGUse3ZhbHVlOnZvaWQgMH0pO0coXCJpbnZhbGlkXCIsZyk7RmUobixcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOm9lKGcsXG5lKTtkPW5lKGcsZSk7RyhcImludmFsaWRcIixnKTtGZShuLFwib25DaGFuZ2VcIik7YnJlYWs7ZGVmYXVsdDpkPWV9RGUoZixkKTtrPXZvaWQgMDtsPWY7aD1nO3ZhciB4PWQ7Zm9yKGsgaW4geClpZih4Lmhhc093blByb3BlcnR5KGspKXt2YXIgdj14W2tdO1wic3R5bGVcIj09PWs/QWUoaCx2KTpcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1rPyh2PXY/di5fX2h0bWw6dm9pZCAwLG51bGwhPXYmJnZlKGgsdikpOlwiY2hpbGRyZW5cIj09PWs/XCJzdHJpbmdcIj09PXR5cGVvZiB2PyhcInRleHRhcmVhXCIhPT1sfHxcIlwiIT09dikmJndlKGgsdik6XCJudW1iZXJcIj09PXR5cGVvZiB2JiZ3ZShoLFwiXCIrdik6XCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWsmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1rJiZcImF1dG9Gb2N1c1wiIT09ayYmKGlhLmhhc093blByb3BlcnR5KGspP251bGwhPXYmJkZlKG4sayk6bnVsbCE9diYmemMoaCxrLHYseikpfXN3aXRjaChmKXtjYXNlIFwiaW5wdXRcIjpWYihnKTtcbkdjKGcsZSwhMSk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6VmIoZyk7cWUoZyxlKTticmVhaztjYXNlIFwib3B0aW9uXCI6bnVsbCE9ZS52YWx1ZSYmZy5zZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiLFwiXCIrQWMoZS52YWx1ZSkpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpkPWc7Zz1lO2QubXVsdGlwbGU9ISFnLm11bHRpcGxlO2s9Zy52YWx1ZTtudWxsIT1rP21lKGQsISFnLm11bHRpcGxlLGssITEpOm51bGwhPWcuZGVmYXVsdFZhbHVlJiZtZShkLCEhZy5tdWx0aXBsZSxnLmRlZmF1bHRWYWx1ZSwhMCk7YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5vbkNsaWNrJiYoZy5vbmNsaWNrPUdlKX1KZShmLGUpJiZTaChiKTtiLnN0YXRlTm9kZT1jfW51bGwhPT1iLnJlZiYmKGIuZWZmZWN0VGFnfD0xMjgpfWVsc2UgaWYobnVsbD09PWIuc3RhdGVOb2RlKXRocm93IHQoRXJyb3IoMTY2KSk7YnJlYWs7Y2FzZSA2OmlmKGMmJm51bGwhPWIuc3RhdGVOb2RlKVdoKGMsYixjLm1lbW9pemVkUHJvcHMsXG5lKTtlbHNle2lmKFwic3RyaW5nXCIhPT10eXBlb2YgZSYmbnVsbD09PWIuc3RhdGVOb2RlKXRocm93IHQoRXJyb3IoMTY2KSk7Yz16Zyh5Zy5jdXJyZW50KTt6Zyh3Zy5jdXJyZW50KTtCaChiKT8oZD1iLnN0YXRlTm9kZSxjPWIubWVtb2l6ZWRQcm9wcyxkW0ZhXT1iLGQubm9kZVZhbHVlIT09YyYmU2goYikpOihkPWIsYz0oOT09PWMubm9kZVR5cGU/YzpjLm93bmVyRG9jdW1lbnQpLmNyZWF0ZVRleHROb2RlKGUpLGNbRmFdPWIsZC5zdGF0ZU5vZGU9Yyl9YnJlYWs7Y2FzZSAxMTpicmVhaztjYXNlIDEzOkgoUCxiKTtlPWIubWVtb2l6ZWRTdGF0ZTtpZigwIT09KGIuZWZmZWN0VGFnJjY0KSl7Yi5leHBpcmF0aW9uVGltZT1kO2JyZWFrIGF9ZD1udWxsIT09ZTtlPSExO251bGw9PT1jP0JoKGIpOihmPWMubWVtb2l6ZWRTdGF0ZSxlPW51bGwhPT1mLGR8fG51bGw9PT1mfHwoZj1jLmNoaWxkLnNpYmxpbmcsbnVsbCE9PWYmJihnPWIuZmlyc3RFZmZlY3QsbnVsbCE9PWc/KGIuZmlyc3RFZmZlY3Q9XG5mLGYubmV4dEVmZmVjdD1nKTooYi5maXJzdEVmZmVjdD1iLmxhc3RFZmZlY3Q9ZixmLm5leHRFZmZlY3Q9bnVsbCksZi5lZmZlY3RUYWc9OCkpKTtpZihkJiYhZSYmMCE9PShiLm1vZGUmMikpaWYobnVsbD09PWMmJiEwIT09Yi5tZW1vaXplZFByb3BzLnVuc3RhYmxlX2F2b2lkVGhpc0ZhbGxiYWNrfHwwIT09KFAuY3VycmVudCZGZykpWD09PUVpJiYoWD1HaSk7ZWxzZSBpZihYPT09RWl8fFg9PT1HaSlYPUhpO2lmKGR8fGUpYi5lZmZlY3RUYWd8PTQ7YnJlYWs7Y2FzZSA3OmJyZWFrO2Nhc2UgODpicmVhaztjYXNlIDEyOmJyZWFrO2Nhc2UgNDpCZyhiKTtVaChiKTticmVhaztjYXNlIDEwOklmKGIpO2JyZWFrO2Nhc2UgOTpicmVhaztjYXNlIDE0OmJyZWFrO2Nhc2UgMTc6TihiLnR5cGUpJiZUZShiKTticmVhaztjYXNlIDE4OmJyZWFrO2Nhc2UgMTk6SChQLGIpO2U9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGw9PT1lKWJyZWFrO2Y9MCE9PShiLmVmZmVjdFRhZyY2NCk7Zz1lLnJlbmRlcmluZztcbmlmKG51bGw9PT1nKWlmKGYpJGgoZSwhMSk7ZWxzZXtpZihYIT09RWl8fG51bGwhPT1jJiYwIT09KGMuZWZmZWN0VGFnJjY0KSlmb3IoYz1iLmNoaWxkO251bGwhPT1jOyl7Zz1IZyhjKTtpZihudWxsIT09Zyl7Yi5lZmZlY3RUYWd8PTY0OyRoKGUsITEpO2M9Zy51cGRhdGVRdWV1ZTtudWxsIT09YyYmKGIudXBkYXRlUXVldWU9YyxiLmVmZmVjdFRhZ3w9NCk7Yi5maXJzdEVmZmVjdD1iLmxhc3RFZmZlY3Q9bnVsbDtmb3IoYz1iLmNoaWxkO251bGwhPT1jOyllPWMsZj1kLGUuZWZmZWN0VGFnJj0yLGUubmV4dEVmZmVjdD1udWxsLGUuZmlyc3RFZmZlY3Q9bnVsbCxlLmxhc3RFZmZlY3Q9bnVsbCxnPWUuYWx0ZXJuYXRlLG51bGw9PT1nPyhlLmNoaWxkRXhwaXJhdGlvblRpbWU9MCxlLmV4cGlyYXRpb25UaW1lPWYsZS5jaGlsZD1udWxsLGUubWVtb2l6ZWRQcm9wcz1udWxsLGUubWVtb2l6ZWRTdGF0ZT1udWxsLGUudXBkYXRlUXVldWU9bnVsbCxlLmRlcGVuZGVuY2llcz1udWxsKTooZS5jaGlsZEV4cGlyYXRpb25UaW1lPVxuZy5jaGlsZEV4cGlyYXRpb25UaW1lLGUuZXhwaXJhdGlvblRpbWU9Zy5leHBpcmF0aW9uVGltZSxlLmNoaWxkPWcuY2hpbGQsZS5tZW1vaXplZFByb3BzPWcubWVtb2l6ZWRQcm9wcyxlLm1lbW9pemVkU3RhdGU9Zy5tZW1vaXplZFN0YXRlLGUudXBkYXRlUXVldWU9Zy51cGRhdGVRdWV1ZSxmPWcuZGVwZW5kZW5jaWVzLGUuZGVwZW5kZW5jaWVzPW51bGw9PT1mP251bGw6e2V4cGlyYXRpb25UaW1lOmYuZXhwaXJhdGlvblRpbWUsZmlyc3RDb250ZXh0OmYuZmlyc3RDb250ZXh0LHJlc3BvbmRlcnM6Zi5yZXNwb25kZXJzfSksYz1jLnNpYmxpbmc7SihQLFAuY3VycmVudCZFZ3xHZyxiKTtiPWIuY2hpbGQ7YnJlYWsgYX1jPWMuc2libGluZ319ZWxzZXtpZighZilpZihjPUhnKGcpLG51bGwhPT1jKXtpZihiLmVmZmVjdFRhZ3w9NjQsZj0hMCwkaChlLCEwKSxudWxsPT09ZS50YWlsJiZcImhpZGRlblwiPT09ZS50YWlsTW9kZSl7ZD1jLnVwZGF0ZVF1ZXVlO251bGwhPT1kJiYoYi51cGRhdGVRdWV1ZT1cbmQsYi5lZmZlY3RUYWd8PTQpO2I9Yi5sYXN0RWZmZWN0PWUubGFzdEVmZmVjdDtudWxsIT09YiYmKGIubmV4dEVmZmVjdD1udWxsKTticmVha319ZWxzZSBzZigpPmUudGFpbEV4cGlyYXRpb24mJjE8ZCYmKGIuZWZmZWN0VGFnfD02NCxmPSEwLCRoKGUsITEpLGIuZXhwaXJhdGlvblRpbWU9Yi5jaGlsZEV4cGlyYXRpb25UaW1lPWQtMSk7ZS5pc0JhY2t3YXJkcz8oZy5zaWJsaW5nPWIuY2hpbGQsYi5jaGlsZD1nKTooZD1lLmxhc3QsbnVsbCE9PWQ/ZC5zaWJsaW5nPWc6Yi5jaGlsZD1nLGUubGFzdD1nKX1pZihudWxsIT09ZS50YWlsKXswPT09ZS50YWlsRXhwaXJhdGlvbiYmKGUudGFpbEV4cGlyYXRpb249c2YoKSs1MDApO2Q9ZS50YWlsO2UucmVuZGVyaW5nPWQ7ZS50YWlsPWQuc2libGluZztlLmxhc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0O2Quc2libGluZz1udWxsO2M9UC5jdXJyZW50O2M9Zj9jJkVnfEdnOmMmRWc7SihQLGMsYik7Yj1kO2JyZWFrIGF9YnJlYWs7Y2FzZSAyMDpicmVhaztcbmRlZmF1bHQ6dGhyb3cgdChFcnJvcigxNTYpKTt9Yj1udWxsfWQ9VjtpZigxPT09V3x8MSE9PWQuY2hpbGRFeHBpcmF0aW9uVGltZSl7Yz0wO2ZvcihlPWQuY2hpbGQ7bnVsbCE9PWU7KWY9ZS5leHBpcmF0aW9uVGltZSxnPWUuY2hpbGRFeHBpcmF0aW9uVGltZSxmPmMmJihjPWYpLGc+YyYmKGM9ZyksZT1lLnNpYmxpbmc7ZC5jaGlsZEV4cGlyYXRpb25UaW1lPWN9aWYobnVsbCE9PWIpcmV0dXJuIGI7bnVsbCE9PWEmJjA9PT0oYS5lZmZlY3RUYWcmMTAyNCkmJihudWxsPT09YS5maXJzdEVmZmVjdCYmKGEuZmlyc3RFZmZlY3Q9Vi5maXJzdEVmZmVjdCksbnVsbCE9PVYubGFzdEVmZmVjdCYmKG51bGwhPT1hLmxhc3RFZmZlY3QmJihhLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1WLmZpcnN0RWZmZWN0KSxhLmxhc3RFZmZlY3Q9Vi5sYXN0RWZmZWN0KSwxPFYuZWZmZWN0VGFnJiYobnVsbCE9PWEubGFzdEVmZmVjdD9hLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1WOmEuZmlyc3RFZmZlY3Q9VixcbmEubGFzdEVmZmVjdD1WKSl9ZWxzZXtiPWFpKFYsVyk7aWYobnVsbCE9PWIpcmV0dXJuIGIuZWZmZWN0VGFnJj0xMDIzLGI7bnVsbCE9PWEmJihhLmZpcnN0RWZmZWN0PWEubGFzdEVmZmVjdD1udWxsLGEuZWZmZWN0VGFnfD0xMDI0KX1iPVYuc2libGluZztpZihudWxsIT09YilyZXR1cm4gYjtWPWF9d2hpbGUobnVsbCE9PVYpO1g9PT1FaSYmKFg9SWkpO3JldHVybiBudWxsfWZ1bmN0aW9uIGlqKGEpe3ZhciBiPXRmKCk7dmYoOTksbmouYmluZChudWxsLGEsYikpO251bGwhPT1RaSYmd2YoOTcsZnVuY3Rpb24oKXtjaigpO3JldHVybiBudWxsfSk7cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBuaihhLGIpe2NqKCk7aWYoKFUmKENpfERpKSkhPT1UKXRocm93IHQoRXJyb3IoMzI3KSk7dmFyIGM9YS5maW5pc2hlZFdvcmssZD1hLmZpbmlzaGVkRXhwaXJhdGlvblRpbWU7aWYobnVsbD09PWMpcmV0dXJuIG51bGw7YS5maW5pc2hlZFdvcms9bnVsbDthLmZpbmlzaGVkRXhwaXJhdGlvblRpbWU9MDtpZihjPT09YS5jdXJyZW50KXRocm93IHQoRXJyb3IoMTc3KSk7YS5jYWxsYmFja05vZGU9bnVsbDthLmNhbGxiYWNrRXhwaXJhdGlvblRpbWU9MDt2YXIgZT1jLmV4cGlyYXRpb25UaW1lLGY9Yy5jaGlsZEV4cGlyYXRpb25UaW1lO2U9Zj5lP2Y6ZTthLmZpcnN0UGVuZGluZ1RpbWU9ZTtlPGEubGFzdFBlbmRpbmdUaW1lJiYoYS5sYXN0UGVuZGluZ1RpbWU9ZSk7YT09PUppJiYoVj1KaT1udWxsLFc9MCk7MTxjLmVmZmVjdFRhZz9udWxsIT09Yy5sYXN0RWZmZWN0PyhjLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1jLGU9Yy5maXJzdEVmZmVjdCk6ZT1jOmU9Yy5maXJzdEVmZmVjdDtcbmlmKG51bGwhPT1lKXtmPVU7VXw9RGk7QWkuY3VycmVudD1udWxsO0hlPVFkO3ZhciBoPWFlKCk7aWYoYmUoaCkpe2lmKFwic2VsZWN0aW9uU3RhcnRcImluIGgpdmFyIGc9e3N0YXJ0Omguc2VsZWN0aW9uU3RhcnQsZW5kOmguc2VsZWN0aW9uRW5kfTtlbHNlIGE6e2c9KGc9aC5vd25lckRvY3VtZW50KSYmZy5kZWZhdWx0Vmlld3x8d2luZG93O3ZhciBrPWcuZ2V0U2VsZWN0aW9uJiZnLmdldFNlbGVjdGlvbigpO2lmKGsmJjAhPT1rLnJhbmdlQ291bnQpe2c9ay5hbmNob3JOb2RlO3ZhciBsPWsuYW5jaG9yT2Zmc2V0LG49ay5mb2N1c05vZGU7az1rLmZvY3VzT2Zmc2V0O3RyeXtnLm5vZGVUeXBlLG4ubm9kZVR5cGV9Y2F0Y2goemIpe2c9bnVsbDticmVhayBhfXZhciB6PTAseD0tMSx2PS0xLHJiPTAsQmU9MCx1PWgsdz1udWxsO2I6Zm9yKDs7KXtmb3IodmFyIEM7Oyl7dSE9PWd8fDAhPT1sJiYzIT09dS5ub2RlVHlwZXx8KHg9eitsKTt1IT09bnx8MCE9PWsmJjMhPT11Lm5vZGVUeXBlfHxcbih2PXorayk7Mz09PXUubm9kZVR5cGUmJih6Kz11Lm5vZGVWYWx1ZS5sZW5ndGgpO2lmKG51bGw9PT0oQz11LmZpcnN0Q2hpbGQpKWJyZWFrO3c9dTt1PUN9Zm9yKDs7KXtpZih1PT09aClicmVhayBiO3c9PT1nJiYrK3JiPT09bCYmKHg9eik7dz09PW4mJisrQmU9PT1rJiYodj16KTtpZihudWxsIT09KEM9dS5uZXh0U2libGluZykpYnJlYWs7dT13O3c9dS5wYXJlbnROb2RlfXU9Q31nPS0xPT09eHx8LTE9PT12P251bGw6e3N0YXJ0OngsZW5kOnZ9fWVsc2UgZz1udWxsfWc9Z3x8e3N0YXJ0OjAsZW5kOjB9fWVsc2UgZz1udWxsO0llPXtmb2N1c2VkRWxlbTpoLHNlbGVjdGlvblJhbmdlOmd9O1FkPSExO1k9ZTtkbyB0cnl7Zm9yKDtudWxsIT09WTspe2lmKDAhPT0oWS5lZmZlY3RUYWcmMjU2KSl7dmFyIEk9WS5hbHRlcm5hdGU7aD1ZO3N3aXRjaChoLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpoaShKZyxJZyxoKTticmVhaztjYXNlIDE6aWYoaC5lZmZlY3RUYWcmMjU2JiZudWxsIT09XG5JKXt2YXIgRT1JLm1lbW9pemVkUHJvcHMsdWE9SS5tZW1vaXplZFN0YXRlLGdoPWguc3RhdGVOb2RlLG9qPWdoLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKGguZWxlbWVudFR5cGU9PT1oLnR5cGU/RTpBZihoLnR5cGUsRSksdWEpO2doLl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlPW9qfWJyZWFrO2Nhc2UgMzpjYXNlIDU6Y2FzZSA2OmNhc2UgNDpjYXNlIDE3OmJyZWFrO2RlZmF1bHQ6dGhyb3cgdChFcnJvcigxNjMpKTt9fVk9WS5uZXh0RWZmZWN0fX1jYXRjaCh6Yil7aWYobnVsbD09PVkpdGhyb3cgdChFcnJvcigzMzApKTtmaShZLHpiKTtZPVkubmV4dEVmZmVjdH13aGlsZShudWxsIT09WSk7WT1lO2RvIHRyeXtmb3IoST1iO251bGwhPT1ZOyl7dmFyIEE9WS5lZmZlY3RUYWc7QSYxNiYmd2UoWS5zdGF0ZU5vZGUsXCJcIik7aWYoQSYxMjgpe3ZhciBwPVkuYWx0ZXJuYXRlO2lmKG51bGwhPT1wKXt2YXIgcj1wLnJlZjtudWxsIT09ciYmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiByP1xucihudWxsKTpyLmN1cnJlbnQ9bnVsbCl9fXN3aXRjaChBJjE0KXtjYXNlIDI6bmkoWSk7WS5lZmZlY3RUYWcmPS0zO2JyZWFrO2Nhc2UgNjpuaShZKTtZLmVmZmVjdFRhZyY9LTM7b2koWS5hbHRlcm5hdGUsWSk7YnJlYWs7Y2FzZSA0Om9pKFkuYWx0ZXJuYXRlLFkpO2JyZWFrO2Nhc2UgODpFPVk7a2koRSxJKTtFLnJldHVybj1udWxsO0UuY2hpbGQ9bnVsbDtFLm1lbW9pemVkU3RhdGU9bnVsbDtFLnVwZGF0ZVF1ZXVlPW51bGw7RS5kZXBlbmRlbmNpZXM9bnVsbDt2YXIgSz1FLmFsdGVybmF0ZTtudWxsIT09SyYmKEsucmV0dXJuPW51bGwsSy5jaGlsZD1udWxsLEsubWVtb2l6ZWRTdGF0ZT1udWxsLEsudXBkYXRlUXVldWU9bnVsbCxLLmRlcGVuZGVuY2llcz1udWxsKX1ZPVkubmV4dEVmZmVjdH19Y2F0Y2goemIpe2lmKG51bGw9PT1ZKXRocm93IHQoRXJyb3IoMzMwKSk7ZmkoWSx6Yik7WT1ZLm5leHRFZmZlY3R9d2hpbGUobnVsbCE9PVkpO3I9SWU7cD1hZSgpO0E9ci5mb2N1c2VkRWxlbTtcbkk9ci5zZWxlY3Rpb25SYW5nZTtpZihwIT09QSYmQSYmQS5vd25lckRvY3VtZW50JiYkZChBLm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LEEpKXtudWxsIT09SSYmYmUoQSkmJihwPUkuc3RhcnQscj1JLmVuZCx2b2lkIDA9PT1yJiYocj1wKSxcInNlbGVjdGlvblN0YXJ0XCJpbiBBPyhBLnNlbGVjdGlvblN0YXJ0PXAsQS5zZWxlY3Rpb25FbmQ9TWF0aC5taW4ocixBLnZhbHVlLmxlbmd0aCkpOihyPShwPUEub3duZXJEb2N1bWVudHx8ZG9jdW1lbnQpJiZwLmRlZmF1bHRWaWV3fHx3aW5kb3csci5nZXRTZWxlY3Rpb24mJihyPXIuZ2V0U2VsZWN0aW9uKCksRT1BLnRleHRDb250ZW50Lmxlbmd0aCxLPU1hdGgubWluKEkuc3RhcnQsRSksST12b2lkIDA9PT1JLmVuZD9LOk1hdGgubWluKEkuZW5kLEUpLCFyLmV4dGVuZCYmSz5JJiYoRT1JLEk9SyxLPUUpLEU9WmQoQSxLKSx1YT1aZChBLEkpLEUmJnVhJiYoMSE9PXIucmFuZ2VDb3VudHx8ci5hbmNob3JOb2RlIT09RS5ub2RlfHxyLmFuY2hvck9mZnNldCE9PVxuRS5vZmZzZXR8fHIuZm9jdXNOb2RlIT09dWEubm9kZXx8ci5mb2N1c09mZnNldCE9PXVhLm9mZnNldCkmJihwPXAuY3JlYXRlUmFuZ2UoKSxwLnNldFN0YXJ0KEUubm9kZSxFLm9mZnNldCksci5yZW1vdmVBbGxSYW5nZXMoKSxLPkk/KHIuYWRkUmFuZ2UocCksci5leHRlbmQodWEubm9kZSx1YS5vZmZzZXQpKToocC5zZXRFbmQodWEubm9kZSx1YS5vZmZzZXQpLHIuYWRkUmFuZ2UocCkpKSkpKTtwPVtdO2ZvcihyPUE7cj1yLnBhcmVudE5vZGU7KTE9PT1yLm5vZGVUeXBlJiZwLnB1c2goe2VsZW1lbnQ6cixsZWZ0OnIuc2Nyb2xsTGVmdCx0b3A6ci5zY3JvbGxUb3B9KTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgQS5mb2N1cyYmQS5mb2N1cygpO2ZvcihBPTA7QTxwLmxlbmd0aDtBKyspcj1wW0FdLHIuZWxlbWVudC5zY3JvbGxMZWZ0PXIubGVmdCxyLmVsZW1lbnQuc2Nyb2xsVG9wPXIudG9wfUllPW51bGw7UWQ9ISFIZTtIZT1udWxsO2EuY3VycmVudD1jO1k9ZTtkbyB0cnl7Zm9yKEE9ZDtudWxsIT09XG5ZOyl7dmFyICRhPVkuZWZmZWN0VGFnO2lmKCRhJjM2KXt2YXIgbmM9WS5hbHRlcm5hdGU7cD1ZO3I9QTtzd2l0Y2gocC50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6aGkoTWcsTmcscCk7YnJlYWs7Y2FzZSAxOnZhciBtZD1wLnN0YXRlTm9kZTtpZihwLmVmZmVjdFRhZyY0KWlmKG51bGw9PT1uYyltZC5jb21wb25lbnREaWRNb3VudCgpO2Vsc2V7dmFyIEZqPXAuZWxlbWVudFR5cGU9PT1wLnR5cGU/bmMubWVtb2l6ZWRQcm9wczpBZihwLnR5cGUsbmMubWVtb2l6ZWRQcm9wcyk7bWQuY29tcG9uZW50RGlkVXBkYXRlKEZqLG5jLm1lbW9pemVkU3RhdGUsbWQuX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUpfXZhciBYaD1wLnVwZGF0ZVF1ZXVlO251bGwhPT1YaCYmWWYocCxYaCxtZCxyKTticmVhaztjYXNlIDM6dmFyIFloPXAudXBkYXRlUXVldWU7aWYobnVsbCE9PVloKXtLPW51bGw7aWYobnVsbCE9PXAuY2hpbGQpc3dpdGNoKHAuY2hpbGQudGFnKXtjYXNlIDU6Sz1cbnAuY2hpbGQuc3RhdGVOb2RlO2JyZWFrO2Nhc2UgMTpLPXAuY2hpbGQuc3RhdGVOb2RlfVlmKHAsWWgsSyxyKX1icmVhaztjYXNlIDU6dmFyIEdqPXAuc3RhdGVOb2RlO251bGw9PT1uYyYmcC5lZmZlY3RUYWcmNCYmKHI9R2osSmUocC50eXBlLHAubWVtb2l6ZWRQcm9wcykmJnIuZm9jdXMoKSk7YnJlYWs7Y2FzZSA2OmJyZWFrO2Nhc2UgNDpicmVhaztjYXNlIDEyOmJyZWFrO2Nhc2UgMTM6Y2FzZSAxOTpjYXNlIDE3OmNhc2UgMjA6YnJlYWs7ZGVmYXVsdDp0aHJvdyB0KEVycm9yKDE2MykpO319aWYoJGEmMTI4KXt2YXIgbmQ9WS5yZWY7aWYobnVsbCE9PW5kKXt2YXIgWmg9WS5zdGF0ZU5vZGU7c3dpdGNoKFkudGFnKXtjYXNlIDU6dmFyIGdmPVpoO2JyZWFrO2RlZmF1bHQ6Z2Y9Wmh9XCJmdW5jdGlvblwiPT09dHlwZW9mIG5kP25kKGdmKTpuZC5jdXJyZW50PWdmfX0kYSY1MTImJihQaT0hMCk7WT1ZLm5leHRFZmZlY3R9fWNhdGNoKHpiKXtpZihudWxsPT09WSl0aHJvdyB0KEVycm9yKDMzMCkpO1xuZmkoWSx6Yik7WT1ZLm5leHRFZmZlY3R9d2hpbGUobnVsbCE9PVkpO1k9bnVsbDtuZigpO1U9Zn1lbHNlIGEuY3VycmVudD1jO2lmKFBpKVBpPSExLFFpPWEsU2k9ZCxSaT1iO2Vsc2UgZm9yKFk9ZTtudWxsIT09WTspYj1ZLm5leHRFZmZlY3QsWS5uZXh0RWZmZWN0PW51bGwsWT1iO2I9YS5maXJzdFBlbmRpbmdUaW1lOzAhPT1iPygkYT1jZygpLCRhPXpmKCRhLGIpLFppKGEsJGEsYikpOnhpPW51bGw7XCJmdW5jdGlvblwiPT09dHlwZW9mIHBqJiZwaihjLnN0YXRlTm9kZSxkKTsxMDczNzQxODIzPT09Yj9hPT09Vmk/VWkrKzooVWk9MCxWaT1hKTpVaT0wO2lmKHVpKXRocm93IHVpPSExLGE9dmksdmk9bnVsbCxhO2lmKChVJkJpKSE9PVQpcmV0dXJuIG51bGw7TygpO3JldHVybiBudWxsfVxuZnVuY3Rpb24gY2ooKXtpZihudWxsPT09UWkpcmV0dXJuITE7dmFyIGE9UWksYj1TaSxjPVJpO1FpPW51bGw7U2k9MDtSaT05MDtyZXR1cm4gdmYoOTc8Yz85NzpjLHFqLmJpbmQobnVsbCxhLGIpKX1mdW5jdGlvbiBxaihhKXtpZigoVSYoQ2l8RGkpKSE9PVQpdGhyb3cgdChFcnJvcigzMzEpKTt2YXIgYj1VO1V8PURpO2ZvcihhPWEuY3VycmVudC5maXJzdEVmZmVjdDtudWxsIT09YTspe3RyeXt2YXIgYz1hO2lmKDAhPT0oYy5lZmZlY3RUYWcmNTEyKSlzd2l0Y2goYy50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6aGkoUGcsSWcsYyksaGkoSWcsT2csYyl9fWNhdGNoKGQpe2lmKG51bGw9PT1hKXRocm93IHQoRXJyb3IoMzMwKSk7ZmkoYSxkKX1jPWEubmV4dEVmZmVjdDthLm5leHRFZmZlY3Q9bnVsbDthPWN9VT1iO08oKTtyZXR1cm4hMH1cbmZ1bmN0aW9uIHJqKGEsYixjKXtiPWJpKGMsYik7Yj10aShhLGIsMTA3Mzc0MTgyMyk7U2YoYSxiKTthPVlpKGEsMTA3Mzc0MTgyMyk7bnVsbCE9PWEmJlppKGEsOTksMTA3Mzc0MTgyMyl9ZnVuY3Rpb24gZmkoYSxiKXtpZigzPT09YS50YWcpcmooYSxhLGIpO2Vsc2UgZm9yKHZhciBjPWEucmV0dXJuO251bGwhPT1jOyl7aWYoMz09PWMudGFnKXtyaihjLGEsYik7YnJlYWt9ZWxzZSBpZigxPT09Yy50YWcpe3ZhciBkPWMuc3RhdGVOb2RlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLnR5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5jb21wb25lbnREaWRDYXRjaCYmKG51bGw9PT14aXx8IXhpLmhhcyhkKSkpe2E9YmkoYixhKTthPXdpKGMsYSwxMDczNzQxODIzKTtTZihjLGEpO2M9WWkoYywxMDczNzQxODIzKTtudWxsIT09YyYmWmkoYyw5OSwxMDczNzQxODIzKTticmVha319Yz1jLnJldHVybn19XG5mdW5jdGlvbiBraihhLGIsYyl7dmFyIGQ9YS5waW5nQ2FjaGU7bnVsbCE9PWQmJmQuZGVsZXRlKGIpO0ppPT09YSYmVz09PWM/WD09PUhpfHxYPT09R2kmJjEwNzM3NDE4MjM9PT1LaSYmc2YoKS1waTxPaT9oaihhLFcpOk5pPSEwOmEubGFzdFBlbmRpbmdUaW1lPGN8fChiPWEucGluZ1RpbWUsMCE9PWImJmI8Y3x8KGEucGluZ1RpbWU9YyxhLmZpbmlzaGVkRXhwaXJhdGlvblRpbWU9PT1jJiYoYS5maW5pc2hlZEV4cGlyYXRpb25UaW1lPTAsYS5maW5pc2hlZFdvcms9bnVsbCksYj1jZygpLGI9emYoYixjKSxaaShhLGIsYykpKX1mdW5jdGlvbiByaShhLGIpe3ZhciBjPWEuc3RhdGVOb2RlO251bGwhPT1jJiZjLmRlbGV0ZShiKTtjPWNnKCk7Yj1kZyhjLGEsbnVsbCk7Yz16ZihjLGIpO2E9WWkoYSxiKTtudWxsIT09YSYmWmkoYSxjLGIpfXZhciBtaj12b2lkIDA7XG5taj1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9Yi5leHBpcmF0aW9uVGltZTtpZihudWxsIT09YSl7dmFyIGU9Yi5wZW5kaW5nUHJvcHM7aWYoYS5tZW1vaXplZFByb3BzIT09ZXx8TS5jdXJyZW50KUxmPSEwO2Vsc2UgaWYoZDxjKXtMZj0hMTtzd2l0Y2goYi50YWcpe2Nhc2UgMzpOaChiKTtDaCgpO2JyZWFrO2Nhc2UgNTpDZyhiKTtpZihiLm1vZGUmNCYmMSE9PWMmJmUuaGlkZGVuKXJldHVybiBiLmV4cGlyYXRpb25UaW1lPWIuY2hpbGRFeHBpcmF0aW9uVGltZT0xLG51bGw7YnJlYWs7Y2FzZSAxOk4oYi50eXBlKSYmWGUoYik7YnJlYWs7Y2FzZSA0OkFnKGIsYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyk7YnJlYWs7Y2FzZSAxMDpIZihiLGIubWVtb2l6ZWRQcm9wcy52YWx1ZSk7YnJlYWs7Y2FzZSAxMzppZihudWxsIT09Yi5tZW1vaXplZFN0YXRlKXtkPWIuY2hpbGQuY2hpbGRFeHBpcmF0aW9uVGltZTtpZigwIT09ZCYmZD49YylyZXR1cm4gUGgoYSxiLGMpO0ooUCxQLmN1cnJlbnQmXG5FZyxiKTtiPUZoKGEsYixjKTtyZXR1cm4gbnVsbCE9PWI/Yi5zaWJsaW5nOm51bGx9SihQLFAuY3VycmVudCZFZyxiKTticmVhaztjYXNlIDE5OmQ9Yi5jaGlsZEV4cGlyYXRpb25UaW1lPj1jO2lmKDAhPT0oYS5lZmZlY3RUYWcmNjQpKXtpZihkKXJldHVybiBSaChhLGIsYyk7Yi5lZmZlY3RUYWd8PTY0fWU9Yi5tZW1vaXplZFN0YXRlO251bGwhPT1lJiYoZS5yZW5kZXJpbmc9bnVsbCxlLnRhaWw9bnVsbCk7SihQLFAuY3VycmVudCxiKTtpZighZClyZXR1cm4gbnVsbH1yZXR1cm4gRmgoYSxiLGMpfX1lbHNlIExmPSExO2IuZXhwaXJhdGlvblRpbWU9MDtzd2l0Y2goYi50YWcpe2Nhc2UgMjpkPWIudHlwZTtudWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmVmZmVjdFRhZ3w9Mik7YT1iLnBlbmRpbmdQcm9wcztlPVNlKGIsTC5jdXJyZW50KTtLZihiLGMpO2U9ZGgobnVsbCxiLGQsYSxlLGMpO2IuZWZmZWN0VGFnfD0xO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgZSYmXG5udWxsIT09ZSYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGUucmVuZGVyJiZ2b2lkIDA9PT1lLiQkdHlwZW9mKXtiLnRhZz0xO2loKCk7aWYoTihkKSl7dmFyIGY9ITA7WGUoYil9ZWxzZSBmPSExO2IubWVtb2l6ZWRTdGF0ZT1udWxsIT09ZS5zdGF0ZSYmdm9pZCAwIT09ZS5zdGF0ZT9lLnN0YXRlOm51bGw7dmFyIGg9ZC5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7XCJmdW5jdGlvblwiPT09dHlwZW9mIGgmJmJnKGIsZCxoLGEpO2UudXBkYXRlcj1mZztiLnN0YXRlTm9kZT1lO2UuX3JlYWN0SW50ZXJuYWxGaWJlcj1iO2pnKGIsZCxhLGMpO2I9TWgobnVsbCxiLGQsITAsZixjKX1lbHNlIGIudGFnPTAsUyhudWxsLGIsZSxjKSxiPWIuY2hpbGQ7cmV0dXJuIGI7Y2FzZSAxNjplPWIuZWxlbWVudFR5cGU7bnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5lZmZlY3RUYWd8PTIpO2E9Yi5wZW5kaW5nUHJvcHM7ZT1CZihlKTtiLnR5cGU9ZTtmPWIudGFnPXNqKGUpO1xuYT1BZihlLGEpO3N3aXRjaChmKXtjYXNlIDA6Yj1KaChudWxsLGIsZSxhLGMpO2JyZWFrO2Nhc2UgMTpiPUxoKG51bGwsYixlLGEsYyk7YnJlYWs7Y2FzZSAxMTpiPUVoKG51bGwsYixlLGEsYyk7YnJlYWs7Y2FzZSAxNDpiPUdoKG51bGwsYixlLEFmKGUudHlwZSxhKSxkLGMpO2JyZWFrO2RlZmF1bHQ6dGhyb3cgdChFcnJvcigzMDYpLGUsXCJcIik7fXJldHVybiBiO2Nhc2UgMDpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6QWYoZCxlKSxKaChhLGIsZCxlLGMpO2Nhc2UgMTpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6QWYoZCxlKSxMaChhLGIsZCxlLGMpO2Nhc2UgMzpOaChiKTtkPWIudXBkYXRlUXVldWU7aWYobnVsbD09PWQpdGhyb3cgdChFcnJvcigyODIpKTtlPWIubWVtb2l6ZWRTdGF0ZTtlPW51bGwhPT1lP2UuZWxlbWVudDpudWxsO1dmKGIsZCxiLnBlbmRpbmdQcm9wcyxcbm51bGwsYyk7ZD1iLm1lbW9pemVkU3RhdGUuZWxlbWVudDtpZihkPT09ZSlDaCgpLGI9RmgoYSxiLGMpO2Vsc2V7ZT1iLnN0YXRlTm9kZTtpZihlPShudWxsPT09YXx8bnVsbD09PWEuY2hpbGQpJiZlLmh5ZHJhdGUpdWg9TmUoYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mby5maXJzdENoaWxkKSx0aD1iLGU9dmg9ITA7ZT8oYi5lZmZlY3RUYWd8PTIsYi5jaGlsZD11ZyhiLG51bGwsZCxjKSk6KFMoYSxiLGQsYyksQ2goKSk7Yj1iLmNoaWxkfXJldHVybiBiO2Nhc2UgNTpyZXR1cm4gQ2coYiksbnVsbD09PWEmJnpoKGIpLGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZj1udWxsIT09YT9hLm1lbW9pemVkUHJvcHM6bnVsbCxoPWUuY2hpbGRyZW4sS2UoZCxlKT9oPW51bGw6bnVsbCE9PWYmJktlKGQsZikmJihiLmVmZmVjdFRhZ3w9MTYpLEtoKGEsYiksYi5tb2RlJjQmJjEhPT1jJiZlLmhpZGRlbj8oYi5leHBpcmF0aW9uVGltZT1iLmNoaWxkRXhwaXJhdGlvblRpbWU9MSxiPW51bGwpOlxuKFMoYSxiLGgsYyksYj1iLmNoaWxkKSxiO2Nhc2UgNjpyZXR1cm4gbnVsbD09PWEmJnpoKGIpLG51bGw7Y2FzZSAxMzpyZXR1cm4gUGgoYSxiLGMpO2Nhc2UgNDpyZXR1cm4gQWcoYixiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKSxkPWIucGVuZGluZ1Byb3BzLG51bGw9PT1hP2IuY2hpbGQ9dGcoYixudWxsLGQsYyk6UyhhLGIsZCxjKSxiLmNoaWxkO2Nhc2UgMTE6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOkFmKGQsZSksRWgoYSxiLGQsZSxjKTtjYXNlIDc6cmV0dXJuIFMoYSxiLGIucGVuZGluZ1Byb3BzLGMpLGIuY2hpbGQ7Y2FzZSA4OnJldHVybiBTKGEsYixiLnBlbmRpbmdQcm9wcy5jaGlsZHJlbixjKSxiLmNoaWxkO2Nhc2UgMTI6cmV0dXJuIFMoYSxiLGIucGVuZGluZ1Byb3BzLmNoaWxkcmVuLGMpLGIuY2hpbGQ7Y2FzZSAxMDphOntkPWIudHlwZS5fY29udGV4dDtlPWIucGVuZGluZ1Byb3BzO2g9Yi5tZW1vaXplZFByb3BzO1xuZj1lLnZhbHVlO0hmKGIsZik7aWYobnVsbCE9PWgpe3ZhciBnPWgudmFsdWU7Zj1oZChnLGYpPzA6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLl9jYWxjdWxhdGVDaGFuZ2VkQml0cz9kLl9jYWxjdWxhdGVDaGFuZ2VkQml0cyhnLGYpOjEwNzM3NDE4MjMpfDA7aWYoMD09PWYpe2lmKGguY2hpbGRyZW49PT1lLmNoaWxkcmVuJiYhTS5jdXJyZW50KXtiPUZoKGEsYixjKTticmVhayBhfX1lbHNlIGZvcihnPWIuY2hpbGQsbnVsbCE9PWcmJihnLnJldHVybj1iKTtudWxsIT09Zzspe3ZhciBrPWcuZGVwZW5kZW5jaWVzO2lmKG51bGwhPT1rKXtoPWcuY2hpbGQ7Zm9yKHZhciBsPWsuZmlyc3RDb250ZXh0O251bGwhPT1sOyl7aWYobC5jb250ZXh0PT09ZCYmMCE9PShsLm9ic2VydmVkQml0cyZmKSl7MT09PWcudGFnJiYobD1RZihjLG51bGwpLGwudGFnPTIsU2YoZyxsKSk7Zy5leHBpcmF0aW9uVGltZTxjJiYoZy5leHBpcmF0aW9uVGltZT1jKTtsPWcuYWx0ZXJuYXRlO251bGwhPT1sJiZsLmV4cGlyYXRpb25UaW1lPFxuYyYmKGwuZXhwaXJhdGlvblRpbWU9Yyk7SmYoZy5yZXR1cm4sYyk7ay5leHBpcmF0aW9uVGltZTxjJiYoay5leHBpcmF0aW9uVGltZT1jKTticmVha31sPWwubmV4dH19ZWxzZSBoPTEwPT09Zy50YWc/Zy50eXBlPT09Yi50eXBlP251bGw6Zy5jaGlsZDpnLmNoaWxkO2lmKG51bGwhPT1oKWgucmV0dXJuPWc7ZWxzZSBmb3IoaD1nO251bGwhPT1oOyl7aWYoaD09PWIpe2g9bnVsbDticmVha31nPWguc2libGluZztpZihudWxsIT09Zyl7Zy5yZXR1cm49aC5yZXR1cm47aD1nO2JyZWFrfWg9aC5yZXR1cm59Zz1ofX1TKGEsYixlLmNoaWxkcmVuLGMpO2I9Yi5jaGlsZH1yZXR1cm4gYjtjYXNlIDk6cmV0dXJuIGU9Yi50eXBlLGY9Yi5wZW5kaW5nUHJvcHMsZD1mLmNoaWxkcmVuLEtmKGIsYyksZT1NZihlLGYudW5zdGFibGVfb2JzZXJ2ZWRCaXRzKSxkPWQoZSksYi5lZmZlY3RUYWd8PTEsUyhhLGIsZCxjKSxiLmNoaWxkO2Nhc2UgMTQ6cmV0dXJuIGU9Yi50eXBlLGY9QWYoZSxiLnBlbmRpbmdQcm9wcyksXG5mPUFmKGUudHlwZSxmKSxHaChhLGIsZSxmLGQsYyk7Y2FzZSAxNTpyZXR1cm4gSWgoYSxiLGIudHlwZSxiLnBlbmRpbmdQcm9wcyxkLGMpO2Nhc2UgMTc6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOkFmKGQsZSksbnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5lZmZlY3RUYWd8PTIpLGIudGFnPTEsTihkKT8oYT0hMCxYZShiKSk6YT0hMSxLZihiLGMpLGhnKGIsZCxlLGMpLGpnKGIsZCxlLGMpLE1oKG51bGwsYixkLCEwLGEsYyk7Y2FzZSAxOTpyZXR1cm4gUmgoYSxiLGMpfXRocm93IHQoRXJyb3IoMTU2KSk7fTt2YXIgcGo9bnVsbCxqaT1udWxsO1xuZnVuY3Rpb24gdGooYSl7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18pcmV0dXJuITE7dmFyIGI9X19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fO2lmKGIuaXNEaXNhYmxlZHx8IWIuc3VwcG9ydHNGaWJlcilyZXR1cm4hMDt0cnl7dmFyIGM9Yi5pbmplY3QoYSk7cGo9ZnVuY3Rpb24oYSl7dHJ5e2Iub25Db21taXRGaWJlclJvb3QoYyxhLHZvaWQgMCw2ND09PShhLmN1cnJlbnQuZWZmZWN0VGFnJjY0KSl9Y2F0Y2goZSl7fX07amk9ZnVuY3Rpb24oYSl7dHJ5e2Iub25Db21taXRGaWJlclVubW91bnQoYyxhKX1jYXRjaChlKXt9fX1jYXRjaChkKXt9cmV0dXJuITB9XG5mdW5jdGlvbiB1aihhLGIsYyxkKXt0aGlzLnRhZz1hO3RoaXMua2V5PWM7dGhpcy5zaWJsaW5nPXRoaXMuY2hpbGQ9dGhpcy5yZXR1cm49dGhpcy5zdGF0ZU5vZGU9dGhpcy50eXBlPXRoaXMuZWxlbWVudFR5cGU9bnVsbDt0aGlzLmluZGV4PTA7dGhpcy5yZWY9bnVsbDt0aGlzLnBlbmRpbmdQcm9wcz1iO3RoaXMuZGVwZW5kZW5jaWVzPXRoaXMubWVtb2l6ZWRTdGF0ZT10aGlzLnVwZGF0ZVF1ZXVlPXRoaXMubWVtb2l6ZWRQcm9wcz1udWxsO3RoaXMubW9kZT1kO3RoaXMuZWZmZWN0VGFnPTA7dGhpcy5sYXN0RWZmZWN0PXRoaXMuZmlyc3RFZmZlY3Q9dGhpcy5uZXh0RWZmZWN0PW51bGw7dGhpcy5jaGlsZEV4cGlyYXRpb25UaW1lPXRoaXMuZXhwaXJhdGlvblRpbWU9MDt0aGlzLmFsdGVybmF0ZT1udWxsfWZ1bmN0aW9uIHhoKGEsYixjLGQpe3JldHVybiBuZXcgdWooYSxiLGMsZCl9XG5mdW5jdGlvbiBIaChhKXthPWEucHJvdG90eXBlO3JldHVybiEoIWF8fCFhLmlzUmVhY3RDb21wb25lbnQpfWZ1bmN0aW9uIHNqKGEpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKXJldHVybiBIaChhKT8xOjA7aWYodm9pZCAwIT09YSYmbnVsbCE9PWEpe2E9YS4kJHR5cGVvZjtpZihhPT09Z2MpcmV0dXJuIDExO2lmKGE9PT1qYylyZXR1cm4gMTR9cmV0dXJuIDJ9XG5mdW5jdGlvbiBvZyhhLGIpe3ZhciBjPWEuYWx0ZXJuYXRlO251bGw9PT1jPyhjPXhoKGEudGFnLGIsYS5rZXksYS5tb2RlKSxjLmVsZW1lbnRUeXBlPWEuZWxlbWVudFR5cGUsYy50eXBlPWEudHlwZSxjLnN0YXRlTm9kZT1hLnN0YXRlTm9kZSxjLmFsdGVybmF0ZT1hLGEuYWx0ZXJuYXRlPWMpOihjLnBlbmRpbmdQcm9wcz1iLGMuZWZmZWN0VGFnPTAsYy5uZXh0RWZmZWN0PW51bGwsYy5maXJzdEVmZmVjdD1udWxsLGMubGFzdEVmZmVjdD1udWxsKTtjLmNoaWxkRXhwaXJhdGlvblRpbWU9YS5jaGlsZEV4cGlyYXRpb25UaW1lO2MuZXhwaXJhdGlvblRpbWU9YS5leHBpcmF0aW9uVGltZTtjLmNoaWxkPWEuY2hpbGQ7Yy5tZW1vaXplZFByb3BzPWEubWVtb2l6ZWRQcm9wcztjLm1lbW9pemVkU3RhdGU9YS5tZW1vaXplZFN0YXRlO2MudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZTtiPWEuZGVwZW5kZW5jaWVzO2MuZGVwZW5kZW5jaWVzPW51bGw9PT1iP251bGw6e2V4cGlyYXRpb25UaW1lOmIuZXhwaXJhdGlvblRpbWUsXG5maXJzdENvbnRleHQ6Yi5maXJzdENvbnRleHQscmVzcG9uZGVyczpiLnJlc3BvbmRlcnN9O2Muc2libGluZz1hLnNpYmxpbmc7Yy5pbmRleD1hLmluZGV4O2MucmVmPWEucmVmO3JldHVybiBjfVxuZnVuY3Rpb24gcWcoYSxiLGMsZCxlLGYpe3ZhciBoPTI7ZD1hO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKUhoKGEpJiYoaD0xKTtlbHNlIGlmKFwic3RyaW5nXCI9PT10eXBlb2YgYSloPTU7ZWxzZSBhOnN3aXRjaChhKXtjYXNlIGFjOnJldHVybiBzZyhjLmNoaWxkcmVuLGUsZixiKTtjYXNlIGZjOmg9ODtlfD03O2JyZWFrO2Nhc2UgYmM6aD04O2V8PTE7YnJlYWs7Y2FzZSBjYzpyZXR1cm4gYT14aCgxMixjLGIsZXw4KSxhLmVsZW1lbnRUeXBlPWNjLGEudHlwZT1jYyxhLmV4cGlyYXRpb25UaW1lPWYsYTtjYXNlIGhjOnJldHVybiBhPXhoKDEzLGMsYixlKSxhLnR5cGU9aGMsYS5lbGVtZW50VHlwZT1oYyxhLmV4cGlyYXRpb25UaW1lPWYsYTtjYXNlIGljOnJldHVybiBhPXhoKDE5LGMsYixlKSxhLmVsZW1lbnRUeXBlPWljLGEuZXhwaXJhdGlvblRpbWU9ZixhO2RlZmF1bHQ6aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSlzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSBkYzpoPVxuMTA7YnJlYWsgYTtjYXNlIGVjOmg9OTticmVhayBhO2Nhc2UgZ2M6aD0xMTticmVhayBhO2Nhc2UgamM6aD0xNDticmVhayBhO2Nhc2Uga2M6aD0xNjtkPW51bGw7YnJlYWsgYX10aHJvdyB0KEVycm9yKDEzMCksbnVsbD09YT9hOnR5cGVvZiBhLFwiXCIpO31iPXhoKGgsYyxiLGUpO2IuZWxlbWVudFR5cGU9YTtiLnR5cGU9ZDtiLmV4cGlyYXRpb25UaW1lPWY7cmV0dXJuIGJ9ZnVuY3Rpb24gc2coYSxiLGMsZCl7YT14aCg3LGEsZCxiKTthLmV4cGlyYXRpb25UaW1lPWM7cmV0dXJuIGF9ZnVuY3Rpb24gcGcoYSxiLGMpe2E9eGgoNixhLG51bGwsYik7YS5leHBpcmF0aW9uVGltZT1jO3JldHVybiBhfVxuZnVuY3Rpb24gcmcoYSxiLGMpe2I9eGgoNCxudWxsIT09YS5jaGlsZHJlbj9hLmNoaWxkcmVuOltdLGEua2V5LGIpO2IuZXhwaXJhdGlvblRpbWU9YztiLnN0YXRlTm9kZT17Y29udGFpbmVySW5mbzphLmNvbnRhaW5lckluZm8scGVuZGluZ0NoaWxkcmVuOm51bGwsaW1wbGVtZW50YXRpb246YS5pbXBsZW1lbnRhdGlvbn07cmV0dXJuIGJ9XG5mdW5jdGlvbiB2aihhLGIsYyl7dGhpcy50YWc9Yjt0aGlzLmN1cnJlbnQ9bnVsbDt0aGlzLmNvbnRhaW5lckluZm89YTt0aGlzLnBpbmdDYWNoZT10aGlzLnBlbmRpbmdDaGlsZHJlbj1udWxsO3RoaXMuZmluaXNoZWRFeHBpcmF0aW9uVGltZT0wO3RoaXMuZmluaXNoZWRXb3JrPW51bGw7dGhpcy50aW1lb3V0SGFuZGxlPS0xO3RoaXMucGVuZGluZ0NvbnRleHQ9dGhpcy5jb250ZXh0PW51bGw7dGhpcy5oeWRyYXRlPWM7dGhpcy5jYWxsYmFja05vZGU9dGhpcy5maXJzdEJhdGNoPW51bGw7dGhpcy5waW5nVGltZT10aGlzLmxhc3RQZW5kaW5nVGltZT10aGlzLmZpcnN0UGVuZGluZ1RpbWU9dGhpcy5jYWxsYmFja0V4cGlyYXRpb25UaW1lPTB9ZnVuY3Rpb24gd2ooYSxiLGMpe2E9bmV3IHZqKGEsYixjKTtiPXhoKDMsbnVsbCxudWxsLDI9PT1iPzc6MT09PWI/MzowKTthLmN1cnJlbnQ9YjtyZXR1cm4gYi5zdGF0ZU5vZGU9YX1cbmZ1bmN0aW9uIHhqKGEsYixjLGQsZSxmKXt2YXIgaD1iLmN1cnJlbnQ7YTppZihjKXtjPWMuX3JlYWN0SW50ZXJuYWxGaWJlcjtiOntpZigyIT09bGQoYyl8fDEhPT1jLnRhZyl0aHJvdyB0KEVycm9yKDE3MCkpO3ZhciBnPWM7ZG97c3dpdGNoKGcudGFnKXtjYXNlIDM6Zz1nLnN0YXRlTm9kZS5jb250ZXh0O2JyZWFrIGI7Y2FzZSAxOmlmKE4oZy50eXBlKSl7Zz1nLnN0YXRlTm9kZS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dDticmVhayBifX1nPWcucmV0dXJufXdoaWxlKG51bGwhPT1nKTt0aHJvdyB0KEVycm9yKDE3MSkpO31pZigxPT09Yy50YWcpe3ZhciBrPWMudHlwZTtpZihOKGspKXtjPVdlKGMsayxnKTticmVhayBhfX1jPWd9ZWxzZSBjPVFlO251bGw9PT1iLmNvbnRleHQ/Yi5jb250ZXh0PWM6Yi5wZW5kaW5nQ29udGV4dD1jO2I9ZjtlPVFmKGQsZSk7ZS5wYXlsb2FkPXtlbGVtZW50OmF9O2I9dm9pZCAwPT09Yj9udWxsOmI7bnVsbCE9PWImJlxuKGUuY2FsbGJhY2s9Yik7U2YoaCxlKTtlZyhoLGQpO3JldHVybiBkfWZ1bmN0aW9uIHlqKGEsYixjLGQpe3ZhciBlPWIuY3VycmVudCxmPWNnKCksaD0kZi5zdXNwZW5zZTtlPWRnKGYsZSxoKTtyZXR1cm4geGooYSxiLGMsZSxoLGQpfWZ1bmN0aW9uIHpqKGEpe2E9YS5jdXJyZW50O2lmKCFhLmNoaWxkKXJldHVybiBudWxsO3N3aXRjaChhLmNoaWxkLnRhZyl7Y2FzZSA1OnJldHVybiBhLmNoaWxkLnN0YXRlTm9kZTtkZWZhdWx0OnJldHVybiBhLmNoaWxkLnN0YXRlTm9kZX19ZnVuY3Rpb24gQWooYSxiLGMpe3ZhciBkPTM8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzNdP2FyZ3VtZW50c1szXTpudWxsO3JldHVybnskJHR5cGVvZjokYixrZXk6bnVsbD09ZD9udWxsOlwiXCIrZCxjaGlsZHJlbjphLGNvbnRhaW5lckluZm86YixpbXBsZW1lbnRhdGlvbjpjfX1cbkRiPWZ1bmN0aW9uKGEsYixjKXtzd2l0Y2goYil7Y2FzZSBcImlucHV0XCI6RWMoYSxjKTtiPWMubmFtZTtpZihcInJhZGlvXCI9PT1jLnR5cGUmJm51bGwhPWIpe2ZvcihjPWE7Yy5wYXJlbnROb2RlOyljPWMucGFyZW50Tm9kZTtjPWMucXVlcnlTZWxlY3RvckFsbChcImlucHV0W25hbWU9XCIrSlNPTi5zdHJpbmdpZnkoXCJcIitiKSsnXVt0eXBlPVwicmFkaW9cIl0nKTtmb3IoYj0wO2I8Yy5sZW5ndGg7YisrKXt2YXIgZD1jW2JdO2lmKGQhPT1hJiZkLmZvcm09PT1hLmZvcm0pe3ZhciBlPUthKGQpO2lmKCFlKXRocm93IHQoRXJyb3IoOTApKTtXYihkKTtFYyhkLGUpfX19YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6cGUoYSxjKTticmVhaztjYXNlIFwic2VsZWN0XCI6Yj1jLnZhbHVlLG51bGwhPWImJm1lKGEsISFjLm11bHRpcGxlLGIsITEpfX07XG5mdW5jdGlvbiBCaihhKXt2YXIgYj0xMDczNzQxODIxLTI1KigoKDEwNzM3NDE4MjEtY2coKSs1MDApLzI1fDApKzEpO2I8PVhpJiYtLWI7dGhpcy5fZXhwaXJhdGlvblRpbWU9WGk9Yjt0aGlzLl9yb290PWE7dGhpcy5fY2FsbGJhY2tzPXRoaXMuX25leHQ9bnVsbDt0aGlzLl9oYXNDaGlsZHJlbj10aGlzLl9kaWRDb21wbGV0ZT0hMTt0aGlzLl9jaGlsZHJlbj1udWxsO3RoaXMuX2RlZmVyPSEwfUJqLnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24oYSl7aWYoIXRoaXMuX2RlZmVyKXRocm93IHQoRXJyb3IoMjUwKSk7dGhpcy5faGFzQ2hpbGRyZW49ITA7dGhpcy5fY2hpbGRyZW49YTt2YXIgYj10aGlzLl9yb290Ll9pbnRlcm5hbFJvb3QsYz10aGlzLl9leHBpcmF0aW9uVGltZSxkPW5ldyBDajt4aihhLGIsbnVsbCxjLG51bGwsZC5fb25Db21taXQpO3JldHVybiBkfTtcbkJqLnByb3RvdHlwZS50aGVuPWZ1bmN0aW9uKGEpe2lmKHRoaXMuX2RpZENvbXBsZXRlKWEoKTtlbHNle3ZhciBiPXRoaXMuX2NhbGxiYWNrcztudWxsPT09YiYmKGI9dGhpcy5fY2FsbGJhY2tzPVtdKTtiLnB1c2goYSl9fTtcbkJqLnByb3RvdHlwZS5jb21taXQ9ZnVuY3Rpb24oKXt2YXIgYT10aGlzLl9yb290Ll9pbnRlcm5hbFJvb3QsYj1hLmZpcnN0QmF0Y2g7aWYoIXRoaXMuX2RlZmVyfHxudWxsPT09Yil0aHJvdyB0KEVycm9yKDI1MSkpO2lmKHRoaXMuX2hhc0NoaWxkcmVuKXt2YXIgYz10aGlzLl9leHBpcmF0aW9uVGltZTtpZihiIT09dGhpcyl7dGhpcy5faGFzQ2hpbGRyZW4mJihjPXRoaXMuX2V4cGlyYXRpb25UaW1lPWIuX2V4cGlyYXRpb25UaW1lLHRoaXMucmVuZGVyKHRoaXMuX2NoaWxkcmVuKSk7Zm9yKHZhciBkPW51bGwsZT1iO2UhPT10aGlzOylkPWUsZT1lLl9uZXh0O2lmKG51bGw9PT1kKXRocm93IHQoRXJyb3IoMjUxKSk7ZC5fbmV4dD1lLl9uZXh0O3RoaXMuX25leHQ9YjthLmZpcnN0QmF0Y2g9dGhpc310aGlzLl9kZWZlcj0hMTtiPWM7aWYoKFUmKENpfERpKSkhPT1UKXRocm93IHQoRXJyb3IoMjUzKSk7eGYoWi5iaW5kKG51bGwsYSxiKSk7TygpO2I9dGhpcy5fbmV4dDt0aGlzLl9uZXh0PVxubnVsbDtiPWEuZmlyc3RCYXRjaD1iO251bGwhPT1iJiZiLl9oYXNDaGlsZHJlbiYmYi5yZW5kZXIoYi5fY2hpbGRyZW4pfWVsc2UgdGhpcy5fbmV4dD1udWxsLHRoaXMuX2RlZmVyPSExfTtCai5wcm90b3R5cGUuX29uQ29tcGxldGU9ZnVuY3Rpb24oKXtpZighdGhpcy5fZGlkQ29tcGxldGUpe3RoaXMuX2RpZENvbXBsZXRlPSEwO3ZhciBhPXRoaXMuX2NhbGxiYWNrcztpZihudWxsIT09YSlmb3IodmFyIGI9MDtiPGEubGVuZ3RoO2IrKykoMCxhW2JdKSgpfX07ZnVuY3Rpb24gQ2ooKXt0aGlzLl9jYWxsYmFja3M9bnVsbDt0aGlzLl9kaWRDb21taXQ9ITE7dGhpcy5fb25Db21taXQ9dGhpcy5fb25Db21taXQuYmluZCh0aGlzKX1Dai5wcm90b3R5cGUudGhlbj1mdW5jdGlvbihhKXtpZih0aGlzLl9kaWRDb21taXQpYSgpO2Vsc2V7dmFyIGI9dGhpcy5fY2FsbGJhY2tzO251bGw9PT1iJiYoYj10aGlzLl9jYWxsYmFja3M9W10pO2IucHVzaChhKX19O1xuQ2oucHJvdG90eXBlLl9vbkNvbW1pdD1mdW5jdGlvbigpe2lmKCF0aGlzLl9kaWRDb21taXQpe3RoaXMuX2RpZENvbW1pdD0hMDt2YXIgYT10aGlzLl9jYWxsYmFja3M7aWYobnVsbCE9PWEpZm9yKHZhciBiPTA7YjxhLmxlbmd0aDtiKyspe3ZhciBjPWFbYl07aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGMpdGhyb3cgdChFcnJvcigxOTEpLGMpO2MoKX19fTtmdW5jdGlvbiBEaihhLGIsYyl7dGhpcy5faW50ZXJuYWxSb290PXdqKGEsYixjKX1mdW5jdGlvbiBFaihhLGIpe3RoaXMuX2ludGVybmFsUm9vdD13aihhLDIsYil9RWoucHJvdG90eXBlLnJlbmRlcj1Eai5wcm90b3R5cGUucmVuZGVyPWZ1bmN0aW9uKGEsYil7dmFyIGM9dGhpcy5faW50ZXJuYWxSb290LGQ9bmV3IENqO2I9dm9pZCAwPT09Yj9udWxsOmI7bnVsbCE9PWImJmQudGhlbihiKTt5aihhLGMsbnVsbCxkLl9vbkNvbW1pdCk7cmV0dXJuIGR9O1xuRWoucHJvdG90eXBlLnVubW91bnQ9RGoucHJvdG90eXBlLnVubW91bnQ9ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy5faW50ZXJuYWxSb290LGM9bmV3IENqO2E9dm9pZCAwPT09YT9udWxsOmE7bnVsbCE9PWEmJmMudGhlbihhKTt5aihudWxsLGIsbnVsbCxjLl9vbkNvbW1pdCk7cmV0dXJuIGN9O0VqLnByb3RvdHlwZS5jcmVhdGVCYXRjaD1mdW5jdGlvbigpe3ZhciBhPW5ldyBCaih0aGlzKSxiPWEuX2V4cGlyYXRpb25UaW1lLGM9dGhpcy5faW50ZXJuYWxSb290LGQ9Yy5maXJzdEJhdGNoO2lmKG51bGw9PT1kKWMuZmlyc3RCYXRjaD1hLGEuX25leHQ9bnVsbDtlbHNle2ZvcihjPW51bGw7bnVsbCE9PWQmJmQuX2V4cGlyYXRpb25UaW1lPj1iOyljPWQsZD1kLl9uZXh0O2EuX25leHQ9ZDtudWxsIT09YyYmKGMuX25leHQ9YSl9cmV0dXJuIGF9O1xuZnVuY3Rpb24gSGooYSl7cmV0dXJuISghYXx8MSE9PWEubm9kZVR5cGUmJjkhPT1hLm5vZGVUeXBlJiYxMSE9PWEubm9kZVR5cGUmJig4IT09YS5ub2RlVHlwZXx8XCIgcmVhY3QtbW91bnQtcG9pbnQtdW5zdGFibGUgXCIhPT1hLm5vZGVWYWx1ZSkpfUpiPWVqO0tiPWZqO0xiPWFqO01iPWZ1bmN0aW9uKGEsYil7dmFyIGM9VTtVfD0yO3RyeXtyZXR1cm4gYShiKX1maW5hbGx5e1U9YyxVPT09VCYmTygpfX07ZnVuY3Rpb24gSWooYSxiKXtifHwoYj1hPzk9PT1hLm5vZGVUeXBlP2EuZG9jdW1lbnRFbGVtZW50OmEuZmlyc3RDaGlsZDpudWxsLGI9ISghYnx8MSE9PWIubm9kZVR5cGV8fCFiLmhhc0F0dHJpYnV0ZShcImRhdGEtcmVhY3Ryb290XCIpKSk7aWYoIWIpZm9yKHZhciBjO2M9YS5sYXN0Q2hpbGQ7KWEucmVtb3ZlQ2hpbGQoYyk7cmV0dXJuIG5ldyBEaihhLDAsYil9XG5mdW5jdGlvbiBKaihhLGIsYyxkLGUpe3ZhciBmPWMuX3JlYWN0Um9vdENvbnRhaW5lcixoPXZvaWQgMDtpZihmKXtoPWYuX2ludGVybmFsUm9vdDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZSl7dmFyIGc9ZTtlPWZ1bmN0aW9uKCl7dmFyIGE9emooaCk7Zy5jYWxsKGEpfX15aihiLGgsYSxlKX1lbHNle2Y9Yy5fcmVhY3RSb290Q29udGFpbmVyPUlqKGMsZCk7aD1mLl9pbnRlcm5hbFJvb3Q7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGUpe3ZhciBrPWU7ZT1mdW5jdGlvbigpe3ZhciBhPXpqKGgpO2suY2FsbChhKX19Z2ooZnVuY3Rpb24oKXt5aihiLGgsYSxlKX0pfXJldHVybiB6aihoKX1mdW5jdGlvbiBLaihhLGIpe3ZhciBjPTI8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTpudWxsO2lmKCFIaihiKSl0aHJvdyB0KEVycm9yKDIwMCkpO3JldHVybiBBaihhLGIsbnVsbCxjKX1cbnZhciBOaj17Y3JlYXRlUG9ydGFsOktqLGZpbmRET01Ob2RlOmZ1bmN0aW9uKGEpe2lmKG51bGw9PWEpYT1udWxsO2Vsc2UgaWYoMSE9PWEubm9kZVR5cGUpe3ZhciBiPWEuX3JlYWN0SW50ZXJuYWxGaWJlcjtpZih2b2lkIDA9PT1iKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5yZW5kZXIpdGhyb3cgdChFcnJvcigxODgpKTt0aHJvdyB0KEVycm9yKDI2OCksT2JqZWN0LmtleXMoYSkpO31hPXFkKGIpO2E9bnVsbD09PWE/bnVsbDphLnN0YXRlTm9kZX1yZXR1cm4gYX0saHlkcmF0ZTpmdW5jdGlvbihhLGIsYyl7aWYoIUhqKGIpKXRocm93IHQoRXJyb3IoMjAwKSk7cmV0dXJuIEpqKG51bGwsYSxiLCEwLGMpfSxyZW5kZXI6ZnVuY3Rpb24oYSxiLGMpe2lmKCFIaihiKSl0aHJvdyB0KEVycm9yKDIwMCkpO3JldHVybiBKaihudWxsLGEsYiwhMSxjKX0sdW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXI6ZnVuY3Rpb24oYSxiLGMsZCl7aWYoIUhqKGMpKXRocm93IHQoRXJyb3IoMjAwKSk7XG5pZihudWxsPT1hfHx2b2lkIDA9PT1hLl9yZWFjdEludGVybmFsRmliZXIpdGhyb3cgdChFcnJvcigzOCkpO3JldHVybiBKaihhLGIsYywhMSxkKX0sdW5tb3VudENvbXBvbmVudEF0Tm9kZTpmdW5jdGlvbihhKXtpZighSGooYSkpdGhyb3cgdChFcnJvcig0MCkpO3JldHVybiBhLl9yZWFjdFJvb3RDb250YWluZXI/KGdqKGZ1bmN0aW9uKCl7SmoobnVsbCxudWxsLGEsITEsZnVuY3Rpb24oKXthLl9yZWFjdFJvb3RDb250YWluZXI9bnVsbH0pfSksITApOiExfSx1bnN0YWJsZV9jcmVhdGVQb3J0YWw6ZnVuY3Rpb24oKXtyZXR1cm4gS2ouYXBwbHkodm9pZCAwLGFyZ3VtZW50cyl9LHVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzOmVqLHVuc3RhYmxlX2ludGVyYWN0aXZlVXBkYXRlczpmdW5jdGlvbihhLGIsYyxkKXthaigpO3JldHVybiBmaihhLGIsYyxkKX0sdW5zdGFibGVfZGlzY3JldGVVcGRhdGVzOmZqLHVuc3RhYmxlX2ZsdXNoRGlzY3JldGVVcGRhdGVzOmFqLGZsdXNoU3luYzpmdW5jdGlvbihhLFxuYil7aWYoKFUmKENpfERpKSkhPT1UKXRocm93IHQoRXJyb3IoMTg3KSk7dmFyIGM9VTtVfD0xO3RyeXtyZXR1cm4gdmYoOTksYS5iaW5kKG51bGwsYikpfWZpbmFsbHl7VT1jLE8oKX19LHVuc3RhYmxlX2NyZWF0ZVJvb3Q6TGosdW5zdGFibGVfY3JlYXRlU3luY1Jvb3Q6TWosdW5zdGFibGVfZmx1c2hDb250cm9sbGVkOmZ1bmN0aW9uKGEpe3ZhciBiPVU7VXw9MTt0cnl7dmYoOTksYSl9ZmluYWxseXtVPWIsVT09PVQmJk8oKX19LF9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEOntFdmVudHM6W0lhLEphLEthLENhLmluamVjdEV2ZW50UGx1Z2luc0J5TmFtZSxmYSxRYSxmdW5jdGlvbihhKXt5YShhLFBhKX0sSGIsSWIsVWQsQmEsY2ose2N1cnJlbnQ6ITF9XX19O1xuZnVuY3Rpb24gTGooYSxiKXtpZighSGooYSkpdGhyb3cgdChFcnJvcigyOTkpLFwidW5zdGFibGVfY3JlYXRlUm9vdFwiKTtyZXR1cm4gbmV3IEVqKGEsbnVsbCE9YiYmITA9PT1iLmh5ZHJhdGUpfWZ1bmN0aW9uIE1qKGEsYil7aWYoIUhqKGEpKXRocm93IHQoRXJyb3IoMjk5KSxcInVuc3RhYmxlX2NyZWF0ZVJvb3RcIik7cmV0dXJuIG5ldyBEaihhLDEsbnVsbCE9YiYmITA9PT1iLmh5ZHJhdGUpfVxuKGZ1bmN0aW9uKGEpe3ZhciBiPWEuZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U7cmV0dXJuIHRqKG0oe30sYSx7b3ZlcnJpZGVIb29rU3RhdGU6bnVsbCxvdmVycmlkZVByb3BzOm51bGwsc2V0U3VzcGVuc2VIYW5kbGVyOm51bGwsc2NoZWR1bGVVcGRhdGU6bnVsbCxjdXJyZW50RGlzcGF0Y2hlclJlZjpYYi5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLGZpbmRIb3N0SW5zdGFuY2VCeUZpYmVyOmZ1bmN0aW9uKGEpe2E9cWQoYSk7cmV0dXJuIG51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGV9LGZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOmZ1bmN0aW9uKGEpe3JldHVybiBiP2IoYSk6bnVsbH0sZmluZEhvc3RJbnN0YW5jZXNGb3JSZWZyZXNoOm51bGwsc2NoZWR1bGVSZWZyZXNoOm51bGwsc2NoZWR1bGVSb290Om51bGwsc2V0UmVmcmVzaEhhbmRsZXI6bnVsbCxnZXRDdXJyZW50RmliZXI6bnVsbH0pKX0pKHtmaW5kRmliZXJCeUhvc3RJbnN0YW5jZTpIYSxidW5kbGVUeXBlOjAsdmVyc2lvbjpcIjE2LjkuMFwiLFxucmVuZGVyZXJQYWNrYWdlTmFtZTpcInJlYWN0LWRvbVwifSk7dmFyIE9qPXtkZWZhdWx0Ok5qfSxQaj1PaiYmTmp8fE9qO21vZHVsZS5leHBvcnRzPVBqLmRlZmF1bHR8fFBqO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3NjaGVkdWxlci5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9zY2hlZHVsZXIuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MC4xNS4wXG4gKiBzY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIGQ9dm9pZCAwLGU9dm9pZCAwLGc9dm9pZCAwLG09dm9pZCAwLG49dm9pZCAwO2V4cG9ydHMudW5zdGFibGVfbm93PXZvaWQgMDtleHBvcnRzLnVuc3RhYmxlX2ZvcmNlRnJhbWVSYXRlPXZvaWQgMDtcbmlmKFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93fHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgTWVzc2FnZUNoYW5uZWwpe3ZhciBwPW51bGwscT1udWxsLHI9ZnVuY3Rpb24oKXtpZihudWxsIT09cCl0cnl7dmFyIGE9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtwKCEwLGEpO3A9bnVsbH1jYXRjaChiKXt0aHJvdyBzZXRUaW1lb3V0KHIsMCksYjt9fTtleHBvcnRzLnVuc3RhYmxlX25vdz1mdW5jdGlvbigpe3JldHVybiBEYXRlLm5vdygpfTtkPWZ1bmN0aW9uKGEpe251bGwhPT1wP3NldFRpbWVvdXQoZCwwLGEpOihwPWEsc2V0VGltZW91dChyLDApKX07ZT1mdW5jdGlvbihhLGIpe3E9c2V0VGltZW91dChhLGIpfTtnPWZ1bmN0aW9uKCl7Y2xlYXJUaW1lb3V0KHEpfTttPWZ1bmN0aW9uKCl7cmV0dXJuITF9O249ZXhwb3J0cy51bnN0YWJsZV9mb3JjZUZyYW1lUmF0ZT1mdW5jdGlvbigpe319ZWxzZXt2YXIgdD13aW5kb3cucGVyZm9ybWFuY2UsdT13aW5kb3cuRGF0ZSx2PXdpbmRvdy5zZXRUaW1lb3V0LFxudz13aW5kb3cuY2xlYXJUaW1lb3V0LHg9d2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSx5PXdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZTtcInVuZGVmaW5lZFwiIT09dHlwZW9mIGNvbnNvbGUmJihcImZ1bmN0aW9uXCIhPT10eXBlb2YgeCYmY29uc29sZS5lcnJvcihcIlRoaXMgYnJvd3NlciBkb2Vzbid0IHN1cHBvcnQgcmVxdWVzdEFuaW1hdGlvbkZyYW1lLiBNYWtlIHN1cmUgdGhhdCB5b3UgbG9hZCBhIHBvbHlmaWxsIGluIG9sZGVyIGJyb3dzZXJzLiBodHRwczovL2ZiLm1lL3JlYWN0LXBvbHlmaWxsc1wiKSxcImZ1bmN0aW9uXCIhPT10eXBlb2YgeSYmY29uc29sZS5lcnJvcihcIlRoaXMgYnJvd3NlciBkb2Vzbid0IHN1cHBvcnQgY2FuY2VsQW5pbWF0aW9uRnJhbWUuIE1ha2Ugc3VyZSB0aGF0IHlvdSBsb2FkIGEgcG9seWZpbGwgaW4gb2xkZXIgYnJvd3NlcnMuIGh0dHBzOi8vZmIubWUvcmVhY3QtcG9seWZpbGxzXCIpKTtleHBvcnRzLnVuc3RhYmxlX25vdz1cIm9iamVjdFwiPT09dHlwZW9mIHQmJlxuXCJmdW5jdGlvblwiPT09dHlwZW9mIHQubm93P2Z1bmN0aW9uKCl7cmV0dXJuIHQubm93KCl9OmZ1bmN0aW9uKCl7cmV0dXJuIHUubm93KCl9O3ZhciB6PSExLEE9bnVsbCxCPS0xLEM9LTEsRD0zMy4zMyxFPS0xLEY9LTEsRz0wLEg9ITE7bT1mdW5jdGlvbigpe3JldHVybiBleHBvcnRzLnVuc3RhYmxlX25vdygpPj1HfTtuPWZ1bmN0aW9uKCl7fTtleHBvcnRzLnVuc3RhYmxlX2ZvcmNlRnJhbWVSYXRlPWZ1bmN0aW9uKGEpezA+YXx8MTI1PGE/Y29uc29sZS5lcnJvcihcImZvcmNlRnJhbWVSYXRlIHRha2VzIGEgcG9zaXRpdmUgaW50IGJldHdlZW4gMCBhbmQgMTI1LCBmb3JjaW5nIGZyYW1lcmF0ZXMgaGlnaGVyIHRoYW4gMTI1IGZwcyBpcyBub3QgdW5zdXBwb3J0ZWRcIik6MDxhPyhEPU1hdGguZmxvb3IoMUUzL2EpLEg9ITApOihEPTMzLjMzLEg9ITEpfTt2YXIgSj1mdW5jdGlvbigpe2lmKG51bGwhPT1BKXt2YXIgYT1leHBvcnRzLnVuc3RhYmxlX25vdygpLGI9MDxHLWE7dHJ5e0EoYixcbmEpfHwoQT1udWxsKX1jYXRjaChjKXt0aHJvdyBJLnBvc3RNZXNzYWdlKG51bGwpLGM7fX19LEs9bmV3IE1lc3NhZ2VDaGFubmVsLEk9Sy5wb3J0MjtLLnBvcnQxLm9ubWVzc2FnZT1KO3ZhciBMPWZ1bmN0aW9uKGEpe2lmKG51bGw9PT1BKUY9RT0tMSx6PSExO2Vsc2V7ej0hMDt4KGZ1bmN0aW9uKGEpe3coQik7TChhKX0pO3ZhciBiPWZ1bmN0aW9uKCl7Rz1leHBvcnRzLnVuc3RhYmxlX25vdygpK0QvMjtKKCk7Qj12KGIsMypEKX07Qj12KGIsMypEKTtpZigtMSE9PUUmJi4xPGEtRSl7dmFyIGM9YS1FOyFIJiYtMSE9PUYmJmM8RCYmRjxEJiYoRD1jPEY/RjpjLDguMzM+RCYmKEQ9OC4zMykpO0Y9Y31FPWE7Rz1hK0Q7SS5wb3N0TWVzc2FnZShudWxsKX19O2Q9ZnVuY3Rpb24oYSl7QT1hO3p8fCh6PSEwLHgoZnVuY3Rpb24oYSl7TChhKX0pKX07ZT1mdW5jdGlvbihhLGIpe0M9dihmdW5jdGlvbigpe2EoZXhwb3J0cy51bnN0YWJsZV9ub3coKSl9LGIpfTtnPWZ1bmN0aW9uKCl7dyhDKTtcbkM9LTF9fXZhciBNPW51bGwsTj1udWxsLE89bnVsbCxQPTMsUT0hMSxSPSExLFM9ITE7XG5mdW5jdGlvbiBUKGEsYil7dmFyIGM9YS5uZXh0O2lmKGM9PT1hKU09bnVsbDtlbHNle2E9PT1NJiYoTT1jKTt2YXIgZj1hLnByZXZpb3VzO2YubmV4dD1jO2MucHJldmlvdXM9Zn1hLm5leHQ9YS5wcmV2aW91cz1udWxsO2M9YS5jYWxsYmFjaztmPVA7dmFyIGw9TztQPWEucHJpb3JpdHlMZXZlbDtPPWE7dHJ5e3ZhciBoPWEuZXhwaXJhdGlvblRpbWU8PWI7c3dpdGNoKFApe2Nhc2UgMTp2YXIgaz1jKGgpO2JyZWFrO2Nhc2UgMjprPWMoaCk7YnJlYWs7Y2FzZSAzOms9YyhoKTticmVhaztjYXNlIDQ6az1jKGgpO2JyZWFrO2Nhc2UgNTprPWMoaCl9fWNhdGNoKFope3Rocm93IFo7fWZpbmFsbHl7UD1mLE89bH1pZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgaylpZihiPWEuZXhwaXJhdGlvblRpbWUsYS5jYWxsYmFjaz1rLG51bGw9PT1NKU09YS5uZXh0PWEucHJldmlvdXM9YTtlbHNle2s9bnVsbDtoPU07ZG97aWYoYjw9aC5leHBpcmF0aW9uVGltZSl7az1oO2JyZWFrfWg9aC5uZXh0fXdoaWxlKGghPT1cbk0pO251bGw9PT1rP2s9TTprPT09TSYmKE09YSk7Yj1rLnByZXZpb3VzO2IubmV4dD1rLnByZXZpb3VzPWE7YS5uZXh0PWs7YS5wcmV2aW91cz1ifX1mdW5jdGlvbiBVKGEpe2lmKG51bGwhPT1OJiZOLnN0YXJ0VGltZTw9YSl7ZG97dmFyIGI9TixjPWIubmV4dDtpZihiPT09YylOPW51bGw7ZWxzZXtOPWM7dmFyIGY9Yi5wcmV2aW91cztmLm5leHQ9YztjLnByZXZpb3VzPWZ9Yi5uZXh0PWIucHJldmlvdXM9bnVsbDtWKGIsYi5leHBpcmF0aW9uVGltZSl9d2hpbGUobnVsbCE9PU4mJk4uc3RhcnRUaW1lPD1hKX19ZnVuY3Rpb24gVyhhKXtTPSExO1UoYSk7Unx8KG51bGwhPT1NPyhSPSEwLGQoWCkpOm51bGwhPT1OJiZlKFcsTi5zdGFydFRpbWUtYSkpfVxuZnVuY3Rpb24gWChhLGIpe1I9ITE7UyYmKFM9ITEsZygpKTtVKGIpO1E9ITA7dHJ5e2lmKCFhKWZvcig7bnVsbCE9PU0mJk0uZXhwaXJhdGlvblRpbWU8PWI7KVQoTSxiKSxiPWV4cG9ydHMudW5zdGFibGVfbm93KCksVShiKTtlbHNlIGlmKG51bGwhPT1NKXtkbyBUKE0sYiksYj1leHBvcnRzLnVuc3RhYmxlX25vdygpLFUoYik7d2hpbGUobnVsbCE9PU0mJiFtKCkpfWlmKG51bGwhPT1NKXJldHVybiEwO251bGwhPT1OJiZlKFcsTi5zdGFydFRpbWUtYik7cmV0dXJuITF9ZmluYWxseXtRPSExfX1mdW5jdGlvbiBZKGEpe3N3aXRjaChhKXtjYXNlIDE6cmV0dXJuLTE7Y2FzZSAyOnJldHVybiAyNTA7Y2FzZSA1OnJldHVybiAxMDczNzQxODIzO2Nhc2UgNDpyZXR1cm4gMUU0O2RlZmF1bHQ6cmV0dXJuIDVFM319XG5mdW5jdGlvbiBWKGEsYil7aWYobnVsbD09PU0pTT1hLm5leHQ9YS5wcmV2aW91cz1hO2Vsc2V7dmFyIGM9bnVsbCxmPU07ZG97aWYoYjxmLmV4cGlyYXRpb25UaW1lKXtjPWY7YnJlYWt9Zj1mLm5leHR9d2hpbGUoZiE9PU0pO251bGw9PT1jP2M9TTpjPT09TSYmKE09YSk7Yj1jLnByZXZpb3VzO2IubmV4dD1jLnByZXZpb3VzPWE7YS5uZXh0PWM7YS5wcmV2aW91cz1ifX12YXIgYWE9bjtleHBvcnRzLnVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5PTE7ZXhwb3J0cy51bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eT0yO2V4cG9ydHMudW5zdGFibGVfTm9ybWFsUHJpb3JpdHk9MztleHBvcnRzLnVuc3RhYmxlX0lkbGVQcmlvcml0eT01O2V4cG9ydHMudW5zdGFibGVfTG93UHJpb3JpdHk9NDtcbmV4cG9ydHMudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5PWZ1bmN0aW9uKGEsYil7c3dpdGNoKGEpe2Nhc2UgMTpjYXNlIDI6Y2FzZSAzOmNhc2UgNDpjYXNlIDU6YnJlYWs7ZGVmYXVsdDphPTN9dmFyIGM9UDtQPWE7dHJ5e3JldHVybiBiKCl9ZmluYWxseXtQPWN9fTtleHBvcnRzLnVuc3RhYmxlX25leHQ9ZnVuY3Rpb24oYSl7c3dpdGNoKFApe2Nhc2UgMTpjYXNlIDI6Y2FzZSAzOnZhciBiPTM7YnJlYWs7ZGVmYXVsdDpiPVB9dmFyIGM9UDtQPWI7dHJ5e3JldHVybiBhKCl9ZmluYWxseXtQPWN9fTtcbmV4cG9ydHMudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjaz1mdW5jdGlvbihhLGIsYyl7dmFyIGY9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGMmJm51bGwhPT1jKXt2YXIgbD1jLmRlbGF5O2w9XCJudW1iZXJcIj09PXR5cGVvZiBsJiYwPGw/ZitsOmY7Yz1cIm51bWJlclwiPT09dHlwZW9mIGMudGltZW91dD9jLnRpbWVvdXQ6WShhKX1lbHNlIGM9WShhKSxsPWY7Yz1sK2M7YT17Y2FsbGJhY2s6Yixwcmlvcml0eUxldmVsOmEsc3RhcnRUaW1lOmwsZXhwaXJhdGlvblRpbWU6YyxuZXh0Om51bGwscHJldmlvdXM6bnVsbH07aWYobD5mKXtjPWw7aWYobnVsbD09PU4pTj1hLm5leHQ9YS5wcmV2aW91cz1hO2Vsc2V7Yj1udWxsO3ZhciBoPU47ZG97aWYoYzxoLnN0YXJ0VGltZSl7Yj1oO2JyZWFrfWg9aC5uZXh0fXdoaWxlKGghPT1OKTtudWxsPT09Yj9iPU46Yj09PU4mJihOPWEpO2M9Yi5wcmV2aW91cztjLm5leHQ9Yi5wcmV2aW91cz1hO2EubmV4dD1iO2EucHJldmlvdXM9XG5jfW51bGw9PT1NJiZOPT09YSYmKFM/ZygpOlM9ITAsZShXLGwtZikpfWVsc2UgVihhLGMpLFJ8fFF8fChSPSEwLGQoWCkpO3JldHVybiBhfTtleHBvcnRzLnVuc3RhYmxlX2NhbmNlbENhbGxiYWNrPWZ1bmN0aW9uKGEpe3ZhciBiPWEubmV4dDtpZihudWxsIT09Yil7aWYoYT09PWIpYT09PU0/TT1udWxsOmE9PT1OJiYoTj1udWxsKTtlbHNle2E9PT1NP009YjphPT09TiYmKE49Yik7dmFyIGM9YS5wcmV2aW91cztjLm5leHQ9YjtiLnByZXZpb3VzPWN9YS5uZXh0PWEucHJldmlvdXM9bnVsbH19O2V4cG9ydHMudW5zdGFibGVfd3JhcENhbGxiYWNrPWZ1bmN0aW9uKGEpe3ZhciBiPVA7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGM9UDtQPWI7dHJ5e3JldHVybiBhLmFwcGx5KHRoaXMsYXJndW1lbnRzKX1maW5hbGx5e1A9Y319fTtleHBvcnRzLnVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsPWZ1bmN0aW9uKCl7cmV0dXJuIFB9O1xuZXhwb3J0cy51bnN0YWJsZV9zaG91bGRZaWVsZD1mdW5jdGlvbigpe3ZhciBhPWV4cG9ydHMudW5zdGFibGVfbm93KCk7VShhKTtyZXR1cm4gbnVsbCE9PU8mJm51bGwhPT1NJiZNLnN0YXJ0VGltZTw9YSYmTS5leHBpcmF0aW9uVGltZTxPLmV4cGlyYXRpb25UaW1lfHxtKCl9O2V4cG9ydHMudW5zdGFibGVfcmVxdWVzdFBhaW50PWFhO2V4cG9ydHMudW5zdGFibGVfY29udGludWVFeGVjdXRpb249ZnVuY3Rpb24oKXtSfHxRfHwoUj0hMCxkKFgpKX07ZXhwb3J0cy51bnN0YWJsZV9wYXVzZUV4ZWN1dGlvbj1mdW5jdGlvbigpe307ZXhwb3J0cy51bnN0YWJsZV9nZXRGaXJzdENhbGxiYWNrTm9kZT1mdW5jdGlvbigpe3JldHVybiBNfTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyICRpbmRleE9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWluY2x1ZGVzJykuaW5kZXhPZjtcbnZhciBzbG9wcHlBcnJheU1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zbG9wcHktYXJyYXktbWV0aG9kJyk7XG5cbnZhciBuYXRpdmVJbmRleE9mID0gW10uaW5kZXhPZjtcblxudmFyIE5FR0FUSVZFX1pFUk8gPSAhIW5hdGl2ZUluZGV4T2YgJiYgMSAvIFsxXS5pbmRleE9mKDEsIC0wKSA8IDA7XG52YXIgU0xPUFBZX01FVEhPRCA9IHNsb3BweUFycmF5TWV0aG9kKCdpbmRleE9mJyk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuaW5kZXhPZmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuaW5kZXhvZlxuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGZvcmNlZDogTkVHQVRJVkVfWkVSTyB8fCBTTE9QUFlfTUVUSE9EIH0sIHtcbiAgaW5kZXhPZjogZnVuY3Rpb24gaW5kZXhPZihzZWFyY2hFbGVtZW50IC8qICwgZnJvbUluZGV4ID0gMCAqLykge1xuICAgIHJldHVybiBORUdBVElWRV9aRVJPXG4gICAgICAvLyBjb252ZXJ0IC0wIHRvICswXG4gICAgICA/IG5hdGl2ZUluZGV4T2YuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCAwXG4gICAgICA6ICRpbmRleE9mKHRoaXMsIHNlYXJjaEVsZW1lbnQsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG4iLCJmdW5jdGlvbiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBhcnI7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2FycmF5V2l0aEhvbGVzOyIsImZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHtcbiAgdmFyIF9hcnIgPSBbXTtcbiAgdmFyIF9uID0gdHJ1ZTtcbiAgdmFyIF9kID0gZmFsc2U7XG4gIHZhciBfZSA9IHVuZGVmaW5lZDtcblxuICB0cnkge1xuICAgIGZvciAodmFyIF9pID0gYXJyW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3M7ICEoX24gPSAoX3MgPSBfaS5uZXh0KCkpLmRvbmUpOyBfbiA9IHRydWUpIHtcbiAgICAgIF9hcnIucHVzaChfcy52YWx1ZSk7XG5cbiAgICAgIGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhaztcbiAgICB9XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIF9kID0gdHJ1ZTtcbiAgICBfZSA9IGVycjtcbiAgfSBmaW5hbGx5IHtcbiAgICB0cnkge1xuICAgICAgaWYgKCFfbiAmJiBfaVtcInJldHVyblwiXSAhPSBudWxsKSBfaVtcInJldHVyblwiXSgpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBpZiAoX2QpIHRocm93IF9lO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBfYXJyO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9pdGVyYWJsZVRvQXJyYXlMaW1pdDsiLCJmdW5jdGlvbiBfbm9uSXRlcmFibGVSZXN0KCkge1xuICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZVwiKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfbm9uSXRlcmFibGVSZXN0OyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE0LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxudmFyIHJ1bnRpbWUgPSAoZnVuY3Rpb24gKGV4cG9ydHMpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgdmFyIE9wID0gT2JqZWN0LnByb3RvdHlwZTtcbiAgdmFyIGhhc093biA9IE9wLmhhc093blByb3BlcnR5O1xuICB2YXIgdW5kZWZpbmVkOyAvLyBNb3JlIGNvbXByZXNzaWJsZSB0aGFuIHZvaWQgMC5cbiAgdmFyICRTeW1ib2wgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgPyBTeW1ib2wgOiB7fTtcbiAgdmFyIGl0ZXJhdG9yU3ltYm9sID0gJFN5bWJvbC5pdGVyYXRvciB8fCBcIkBAaXRlcmF0b3JcIjtcbiAgdmFyIGFzeW5jSXRlcmF0b3JTeW1ib2wgPSAkU3ltYm9sLmFzeW5jSXRlcmF0b3IgfHwgXCJAQGFzeW5jSXRlcmF0b3JcIjtcbiAgdmFyIHRvU3RyaW5nVGFnU3ltYm9sID0gJFN5bWJvbC50b1N0cmluZ1RhZyB8fCBcIkBAdG9TdHJpbmdUYWdcIjtcblxuICBmdW5jdGlvbiB3cmFwKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSB7XG4gICAgLy8gSWYgb3V0ZXJGbiBwcm92aWRlZCBhbmQgb3V0ZXJGbi5wcm90b3R5cGUgaXMgYSBHZW5lcmF0b3IsIHRoZW4gb3V0ZXJGbi5wcm90b3R5cGUgaW5zdGFuY2VvZiBHZW5lcmF0b3IuXG4gICAgdmFyIHByb3RvR2VuZXJhdG9yID0gb3V0ZXJGbiAmJiBvdXRlckZuLnByb3RvdHlwZSBpbnN0YW5jZW9mIEdlbmVyYXRvciA/IG91dGVyRm4gOiBHZW5lcmF0b3I7XG4gICAgdmFyIGdlbmVyYXRvciA9IE9iamVjdC5jcmVhdGUocHJvdG9HZW5lcmF0b3IucHJvdG90eXBlKTtcbiAgICB2YXIgY29udGV4dCA9IG5ldyBDb250ZXh0KHRyeUxvY3NMaXN0IHx8IFtdKTtcblxuICAgIC8vIFRoZSAuX2ludm9rZSBtZXRob2QgdW5pZmllcyB0aGUgaW1wbGVtZW50YXRpb25zIG9mIHRoZSAubmV4dCxcbiAgICAvLyAudGhyb3csIGFuZCAucmV0dXJuIG1ldGhvZHMuXG4gICAgZ2VuZXJhdG9yLl9pbnZva2UgPSBtYWtlSW52b2tlTWV0aG9kKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpO1xuXG4gICAgcmV0dXJuIGdlbmVyYXRvcjtcbiAgfVxuICBleHBvcnRzLndyYXAgPSB3cmFwO1xuXG4gIC8vIFRyeS9jYXRjaCBoZWxwZXIgdG8gbWluaW1pemUgZGVvcHRpbWl6YXRpb25zLiBSZXR1cm5zIGEgY29tcGxldGlvblxuICAvLyByZWNvcmQgbGlrZSBjb250ZXh0LnRyeUVudHJpZXNbaV0uY29tcGxldGlvbi4gVGhpcyBpbnRlcmZhY2UgY291bGRcbiAgLy8gaGF2ZSBiZWVuIChhbmQgd2FzIHByZXZpb3VzbHkpIGRlc2lnbmVkIHRvIHRha2UgYSBjbG9zdXJlIHRvIGJlXG4gIC8vIGludm9rZWQgd2l0aG91dCBhcmd1bWVudHMsIGJ1dCBpbiBhbGwgdGhlIGNhc2VzIHdlIGNhcmUgYWJvdXQgd2VcbiAgLy8gYWxyZWFkeSBoYXZlIGFuIGV4aXN0aW5nIG1ldGhvZCB3ZSB3YW50IHRvIGNhbGwsIHNvIHRoZXJlJ3Mgbm8gbmVlZFxuICAvLyB0byBjcmVhdGUgYSBuZXcgZnVuY3Rpb24gb2JqZWN0LiBXZSBjYW4gZXZlbiBnZXQgYXdheSB3aXRoIGFzc3VtaW5nXG4gIC8vIHRoZSBtZXRob2QgdGFrZXMgZXhhY3RseSBvbmUgYXJndW1lbnQsIHNpbmNlIHRoYXQgaGFwcGVucyB0byBiZSB0cnVlXG4gIC8vIGluIGV2ZXJ5IGNhc2UsIHNvIHdlIGRvbid0IGhhdmUgdG8gdG91Y2ggdGhlIGFyZ3VtZW50cyBvYmplY3QuIFRoZVxuICAvLyBvbmx5IGFkZGl0aW9uYWwgYWxsb2NhdGlvbiByZXF1aXJlZCBpcyB0aGUgY29tcGxldGlvbiByZWNvcmQsIHdoaWNoXG4gIC8vIGhhcyBhIHN0YWJsZSBzaGFwZSBhbmQgc28gaG9wZWZ1bGx5IHNob3VsZCBiZSBjaGVhcCB0byBhbGxvY2F0ZS5cbiAgZnVuY3Rpb24gdHJ5Q2F0Y2goZm4sIG9iaiwgYXJnKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiB7IHR5cGU6IFwibm9ybWFsXCIsIGFyZzogZm4uY2FsbChvYmosIGFyZykgfTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJldHVybiB7IHR5cGU6IFwidGhyb3dcIiwgYXJnOiBlcnIgfTtcbiAgICB9XG4gIH1cblxuICB2YXIgR2VuU3RhdGVTdXNwZW5kZWRTdGFydCA9IFwic3VzcGVuZGVkU3RhcnRcIjtcbiAgdmFyIEdlblN0YXRlU3VzcGVuZGVkWWllbGQgPSBcInN1c3BlbmRlZFlpZWxkXCI7XG4gIHZhciBHZW5TdGF0ZUV4ZWN1dGluZyA9IFwiZXhlY3V0aW5nXCI7XG4gIHZhciBHZW5TdGF0ZUNvbXBsZXRlZCA9IFwiY29tcGxldGVkXCI7XG5cbiAgLy8gUmV0dXJuaW5nIHRoaXMgb2JqZWN0IGZyb20gdGhlIGlubmVyRm4gaGFzIHRoZSBzYW1lIGVmZmVjdCBhc1xuICAvLyBicmVha2luZyBvdXQgb2YgdGhlIGRpc3BhdGNoIHN3aXRjaCBzdGF0ZW1lbnQuXG4gIHZhciBDb250aW51ZVNlbnRpbmVsID0ge307XG5cbiAgLy8gRHVtbXkgY29uc3RydWN0b3IgZnVuY3Rpb25zIHRoYXQgd2UgdXNlIGFzIHRoZSAuY29uc3RydWN0b3IgYW5kXG4gIC8vIC5jb25zdHJ1Y3Rvci5wcm90b3R5cGUgcHJvcGVydGllcyBmb3IgZnVuY3Rpb25zIHRoYXQgcmV0dXJuIEdlbmVyYXRvclxuICAvLyBvYmplY3RzLiBGb3IgZnVsbCBzcGVjIGNvbXBsaWFuY2UsIHlvdSBtYXkgd2lzaCB0byBjb25maWd1cmUgeW91clxuICAvLyBtaW5pZmllciBub3QgdG8gbWFuZ2xlIHRoZSBuYW1lcyBvZiB0aGVzZSB0d28gZnVuY3Rpb25zLlxuICBmdW5jdGlvbiBHZW5lcmF0b3IoKSB7fVxuICBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvbigpIHt9XG4gIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKCkge31cblxuICAvLyBUaGlzIGlzIGEgcG9seWZpbGwgZm9yICVJdGVyYXRvclByb3RvdHlwZSUgZm9yIGVudmlyb25tZW50cyB0aGF0XG4gIC8vIGRvbid0IG5hdGl2ZWx5IHN1cHBvcnQgaXQuXG4gIHZhciBJdGVyYXRvclByb3RvdHlwZSA9IHt9O1xuICBJdGVyYXRvclByb3RvdHlwZVtpdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgdmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xuICB2YXIgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90byAmJiBnZXRQcm90byhnZXRQcm90byh2YWx1ZXMoW10pKSk7XG4gIGlmIChOYXRpdmVJdGVyYXRvclByb3RvdHlwZSAmJlxuICAgICAgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgIT09IE9wICYmXG4gICAgICBoYXNPd24uY2FsbChOYXRpdmVJdGVyYXRvclByb3RvdHlwZSwgaXRlcmF0b3JTeW1ib2wpKSB7XG4gICAgLy8gVGhpcyBlbnZpcm9ubWVudCBoYXMgYSBuYXRpdmUgJUl0ZXJhdG9yUHJvdG90eXBlJTsgdXNlIGl0IGluc3RlYWRcbiAgICAvLyBvZiB0aGUgcG9seWZpbGwuXG4gICAgSXRlcmF0b3JQcm90b3R5cGUgPSBOYXRpdmVJdGVyYXRvclByb3RvdHlwZTtcbiAgfVxuXG4gIHZhciBHcCA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLnByb3RvdHlwZSA9XG4gICAgR2VuZXJhdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUpO1xuICBHZW5lcmF0b3JGdW5jdGlvbi5wcm90b3R5cGUgPSBHcC5jb25zdHJ1Y3RvciA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlO1xuICBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEdlbmVyYXRvckZ1bmN0aW9uO1xuICBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZVt0b1N0cmluZ1RhZ1N5bWJvbF0gPVxuICAgIEdlbmVyYXRvckZ1bmN0aW9uLmRpc3BsYXlOYW1lID0gXCJHZW5lcmF0b3JGdW5jdGlvblwiO1xuXG4gIC8vIEhlbHBlciBmb3IgZGVmaW5pbmcgdGhlIC5uZXh0LCAudGhyb3csIGFuZCAucmV0dXJuIG1ldGhvZHMgb2YgdGhlXG4gIC8vIEl0ZXJhdG9yIGludGVyZmFjZSBpbiB0ZXJtcyBvZiBhIHNpbmdsZSAuX2ludm9rZSBtZXRob2QuXG4gIGZ1bmN0aW9uIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhwcm90b3R5cGUpIHtcbiAgICBbXCJuZXh0XCIsIFwidGhyb3dcIiwgXCJyZXR1cm5cIl0uZm9yRWFjaChmdW5jdGlvbihtZXRob2QpIHtcbiAgICAgIHByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24oYXJnKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pbnZva2UobWV0aG9kLCBhcmcpO1xuICAgICAgfTtcbiAgICB9KTtcbiAgfVxuXG4gIGV4cG9ydHMuaXNHZW5lcmF0b3JGdW5jdGlvbiA9IGZ1bmN0aW9uKGdlbkZ1bikge1xuICAgIHZhciBjdG9yID0gdHlwZW9mIGdlbkZ1biA9PT0gXCJmdW5jdGlvblwiICYmIGdlbkZ1bi5jb25zdHJ1Y3RvcjtcbiAgICByZXR1cm4gY3RvclxuICAgICAgPyBjdG9yID09PSBHZW5lcmF0b3JGdW5jdGlvbiB8fFxuICAgICAgICAvLyBGb3IgdGhlIG5hdGl2ZSBHZW5lcmF0b3JGdW5jdGlvbiBjb25zdHJ1Y3RvciwgdGhlIGJlc3Qgd2UgY2FuXG4gICAgICAgIC8vIGRvIGlzIHRvIGNoZWNrIGl0cyAubmFtZSBwcm9wZXJ0eS5cbiAgICAgICAgKGN0b3IuZGlzcGxheU5hbWUgfHwgY3Rvci5uYW1lKSA9PT0gXCJHZW5lcmF0b3JGdW5jdGlvblwiXG4gICAgICA6IGZhbHNlO1xuICB9O1xuXG4gIGV4cG9ydHMubWFyayA9IGZ1bmN0aW9uKGdlbkZ1bikge1xuICAgIGlmIChPYmplY3Quc2V0UHJvdG90eXBlT2YpIHtcbiAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihnZW5GdW4sIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZ2VuRnVuLl9fcHJvdG9fXyA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlO1xuICAgICAgaWYgKCEodG9TdHJpbmdUYWdTeW1ib2wgaW4gZ2VuRnVuKSkge1xuICAgICAgICBnZW5GdW5bdG9TdHJpbmdUYWdTeW1ib2xdID0gXCJHZW5lcmF0b3JGdW5jdGlvblwiO1xuICAgICAgfVxuICAgIH1cbiAgICBnZW5GdW4ucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShHcCk7XG4gICAgcmV0dXJuIGdlbkZ1bjtcbiAgfTtcblxuICAvLyBXaXRoaW4gdGhlIGJvZHkgb2YgYW55IGFzeW5jIGZ1bmN0aW9uLCBgYXdhaXQgeGAgaXMgdHJhbnNmb3JtZWQgdG9cbiAgLy8gYHlpZWxkIHJlZ2VuZXJhdG9yUnVudGltZS5hd3JhcCh4KWAsIHNvIHRoYXQgdGhlIHJ1bnRpbWUgY2FuIHRlc3RcbiAgLy8gYGhhc093bi5jYWxsKHZhbHVlLCBcIl9fYXdhaXRcIilgIHRvIGRldGVybWluZSBpZiB0aGUgeWllbGRlZCB2YWx1ZSBpc1xuICAvLyBtZWFudCB0byBiZSBhd2FpdGVkLlxuICBleHBvcnRzLmF3cmFwID0gZnVuY3Rpb24oYXJnKSB7XG4gICAgcmV0dXJuIHsgX19hd2FpdDogYXJnIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gQXN5bmNJdGVyYXRvcihnZW5lcmF0b3IpIHtcbiAgICBmdW5jdGlvbiBpbnZva2UobWV0aG9kLCBhcmcsIHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKGdlbmVyYXRvclttZXRob2RdLCBnZW5lcmF0b3IsIGFyZyk7XG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICByZWplY3QocmVjb3JkLmFyZyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgcmVzdWx0ID0gcmVjb3JkLmFyZztcbiAgICAgICAgdmFyIHZhbHVlID0gcmVzdWx0LnZhbHVlO1xuICAgICAgICBpZiAodmFsdWUgJiZcbiAgICAgICAgICAgIHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIiAmJlxuICAgICAgICAgICAgaGFzT3duLmNhbGwodmFsdWUsIFwiX19hd2FpdFwiKSkge1xuICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodmFsdWUuX19hd2FpdCkudGhlbihmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgaW52b2tlKFwibmV4dFwiLCB2YWx1ZSwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgIGludm9rZShcInRocm93XCIsIGVyciwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodmFsdWUpLnRoZW4oZnVuY3Rpb24odW53cmFwcGVkKSB7XG4gICAgICAgICAgLy8gV2hlbiBhIHlpZWxkZWQgUHJvbWlzZSBpcyByZXNvbHZlZCwgaXRzIGZpbmFsIHZhbHVlIGJlY29tZXNcbiAgICAgICAgICAvLyB0aGUgLnZhbHVlIG9mIHRoZSBQcm9taXNlPHt2YWx1ZSxkb25lfT4gcmVzdWx0IGZvciB0aGVcbiAgICAgICAgICAvLyBjdXJyZW50IGl0ZXJhdGlvbi5cbiAgICAgICAgICByZXN1bHQudmFsdWUgPSB1bndyYXBwZWQ7XG4gICAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICB9LCBmdW5jdGlvbihlcnJvcikge1xuICAgICAgICAgIC8vIElmIGEgcmVqZWN0ZWQgUHJvbWlzZSB3YXMgeWllbGRlZCwgdGhyb3cgdGhlIHJlamVjdGlvbiBiYWNrXG4gICAgICAgICAgLy8gaW50byB0aGUgYXN5bmMgZ2VuZXJhdG9yIGZ1bmN0aW9uIHNvIGl0IGNhbiBiZSBoYW5kbGVkIHRoZXJlLlxuICAgICAgICAgIHJldHVybiBpbnZva2UoXCJ0aHJvd1wiLCBlcnJvciwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHByZXZpb3VzUHJvbWlzZTtcblxuICAgIGZ1bmN0aW9uIGVucXVldWUobWV0aG9kLCBhcmcpIHtcbiAgICAgIGZ1bmN0aW9uIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgaW52b2tlKG1ldGhvZCwgYXJnLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHByZXZpb3VzUHJvbWlzZSA9XG4gICAgICAgIC8vIElmIGVucXVldWUgaGFzIGJlZW4gY2FsbGVkIGJlZm9yZSwgdGhlbiB3ZSB3YW50IHRvIHdhaXQgdW50aWxcbiAgICAgICAgLy8gYWxsIHByZXZpb3VzIFByb21pc2VzIGhhdmUgYmVlbiByZXNvbHZlZCBiZWZvcmUgY2FsbGluZyBpbnZva2UsXG4gICAgICAgIC8vIHNvIHRoYXQgcmVzdWx0cyBhcmUgYWx3YXlzIGRlbGl2ZXJlZCBpbiB0aGUgY29ycmVjdCBvcmRlci4gSWZcbiAgICAgICAgLy8gZW5xdWV1ZSBoYXMgbm90IGJlZW4gY2FsbGVkIGJlZm9yZSwgdGhlbiBpdCBpcyBpbXBvcnRhbnQgdG9cbiAgICAgICAgLy8gY2FsbCBpbnZva2UgaW1tZWRpYXRlbHksIHdpdGhvdXQgd2FpdGluZyBvbiBhIGNhbGxiYWNrIHRvIGZpcmUsXG4gICAgICAgIC8vIHNvIHRoYXQgdGhlIGFzeW5jIGdlbmVyYXRvciBmdW5jdGlvbiBoYXMgdGhlIG9wcG9ydHVuaXR5IHRvIGRvXG4gICAgICAgIC8vIGFueSBuZWNlc3Nhcnkgc2V0dXAgaW4gYSBwcmVkaWN0YWJsZSB3YXkuIFRoaXMgcHJlZGljdGFiaWxpdHlcbiAgICAgICAgLy8gaXMgd2h5IHRoZSBQcm9taXNlIGNvbnN0cnVjdG9yIHN5bmNocm9ub3VzbHkgaW52b2tlcyBpdHNcbiAgICAgICAgLy8gZXhlY3V0b3IgY2FsbGJhY2ssIGFuZCB3aHkgYXN5bmMgZnVuY3Rpb25zIHN5bmNocm9ub3VzbHlcbiAgICAgICAgLy8gZXhlY3V0ZSBjb2RlIGJlZm9yZSB0aGUgZmlyc3QgYXdhaXQuIFNpbmNlIHdlIGltcGxlbWVudCBzaW1wbGVcbiAgICAgICAgLy8gYXN5bmMgZnVuY3Rpb25zIGluIHRlcm1zIG9mIGFzeW5jIGdlbmVyYXRvcnMsIGl0IGlzIGVzcGVjaWFsbHlcbiAgICAgICAgLy8gaW1wb3J0YW50IHRvIGdldCB0aGlzIHJpZ2h0LCBldmVuIHRob3VnaCBpdCByZXF1aXJlcyBjYXJlLlxuICAgICAgICBwcmV2aW91c1Byb21pc2UgPyBwcmV2aW91c1Byb21pc2UudGhlbihcbiAgICAgICAgICBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZyxcbiAgICAgICAgICAvLyBBdm9pZCBwcm9wYWdhdGluZyBmYWlsdXJlcyB0byBQcm9taXNlcyByZXR1cm5lZCBieSBsYXRlclxuICAgICAgICAgIC8vIGludm9jYXRpb25zIG9mIHRoZSBpdGVyYXRvci5cbiAgICAgICAgICBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZ1xuICAgICAgICApIDogY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKTtcbiAgICB9XG5cbiAgICAvLyBEZWZpbmUgdGhlIHVuaWZpZWQgaGVscGVyIG1ldGhvZCB0aGF0IGlzIHVzZWQgdG8gaW1wbGVtZW50IC5uZXh0LFxuICAgIC8vIC50aHJvdywgYW5kIC5yZXR1cm4gKHNlZSBkZWZpbmVJdGVyYXRvck1ldGhvZHMpLlxuICAgIHRoaXMuX2ludm9rZSA9IGVucXVldWU7XG4gIH1cblxuICBkZWZpbmVJdGVyYXRvck1ldGhvZHMoQXN5bmNJdGVyYXRvci5wcm90b3R5cGUpO1xuICBBc3luY0l0ZXJhdG9yLnByb3RvdHlwZVthc3luY0l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcbiAgZXhwb3J0cy5Bc3luY0l0ZXJhdG9yID0gQXN5bmNJdGVyYXRvcjtcblxuICAvLyBOb3RlIHRoYXQgc2ltcGxlIGFzeW5jIGZ1bmN0aW9ucyBhcmUgaW1wbGVtZW50ZWQgb24gdG9wIG9mXG4gIC8vIEFzeW5jSXRlcmF0b3Igb2JqZWN0czsgdGhleSBqdXN0IHJldHVybiBhIFByb21pc2UgZm9yIHRoZSB2YWx1ZSBvZlxuICAvLyB0aGUgZmluYWwgcmVzdWx0IHByb2R1Y2VkIGJ5IHRoZSBpdGVyYXRvci5cbiAgZXhwb3J0cy5hc3luYyA9IGZ1bmN0aW9uKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSB7XG4gICAgdmFyIGl0ZXIgPSBuZXcgQXN5bmNJdGVyYXRvcihcbiAgICAgIHdyYXAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpXG4gICAgKTtcblxuICAgIHJldHVybiBleHBvcnRzLmlzR2VuZXJhdG9yRnVuY3Rpb24ob3V0ZXJGbilcbiAgICAgID8gaXRlciAvLyBJZiBvdXRlckZuIGlzIGEgZ2VuZXJhdG9yLCByZXR1cm4gdGhlIGZ1bGwgaXRlcmF0b3IuXG4gICAgICA6IGl0ZXIubmV4dCgpLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdC5kb25lID8gcmVzdWx0LnZhbHVlIDogaXRlci5uZXh0KCk7XG4gICAgICAgIH0pO1xuICB9O1xuXG4gIGZ1bmN0aW9uIG1ha2VJbnZva2VNZXRob2QoaW5uZXJGbiwgc2VsZiwgY29udGV4dCkge1xuICAgIHZhciBzdGF0ZSA9IEdlblN0YXRlU3VzcGVuZGVkU3RhcnQ7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gaW52b2tlKG1ldGhvZCwgYXJnKSB7XG4gICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlRXhlY3V0aW5nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IHJ1bm5pbmdcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVDb21wbGV0ZWQpIHtcbiAgICAgICAgaWYgKG1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgdGhyb3cgYXJnO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQmUgZm9yZ2l2aW5nLCBwZXIgMjUuMy4zLjMuMyBvZiB0aGUgc3BlYzpcbiAgICAgICAgLy8gaHR0cHM6Ly9wZW9wbGUubW96aWxsYS5vcmcvfmpvcmVuZG9yZmYvZXM2LWRyYWZ0Lmh0bWwjc2VjLWdlbmVyYXRvcnJlc3VtZVxuICAgICAgICByZXR1cm4gZG9uZVJlc3VsdCgpO1xuICAgICAgfVxuXG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IG1ldGhvZDtcbiAgICAgIGNvbnRleHQuYXJnID0gYXJnO1xuXG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICB2YXIgZGVsZWdhdGUgPSBjb250ZXh0LmRlbGVnYXRlO1xuICAgICAgICBpZiAoZGVsZWdhdGUpIHtcbiAgICAgICAgICB2YXIgZGVsZWdhdGVSZXN1bHQgPSBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KTtcbiAgICAgICAgICBpZiAoZGVsZWdhdGVSZXN1bHQpIHtcbiAgICAgICAgICAgIGlmIChkZWxlZ2F0ZVJlc3VsdCA9PT0gQ29udGludWVTZW50aW5lbCkgY29udGludWU7XG4gICAgICAgICAgICByZXR1cm4gZGVsZWdhdGVSZXN1bHQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcIm5leHRcIikge1xuICAgICAgICAgIC8vIFNldHRpbmcgY29udGV4dC5fc2VudCBmb3IgbGVnYWN5IHN1cHBvcnQgb2YgQmFiZWwnc1xuICAgICAgICAgIC8vIGZ1bmN0aW9uLnNlbnQgaW1wbGVtZW50YXRpb24uXG4gICAgICAgICAgY29udGV4dC5zZW50ID0gY29udGV4dC5fc2VudCA9IGNvbnRleHQuYXJnO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVTdXNwZW5kZWRTdGFydCkge1xuICAgICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUNvbXBsZXRlZDtcbiAgICAgICAgICAgIHRocm93IGNvbnRleHQuYXJnO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnRleHQuZGlzcGF0Y2hFeGNlcHRpb24oY29udGV4dC5hcmcpO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoY29udGV4dC5tZXRob2QgPT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgICBjb250ZXh0LmFicnVwdChcInJldHVyblwiLCBjb250ZXh0LmFyZyk7XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0ZSA9IEdlblN0YXRlRXhlY3V0aW5nO1xuXG4gICAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChpbm5lckZuLCBzZWxmLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcIm5vcm1hbFwiKSB7XG4gICAgICAgICAgLy8gSWYgYW4gZXhjZXB0aW9uIGlzIHRocm93biBmcm9tIGlubmVyRm4sIHdlIGxlYXZlIHN0YXRlID09PVxuICAgICAgICAgIC8vIEdlblN0YXRlRXhlY3V0aW5nIGFuZCBsb29wIGJhY2sgZm9yIGFub3RoZXIgaW52b2NhdGlvbi5cbiAgICAgICAgICBzdGF0ZSA9IGNvbnRleHQuZG9uZVxuICAgICAgICAgICAgPyBHZW5TdGF0ZUNvbXBsZXRlZFxuICAgICAgICAgICAgOiBHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkO1xuXG4gICAgICAgICAgaWYgKHJlY29yZC5hcmcgPT09IENvbnRpbnVlU2VudGluZWwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB2YWx1ZTogcmVjb3JkLmFyZyxcbiAgICAgICAgICAgIGRvbmU6IGNvbnRleHQuZG9uZVxuICAgICAgICAgIH07XG5cbiAgICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUNvbXBsZXRlZDtcbiAgICAgICAgICAvLyBEaXNwYXRjaCB0aGUgZXhjZXB0aW9uIGJ5IGxvb3BpbmcgYmFjayBhcm91bmQgdG8gdGhlXG4gICAgICAgICAgLy8gY29udGV4dC5kaXNwYXRjaEV4Y2VwdGlvbihjb250ZXh0LmFyZykgY2FsbCBhYm92ZS5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgLy8gQ2FsbCBkZWxlZ2F0ZS5pdGVyYXRvcltjb250ZXh0Lm1ldGhvZF0oY29udGV4dC5hcmcpIGFuZCBoYW5kbGUgdGhlXG4gIC8vIHJlc3VsdCwgZWl0aGVyIGJ5IHJldHVybmluZyBhIHsgdmFsdWUsIGRvbmUgfSByZXN1bHQgZnJvbSB0aGVcbiAgLy8gZGVsZWdhdGUgaXRlcmF0b3IsIG9yIGJ5IG1vZGlmeWluZyBjb250ZXh0Lm1ldGhvZCBhbmQgY29udGV4dC5hcmcsXG4gIC8vIHNldHRpbmcgY29udGV4dC5kZWxlZ2F0ZSB0byBudWxsLCBhbmQgcmV0dXJuaW5nIHRoZSBDb250aW51ZVNlbnRpbmVsLlxuICBmdW5jdGlvbiBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KSB7XG4gICAgdmFyIG1ldGhvZCA9IGRlbGVnYXRlLml0ZXJhdG9yW2NvbnRleHQubWV0aG9kXTtcbiAgICBpZiAobWV0aG9kID09PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIEEgLnRocm93IG9yIC5yZXR1cm4gd2hlbiB0aGUgZGVsZWdhdGUgaXRlcmF0b3IgaGFzIG5vIC50aHJvd1xuICAgICAgLy8gbWV0aG9kIGFsd2F5cyB0ZXJtaW5hdGVzIHRoZSB5aWVsZCogbG9vcC5cbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuXG4gICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAvLyBOb3RlOiBbXCJyZXR1cm5cIl0gbXVzdCBiZSB1c2VkIGZvciBFUzMgcGFyc2luZyBjb21wYXRpYmlsaXR5LlxuICAgICAgICBpZiAoZGVsZWdhdGUuaXRlcmF0b3JbXCJyZXR1cm5cIl0pIHtcbiAgICAgICAgICAvLyBJZiB0aGUgZGVsZWdhdGUgaXRlcmF0b3IgaGFzIGEgcmV0dXJuIG1ldGhvZCwgZ2l2ZSBpdCBhXG4gICAgICAgICAgLy8gY2hhbmNlIHRvIGNsZWFuIHVwLlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJyZXR1cm5cIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KTtcblxuICAgICAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgICAvLyBJZiBtYXliZUludm9rZURlbGVnYXRlKGNvbnRleHQpIGNoYW5nZWQgY29udGV4dC5tZXRob2QgZnJvbVxuICAgICAgICAgICAgLy8gXCJyZXR1cm5cIiB0byBcInRocm93XCIsIGxldCB0aGF0IG92ZXJyaWRlIHRoZSBUeXBlRXJyb3IgYmVsb3cuXG4gICAgICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgICAgY29udGV4dC5hcmcgPSBuZXcgVHlwZUVycm9yKFxuICAgICAgICAgIFwiVGhlIGl0ZXJhdG9yIGRvZXMgbm90IHByb3ZpZGUgYSAndGhyb3cnIG1ldGhvZFwiKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKG1ldGhvZCwgZGVsZWdhdGUuaXRlcmF0b3IsIGNvbnRleHQuYXJnKTtcblxuICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgIGNvbnRleHQuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgdmFyIGluZm8gPSByZWNvcmQuYXJnO1xuXG4gICAgaWYgKCEgaW5mbykge1xuICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICBjb250ZXh0LmFyZyA9IG5ldyBUeXBlRXJyb3IoXCJpdGVyYXRvciByZXN1bHQgaXMgbm90IGFuIG9iamVjdFwiKTtcbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgaWYgKGluZm8uZG9uZSkge1xuICAgICAgLy8gQXNzaWduIHRoZSByZXN1bHQgb2YgdGhlIGZpbmlzaGVkIGRlbGVnYXRlIHRvIHRoZSB0ZW1wb3JhcnlcbiAgICAgIC8vIHZhcmlhYmxlIHNwZWNpZmllZCBieSBkZWxlZ2F0ZS5yZXN1bHROYW1lIChzZWUgZGVsZWdhdGVZaWVsZCkuXG4gICAgICBjb250ZXh0W2RlbGVnYXRlLnJlc3VsdE5hbWVdID0gaW5mby52YWx1ZTtcblxuICAgICAgLy8gUmVzdW1lIGV4ZWN1dGlvbiBhdCB0aGUgZGVzaXJlZCBsb2NhdGlvbiAoc2VlIGRlbGVnYXRlWWllbGQpLlxuICAgICAgY29udGV4dC5uZXh0ID0gZGVsZWdhdGUubmV4dExvYztcblxuICAgICAgLy8gSWYgY29udGV4dC5tZXRob2Qgd2FzIFwidGhyb3dcIiBidXQgdGhlIGRlbGVnYXRlIGhhbmRsZWQgdGhlXG4gICAgICAvLyBleGNlcHRpb24sIGxldCB0aGUgb3V0ZXIgZ2VuZXJhdG9yIHByb2NlZWQgbm9ybWFsbHkuIElmXG4gICAgICAvLyBjb250ZXh0Lm1ldGhvZCB3YXMgXCJuZXh0XCIsIGZvcmdldCBjb250ZXh0LmFyZyBzaW5jZSBpdCBoYXMgYmVlblxuICAgICAgLy8gXCJjb25zdW1lZFwiIGJ5IHRoZSBkZWxlZ2F0ZSBpdGVyYXRvci4gSWYgY29udGV4dC5tZXRob2Qgd2FzXG4gICAgICAvLyBcInJldHVyblwiLCBhbGxvdyB0aGUgb3JpZ2luYWwgLnJldHVybiBjYWxsIHRvIGNvbnRpbnVlIGluIHRoZVxuICAgICAgLy8gb3V0ZXIgZ2VuZXJhdG9yLlxuICAgICAgaWYgKGNvbnRleHQubWV0aG9kICE9PSBcInJldHVyblwiKSB7XG4gICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFJlLXlpZWxkIHRoZSByZXN1bHQgcmV0dXJuZWQgYnkgdGhlIGRlbGVnYXRlIG1ldGhvZC5cbiAgICAgIHJldHVybiBpbmZvO1xuICAgIH1cblxuICAgIC8vIFRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBpcyBmaW5pc2hlZCwgc28gZm9yZ2V0IGl0IGFuZCBjb250aW51ZSB3aXRoXG4gICAgLy8gdGhlIG91dGVyIGdlbmVyYXRvci5cbiAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgfVxuXG4gIC8vIERlZmluZSBHZW5lcmF0b3IucHJvdG90eXBlLntuZXh0LHRocm93LHJldHVybn0gaW4gdGVybXMgb2YgdGhlXG4gIC8vIHVuaWZpZWQgLl9pbnZva2UgaGVscGVyIG1ldGhvZC5cbiAgZGVmaW5lSXRlcmF0b3JNZXRob2RzKEdwKTtcblxuICBHcFt0b1N0cmluZ1RhZ1N5bWJvbF0gPSBcIkdlbmVyYXRvclwiO1xuXG4gIC8vIEEgR2VuZXJhdG9yIHNob3VsZCBhbHdheXMgcmV0dXJuIGl0c2VsZiBhcyB0aGUgaXRlcmF0b3Igb2JqZWN0IHdoZW4gdGhlXG4gIC8vIEBAaXRlcmF0b3IgZnVuY3Rpb24gaXMgY2FsbGVkIG9uIGl0LiBTb21lIGJyb3dzZXJzJyBpbXBsZW1lbnRhdGlvbnMgb2YgdGhlXG4gIC8vIGl0ZXJhdG9yIHByb3RvdHlwZSBjaGFpbiBpbmNvcnJlY3RseSBpbXBsZW1lbnQgdGhpcywgY2F1c2luZyB0aGUgR2VuZXJhdG9yXG4gIC8vIG9iamVjdCB0byBub3QgYmUgcmV0dXJuZWQgZnJvbSB0aGlzIGNhbGwuIFRoaXMgZW5zdXJlcyB0aGF0IGRvZXNuJ3QgaGFwcGVuLlxuICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlZ2VuZXJhdG9yL2lzc3Vlcy8yNzQgZm9yIG1vcmUgZGV0YWlscy5cbiAgR3BbaXRlcmF0b3JTeW1ib2xdID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgR3AudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gXCJbb2JqZWN0IEdlbmVyYXRvcl1cIjtcbiAgfTtcblxuICBmdW5jdGlvbiBwdXNoVHJ5RW50cnkobG9jcykge1xuICAgIHZhciBlbnRyeSA9IHsgdHJ5TG9jOiBsb2NzWzBdIH07XG5cbiAgICBpZiAoMSBpbiBsb2NzKSB7XG4gICAgICBlbnRyeS5jYXRjaExvYyA9IGxvY3NbMV07XG4gICAgfVxuXG4gICAgaWYgKDIgaW4gbG9jcykge1xuICAgICAgZW50cnkuZmluYWxseUxvYyA9IGxvY3NbMl07XG4gICAgICBlbnRyeS5hZnRlckxvYyA9IGxvY3NbM107XG4gICAgfVxuXG4gICAgdGhpcy50cnlFbnRyaWVzLnB1c2goZW50cnkpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVzZXRUcnlFbnRyeShlbnRyeSkge1xuICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uIHx8IHt9O1xuICAgIHJlY29yZC50eXBlID0gXCJub3JtYWxcIjtcbiAgICBkZWxldGUgcmVjb3JkLmFyZztcbiAgICBlbnRyeS5jb21wbGV0aW9uID0gcmVjb3JkO1xuICB9XG5cbiAgZnVuY3Rpb24gQ29udGV4dCh0cnlMb2NzTGlzdCkge1xuICAgIC8vIFRoZSByb290IGVudHJ5IG9iamVjdCAoZWZmZWN0aXZlbHkgYSB0cnkgc3RhdGVtZW50IHdpdGhvdXQgYSBjYXRjaFxuICAgIC8vIG9yIGEgZmluYWxseSBibG9jaykgZ2l2ZXMgdXMgYSBwbGFjZSB0byBzdG9yZSB2YWx1ZXMgdGhyb3duIGZyb21cbiAgICAvLyBsb2NhdGlvbnMgd2hlcmUgdGhlcmUgaXMgbm8gZW5jbG9zaW5nIHRyeSBzdGF0ZW1lbnQuXG4gICAgdGhpcy50cnlFbnRyaWVzID0gW3sgdHJ5TG9jOiBcInJvb3RcIiB9XTtcbiAgICB0cnlMb2NzTGlzdC5mb3JFYWNoKHB1c2hUcnlFbnRyeSwgdGhpcyk7XG4gICAgdGhpcy5yZXNldCh0cnVlKTtcbiAgfVxuXG4gIGV4cG9ydHMua2V5cyA9IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIHZhciBrZXlzID0gW107XG4gICAgZm9yICh2YXIga2V5IGluIG9iamVjdCkge1xuICAgICAga2V5cy5wdXNoKGtleSk7XG4gICAgfVxuICAgIGtleXMucmV2ZXJzZSgpO1xuXG4gICAgLy8gUmF0aGVyIHRoYW4gcmV0dXJuaW5nIGFuIG9iamVjdCB3aXRoIGEgbmV4dCBtZXRob2QsIHdlIGtlZXBcbiAgICAvLyB0aGluZ3Mgc2ltcGxlIGFuZCByZXR1cm4gdGhlIG5leHQgZnVuY3Rpb24gaXRzZWxmLlxuICAgIHJldHVybiBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgd2hpbGUgKGtleXMubGVuZ3RoKSB7XG4gICAgICAgIHZhciBrZXkgPSBrZXlzLnBvcCgpO1xuICAgICAgICBpZiAoa2V5IGluIG9iamVjdCkge1xuICAgICAgICAgIG5leHQudmFsdWUgPSBrZXk7XG4gICAgICAgICAgbmV4dC5kb25lID0gZmFsc2U7XG4gICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gVG8gYXZvaWQgY3JlYXRpbmcgYW4gYWRkaXRpb25hbCBvYmplY3QsIHdlIGp1c3QgaGFuZyB0aGUgLnZhbHVlXG4gICAgICAvLyBhbmQgLmRvbmUgcHJvcGVydGllcyBvZmYgdGhlIG5leHQgZnVuY3Rpb24gb2JqZWN0IGl0c2VsZi4gVGhpc1xuICAgICAgLy8gYWxzbyBlbnN1cmVzIHRoYXQgdGhlIG1pbmlmaWVyIHdpbGwgbm90IGFub255bWl6ZSB0aGUgZnVuY3Rpb24uXG4gICAgICBuZXh0LmRvbmUgPSB0cnVlO1xuICAgICAgcmV0dXJuIG5leHQ7XG4gICAgfTtcbiAgfTtcblxuICBmdW5jdGlvbiB2YWx1ZXMoaXRlcmFibGUpIHtcbiAgICBpZiAoaXRlcmFibGUpIHtcbiAgICAgIHZhciBpdGVyYXRvck1ldGhvZCA9IGl0ZXJhYmxlW2l0ZXJhdG9yU3ltYm9sXTtcbiAgICAgIGlmIChpdGVyYXRvck1ldGhvZCkge1xuICAgICAgICByZXR1cm4gaXRlcmF0b3JNZXRob2QuY2FsbChpdGVyYWJsZSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgaXRlcmFibGUubmV4dCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHJldHVybiBpdGVyYWJsZTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFpc05hTihpdGVyYWJsZS5sZW5ndGgpKSB7XG4gICAgICAgIHZhciBpID0gLTEsIG5leHQgPSBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgICAgIHdoaWxlICgrK2kgPCBpdGVyYWJsZS5sZW5ndGgpIHtcbiAgICAgICAgICAgIGlmIChoYXNPd24uY2FsbChpdGVyYWJsZSwgaSkpIHtcbiAgICAgICAgICAgICAgbmV4dC52YWx1ZSA9IGl0ZXJhYmxlW2ldO1xuICAgICAgICAgICAgICBuZXh0LmRvbmUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbmV4dC52YWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBuZXh0LmRvbmUgPSB0cnVlO1xuXG4gICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIG5leHQubmV4dCA9IG5leHQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gUmV0dXJuIGFuIGl0ZXJhdG9yIHdpdGggbm8gdmFsdWVzLlxuICAgIHJldHVybiB7IG5leHQ6IGRvbmVSZXN1bHQgfTtcbiAgfVxuICBleHBvcnRzLnZhbHVlcyA9IHZhbHVlcztcblxuICBmdW5jdGlvbiBkb25lUmVzdWx0KCkge1xuICAgIHJldHVybiB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWUgfTtcbiAgfVxuXG4gIENvbnRleHQucHJvdG90eXBlID0ge1xuICAgIGNvbnN0cnVjdG9yOiBDb250ZXh0LFxuXG4gICAgcmVzZXQ6IGZ1bmN0aW9uKHNraXBUZW1wUmVzZXQpIHtcbiAgICAgIHRoaXMucHJldiA9IDA7XG4gICAgICB0aGlzLm5leHQgPSAwO1xuICAgICAgLy8gUmVzZXR0aW5nIGNvbnRleHQuX3NlbnQgZm9yIGxlZ2FjeSBzdXBwb3J0IG9mIEJhYmVsJ3NcbiAgICAgIC8vIGZ1bmN0aW9uLnNlbnQgaW1wbGVtZW50YXRpb24uXG4gICAgICB0aGlzLnNlbnQgPSB0aGlzLl9zZW50ID0gdW5kZWZpbmVkO1xuICAgICAgdGhpcy5kb25lID0gZmFsc2U7XG4gICAgICB0aGlzLmRlbGVnYXRlID0gbnVsbDtcblxuICAgICAgdGhpcy5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgIHRoaXMuYXJnID0gdW5kZWZpbmVkO1xuXG4gICAgICB0aGlzLnRyeUVudHJpZXMuZm9yRWFjaChyZXNldFRyeUVudHJ5KTtcblxuICAgICAgaWYgKCFza2lwVGVtcFJlc2V0KSB7XG4gICAgICAgIGZvciAodmFyIG5hbWUgaW4gdGhpcykge1xuICAgICAgICAgIC8vIE5vdCBzdXJlIGFib3V0IHRoZSBvcHRpbWFsIG9yZGVyIG9mIHRoZXNlIGNvbmRpdGlvbnM6XG4gICAgICAgICAgaWYgKG5hbWUuY2hhckF0KDApID09PSBcInRcIiAmJlxuICAgICAgICAgICAgICBoYXNPd24uY2FsbCh0aGlzLCBuYW1lKSAmJlxuICAgICAgICAgICAgICAhaXNOYU4oK25hbWUuc2xpY2UoMSkpKSB7XG4gICAgICAgICAgICB0aGlzW25hbWVdID0gdW5kZWZpbmVkO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBzdG9wOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuZG9uZSA9IHRydWU7XG5cbiAgICAgIHZhciByb290RW50cnkgPSB0aGlzLnRyeUVudHJpZXNbMF07XG4gICAgICB2YXIgcm9vdFJlY29yZCA9IHJvb3RFbnRyeS5jb21wbGV0aW9uO1xuICAgICAgaWYgKHJvb3RSZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHRocm93IHJvb3RSZWNvcmQuYXJnO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5ydmFsO1xuICAgIH0sXG5cbiAgICBkaXNwYXRjaEV4Y2VwdGlvbjogZnVuY3Rpb24oZXhjZXB0aW9uKSB7XG4gICAgICBpZiAodGhpcy5kb25lKSB7XG4gICAgICAgIHRocm93IGV4Y2VwdGlvbjtcbiAgICAgIH1cblxuICAgICAgdmFyIGNvbnRleHQgPSB0aGlzO1xuICAgICAgZnVuY3Rpb24gaGFuZGxlKGxvYywgY2F1Z2h0KSB7XG4gICAgICAgIHJlY29yZC50eXBlID0gXCJ0aHJvd1wiO1xuICAgICAgICByZWNvcmQuYXJnID0gZXhjZXB0aW9uO1xuICAgICAgICBjb250ZXh0Lm5leHQgPSBsb2M7XG5cbiAgICAgICAgaWYgKGNhdWdodCkge1xuICAgICAgICAgIC8vIElmIHRoZSBkaXNwYXRjaGVkIGV4Y2VwdGlvbiB3YXMgY2F1Z2h0IGJ5IGEgY2F0Y2ggYmxvY2ssXG4gICAgICAgICAgLy8gdGhlbiBsZXQgdGhhdCBjYXRjaCBibG9jayBoYW5kbGUgdGhlIGV4Y2VwdGlvbiBub3JtYWxseS5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuICEhIGNhdWdodDtcbiAgICAgIH1cblxuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uO1xuXG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPT09IFwicm9vdFwiKSB7XG4gICAgICAgICAgLy8gRXhjZXB0aW9uIHRocm93biBvdXRzaWRlIG9mIGFueSB0cnkgYmxvY2sgdGhhdCBjb3VsZCBoYW5kbGVcbiAgICAgICAgICAvLyBpdCwgc28gc2V0IHRoZSBjb21wbGV0aW9uIHZhbHVlIG9mIHRoZSBlbnRpcmUgZnVuY3Rpb24gdG9cbiAgICAgICAgICAvLyB0aHJvdyB0aGUgZXhjZXB0aW9uLlxuICAgICAgICAgIHJldHVybiBoYW5kbGUoXCJlbmRcIik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZW50cnkudHJ5TG9jIDw9IHRoaXMucHJldikge1xuICAgICAgICAgIHZhciBoYXNDYXRjaCA9IGhhc093bi5jYWxsKGVudHJ5LCBcImNhdGNoTG9jXCIpO1xuICAgICAgICAgIHZhciBoYXNGaW5hbGx5ID0gaGFzT3duLmNhbGwoZW50cnksIFwiZmluYWxseUxvY1wiKTtcblxuICAgICAgICAgIGlmIChoYXNDYXRjaCAmJiBoYXNGaW5hbGx5KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuY2F0Y2hMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5jYXRjaExvYywgdHJ1ZSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5maW5hbGx5TG9jKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSBpZiAoaGFzQ2F0Y2gpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5jYXRjaExvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmNhdGNoTG9jLCB0cnVlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSBpZiAoaGFzRmluYWxseSkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5maW5hbGx5TG9jKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ0cnkgc3RhdGVtZW50IHdpdGhvdXQgY2F0Y2ggb3IgZmluYWxseVwiKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgYWJydXB0OiBmdW5jdGlvbih0eXBlLCBhcmcpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkudHJ5TG9jIDw9IHRoaXMucHJldiAmJlxuICAgICAgICAgICAgaGFzT3duLmNhbGwoZW50cnksIFwiZmluYWxseUxvY1wiKSAmJlxuICAgICAgICAgICAgdGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgIHZhciBmaW5hbGx5RW50cnkgPSBlbnRyeTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoZmluYWxseUVudHJ5ICYmXG4gICAgICAgICAgKHR5cGUgPT09IFwiYnJlYWtcIiB8fFxuICAgICAgICAgICB0eXBlID09PSBcImNvbnRpbnVlXCIpICYmXG4gICAgICAgICAgZmluYWxseUVudHJ5LnRyeUxvYyA8PSBhcmcgJiZcbiAgICAgICAgICBhcmcgPD0gZmluYWxseUVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgLy8gSWdub3JlIHRoZSBmaW5hbGx5IGVudHJ5IGlmIGNvbnRyb2wgaXMgbm90IGp1bXBpbmcgdG8gYVxuICAgICAgICAvLyBsb2NhdGlvbiBvdXRzaWRlIHRoZSB0cnkvY2F0Y2ggYmxvY2suXG4gICAgICAgIGZpbmFsbHlFbnRyeSA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIHZhciByZWNvcmQgPSBmaW5hbGx5RW50cnkgPyBmaW5hbGx5RW50cnkuY29tcGxldGlvbiA6IHt9O1xuICAgICAgcmVjb3JkLnR5cGUgPSB0eXBlO1xuICAgICAgcmVjb3JkLmFyZyA9IGFyZztcblxuICAgICAgaWYgKGZpbmFsbHlFbnRyeSkge1xuICAgICAgICB0aGlzLm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICB0aGlzLm5leHQgPSBmaW5hbGx5RW50cnkuZmluYWxseUxvYztcbiAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLmNvbXBsZXRlKHJlY29yZCk7XG4gICAgfSxcblxuICAgIGNvbXBsZXRlOiBmdW5jdGlvbihyZWNvcmQsIGFmdGVyTG9jKSB7XG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICB0aHJvdyByZWNvcmQuYXJnO1xuICAgICAgfVxuXG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwiYnJlYWtcIiB8fFxuICAgICAgICAgIHJlY29yZC50eXBlID09PSBcImNvbnRpbnVlXCIpIHtcbiAgICAgICAgdGhpcy5uZXh0ID0gcmVjb3JkLmFyZztcbiAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgdGhpcy5ydmFsID0gdGhpcy5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgICB0aGlzLm1ldGhvZCA9IFwicmV0dXJuXCI7XG4gICAgICAgIHRoaXMubmV4dCA9IFwiZW5kXCI7XG4gICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcIm5vcm1hbFwiICYmIGFmdGVyTG9jKSB7XG4gICAgICAgIHRoaXMubmV4dCA9IGFmdGVyTG9jO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9LFxuXG4gICAgZmluaXNoOiBmdW5jdGlvbihmaW5hbGx5TG9jKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LmZpbmFsbHlMb2MgPT09IGZpbmFsbHlMb2MpIHtcbiAgICAgICAgICB0aGlzLmNvbXBsZXRlKGVudHJ5LmNvbXBsZXRpb24sIGVudHJ5LmFmdGVyTG9jKTtcbiAgICAgICAgICByZXNldFRyeUVudHJ5KGVudHJ5KTtcbiAgICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBcImNhdGNoXCI6IGZ1bmN0aW9uKHRyeUxvYykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPT09IHRyeUxvYykge1xuICAgICAgICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uO1xuICAgICAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgICB2YXIgdGhyb3duID0gcmVjb3JkLmFyZztcbiAgICAgICAgICAgIHJlc2V0VHJ5RW50cnkoZW50cnkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdGhyb3duO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFRoZSBjb250ZXh0LmNhdGNoIG1ldGhvZCBtdXN0IG9ubHkgYmUgY2FsbGVkIHdpdGggYSBsb2NhdGlvblxuICAgICAgLy8gYXJndW1lbnQgdGhhdCBjb3JyZXNwb25kcyB0byBhIGtub3duIGNhdGNoIGJsb2NrLlxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaWxsZWdhbCBjYXRjaCBhdHRlbXB0XCIpO1xuICAgIH0sXG5cbiAgICBkZWxlZ2F0ZVlpZWxkOiBmdW5jdGlvbihpdGVyYWJsZSwgcmVzdWx0TmFtZSwgbmV4dExvYykge1xuICAgICAgdGhpcy5kZWxlZ2F0ZSA9IHtcbiAgICAgICAgaXRlcmF0b3I6IHZhbHVlcyhpdGVyYWJsZSksXG4gICAgICAgIHJlc3VsdE5hbWU6IHJlc3VsdE5hbWUsXG4gICAgICAgIG5leHRMb2M6IG5leHRMb2NcbiAgICAgIH07XG5cbiAgICAgIGlmICh0aGlzLm1ldGhvZCA9PT0gXCJuZXh0XCIpIHtcbiAgICAgICAgLy8gRGVsaWJlcmF0ZWx5IGZvcmdldCB0aGUgbGFzdCBzZW50IHZhbHVlIHNvIHRoYXQgd2UgZG9uJ3RcbiAgICAgICAgLy8gYWNjaWRlbnRhbGx5IHBhc3MgaXQgb24gdG8gdGhlIGRlbGVnYXRlLlxuICAgICAgICB0aGlzLmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuICB9O1xuXG4gIC8vIFJlZ2FyZGxlc3Mgb2Ygd2hldGhlciB0aGlzIHNjcmlwdCBpcyBleGVjdXRpbmcgYXMgYSBDb21tb25KUyBtb2R1bGVcbiAgLy8gb3Igbm90LCByZXR1cm4gdGhlIHJ1bnRpbWUgb2JqZWN0IHNvIHRoYXQgd2UgY2FuIGRlY2xhcmUgdGhlIHZhcmlhYmxlXG4gIC8vIHJlZ2VuZXJhdG9yUnVudGltZSBpbiB0aGUgb3V0ZXIgc2NvcGUsIHdoaWNoIGFsbG93cyB0aGlzIG1vZHVsZSB0byBiZVxuICAvLyBpbmplY3RlZCBlYXNpbHkgYnkgYGJpbi9yZWdlbmVyYXRvciAtLWluY2x1ZGUtcnVudGltZSBzY3JpcHQuanNgLlxuICByZXR1cm4gZXhwb3J0cztcblxufShcbiAgLy8gSWYgdGhpcyBzY3JpcHQgaXMgZXhlY3V0aW5nIGFzIGEgQ29tbW9uSlMgbW9kdWxlLCB1c2UgbW9kdWxlLmV4cG9ydHNcbiAgLy8gYXMgdGhlIHJlZ2VuZXJhdG9yUnVudGltZSBuYW1lc3BhY2UuIE90aGVyd2lzZSBjcmVhdGUgYSBuZXcgZW1wdHlcbiAgLy8gb2JqZWN0LiBFaXRoZXIgd2F5LCB0aGUgcmVzdWx0aW5nIG9iamVjdCB3aWxsIGJlIHVzZWQgdG8gaW5pdGlhbGl6ZVxuICAvLyB0aGUgcmVnZW5lcmF0b3JSdW50aW1lIHZhcmlhYmxlIGF0IHRoZSB0b3Agb2YgdGhpcyBmaWxlLlxuICB0eXBlb2YgbW9kdWxlID09PSBcIm9iamVjdFwiID8gbW9kdWxlLmV4cG9ydHMgOiB7fVxuKSk7XG5cbnRyeSB7XG4gIHJlZ2VuZXJhdG9yUnVudGltZSA9IHJ1bnRpbWU7XG59IGNhdGNoIChhY2NpZGVudGFsU3RyaWN0TW9kZSkge1xuICAvLyBUaGlzIG1vZHVsZSBzaG91bGQgbm90IGJlIHJ1bm5pbmcgaW4gc3RyaWN0IG1vZGUsIHNvIHRoZSBhYm92ZVxuICAvLyBhc3NpZ25tZW50IHNob3VsZCBhbHdheXMgd29yayB1bmxlc3Mgc29tZXRoaW5nIGlzIG1pc2NvbmZpZ3VyZWQuIEp1c3RcbiAgLy8gaW4gY2FzZSBydW50aW1lLmpzIGFjY2lkZW50YWxseSBydW5zIGluIHN0cmljdCBtb2RlLCB3ZSBjYW4gZXNjYXBlXG4gIC8vIHN0cmljdCBtb2RlIHVzaW5nIGEgZ2xvYmFsIEZ1bmN0aW9uIGNhbGwuIFRoaXMgY291bGQgY29uY2VpdmFibHkgZmFpbFxuICAvLyBpZiBhIENvbnRlbnQgU2VjdXJpdHkgUG9saWN5IGZvcmJpZHMgdXNpbmcgRnVuY3Rpb24sIGJ1dCBpbiB0aGF0IGNhc2VcbiAgLy8gdGhlIHByb3BlciBzb2x1dGlvbiBpcyB0byBmaXggdGhlIGFjY2lkZW50YWwgc3RyaWN0IG1vZGUgcHJvYmxlbS4gSWZcbiAgLy8geW91J3ZlIG1pc2NvbmZpZ3VyZWQgeW91ciBidW5kbGVyIHRvIGZvcmNlIHN0cmljdCBtb2RlIGFuZCBhcHBsaWVkIGFcbiAgLy8gQ1NQIHRvIGZvcmJpZCBGdW5jdGlvbiwgYW5kIHlvdSdyZSBub3Qgd2lsbGluZyB0byBmaXggZWl0aGVyIG9mIHRob3NlXG4gIC8vIHByb2JsZW1zLCBwbGVhc2UgZGV0YWlsIHlvdXIgdW5pcXVlIHByZWRpY2FtZW50IGluIGEgR2l0SHViIGlzc3VlLlxuICBGdW5jdGlvbihcInJcIiwgXCJyZWdlbmVyYXRvclJ1bnRpbWUgPSByXCIpKHJ1bnRpbWUpO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG52YXIgZm9ybWF0cyA9IHJlcXVpcmUoJy4vZm9ybWF0cycpO1xudmFyIGhhcyA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5cbnZhciBhcnJheVByZWZpeEdlbmVyYXRvcnMgPSB7XG4gICAgYnJhY2tldHM6IGZ1bmN0aW9uIGJyYWNrZXRzKHByZWZpeCkge1xuICAgICAgICByZXR1cm4gcHJlZml4ICsgJ1tdJztcbiAgICB9LFxuICAgIGNvbW1hOiAnY29tbWEnLFxuICAgIGluZGljZXM6IGZ1bmN0aW9uIGluZGljZXMocHJlZml4LCBrZXkpIHtcbiAgICAgICAgcmV0dXJuIHByZWZpeCArICdbJyArIGtleSArICddJztcbiAgICB9LFxuICAgIHJlcGVhdDogZnVuY3Rpb24gcmVwZWF0KHByZWZpeCkge1xuICAgICAgICByZXR1cm4gcHJlZml4O1xuICAgIH1cbn07XG5cbnZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcbnZhciBwdXNoID0gQXJyYXkucHJvdG90eXBlLnB1c2g7XG52YXIgcHVzaFRvQXJyYXkgPSBmdW5jdGlvbiAoYXJyLCB2YWx1ZU9yQXJyYXkpIHtcbiAgICBwdXNoLmFwcGx5KGFyciwgaXNBcnJheSh2YWx1ZU9yQXJyYXkpID8gdmFsdWVPckFycmF5IDogW3ZhbHVlT3JBcnJheV0pO1xufTtcblxudmFyIHRvSVNPID0gRGF0ZS5wcm90b3R5cGUudG9JU09TdHJpbmc7XG5cbnZhciBkZWZhdWx0Rm9ybWF0ID0gZm9ybWF0c1snZGVmYXVsdCddO1xudmFyIGRlZmF1bHRzID0ge1xuICAgIGFkZFF1ZXJ5UHJlZml4OiBmYWxzZSxcbiAgICBhbGxvd0RvdHM6IGZhbHNlLFxuICAgIGNoYXJzZXQ6ICd1dGYtOCcsXG4gICAgY2hhcnNldFNlbnRpbmVsOiBmYWxzZSxcbiAgICBkZWxpbWl0ZXI6ICcmJyxcbiAgICBlbmNvZGU6IHRydWUsXG4gICAgZW5jb2RlcjogdXRpbHMuZW5jb2RlLFxuICAgIGVuY29kZVZhbHVlc09ubHk6IGZhbHNlLFxuICAgIGZvcm1hdDogZGVmYXVsdEZvcm1hdCxcbiAgICBmb3JtYXR0ZXI6IGZvcm1hdHMuZm9ybWF0dGVyc1tkZWZhdWx0Rm9ybWF0XSxcbiAgICAvLyBkZXByZWNhdGVkXG4gICAgaW5kaWNlczogZmFsc2UsXG4gICAgc2VyaWFsaXplRGF0ZTogZnVuY3Rpb24gc2VyaWFsaXplRGF0ZShkYXRlKSB7XG4gICAgICAgIHJldHVybiB0b0lTTy5jYWxsKGRhdGUpO1xuICAgIH0sXG4gICAgc2tpcE51bGxzOiBmYWxzZSxcbiAgICBzdHJpY3ROdWxsSGFuZGxpbmc6IGZhbHNlXG59O1xuXG52YXIgaXNOb25OdWxsaXNoUHJpbWl0aXZlID0gZnVuY3Rpb24gaXNOb25OdWxsaXNoUHJpbWl0aXZlKHYpIHtcbiAgICByZXR1cm4gdHlwZW9mIHYgPT09ICdzdHJpbmcnXG4gICAgICAgIHx8IHR5cGVvZiB2ID09PSAnbnVtYmVyJ1xuICAgICAgICB8fCB0eXBlb2YgdiA9PT0gJ2Jvb2xlYW4nXG4gICAgICAgIHx8IHR5cGVvZiB2ID09PSAnc3ltYm9sJ1xuICAgICAgICB8fCB0eXBlb2YgdiA9PT0gJ2JpZ2ludCc7XG59O1xuXG52YXIgc3RyaW5naWZ5ID0gZnVuY3Rpb24gc3RyaW5naWZ5KFxuICAgIG9iamVjdCxcbiAgICBwcmVmaXgsXG4gICAgZ2VuZXJhdGVBcnJheVByZWZpeCxcbiAgICBzdHJpY3ROdWxsSGFuZGxpbmcsXG4gICAgc2tpcE51bGxzLFxuICAgIGVuY29kZXIsXG4gICAgZmlsdGVyLFxuICAgIHNvcnQsXG4gICAgYWxsb3dEb3RzLFxuICAgIHNlcmlhbGl6ZURhdGUsXG4gICAgZm9ybWF0dGVyLFxuICAgIGVuY29kZVZhbHVlc09ubHksXG4gICAgY2hhcnNldFxuKSB7XG4gICAgdmFyIG9iaiA9IG9iamVjdDtcbiAgICBpZiAodHlwZW9mIGZpbHRlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBvYmogPSBmaWx0ZXIocHJlZml4LCBvYmopO1xuICAgIH0gZWxzZSBpZiAob2JqIGluc3RhbmNlb2YgRGF0ZSkge1xuICAgICAgICBvYmogPSBzZXJpYWxpemVEYXRlKG9iaik7XG4gICAgfSBlbHNlIGlmIChnZW5lcmF0ZUFycmF5UHJlZml4ID09PSAnY29tbWEnICYmIGlzQXJyYXkob2JqKSkge1xuICAgICAgICBvYmogPSBvYmouam9pbignLCcpO1xuICAgIH1cblxuICAgIGlmIChvYmogPT09IG51bGwpIHtcbiAgICAgICAgaWYgKHN0cmljdE51bGxIYW5kbGluZykge1xuICAgICAgICAgICAgcmV0dXJuIGVuY29kZXIgJiYgIWVuY29kZVZhbHVlc09ubHkgPyBlbmNvZGVyKHByZWZpeCwgZGVmYXVsdHMuZW5jb2RlciwgY2hhcnNldCwgJ2tleScpIDogcHJlZml4O1xuICAgICAgICB9XG5cbiAgICAgICAgb2JqID0gJyc7XG4gICAgfVxuXG4gICAgaWYgKGlzTm9uTnVsbGlzaFByaW1pdGl2ZShvYmopIHx8IHV0aWxzLmlzQnVmZmVyKG9iaikpIHtcbiAgICAgICAgaWYgKGVuY29kZXIpIHtcbiAgICAgICAgICAgIHZhciBrZXlWYWx1ZSA9IGVuY29kZVZhbHVlc09ubHkgPyBwcmVmaXggOiBlbmNvZGVyKHByZWZpeCwgZGVmYXVsdHMuZW5jb2RlciwgY2hhcnNldCwgJ2tleScpO1xuICAgICAgICAgICAgcmV0dXJuIFtmb3JtYXR0ZXIoa2V5VmFsdWUpICsgJz0nICsgZm9ybWF0dGVyKGVuY29kZXIob2JqLCBkZWZhdWx0cy5lbmNvZGVyLCBjaGFyc2V0LCAndmFsdWUnKSldO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBbZm9ybWF0dGVyKHByZWZpeCkgKyAnPScgKyBmb3JtYXR0ZXIoU3RyaW5nKG9iaikpXTtcbiAgICB9XG5cbiAgICB2YXIgdmFsdWVzID0gW107XG5cbiAgICBpZiAodHlwZW9mIG9iaiA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlcztcbiAgICB9XG5cbiAgICB2YXIgb2JqS2V5cztcbiAgICBpZiAoaXNBcnJheShmaWx0ZXIpKSB7XG4gICAgICAgIG9iaktleXMgPSBmaWx0ZXI7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmopO1xuICAgICAgICBvYmpLZXlzID0gc29ydCA/IGtleXMuc29ydChzb3J0KSA6IGtleXM7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvYmpLZXlzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIHZhciBrZXkgPSBvYmpLZXlzW2ldO1xuXG4gICAgICAgIGlmIChza2lwTnVsbHMgJiYgb2JqW2tleV0gPT09IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzQXJyYXkob2JqKSkge1xuICAgICAgICAgICAgcHVzaFRvQXJyYXkodmFsdWVzLCBzdHJpbmdpZnkoXG4gICAgICAgICAgICAgICAgb2JqW2tleV0sXG4gICAgICAgICAgICAgICAgdHlwZW9mIGdlbmVyYXRlQXJyYXlQcmVmaXggPT09ICdmdW5jdGlvbicgPyBnZW5lcmF0ZUFycmF5UHJlZml4KHByZWZpeCwga2V5KSA6IHByZWZpeCxcbiAgICAgICAgICAgICAgICBnZW5lcmF0ZUFycmF5UHJlZml4LFxuICAgICAgICAgICAgICAgIHN0cmljdE51bGxIYW5kbGluZyxcbiAgICAgICAgICAgICAgICBza2lwTnVsbHMsXG4gICAgICAgICAgICAgICAgZW5jb2RlcixcbiAgICAgICAgICAgICAgICBmaWx0ZXIsXG4gICAgICAgICAgICAgICAgc29ydCxcbiAgICAgICAgICAgICAgICBhbGxvd0RvdHMsXG4gICAgICAgICAgICAgICAgc2VyaWFsaXplRGF0ZSxcbiAgICAgICAgICAgICAgICBmb3JtYXR0ZXIsXG4gICAgICAgICAgICAgICAgZW5jb2RlVmFsdWVzT25seSxcbiAgICAgICAgICAgICAgICBjaGFyc2V0XG4gICAgICAgICAgICApKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHB1c2hUb0FycmF5KHZhbHVlcywgc3RyaW5naWZ5KFxuICAgICAgICAgICAgICAgIG9ialtrZXldLFxuICAgICAgICAgICAgICAgIHByZWZpeCArIChhbGxvd0RvdHMgPyAnLicgKyBrZXkgOiAnWycgKyBrZXkgKyAnXScpLFxuICAgICAgICAgICAgICAgIGdlbmVyYXRlQXJyYXlQcmVmaXgsXG4gICAgICAgICAgICAgICAgc3RyaWN0TnVsbEhhbmRsaW5nLFxuICAgICAgICAgICAgICAgIHNraXBOdWxscyxcbiAgICAgICAgICAgICAgICBlbmNvZGVyLFxuICAgICAgICAgICAgICAgIGZpbHRlcixcbiAgICAgICAgICAgICAgICBzb3J0LFxuICAgICAgICAgICAgICAgIGFsbG93RG90cyxcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVEYXRlLFxuICAgICAgICAgICAgICAgIGZvcm1hdHRlcixcbiAgICAgICAgICAgICAgICBlbmNvZGVWYWx1ZXNPbmx5LFxuICAgICAgICAgICAgICAgIGNoYXJzZXRcbiAgICAgICAgICAgICkpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbHVlcztcbn07XG5cbnZhciBub3JtYWxpemVTdHJpbmdpZnlPcHRpb25zID0gZnVuY3Rpb24gbm9ybWFsaXplU3RyaW5naWZ5T3B0aW9ucyhvcHRzKSB7XG4gICAgaWYgKCFvcHRzKSB7XG4gICAgICAgIHJldHVybiBkZWZhdWx0cztcbiAgICB9XG5cbiAgICBpZiAob3B0cy5lbmNvZGVyICE9PSBudWxsICYmIG9wdHMuZW5jb2RlciAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiBvcHRzLmVuY29kZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRW5jb2RlciBoYXMgdG8gYmUgYSBmdW5jdGlvbi4nKTtcbiAgICB9XG5cbiAgICB2YXIgY2hhcnNldCA9IG9wdHMuY2hhcnNldCB8fCBkZWZhdWx0cy5jaGFyc2V0O1xuICAgIGlmICh0eXBlb2Ygb3B0cy5jaGFyc2V0ICE9PSAndW5kZWZpbmVkJyAmJiBvcHRzLmNoYXJzZXQgIT09ICd1dGYtOCcgJiYgb3B0cy5jaGFyc2V0ICE9PSAnaXNvLTg4NTktMScpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIGNoYXJzZXQgb3B0aW9uIG11c3QgYmUgZWl0aGVyIHV0Zi04LCBpc28tODg1OS0xLCBvciB1bmRlZmluZWQnKTtcbiAgICB9XG5cbiAgICB2YXIgZm9ybWF0ID0gZm9ybWF0c1snZGVmYXVsdCddO1xuICAgIGlmICh0eXBlb2Ygb3B0cy5mb3JtYXQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGlmICghaGFzLmNhbGwoZm9ybWF0cy5mb3JtYXR0ZXJzLCBvcHRzLmZvcm1hdCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZm9ybWF0IG9wdGlvbiBwcm92aWRlZC4nKTtcbiAgICAgICAgfVxuICAgICAgICBmb3JtYXQgPSBvcHRzLmZvcm1hdDtcbiAgICB9XG4gICAgdmFyIGZvcm1hdHRlciA9IGZvcm1hdHMuZm9ybWF0dGVyc1tmb3JtYXRdO1xuXG4gICAgdmFyIGZpbHRlciA9IGRlZmF1bHRzLmZpbHRlcjtcbiAgICBpZiAodHlwZW9mIG9wdHMuZmlsdGVyID09PSAnZnVuY3Rpb24nIHx8IGlzQXJyYXkob3B0cy5maWx0ZXIpKSB7XG4gICAgICAgIGZpbHRlciA9IG9wdHMuZmlsdGVyO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICAgIGFkZFF1ZXJ5UHJlZml4OiB0eXBlb2Ygb3B0cy5hZGRRdWVyeVByZWZpeCA9PT0gJ2Jvb2xlYW4nID8gb3B0cy5hZGRRdWVyeVByZWZpeCA6IGRlZmF1bHRzLmFkZFF1ZXJ5UHJlZml4LFxuICAgICAgICBhbGxvd0RvdHM6IHR5cGVvZiBvcHRzLmFsbG93RG90cyA9PT0gJ3VuZGVmaW5lZCcgPyBkZWZhdWx0cy5hbGxvd0RvdHMgOiAhIW9wdHMuYWxsb3dEb3RzLFxuICAgICAgICBjaGFyc2V0OiBjaGFyc2V0LFxuICAgICAgICBjaGFyc2V0U2VudGluZWw6IHR5cGVvZiBvcHRzLmNoYXJzZXRTZW50aW5lbCA9PT0gJ2Jvb2xlYW4nID8gb3B0cy5jaGFyc2V0U2VudGluZWwgOiBkZWZhdWx0cy5jaGFyc2V0U2VudGluZWwsXG4gICAgICAgIGRlbGltaXRlcjogdHlwZW9mIG9wdHMuZGVsaW1pdGVyID09PSAndW5kZWZpbmVkJyA/IGRlZmF1bHRzLmRlbGltaXRlciA6IG9wdHMuZGVsaW1pdGVyLFxuICAgICAgICBlbmNvZGU6IHR5cGVvZiBvcHRzLmVuY29kZSA9PT0gJ2Jvb2xlYW4nID8gb3B0cy5lbmNvZGUgOiBkZWZhdWx0cy5lbmNvZGUsXG4gICAgICAgIGVuY29kZXI6IHR5cGVvZiBvcHRzLmVuY29kZXIgPT09ICdmdW5jdGlvbicgPyBvcHRzLmVuY29kZXIgOiBkZWZhdWx0cy5lbmNvZGVyLFxuICAgICAgICBlbmNvZGVWYWx1ZXNPbmx5OiB0eXBlb2Ygb3B0cy5lbmNvZGVWYWx1ZXNPbmx5ID09PSAnYm9vbGVhbicgPyBvcHRzLmVuY29kZVZhbHVlc09ubHkgOiBkZWZhdWx0cy5lbmNvZGVWYWx1ZXNPbmx5LFxuICAgICAgICBmaWx0ZXI6IGZpbHRlcixcbiAgICAgICAgZm9ybWF0dGVyOiBmb3JtYXR0ZXIsXG4gICAgICAgIHNlcmlhbGl6ZURhdGU6IHR5cGVvZiBvcHRzLnNlcmlhbGl6ZURhdGUgPT09ICdmdW5jdGlvbicgPyBvcHRzLnNlcmlhbGl6ZURhdGUgOiBkZWZhdWx0cy5zZXJpYWxpemVEYXRlLFxuICAgICAgICBza2lwTnVsbHM6IHR5cGVvZiBvcHRzLnNraXBOdWxscyA9PT0gJ2Jvb2xlYW4nID8gb3B0cy5za2lwTnVsbHMgOiBkZWZhdWx0cy5za2lwTnVsbHMsXG4gICAgICAgIHNvcnQ6IHR5cGVvZiBvcHRzLnNvcnQgPT09ICdmdW5jdGlvbicgPyBvcHRzLnNvcnQgOiBudWxsLFxuICAgICAgICBzdHJpY3ROdWxsSGFuZGxpbmc6IHR5cGVvZiBvcHRzLnN0cmljdE51bGxIYW5kbGluZyA9PT0gJ2Jvb2xlYW4nID8gb3B0cy5zdHJpY3ROdWxsSGFuZGxpbmcgOiBkZWZhdWx0cy5zdHJpY3ROdWxsSGFuZGxpbmdcbiAgICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqZWN0LCBvcHRzKSB7XG4gICAgdmFyIG9iaiA9IG9iamVjdDtcbiAgICB2YXIgb3B0aW9ucyA9IG5vcm1hbGl6ZVN0cmluZ2lmeU9wdGlvbnMob3B0cyk7XG5cbiAgICB2YXIgb2JqS2V5cztcbiAgICB2YXIgZmlsdGVyO1xuXG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLmZpbHRlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBmaWx0ZXIgPSBvcHRpb25zLmZpbHRlcjtcbiAgICAgICAgb2JqID0gZmlsdGVyKCcnLCBvYmopO1xuICAgIH0gZWxzZSBpZiAoaXNBcnJheShvcHRpb25zLmZpbHRlcikpIHtcbiAgICAgICAgZmlsdGVyID0gb3B0aW9ucy5maWx0ZXI7XG4gICAgICAgIG9iaktleXMgPSBmaWx0ZXI7XG4gICAgfVxuXG4gICAgdmFyIGtleXMgPSBbXTtcblxuICAgIGlmICh0eXBlb2Ygb2JqICE9PSAnb2JqZWN0JyB8fCBvYmogPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgIH1cblxuICAgIHZhciBhcnJheUZvcm1hdDtcbiAgICBpZiAob3B0cyAmJiBvcHRzLmFycmF5Rm9ybWF0IGluIGFycmF5UHJlZml4R2VuZXJhdG9ycykge1xuICAgICAgICBhcnJheUZvcm1hdCA9IG9wdHMuYXJyYXlGb3JtYXQ7XG4gICAgfSBlbHNlIGlmIChvcHRzICYmICdpbmRpY2VzJyBpbiBvcHRzKSB7XG4gICAgICAgIGFycmF5Rm9ybWF0ID0gb3B0cy5pbmRpY2VzID8gJ2luZGljZXMnIDogJ3JlcGVhdCc7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgYXJyYXlGb3JtYXQgPSAnaW5kaWNlcyc7XG4gICAgfVxuXG4gICAgdmFyIGdlbmVyYXRlQXJyYXlQcmVmaXggPSBhcnJheVByZWZpeEdlbmVyYXRvcnNbYXJyYXlGb3JtYXRdO1xuXG4gICAgaWYgKCFvYmpLZXlzKSB7XG4gICAgICAgIG9iaktleXMgPSBPYmplY3Qua2V5cyhvYmopO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLnNvcnQpIHtcbiAgICAgICAgb2JqS2V5cy5zb3J0KG9wdGlvbnMuc29ydCk7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvYmpLZXlzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIHZhciBrZXkgPSBvYmpLZXlzW2ldO1xuXG4gICAgICAgIGlmIChvcHRpb25zLnNraXBOdWxscyAmJiBvYmpba2V5XSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgcHVzaFRvQXJyYXkoa2V5cywgc3RyaW5naWZ5KFxuICAgICAgICAgICAgb2JqW2tleV0sXG4gICAgICAgICAgICBrZXksXG4gICAgICAgICAgICBnZW5lcmF0ZUFycmF5UHJlZml4LFxuICAgICAgICAgICAgb3B0aW9ucy5zdHJpY3ROdWxsSGFuZGxpbmcsXG4gICAgICAgICAgICBvcHRpb25zLnNraXBOdWxscyxcbiAgICAgICAgICAgIG9wdGlvbnMuZW5jb2RlID8gb3B0aW9ucy5lbmNvZGVyIDogbnVsbCxcbiAgICAgICAgICAgIG9wdGlvbnMuZmlsdGVyLFxuICAgICAgICAgICAgb3B0aW9ucy5zb3J0LFxuICAgICAgICAgICAgb3B0aW9ucy5hbGxvd0RvdHMsXG4gICAgICAgICAgICBvcHRpb25zLnNlcmlhbGl6ZURhdGUsXG4gICAgICAgICAgICBvcHRpb25zLmZvcm1hdHRlcixcbiAgICAgICAgICAgIG9wdGlvbnMuZW5jb2RlVmFsdWVzT25seSxcbiAgICAgICAgICAgIG9wdGlvbnMuY2hhcnNldFxuICAgICAgICApKTtcbiAgICB9XG5cbiAgICB2YXIgam9pbmVkID0ga2V5cy5qb2luKG9wdGlvbnMuZGVsaW1pdGVyKTtcbiAgICB2YXIgcHJlZml4ID0gb3B0aW9ucy5hZGRRdWVyeVByZWZpeCA9PT0gdHJ1ZSA/ICc/JyA6ICcnO1xuXG4gICAgaWYgKG9wdGlvbnMuY2hhcnNldFNlbnRpbmVsKSB7XG4gICAgICAgIGlmIChvcHRpb25zLmNoYXJzZXQgPT09ICdpc28tODg1OS0xJykge1xuICAgICAgICAgICAgLy8gZW5jb2RlVVJJQ29tcG9uZW50KCcmIzEwMDAzOycpLCB0aGUgXCJudW1lcmljIGVudGl0eVwiIHJlcHJlc2VudGF0aW9uIG9mIGEgY2hlY2ttYXJrXG4gICAgICAgICAgICBwcmVmaXggKz0gJ3V0Zjg9JTI2JTIzMTAwMDMlM0ImJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIGVuY29kZVVSSUNvbXBvbmVudCgn4pyTJylcbiAgICAgICAgICAgIHByZWZpeCArPSAndXRmOD0lRTIlOUMlOTMmJztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBqb2luZWQubGVuZ3RoID4gMCA/IHByZWZpeCArIGpvaW5lZCA6ICcnO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xuXG52YXIgaGFzID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxudmFyIGRlZmF1bHRzID0ge1xuICAgIGFsbG93RG90czogZmFsc2UsXG4gICAgYWxsb3dQcm90b3R5cGVzOiBmYWxzZSxcbiAgICBhcnJheUxpbWl0OiAyMCxcbiAgICBjaGFyc2V0OiAndXRmLTgnLFxuICAgIGNoYXJzZXRTZW50aW5lbDogZmFsc2UsXG4gICAgY29tbWE6IGZhbHNlLFxuICAgIGRlY29kZXI6IHV0aWxzLmRlY29kZSxcbiAgICBkZWxpbWl0ZXI6ICcmJyxcbiAgICBkZXB0aDogNSxcbiAgICBpZ25vcmVRdWVyeVByZWZpeDogZmFsc2UsXG4gICAgaW50ZXJwcmV0TnVtZXJpY0VudGl0aWVzOiBmYWxzZSxcbiAgICBwYXJhbWV0ZXJMaW1pdDogMTAwMCxcbiAgICBwYXJzZUFycmF5czogdHJ1ZSxcbiAgICBwbGFpbk9iamVjdHM6IGZhbHNlLFxuICAgIHN0cmljdE51bGxIYW5kbGluZzogZmFsc2Vcbn07XG5cbnZhciBpbnRlcnByZXROdW1lcmljRW50aXRpZXMgPSBmdW5jdGlvbiAoc3RyKSB7XG4gICAgcmV0dXJuIHN0ci5yZXBsYWNlKC8mIyhcXGQrKTsvZywgZnVuY3Rpb24gKCQwLCBudW1iZXJTdHIpIHtcbiAgICAgICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUocGFyc2VJbnQobnVtYmVyU3RyLCAxMCkpO1xuICAgIH0pO1xufTtcblxuLy8gVGhpcyBpcyB3aGF0IGJyb3dzZXJzIHdpbGwgc3VibWl0IHdoZW4gdGhlIOKckyBjaGFyYWN0ZXIgb2NjdXJzIGluIGFuXG4vLyBhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQgYm9keSBhbmQgdGhlIGVuY29kaW5nIG9mIHRoZSBwYWdlIGNvbnRhaW5pbmdcbi8vIHRoZSBmb3JtIGlzIGlzby04ODU5LTEsIG9yIHdoZW4gdGhlIHN1Ym1pdHRlZCBmb3JtIGhhcyBhbiBhY2NlcHQtY2hhcnNldFxuLy8gYXR0cmlidXRlIG9mIGlzby04ODU5LTEuIFByZXN1bWFibHkgYWxzbyB3aXRoIG90aGVyIGNoYXJzZXRzIHRoYXQgZG8gbm90IGNvbnRhaW5cbi8vIHRoZSDinJMgY2hhcmFjdGVyLCBzdWNoIGFzIHVzLWFzY2lpLlxudmFyIGlzb1NlbnRpbmVsID0gJ3V0Zjg9JTI2JTIzMTAwMDMlM0InOyAvLyBlbmNvZGVVUklDb21wb25lbnQoJyYjMTAwMDM7JylcblxuLy8gVGhlc2UgYXJlIHRoZSBwZXJjZW50LWVuY29kZWQgdXRmLTggb2N0ZXRzIHJlcHJlc2VudGluZyBhIGNoZWNrbWFyaywgaW5kaWNhdGluZyB0aGF0IHRoZSByZXF1ZXN0IGFjdHVhbGx5IGlzIHV0Zi04IGVuY29kZWQuXG52YXIgY2hhcnNldFNlbnRpbmVsID0gJ3V0Zjg9JUUyJTlDJTkzJzsgLy8gZW5jb2RlVVJJQ29tcG9uZW50KCfinJMnKVxuXG52YXIgcGFyc2VWYWx1ZXMgPSBmdW5jdGlvbiBwYXJzZVF1ZXJ5U3RyaW5nVmFsdWVzKHN0ciwgb3B0aW9ucykge1xuICAgIHZhciBvYmogPSB7fTtcbiAgICB2YXIgY2xlYW5TdHIgPSBvcHRpb25zLmlnbm9yZVF1ZXJ5UHJlZml4ID8gc3RyLnJlcGxhY2UoL15cXD8vLCAnJykgOiBzdHI7XG4gICAgdmFyIGxpbWl0ID0gb3B0aW9ucy5wYXJhbWV0ZXJMaW1pdCA9PT0gSW5maW5pdHkgPyB1bmRlZmluZWQgOiBvcHRpb25zLnBhcmFtZXRlckxpbWl0O1xuICAgIHZhciBwYXJ0cyA9IGNsZWFuU3RyLnNwbGl0KG9wdGlvbnMuZGVsaW1pdGVyLCBsaW1pdCk7XG4gICAgdmFyIHNraXBJbmRleCA9IC0xOyAvLyBLZWVwIHRyYWNrIG9mIHdoZXJlIHRoZSB1dGY4IHNlbnRpbmVsIHdhcyBmb3VuZFxuICAgIHZhciBpO1xuXG4gICAgdmFyIGNoYXJzZXQgPSBvcHRpb25zLmNoYXJzZXQ7XG4gICAgaWYgKG9wdGlvbnMuY2hhcnNldFNlbnRpbmVsKSB7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBwYXJ0cy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgaWYgKHBhcnRzW2ldLmluZGV4T2YoJ3V0Zjg9JykgPT09IDApIHtcbiAgICAgICAgICAgICAgICBpZiAocGFydHNbaV0gPT09IGNoYXJzZXRTZW50aW5lbCkge1xuICAgICAgICAgICAgICAgICAgICBjaGFyc2V0ID0gJ3V0Zi04JztcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHBhcnRzW2ldID09PSBpc29TZW50aW5lbCkge1xuICAgICAgICAgICAgICAgICAgICBjaGFyc2V0ID0gJ2lzby04ODU5LTEnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBza2lwSW5kZXggPSBpO1xuICAgICAgICAgICAgICAgIGkgPSBwYXJ0cy5sZW5ndGg7IC8vIFRoZSBlc2xpbnQgc2V0dGluZ3MgZG8gbm90IGFsbG93IGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZm9yIChpID0gMDsgaSA8IHBhcnRzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGlmIChpID09PSBza2lwSW5kZXgpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIHZhciBwYXJ0ID0gcGFydHNbaV07XG5cbiAgICAgICAgdmFyIGJyYWNrZXRFcXVhbHNQb3MgPSBwYXJ0LmluZGV4T2YoJ109Jyk7XG4gICAgICAgIHZhciBwb3MgPSBicmFja2V0RXF1YWxzUG9zID09PSAtMSA/IHBhcnQuaW5kZXhPZignPScpIDogYnJhY2tldEVxdWFsc1BvcyArIDE7XG5cbiAgICAgICAgdmFyIGtleSwgdmFsO1xuICAgICAgICBpZiAocG9zID09PSAtMSkge1xuICAgICAgICAgICAga2V5ID0gb3B0aW9ucy5kZWNvZGVyKHBhcnQsIGRlZmF1bHRzLmRlY29kZXIsIGNoYXJzZXQsICdrZXknKTtcbiAgICAgICAgICAgIHZhbCA9IG9wdGlvbnMuc3RyaWN0TnVsbEhhbmRsaW5nID8gbnVsbCA6ICcnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAga2V5ID0gb3B0aW9ucy5kZWNvZGVyKHBhcnQuc2xpY2UoMCwgcG9zKSwgZGVmYXVsdHMuZGVjb2RlciwgY2hhcnNldCwgJ2tleScpO1xuICAgICAgICAgICAgdmFsID0gb3B0aW9ucy5kZWNvZGVyKHBhcnQuc2xpY2UocG9zICsgMSksIGRlZmF1bHRzLmRlY29kZXIsIGNoYXJzZXQsICd2YWx1ZScpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHZhbCAmJiBvcHRpb25zLmludGVycHJldE51bWVyaWNFbnRpdGllcyAmJiBjaGFyc2V0ID09PSAnaXNvLTg4NTktMScpIHtcbiAgICAgICAgICAgIHZhbCA9IGludGVycHJldE51bWVyaWNFbnRpdGllcyh2YWwpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHZhbCAmJiBvcHRpb25zLmNvbW1hICYmIHZhbC5pbmRleE9mKCcsJykgPiAtMSkge1xuICAgICAgICAgICAgdmFsID0gdmFsLnNwbGl0KCcsJyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaGFzLmNhbGwob2JqLCBrZXkpKSB7XG4gICAgICAgICAgICBvYmpba2V5XSA9IHV0aWxzLmNvbWJpbmUob2JqW2tleV0sIHZhbCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBvYmpba2V5XSA9IHZhbDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBvYmo7XG59O1xuXG52YXIgcGFyc2VPYmplY3QgPSBmdW5jdGlvbiAoY2hhaW4sIHZhbCwgb3B0aW9ucykge1xuICAgIHZhciBsZWFmID0gdmFsO1xuXG4gICAgZm9yICh2YXIgaSA9IGNoYWluLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBvYmo7XG4gICAgICAgIHZhciByb290ID0gY2hhaW5baV07XG5cbiAgICAgICAgaWYgKHJvb3QgPT09ICdbXScgJiYgb3B0aW9ucy5wYXJzZUFycmF5cykge1xuICAgICAgICAgICAgb2JqID0gW10uY29uY2F0KGxlYWYpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgb2JqID0gb3B0aW9ucy5wbGFpbk9iamVjdHMgPyBPYmplY3QuY3JlYXRlKG51bGwpIDoge307XG4gICAgICAgICAgICB2YXIgY2xlYW5Sb290ID0gcm9vdC5jaGFyQXQoMCkgPT09ICdbJyAmJiByb290LmNoYXJBdChyb290Lmxlbmd0aCAtIDEpID09PSAnXScgPyByb290LnNsaWNlKDEsIC0xKSA6IHJvb3Q7XG4gICAgICAgICAgICB2YXIgaW5kZXggPSBwYXJzZUludChjbGVhblJvb3QsIDEwKTtcbiAgICAgICAgICAgIGlmICghb3B0aW9ucy5wYXJzZUFycmF5cyAmJiBjbGVhblJvb3QgPT09ICcnKSB7XG4gICAgICAgICAgICAgICAgb2JqID0geyAwOiBsZWFmIH07XG4gICAgICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgICAgICAgICFpc05hTihpbmRleClcbiAgICAgICAgICAgICAgICAmJiByb290ICE9PSBjbGVhblJvb3RcbiAgICAgICAgICAgICAgICAmJiBTdHJpbmcoaW5kZXgpID09PSBjbGVhblJvb3RcbiAgICAgICAgICAgICAgICAmJiBpbmRleCA+PSAwXG4gICAgICAgICAgICAgICAgJiYgKG9wdGlvbnMucGFyc2VBcnJheXMgJiYgaW5kZXggPD0gb3B0aW9ucy5hcnJheUxpbWl0KVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgb2JqID0gW107XG4gICAgICAgICAgICAgICAgb2JqW2luZGV4XSA9IGxlYWY7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG9ialtjbGVhblJvb3RdID0gbGVhZjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGxlYWYgPSBvYmo7XG4gICAgfVxuXG4gICAgcmV0dXJuIGxlYWY7XG59O1xuXG52YXIgcGFyc2VLZXlzID0gZnVuY3Rpb24gcGFyc2VRdWVyeVN0cmluZ0tleXMoZ2l2ZW5LZXksIHZhbCwgb3B0aW9ucykge1xuICAgIGlmICghZ2l2ZW5LZXkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIFRyYW5zZm9ybSBkb3Qgbm90YXRpb24gdG8gYnJhY2tldCBub3RhdGlvblxuICAgIHZhciBrZXkgPSBvcHRpb25zLmFsbG93RG90cyA/IGdpdmVuS2V5LnJlcGxhY2UoL1xcLihbXi5bXSspL2csICdbJDFdJykgOiBnaXZlbktleTtcblxuICAgIC8vIFRoZSByZWdleCBjaHVua3NcblxuICAgIHZhciBicmFja2V0cyA9IC8oXFxbW15bXFxdXSpdKS87XG4gICAgdmFyIGNoaWxkID0gLyhcXFtbXltcXF1dKl0pL2c7XG5cbiAgICAvLyBHZXQgdGhlIHBhcmVudFxuXG4gICAgdmFyIHNlZ21lbnQgPSBvcHRpb25zLmRlcHRoID4gMCAmJiBicmFja2V0cy5leGVjKGtleSk7XG4gICAgdmFyIHBhcmVudCA9IHNlZ21lbnQgPyBrZXkuc2xpY2UoMCwgc2VnbWVudC5pbmRleCkgOiBrZXk7XG5cbiAgICAvLyBTdGFzaCB0aGUgcGFyZW50IGlmIGl0IGV4aXN0c1xuXG4gICAgdmFyIGtleXMgPSBbXTtcbiAgICBpZiAocGFyZW50KSB7XG4gICAgICAgIC8vIElmIHdlIGFyZW4ndCB1c2luZyBwbGFpbiBvYmplY3RzLCBvcHRpb25hbGx5IHByZWZpeCBrZXlzIHRoYXQgd291bGQgb3ZlcndyaXRlIG9iamVjdCBwcm90b3R5cGUgcHJvcGVydGllc1xuICAgICAgICBpZiAoIW9wdGlvbnMucGxhaW5PYmplY3RzICYmIGhhcy5jYWxsKE9iamVjdC5wcm90b3R5cGUsIHBhcmVudCkpIHtcbiAgICAgICAgICAgIGlmICghb3B0aW9ucy5hbGxvd1Byb3RvdHlwZXMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBrZXlzLnB1c2gocGFyZW50KTtcbiAgICB9XG5cbiAgICAvLyBMb29wIHRocm91Z2ggY2hpbGRyZW4gYXBwZW5kaW5nIHRvIHRoZSBhcnJheSB1bnRpbCB3ZSBoaXQgZGVwdGhcblxuICAgIHZhciBpID0gMDtcbiAgICB3aGlsZSAob3B0aW9ucy5kZXB0aCA+IDAgJiYgKHNlZ21lbnQgPSBjaGlsZC5leGVjKGtleSkpICE9PSBudWxsICYmIGkgPCBvcHRpb25zLmRlcHRoKSB7XG4gICAgICAgIGkgKz0gMTtcbiAgICAgICAgaWYgKCFvcHRpb25zLnBsYWluT2JqZWN0cyAmJiBoYXMuY2FsbChPYmplY3QucHJvdG90eXBlLCBzZWdtZW50WzFdLnNsaWNlKDEsIC0xKSkpIHtcbiAgICAgICAgICAgIGlmICghb3B0aW9ucy5hbGxvd1Byb3RvdHlwZXMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAga2V5cy5wdXNoKHNlZ21lbnRbMV0pO1xuICAgIH1cblxuICAgIC8vIElmIHRoZXJlJ3MgYSByZW1haW5kZXIsIGp1c3QgYWRkIHdoYXRldmVyIGlzIGxlZnRcblxuICAgIGlmIChzZWdtZW50KSB7XG4gICAgICAgIGtleXMucHVzaCgnWycgKyBrZXkuc2xpY2Uoc2VnbWVudC5pbmRleCkgKyAnXScpO1xuICAgIH1cblxuICAgIHJldHVybiBwYXJzZU9iamVjdChrZXlzLCB2YWwsIG9wdGlvbnMpO1xufTtcblxudmFyIG5vcm1hbGl6ZVBhcnNlT3B0aW9ucyA9IGZ1bmN0aW9uIG5vcm1hbGl6ZVBhcnNlT3B0aW9ucyhvcHRzKSB7XG4gICAgaWYgKCFvcHRzKSB7XG4gICAgICAgIHJldHVybiBkZWZhdWx0cztcbiAgICB9XG5cbiAgICBpZiAob3B0cy5kZWNvZGVyICE9PSBudWxsICYmIG9wdHMuZGVjb2RlciAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiBvcHRzLmRlY29kZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRGVjb2RlciBoYXMgdG8gYmUgYSBmdW5jdGlvbi4nKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIG9wdHMuY2hhcnNldCAhPT0gJ3VuZGVmaW5lZCcgJiYgb3B0cy5jaGFyc2V0ICE9PSAndXRmLTgnICYmIG9wdHMuY2hhcnNldCAhPT0gJ2lzby04ODU5LTEnKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignVGhlIGNoYXJzZXQgb3B0aW9uIG11c3QgYmUgZWl0aGVyIHV0Zi04LCBpc28tODg1OS0xLCBvciB1bmRlZmluZWQnKTtcbiAgICB9XG4gICAgdmFyIGNoYXJzZXQgPSB0eXBlb2Ygb3B0cy5jaGFyc2V0ID09PSAndW5kZWZpbmVkJyA/IGRlZmF1bHRzLmNoYXJzZXQgOiBvcHRzLmNoYXJzZXQ7XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBhbGxvd0RvdHM6IHR5cGVvZiBvcHRzLmFsbG93RG90cyA9PT0gJ3VuZGVmaW5lZCcgPyBkZWZhdWx0cy5hbGxvd0RvdHMgOiAhIW9wdHMuYWxsb3dEb3RzLFxuICAgICAgICBhbGxvd1Byb3RvdHlwZXM6IHR5cGVvZiBvcHRzLmFsbG93UHJvdG90eXBlcyA9PT0gJ2Jvb2xlYW4nID8gb3B0cy5hbGxvd1Byb3RvdHlwZXMgOiBkZWZhdWx0cy5hbGxvd1Byb3RvdHlwZXMsXG4gICAgICAgIGFycmF5TGltaXQ6IHR5cGVvZiBvcHRzLmFycmF5TGltaXQgPT09ICdudW1iZXInID8gb3B0cy5hcnJheUxpbWl0IDogZGVmYXVsdHMuYXJyYXlMaW1pdCxcbiAgICAgICAgY2hhcnNldDogY2hhcnNldCxcbiAgICAgICAgY2hhcnNldFNlbnRpbmVsOiB0eXBlb2Ygb3B0cy5jaGFyc2V0U2VudGluZWwgPT09ICdib29sZWFuJyA/IG9wdHMuY2hhcnNldFNlbnRpbmVsIDogZGVmYXVsdHMuY2hhcnNldFNlbnRpbmVsLFxuICAgICAgICBjb21tYTogdHlwZW9mIG9wdHMuY29tbWEgPT09ICdib29sZWFuJyA/IG9wdHMuY29tbWEgOiBkZWZhdWx0cy5jb21tYSxcbiAgICAgICAgZGVjb2RlcjogdHlwZW9mIG9wdHMuZGVjb2RlciA9PT0gJ2Z1bmN0aW9uJyA/IG9wdHMuZGVjb2RlciA6IGRlZmF1bHRzLmRlY29kZXIsXG4gICAgICAgIGRlbGltaXRlcjogdHlwZW9mIG9wdHMuZGVsaW1pdGVyID09PSAnc3RyaW5nJyB8fCB1dGlscy5pc1JlZ0V4cChvcHRzLmRlbGltaXRlcikgPyBvcHRzLmRlbGltaXRlciA6IGRlZmF1bHRzLmRlbGltaXRlcixcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWltcGxpY2l0LWNvZXJjaW9uLCBuby1leHRyYS1wYXJlbnNcbiAgICAgICAgZGVwdGg6ICh0eXBlb2Ygb3B0cy5kZXB0aCA9PT0gJ251bWJlcicgfHwgb3B0cy5kZXB0aCA9PT0gZmFsc2UpID8gK29wdHMuZGVwdGggOiBkZWZhdWx0cy5kZXB0aCxcbiAgICAgICAgaWdub3JlUXVlcnlQcmVmaXg6IG9wdHMuaWdub3JlUXVlcnlQcmVmaXggPT09IHRydWUsXG4gICAgICAgIGludGVycHJldE51bWVyaWNFbnRpdGllczogdHlwZW9mIG9wdHMuaW50ZXJwcmV0TnVtZXJpY0VudGl0aWVzID09PSAnYm9vbGVhbicgPyBvcHRzLmludGVycHJldE51bWVyaWNFbnRpdGllcyA6IGRlZmF1bHRzLmludGVycHJldE51bWVyaWNFbnRpdGllcyxcbiAgICAgICAgcGFyYW1ldGVyTGltaXQ6IHR5cGVvZiBvcHRzLnBhcmFtZXRlckxpbWl0ID09PSAnbnVtYmVyJyA/IG9wdHMucGFyYW1ldGVyTGltaXQgOiBkZWZhdWx0cy5wYXJhbWV0ZXJMaW1pdCxcbiAgICAgICAgcGFyc2VBcnJheXM6IG9wdHMucGFyc2VBcnJheXMgIT09IGZhbHNlLFxuICAgICAgICBwbGFpbk9iamVjdHM6IHR5cGVvZiBvcHRzLnBsYWluT2JqZWN0cyA9PT0gJ2Jvb2xlYW4nID8gb3B0cy5wbGFpbk9iamVjdHMgOiBkZWZhdWx0cy5wbGFpbk9iamVjdHMsXG4gICAgICAgIHN0cmljdE51bGxIYW5kbGluZzogdHlwZW9mIG9wdHMuc3RyaWN0TnVsbEhhbmRsaW5nID09PSAnYm9vbGVhbicgPyBvcHRzLnN0cmljdE51bGxIYW5kbGluZyA6IGRlZmF1bHRzLnN0cmljdE51bGxIYW5kbGluZ1xuICAgIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChzdHIsIG9wdHMpIHtcbiAgICB2YXIgb3B0aW9ucyA9IG5vcm1hbGl6ZVBhcnNlT3B0aW9ucyhvcHRzKTtcblxuICAgIGlmIChzdHIgPT09ICcnIHx8IHN0ciA9PT0gbnVsbCB8fCB0eXBlb2Ygc3RyID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm4gb3B0aW9ucy5wbGFpbk9iamVjdHMgPyBPYmplY3QuY3JlYXRlKG51bGwpIDoge307XG4gICAgfVxuXG4gICAgdmFyIHRlbXBPYmogPSB0eXBlb2Ygc3RyID09PSAnc3RyaW5nJyA/IHBhcnNlVmFsdWVzKHN0ciwgb3B0aW9ucykgOiBzdHI7XG4gICAgdmFyIG9iaiA9IG9wdGlvbnMucGxhaW5PYmplY3RzID8gT2JqZWN0LmNyZWF0ZShudWxsKSA6IHt9O1xuXG4gICAgLy8gSXRlcmF0ZSBvdmVyIHRoZSBrZXlzIGFuZCBzZXR1cCB0aGUgbmV3IG9iamVjdFxuXG4gICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyh0ZW1wT2JqKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgICAgIHZhciBuZXdPYmogPSBwYXJzZUtleXMoa2V5LCB0ZW1wT2JqW2tleV0sIG9wdGlvbnMpO1xuICAgICAgICBvYmogPSB1dGlscy5tZXJnZShvYmosIG5ld09iaiwgb3B0aW9ucyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHV0aWxzLmNvbXBhY3Qob2JqKTtcbn07XG4iLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3QuYXNzaWduJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5PYmplY3QuYXNzaWduO1xuIiwiLy8gMTkuMS4zLjEgT2JqZWN0LmFzc2lnbih0YXJnZXQsIHNvdXJjZSlcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GLCAnT2JqZWN0JywgeyBhc3NpZ246IHJlcXVpcmUoJy4vX29iamVjdC1hc3NpZ24nKSB9KTtcbiIsIi8vIG9wdGlvbmFsIC8gc2ltcGxlIGNvbnRleHQgYmluZGluZ1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGZuLCB0aGF0LCBsZW5ndGgpIHtcbiAgYUZ1bmN0aW9uKGZuKTtcbiAgaWYgKHRoYXQgPT09IHVuZGVmaW5lZCkgcmV0dXJuIGZuO1xuICBzd2l0Y2ggKGxlbmd0aCkge1xuICAgIGNhc2UgMTogcmV0dXJuIGZ1bmN0aW9uIChhKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhKTtcbiAgICB9O1xuICAgIGNhc2UgMjogcmV0dXJuIGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiKTtcbiAgICB9O1xuICAgIGNhc2UgMzogcmV0dXJuIGZ1bmN0aW9uIChhLCBiLCBjKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiLCBjKTtcbiAgICB9O1xuICB9XG4gIHJldHVybiBmdW5jdGlvbiAoLyogLi4uYXJncyAqLykge1xuICAgIHJldHVybiBmbi5hcHBseSh0aGF0LCBhcmd1bWVudHMpO1xuICB9O1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmICh0eXBlb2YgaXQgIT0gJ2Z1bmN0aW9uJykgdGhyb3cgVHlwZUVycm9yKGl0ICsgJyBpcyBub3QgYSBmdW5jdGlvbiEnKTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsInZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyIGNyZWF0ZURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIHJldHVybiBkUC5mKG9iamVjdCwga2V5LCBjcmVhdGVEZXNjKDEsIHZhbHVlKSk7XG59IDogZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICBvYmplY3Rba2V5XSA9IHZhbHVlO1xuICByZXR1cm4gb2JqZWN0O1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gIXJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHJlcXVpcmUoJy4vX2RvbS1jcmVhdGUnKSgnZGl2JyksICdhJywgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH0gfSkuYSAhPSA3O1xufSk7XG4iLCIvLyA3LjEuMSBUb1ByaW1pdGl2ZShpbnB1dCBbLCBQcmVmZXJyZWRUeXBlXSlcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xuLy8gaW5zdGVhZCBvZiB0aGUgRVM2IHNwZWMgdmVyc2lvbiwgd2UgZGlkbid0IGltcGxlbWVudCBAQHRvUHJpbWl0aXZlIGNhc2Vcbi8vIGFuZCB0aGUgc2Vjb25kIGFyZ3VtZW50IC0gZmxhZyAtIHByZWZlcnJlZCB0eXBlIGlzIGEgc3RyaW5nXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgUykge1xuICBpZiAoIWlzT2JqZWN0KGl0KSkgcmV0dXJuIGl0O1xuICB2YXIgZm4sIHZhbDtcbiAgaWYgKFMgJiYgdHlwZW9mIChmbiA9IGl0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpIHJldHVybiB2YWw7XG4gIGlmICh0eXBlb2YgKGZuID0gaXQudmFsdWVPZikgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xuICBpZiAoIVMgJiYgdHlwZW9mIChmbiA9IGl0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpIHJldHVybiB2YWw7XG4gIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNvbnZlcnQgb2JqZWN0IHRvIHByaW1pdGl2ZSB2YWx1ZVwiKTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChiaXRtYXAsIHZhbHVlKSB7XG4gIHJldHVybiB7XG4gICAgZW51bWVyYWJsZTogIShiaXRtYXAgJiAxKSxcbiAgICBjb25maWd1cmFibGU6ICEoYml0bWFwICYgMiksXG4gICAgd3JpdGFibGU6ICEoYml0bWFwICYgNCksXG4gICAgdmFsdWU6IHZhbHVlXG4gIH07XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMTkuMS4yLjEgT2JqZWN0LmFzc2lnbih0YXJnZXQsIHNvdXJjZSwgLi4uKVxudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKTtcbnZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcbnZhciBnT1BTID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcHMnKTtcbnZhciBwSUUgPSByZXF1aXJlKCcuL19vYmplY3QtcGllJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciBJT2JqZWN0ID0gcmVxdWlyZSgnLi9faW9iamVjdCcpO1xudmFyICRhc3NpZ24gPSBPYmplY3QuYXNzaWduO1xuXG4vLyBzaG91bGQgd29yayB3aXRoIHN5bWJvbHMgYW5kIHNob3VsZCBoYXZlIGRldGVybWluaXN0aWMgcHJvcGVydHkgb3JkZXIgKFY4IGJ1Zylcbm1vZHVsZS5leHBvcnRzID0gISRhc3NpZ24gfHwgcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHZhciBBID0ge307XG4gIHZhciBCID0ge307XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICB2YXIgUyA9IFN5bWJvbCgpO1xuICB2YXIgSyA9ICdhYmNkZWZnaGlqa2xtbm9wcXJzdCc7XG4gIEFbU10gPSA3O1xuICBLLnNwbGl0KCcnKS5mb3JFYWNoKGZ1bmN0aW9uIChrKSB7IEJba10gPSBrOyB9KTtcbiAgcmV0dXJuICRhc3NpZ24oe30sIEEpW1NdICE9IDcgfHwgT2JqZWN0LmtleXMoJGFzc2lnbih7fSwgQikpLmpvaW4oJycpICE9IEs7XG59KSA/IGZ1bmN0aW9uIGFzc2lnbih0YXJnZXQsIHNvdXJjZSkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gIHZhciBUID0gdG9PYmplY3QodGFyZ2V0KTtcbiAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICB2YXIgaW5kZXggPSAxO1xuICB2YXIgZ2V0U3ltYm9scyA9IGdPUFMuZjtcbiAgdmFyIGlzRW51bSA9IHBJRS5mO1xuICB3aGlsZSAoYUxlbiA+IGluZGV4KSB7XG4gICAgdmFyIFMgPSBJT2JqZWN0KGFyZ3VtZW50c1tpbmRleCsrXSk7XG4gICAgdmFyIGtleXMgPSBnZXRTeW1ib2xzID8gZ2V0S2V5cyhTKS5jb25jYXQoZ2V0U3ltYm9scyhTKSkgOiBnZXRLZXlzKFMpO1xuICAgIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgICB2YXIgaiA9IDA7XG4gICAgdmFyIGtleTtcbiAgICB3aGlsZSAobGVuZ3RoID4gaikge1xuICAgICAga2V5ID0ga2V5c1tqKytdO1xuICAgICAgaWYgKCFERVNDUklQVE9SUyB8fCBpc0VudW0uY2FsbChTLCBrZXkpKSBUW2tleV0gPSBTW2tleV07XG4gICAgfVxuICB9IHJldHVybiBUO1xufSA6ICRhc3NpZ247XG4iLCJ2YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIGFycmF5SW5kZXhPZiA9IHJlcXVpcmUoJy4vX2FycmF5LWluY2x1ZGVzJykoZmFsc2UpO1xudmFyIElFX1BST1RPID0gcmVxdWlyZSgnLi9fc2hhcmVkLWtleScpKCdJRV9QUk9UTycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmplY3QsIG5hbWVzKSB7XG4gIHZhciBPID0gdG9JT2JqZWN0KG9iamVjdCk7XG4gIHZhciBpID0gMDtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB2YXIga2V5O1xuICBmb3IgKGtleSBpbiBPKSBpZiAoa2V5ICE9IElFX1BST1RPKSBoYXMoTywga2V5KSAmJiByZXN1bHQucHVzaChrZXkpO1xuICAvLyBEb24ndCBlbnVtIGJ1ZyAmIGhpZGRlbiBrZXlzXG4gIHdoaWxlIChuYW1lcy5sZW5ndGggPiBpKSBpZiAoaGFzKE8sIGtleSA9IG5hbWVzW2krK10pKSB7XG4gICAgfmFycmF5SW5kZXhPZihyZXN1bHQsIGtleSkgfHwgcmVzdWx0LnB1c2goa2V5KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsInZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChpdCkuc2xpY2UoOCwgLTEpO1xufTtcbiIsIi8vIGZhbHNlIC0+IEFycmF5I2luZGV4T2Zcbi8vIHRydWUgIC0+IEFycmF5I2luY2x1ZGVzXG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi9fdG8tYWJzb2x1dGUtaW5kZXgnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKElTX0lOQ0xVREVTKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIGVsLCBmcm9tSW5kZXgpIHtcbiAgICB2YXIgTyA9IHRvSU9iamVjdCgkdGhpcyk7XG4gICAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICB2YXIgaW5kZXggPSB0b0Fic29sdXRlSW5kZXgoZnJvbUluZGV4LCBsZW5ndGgpO1xuICAgIHZhciB2YWx1ZTtcbiAgICAvLyBBcnJheSNpbmNsdWRlcyB1c2VzIFNhbWVWYWx1ZVplcm8gZXF1YWxpdHkgYWxnb3JpdGhtXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIGlmIChJU19JTkNMVURFUyAmJiBlbCAhPSBlbCkgd2hpbGUgKGxlbmd0aCA+IGluZGV4KSB7XG4gICAgICB2YWx1ZSA9IE9baW5kZXgrK107XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgICBpZiAodmFsdWUgIT0gdmFsdWUpIHJldHVybiB0cnVlO1xuICAgIC8vIEFycmF5I2luZGV4T2YgaWdub3JlcyBob2xlcywgQXJyYXkjaW5jbHVkZXMgLSBub3RcbiAgICB9IGVsc2UgZm9yICg7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIGlmIChJU19JTkNMVURFUyB8fCBpbmRleCBpbiBPKSB7XG4gICAgICBpZiAoT1tpbmRleF0gPT09IGVsKSByZXR1cm4gSVNfSU5DTFVERVMgfHwgaW5kZXggfHwgMDtcbiAgICB9IHJldHVybiAhSVNfSU5DTFVERVMgJiYgLTE7XG4gIH07XG59O1xuIiwiLy8gNy4xLjE1IFRvTGVuZ3RoXG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIG1pbiA9IE1hdGgubWluO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ID4gMCA/IG1pbih0b0ludGVnZXIoaXQpLCAweDFmZmZmZmZmZmZmZmZmKSA6IDA7IC8vIHBvdygyLCA1MykgLSAxID09IDkwMDcxOTkyNTQ3NDA5OTFcbn07XG4iLCJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIG1heCA9IE1hdGgubWF4O1xudmFyIG1pbiA9IE1hdGgubWluO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaW5kZXgsIGxlbmd0aCkge1xuICBpbmRleCA9IHRvSW50ZWdlcihpbmRleCk7XG4gIHJldHVybiBpbmRleCA8IDAgPyBtYXgoaW5kZXggKyBsZW5ndGgsIDApIDogbWluKGluZGV4LCBsZW5ndGgpO1xufTtcbiIsInZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIFNIQVJFRCA9ICdfX2NvcmUtanNfc2hhcmVkX18nO1xudmFyIHN0b3JlID0gZ2xvYmFsW1NIQVJFRF0gfHwgKGdsb2JhbFtTSEFSRURdID0ge30pO1xuXG4obW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICByZXR1cm4gc3RvcmVba2V5XSB8fCAoc3RvcmVba2V5XSA9IHZhbHVlICE9PSB1bmRlZmluZWQgPyB2YWx1ZSA6IHt9KTtcbn0pKCd2ZXJzaW9ucycsIFtdKS5wdXNoKHtcbiAgdmVyc2lvbjogY29yZS52ZXJzaW9uLFxuICBtb2RlOiByZXF1aXJlKCcuL19saWJyYXJ5JykgPyAncHVyZScgOiAnZ2xvYmFsJyxcbiAgY29weXJpZ2h0OiAnwqkgMjAxOSBEZW5pcyBQdXNoa2FyZXYgKHpsb2lyb2NrLnJ1KSdcbn0pO1xuIiwibW9kdWxlLmV4cG9ydHMgPSB0cnVlO1xuIiwidmFyIGlkID0gMDtcbnZhciBweCA9IE1hdGgucmFuZG9tKCk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuICdTeW1ib2woJy5jb25jYXQoa2V5ID09PSB1bmRlZmluZWQgPyAnJyA6IGtleSwgJylfJywgKCsraWQgKyBweCkudG9TdHJpbmcoMzYpKTtcbn07XG4iLCJleHBvcnRzLmYgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuIiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LmNyZWF0ZScpO1xudmFyICRPYmplY3QgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuT2JqZWN0O1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjcmVhdGUoUCwgRCkge1xuICByZXR1cm4gJE9iamVjdC5jcmVhdGUoUCwgRCk7XG59O1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbi8vIDE5LjEuMi4yIC8gMTUuMi4zLjUgT2JqZWN0LmNyZWF0ZShPIFssIFByb3BlcnRpZXNdKVxuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7IGNyZWF0ZTogcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpIH0pO1xuIiwiLy8gMTkuMS4yLjIgLyAxNS4yLjMuNSBPYmplY3QuY3JlYXRlKE8gWywgUHJvcGVydGllc10pXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBkUHMgPSByZXF1aXJlKCcuL19vYmplY3QtZHBzJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuL19lbnVtLWJ1Zy1rZXlzJyk7XG52YXIgSUVfUFJPVE8gPSByZXF1aXJlKCcuL19zaGFyZWQta2V5JykoJ0lFX1BST1RPJyk7XG52YXIgRW1wdHkgPSBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH07XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG5cbi8vIENyZWF0ZSBvYmplY3Qgd2l0aCBmYWtlIGBudWxsYCBwcm90b3R5cGU6IHVzZSBpZnJhbWUgT2JqZWN0IHdpdGggY2xlYXJlZCBwcm90b3R5cGVcbnZhciBjcmVhdGVEaWN0ID0gZnVuY3Rpb24gKCkge1xuICAvLyBUaHJhc2gsIHdhc3RlIGFuZCBzb2RvbXk6IElFIEdDIGJ1Z1xuICB2YXIgaWZyYW1lID0gcmVxdWlyZSgnLi9fZG9tLWNyZWF0ZScpKCdpZnJhbWUnKTtcbiAgdmFyIGkgPSBlbnVtQnVnS2V5cy5sZW5ndGg7XG4gIHZhciBsdCA9ICc8JztcbiAgdmFyIGd0ID0gJz4nO1xuICB2YXIgaWZyYW1lRG9jdW1lbnQ7XG4gIGlmcmFtZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICByZXF1aXJlKCcuL19odG1sJykuYXBwZW5kQ2hpbGQoaWZyYW1lKTtcbiAgaWZyYW1lLnNyYyA9ICdqYXZhc2NyaXB0Oic7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tc2NyaXB0LXVybFxuICAvLyBjcmVhdGVEaWN0ID0gaWZyYW1lLmNvbnRlbnRXaW5kb3cuT2JqZWN0O1xuICAvLyBodG1sLnJlbW92ZUNoaWxkKGlmcmFtZSk7XG4gIGlmcmFtZURvY3VtZW50ID0gaWZyYW1lLmNvbnRlbnRXaW5kb3cuZG9jdW1lbnQ7XG4gIGlmcmFtZURvY3VtZW50Lm9wZW4oKTtcbiAgaWZyYW1lRG9jdW1lbnQud3JpdGUobHQgKyAnc2NyaXB0JyArIGd0ICsgJ2RvY3VtZW50LkY9T2JqZWN0JyArIGx0ICsgJy9zY3JpcHQnICsgZ3QpO1xuICBpZnJhbWVEb2N1bWVudC5jbG9zZSgpO1xuICBjcmVhdGVEaWN0ID0gaWZyYW1lRG9jdW1lbnQuRjtcbiAgd2hpbGUgKGktLSkgZGVsZXRlIGNyZWF0ZURpY3RbUFJPVE9UWVBFXVtlbnVtQnVnS2V5c1tpXV07XG4gIHJldHVybiBjcmVhdGVEaWN0KCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5jcmVhdGUgfHwgZnVuY3Rpb24gY3JlYXRlKE8sIFByb3BlcnRpZXMpIHtcbiAgdmFyIHJlc3VsdDtcbiAgaWYgKE8gIT09IG51bGwpIHtcbiAgICBFbXB0eVtQUk9UT1RZUEVdID0gYW5PYmplY3QoTyk7XG4gICAgcmVzdWx0ID0gbmV3IEVtcHR5KCk7XG4gICAgRW1wdHlbUFJPVE9UWVBFXSA9IG51bGw7XG4gICAgLy8gYWRkIFwiX19wcm90b19fXCIgZm9yIE9iamVjdC5nZXRQcm90b3R5cGVPZiBwb2x5ZmlsbFxuICAgIHJlc3VsdFtJRV9QUk9UT10gPSBPO1xuICB9IGVsc2UgcmVzdWx0ID0gY3JlYXRlRGljdCgpO1xuICByZXR1cm4gUHJvcGVydGllcyA9PT0gdW5kZWZpbmVkID8gcmVzdWx0IDogZFBzKHJlc3VsdCwgUHJvcGVydGllcyk7XG59O1xuIiwidmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gT2JqZWN0LmRlZmluZVByb3BlcnRpZXMgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIHZhciBrZXlzID0gZ2V0S2V5cyhQcm9wZXJ0aWVzKTtcbiAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICB2YXIgaSA9IDA7XG4gIHZhciBQO1xuICB3aGlsZSAobGVuZ3RoID4gaSkgZFAuZihPLCBQID0ga2V5c1tpKytdLCBQcm9wZXJ0aWVzW1BdKTtcbiAgcmV0dXJuIE87XG59O1xuIiwidmFyIGRvY3VtZW50ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuZG9jdW1lbnQ7XG5tb2R1bGUuZXhwb3J0cyA9IGRvY3VtZW50ICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSByZXF1aXJlKCcuL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldCcpO1xuXG5mdW5jdGlvbiBlbXB0eUZ1bmN0aW9uKCkge31cbmZ1bmN0aW9uIGVtcHR5RnVuY3Rpb25XaXRoUmVzZXQoKSB7fVxuZW1wdHlGdW5jdGlvbldpdGhSZXNldC5yZXNldFdhcm5pbmdDYWNoZSA9IGVtcHR5RnVuY3Rpb247XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG4gIGZ1bmN0aW9uIHNoaW0ocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lLCBzZWNyZXQpIHtcbiAgICBpZiAoc2VjcmV0ID09PSBSZWFjdFByb3BUeXBlc1NlY3JldCkge1xuICAgICAgLy8gSXQgaXMgc3RpbGwgc2FmZSB3aGVuIGNhbGxlZCBmcm9tIFJlYWN0LlxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgZXJyID0gbmV3IEVycm9yKFxuICAgICAgJ0NhbGxpbmcgUHJvcFR5cGVzIHZhbGlkYXRvcnMgZGlyZWN0bHkgaXMgbm90IHN1cHBvcnRlZCBieSB0aGUgYHByb3AtdHlwZXNgIHBhY2thZ2UuICcgK1xuICAgICAgJ1VzZSBQcm9wVHlwZXMuY2hlY2tQcm9wVHlwZXMoKSB0byBjYWxsIHRoZW0uICcgK1xuICAgICAgJ1JlYWQgbW9yZSBhdCBodHRwOi8vZmIubWUvdXNlLWNoZWNrLXByb3AtdHlwZXMnXG4gICAgKTtcbiAgICBlcnIubmFtZSA9ICdJbnZhcmlhbnQgVmlvbGF0aW9uJztcbiAgICB0aHJvdyBlcnI7XG4gIH07XG4gIHNoaW0uaXNSZXF1aXJlZCA9IHNoaW07XG4gIGZ1bmN0aW9uIGdldFNoaW0oKSB7XG4gICAgcmV0dXJuIHNoaW07XG4gIH07XG4gIC8vIEltcG9ydGFudCFcbiAgLy8gS2VlcCB0aGlzIGxpc3QgaW4gc3luYyB3aXRoIHByb2R1Y3Rpb24gdmVyc2lvbiBpbiBgLi9mYWN0b3J5V2l0aFR5cGVDaGVja2Vycy5qc2AuXG4gIHZhciBSZWFjdFByb3BUeXBlcyA9IHtcbiAgICBhcnJheTogc2hpbSxcbiAgICBib29sOiBzaGltLFxuICAgIGZ1bmM6IHNoaW0sXG4gICAgbnVtYmVyOiBzaGltLFxuICAgIG9iamVjdDogc2hpbSxcbiAgICBzdHJpbmc6IHNoaW0sXG4gICAgc3ltYm9sOiBzaGltLFxuXG4gICAgYW55OiBzaGltLFxuICAgIGFycmF5T2Y6IGdldFNoaW0sXG4gICAgZWxlbWVudDogc2hpbSxcbiAgICBlbGVtZW50VHlwZTogc2hpbSxcbiAgICBpbnN0YW5jZU9mOiBnZXRTaGltLFxuICAgIG5vZGU6IHNoaW0sXG4gICAgb2JqZWN0T2Y6IGdldFNoaW0sXG4gICAgb25lT2Y6IGdldFNoaW0sXG4gICAgb25lT2ZUeXBlOiBnZXRTaGltLFxuICAgIHNoYXBlOiBnZXRTaGltLFxuICAgIGV4YWN0OiBnZXRTaGltLFxuXG4gICAgY2hlY2tQcm9wVHlwZXM6IGVtcHR5RnVuY3Rpb25XaXRoUmVzZXQsXG4gICAgcmVzZXRXYXJuaW5nQ2FjaGU6IGVtcHR5RnVuY3Rpb25cbiAgfTtcblxuICBSZWFjdFByb3BUeXBlcy5Qcm9wVHlwZXMgPSBSZWFjdFByb3BUeXBlcztcblxuICByZXR1cm4gUmVhY3RQcm9wVHlwZXM7XG59O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9ICdTRUNSRVRfRE9fTk9UX1BBU1NfVEhJU19PUl9ZT1VfV0lMTF9CRV9GSVJFRCc7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RQcm9wVHlwZXNTZWNyZXQ7XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTYuOC42XG4gKiByZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cyxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTtcbnZhciBiPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3IsYz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpOjYwMTAzLGQ9Yj9TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpOjYwMTA2LGU9Yj9TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIik6NjAxMDcsZj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTo2MDEwOCxnPWI/U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpOjYwMTE0LGg9Yj9TeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIik6NjAxMDksaz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpOjYwMTEwLGw9Yj9TeW1ib2wuZm9yKFwicmVhY3QuYXN5bmNfbW9kZVwiKTo2MDExMSxtPWI/U3ltYm9sLmZvcihcInJlYWN0LmNvbmN1cnJlbnRfbW9kZVwiKTo2MDExMSxuPWI/U3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpOjYwMTEyLHA9Yj9TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIik6NjAxMTMscT1iP1N5bWJvbC5mb3IoXCJyZWFjdC5tZW1vXCIpOlxuNjAxMTUscj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpOjYwMTE2O2Z1bmN0aW9uIHQoYSl7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSl7dmFyIHU9YS4kJHR5cGVvZjtzd2l0Y2godSl7Y2FzZSBjOnN3aXRjaChhPWEudHlwZSxhKXtjYXNlIGw6Y2FzZSBtOmNhc2UgZTpjYXNlIGc6Y2FzZSBmOmNhc2UgcDpyZXR1cm4gYTtkZWZhdWx0OnN3aXRjaChhPWEmJmEuJCR0eXBlb2YsYSl7Y2FzZSBrOmNhc2UgbjpjYXNlIGg6cmV0dXJuIGE7ZGVmYXVsdDpyZXR1cm4gdX19Y2FzZSByOmNhc2UgcTpjYXNlIGQ6cmV0dXJuIHV9fX1mdW5jdGlvbiB2KGEpe3JldHVybiB0KGEpPT09bX1leHBvcnRzLnR5cGVPZj10O2V4cG9ydHMuQXN5bmNNb2RlPWw7ZXhwb3J0cy5Db25jdXJyZW50TW9kZT1tO2V4cG9ydHMuQ29udGV4dENvbnN1bWVyPWs7ZXhwb3J0cy5Db250ZXh0UHJvdmlkZXI9aDtleHBvcnRzLkVsZW1lbnQ9YztleHBvcnRzLkZvcndhcmRSZWY9bjtcbmV4cG9ydHMuRnJhZ21lbnQ9ZTtleHBvcnRzLkxhenk9cjtleHBvcnRzLk1lbW89cTtleHBvcnRzLlBvcnRhbD1kO2V4cG9ydHMuUHJvZmlsZXI9ZztleHBvcnRzLlN0cmljdE1vZGU9ZjtleHBvcnRzLlN1c3BlbnNlPXA7ZXhwb3J0cy5pc1ZhbGlkRWxlbWVudFR5cGU9ZnVuY3Rpb24oYSl7cmV0dXJuXCJzdHJpbmdcIj09PXR5cGVvZiBhfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgYXx8YT09PWV8fGE9PT1tfHxhPT09Z3x8YT09PWZ8fGE9PT1wfHxcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiYoYS4kJHR5cGVvZj09PXJ8fGEuJCR0eXBlb2Y9PT1xfHxhLiQkdHlwZW9mPT09aHx8YS4kJHR5cGVvZj09PWt8fGEuJCR0eXBlb2Y9PT1uKX07ZXhwb3J0cy5pc0FzeW5jTW9kZT1mdW5jdGlvbihhKXtyZXR1cm4gdihhKXx8dChhKT09PWx9O2V4cG9ydHMuaXNDb25jdXJyZW50TW9kZT12O2V4cG9ydHMuaXNDb250ZXh0Q29uc3VtZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHQoYSk9PT1rfTtcbmV4cG9ydHMuaXNDb250ZXh0UHJvdmlkZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHQoYSk9PT1ofTtleHBvcnRzLmlzRWxlbWVudD1mdW5jdGlvbihhKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZhLiQkdHlwZW9mPT09Y307ZXhwb3J0cy5pc0ZvcndhcmRSZWY9ZnVuY3Rpb24oYSl7cmV0dXJuIHQoYSk9PT1ufTtleHBvcnRzLmlzRnJhZ21lbnQ9ZnVuY3Rpb24oYSl7cmV0dXJuIHQoYSk9PT1lfTtleHBvcnRzLmlzTGF6eT1mdW5jdGlvbihhKXtyZXR1cm4gdChhKT09PXJ9O2V4cG9ydHMuaXNNZW1vPWZ1bmN0aW9uKGEpe3JldHVybiB0KGEpPT09cX07ZXhwb3J0cy5pc1BvcnRhbD1mdW5jdGlvbihhKXtyZXR1cm4gdChhKT09PWR9O2V4cG9ydHMuaXNQcm9maWxlcj1mdW5jdGlvbihhKXtyZXR1cm4gdChhKT09PWd9O2V4cG9ydHMuaXNTdHJpY3RNb2RlPWZ1bmN0aW9uKGEpe3JldHVybiB0KGEpPT09Zn07XG5leHBvcnRzLmlzU3VzcGVuc2U9ZnVuY3Rpb24oYSl7cmV0dXJuIHQoYSk9PT1wfTtcbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTYuOS4wXG4gKiByZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cyxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTtcbnZhciBiPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3IsYz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpOjYwMTAzLGQ9Yj9TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpOjYwMTA2LGU9Yj9TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIik6NjAxMDcsZj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTo2MDEwOCxnPWI/U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpOjYwMTE0LGg9Yj9TeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIik6NjAxMDksaz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpOjYwMTEwLGw9Yj9TeW1ib2wuZm9yKFwicmVhY3QuYXN5bmNfbW9kZVwiKTo2MDExMSxtPWI/U3ltYm9sLmZvcihcInJlYWN0LmNvbmN1cnJlbnRfbW9kZVwiKTo2MDExMSxuPWI/U3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpOjYwMTEyLHA9Yj9TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIik6NjAxMTMscT1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZV9saXN0XCIpOlxuNjAxMjAscj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5tZW1vXCIpOjYwMTE1LHQ9Yj9TeW1ib2wuZm9yKFwicmVhY3QubGF6eVwiKTo2MDExNix2PWI/U3ltYm9sLmZvcihcInJlYWN0LmZ1bmRhbWVudGFsXCIpOjYwMTE3LHc9Yj9TeW1ib2wuZm9yKFwicmVhY3QucmVzcG9uZGVyXCIpOjYwMTE4O2Z1bmN0aW9uIHgoYSl7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSl7dmFyIHU9YS4kJHR5cGVvZjtzd2l0Y2godSl7Y2FzZSBjOnN3aXRjaChhPWEudHlwZSxhKXtjYXNlIGw6Y2FzZSBtOmNhc2UgZTpjYXNlIGc6Y2FzZSBmOmNhc2UgcDpyZXR1cm4gYTtkZWZhdWx0OnN3aXRjaChhPWEmJmEuJCR0eXBlb2YsYSl7Y2FzZSBrOmNhc2UgbjpjYXNlIGg6cmV0dXJuIGE7ZGVmYXVsdDpyZXR1cm4gdX19Y2FzZSB0OmNhc2UgcjpjYXNlIGQ6cmV0dXJuIHV9fX1mdW5jdGlvbiB5KGEpe3JldHVybiB4KGEpPT09bX1leHBvcnRzLnR5cGVPZj14O2V4cG9ydHMuQXN5bmNNb2RlPWw7XG5leHBvcnRzLkNvbmN1cnJlbnRNb2RlPW07ZXhwb3J0cy5Db250ZXh0Q29uc3VtZXI9aztleHBvcnRzLkNvbnRleHRQcm92aWRlcj1oO2V4cG9ydHMuRWxlbWVudD1jO2V4cG9ydHMuRm9yd2FyZFJlZj1uO2V4cG9ydHMuRnJhZ21lbnQ9ZTtleHBvcnRzLkxhenk9dDtleHBvcnRzLk1lbW89cjtleHBvcnRzLlBvcnRhbD1kO2V4cG9ydHMuUHJvZmlsZXI9ZztleHBvcnRzLlN0cmljdE1vZGU9ZjtleHBvcnRzLlN1c3BlbnNlPXA7XG5leHBvcnRzLmlzVmFsaWRFbGVtZW50VHlwZT1mdW5jdGlvbihhKXtyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGF8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhfHxhPT09ZXx8YT09PW18fGE9PT1nfHxhPT09Znx8YT09PXB8fGE9PT1xfHxcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiYoYS4kJHR5cGVvZj09PXR8fGEuJCR0eXBlb2Y9PT1yfHxhLiQkdHlwZW9mPT09aHx8YS4kJHR5cGVvZj09PWt8fGEuJCR0eXBlb2Y9PT1ufHxhLiQkdHlwZW9mPT09dnx8YS4kJHR5cGVvZj09PXcpfTtleHBvcnRzLmlzQXN5bmNNb2RlPWZ1bmN0aW9uKGEpe3JldHVybiB5KGEpfHx4KGEpPT09bH07ZXhwb3J0cy5pc0NvbmN1cnJlbnRNb2RlPXk7ZXhwb3J0cy5pc0NvbnRleHRDb25zdW1lcj1mdW5jdGlvbihhKXtyZXR1cm4geChhKT09PWt9O2V4cG9ydHMuaXNDb250ZXh0UHJvdmlkZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHgoYSk9PT1ofTtcbmV4cG9ydHMuaXNFbGVtZW50PWZ1bmN0aW9uKGEpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJmEuJCR0eXBlb2Y9PT1jfTtleHBvcnRzLmlzRm9yd2FyZFJlZj1mdW5jdGlvbihhKXtyZXR1cm4geChhKT09PW59O2V4cG9ydHMuaXNGcmFnbWVudD1mdW5jdGlvbihhKXtyZXR1cm4geChhKT09PWV9O2V4cG9ydHMuaXNMYXp5PWZ1bmN0aW9uKGEpe3JldHVybiB4KGEpPT09dH07ZXhwb3J0cy5pc01lbW89ZnVuY3Rpb24oYSl7cmV0dXJuIHgoYSk9PT1yfTtleHBvcnRzLmlzUG9ydGFsPWZ1bmN0aW9uKGEpe3JldHVybiB4KGEpPT09ZH07ZXhwb3J0cy5pc1Byb2ZpbGVyPWZ1bmN0aW9uKGEpe3JldHVybiB4KGEpPT09Z307ZXhwb3J0cy5pc1N0cmljdE1vZGU9ZnVuY3Rpb24oYSl7cmV0dXJuIHgoYSk9PT1mfTtleHBvcnRzLmlzU3VzcGVuc2U9ZnVuY3Rpb24oYSl7cmV0dXJuIHgoYSk9PT1wfTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ob3JpZ2luYWxNb2R1bGUpIHtcblx0aWYgKCFvcmlnaW5hbE1vZHVsZS53ZWJwYWNrUG9seWZpbGwpIHtcblx0XHR2YXIgbW9kdWxlID0gT2JqZWN0LmNyZWF0ZShvcmlnaW5hbE1vZHVsZSk7XG5cdFx0Ly8gbW9kdWxlLnBhcmVudCA9IHVuZGVmaW5lZCBieSBkZWZhdWx0XG5cdFx0aWYgKCFtb2R1bGUuY2hpbGRyZW4pIG1vZHVsZS5jaGlsZHJlbiA9IFtdO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwibG9hZGVkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmw7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJpZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5pO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwiZXhwb3J0c1wiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlXG5cdFx0fSk7XG5cdFx0bW9kdWxlLndlYnBhY2tQb2x5ZmlsbCA9IDE7XG5cdH1cblx0cmV0dXJuIG1vZHVsZTtcbn07XG4iLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNy5vYmplY3QudmFsdWVzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5PYmplY3QudmFsdWVzO1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtb2JqZWN0LXZhbHVlcy1lbnRyaWVzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICR2YWx1ZXMgPSByZXF1aXJlKCcuL19vYmplY3QtdG8tYXJyYXknKShmYWxzZSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0Jywge1xuICB2YWx1ZXM6IGZ1bmN0aW9uIHZhbHVlcyhpdCkge1xuICAgIHJldHVybiAkdmFsdWVzKGl0KTtcbiAgfVxufSk7XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpO1xudmFyIGdldEtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciBpc0VudW0gPSByZXF1aXJlKCcuL19vYmplY3QtcGllJykuZjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGlzRW50cmllcykge1xuICByZXR1cm4gZnVuY3Rpb24gKGl0KSB7XG4gICAgdmFyIE8gPSB0b0lPYmplY3QoaXQpO1xuICAgIHZhciBrZXlzID0gZ2V0S2V5cyhPKTtcbiAgICB2YXIgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICB2YXIga2V5O1xuICAgIHdoaWxlIChsZW5ndGggPiBpKSB7XG4gICAgICBrZXkgPSBrZXlzW2krK107XG4gICAgICBpZiAoIURFU0NSSVBUT1JTIHx8IGlzRW51bS5jYWxsKE8sIGtleSkpIHtcbiAgICAgICAgcmVzdWx0LnB1c2goaXNFbnRyaWVzID8gW2tleSwgT1trZXldXSA6IE9ba2V5XSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG59O1xuIiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LmtleXMnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLk9iamVjdC5rZXlzO1xuIiwiLy8gMTkuMS4yLjE0IE9iamVjdC5rZXlzKE8pXG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciAka2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgna2V5cycsIGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGtleXMoaXQpIHtcbiAgICByZXR1cm4gJGtleXModG9PYmplY3QoaXQpKTtcbiAgfTtcbn0pO1xuIiwiLy8gbW9zdCBPYmplY3QgbWV0aG9kcyBieSBFUzYgc2hvdWxkIGFjY2VwdCBwcmltaXRpdmVzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZLCBleGVjKSB7XG4gIHZhciBmbiA9IChjb3JlLk9iamVjdCB8fCB7fSlbS0VZXSB8fCBPYmplY3RbS0VZXTtcbiAgdmFyIGV4cCA9IHt9O1xuICBleHBbS0VZXSA9IGV4ZWMoZm4pO1xuICAkZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIGZhaWxzKGZ1bmN0aW9uICgpIHsgZm4oMSk7IH0pLCAnT2JqZWN0JywgZXhwKTtcbn07XG4iLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNi5kYXRlLm5vdycpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuRGF0ZS5ub3c7XG4iLCIvLyAyMC4zLjMuMSAvIDE1LjkuNC40IERhdGUubm93KClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnRGF0ZScsIHsgbm93OiBmdW5jdGlvbiAoKSB7IHJldHVybiBuZXcgRGF0ZSgpLmdldFRpbWUoKTsgfSB9KTtcbiIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM2Lm51bWJlci5pcy1pbnRlZ2VyJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5OdW1iZXIuaXNJbnRlZ2VyO1xuIiwiLy8gMjAuMS4yLjMgTnVtYmVyLmlzSW50ZWdlcihudW1iZXIpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHsgaXNJbnRlZ2VyOiByZXF1aXJlKCcuL19pcy1pbnRlZ2VyJykgfSk7XG4iLCIvLyAyMC4xLjIuMyBOdW1iZXIuaXNJbnRlZ2VyKG51bWJlcilcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNJbnRlZ2VyKGl0KSB7XG4gIHJldHVybiAhaXNPYmplY3QoaXQpICYmIGlzRmluaXRlKGl0KSAmJiBmbG9vcihpdCkgPT09IGl0O1xufTtcbiIsInZhciBQUkVDRURFTkNFLCBPUEVORVJTLCBURVJNSU5BVE9SUywgUEFUVEVSTjtcblxuLyoqXG4gKiBPcGVyYXRvciBwcmVjZWRlbmNlIG1hcHBpbmcuXG4gKlxuICogQHR5cGUge09iamVjdH1cbiAqL1xuUFJFQ0VERU5DRSA9IHtcblx0JygnOiA5LFxuXHQnISc6IDgsXG5cdCcqJzogNyxcblx0Jy8nOiA3LFxuXHQnJSc6IDcsXG5cdCcrJzogNixcblx0Jy0nOiA2LFxuXHQnPCc6IDUsXG5cdCc8PSc6IDUsXG5cdCc+JzogNSxcblx0Jz49JzogNSxcblx0Jz09JzogNCxcblx0JyE9JzogNCxcblx0JyYmJzogMyxcblx0J3x8JzogMixcblx0Jz8nOiAxLFxuXHQnPzonOiAxLFxufTtcblxuLyoqXG4gKiBDaGFyYWN0ZXJzIHdoaWNoIHNpZ25hbCBwYWlyIG9wZW5pbmcsIHRvIGJlIHRlcm1pbmF0ZWQgYnkgdGVybWluYXRvcnMuXG4gKlxuICogQHR5cGUge3N0cmluZ1tdfVxuICovXG5PUEVORVJTID0gWyAnKCcsICc/JyBdO1xuXG4vKipcbiAqIENoYXJhY3RlcnMgd2hpY2ggc2lnbmFsIHBhaXIgdGVybWluYXRpb24sIHRoZSB2YWx1ZSBhbiBhcnJheSB3aXRoIHRoZVxuICogb3BlbmVyIGFzIGl0cyBmaXJzdCBtZW1iZXIuIFRoZSBzZWNvbmQgbWVtYmVyIGlzIGFuIG9wdGlvbmFsIG9wZXJhdG9yXG4gKiByZXBsYWNlbWVudCB0byBwdXNoIHRvIHRoZSBzdGFjay5cbiAqXG4gKiBAdHlwZSB7c3RyaW5nW119XG4gKi9cblRFUk1JTkFUT1JTID0ge1xuXHQnKSc6IFsgJygnIF0sXG5cdCc6JzogWyAnPycsICc/OicgXSxcbn07XG5cbi8qKlxuICogUGF0dGVybiBtYXRjaGluZyBvcGVyYXRvcnMgYW5kIG9wZW5lcnMuXG4gKlxuICogQHR5cGUge1JlZ0V4cH1cbiAqL1xuUEFUVEVSTiA9IC88PXw+PXw9PXwhPXwmJnxcXHxcXHx8XFw/OnxcXCh8IXxcXCp8XFwvfCV8XFwrfC18PHw+fFxcP3xcXCl8Oi87XG5cbi8qKlxuICogR2l2ZW4gYSBDIGV4cHJlc3Npb24sIHJldHVybnMgdGhlIGVxdWl2YWxlbnQgcG9zdGZpeCAoUmV2ZXJzZSBQb2xpc2gpXG4gKiBub3RhdGlvbiB0ZXJtcyBhcyBhbiBhcnJheS5cbiAqXG4gKiBJZiBhIHBvc3RmaXggc3RyaW5nIGlzIGRlc2lyZWQsIHNpbXBseSBgLmpvaW4oICcgJyApYCB0aGUgcmVzdWx0LlxuICpcbiAqIEBleGFtcGxlXG4gKlxuICogYGBganNcbiAqIGltcG9ydCBwb3N0Zml4IGZyb20gJ0B0YW5uaW4vcG9zdGZpeCc7XG4gKlxuICogcG9zdGZpeCggJ24gPiAxJyApO1xuICogLy8g4oeSIFsgJ24nLCAnMScsICc+JyBdXG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gZXhwcmVzc2lvbiBDIGV4cHJlc3Npb24uXG4gKlxuICogQHJldHVybiB7c3RyaW5nW119IFBvc3RmaXggdGVybXMuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHBvc3RmaXgoIGV4cHJlc3Npb24gKSB7XG5cdHZhciB0ZXJtcyA9IFtdLFxuXHRcdHN0YWNrID0gW10sXG5cdFx0bWF0Y2gsIG9wZXJhdG9yLCB0ZXJtLCBlbGVtZW50O1xuXG5cdHdoaWxlICggKCBtYXRjaCA9IGV4cHJlc3Npb24ubWF0Y2goIFBBVFRFUk4gKSApICkge1xuXHRcdG9wZXJhdG9yID0gbWF0Y2hbIDAgXTtcblxuXHRcdC8vIFRlcm0gaXMgdGhlIHN0cmluZyBwcmVjZWRpbmcgdGhlIG9wZXJhdG9yIG1hdGNoLiBJdCBtYXkgY29udGFpblxuXHRcdC8vIHdoaXRlc3BhY2UsIGFuZCBtYXkgYmUgZW1wdHkgKGlmIG9wZXJhdG9yIGlzIGF0IGJlZ2lubmluZykuXG5cdFx0dGVybSA9IGV4cHJlc3Npb24uc3Vic3RyKCAwLCBtYXRjaC5pbmRleCApLnRyaW0oKTtcblx0XHRpZiAoIHRlcm0gKSB7XG5cdFx0XHR0ZXJtcy5wdXNoKCB0ZXJtICk7XG5cdFx0fVxuXG5cdFx0d2hpbGUgKCAoIGVsZW1lbnQgPSBzdGFjay5wb3AoKSApICkge1xuXHRcdFx0aWYgKCBURVJNSU5BVE9SU1sgb3BlcmF0b3IgXSApIHtcblx0XHRcdFx0aWYgKCBURVJNSU5BVE9SU1sgb3BlcmF0b3IgXVsgMCBdID09PSBlbGVtZW50ICkge1xuXHRcdFx0XHRcdC8vIFN1YnN0aXR1dGlvbiB3b3JrcyBoZXJlIHVuZGVyIGFzc3VtcHRpb24gdGhhdCBiZWNhdXNlXG5cdFx0XHRcdFx0Ly8gdGhlIGFzc2lnbmVkIG9wZXJhdG9yIHdpbGwgbm8gbG9uZ2VyIGJlIGEgdGVybWluYXRvciwgaXRcblx0XHRcdFx0XHQvLyB3aWxsIGJlIHB1c2hlZCB0byB0aGUgc3RhY2sgZHVyaW5nIHRoZSBjb25kaXRpb24gYmVsb3cuXG5cdFx0XHRcdFx0b3BlcmF0b3IgPSBURVJNSU5BVE9SU1sgb3BlcmF0b3IgXVsgMSBdIHx8IG9wZXJhdG9yO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2UgaWYgKCBPUEVORVJTLmluZGV4T2YoIGVsZW1lbnQgKSA+PSAwIHx8IFBSRUNFREVOQ0VbIGVsZW1lbnQgXSA8IFBSRUNFREVOQ0VbIG9wZXJhdG9yIF0gKSB7XG5cdFx0XHRcdC8vIFB1c2ggdG8gc3RhY2sgaWYgZWl0aGVyIGFuIG9wZW5lciBvciB3aGVuIHBvcCByZXZlYWxzIGFuXG5cdFx0XHRcdC8vIGVsZW1lbnQgb2YgbG93ZXIgcHJlY2VkZW5jZS5cblx0XHRcdFx0c3RhY2sucHVzaCggZWxlbWVudCApO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblxuXHRcdFx0Ly8gRm9yIGVhY2ggcG9wcGVkIGZyb20gc3RhY2ssIHB1c2ggdG8gdGVybXMuXG5cdFx0XHR0ZXJtcy5wdXNoKCBlbGVtZW50ICk7XG5cdFx0fVxuXG5cdFx0aWYgKCAhIFRFUk1JTkFUT1JTWyBvcGVyYXRvciBdICkge1xuXHRcdFx0c3RhY2sucHVzaCggb3BlcmF0b3IgKTtcblx0XHR9XG5cblx0XHQvLyBTbGljZSBtYXRjaGVkIGZyYWdtZW50IGZyb20gZXhwcmVzc2lvbiB0byBjb250aW51ZSBtYXRjaC5cblx0XHRleHByZXNzaW9uID0gZXhwcmVzc2lvbi5zdWJzdHIoIG1hdGNoLmluZGV4ICsgb3BlcmF0b3IubGVuZ3RoICk7XG5cdH1cblxuXHQvLyBQdXNoIHJlbWFpbmRlciBvZiBvcGVyYW5kLCBpZiBleGlzdHMsIHRvIHRlcm1zLlxuXHRleHByZXNzaW9uID0gZXhwcmVzc2lvbi50cmltKCk7XG5cdGlmICggZXhwcmVzc2lvbiApIHtcblx0XHR0ZXJtcy5wdXNoKCBleHByZXNzaW9uICk7XG5cdH1cblxuXHQvLyBQb3AgcmVtYWluaW5nIGl0ZW1zIGZyb20gc3RhY2sgaW50byB0ZXJtcy5cblx0cmV0dXJuIHRlcm1zLmNvbmNhdCggc3RhY2sucmV2ZXJzZSgpICk7XG59XG4iLCIvKipcbiAqIE9wZXJhdG9yIGNhbGxiYWNrIGZ1bmN0aW9ucy5cbiAqXG4gKiBAdHlwZSB7T2JqZWN0fVxuICovXG52YXIgT1BFUkFUT1JTID0ge1xuXHQnISc6IGZ1bmN0aW9uKCBhICkge1xuXHRcdHJldHVybiAhIGE7XG5cdH0sXG5cdCcqJzogZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0cmV0dXJuIGEgKiBiO1xuXHR9LFxuXHQnLyc6IGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdHJldHVybiBhIC8gYjtcblx0fSxcblx0JyUnOiBmdW5jdGlvbiggYSwgYiApIHtcblx0XHRyZXR1cm4gYSAlIGI7XG5cdH0sXG5cdCcrJzogZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0cmV0dXJuIGEgKyBiO1xuXHR9LFxuXHQnLSc6IGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdHJldHVybiBhIC0gYjtcblx0fSxcblx0JzwnOiBmdW5jdGlvbiggYSwgYiApIHtcblx0XHRyZXR1cm4gYSA8IGI7XG5cdH0sXG5cdCc8PSc6IGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdHJldHVybiBhIDw9IGI7XG5cdH0sXG5cdCc+JzogZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0cmV0dXJuIGEgPiBiO1xuXHR9LFxuXHQnPj0nOiBmdW5jdGlvbiggYSwgYiApIHtcblx0XHRyZXR1cm4gYSA+PSBiO1xuXHR9LFxuXHQnPT0nOiBmdW5jdGlvbiggYSwgYiApIHtcblx0XHRyZXR1cm4gYSA9PT0gYjtcblx0fSxcblx0JyE9JzogZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0cmV0dXJuIGEgIT09IGI7XG5cdH0sXG5cdCcmJic6IGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdHJldHVybiBhICYmIGI7XG5cdH0sXG5cdCd8fCc6IGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdHJldHVybiBhIHx8IGI7XG5cdH0sXG5cdCc/Oic6IGZ1bmN0aW9uKCBhLCBiLCBjICkge1xuXHRcdGlmICggYSApIHtcblx0XHRcdHRocm93IGI7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGM7XG5cdH0sXG59O1xuXG4vKipcbiAqIEdpdmVuIGFuIGFycmF5IG9mIHBvc3RmaXggdGVybXMgYW5kIG9wZXJhbmQgdmFyaWFibGVzLCByZXR1cm5zIHRoZSByZXN1bHQgb2ZcbiAqIHRoZSBwb3N0Zml4IGV2YWx1YXRpb24uXG4gKlxuICogQGV4YW1wbGVcbiAqXG4gKiBgYGBqc1xuICogaW1wb3J0IGV2YWx1YXRlIGZyb20gJ0B0YW5uaW4vZXZhbHVhdGUnO1xuICpcbiAqIC8vIDMgKyA0ICogNSAvIDYg4oeSICczIDQgNSAqIDYgLyArJ1xuICogY29uc3QgdGVybXMgPSBbICczJywgJzQnLCAnNScsICcqJywgJzYnLCAnLycsICcrJyBdO1xuICpcbiAqIGV2YWx1YXRlKCB0ZXJtcywge30gKTtcbiAqIC8vIOKHkiA2LjMzMzMzMzMzMzMzMzMzNFxuICogYGBgXG4gKlxuICogQHBhcmFtIHtzdHJpbmdbXX0gcG9zdGZpeCAgIFBvc3RmaXggdGVybXMuXG4gKiBAcGFyYW0ge09iamVjdH0gICB2YXJpYWJsZXMgT3BlcmFuZCB2YXJpYWJsZXMuXG4gKlxuICogQHJldHVybiB7Kn0gUmVzdWx0IG9mIGV2YWx1YXRpb24uXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGV2YWx1YXRlKCBwb3N0Zml4LCB2YXJpYWJsZXMgKSB7XG5cdHZhciBzdGFjayA9IFtdLFxuXHRcdGksIGosIGFyZ3MsIGdldE9wZXJhdG9yUmVzdWx0LCB0ZXJtLCB2YWx1ZTtcblxuXHRmb3IgKCBpID0gMDsgaSA8IHBvc3RmaXgubGVuZ3RoOyBpKysgKSB7XG5cdFx0dGVybSA9IHBvc3RmaXhbIGkgXTtcblxuXHRcdGdldE9wZXJhdG9yUmVzdWx0ID0gT1BFUkFUT1JTWyB0ZXJtIF07XG5cdFx0aWYgKCBnZXRPcGVyYXRvclJlc3VsdCApIHtcblx0XHRcdC8vIFBvcCBmcm9tIHN0YWNrIGJ5IG51bWJlciBvZiBmdW5jdGlvbiBhcmd1bWVudHMuXG5cdFx0XHRqID0gZ2V0T3BlcmF0b3JSZXN1bHQubGVuZ3RoO1xuXHRcdFx0YXJncyA9IEFycmF5KCBqICk7XG5cdFx0XHR3aGlsZSAoIGotLSApIHtcblx0XHRcdFx0YXJnc1sgaiBdID0gc3RhY2sucG9wKCk7XG5cdFx0XHR9XG5cblx0XHRcdHRyeSB7XG5cdFx0XHRcdHZhbHVlID0gZ2V0T3BlcmF0b3JSZXN1bHQuYXBwbHkoIG51bGwsIGFyZ3MgKTtcblx0XHRcdH0gY2F0Y2ggKCBlYXJseVJldHVybiApIHtcblx0XHRcdFx0cmV0dXJuIGVhcmx5UmV0dXJuO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSBpZiAoIHZhcmlhYmxlcy5oYXNPd25Qcm9wZXJ0eSggdGVybSApICkge1xuXHRcdFx0dmFsdWUgPSB2YXJpYWJsZXNbIHRlcm0gXTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dmFsdWUgPSArdGVybTtcblx0XHR9XG5cblx0XHRzdGFjay5wdXNoKCB2YWx1ZSApO1xuXHR9XG5cblx0cmV0dXJuIHN0YWNrWyAwIF07XG59XG4iLCJpbXBvcnQgcG9zdGZpeCBmcm9tICdAdGFubmluL3Bvc3RmaXgnO1xuaW1wb3J0IGV2YWx1YXRlIGZyb20gJ0B0YW5uaW4vZXZhbHVhdGUnO1xuXG4vKipcbiAqIEdpdmVuIGEgQyBleHByZXNzaW9uLCByZXR1cm5zIGEgZnVuY3Rpb24gd2hpY2ggY2FuIGJlIGNhbGxlZCB0byBldmFsdWF0ZSBpdHNcbiAqIHJlc3VsdC5cbiAqXG4gKiBAZXhhbXBsZVxuICpcbiAqIGBgYGpzXG4gKiBpbXBvcnQgY29tcGlsZSBmcm9tICdAdGFubmluL2NvbXBpbGUnO1xuICpcbiAqIGNvbnN0IGV2YWx1YXRlID0gY29tcGlsZSggJ24gPiAxJyApO1xuICpcbiAqIGV2YWx1YXRlKCB7IG46IDIgfSApO1xuICogLy8g4oeSIHRydWVcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBleHByZXNzaW9uIEMgZXhwcmVzc2lvbi5cbiAqXG4gKiBAcmV0dXJuIHtGdW5jdGlvbn0gQ29tcGlsZWQgZXZhbHVhdG9yLlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjb21waWxlKCBleHByZXNzaW9uICkge1xuXHR2YXIgdGVybXMgPSBwb3N0Zml4KCBleHByZXNzaW9uICk7XG5cblx0cmV0dXJuIGZ1bmN0aW9uKCB2YXJpYWJsZXMgKSB7XG5cdFx0cmV0dXJuIGV2YWx1YXRlKCB0ZXJtcywgdmFyaWFibGVzICk7XG5cdH07XG59XG4iLCJpbXBvcnQgcGx1cmFsRm9ybXMgZnJvbSAnQHRhbm5pbi9wbHVyYWwtZm9ybXMnO1xuXG4vKipcbiAqIFRhbm5pbiBjb25zdHJ1Y3RvciBvcHRpb25zLlxuICpcbiAqIEBwcm9wZXJ0eSB7P3N0cmluZ30gICBjb250ZXh0RGVsaW1pdGVyIEpvaW5lciBpbiBzdHJpbmcgbG9va3VwIHdpdGggY29udGV4dC5cbiAqIEBwcm9wZXJ0eSB7P0Z1bmN0aW9ufSBvbk1pc3NpbmdLZXkgICAgIENhbGxiYWNrIHRvIGludm9rZSB3aGVuIGtleSBtaXNzaW5nLlxuICpcbiAqIEB0eXBlIHtPYmplY3R9XG4gKlxuICogQHR5cGVkZWYge1Rhbm5pbk9wdGlvbnN9XG4gKi9cblxuLyoqXG4gKiBEZWZhdWx0IFRhbm5pbiBjb25zdHJ1Y3RvciBvcHRpb25zLlxuICpcbiAqIEB0eXBlIHtUYW5uaW5PcHRpb25zfVxuICovXG52YXIgREVGQVVMVF9PUFRJT05TID0ge1xuXHRjb250ZXh0RGVsaW1pdGVyOiAnXFx1MDAwNCcsXG5cdG9uTWlzc2luZ0tleTogbnVsbCxcbn07XG5cbi8qKlxuICogR2l2ZW4gYSBzcGVjaWZpYyBsb2NhbGUgZGF0YSdzIGNvbmZpZyBgcGx1cmFsX2Zvcm1zYCB2YWx1ZSwgcmV0dXJucyB0aGVcbiAqIGV4cHJlc3Npb24uXG4gKlxuICogQGV4YW1wbGVcbiAqXG4gKiBgYGBcbiAqIGdldFBsdXJhbEV4cHJlc3Npb24oICducGx1cmFscz0yOyBwbHVyYWw9KG4gIT0gMSk7JyApID09PSAnKG4gIT0gMSknXG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gcGYgTG9jYWxlIGRhdGEgcGx1cmFsIGZvcm1zLlxuICpcbiAqIEByZXR1cm4ge3N0cmluZ30gUGx1cmFsIGZvcm1zIGV4cHJlc3Npb24uXG4gKi9cbmZ1bmN0aW9uIGdldFBsdXJhbEV4cHJlc3Npb24oIHBmICkge1xuXHR2YXIgcGFydHMsIGksIHBhcnQ7XG5cblx0cGFydHMgPSBwZi5zcGxpdCggJzsnICk7XG5cblx0Zm9yICggaSA9IDA7IGkgPCBwYXJ0cy5sZW5ndGg7IGkrKyApIHtcblx0XHRwYXJ0ID0gcGFydHNbIGkgXS50cmltKCk7XG5cdFx0aWYgKCBwYXJ0LmluZGV4T2YoICdwbHVyYWw9JyApID09PSAwICkge1xuXHRcdFx0cmV0dXJuIHBhcnQuc3Vic3RyKCA3ICk7XG5cdFx0fVxuXHR9XG59XG5cbi8qKlxuICogVGFubmluIGNvbnN0cnVjdG9yLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSAgICAgICAgZGF0YSAgICBKZWQtZm9ybWF0dGVkIGxvY2FsZSBkYXRhLlxuICogQHBhcmFtIHtUYW5uaW5PcHRpb25zfSBvcHRpb25zIFRhbm5pbiBvcHRpb25zLlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBUYW5uaW4oIGRhdGEsIG9wdGlvbnMgKSB7XG5cdHZhciBrZXk7XG5cblx0dGhpcy5kYXRhID0gZGF0YTtcblx0dGhpcy5wbHVyYWxGb3JtcyA9IHt9O1xuXG5cdG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXHR0aGlzLm9wdGlvbnMgPSB7fTtcblx0Zm9yICgga2V5IGluIERFRkFVTFRfT1BUSU9OUyApIHtcblx0XHR0aGlzLm9wdGlvbnNbIGtleSBdID0gb3B0aW9uc1sga2V5IF0gfHwgREVGQVVMVF9PUFRJT05TWyBrZXkgXTtcblx0fVxufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIHBsdXJhbCBmb3JtIGluZGV4IGZvciB0aGUgZ2l2ZW4gZG9tYWluIGFuZCB2YWx1ZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gZG9tYWluIERvbWFpbiBvbiB3aGljaCB0byBjYWxjdWxhdGUgcGx1cmFsIGZvcm0uXG4gKiBAcGFyYW0ge251bWJlcn0gbiAgICAgIFZhbHVlIGZvciB3aGljaCBwbHVyYWwgZm9ybSBpcyB0byBiZSBjYWxjdWxhdGVkLlxuICpcbiAqIEByZXR1cm4ge251bWJlcn0gUGx1cmFsIGZvcm0gaW5kZXguXG4gKi9cblRhbm5pbi5wcm90b3R5cGUuZ2V0UGx1cmFsRm9ybSA9IGZ1bmN0aW9uKCBkb21haW4sIG4gKSB7XG5cdHZhciBnZXRQbHVyYWxGb3JtID0gdGhpcy5wbHVyYWxGb3Jtc1sgZG9tYWluIF0sXG5cdFx0Y29uZmlnLCBwbHVyYWwsIHBmO1xuXG5cdGlmICggISBnZXRQbHVyYWxGb3JtICkge1xuXHRcdGNvbmZpZyA9IHRoaXMuZGF0YVsgZG9tYWluIF1bICcnIF07XG5cblx0XHRwZiA9IChcblx0XHRcdGNvbmZpZ1sgJ1BsdXJhbC1Gb3JtcycgXSB8fFxuXHRcdFx0Y29uZmlnWyAncGx1cmFsLWZvcm1zJyBdIHx8XG5cdFx0XHRjb25maWcucGx1cmFsX2Zvcm1zXG5cdFx0KTtcblxuXHRcdGlmICggdHlwZW9mIHBmICE9PSAnZnVuY3Rpb24nICkge1xuXHRcdFx0cGx1cmFsID0gZ2V0UGx1cmFsRXhwcmVzc2lvbihcblx0XHRcdFx0Y29uZmlnWyAnUGx1cmFsLUZvcm1zJyBdIHx8XG5cdFx0XHRcdGNvbmZpZ1sgJ3BsdXJhbC1mb3JtcycgXSB8fFxuXHRcdFx0XHRjb25maWcucGx1cmFsX2Zvcm1zXG5cdFx0XHQpO1xuXG5cdFx0XHRwZiA9IHBsdXJhbEZvcm1zKCBwbHVyYWwgKTtcblx0XHR9XG5cblx0XHRnZXRQbHVyYWxGb3JtID0gdGhpcy5wbHVyYWxGb3Jtc1sgZG9tYWluIF0gPSBwZjtcblx0fVxuXG5cdHJldHVybiBnZXRQbHVyYWxGb3JtKCBuICk7XG59O1xuXG4vKipcbiAqIFRyYW5zbGF0ZSBhIHN0cmluZy5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gZG9tYWluICAgVHJhbnNsYXRpb24gZG9tYWluLlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbnRleHQgIENvbnRleHQgZGlzdGluZ3Vpc2hpbmcgdGVybXMgb2YgdGhlIHNhbWUgbmFtZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBzaW5ndWxhciBQcmltYXJ5IGtleSBmb3IgdHJhbnNsYXRpb24gbG9va3VwLlxuICogQHBhcmFtIHtzdHJpbmd9IHBsdXJhbCAgIEZhbGxiYWNrIHZhbHVlIHVzZWQgZm9yIG5vbi16ZXJvIHBsdXJhbCBmb3JtIGluZGV4LlxuICogQHBhcmFtIHtudW1iZXJ9IG4gICAgICAgIFZhbHVlIHRvIHVzZSBpbiBjYWxjdWxhdGluZyBwbHVyYWwgZm9ybS5cbiAqXG4gKiBAcmV0dXJuIHtzdHJpbmd9IFRyYW5zbGF0ZWQgc3RyaW5nLlxuICovXG5UYW5uaW4ucHJvdG90eXBlLmRjbnBnZXR0ZXh0ID0gZnVuY3Rpb24oIGRvbWFpbiwgY29udGV4dCwgc2luZ3VsYXIsIHBsdXJhbCwgbiApIHtcblx0dmFyIGluZGV4LCBrZXksIGVudHJ5O1xuXG5cdGlmICggbiA9PT0gdW5kZWZpbmVkICkge1xuXHRcdC8vIERlZmF1bHQgdG8gc2luZ3VsYXIuXG5cdFx0aW5kZXggPSAwO1xuXHR9IGVsc2Uge1xuXHRcdC8vIEZpbmQgaW5kZXggYnkgZXZhbHVhdGluZyBwbHVyYWwgZm9ybSBmb3IgdmFsdWUuXG5cdFx0aW5kZXggPSB0aGlzLmdldFBsdXJhbEZvcm0oIGRvbWFpbiwgbiApO1xuXHR9XG5cblx0a2V5ID0gc2luZ3VsYXI7XG5cblx0Ly8gSWYgcHJvdmlkZWQsIGNvbnRleHQgaXMgcHJlcGVuZGVkIHRvIGtleSB3aXRoIGRlbGltaXRlci5cblx0aWYgKCBjb250ZXh0ICkge1xuXHRcdGtleSA9IGNvbnRleHQgKyB0aGlzLm9wdGlvbnMuY29udGV4dERlbGltaXRlciArIHNpbmd1bGFyO1xuXHR9XG5cblx0ZW50cnkgPSB0aGlzLmRhdGFbIGRvbWFpbiBdWyBrZXkgXTtcblxuXHQvLyBWZXJpZnkgbm90IG9ubHkgdGhhdCBlbnRyeSBleGlzdHMsIGJ1dCB0aGF0IHRoZSBpbnRlbmRlZCBpbmRleCBpcyB3aXRoaW5cblx0Ly8gcmFuZ2UgYW5kIG5vbi1lbXB0eS5cblx0aWYgKCBlbnRyeSAmJiBlbnRyeVsgaW5kZXggXSApIHtcblx0XHRyZXR1cm4gZW50cnlbIGluZGV4IF07XG5cdH1cblxuXHRpZiAoIHRoaXMub3B0aW9ucy5vbk1pc3NpbmdLZXkgKSB7XG5cdFx0dGhpcy5vcHRpb25zLm9uTWlzc2luZ0tleSggc2luZ3VsYXIsIGRvbWFpbiApO1xuXHR9XG5cblx0Ly8gSWYgZW50cnkgbm90IGZvdW5kLCBmYWxsIGJhY2sgdG8gc2luZ3VsYXIgdnMuIHBsdXJhbCB3aXRoIHplcm8gaW5kZXhcblx0Ly8gcmVwcmVzZW50aW5nIHRoZSBzaW5ndWxhciB2YWx1ZS5cblx0cmV0dXJuIGluZGV4ID09PSAwID8gc2luZ3VsYXIgOiBwbHVyYWw7XG59O1xuIiwiaW1wb3J0IGNvbXBpbGUgZnJvbSAnQHRhbm5pbi9jb21waWxlJztcblxuLyoqXG4gKiBHaXZlbiBhIEMgZXhwcmVzc2lvbiwgcmV0dXJucyBhIGZ1bmN0aW9uIHdoaWNoLCB3aGVuIGNhbGxlZCB3aXRoIGEgdmFsdWUsXG4gKiBldmFsdWF0ZXMgdGhlIHJlc3VsdCB3aXRoIHRoZSB2YWx1ZSBhc3N1bWVkIHRvIGJlIHRoZSBcIm5cIiB2YXJpYWJsZSBvZiB0aGVcbiAqIGV4cHJlc3Npb24uIFRoZSByZXN1bHQgd2lsbCBiZSBjb2VyY2VkIHRvIGl0cyBudW1lcmljIGVxdWl2YWxlbnQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGV4cHJlc3Npb24gQyBleHByZXNzaW9uLlxuICpcbiAqIEByZXR1cm4ge0Z1bmN0aW9ufSBFdmFsdWF0b3IgZnVuY3Rpb24uXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHBsdXJhbEZvcm1zKCBleHByZXNzaW9uICkge1xuXHR2YXIgZXZhbHVhdGUgPSBjb21waWxlKCBleHByZXNzaW9uICk7XG5cblx0cmV0dXJuIGZ1bmN0aW9uKCBuICkge1xuXHRcdHJldHVybiArZXZhbHVhdGUoIHsgbjogbiB9ICk7XG5cdH07XG59XG4iLCJpbXBvcnQgX29iamVjdFNwcmVhZCBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0U3ByZWFkXCI7XG5cbi8qKlxuICogRXh0ZXJuYWwgZGVwZW5kZW5jaWVzXG4gKi9cbmltcG9ydCBUYW5uaW4gZnJvbSAndGFubmluJztcbmltcG9ydCBtZW1vaXplIGZyb20gJ21lbWl6ZSc7XG5pbXBvcnQgc3ByaW50ZmpzIGZyb20gJ3NwcmludGYtanMnO1xuLyoqXG4gKiBEZWZhdWx0IGxvY2FsZSBkYXRhIHRvIHVzZSBmb3IgVGFubmluIGRvbWFpbiB3aGVuIG5vdCBvdGhlcndpc2UgcHJvdmlkZWQuXG4gKiBBc3N1bWVzIGFuIEVuZ2xpc2ggcGx1cmFsIGZvcm1zIGV4cHJlc3Npb24uXG4gKlxuICogQHR5cGUge09iamVjdH1cbiAqL1xuXG52YXIgREVGQVVMVF9MT0NBTEVfREFUQSA9IHtcbiAgJyc6IHtcbiAgICBwbHVyYWxfZm9ybXM6IGZ1bmN0aW9uIHBsdXJhbF9mb3JtcyhuKSB7XG4gICAgICByZXR1cm4gbiA9PT0gMSA/IDAgOiAxO1xuICAgIH1cbiAgfVxufTtcbi8qKlxuICogTG9nIHRvIGNvbnNvbGUsIG9uY2UgcGVyIG1lc3NhZ2U7IG9yIG1vcmUgcHJlY2lzZWx5LCBwZXIgcmVmZXJlbnRpYWxseSBlcXVhbFxuICogYXJndW1lbnQgc2V0LiBCZWNhdXNlIEplZCB0aHJvd3MgZXJyb3JzLCB3ZSBsb2cgdGhlc2UgdG8gdGhlIGNvbnNvbGUgaW5zdGVhZFxuICogdG8gYXZvaWQgY3Jhc2hpbmcgdGhlIGFwcGxpY2F0aW9uLlxuICpcbiAqIEBwYXJhbSB7Li4uKn0gYXJncyBBcmd1bWVudHMgdG8gcGFzcyB0byBgY29uc29sZS5lcnJvcmBcbiAqL1xuXG52YXIgbG9nRXJyb3JPbmNlID0gbWVtb2l6ZShjb25zb2xlLmVycm9yKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jb25zb2xlXG5cbi8qKlxuICogVGhlIHVuZGVybHlpbmcgaW5zdGFuY2Ugb2YgVGFubmluIHRvIHdoaWNoIGV4cG9ydGVkIGZ1bmN0aW9ucyBpbnRlcmZhY2UuXG4gKlxuICogQHR5cGUge1Rhbm5pbn1cbiAqL1xuXG52YXIgaTE4biA9IG5ldyBUYW5uaW4oe30pO1xuLyoqXG4gKiBNZXJnZXMgbG9jYWxlIGRhdGEgaW50byB0aGUgVGFubmluIGluc3RhbmNlIGJ5IGRvbWFpbi4gQWNjZXB0cyBkYXRhIGluIGFcbiAqIEplZC1mb3JtYXR0ZWQgSlNPTiBvYmplY3Qgc2hhcGUuXG4gKlxuICogQHNlZSBodHRwOi8vbWVzc2FnZWZvcm1hdC5naXRodWIuaW8vSmVkL1xuICpcbiAqIEBwYXJhbSB7P09iamVjdH0gZGF0YSAgIExvY2FsZSBkYXRhIGNvbmZpZ3VyYXRpb24uXG4gKiBAcGFyYW0gez9zdHJpbmd9IGRvbWFpbiBEb21haW4gZm9yIHdoaWNoIGNvbmZpZ3VyYXRpb24gYXBwbGllcy5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gc2V0TG9jYWxlRGF0YShkYXRhKSB7XG4gIHZhciBkb21haW4gPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6ICdkZWZhdWx0JztcbiAgaTE4bi5kYXRhW2RvbWFpbl0gPSBfb2JqZWN0U3ByZWFkKHt9LCBERUZBVUxUX0xPQ0FMRV9EQVRBLCBpMThuLmRhdGFbZG9tYWluXSwgZGF0YSk7IC8vIFBvcHVsYXRlIGRlZmF1bHQgZG9tYWluIGNvbmZpZ3VyYXRpb24gKHN1cHBvcnRlZCBsb2NhbGUgZGF0ZSB3aGljaCBvbWl0c1xuICAvLyBhIHBsdXJhbCBmb3JtcyBleHByZXNzaW9uKS5cblxuICBpMThuLmRhdGFbZG9tYWluXVsnJ10gPSBfb2JqZWN0U3ByZWFkKHt9LCBERUZBVUxUX0xPQ0FMRV9EQVRBWycnXSwgaTE4bi5kYXRhW2RvbWFpbl1bJyddKTtcbn1cbi8qKlxuICogV3JhcHBlciBmb3IgVGFubmluJ3MgYGRjbnBnZXR0ZXh0YC4gUG9wdWxhdGVzIGRlZmF1bHQgbG9jYWxlIGRhdGEgaWYgbm90XG4gKiBvdGhlcndpc2UgcHJldmlvdXNseSBhc3NpZ25lZC5cbiAqXG4gKiBAcGFyYW0gez9zdHJpbmd9IGRvbWFpbiAgRG9tYWluIHRvIHJldHJpZXZlIHRoZSB0cmFuc2xhdGVkIHRleHQuXG4gKiBAcGFyYW0gez9zdHJpbmd9IGNvbnRleHQgQ29udGV4dCBpbmZvcm1hdGlvbiBmb3IgdGhlIHRyYW5zbGF0b3JzLlxuICogQHBhcmFtIHtzdHJpbmd9ICBzaW5nbGUgIFRleHQgdG8gdHJhbnNsYXRlIGlmIG5vbi1wbHVyYWwuIFVzZWQgYXMgZmFsbGJhY2tcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWUgb24gYSBjYXVnaHQgZXJyb3IuXG4gKiBAcGFyYW0gez9zdHJpbmd9IHBsdXJhbCAgVGhlIHRleHQgdG8gYmUgdXNlZCBpZiB0aGUgbnVtYmVyIGlzIHBsdXJhbC5cbiAqIEBwYXJhbSB7P251bWJlcn0gbnVtYmVyICBUaGUgbnVtYmVyIHRvIGNvbXBhcmUgYWdhaW5zdCB0byB1c2UgZWl0aGVyIHRoZVxuICogICAgICAgICAgICAgICAgICAgICAgICAgIHNpbmd1bGFyIG9yIHBsdXJhbCBmb3JtLlxuICpcbiAqIEByZXR1cm4ge3N0cmluZ30gVGhlIHRyYW5zbGF0ZWQgc3RyaW5nLlxuICovXG5cbmZ1bmN0aW9uIGRjbnBnZXR0ZXh0KCkge1xuICB2YXIgZG9tYWluID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiAnZGVmYXVsdCc7XG4gIHZhciBjb250ZXh0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7XG4gIHZhciBzaW5nbGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZDtcbiAgdmFyIHBsdXJhbCA9IGFyZ3VtZW50cy5sZW5ndGggPiAzID8gYXJndW1lbnRzWzNdIDogdW5kZWZpbmVkO1xuICB2YXIgbnVtYmVyID0gYXJndW1lbnRzLmxlbmd0aCA+IDQgPyBhcmd1bWVudHNbNF0gOiB1bmRlZmluZWQ7XG5cbiAgaWYgKCFpMThuLmRhdGFbZG9tYWluXSkge1xuICAgIHNldExvY2FsZURhdGEodW5kZWZpbmVkLCBkb21haW4pO1xuICB9XG5cbiAgcmV0dXJuIGkxOG4uZGNucGdldHRleHQoZG9tYWluLCBjb250ZXh0LCBzaW5nbGUsIHBsdXJhbCwgbnVtYmVyKTtcbn1cbi8qKlxuICogUmV0cmlldmUgdGhlIHRyYW5zbGF0aW9uIG9mIHRleHQuXG4gKlxuICogQHNlZSBodHRwczovL2RldmVsb3Blci53b3JkcHJlc3Mub3JnL3JlZmVyZW5jZS9mdW5jdGlvbnMvX18vXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9ICB0ZXh0ICAgVGV4dCB0byB0cmFuc2xhdGUuXG4gKiBAcGFyYW0gez9zdHJpbmd9IGRvbWFpbiBEb21haW4gdG8gcmV0cmlldmUgdGhlIHRyYW5zbGF0ZWQgdGV4dC5cbiAqXG4gKiBAcmV0dXJuIHtzdHJpbmd9IFRyYW5zbGF0ZWQgdGV4dC5cbiAqL1xuXG5cbmV4cG9ydCBmdW5jdGlvbiBfXyh0ZXh0LCBkb21haW4pIHtcbiAgcmV0dXJuIGRjbnBnZXR0ZXh0KGRvbWFpbiwgdW5kZWZpbmVkLCB0ZXh0KTtcbn1cbi8qKlxuICogUmV0cmlldmUgdHJhbnNsYXRlZCBzdHJpbmcgd2l0aCBnZXR0ZXh0IGNvbnRleHQuXG4gKlxuICogQHNlZSBodHRwczovL2RldmVsb3Blci53b3JkcHJlc3Mub3JnL3JlZmVyZW5jZS9mdW5jdGlvbnMvX3gvXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9ICB0ZXh0ICAgIFRleHQgdG8gdHJhbnNsYXRlLlxuICogQHBhcmFtIHtzdHJpbmd9ICBjb250ZXh0IENvbnRleHQgaW5mb3JtYXRpb24gZm9yIHRoZSB0cmFuc2xhdG9ycy5cbiAqIEBwYXJhbSB7P3N0cmluZ30gZG9tYWluICBEb21haW4gdG8gcmV0cmlldmUgdGhlIHRyYW5zbGF0ZWQgdGV4dC5cbiAqXG4gKiBAcmV0dXJuIHtzdHJpbmd9IFRyYW5zbGF0ZWQgY29udGV4dCBzdHJpbmcgd2l0aG91dCBwaXBlLlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBfeCh0ZXh0LCBjb250ZXh0LCBkb21haW4pIHtcbiAgcmV0dXJuIGRjbnBnZXR0ZXh0KGRvbWFpbiwgY29udGV4dCwgdGV4dCk7XG59XG4vKipcbiAqIFRyYW5zbGF0ZXMgYW5kIHJldHJpZXZlcyB0aGUgc2luZ3VsYXIgb3IgcGx1cmFsIGZvcm0gYmFzZWQgb24gdGhlIHN1cHBsaWVkXG4gKiBudW1iZXIuXG4gKlxuICogQHNlZSBodHRwczovL2RldmVsb3Blci53b3JkcHJlc3Mub3JnL3JlZmVyZW5jZS9mdW5jdGlvbnMvX24vXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9ICBzaW5nbGUgVGhlIHRleHQgdG8gYmUgdXNlZCBpZiB0aGUgbnVtYmVyIGlzIHNpbmd1bGFyLlxuICogQHBhcmFtIHtzdHJpbmd9ICBwbHVyYWwgVGhlIHRleHQgdG8gYmUgdXNlZCBpZiB0aGUgbnVtYmVyIGlzIHBsdXJhbC5cbiAqIEBwYXJhbSB7bnVtYmVyfSAgbnVtYmVyIFRoZSBudW1iZXIgdG8gY29tcGFyZSBhZ2FpbnN0IHRvIHVzZSBlaXRoZXIgdGhlXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICBzaW5ndWxhciBvciBwbHVyYWwgZm9ybS5cbiAqIEBwYXJhbSB7P3N0cmluZ30gZG9tYWluIERvbWFpbiB0byByZXRyaWV2ZSB0aGUgdHJhbnNsYXRlZCB0ZXh0LlxuICpcbiAqIEByZXR1cm4ge3N0cmluZ30gVGhlIHRyYW5zbGF0ZWQgc2luZ3VsYXIgb3IgcGx1cmFsIGZvcm0uXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIF9uKHNpbmdsZSwgcGx1cmFsLCBudW1iZXIsIGRvbWFpbikge1xuICByZXR1cm4gZGNucGdldHRleHQoZG9tYWluLCB1bmRlZmluZWQsIHNpbmdsZSwgcGx1cmFsLCBudW1iZXIpO1xufVxuLyoqXG4gKiBUcmFuc2xhdGVzIGFuZCByZXRyaWV2ZXMgdGhlIHNpbmd1bGFyIG9yIHBsdXJhbCBmb3JtIGJhc2VkIG9uIHRoZSBzdXBwbGllZFxuICogbnVtYmVyLCB3aXRoIGdldHRleHQgY29udGV4dC5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLndvcmRwcmVzcy5vcmcvcmVmZXJlbmNlL2Z1bmN0aW9ucy9fbngvXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9ICBzaW5nbGUgIFRoZSB0ZXh0IHRvIGJlIHVzZWQgaWYgdGhlIG51bWJlciBpcyBzaW5ndWxhci5cbiAqIEBwYXJhbSB7c3RyaW5nfSAgcGx1cmFsICBUaGUgdGV4dCB0byBiZSB1c2VkIGlmIHRoZSBudW1iZXIgaXMgcGx1cmFsLlxuICogQHBhcmFtIHtudW1iZXJ9ICBudW1iZXIgIFRoZSBudW1iZXIgdG8gY29tcGFyZSBhZ2FpbnN0IHRvIHVzZSBlaXRoZXIgdGhlXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgc2luZ3VsYXIgb3IgcGx1cmFsIGZvcm0uXG4gKiBAcGFyYW0ge3N0cmluZ30gIGNvbnRleHQgQ29udGV4dCBpbmZvcm1hdGlvbiBmb3IgdGhlIHRyYW5zbGF0b3JzLlxuICogQHBhcmFtIHs/c3RyaW5nfSBkb21haW4gIERvbWFpbiB0byByZXRyaWV2ZSB0aGUgdHJhbnNsYXRlZCB0ZXh0LlxuICpcbiAqIEByZXR1cm4ge3N0cmluZ30gVGhlIHRyYW5zbGF0ZWQgc2luZ3VsYXIgb3IgcGx1cmFsIGZvcm0uXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIF9ueChzaW5nbGUsIHBsdXJhbCwgbnVtYmVyLCBjb250ZXh0LCBkb21haW4pIHtcbiAgcmV0dXJuIGRjbnBnZXR0ZXh0KGRvbWFpbiwgY29udGV4dCwgc2luZ2xlLCBwbHVyYWwsIG51bWJlcik7XG59XG4vKipcbiAqIFJldHVybnMgYSBmb3JtYXR0ZWQgc3RyaW5nLiBJZiBhbiBlcnJvciBvY2N1cnMgaW4gYXBwbHlpbmcgdGhlIGZvcm1hdCwgdGhlXG4gKiBvcmlnaW5hbCBmb3JtYXQgc3RyaW5nIGlzIHJldHVybmVkLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSAgIGZvcm1hdCAgVGhlIGZvcm1hdCBvZiB0aGUgc3RyaW5nIHRvIGdlbmVyYXRlLlxuICogQHBhcmFtIHsuLi5zdHJpbmd9IGFyZ3MgQXJndW1lbnRzIHRvIGFwcGx5IHRvIHRoZSBmb3JtYXQuXG4gKlxuICogQHNlZSBodHRwOi8vd3d3LmRpdmVpbnRvamF2YXNjcmlwdC5jb20vcHJvamVjdHMvamF2YXNjcmlwdC1zcHJpbnRmXG4gKlxuICogQHJldHVybiB7c3RyaW5nfSBUaGUgZm9ybWF0dGVkIHN0cmluZy5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gc3ByaW50Zihmb3JtYXQpIHtcbiAgdHJ5IHtcbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gc3ByaW50ZmpzLnNwcmludGYuYXBwbHkoc3ByaW50ZmpzLCBbZm9ybWF0XS5jb25jYXQoYXJncykpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGxvZ0Vycm9yT25jZSgnc3ByaW50ZiBlcnJvcjogXFxuXFxuJyArIGVycm9yLnRvU3RyaW5nKCkpO1xuICAgIHJldHVybiBmb3JtYXQ7XG4gIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCIsImltcG9ydCBfb2JqZWN0U3ByZWFkIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RTcHJlYWRcIjtcblxuZnVuY3Rpb24gY3JlYXRlTm9uY2VNaWRkbGV3YXJlKG5vbmNlKSB7XG4gIGZ1bmN0aW9uIG1pZGRsZXdhcmUob3B0aW9ucywgbmV4dCkge1xuICAgIHZhciBfb3B0aW9ucyRoZWFkZXJzID0gb3B0aW9ucy5oZWFkZXJzLFxuICAgICAgICBoZWFkZXJzID0gX29wdGlvbnMkaGVhZGVycyA9PT0gdm9pZCAwID8ge30gOiBfb3B0aW9ucyRoZWFkZXJzOyAvLyBJZiBhbiAnWC1XUC1Ob25jZScgaGVhZGVyIChvciBhbnkgY2FzZS1pbnNlbnNpdGl2ZSB2YXJpYXRpb25cbiAgICAvLyB0aGVyZW9mKSB3YXMgc3BlY2lmaWVkLCBubyBuZWVkIHRvIGFkZCBhIG5vbmNlIGhlYWRlci5cblxuICAgIGZvciAodmFyIGhlYWRlck5hbWUgaW4gaGVhZGVycykge1xuICAgICAgaWYgKGhlYWRlck5hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ3gtd3Atbm9uY2UnKSB7XG4gICAgICAgIHJldHVybiBuZXh0KG9wdGlvbnMpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBuZXh0KF9vYmplY3RTcHJlYWQoe30sIG9wdGlvbnMsIHtcbiAgICAgIGhlYWRlcnM6IF9vYmplY3RTcHJlYWQoe30sIGhlYWRlcnMsIHtcbiAgICAgICAgJ1gtV1AtTm9uY2UnOiBtaWRkbGV3YXJlLm5vbmNlXG4gICAgICB9KVxuICAgIH0pKTtcbiAgfVxuXG4gIG1pZGRsZXdhcmUubm9uY2UgPSBub25jZTtcbiAgcmV0dXJuIG1pZGRsZXdhcmU7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZU5vbmNlTWlkZGxld2FyZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW5vbmNlLmpzLm1hcCIsImltcG9ydCBfb2JqZWN0U3ByZWFkIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RTcHJlYWRcIjtcblxudmFyIG5hbWVzcGFjZUFuZEVuZHBvaW50TWlkZGxld2FyZSA9IGZ1bmN0aW9uIG5hbWVzcGFjZUFuZEVuZHBvaW50TWlkZGxld2FyZShvcHRpb25zLCBuZXh0KSB7XG4gIHZhciBwYXRoID0gb3B0aW9ucy5wYXRoO1xuICB2YXIgbmFtZXNwYWNlVHJpbW1lZCwgZW5kcG9pbnRUcmltbWVkO1xuXG4gIGlmICh0eXBlb2Ygb3B0aW9ucy5uYW1lc3BhY2UgPT09ICdzdHJpbmcnICYmIHR5cGVvZiBvcHRpb25zLmVuZHBvaW50ID09PSAnc3RyaW5nJykge1xuICAgIG5hbWVzcGFjZVRyaW1tZWQgPSBvcHRpb25zLm5hbWVzcGFjZS5yZXBsYWNlKC9eXFwvfFxcLyQvZywgJycpO1xuICAgIGVuZHBvaW50VHJpbW1lZCA9IG9wdGlvbnMuZW5kcG9pbnQucmVwbGFjZSgvXlxcLy8sICcnKTtcblxuICAgIGlmIChlbmRwb2ludFRyaW1tZWQpIHtcbiAgICAgIHBhdGggPSBuYW1lc3BhY2VUcmltbWVkICsgJy8nICsgZW5kcG9pbnRUcmltbWVkO1xuICAgIH0gZWxzZSB7XG4gICAgICBwYXRoID0gbmFtZXNwYWNlVHJpbW1lZDtcbiAgICB9XG4gIH1cblxuICBkZWxldGUgb3B0aW9ucy5uYW1lc3BhY2U7XG4gIGRlbGV0ZSBvcHRpb25zLmVuZHBvaW50O1xuICByZXR1cm4gbmV4dChfb2JqZWN0U3ByZWFkKHt9LCBvcHRpb25zLCB7XG4gICAgcGF0aDogcGF0aFxuICB9KSk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBuYW1lc3BhY2VBbmRFbmRwb2ludE1pZGRsZXdhcmU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1uYW1lc3BhY2UtZW5kcG9pbnQuanMubWFwIiwiaW1wb3J0IF9vYmplY3RTcHJlYWQgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFNwcmVhZFwiO1xuXG4vKipcbiAqIEludGVybmFsIGRlcGVuZGVuY2llc1xuICovXG5pbXBvcnQgbmFtZXNwYWNlQW5kRW5kcG9pbnRNaWRkbGV3YXJlIGZyb20gJy4vbmFtZXNwYWNlLWVuZHBvaW50JztcblxudmFyIGNyZWF0ZVJvb3RVUkxNaWRkbGV3YXJlID0gZnVuY3Rpb24gY3JlYXRlUm9vdFVSTE1pZGRsZXdhcmUocm9vdFVSTCkge1xuICByZXR1cm4gZnVuY3Rpb24gKG9wdGlvbnMsIG5leHQpIHtcbiAgICByZXR1cm4gbmFtZXNwYWNlQW5kRW5kcG9pbnRNaWRkbGV3YXJlKG9wdGlvbnMsIGZ1bmN0aW9uIChvcHRpb25zV2l0aFBhdGgpIHtcbiAgICAgIHZhciB1cmwgPSBvcHRpb25zV2l0aFBhdGgudXJsO1xuICAgICAgdmFyIHBhdGggPSBvcHRpb25zV2l0aFBhdGgucGF0aDtcbiAgICAgIHZhciBhcGlSb290O1xuXG4gICAgICBpZiAodHlwZW9mIHBhdGggPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGFwaVJvb3QgPSByb290VVJMO1xuXG4gICAgICAgIGlmICgtMSAhPT0gcm9vdFVSTC5pbmRleE9mKCc/JykpIHtcbiAgICAgICAgICBwYXRoID0gcGF0aC5yZXBsYWNlKCc/JywgJyYnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHBhdGggPSBwYXRoLnJlcGxhY2UoL15cXC8vLCAnJyk7IC8vIEFQSSByb290IG1heSBhbHJlYWR5IGluY2x1ZGUgcXVlcnkgcGFyYW1ldGVyIHByZWZpeCBpZiBzaXRlIGlzXG4gICAgICAgIC8vIGNvbmZpZ3VyZWQgdG8gdXNlIHBsYWluIHBlcm1hbGlua3MuXG5cbiAgICAgICAgaWYgKCdzdHJpbmcnID09PSB0eXBlb2YgYXBpUm9vdCAmJiAtMSAhPT0gYXBpUm9vdC5pbmRleE9mKCc/JykpIHtcbiAgICAgICAgICBwYXRoID0gcGF0aC5yZXBsYWNlKCc/JywgJyYnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHVybCA9IGFwaVJvb3QgKyBwYXRoO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbmV4dChfb2JqZWN0U3ByZWFkKHt9LCBvcHRpb25zV2l0aFBhdGgsIHtcbiAgICAgICAgdXJsOiB1cmxcbiAgICAgIH0pKTtcbiAgICB9KTtcbiAgfTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZVJvb3RVUkxNaWRkbGV3YXJlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cm9vdC11cmwuanMubWFwIiwidmFyIGNyZWF0ZVByZWxvYWRpbmdNaWRkbGV3YXJlID0gZnVuY3Rpb24gY3JlYXRlUHJlbG9hZGluZ01pZGRsZXdhcmUocHJlbG9hZGVkRGF0YSkge1xuICByZXR1cm4gZnVuY3Rpb24gKG9wdGlvbnMsIG5leHQpIHtcbiAgICBmdW5jdGlvbiBnZXRTdGFibGVQYXRoKHBhdGgpIHtcbiAgICAgIHZhciBzcGxpdHRlZCA9IHBhdGguc3BsaXQoJz8nKTtcbiAgICAgIHZhciBxdWVyeSA9IHNwbGl0dGVkWzFdO1xuICAgICAgdmFyIGJhc2UgPSBzcGxpdHRlZFswXTtcblxuICAgICAgaWYgKCFxdWVyeSkge1xuICAgICAgICByZXR1cm4gYmFzZTtcbiAgICAgIH0gLy8gJ2I9MSZjPTImYT01J1xuXG5cbiAgICAgIHJldHVybiBiYXNlICsgJz8nICsgcXVlcnkgLy8gWyAnYj0xJywgJ2M9MicsICdhPTUnIF1cbiAgICAgIC5zcGxpdCgnJicpIC8vIFsgWyAnYiwgJzEnIF0sIFsgJ2MnLCAnMicgXSwgWyAnYScsICc1JyBdIF1cbiAgICAgIC5tYXAoZnVuY3Rpb24gKGVudHJ5KSB7XG4gICAgICAgIHJldHVybiBlbnRyeS5zcGxpdCgnPScpO1xuICAgICAgfSkgLy8gWyBbICdhJywgJzUnIF0sIFsgJ2IsICcxJyBdLCBbICdjJywgJzInIF0gXVxuICAgICAgLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgcmV0dXJuIGFbMF0ubG9jYWxlQ29tcGFyZShiWzBdKTtcbiAgICAgIH0pIC8vIFsgJ2E9NScsICdiPTEnLCAnYz0yJyBdXG4gICAgICAubWFwKGZ1bmN0aW9uIChwYWlyKSB7XG4gICAgICAgIHJldHVybiBwYWlyLmpvaW4oJz0nKTtcbiAgICAgIH0pIC8vICdhPTUmYj0xJmM9MidcbiAgICAgIC5qb2luKCcmJyk7XG4gICAgfVxuXG4gICAgdmFyIF9vcHRpb25zJHBhcnNlID0gb3B0aW9ucy5wYXJzZSxcbiAgICAgICAgcGFyc2UgPSBfb3B0aW9ucyRwYXJzZSA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9vcHRpb25zJHBhcnNlO1xuXG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLnBhdGggPT09ICdzdHJpbmcnKSB7XG4gICAgICB2YXIgbWV0aG9kID0gb3B0aW9ucy5tZXRob2QgfHwgJ0dFVCc7XG4gICAgICB2YXIgcGF0aCA9IGdldFN0YWJsZVBhdGgob3B0aW9ucy5wYXRoKTtcblxuICAgICAgaWYgKHBhcnNlICYmICdHRVQnID09PSBtZXRob2QgJiYgcHJlbG9hZGVkRGF0YVtwYXRoXSkge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHByZWxvYWRlZERhdGFbcGF0aF0uYm9keSk7XG4gICAgICB9IGVsc2UgaWYgKCdPUFRJT05TJyA9PT0gbWV0aG9kICYmIHByZWxvYWRlZERhdGFbbWV0aG9kXSAmJiBwcmVsb2FkZWREYXRhW21ldGhvZF1bcGF0aF0pIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShwcmVsb2FkZWREYXRhW21ldGhvZF1bcGF0aF0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBuZXh0KG9wdGlvbnMpO1xuICB9O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlUHJlbG9hZGluZ01pZGRsZXdhcmU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wcmVsb2FkaW5nLmpzLm1hcCIsImZ1bmN0aW9uIGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywga2V5LCBhcmcpIHtcbiAgdHJ5IHtcbiAgICB2YXIgaW5mbyA9IGdlbltrZXldKGFyZyk7XG4gICAgdmFyIHZhbHVlID0gaW5mby52YWx1ZTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZWplY3QoZXJyb3IpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChpbmZvLmRvbmUpIHtcbiAgICByZXNvbHZlKHZhbHVlKTtcbiAgfSBlbHNlIHtcbiAgICBQcm9taXNlLnJlc29sdmUodmFsdWUpLnRoZW4oX25leHQsIF90aHJvdyk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2FzeW5jVG9HZW5lcmF0b3IoZm4pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXMsXG4gICAgICAgIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHZhciBnZW4gPSBmbi5hcHBseShzZWxmLCBhcmdzKTtcblxuICAgICAgZnVuY3Rpb24gX25leHQodmFsdWUpIHtcbiAgICAgICAgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBcIm5leHRcIiwgdmFsdWUpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBfdGhyb3coZXJyKSB7XG4gICAgICAgIGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywgXCJ0aHJvd1wiLCBlcnIpO1xuICAgICAgfVxuXG4gICAgICBfbmV4dCh1bmRlZmluZWQpO1xuICAgIH0pO1xuICB9O1xufSIsIi8qKlxuICogRXh0ZXJuYWwgZGVwZW5kZW5jaWVzXG4gKi9cbmltcG9ydCB7IHBhcnNlLCBzdHJpbmdpZnkgfSBmcm9tICdxcyc7XG52YXIgVVJMX1JFR0VYUCA9IC9eKD86aHR0cHM/Oik/XFwvXFwvXFxTKyQvaTtcbnZhciBFTUFJTF9SRUdFWFAgPSAvXihtYWlsdG86KT9bYS16MC05Ll8lKy1dK0BbYS16MC05XVthLXowLTkuLV0qXFwuW2Etel17Miw2M30kL2k7XG52YXIgVVNBQkxFX0hSRUZfUkVHRVhQID0gL14oPzpbYS16XSs6fCN8XFw/fFxcLnxcXC8pL2k7XG4vKipcbiAqIEB0eXBlZGVmIHt7W2tleTogc3RyaW5nXTogUXVlcnlBcmdQYXJzZWR9fSBRdWVyeUFyZ09iamVjdFxuICovXG5cbi8qKlxuICogQHR5cGVkZWYge3N0cmluZ3xzdHJpbmdbXXxRdWVyeUFyZ09iamVjdH0gUXVlcnlBcmdQYXJzZWRcbiAqL1xuXG4vKipcbiAqIERldGVybWluZXMgd2hldGhlciB0aGUgZ2l2ZW4gc3RyaW5nIGxvb2tzIGxpa2UgYSBVUkwuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybCBUaGUgc3RyaW5nIHRvIHNjcnV0aW5pc2UuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYGpzXG4gKiBjb25zdCBpc1VSTCA9IGlzVVJMKCAnaHR0cHM6Ly93b3JkcHJlc3Mub3JnJyApOyAvLyB0cnVlXG4gKiBgYGBcbiAqXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIG9yIG5vdCBpdCBsb29rcyBsaWtlIGEgVVJMLlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBpc1VSTCh1cmwpIHtcbiAgcmV0dXJuIFVSTF9SRUdFWFAudGVzdCh1cmwpO1xufVxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIGdpdmVuIHN0cmluZyBsb29rcyBsaWtlIGFuIGVtYWlsLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBlbWFpbCBUaGUgc3RyaW5nIHRvIHNjcnV0aW5pc2UuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYGpzXG4gKiBjb25zdCBpc0VtYWlsID0gaXNFbWFpbCggJ2hlbGxvQHdvcmRwcmVzcy5vcmcnICk7IC8vIHRydWVcbiAqIGBgYFxuICpcbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgb3Igbm90IGl0IGxvb2tzIGxpa2UgYW4gZW1haWwuXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGlzRW1haWwoZW1haWwpIHtcbiAgcmV0dXJuIEVNQUlMX1JFR0VYUC50ZXN0KGVtYWlsKTtcbn1cbi8qKlxuICogUmV0dXJucyB0aGUgcHJvdG9jb2wgcGFydCBvZiB0aGUgVVJMLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIGZ1bGwgVVJMLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBqc1xuICogY29uc3QgcHJvdG9jb2wxID0gZ2V0UHJvdG9jb2woICd0ZWw6MDEyMzQ1Njc4JyApOyAvLyAndGVsOidcbiAqIGNvbnN0IHByb3RvY29sMiA9IGdldFByb3RvY29sKCAnaHR0cHM6Ly93b3JkcHJlc3Mub3JnJyApOyAvLyAnaHR0cHM6J1xuICogYGBgXG4gKlxuICogQHJldHVybiB7c3RyaW5nfHZvaWR9IFRoZSBwcm90b2NvbCBwYXJ0IG9mIHRoZSBVUkwuXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFByb3RvY29sKHVybCkge1xuICB2YXIgbWF0Y2hlcyA9IC9eKFteXFxzOl0rOikvLmV4ZWModXJsKTtcblxuICBpZiAobWF0Y2hlcykge1xuICAgIHJldHVybiBtYXRjaGVzWzFdO1xuICB9XG59XG4vKipcbiAqIFRlc3RzIGlmIGEgdXJsIHByb3RvY29sIGlzIHZhbGlkLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBwcm90b2NvbCBUaGUgdXJsIHByb3RvY29sLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBqc1xuICogY29uc3QgaXNWYWxpZCA9IGlzVmFsaWRQcm90b2NvbCggJ2h0dHBzOicgKTsgLy8gdHJ1ZVxuICogY29uc3QgaXNOb3RWYWxpZCA9IGlzVmFsaWRQcm90b2NvbCggJ2h0dHBzIDonICk7IC8vIGZhbHNlXG4gKiBgYGBcbiAqXG4gKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHRoZSBhcmd1bWVudCBpcyBhIHZhbGlkIHByb3RvY29sIChlLmcuIGh0dHA6LCB0ZWw6KS5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gaXNWYWxpZFByb3RvY29sKHByb3RvY29sKSB7XG4gIGlmICghcHJvdG9jb2wpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gL15bYS16XFwtLlxcK10rWzAtOV0qOiQvaS50ZXN0KHByb3RvY29sKTtcbn1cbi8qKlxuICogUmV0dXJucyB0aGUgYXV0aG9yaXR5IHBhcnQgb2YgdGhlIFVSTC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIFRoZSBmdWxsIFVSTC5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBganNcbiAqIGNvbnN0IGF1dGhvcml0eTEgPSBnZXRBdXRob3JpdHkoICdodHRwczovL3dvcmRwcmVzcy5vcmcvaGVscC8nICk7IC8vICd3b3JkcHJlc3Mub3JnJ1xuICogY29uc3QgYXV0aG9yaXR5MiA9IGdldEF1dGhvcml0eSggJ2h0dHBzOi8vbG9jYWxob3N0OjgwODAvdGVzdC8nICk7IC8vICdsb2NhbGhvc3Q6ODA4MCdcbiAqIGBgYFxuICpcbiAqIEByZXR1cm4ge3N0cmluZ3x2b2lkfSBUaGUgYXV0aG9yaXR5IHBhcnQgb2YgdGhlIFVSTC5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0QXV0aG9yaXR5KHVybCkge1xuICB2YXIgbWF0Y2hlcyA9IC9eW15cXC9cXHM6XSs6KD86XFwvXFwvKT9cXC8/KFteXFwvXFxzIz9dKylbXFwvIz9dezAsMX1cXFMqJC8uZXhlYyh1cmwpO1xuXG4gIGlmIChtYXRjaGVzKSB7XG4gICAgcmV0dXJuIG1hdGNoZXNbMV07XG4gIH1cbn1cbi8qKlxuICogQ2hlY2tzIGZvciBpbnZhbGlkIGNoYXJhY3RlcnMgd2l0aGluIHRoZSBwcm92aWRlZCBhdXRob3JpdHkuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGF1dGhvcml0eSBBIHN0cmluZyBjb250YWluaW5nIHRoZSBVUkwgYXV0aG9yaXR5LlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBqc1xuICogY29uc3QgaXNWYWxpZCA9IGlzVmFsaWRBdXRob3JpdHkoICd3b3JkcHJlc3Mub3JnJyApOyAvLyB0cnVlXG4gKiBjb25zdCBpc05vdFZhbGlkID0gaXNWYWxpZEF1dGhvcml0eSggJ3dvcmRwcmVzcyNvcmcnICk7IC8vIGZhbHNlXG4gKiBgYGBcbiAqXG4gKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHRoZSBhcmd1bWVudCBjb250YWlucyBhIHZhbGlkIGF1dGhvcml0eS5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gaXNWYWxpZEF1dGhvcml0eShhdXRob3JpdHkpIHtcbiAgaWYgKCFhdXRob3JpdHkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gL15bXlxccyM/XSskLy50ZXN0KGF1dGhvcml0eSk7XG59XG4vKipcbiAqIFJldHVybnMgdGhlIHBhdGggcGFydCBvZiB0aGUgVVJMLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIGZ1bGwgVVJMLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBqc1xuICogY29uc3QgcGF0aDEgPSBnZXRQYXRoKCAnaHR0cDovL2xvY2FsaG9zdDo4MDgwL3RoaXMvaXMvYS90ZXN0P3F1ZXJ5PXRydWUnICk7IC8vICd0aGlzL2lzL2EvdGVzdCdcbiAqIGNvbnN0IHBhdGgyID0gZ2V0UGF0aCggJ2h0dHBzOi8vd29yZHByZXNzLm9yZy9oZWxwL2ZhcS8nICk7IC8vICdoZWxwL2ZhcSdcbiAqIGBgYFxuICpcbiAqIEByZXR1cm4ge3N0cmluZ3x2b2lkfSBUaGUgcGF0aCBwYXJ0IG9mIHRoZSBVUkwuXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFBhdGgodXJsKSB7XG4gIHZhciBtYXRjaGVzID0gL15bXlxcL1xcczpdKzooPzpcXC9cXC8pP1teXFwvXFxzIz9dK1tcXC9dKFteXFxzIz9dKylbIz9dezAsMX1cXFMqJC8uZXhlYyh1cmwpO1xuXG4gIGlmIChtYXRjaGVzKSB7XG4gICAgcmV0dXJuIG1hdGNoZXNbMV07XG4gIH1cbn1cbi8qKlxuICogQ2hlY2tzIGZvciBpbnZhbGlkIGNoYXJhY3RlcnMgd2l0aGluIHRoZSBwcm92aWRlZCBwYXRoLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIFRoZSBVUkwgcGF0aC5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBganNcbiAqIGNvbnN0IGlzVmFsaWQgPSBpc1ZhbGlkUGF0aCggJ3Rlc3QvcGF0aC8nICk7IC8vIHRydWVcbiAqIGNvbnN0IGlzTm90VmFsaWQgPSBpc1ZhbGlkUGF0aCggJy9pbnZhbGlkP3Rlc3QvcGF0aC8nICk7IC8vIGZhbHNlXG4gKiBgYGBcbiAqXG4gKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHRoZSBhcmd1bWVudCBjb250YWlucyBhIHZhbGlkIHBhdGhcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gaXNWYWxpZFBhdGgocGF0aCkge1xuICBpZiAoIXBhdGgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gL15bXlxccyM/XSskLy50ZXN0KHBhdGgpO1xufVxuLyoqXG4gKiBSZXR1cm5zIHRoZSBxdWVyeSBzdHJpbmcgcGFydCBvZiB0aGUgVVJMLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIGZ1bGwgVVJMLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBqc1xuICogY29uc3QgcXVlcnlTdHJpbmcxID0gZ2V0UXVlcnlTdHJpbmcoICdodHRwOi8vbG9jYWxob3N0OjgwODAvdGhpcy9pcy9hL3Rlc3Q/cXVlcnk9dHJ1ZSNmcmFnbWVudCcgKTsgLy8gJ3F1ZXJ5PXRydWUnXG4gKiBjb25zdCBxdWVyeVN0cmluZzIgPSBnZXRRdWVyeVN0cmluZyggJ2h0dHBzOi8vd29yZHByZXNzLm9yZyNmcmFnbWVudD9xdWVyeT1mYWxzZSZzZWFyY2g9aGVsbG8nICk7IC8vICdxdWVyeT1mYWxzZSZzZWFyY2g9aGVsbG8nXG4gKiBgYGBcbiAqXG4gKiBAcmV0dXJuIHtzdHJpbmd8dm9pZH0gVGhlIHF1ZXJ5IHN0cmluZyBwYXJ0IG9mIHRoZSBVUkwuXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFF1ZXJ5U3RyaW5nKHVybCkge1xuICB2YXIgbWF0Y2hlcyA9IC9eXFxTKz9cXD8oW15cXHMjXSspLy5leGVjKHVybCk7XG5cbiAgaWYgKG1hdGNoZXMpIHtcbiAgICByZXR1cm4gbWF0Y2hlc1sxXTtcbiAgfVxufVxuLyoqXG4gKiBDaGVja3MgZm9yIGludmFsaWQgY2hhcmFjdGVycyB3aXRoaW4gdGhlIHByb3ZpZGVkIHF1ZXJ5IHN0cmluZy5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gcXVlcnlTdHJpbmcgVGhlIHF1ZXJ5IHN0cmluZy5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBganNcbiAqIGNvbnN0IGlzVmFsaWQgPSBpc1ZhbGlkUXVlcnlTdHJpbmcoICdxdWVyeT10cnVlJmFub3RoZXI9ZmFsc2UnICk7IC8vIHRydWVcbiAqIGNvbnN0IGlzTm90VmFsaWQgPSBpc1ZhbGlkUXVlcnlTdHJpbmcoICdxdWVyeT10cnVlP2Fub3RoZXI9ZmFsc2UnICk7IC8vIGZhbHNlXG4gKiBgYGBcbiAqXG4gKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHRoZSBhcmd1bWVudCBjb250YWlucyBhIHZhbGlkIHF1ZXJ5IHN0cmluZy5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gaXNWYWxpZFF1ZXJ5U3RyaW5nKHF1ZXJ5U3RyaW5nKSB7XG4gIGlmICghcXVlcnlTdHJpbmcpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gL15bXlxccyM/XFwvXSskLy50ZXN0KHF1ZXJ5U3RyaW5nKTtcbn1cbi8qKlxuICogUmV0dXJucyB0aGUgZnJhZ21lbnQgcGFydCBvZiB0aGUgVVJMLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIGZ1bGwgVVJMXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYGpzXG4gKiBjb25zdCBmcmFnbWVudDEgPSBnZXRGcmFnbWVudCggJ2h0dHA6Ly9sb2NhbGhvc3Q6ODA4MC90aGlzL2lzL2EvdGVzdD9xdWVyeT10cnVlI2ZyYWdtZW50JyApOyAvLyAnI2ZyYWdtZW50J1xuICogY29uc3QgZnJhZ21lbnQyID0gZ2V0RnJhZ21lbnQoICdodHRwczovL3dvcmRwcmVzcy5vcmcjYW5vdGhlci1mcmFnbWVudD9xdWVyeT10cnVlJyApOyAvLyAnI2Fub3RoZXItZnJhZ21lbnQnXG4gKiBgYGBcbiAqXG4gKiBAcmV0dXJuIHtzdHJpbmd8dm9pZH0gVGhlIGZyYWdtZW50IHBhcnQgb2YgdGhlIFVSTC5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0RnJhZ21lbnQodXJsKSB7XG4gIHZhciBtYXRjaGVzID0gL15cXFMrPygjW15cXHNcXD9dKikvLmV4ZWModXJsKTtcblxuICBpZiAobWF0Y2hlcykge1xuICAgIHJldHVybiBtYXRjaGVzWzFdO1xuICB9XG59XG4vKipcbiAqIENoZWNrcyBmb3IgaW52YWxpZCBjaGFyYWN0ZXJzIHdpdGhpbiB0aGUgcHJvdmlkZWQgZnJhZ21lbnQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGZyYWdtZW50IFRoZSB1cmwgZnJhZ21lbnQuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYGpzXG4gKiBjb25zdCBpc1ZhbGlkID0gaXNWYWxpZEZyYWdtZW50KCAnI3ZhbGlkLWZyYWdtZW50JyApOyAvLyB0cnVlXG4gKiBjb25zdCBpc05vdFZhbGlkID0gaXNWYWxpZEZyYWdtZW50KCAnI2ludmFsaWQtI2ZyYWdtZW50JyApOyAvLyBmYWxzZVxuICogYGBgXG4gKlxuICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgYXJndW1lbnQgY29udGFpbnMgYSB2YWxpZCBmcmFnbWVudC5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gaXNWYWxpZEZyYWdtZW50KGZyYWdtZW50KSB7XG4gIGlmICghZnJhZ21lbnQpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gL14jW15cXHMjP1xcL10qJC8udGVzdChmcmFnbWVudCk7XG59XG4vKipcbiAqIEFwcGVuZHMgYXJndW1lbnRzIGFzIHF1ZXJ5c3RyaW5nIHRvIHRoZSBwcm92aWRlZCBVUkwuIElmIHRoZSBVUkwgYWxyZWFkeVxuICogaW5jbHVkZXMgcXVlcnkgYXJndW1lbnRzLCB0aGUgYXJndW1lbnRzIGFyZSBtZXJnZWQgd2l0aCAoYW5kIHRha2UgcHJlY2VkZW50XG4gKiBvdmVyKSB0aGUgZXhpc3Rpbmcgc2V0LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBbdXJsPScnXSAgVVJMIHRvIHdoaWNoIGFyZ3VtZW50cyBzaG91bGQgYmUgYXBwZW5kZWQuIElmIG9taXR0ZWQsXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgIG9ubHkgdGhlIHJlc3VsdGluZyBxdWVyeXN0cmluZyBpcyByZXR1cm5lZC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBhcmdzICAgICAgUXVlcnkgYXJndW1lbnRzIHRvIGFwcGx5IHRvIFVSTC5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBganNcbiAqIGNvbnN0IG5ld1VSTCA9IGFkZFF1ZXJ5QXJncyggJ2h0dHBzOi8vZ29vZ2xlLmNvbScsIHsgcTogJ3Rlc3QnIH0gKTsgLy8gaHR0cHM6Ly9nb29nbGUuY29tLz9xPXRlc3RcbiAqIGBgYFxuICpcbiAqIEByZXR1cm4ge3N0cmluZ30gVVJMIHdpdGggYXJndW1lbnRzIGFwcGxpZWQuXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGFkZFF1ZXJ5QXJncygpIHtcbiAgdmFyIHVybCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogJyc7XG4gIHZhciBhcmdzID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7XG5cbiAgLy8gSWYgbm8gYXJndW1lbnRzIGFyZSB0byBiZSBhcHBlbmRlZCwgcmV0dXJuIG9yaWdpbmFsIFVSTC5cbiAgaWYgKCFhcmdzIHx8ICFPYmplY3Qua2V5cyhhcmdzKS5sZW5ndGgpIHtcbiAgICByZXR1cm4gdXJsO1xuICB9XG5cbiAgdmFyIGJhc2VVcmwgPSB1cmw7IC8vIERldGVybWluZSB3aGV0aGVyIFVSTCBhbHJlYWR5IGhhZCBxdWVyeSBhcmd1bWVudHMuXG5cbiAgdmFyIHF1ZXJ5U3RyaW5nSW5kZXggPSB1cmwuaW5kZXhPZignPycpO1xuXG4gIGlmIChxdWVyeVN0cmluZ0luZGV4ICE9PSAtMSkge1xuICAgIC8vIE1lcmdlIGludG8gZXhpc3RpbmcgcXVlcnkgYXJndW1lbnRzLlxuICAgIGFyZ3MgPSBPYmplY3QuYXNzaWduKHBhcnNlKHVybC5zdWJzdHIocXVlcnlTdHJpbmdJbmRleCArIDEpKSwgYXJncyk7IC8vIENoYW5nZSB3b3JraW5nIGJhc2UgVVJMIHRvIG9taXQgcHJldmlvdXMgcXVlcnkgYXJndW1lbnRzLlxuXG4gICAgYmFzZVVybCA9IGJhc2VVcmwuc3Vic3RyKDAsIHF1ZXJ5U3RyaW5nSW5kZXgpO1xuICB9XG5cbiAgcmV0dXJuIGJhc2VVcmwgKyAnPycgKyBzdHJpbmdpZnkoYXJncyk7XG59XG4vKipcbiAqIFJldHVybnMgYSBzaW5nbGUgcXVlcnkgYXJndW1lbnQgb2YgdGhlIHVybFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVVJMLlxuICogQHBhcmFtIHtzdHJpbmd9IGFyZyBRdWVyeSBhcmcgbmFtZS5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBganNcbiAqIGNvbnN0IGZvbyA9IGdldFF1ZXJ5QXJnKCAnaHR0cHM6Ly93b3JkcHJlc3Mub3JnP2Zvbz1iYXImYmFyPWJheicsICdmb28nICk7IC8vIGJhclxuICogYGBgXG4gKlxuICogQHJldHVybiB7UXVlcnlBcmdQYXJzZWR8dW5kZWZpbmVkfSBRdWVyeSBhcmcgdmFsdWUuXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFF1ZXJ5QXJnKHVybCwgYXJnKSB7XG4gIHZhciBxdWVyeVN0cmluZ0luZGV4ID0gdXJsLmluZGV4T2YoJz8nKTtcbiAgdmFyIHF1ZXJ5ID0gcXVlcnlTdHJpbmdJbmRleCAhPT0gLTEgPyBwYXJzZSh1cmwuc3Vic3RyKHF1ZXJ5U3RyaW5nSW5kZXggKyAxKSkgOiB7fTtcbiAgcmV0dXJuIHF1ZXJ5W2FyZ107XG59XG4vKipcbiAqIERldGVybWluZXMgd2hldGhlciB0aGUgVVJMIGNvbnRhaW5zIGEgZ2l2ZW4gcXVlcnkgYXJnLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVVJMLlxuICogQHBhcmFtIHtzdHJpbmd9IGFyZyBRdWVyeSBhcmcgbmFtZS5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBganNcbiAqIGNvbnN0IGhhc0JhciA9IGhhc1F1ZXJ5QXJnKCAnaHR0cHM6Ly93b3JkcHJlc3Mub3JnP2Zvbz1iYXImYmFyPWJheicsICdiYXInICk7IC8vIHRydWVcbiAqIGBgYFxuICpcbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgb3Igbm90IHRoZSBVUkwgY29udGFpbnMgdGhlIHF1ZXJ5IGFyZy5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gaGFzUXVlcnlBcmcodXJsLCBhcmcpIHtcbiAgcmV0dXJuIGdldFF1ZXJ5QXJnKHVybCwgYXJnKSAhPT0gdW5kZWZpbmVkO1xufVxuLyoqXG4gKiBSZW1vdmVzIGFyZ3VtZW50cyBmcm9tIHRoZSBxdWVyeSBzdHJpbmcgb2YgdGhlIHVybFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSAgICB1cmwgIFVSTC5cbiAqIEBwYXJhbSB7Li4uc3RyaW5nfSBhcmdzIFF1ZXJ5IEFyZ3MuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYGpzXG4gKiBjb25zdCBuZXdVcmwgPSByZW1vdmVRdWVyeUFyZ3MoICdodHRwczovL3dvcmRwcmVzcy5vcmc/Zm9vPWJhciZiYXI9YmF6JmJhej1mb29iYXInLCAnZm9vJywgJ2JhcicgKTsgLy8gaHR0cHM6Ly93b3JkcHJlc3Mub3JnP2Jhej1mb29iYXJcbiAqIGBgYFxuICpcbiAqIEByZXR1cm4ge3N0cmluZ30gVXBkYXRlZCBVUkwuXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZVF1ZXJ5QXJncyh1cmwpIHtcbiAgdmFyIHF1ZXJ5U3RyaW5nSW5kZXggPSB1cmwuaW5kZXhPZignPycpO1xuICB2YXIgcXVlcnkgPSBxdWVyeVN0cmluZ0luZGV4ICE9PSAtMSA/IHBhcnNlKHVybC5zdWJzdHIocXVlcnlTdHJpbmdJbmRleCArIDEpKSA6IHt9O1xuICB2YXIgYmFzZVVybCA9IHF1ZXJ5U3RyaW5nSW5kZXggIT09IC0xID8gdXJsLnN1YnN0cigwLCBxdWVyeVN0cmluZ0luZGV4KSA6IHVybDtcblxuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgYXJnc1tfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICBhcmdzLmZvckVhY2goZnVuY3Rpb24gKGFyZykge1xuICAgIHJldHVybiBkZWxldGUgcXVlcnlbYXJnXTtcbiAgfSk7XG4gIHJldHVybiBiYXNlVXJsICsgJz8nICsgc3RyaW5naWZ5KHF1ZXJ5KTtcbn1cbi8qKlxuICogUHJlcGVuZHMgXCJodHRwOi8vXCIgdG8gYSB1cmwsIGlmIGl0IGxvb2tzIGxpa2Ugc29tZXRoaW5nIHRoYXQgaXMgbWVhbnQgdG8gYmUgYSBUTEQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybCBUaGUgVVJMIHRvIHRlc3QuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYGpzXG4gKiBjb25zdCBhY3R1YWxVUkwgPSBwcmVwZW5kSFRUUCggJ3dvcmRwcmVzcy5vcmcnICk7IC8vIGh0dHA6Ly93b3JkcHJlc3Mub3JnXG4gKiBgYGBcbiAqXG4gKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSB1cGRhdGVkIFVSTC5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gcHJlcGVuZEhUVFAodXJsKSB7XG4gIHVybCA9IHVybC50cmltKCk7XG5cbiAgaWYgKCFVU0FCTEVfSFJFRl9SRUdFWFAudGVzdCh1cmwpICYmICFFTUFJTF9SRUdFWFAudGVzdCh1cmwpKSB7XG4gICAgcmV0dXJuICdodHRwOi8vJyArIHVybDtcbiAgfVxuXG4gIHJldHVybiB1cmw7XG59XG4vKipcbiAqIFNhZmVseSBkZWNvZGVzIGEgVVJJIHdpdGggYGRlY29kZVVSSWAuIFJldHVybnMgdGhlIFVSSSB1bm1vZGlmaWVkIGlmXG4gKiBgZGVjb2RlVVJJYCB0aHJvd3MgYW4gZXJyb3IuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVyaSBVUkkgdG8gZGVjb2RlLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBqc1xuICogY29uc3QgYmFkVXJpID0gc2FmZURlY29kZVVSSSggJyV6JyApOyAvLyBkb2VzIG5vdCB0aHJvdyBhbiBFcnJvciwgc2ltcGx5IHJldHVybnMgJyV6J1xuICogYGBgXG4gKlxuICogQHJldHVybiB7c3RyaW5nfSBEZWNvZGVkIFVSSSBpZiBwb3NzaWJsZS5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gc2FmZURlY29kZVVSSSh1cmkpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZGVjb2RlVVJJKHVyaSk7XG4gIH0gY2F0Y2ggKHVyaUVycm9yKSB7XG4gICAgcmV0dXJuIHVyaTtcbiAgfVxufVxuLyoqXG4gKiBSZXR1cm5zIGEgVVJMIGZvciBkaXNwbGF5LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgT3JpZ2luYWwgVVJMLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBqc1xuICogY29uc3QgZGlzcGxheVVybCA9IGZpbHRlclVSTEZvckRpc3BsYXkoICdodHRwczovL3d3dy53b3JkcHJlc3Mub3JnL2d1dGVuYmVyZy8nICk7IC8vIHdvcmRwcmVzcy5vcmcvZ3V0ZW5iZXJnXG4gKiBgYGBcbiAqXG4gKiBAcmV0dXJuIHtzdHJpbmd9IERpc3BsYXllZCBVUkwuXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGZpbHRlclVSTEZvckRpc3BsYXkodXJsKSB7XG4gIC8vIFJlbW92ZSBwcm90b2NvbCBhbmQgd3d3IHByZWZpeGVzLlxuICB2YXIgZmlsdGVyZWRVUkwgPSB1cmwucmVwbGFjZSgvXig/Omh0dHBzPzopXFwvXFwvKD86d3d3XFwuKT8vLCAnJyk7IC8vIEVuZHMgd2l0aCAvIGFuZCBvbmx5IGhhcyB0aGF0IHNpbmdsZSBzbGFzaCwgc3RyaXAgaXQuXG5cbiAgaWYgKGZpbHRlcmVkVVJMLm1hdGNoKC9eW15cXC9dK1xcLyQvKSkge1xuICAgIHJldHVybiBmaWx0ZXJlZFVSTC5yZXBsYWNlKCcvJywgJycpO1xuICB9XG5cbiAgcmV0dXJuIGZpbHRlcmVkVVJMO1xufVxuLyoqXG4gKiBTYWZlbHkgZGVjb2RlcyBhIFVSSSBjb21wb25lbnQgd2l0aCBgZGVjb2RlVVJJQ29tcG9uZW50YC4gUmV0dXJucyB0aGUgVVJJIGNvbXBvbmVudCB1bm1vZGlmaWVkIGlmXG4gKiBgZGVjb2RlVVJJQ29tcG9uZW50YCB0aHJvd3MgYW4gZXJyb3IuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVyaUNvbXBvbmVudCBVUkkgY29tcG9uZW50IHRvIGRlY29kZS5cbiAqXG4gKiBAcmV0dXJuIHtzdHJpbmd9IERlY29kZWQgVVJJIGNvbXBvbmVudCBpZiBwb3NzaWJsZS5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gc2FmZURlY29kZVVSSUNvbXBvbmVudCh1cmlDb21wb25lbnQpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KHVyaUNvbXBvbmVudCk7XG4gIH0gY2F0Y2ggKHVyaUNvbXBvbmVudEVycm9yKSB7XG4gICAgcmV0dXJuIHVyaUNvbXBvbmVudDtcbiAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIiwiaW1wb3J0IF9yZWdlbmVyYXRvclJ1bnRpbWUgZnJvbSBcIkBiYWJlbC9ydW50aW1lL3JlZ2VuZXJhdG9yXCI7XG5pbXBvcnQgX2FzeW5jVG9HZW5lcmF0b3IgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FzeW5jVG9HZW5lcmF0b3JcIjtcbmltcG9ydCBfb2JqZWN0U3ByZWFkIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RTcHJlYWRcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5cbi8qKlxuICogV29yZFByZXNzIGRlcGVuZGVuY2llc1xuICovXG5pbXBvcnQgeyBhZGRRdWVyeUFyZ3MgfSBmcm9tICdAd29yZHByZXNzL3VybCc7IC8vIEFwcGx5IHF1ZXJ5IGFyZ3VtZW50cyB0byBib3RoIFVSTCBhbmQgUGF0aCwgd2hpY2hldmVyIGlzIHByZXNlbnQuXG5cbnZhciBtb2RpZnlRdWVyeSA9IGZ1bmN0aW9uIG1vZGlmeVF1ZXJ5KF9yZWYsIHF1ZXJ5QXJncykge1xuICB2YXIgcGF0aCA9IF9yZWYucGF0aCxcbiAgICAgIHVybCA9IF9yZWYudXJsLFxuICAgICAgb3B0aW9ucyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcmVmLCBbXCJwYXRoXCIsIFwidXJsXCJdKTtcblxuICByZXR1cm4gX29iamVjdFNwcmVhZCh7fSwgb3B0aW9ucywge1xuICAgIHVybDogdXJsICYmIGFkZFF1ZXJ5QXJncyh1cmwsIHF1ZXJ5QXJncyksXG4gICAgcGF0aDogcGF0aCAmJiBhZGRRdWVyeUFyZ3MocGF0aCwgcXVlcnlBcmdzKVxuICB9KTtcbn07IC8vIER1cGxpY2F0ZXMgcGFyc2luZyBmdW5jdGlvbmFsaXR5IGZyb20gYXBpRmV0Y2guXG5cblxudmFyIHBhcnNlUmVzcG9uc2UgPSBmdW5jdGlvbiBwYXJzZVJlc3BvbnNlKHJlc3BvbnNlKSB7XG4gIHJldHVybiByZXNwb25zZS5qc29uID8gcmVzcG9uc2UuanNvbigpIDogUHJvbWlzZS5yZWplY3QocmVzcG9uc2UpO1xufTtcblxudmFyIHBhcnNlTGlua0hlYWRlciA9IGZ1bmN0aW9uIHBhcnNlTGlua0hlYWRlcihsaW5rSGVhZGVyKSB7XG4gIGlmICghbGlua0hlYWRlcikge1xuICAgIHJldHVybiB7fTtcbiAgfVxuXG4gIHZhciBtYXRjaCA9IGxpbmtIZWFkZXIubWF0Y2goLzwoW14+XSspPjsgcmVsPVwibmV4dFwiLyk7XG4gIHJldHVybiBtYXRjaCA/IHtcbiAgICBuZXh0OiBtYXRjaFsxXVxuICB9IDoge307XG59O1xuXG52YXIgZ2V0TmV4dFBhZ2VVcmwgPSBmdW5jdGlvbiBnZXROZXh0UGFnZVVybChyZXNwb25zZSkge1xuICB2YXIgX3BhcnNlTGlua0hlYWRlciA9IHBhcnNlTGlua0hlYWRlcihyZXNwb25zZS5oZWFkZXJzLmdldCgnbGluaycpKSxcbiAgICAgIG5leHQgPSBfcGFyc2VMaW5rSGVhZGVyLm5leHQ7XG5cbiAgcmV0dXJuIG5leHQ7XG59O1xuXG52YXIgcmVxdWVzdENvbnRhaW5zVW5ib3VuZGVkUXVlcnkgPSBmdW5jdGlvbiByZXF1ZXN0Q29udGFpbnNVbmJvdW5kZWRRdWVyeShvcHRpb25zKSB7XG4gIHZhciBwYXRoSXNVbmJvdW5kZWQgPSBvcHRpb25zLnBhdGggJiYgb3B0aW9ucy5wYXRoLmluZGV4T2YoJ3Blcl9wYWdlPS0xJykgIT09IC0xO1xuICB2YXIgdXJsSXNVbmJvdW5kZWQgPSBvcHRpb25zLnVybCAmJiBvcHRpb25zLnVybC5pbmRleE9mKCdwZXJfcGFnZT0tMScpICE9PSAtMTtcbiAgcmV0dXJuIHBhdGhJc1VuYm91bmRlZCB8fCB1cmxJc1VuYm91bmRlZDtcbn07IC8vIFRoZSBSRVNUIEFQSSBlbmZvcmNlcyBhbiB1cHBlciBsaW1pdCBvbiB0aGUgcGVyX3BhZ2Ugb3B0aW9uLiBUbyBoYW5kbGUgbGFyZ2Vcbi8vIGNvbGxlY3Rpb25zLCBhcGlGZXRjaCBjb25zdW1lcnMgY2FuIHBhc3MgYHBlcl9wYWdlPS0xYDsgdGhpcyBtaWRkbGV3YXJlIHdpbGxcbi8vIHRoZW4gcmVjdXJzaXZlbHkgYXNzZW1ibGUgYSBmdWxsIHJlc3BvbnNlIGFycmF5IGZyb20gYWxsIGF2YWlsYWJsZSBwYWdlcy5cblxuXG52YXIgZmV0Y2hBbGxNaWRkbGV3YXJlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgdmFyIF9yZWYyID0gX2FzeW5jVG9HZW5lcmF0b3IoXG4gIC8qI19fUFVSRV9fKi9cbiAgX3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUob3B0aW9ucywgbmV4dCkge1xuICAgIHZhciByZXNwb25zZSwgcmVzdWx0cywgbmV4dFBhZ2UsIG1lcmdlZFJlc3VsdHMsIG5leHRSZXNwb25zZSwgbmV4dFJlc3VsdHM7XG4gICAgcmV0dXJuIF9yZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkge1xuICAgICAgd2hpbGUgKDEpIHtcbiAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkge1xuICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgIGlmICghKG9wdGlvbnMucGFyc2UgPT09IGZhbHNlKSkge1xuICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMjtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoXCJyZXR1cm5cIiwgbmV4dChvcHRpb25zKSk7XG5cbiAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICBpZiAocmVxdWVzdENvbnRhaW5zVW5ib3VuZGVkUXVlcnkob3B0aW9ucykpIHtcbiAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDQ7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KFwicmV0dXJuXCIsIG5leHQob3B0aW9ucykpO1xuXG4gICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDY7XG4gICAgICAgICAgICByZXR1cm4gbmV4dChfb2JqZWN0U3ByZWFkKHt9LCBtb2RpZnlRdWVyeShvcHRpb25zLCB7XG4gICAgICAgICAgICAgIHBlcl9wYWdlOiAxMDBcbiAgICAgICAgICAgIH0pLCB7XG4gICAgICAgICAgICAgIC8vIEVuc3VyZSBoZWFkZXJzIGFyZSByZXR1cm5lZCBmb3IgcGFnZSAxLlxuICAgICAgICAgICAgICBwYXJzZTogZmFsc2VcbiAgICAgICAgICAgIH0pKTtcblxuICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgIHJlc3BvbnNlID0gX2NvbnRleHQuc2VudDtcbiAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA5O1xuICAgICAgICAgICAgcmV0dXJuIHBhcnNlUmVzcG9uc2UocmVzcG9uc2UpO1xuXG4gICAgICAgICAgY2FzZSA5OlxuICAgICAgICAgICAgcmVzdWx0cyA9IF9jb250ZXh0LnNlbnQ7XG5cbiAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHJlc3VsdHMpKSB7XG4gICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAxMjtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoXCJyZXR1cm5cIiwgcmVzdWx0cyk7XG5cbiAgICAgICAgICBjYXNlIDEyOlxuICAgICAgICAgICAgbmV4dFBhZ2UgPSBnZXROZXh0UGFnZVVybChyZXNwb25zZSk7XG5cbiAgICAgICAgICAgIGlmIChuZXh0UGFnZSkge1xuICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMTU7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KFwicmV0dXJuXCIsIHJlc3VsdHMpO1xuXG4gICAgICAgICAgY2FzZSAxNTpcbiAgICAgICAgICAgIC8vIEl0ZXJhdGl2ZWx5IGZldGNoIGFsbCByZW1haW5pbmcgcGFnZXMgdW50aWwgbm8gXCJuZXh0XCIgaGVhZGVyIGlzIGZvdW5kLlxuICAgICAgICAgICAgbWVyZ2VkUmVzdWx0cyA9IFtdLmNvbmNhdChyZXN1bHRzKTtcblxuICAgICAgICAgIGNhc2UgMTY6XG4gICAgICAgICAgICBpZiAoIW5leHRQYWdlKSB7XG4gICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAyNztcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAxOTtcbiAgICAgICAgICAgIHJldHVybiBuZXh0KF9vYmplY3RTcHJlYWQoe30sIG9wdGlvbnMsIHtcbiAgICAgICAgICAgICAgLy8gRW5zdXJlIHRoZSBVUkwgZm9yIHRoZSBuZXh0IHBhZ2UgaXMgdXNlZCBpbnN0ZWFkIG9mIGFueSBwcm92aWRlZCBwYXRoLlxuICAgICAgICAgICAgICBwYXRoOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgIHVybDogbmV4dFBhZ2UsXG4gICAgICAgICAgICAgIC8vIEVuc3VyZSB3ZSBzdGlsbCBnZXQgaGVhZGVycyBzbyB3ZSBjYW4gaWRlbnRpZnkgdGhlIG5leHQgcGFnZS5cbiAgICAgICAgICAgICAgcGFyc2U6IGZhbHNlXG4gICAgICAgICAgICB9KSk7XG5cbiAgICAgICAgICBjYXNlIDE5OlxuICAgICAgICAgICAgbmV4dFJlc3BvbnNlID0gX2NvbnRleHQuc2VudDtcbiAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAyMjtcbiAgICAgICAgICAgIHJldHVybiBwYXJzZVJlc3BvbnNlKG5leHRSZXNwb25zZSk7XG5cbiAgICAgICAgICBjYXNlIDIyOlxuICAgICAgICAgICAgbmV4dFJlc3VsdHMgPSBfY29udGV4dC5zZW50O1xuICAgICAgICAgICAgbWVyZ2VkUmVzdWx0cyA9IG1lcmdlZFJlc3VsdHMuY29uY2F0KG5leHRSZXN1bHRzKTtcbiAgICAgICAgICAgIG5leHRQYWdlID0gZ2V0TmV4dFBhZ2VVcmwobmV4dFJlc3BvbnNlKTtcbiAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAxNjtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAyNzpcbiAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoXCJyZXR1cm5cIiwgbWVyZ2VkUmVzdWx0cyk7XG5cbiAgICAgICAgICBjYXNlIDI4OlxuICAgICAgICAgIGNhc2UgXCJlbmRcIjpcbiAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCBfY2FsbGVlKTtcbiAgfSkpO1xuXG4gIHJldHVybiBmdW5jdGlvbiBmZXRjaEFsbE1pZGRsZXdhcmUoX3gsIF94Mikge1xuICAgIHJldHVybiBfcmVmMi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9O1xufSgpO1xuXG5leHBvcnQgZGVmYXVsdCBmZXRjaEFsbE1pZGRsZXdhcmU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1mZXRjaC1hbGwtbWlkZGxld2FyZS5qcy5tYXAiLCJpbXBvcnQgX29iamVjdFNwcmVhZCBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0U3ByZWFkXCI7XG5cbi8qKlxuICogU2V0IG9mIEhUVFAgbWV0aG9kcyB3aGljaCBhcmUgZWxpZ2libGUgdG8gYmUgb3ZlcnJpZGRlbi5cbiAqXG4gKiBAdHlwZSB7U2V0fVxuICovXG52YXIgT1ZFUlJJREVfTUVUSE9EUyA9IG5ldyBTZXQoWydQQVRDSCcsICdQVVQnLCAnREVMRVRFJ10pO1xuLyoqXG4gKiBEZWZhdWx0IHJlcXVlc3QgbWV0aG9kLlxuICpcbiAqIFwiQSByZXF1ZXN0IGhhcyBhbiBhc3NvY2lhdGVkIG1ldGhvZCAoYSBtZXRob2QpLiBVbmxlc3Mgc3RhdGVkIG90aGVyd2lzZSBpdFxuICogaXMgYEdFVGAuXCJcbiAqXG4gKiBAc2VlICBodHRwczovL2ZldGNoLnNwZWMud2hhdHdnLm9yZy8jcmVxdWVzdHNcbiAqXG4gKiBAdHlwZSB7c3RyaW5nfVxuICovXG5cbnZhciBERUZBVUxUX01FVEhPRCA9ICdHRVQnO1xuLyoqXG4gKiBBUEkgRmV0Y2ggbWlkZGxld2FyZSB3aGljaCBvdmVycmlkZXMgdGhlIHJlcXVlc3QgbWV0aG9kIGZvciBIVFRQIHYxXG4gKiBjb21wYXRpYmlsaXR5IGxldmVyYWdpbmcgdGhlIFJFU1QgQVBJIFgtSFRUUC1NZXRob2QtT3ZlcnJpZGUgaGVhZGVyLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSAgIG9wdGlvbnMgRmV0Y2ggb3B0aW9ucy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IG5leHQgICAgW2Rlc2NyaXB0aW9uXVxuICpcbiAqIEByZXR1cm4geyp9IFRoZSBldmFsdWF0ZWQgcmVzdWx0IG9mIHRoZSByZW1haW5pbmcgbWlkZGxld2FyZSBjaGFpbi5cbiAqL1xuXG5mdW5jdGlvbiBodHRwVjFNaWRkbGV3YXJlKG9wdGlvbnMsIG5leHQpIHtcbiAgdmFyIF9vcHRpb25zID0gb3B0aW9ucyxcbiAgICAgIF9vcHRpb25zJG1ldGhvZCA9IF9vcHRpb25zLm1ldGhvZCxcbiAgICAgIG1ldGhvZCA9IF9vcHRpb25zJG1ldGhvZCA9PT0gdm9pZCAwID8gREVGQVVMVF9NRVRIT0QgOiBfb3B0aW9ucyRtZXRob2Q7XG5cbiAgaWYgKE9WRVJSSURFX01FVEhPRFMuaGFzKG1ldGhvZC50b1VwcGVyQ2FzZSgpKSkge1xuICAgIG9wdGlvbnMgPSBfb2JqZWN0U3ByZWFkKHt9LCBvcHRpb25zLCB7XG4gICAgICBoZWFkZXJzOiBfb2JqZWN0U3ByZWFkKHt9LCBvcHRpb25zLmhlYWRlcnMsIHtcbiAgICAgICAgJ1gtSFRUUC1NZXRob2QtT3ZlcnJpZGUnOiBtZXRob2QsXG4gICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbidcbiAgICAgIH0pLFxuICAgICAgbWV0aG9kOiAnUE9TVCdcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBuZXh0KG9wdGlvbnMsIG5leHQpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBodHRwVjFNaWRkbGV3YXJlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aHR0cC12MS5qcy5tYXAiLCIvKipcbiAqIFdvcmRQcmVzcyBkZXBlbmRlbmNpZXNcbiAqL1xuaW1wb3J0IHsgYWRkUXVlcnlBcmdzLCBoYXNRdWVyeUFyZyB9IGZyb20gJ0B3b3JkcHJlc3MvdXJsJztcblxuZnVuY3Rpb24gdXNlckxvY2FsZU1pZGRsZXdhcmUob3B0aW9ucywgbmV4dCkge1xuICBpZiAodHlwZW9mIG9wdGlvbnMudXJsID09PSAnc3RyaW5nJyAmJiAhaGFzUXVlcnlBcmcob3B0aW9ucy51cmwsICdfbG9jYWxlJykpIHtcbiAgICBvcHRpb25zLnVybCA9IGFkZFF1ZXJ5QXJncyhvcHRpb25zLnVybCwge1xuICAgICAgX2xvY2FsZTogJ3VzZXInXG4gICAgfSk7XG4gIH1cblxuICBpZiAodHlwZW9mIG9wdGlvbnMucGF0aCA9PT0gJ3N0cmluZycgJiYgIWhhc1F1ZXJ5QXJnKG9wdGlvbnMucGF0aCwgJ19sb2NhbGUnKSkge1xuICAgIG9wdGlvbnMucGF0aCA9IGFkZFF1ZXJ5QXJncyhvcHRpb25zLnBhdGgsIHtcbiAgICAgIF9sb2NhbGU6ICd1c2VyJ1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIG5leHQob3B0aW9ucywgbmV4dCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHVzZXJMb2NhbGVNaWRkbGV3YXJlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXNlci1sb2NhbGUuanMubWFwIiwiaW1wb3J0IF9vYmplY3RTcHJlYWQgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFNwcmVhZFwiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcblxuLyoqXG4gKiBXb3JkUHJlc3MgZGVwZW5kZW5jaWVzXG4gKi9cbmltcG9ydCB7IF9fIH0gZnJvbSAnQHdvcmRwcmVzcy9pMThuJztcbi8qKlxuICogSW50ZXJuYWwgZGVwZW5kZW5jaWVzXG4gKi9cblxuaW1wb3J0IGNyZWF0ZU5vbmNlTWlkZGxld2FyZSBmcm9tICcuL21pZGRsZXdhcmVzL25vbmNlJztcbmltcG9ydCBjcmVhdGVSb290VVJMTWlkZGxld2FyZSBmcm9tICcuL21pZGRsZXdhcmVzL3Jvb3QtdXJsJztcbmltcG9ydCBjcmVhdGVQcmVsb2FkaW5nTWlkZGxld2FyZSBmcm9tICcuL21pZGRsZXdhcmVzL3ByZWxvYWRpbmcnO1xuaW1wb3J0IGZldGNoQWxsTWlkZGxld2FyZSBmcm9tICcuL21pZGRsZXdhcmVzL2ZldGNoLWFsbC1taWRkbGV3YXJlJztcbmltcG9ydCBuYW1lc3BhY2VFbmRwb2ludE1pZGRsZXdhcmUgZnJvbSAnLi9taWRkbGV3YXJlcy9uYW1lc3BhY2UtZW5kcG9pbnQnO1xuaW1wb3J0IGh0dHBWMU1pZGRsZXdhcmUgZnJvbSAnLi9taWRkbGV3YXJlcy9odHRwLXYxJztcbmltcG9ydCB1c2VyTG9jYWxlTWlkZGxld2FyZSBmcm9tICcuL21pZGRsZXdhcmVzL3VzZXItbG9jYWxlJztcbi8qKlxuICogRGVmYXVsdCBzZXQgb2YgaGVhZGVyIHZhbHVlcyB3aGljaCBzaG91bGQgYmUgc2VudCB3aXRoIGV2ZXJ5IHJlcXVlc3QgdW5sZXNzXG4gKiBleHBsaWNpdGx5IHByb3ZpZGVkIHRocm91Z2ggYXBpRmV0Y2ggb3B0aW9ucy5cbiAqXG4gKiBAdHlwZSB7T2JqZWN0fVxuICovXG5cbnZhciBERUZBVUxUX0hFQURFUlMgPSB7XG4gIC8vIFRoZSBiYWNrZW5kIHVzZXMgdGhlIEFjY2VwdCBoZWFkZXIgYXMgYSBjb25kaXRpb24gZm9yIGNvbnNpZGVyaW5nIGFuXG4gIC8vIGluY29taW5nIHJlcXVlc3QgYXMgYSBSRVNUIHJlcXVlc3QuXG4gIC8vXG4gIC8vIFNlZTogaHR0cHM6Ly9jb3JlLnRyYWMud29yZHByZXNzLm9yZy90aWNrZXQvNDQ1MzRcbiAgQWNjZXB0OiAnYXBwbGljYXRpb24vanNvbiwgKi8qO3E9MC4xJ1xufTtcbi8qKlxuICogRGVmYXVsdCBzZXQgb2YgZmV0Y2ggb3B0aW9uIHZhbHVlcyB3aGljaCBzaG91bGQgYmUgc2VudCB3aXRoIGV2ZXJ5IHJlcXVlc3RcbiAqIHVubGVzcyBleHBsaWNpdGx5IHByb3ZpZGVkIHRocm91Z2ggYXBpRmV0Y2ggb3B0aW9ucy5cbiAqXG4gKiBAdHlwZSB7T2JqZWN0fVxuICovXG5cbnZhciBERUZBVUxUX09QVElPTlMgPSB7XG4gIGNyZWRlbnRpYWxzOiAnaW5jbHVkZSdcbn07XG52YXIgbWlkZGxld2FyZXMgPSBbdXNlckxvY2FsZU1pZGRsZXdhcmUsIG5hbWVzcGFjZUVuZHBvaW50TWlkZGxld2FyZSwgaHR0cFYxTWlkZGxld2FyZSwgZmV0Y2hBbGxNaWRkbGV3YXJlXTtcblxuZnVuY3Rpb24gcmVnaXN0ZXJNaWRkbGV3YXJlKG1pZGRsZXdhcmUpIHtcbiAgbWlkZGxld2FyZXMudW5zaGlmdChtaWRkbGV3YXJlKTtcbn1cblxudmFyIGNoZWNrU3RhdHVzID0gZnVuY3Rpb24gY2hlY2tTdGF0dXMocmVzcG9uc2UpIHtcbiAgaWYgKHJlc3BvbnNlLnN0YXR1cyA+PSAyMDAgJiYgcmVzcG9uc2Uuc3RhdHVzIDwgMzAwKSB7XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xuICB9XG5cbiAgdGhyb3cgcmVzcG9uc2U7XG59O1xuXG52YXIgZGVmYXVsdEZldGNoSGFuZGxlciA9IGZ1bmN0aW9uIGRlZmF1bHRGZXRjaEhhbmRsZXIobmV4dE9wdGlvbnMpIHtcbiAgdmFyIHVybCA9IG5leHRPcHRpb25zLnVybCxcbiAgICAgIHBhdGggPSBuZXh0T3B0aW9ucy5wYXRoLFxuICAgICAgZGF0YSA9IG5leHRPcHRpb25zLmRhdGEsXG4gICAgICBfbmV4dE9wdGlvbnMkcGFyc2UgPSBuZXh0T3B0aW9ucy5wYXJzZSxcbiAgICAgIHBhcnNlID0gX25leHRPcHRpb25zJHBhcnNlID09PSB2b2lkIDAgPyB0cnVlIDogX25leHRPcHRpb25zJHBhcnNlLFxuICAgICAgcmVtYWluaW5nT3B0aW9ucyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhuZXh0T3B0aW9ucywgW1widXJsXCIsIFwicGF0aFwiLCBcImRhdGFcIiwgXCJwYXJzZVwiXSk7XG5cbiAgdmFyIGJvZHkgPSBuZXh0T3B0aW9ucy5ib2R5LFxuICAgICAgaGVhZGVycyA9IG5leHRPcHRpb25zLmhlYWRlcnM7IC8vIE1lcmdlIGV4cGxpY2l0bHktcHJvdmlkZWQgaGVhZGVycyB3aXRoIGRlZmF1bHQgdmFsdWVzLlxuXG4gIGhlYWRlcnMgPSBfb2JqZWN0U3ByZWFkKHt9LCBERUZBVUxUX0hFQURFUlMsIGhlYWRlcnMpOyAvLyBUaGUgYGRhdGFgIHByb3BlcnR5IGlzIGEgc2hvcnRoYW5kIGZvciBzZW5kaW5nIGEgSlNPTiBib2R5LlxuXG4gIGlmIChkYXRhKSB7XG4gICAgYm9keSA9IEpTT04uc3RyaW5naWZ5KGRhdGEpO1xuICAgIGhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xuICB9XG5cbiAgdmFyIHJlc3BvbnNlUHJvbWlzZSA9IHdpbmRvdy5mZXRjaCh1cmwgfHwgcGF0aCwgX29iamVjdFNwcmVhZCh7fSwgREVGQVVMVF9PUFRJT05TLCByZW1haW5pbmdPcHRpb25zLCB7XG4gICAgYm9keTogYm9keSxcbiAgICBoZWFkZXJzOiBoZWFkZXJzXG4gIH0pKTtcblxuICB2YXIgcGFyc2VSZXNwb25zZSA9IGZ1bmN0aW9uIHBhcnNlUmVzcG9uc2UocmVzcG9uc2UpIHtcbiAgICBpZiAocGFyc2UpIHtcbiAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPT09IDIwNCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlc3BvbnNlLmpzb24gPyByZXNwb25zZS5qc29uKCkgOiBQcm9taXNlLnJlamVjdChyZXNwb25zZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3BvbnNlO1xuICB9O1xuXG4gIHJldHVybiByZXNwb25zZVByb21pc2UudGhlbihjaGVja1N0YXR1cykudGhlbihwYXJzZVJlc3BvbnNlKS5jYXRjaChmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICBpZiAoIXBhcnNlKSB7XG4gICAgICB0aHJvdyByZXNwb25zZTtcbiAgICB9XG5cbiAgICB2YXIgaW52YWxpZEpzb25FcnJvciA9IHtcbiAgICAgIGNvZGU6ICdpbnZhbGlkX2pzb24nLFxuICAgICAgbWVzc2FnZTogX18oJ1RoZSByZXNwb25zZSBpcyBub3QgYSB2YWxpZCBKU09OIHJlc3BvbnNlLicpXG4gICAgfTtcblxuICAgIGlmICghcmVzcG9uc2UgfHwgIXJlc3BvbnNlLmpzb24pIHtcbiAgICAgIHRocm93IGludmFsaWRKc29uRXJyb3I7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKS5jYXRjaChmdW5jdGlvbiAoKSB7XG4gICAgICB0aHJvdyBpbnZhbGlkSnNvbkVycm9yO1xuICAgIH0pLnRoZW4oZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICB2YXIgdW5rbm93bkVycm9yID0ge1xuICAgICAgICBjb2RlOiAndW5rbm93bl9lcnJvcicsXG4gICAgICAgIG1lc3NhZ2U6IF9fKCdBbiB1bmtub3duIGVycm9yIG9jY3VycmVkLicpXG4gICAgICB9O1xuICAgICAgdGhyb3cgZXJyb3IgfHwgdW5rbm93bkVycm9yO1xuICAgIH0pO1xuICB9KTtcbn07XG5cbnZhciBmZXRjaEhhbmRsZXIgPSBkZWZhdWx0RmV0Y2hIYW5kbGVyO1xuLyoqXG4gKiBEZWZpbmVzIGEgY3VzdG9tIGZldGNoIGhhbmRsZXIgZm9yIG1ha2luZyB0aGUgcmVxdWVzdHMgdGhhdCB3aWxsIG92ZXJyaWRlXG4gKiB0aGUgZGVmYXVsdCBvbmUgdXNpbmcgd2luZG93LmZldGNoXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gbmV3RmV0Y2hIYW5kbGVyIFRoZSBuZXcgZmV0Y2ggaGFuZGxlclxuICovXG5cbmZ1bmN0aW9uIHNldEZldGNoSGFuZGxlcihuZXdGZXRjaEhhbmRsZXIpIHtcbiAgZmV0Y2hIYW5kbGVyID0gbmV3RmV0Y2hIYW5kbGVyO1xufVxuXG5mdW5jdGlvbiBhcGlGZXRjaChvcHRpb25zKSB7XG4gIHZhciBzdGVwcyA9IFtdLmNvbmNhdChtaWRkbGV3YXJlcywgW2ZldGNoSGFuZGxlcl0pO1xuXG4gIHZhciBjcmVhdGVSdW5TdGVwID0gZnVuY3Rpb24gY3JlYXRlUnVuU3RlcChpbmRleCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAod29ya2luZ09wdGlvbnMpIHtcbiAgICAgIHZhciBzdGVwID0gc3RlcHNbaW5kZXhdO1xuXG4gICAgICBpZiAoaW5kZXggPT09IHN0ZXBzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgcmV0dXJuIHN0ZXAod29ya2luZ09wdGlvbnMpO1xuICAgICAgfVxuXG4gICAgICB2YXIgbmV4dCA9IGNyZWF0ZVJ1blN0ZXAoaW5kZXggKyAxKTtcbiAgICAgIHJldHVybiBzdGVwKHdvcmtpbmdPcHRpb25zLCBuZXh0KTtcbiAgICB9O1xuICB9O1xuXG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgY3JlYXRlUnVuU3RlcCgwKShvcHRpb25zKS50aGVuKHJlc29sdmUpLmNhdGNoKGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgaWYgKGVycm9yLmNvZGUgIT09ICdyZXN0X2Nvb2tpZV9pbnZhbGlkX25vbmNlJykge1xuICAgICAgICByZXR1cm4gcmVqZWN0KGVycm9yKTtcbiAgICAgIH0gLy8gSWYgdGhlIG5vbmNlIGlzIGludmFsaWQsIHJlZnJlc2ggaXQgYW5kIHRyeSBhZ2Fpbi5cblxuXG4gICAgICB3aW5kb3cuZmV0Y2goYXBpRmV0Y2gubm9uY2VFbmRwb2ludCkudGhlbihjaGVja1N0YXR1cykudGhlbihmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICByZXR1cm4gZGF0YS50ZXh0KCk7XG4gICAgICB9KS50aGVuKGZ1bmN0aW9uICh0ZXh0KSB7XG4gICAgICAgIGFwaUZldGNoLm5vbmNlTWlkZGxld2FyZS5ub25jZSA9IHRleHQ7XG4gICAgICAgIGFwaUZldGNoKG9wdGlvbnMpLnRoZW4ocmVzb2x2ZSkuY2F0Y2gocmVqZWN0KTtcbiAgICAgIH0pLmNhdGNoKHJlamVjdCk7XG4gICAgfSk7XG4gIH0pO1xufVxuXG5hcGlGZXRjaC51c2UgPSByZWdpc3Rlck1pZGRsZXdhcmU7XG5hcGlGZXRjaC5zZXRGZXRjaEhhbmRsZXIgPSBzZXRGZXRjaEhhbmRsZXI7XG5hcGlGZXRjaC5jcmVhdGVOb25jZU1pZGRsZXdhcmUgPSBjcmVhdGVOb25jZU1pZGRsZXdhcmU7XG5hcGlGZXRjaC5jcmVhdGVQcmVsb2FkaW5nTWlkZGxld2FyZSA9IGNyZWF0ZVByZWxvYWRpbmdNaWRkbGV3YXJlO1xuYXBpRmV0Y2guY3JlYXRlUm9vdFVSTE1pZGRsZXdhcmUgPSBjcmVhdGVSb290VVJMTWlkZGxld2FyZTtcbmFwaUZldGNoLmZldGNoQWxsTWlkZGxld2FyZSA9IGZldGNoQWxsTWlkZGxld2FyZTtcbmV4cG9ydCBkZWZhdWx0IGFwaUZldGNoO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIiwiLyoqXG4gKiBTaW1wbGUgdGhyb3R0bGluZyBmdW5jdGlvbiBmb3Igd2FpdGluZyBhIHNldCBhbW91bnQgb2YgdGltZSBhZnRlciB0aGUgbGFzdCBrZXlwcmVzc1xuICogU28gd2UgZG9uJ3Qgb3ZlcmxvYWQgdGhlIHNlcnZlciB3aXRoIHRvbyBtYW55IHJlcXVlc3RzIGF0IG9uY2VcbiAqXG4gKiBAcGFyYW0gZnVuY1xuICogQHBhcmFtIHdhaXRcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlYm91bmNlKCBmdW5jLCB3YWl0ICkge1xuXHRsZXQgdGltZW91dDtcblxuXHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdFx0Y29uc3QgY29udGV4dCA9IHRoaXMsIGFyZ3MgPSBhcmd1bWVudHM7XG5cblx0XHQvKipcblx0XHQgKlxuXHRcdCAqL1xuXHRcdGNvbnN0IGxhdGVyID0gZnVuY3Rpb24oKSB7XG5cdFx0XHR0aW1lb3V0ID0gbnVsbDtcblx0XHRcdGZ1bmMuYXBwbHkoIGNvbnRleHQsIGFyZ3MgKTtcblx0XHR9O1xuXG5cdFx0Y2xlYXJUaW1lb3V0KCB0aW1lb3V0ICk7XG5cblx0XHR0aW1lb3V0ID0gc2V0VGltZW91dCggbGF0ZXIsIHdhaXQgKTtcblx0fTtcbn1cbiIsImltcG9ydCBfT2JqZWN0JGFzc2lnbiBmcm9tIFwiLi4vLi4vY29yZS1qcy9vYmplY3QvYXNzaWduXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfZXh0ZW5kcygpIHtcbiAgX2V4dGVuZHMgPSBfT2JqZWN0JGFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcblxuICByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn0iLCJpbXBvcnQgeyB1c2VTdGF0ZSwgdXNlUmVmLCB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCc7XG5cbmZ1bmN0aW9uIGFyZUlucHV0c0VxdWFsKG5ld0lucHV0cywgbGFzdElucHV0cykge1xuICBpZiAobmV3SW5wdXRzLmxlbmd0aCAhPT0gbGFzdElucHV0cy5sZW5ndGgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IG5ld0lucHV0cy5sZW5ndGg7IGkrKykge1xuICAgIGlmIChuZXdJbnB1dHNbaV0gIT09IGxhc3RJbnB1dHNbaV0pIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gdXNlTWVtb09uZShnZXRSZXN1bHQsIGlucHV0cykge1xuICB2YXIgaW5pdGlhbCA9IHVzZVN0YXRlKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaW5wdXRzOiBpbnB1dHMsXG4gICAgICByZXN1bHQ6IGdldFJlc3VsdCgpXG4gICAgfTtcbiAgfSlbMF07XG4gIHZhciBjb21taXR0ZWQgPSB1c2VSZWYoaW5pdGlhbCk7XG4gIHZhciBpc0lucHV0TWF0Y2ggPSBCb29sZWFuKGlucHV0cyAmJiBjb21taXR0ZWQuY3VycmVudC5pbnB1dHMgJiYgYXJlSW5wdXRzRXF1YWwoaW5wdXRzLCBjb21taXR0ZWQuY3VycmVudC5pbnB1dHMpKTtcbiAgdmFyIGNhY2hlID0gaXNJbnB1dE1hdGNoID8gY29tbWl0dGVkLmN1cnJlbnQgOiB7XG4gICAgaW5wdXRzOiBpbnB1dHMsXG4gICAgcmVzdWx0OiBnZXRSZXN1bHQoKVxuICB9O1xuICB1c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGNvbW1pdHRlZC5jdXJyZW50ID0gY2FjaGU7XG4gIH0sIFtjYWNoZV0pO1xuICByZXR1cm4gY2FjaGUucmVzdWx0O1xufVxuZnVuY3Rpb24gdXNlQ2FsbGJhY2tPbmUoY2FsbGJhY2ssIGlucHV0cykge1xuICByZXR1cm4gdXNlTWVtb09uZShmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGNhbGxiYWNrO1xuICB9LCBpbnB1dHMpO1xufVxudmFyIHVzZU1lbW8gPSB1c2VNZW1vT25lO1xudmFyIHVzZUNhbGxiYWNrID0gdXNlQ2FsbGJhY2tPbmU7XG5cbmV4cG9ydCB7IHVzZUNhbGxiYWNrLCB1c2VDYWxsYmFja09uZSwgdXNlTWVtbywgdXNlTWVtb09uZSB9O1xuIiwiaW1wb3J0IF9PYmplY3QkY3JlYXRlIGZyb20gXCIuLi8uLi9jb3JlLWpzL29iamVjdC9jcmVhdGVcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9pbmhlcml0c0xvb3NlKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gIHN1YkNsYXNzLnByb3RvdHlwZSA9IF9PYmplY3QkY3JlYXRlKHN1cGVyQ2xhc3MucHJvdG90eXBlKTtcbiAgc3ViQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gc3ViQ2xhc3M7XG4gIHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7XG59IiwidmFyIGlzUHJvZHVjdGlvbiA9IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbic7XG52YXIgcHJlZml4ID0gJ0ludmFyaWFudCBmYWlsZWQnO1xuZnVuY3Rpb24gaW52YXJpYW50KGNvbmRpdGlvbiwgbWVzc2FnZSkge1xuICBpZiAoY29uZGl0aW9uKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKGlzUHJvZHVjdGlvbikge1xuICAgIHRocm93IG5ldyBFcnJvcihwcmVmaXgpO1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcihwcmVmaXggKyBcIjogXCIgKyAobWVzc2FnZSB8fCAnJykpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGludmFyaWFudDtcbiIsImltcG9ydCAkJG9ic2VydmFibGUgZnJvbSAnc3ltYm9sLW9ic2VydmFibGUnO1xuXG4vKipcbiAqIFRoZXNlIGFyZSBwcml2YXRlIGFjdGlvbiB0eXBlcyByZXNlcnZlZCBieSBSZWR1eC5cbiAqIEZvciBhbnkgdW5rbm93biBhY3Rpb25zLCB5b3UgbXVzdCByZXR1cm4gdGhlIGN1cnJlbnQgc3RhdGUuXG4gKiBJZiB0aGUgY3VycmVudCBzdGF0ZSBpcyB1bmRlZmluZWQsIHlvdSBtdXN0IHJldHVybiB0aGUgaW5pdGlhbCBzdGF0ZS5cbiAqIERvIG5vdCByZWZlcmVuY2UgdGhlc2UgYWN0aW9uIHR5cGVzIGRpcmVjdGx5IGluIHlvdXIgY29kZS5cbiAqL1xudmFyIHJhbmRvbVN0cmluZyA9IGZ1bmN0aW9uIHJhbmRvbVN0cmluZygpIHtcbiAgcmV0dXJuIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cmluZyg3KS5zcGxpdCgnJykuam9pbignLicpO1xufTtcblxudmFyIEFjdGlvblR5cGVzID0ge1xuICBJTklUOiBcIkBAcmVkdXgvSU5JVFwiICsgcmFuZG9tU3RyaW5nKCksXG4gIFJFUExBQ0U6IFwiQEByZWR1eC9SRVBMQUNFXCIgKyByYW5kb21TdHJpbmcoKSxcbiAgUFJPQkVfVU5LTk9XTl9BQ1RJT046IGZ1bmN0aW9uIFBST0JFX1VOS05PV05fQUNUSU9OKCkge1xuICAgIHJldHVybiBcIkBAcmVkdXgvUFJPQkVfVU5LTk9XTl9BQ1RJT05cIiArIHJhbmRvbVN0cmluZygpO1xuICB9XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7YW55fSBvYmogVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIGFyZ3VtZW50IGFwcGVhcnMgdG8gYmUgYSBwbGFpbiBvYmplY3QuXG4gKi9cbmZ1bmN0aW9uIGlzUGxhaW5PYmplY3Qob2JqKSB7XG4gIGlmICh0eXBlb2Ygb2JqICE9PSAnb2JqZWN0JyB8fCBvYmogPT09IG51bGwpIHJldHVybiBmYWxzZTtcbiAgdmFyIHByb3RvID0gb2JqO1xuXG4gIHdoaWxlIChPYmplY3QuZ2V0UHJvdG90eXBlT2YocHJvdG8pICE9PSBudWxsKSB7XG4gICAgcHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YocHJvdG8pO1xuICB9XG5cbiAgcmV0dXJuIE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmopID09PSBwcm90bztcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgUmVkdXggc3RvcmUgdGhhdCBob2xkcyB0aGUgc3RhdGUgdHJlZS5cbiAqIFRoZSBvbmx5IHdheSB0byBjaGFuZ2UgdGhlIGRhdGEgaW4gdGhlIHN0b3JlIGlzIHRvIGNhbGwgYGRpc3BhdGNoKClgIG9uIGl0LlxuICpcbiAqIFRoZXJlIHNob3VsZCBvbmx5IGJlIGEgc2luZ2xlIHN0b3JlIGluIHlvdXIgYXBwLiBUbyBzcGVjaWZ5IGhvdyBkaWZmZXJlbnRcbiAqIHBhcnRzIG9mIHRoZSBzdGF0ZSB0cmVlIHJlc3BvbmQgdG8gYWN0aW9ucywgeW91IG1heSBjb21iaW5lIHNldmVyYWwgcmVkdWNlcnNcbiAqIGludG8gYSBzaW5nbGUgcmVkdWNlciBmdW5jdGlvbiBieSB1c2luZyBgY29tYmluZVJlZHVjZXJzYC5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWR1Y2VyIEEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSBuZXh0IHN0YXRlIHRyZWUsIGdpdmVuXG4gKiB0aGUgY3VycmVudCBzdGF0ZSB0cmVlIGFuZCB0aGUgYWN0aW9uIHRvIGhhbmRsZS5cbiAqXG4gKiBAcGFyYW0ge2FueX0gW3ByZWxvYWRlZFN0YXRlXSBUaGUgaW5pdGlhbCBzdGF0ZS4gWW91IG1heSBvcHRpb25hbGx5IHNwZWNpZnkgaXRcbiAqIHRvIGh5ZHJhdGUgdGhlIHN0YXRlIGZyb20gdGhlIHNlcnZlciBpbiB1bml2ZXJzYWwgYXBwcywgb3IgdG8gcmVzdG9yZSBhXG4gKiBwcmV2aW91c2x5IHNlcmlhbGl6ZWQgdXNlciBzZXNzaW9uLlxuICogSWYgeW91IHVzZSBgY29tYmluZVJlZHVjZXJzYCB0byBwcm9kdWNlIHRoZSByb290IHJlZHVjZXIgZnVuY3Rpb24sIHRoaXMgbXVzdCBiZVxuICogYW4gb2JqZWN0IHdpdGggdGhlIHNhbWUgc2hhcGUgYXMgYGNvbWJpbmVSZWR1Y2Vyc2Aga2V5cy5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbZW5oYW5jZXJdIFRoZSBzdG9yZSBlbmhhbmNlci4gWW91IG1heSBvcHRpb25hbGx5IHNwZWNpZnkgaXRcbiAqIHRvIGVuaGFuY2UgdGhlIHN0b3JlIHdpdGggdGhpcmQtcGFydHkgY2FwYWJpbGl0aWVzIHN1Y2ggYXMgbWlkZGxld2FyZSxcbiAqIHRpbWUgdHJhdmVsLCBwZXJzaXN0ZW5jZSwgZXRjLiBUaGUgb25seSBzdG9yZSBlbmhhbmNlciB0aGF0IHNoaXBzIHdpdGggUmVkdXhcbiAqIGlzIGBhcHBseU1pZGRsZXdhcmUoKWAuXG4gKlxuICogQHJldHVybnMge1N0b3JlfSBBIFJlZHV4IHN0b3JlIHRoYXQgbGV0cyB5b3UgcmVhZCB0aGUgc3RhdGUsIGRpc3BhdGNoIGFjdGlvbnNcbiAqIGFuZCBzdWJzY3JpYmUgdG8gY2hhbmdlcy5cbiAqL1xuXG5mdW5jdGlvbiBjcmVhdGVTdG9yZShyZWR1Y2VyLCBwcmVsb2FkZWRTdGF0ZSwgZW5oYW5jZXIpIHtcbiAgdmFyIF9yZWYyO1xuXG4gIGlmICh0eXBlb2YgcHJlbG9hZGVkU3RhdGUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGVuaGFuY2VyID09PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiBlbmhhbmNlciA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgYXJndW1lbnRzWzNdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdJdCBsb29rcyBsaWtlIHlvdSBhcmUgcGFzc2luZyBzZXZlcmFsIHN0b3JlIGVuaGFuY2VycyB0byAnICsgJ2NyZWF0ZVN0b3JlKCkuIFRoaXMgaXMgbm90IHN1cHBvcnRlZC4gSW5zdGVhZCwgY29tcG9zZSB0aGVtICcgKyAndG9nZXRoZXIgdG8gYSBzaW5nbGUgZnVuY3Rpb24uJyk7XG4gIH1cblxuICBpZiAodHlwZW9mIHByZWxvYWRlZFN0YXRlID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBlbmhhbmNlciA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBlbmhhbmNlciA9IHByZWxvYWRlZFN0YXRlO1xuICAgIHByZWxvYWRlZFN0YXRlID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBlbmhhbmNlciAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBpZiAodHlwZW9mIGVuaGFuY2VyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIHRoZSBlbmhhbmNlciB0byBiZSBhIGZ1bmN0aW9uLicpO1xuICAgIH1cblxuICAgIHJldHVybiBlbmhhbmNlcihjcmVhdGVTdG9yZSkocmVkdWNlciwgcHJlbG9hZGVkU3RhdGUpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiByZWR1Y2VyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCB0aGUgcmVkdWNlciB0byBiZSBhIGZ1bmN0aW9uLicpO1xuICB9XG5cbiAgdmFyIGN1cnJlbnRSZWR1Y2VyID0gcmVkdWNlcjtcbiAgdmFyIGN1cnJlbnRTdGF0ZSA9IHByZWxvYWRlZFN0YXRlO1xuICB2YXIgY3VycmVudExpc3RlbmVycyA9IFtdO1xuICB2YXIgbmV4dExpc3RlbmVycyA9IGN1cnJlbnRMaXN0ZW5lcnM7XG4gIHZhciBpc0Rpc3BhdGNoaW5nID0gZmFsc2U7XG4gIC8qKlxuICAgKiBUaGlzIG1ha2VzIGEgc2hhbGxvdyBjb3B5IG9mIGN1cnJlbnRMaXN0ZW5lcnMgc28gd2UgY2FuIHVzZVxuICAgKiBuZXh0TGlzdGVuZXJzIGFzIGEgdGVtcG9yYXJ5IGxpc3Qgd2hpbGUgZGlzcGF0Y2hpbmcuXG4gICAqXG4gICAqIFRoaXMgcHJldmVudHMgYW55IGJ1Z3MgYXJvdW5kIGNvbnN1bWVycyBjYWxsaW5nXG4gICAqIHN1YnNjcmliZS91bnN1YnNjcmliZSBpbiB0aGUgbWlkZGxlIG9mIGEgZGlzcGF0Y2guXG4gICAqL1xuXG4gIGZ1bmN0aW9uIGVuc3VyZUNhbk11dGF0ZU5leHRMaXN0ZW5lcnMoKSB7XG4gICAgaWYgKG5leHRMaXN0ZW5lcnMgPT09IGN1cnJlbnRMaXN0ZW5lcnMpIHtcbiAgICAgIG5leHRMaXN0ZW5lcnMgPSBjdXJyZW50TGlzdGVuZXJzLnNsaWNlKCk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBSZWFkcyB0aGUgc3RhdGUgdHJlZSBtYW5hZ2VkIGJ5IHRoZSBzdG9yZS5cbiAgICpcbiAgICogQHJldHVybnMge2FueX0gVGhlIGN1cnJlbnQgc3RhdGUgdHJlZSBvZiB5b3VyIGFwcGxpY2F0aW9uLlxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIGdldFN0YXRlKCkge1xuICAgIGlmIChpc0Rpc3BhdGNoaW5nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBtYXkgbm90IGNhbGwgc3RvcmUuZ2V0U3RhdGUoKSB3aGlsZSB0aGUgcmVkdWNlciBpcyBleGVjdXRpbmcuICcgKyAnVGhlIHJlZHVjZXIgaGFzIGFscmVhZHkgcmVjZWl2ZWQgdGhlIHN0YXRlIGFzIGFuIGFyZ3VtZW50LiAnICsgJ1Bhc3MgaXQgZG93biBmcm9tIHRoZSB0b3AgcmVkdWNlciBpbnN0ZWFkIG9mIHJlYWRpbmcgaXQgZnJvbSB0aGUgc3RvcmUuJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGN1cnJlbnRTdGF0ZTtcbiAgfVxuICAvKipcbiAgICogQWRkcyBhIGNoYW5nZSBsaXN0ZW5lci4gSXQgd2lsbCBiZSBjYWxsZWQgYW55IHRpbWUgYW4gYWN0aW9uIGlzIGRpc3BhdGNoZWQsXG4gICAqIGFuZCBzb21lIHBhcnQgb2YgdGhlIHN0YXRlIHRyZWUgbWF5IHBvdGVudGlhbGx5IGhhdmUgY2hhbmdlZC4gWW91IG1heSB0aGVuXG4gICAqIGNhbGwgYGdldFN0YXRlKClgIHRvIHJlYWQgdGhlIGN1cnJlbnQgc3RhdGUgdHJlZSBpbnNpZGUgdGhlIGNhbGxiYWNrLlxuICAgKlxuICAgKiBZb3UgbWF5IGNhbGwgYGRpc3BhdGNoKClgIGZyb20gYSBjaGFuZ2UgbGlzdGVuZXIsIHdpdGggdGhlIGZvbGxvd2luZ1xuICAgKiBjYXZlYXRzOlxuICAgKlxuICAgKiAxLiBUaGUgc3Vic2NyaXB0aW9ucyBhcmUgc25hcHNob3R0ZWQganVzdCBiZWZvcmUgZXZlcnkgYGRpc3BhdGNoKClgIGNhbGwuXG4gICAqIElmIHlvdSBzdWJzY3JpYmUgb3IgdW5zdWJzY3JpYmUgd2hpbGUgdGhlIGxpc3RlbmVycyBhcmUgYmVpbmcgaW52b2tlZCwgdGhpc1xuICAgKiB3aWxsIG5vdCBoYXZlIGFueSBlZmZlY3Qgb24gdGhlIGBkaXNwYXRjaCgpYCB0aGF0IGlzIGN1cnJlbnRseSBpbiBwcm9ncmVzcy5cbiAgICogSG93ZXZlciwgdGhlIG5leHQgYGRpc3BhdGNoKClgIGNhbGwsIHdoZXRoZXIgbmVzdGVkIG9yIG5vdCwgd2lsbCB1c2UgYSBtb3JlXG4gICAqIHJlY2VudCBzbmFwc2hvdCBvZiB0aGUgc3Vic2NyaXB0aW9uIGxpc3QuXG4gICAqXG4gICAqIDIuIFRoZSBsaXN0ZW5lciBzaG91bGQgbm90IGV4cGVjdCB0byBzZWUgYWxsIHN0YXRlIGNoYW5nZXMsIGFzIHRoZSBzdGF0ZVxuICAgKiBtaWdodCBoYXZlIGJlZW4gdXBkYXRlZCBtdWx0aXBsZSB0aW1lcyBkdXJpbmcgYSBuZXN0ZWQgYGRpc3BhdGNoKClgIGJlZm9yZVxuICAgKiB0aGUgbGlzdGVuZXIgaXMgY2FsbGVkLiBJdCBpcywgaG93ZXZlciwgZ3VhcmFudGVlZCB0aGF0IGFsbCBzdWJzY3JpYmVyc1xuICAgKiByZWdpc3RlcmVkIGJlZm9yZSB0aGUgYGRpc3BhdGNoKClgIHN0YXJ0ZWQgd2lsbCBiZSBjYWxsZWQgd2l0aCB0aGUgbGF0ZXN0XG4gICAqIHN0YXRlIGJ5IHRoZSB0aW1lIGl0IGV4aXRzLlxuICAgKlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBsaXN0ZW5lciBBIGNhbGxiYWNrIHRvIGJlIGludm9rZWQgb24gZXZlcnkgZGlzcGF0Y2guXG4gICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSBmdW5jdGlvbiB0byByZW1vdmUgdGhpcyBjaGFuZ2UgbGlzdGVuZXIuXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gc3Vic2NyaWJlKGxpc3RlbmVyKSB7XG4gICAgaWYgKHR5cGVvZiBsaXN0ZW5lciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCB0aGUgbGlzdGVuZXIgdG8gYmUgYSBmdW5jdGlvbi4nKTtcbiAgICB9XG5cbiAgICBpZiAoaXNEaXNwYXRjaGluZykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdZb3UgbWF5IG5vdCBjYWxsIHN0b3JlLnN1YnNjcmliZSgpIHdoaWxlIHRoZSByZWR1Y2VyIGlzIGV4ZWN1dGluZy4gJyArICdJZiB5b3Ugd291bGQgbGlrZSB0byBiZSBub3RpZmllZCBhZnRlciB0aGUgc3RvcmUgaGFzIGJlZW4gdXBkYXRlZCwgc3Vic2NyaWJlIGZyb20gYSAnICsgJ2NvbXBvbmVudCBhbmQgaW52b2tlIHN0b3JlLmdldFN0YXRlKCkgaW4gdGhlIGNhbGxiYWNrIHRvIGFjY2VzcyB0aGUgbGF0ZXN0IHN0YXRlLiAnICsgJ1NlZSBodHRwczovL3JlZHV4LmpzLm9yZy9hcGktcmVmZXJlbmNlL3N0b3JlI3N1YnNjcmliZShsaXN0ZW5lcikgZm9yIG1vcmUgZGV0YWlscy4nKTtcbiAgICB9XG5cbiAgICB2YXIgaXNTdWJzY3JpYmVkID0gdHJ1ZTtcbiAgICBlbnN1cmVDYW5NdXRhdGVOZXh0TGlzdGVuZXJzKCk7XG4gICAgbmV4dExpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gdW5zdWJzY3JpYmUoKSB7XG4gICAgICBpZiAoIWlzU3Vic2NyaWJlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChpc0Rpc3BhdGNoaW5nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignWW91IG1heSBub3QgdW5zdWJzY3JpYmUgZnJvbSBhIHN0b3JlIGxpc3RlbmVyIHdoaWxlIHRoZSByZWR1Y2VyIGlzIGV4ZWN1dGluZy4gJyArICdTZWUgaHR0cHM6Ly9yZWR1eC5qcy5vcmcvYXBpLXJlZmVyZW5jZS9zdG9yZSNzdWJzY3JpYmUobGlzdGVuZXIpIGZvciBtb3JlIGRldGFpbHMuJyk7XG4gICAgICB9XG5cbiAgICAgIGlzU3Vic2NyaWJlZCA9IGZhbHNlO1xuICAgICAgZW5zdXJlQ2FuTXV0YXRlTmV4dExpc3RlbmVycygpO1xuICAgICAgdmFyIGluZGV4ID0gbmV4dExpc3RlbmVycy5pbmRleE9mKGxpc3RlbmVyKTtcbiAgICAgIG5leHRMaXN0ZW5lcnMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBEaXNwYXRjaGVzIGFuIGFjdGlvbi4gSXQgaXMgdGhlIG9ubHkgd2F5IHRvIHRyaWdnZXIgYSBzdGF0ZSBjaGFuZ2UuXG4gICAqXG4gICAqIFRoZSBgcmVkdWNlcmAgZnVuY3Rpb24sIHVzZWQgdG8gY3JlYXRlIHRoZSBzdG9yZSwgd2lsbCBiZSBjYWxsZWQgd2l0aCB0aGVcbiAgICogY3VycmVudCBzdGF0ZSB0cmVlIGFuZCB0aGUgZ2l2ZW4gYGFjdGlvbmAuIEl0cyByZXR1cm4gdmFsdWUgd2lsbFxuICAgKiBiZSBjb25zaWRlcmVkIHRoZSAqKm5leHQqKiBzdGF0ZSBvZiB0aGUgdHJlZSwgYW5kIHRoZSBjaGFuZ2UgbGlzdGVuZXJzXG4gICAqIHdpbGwgYmUgbm90aWZpZWQuXG4gICAqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9ubHkgc3VwcG9ydHMgcGxhaW4gb2JqZWN0IGFjdGlvbnMuIElmIHlvdSB3YW50IHRvXG4gICAqIGRpc3BhdGNoIGEgUHJvbWlzZSwgYW4gT2JzZXJ2YWJsZSwgYSB0aHVuaywgb3Igc29tZXRoaW5nIGVsc2UsIHlvdSBuZWVkIHRvXG4gICAqIHdyYXAgeW91ciBzdG9yZSBjcmVhdGluZyBmdW5jdGlvbiBpbnRvIHRoZSBjb3JyZXNwb25kaW5nIG1pZGRsZXdhcmUuIEZvclxuICAgKiBleGFtcGxlLCBzZWUgdGhlIGRvY3VtZW50YXRpb24gZm9yIHRoZSBgcmVkdXgtdGh1bmtgIHBhY2thZ2UuIEV2ZW4gdGhlXG4gICAqIG1pZGRsZXdhcmUgd2lsbCBldmVudHVhbGx5IGRpc3BhdGNoIHBsYWluIG9iamVjdCBhY3Rpb25zIHVzaW5nIHRoaXMgbWV0aG9kLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gYWN0aW9uIEEgcGxhaW4gb2JqZWN0IHJlcHJlc2VudGluZyDigJx3aGF0IGNoYW5nZWTigJ0uIEl0IGlzXG4gICAqIGEgZ29vZCBpZGVhIHRvIGtlZXAgYWN0aW9ucyBzZXJpYWxpemFibGUgc28geW91IGNhbiByZWNvcmQgYW5kIHJlcGxheSB1c2VyXG4gICAqIHNlc3Npb25zLCBvciB1c2UgdGhlIHRpbWUgdHJhdmVsbGluZyBgcmVkdXgtZGV2dG9vbHNgLiBBbiBhY3Rpb24gbXVzdCBoYXZlXG4gICAqIGEgYHR5cGVgIHByb3BlcnR5IHdoaWNoIG1heSBub3QgYmUgYHVuZGVmaW5lZGAuIEl0IGlzIGEgZ29vZCBpZGVhIHRvIHVzZVxuICAgKiBzdHJpbmcgY29uc3RhbnRzIGZvciBhY3Rpb24gdHlwZXMuXG4gICAqXG4gICAqIEByZXR1cm5zIHtPYmplY3R9IEZvciBjb252ZW5pZW5jZSwgdGhlIHNhbWUgYWN0aW9uIG9iamVjdCB5b3UgZGlzcGF0Y2hlZC5cbiAgICpcbiAgICogTm90ZSB0aGF0LCBpZiB5b3UgdXNlIGEgY3VzdG9tIG1pZGRsZXdhcmUsIGl0IG1heSB3cmFwIGBkaXNwYXRjaCgpYCB0b1xuICAgKiByZXR1cm4gc29tZXRoaW5nIGVsc2UgKGZvciBleGFtcGxlLCBhIFByb21pc2UgeW91IGNhbiBhd2FpdCkuXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gZGlzcGF0Y2goYWN0aW9uKSB7XG4gICAgaWYgKCFpc1BsYWluT2JqZWN0KGFjdGlvbikpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQWN0aW9ucyBtdXN0IGJlIHBsYWluIG9iamVjdHMuICcgKyAnVXNlIGN1c3RvbSBtaWRkbGV3YXJlIGZvciBhc3luYyBhY3Rpb25zLicpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgYWN0aW9uLnR5cGUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0FjdGlvbnMgbWF5IG5vdCBoYXZlIGFuIHVuZGVmaW5lZCBcInR5cGVcIiBwcm9wZXJ0eS4gJyArICdIYXZlIHlvdSBtaXNzcGVsbGVkIGEgY29uc3RhbnQ/Jyk7XG4gICAgfVxuXG4gICAgaWYgKGlzRGlzcGF0Y2hpbmcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignUmVkdWNlcnMgbWF5IG5vdCBkaXNwYXRjaCBhY3Rpb25zLicpO1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICBpc0Rpc3BhdGNoaW5nID0gdHJ1ZTtcbiAgICAgIGN1cnJlbnRTdGF0ZSA9IGN1cnJlbnRSZWR1Y2VyKGN1cnJlbnRTdGF0ZSwgYWN0aW9uKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgaXNEaXNwYXRjaGluZyA9IGZhbHNlO1xuICAgIH1cblxuICAgIHZhciBsaXN0ZW5lcnMgPSBjdXJyZW50TGlzdGVuZXJzID0gbmV4dExpc3RlbmVycztcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdGVuZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgbGlzdGVuZXIgPSBsaXN0ZW5lcnNbaV07XG4gICAgICBsaXN0ZW5lcigpO1xuICAgIH1cblxuICAgIHJldHVybiBhY3Rpb247XG4gIH1cbiAgLyoqXG4gICAqIFJlcGxhY2VzIHRoZSByZWR1Y2VyIGN1cnJlbnRseSB1c2VkIGJ5IHRoZSBzdG9yZSB0byBjYWxjdWxhdGUgdGhlIHN0YXRlLlxuICAgKlxuICAgKiBZb3UgbWlnaHQgbmVlZCB0aGlzIGlmIHlvdXIgYXBwIGltcGxlbWVudHMgY29kZSBzcGxpdHRpbmcgYW5kIHlvdSB3YW50IHRvXG4gICAqIGxvYWQgc29tZSBvZiB0aGUgcmVkdWNlcnMgZHluYW1pY2FsbHkuIFlvdSBtaWdodCBhbHNvIG5lZWQgdGhpcyBpZiB5b3VcbiAgICogaW1wbGVtZW50IGEgaG90IHJlbG9hZGluZyBtZWNoYW5pc20gZm9yIFJlZHV4LlxuICAgKlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBuZXh0UmVkdWNlciBUaGUgcmVkdWNlciBmb3IgdGhlIHN0b3JlIHRvIHVzZSBpbnN0ZWFkLlxuICAgKiBAcmV0dXJucyB7dm9pZH1cbiAgICovXG5cblxuICBmdW5jdGlvbiByZXBsYWNlUmVkdWNlcihuZXh0UmVkdWNlcikge1xuICAgIGlmICh0eXBlb2YgbmV4dFJlZHVjZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgdGhlIG5leHRSZWR1Y2VyIHRvIGJlIGEgZnVuY3Rpb24uJyk7XG4gICAgfVxuXG4gICAgY3VycmVudFJlZHVjZXIgPSBuZXh0UmVkdWNlcjsgLy8gVGhpcyBhY3Rpb24gaGFzIGEgc2ltaWxpYXIgZWZmZWN0IHRvIEFjdGlvblR5cGVzLklOSVQuXG4gICAgLy8gQW55IHJlZHVjZXJzIHRoYXQgZXhpc3RlZCBpbiBib3RoIHRoZSBuZXcgYW5kIG9sZCByb290UmVkdWNlclxuICAgIC8vIHdpbGwgcmVjZWl2ZSB0aGUgcHJldmlvdXMgc3RhdGUuIFRoaXMgZWZmZWN0aXZlbHkgcG9wdWxhdGVzXG4gICAgLy8gdGhlIG5ldyBzdGF0ZSB0cmVlIHdpdGggYW55IHJlbGV2YW50IGRhdGEgZnJvbSB0aGUgb2xkIG9uZS5cblxuICAgIGRpc3BhdGNoKHtcbiAgICAgIHR5cGU6IEFjdGlvblR5cGVzLlJFUExBQ0VcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogSW50ZXJvcGVyYWJpbGl0eSBwb2ludCBmb3Igb2JzZXJ2YWJsZS9yZWFjdGl2ZSBsaWJyYXJpZXMuXG4gICAqIEByZXR1cm5zIHtvYnNlcnZhYmxlfSBBIG1pbmltYWwgb2JzZXJ2YWJsZSBvZiBzdGF0ZSBjaGFuZ2VzLlxuICAgKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlIHRoZSBvYnNlcnZhYmxlIHByb3Bvc2FsOlxuICAgKiBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1vYnNlcnZhYmxlXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gb2JzZXJ2YWJsZSgpIHtcbiAgICB2YXIgX3JlZjtcblxuICAgIHZhciBvdXRlclN1YnNjcmliZSA9IHN1YnNjcmliZTtcbiAgICByZXR1cm4gX3JlZiA9IHtcbiAgICAgIC8qKlxuICAgICAgICogVGhlIG1pbmltYWwgb2JzZXJ2YWJsZSBzdWJzY3JpcHRpb24gbWV0aG9kLlxuICAgICAgICogQHBhcmFtIHtPYmplY3R9IG9ic2VydmVyIEFueSBvYmplY3QgdGhhdCBjYW4gYmUgdXNlZCBhcyBhbiBvYnNlcnZlci5cbiAgICAgICAqIFRoZSBvYnNlcnZlciBvYmplY3Qgc2hvdWxkIGhhdmUgYSBgbmV4dGAgbWV0aG9kLlxuICAgICAgICogQHJldHVybnMge3N1YnNjcmlwdGlvbn0gQW4gb2JqZWN0IHdpdGggYW4gYHVuc3Vic2NyaWJlYCBtZXRob2QgdGhhdCBjYW5cbiAgICAgICAqIGJlIHVzZWQgdG8gdW5zdWJzY3JpYmUgdGhlIG9ic2VydmFibGUgZnJvbSB0aGUgc3RvcmUsIGFuZCBwcmV2ZW50IGZ1cnRoZXJcbiAgICAgICAqIGVtaXNzaW9uIG9mIHZhbHVlcyBmcm9tIHRoZSBvYnNlcnZhYmxlLlxuICAgICAgICovXG4gICAgICBzdWJzY3JpYmU6IGZ1bmN0aW9uIHN1YnNjcmliZShvYnNlcnZlcikge1xuICAgICAgICBpZiAodHlwZW9mIG9ic2VydmVyICE9PSAnb2JqZWN0JyB8fCBvYnNlcnZlciA9PT0gbnVsbCkge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIHRoZSBvYnNlcnZlciB0byBiZSBhbiBvYmplY3QuJyk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBvYnNlcnZlU3RhdGUoKSB7XG4gICAgICAgICAgaWYgKG9ic2VydmVyLm5leHQpIHtcbiAgICAgICAgICAgIG9ic2VydmVyLm5leHQoZ2V0U3RhdGUoKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgb2JzZXJ2ZVN0YXRlKCk7XG4gICAgICAgIHZhciB1bnN1YnNjcmliZSA9IG91dGVyU3Vic2NyaWJlKG9ic2VydmVTdGF0ZSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgdW5zdWJzY3JpYmU6IHVuc3Vic2NyaWJlXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfSwgX3JlZlskJG9ic2VydmFibGVdID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSwgX3JlZjtcbiAgfSAvLyBXaGVuIGEgc3RvcmUgaXMgY3JlYXRlZCwgYW4gXCJJTklUXCIgYWN0aW9uIGlzIGRpc3BhdGNoZWQgc28gdGhhdCBldmVyeVxuICAvLyByZWR1Y2VyIHJldHVybnMgdGhlaXIgaW5pdGlhbCBzdGF0ZS4gVGhpcyBlZmZlY3RpdmVseSBwb3B1bGF0ZXNcbiAgLy8gdGhlIGluaXRpYWwgc3RhdGUgdHJlZS5cblxuXG4gIGRpc3BhdGNoKHtcbiAgICB0eXBlOiBBY3Rpb25UeXBlcy5JTklUXG4gIH0pO1xuICByZXR1cm4gX3JlZjIgPSB7XG4gICAgZGlzcGF0Y2g6IGRpc3BhdGNoLFxuICAgIHN1YnNjcmliZTogc3Vic2NyaWJlLFxuICAgIGdldFN0YXRlOiBnZXRTdGF0ZSxcbiAgICByZXBsYWNlUmVkdWNlcjogcmVwbGFjZVJlZHVjZXJcbiAgfSwgX3JlZjJbJCRvYnNlcnZhYmxlXSA9IG9ic2VydmFibGUsIF9yZWYyO1xufVxuXG4vKipcbiAqIFByaW50cyBhIHdhcm5pbmcgaW4gdGhlIGNvbnNvbGUgaWYgaXQgZXhpc3RzLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlIFRoZSB3YXJuaW5nIG1lc3NhZ2UuXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZnVuY3Rpb24gd2FybmluZyhtZXNzYWdlKSB7XG4gIC8qIGVzbGludC1kaXNhYmxlIG5vLWNvbnNvbGUgKi9cbiAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgY29uc29sZS5lcnJvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNvbnNvbGUuZXJyb3IobWVzc2FnZSk7XG4gIH1cbiAgLyogZXNsaW50LWVuYWJsZSBuby1jb25zb2xlICovXG5cblxuICB0cnkge1xuICAgIC8vIFRoaXMgZXJyb3Igd2FzIHRocm93biBhcyBhIGNvbnZlbmllbmNlIHNvIHRoYXQgaWYgeW91IGVuYWJsZVxuICAgIC8vIFwiYnJlYWsgb24gYWxsIGV4Y2VwdGlvbnNcIiBpbiB5b3VyIGNvbnNvbGUsXG4gICAgLy8gaXQgd291bGQgcGF1c2UgdGhlIGV4ZWN1dGlvbiBhdCB0aGlzIGxpbmUuXG4gICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuICB9IGNhdGNoIChlKSB7fSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWVtcHR5XG5cbn1cblxuZnVuY3Rpb24gZ2V0VW5kZWZpbmVkU3RhdGVFcnJvck1lc3NhZ2Uoa2V5LCBhY3Rpb24pIHtcbiAgdmFyIGFjdGlvblR5cGUgPSBhY3Rpb24gJiYgYWN0aW9uLnR5cGU7XG4gIHZhciBhY3Rpb25EZXNjcmlwdGlvbiA9IGFjdGlvblR5cGUgJiYgXCJhY3Rpb24gXFxcIlwiICsgU3RyaW5nKGFjdGlvblR5cGUpICsgXCJcXFwiXCIgfHwgJ2FuIGFjdGlvbic7XG4gIHJldHVybiBcIkdpdmVuIFwiICsgYWN0aW9uRGVzY3JpcHRpb24gKyBcIiwgcmVkdWNlciBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgcmV0dXJuZWQgdW5kZWZpbmVkLiBcIiArIFwiVG8gaWdub3JlIGFuIGFjdGlvbiwgeW91IG11c3QgZXhwbGljaXRseSByZXR1cm4gdGhlIHByZXZpb3VzIHN0YXRlLiBcIiArIFwiSWYgeW91IHdhbnQgdGhpcyByZWR1Y2VyIHRvIGhvbGQgbm8gdmFsdWUsIHlvdSBjYW4gcmV0dXJuIG51bGwgaW5zdGVhZCBvZiB1bmRlZmluZWQuXCI7XG59XG5cbmZ1bmN0aW9uIGdldFVuZXhwZWN0ZWRTdGF0ZVNoYXBlV2FybmluZ01lc3NhZ2UoaW5wdXRTdGF0ZSwgcmVkdWNlcnMsIGFjdGlvbiwgdW5leHBlY3RlZEtleUNhY2hlKSB7XG4gIHZhciByZWR1Y2VyS2V5cyA9IE9iamVjdC5rZXlzKHJlZHVjZXJzKTtcbiAgdmFyIGFyZ3VtZW50TmFtZSA9IGFjdGlvbiAmJiBhY3Rpb24udHlwZSA9PT0gQWN0aW9uVHlwZXMuSU5JVCA/ICdwcmVsb2FkZWRTdGF0ZSBhcmd1bWVudCBwYXNzZWQgdG8gY3JlYXRlU3RvcmUnIDogJ3ByZXZpb3VzIHN0YXRlIHJlY2VpdmVkIGJ5IHRoZSByZWR1Y2VyJztcblxuICBpZiAocmVkdWNlcktleXMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuICdTdG9yZSBkb2VzIG5vdCBoYXZlIGEgdmFsaWQgcmVkdWNlci4gTWFrZSBzdXJlIHRoZSBhcmd1bWVudCBwYXNzZWQgJyArICd0byBjb21iaW5lUmVkdWNlcnMgaXMgYW4gb2JqZWN0IHdob3NlIHZhbHVlcyBhcmUgcmVkdWNlcnMuJztcbiAgfVxuXG4gIGlmICghaXNQbGFpbk9iamVjdChpbnB1dFN0YXRlKSkge1xuICAgIHJldHVybiBcIlRoZSBcIiArIGFyZ3VtZW50TmFtZSArIFwiIGhhcyB1bmV4cGVjdGVkIHR5cGUgb2YgXFxcIlwiICsge30udG9TdHJpbmcuY2FsbChpbnB1dFN0YXRlKS5tYXRjaCgvXFxzKFthLXp8QS1aXSspLylbMV0gKyBcIlxcXCIuIEV4cGVjdGVkIGFyZ3VtZW50IHRvIGJlIGFuIG9iamVjdCB3aXRoIHRoZSBmb2xsb3dpbmcgXCIgKyAoXCJrZXlzOiBcXFwiXCIgKyByZWR1Y2VyS2V5cy5qb2luKCdcIiwgXCInKSArIFwiXFxcIlwiKTtcbiAgfVxuXG4gIHZhciB1bmV4cGVjdGVkS2V5cyA9IE9iamVjdC5rZXlzKGlucHV0U3RhdGUpLmZpbHRlcihmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuICFyZWR1Y2Vycy5oYXNPd25Qcm9wZXJ0eShrZXkpICYmICF1bmV4cGVjdGVkS2V5Q2FjaGVba2V5XTtcbiAgfSk7XG4gIHVuZXhwZWN0ZWRLZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIHVuZXhwZWN0ZWRLZXlDYWNoZVtrZXldID0gdHJ1ZTtcbiAgfSk7XG4gIGlmIChhY3Rpb24gJiYgYWN0aW9uLnR5cGUgPT09IEFjdGlvblR5cGVzLlJFUExBQ0UpIHJldHVybjtcblxuICBpZiAodW5leHBlY3RlZEtleXMubGVuZ3RoID4gMCkge1xuICAgIHJldHVybiBcIlVuZXhwZWN0ZWQgXCIgKyAodW5leHBlY3RlZEtleXMubGVuZ3RoID4gMSA/ICdrZXlzJyA6ICdrZXknKSArIFwiIFwiICsgKFwiXFxcIlwiICsgdW5leHBlY3RlZEtleXMuam9pbignXCIsIFwiJykgKyBcIlxcXCIgZm91bmQgaW4gXCIgKyBhcmd1bWVudE5hbWUgKyBcIi4gXCIpICsgXCJFeHBlY3RlZCB0byBmaW5kIG9uZSBvZiB0aGUga25vd24gcmVkdWNlciBrZXlzIGluc3RlYWQ6IFwiICsgKFwiXFxcIlwiICsgcmVkdWNlcktleXMuam9pbignXCIsIFwiJykgKyBcIlxcXCIuIFVuZXhwZWN0ZWQga2V5cyB3aWxsIGJlIGlnbm9yZWQuXCIpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGFzc2VydFJlZHVjZXJTaGFwZShyZWR1Y2Vycykge1xuICBPYmplY3Qua2V5cyhyZWR1Y2VycykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgdmFyIHJlZHVjZXIgPSByZWR1Y2Vyc1trZXldO1xuICAgIHZhciBpbml0aWFsU3RhdGUgPSByZWR1Y2VyKHVuZGVmaW5lZCwge1xuICAgICAgdHlwZTogQWN0aW9uVHlwZXMuSU5JVFxuICAgIH0pO1xuXG4gICAgaWYgKHR5cGVvZiBpbml0aWFsU3RhdGUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJSZWR1Y2VyIFxcXCJcIiArIGtleSArIFwiXFxcIiByZXR1cm5lZCB1bmRlZmluZWQgZHVyaW5nIGluaXRpYWxpemF0aW9uLiBcIiArIFwiSWYgdGhlIHN0YXRlIHBhc3NlZCB0byB0aGUgcmVkdWNlciBpcyB1bmRlZmluZWQsIHlvdSBtdXN0IFwiICsgXCJleHBsaWNpdGx5IHJldHVybiB0aGUgaW5pdGlhbCBzdGF0ZS4gVGhlIGluaXRpYWwgc3RhdGUgbWF5IFwiICsgXCJub3QgYmUgdW5kZWZpbmVkLiBJZiB5b3UgZG9uJ3Qgd2FudCB0byBzZXQgYSB2YWx1ZSBmb3IgdGhpcyByZWR1Y2VyLCBcIiArIFwieW91IGNhbiB1c2UgbnVsbCBpbnN0ZWFkIG9mIHVuZGVmaW5lZC5cIik7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiByZWR1Y2VyKHVuZGVmaW5lZCwge1xuICAgICAgdHlwZTogQWN0aW9uVHlwZXMuUFJPQkVfVU5LTk9XTl9BQ1RJT04oKVxuICAgIH0pID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUmVkdWNlciBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgcmV0dXJuZWQgdW5kZWZpbmVkIHdoZW4gcHJvYmVkIHdpdGggYSByYW5kb20gdHlwZS4gXCIgKyAoXCJEb24ndCB0cnkgdG8gaGFuZGxlIFwiICsgQWN0aW9uVHlwZXMuSU5JVCArIFwiIG9yIG90aGVyIGFjdGlvbnMgaW4gXFxcInJlZHV4LypcXFwiIFwiKSArIFwibmFtZXNwYWNlLiBUaGV5IGFyZSBjb25zaWRlcmVkIHByaXZhdGUuIEluc3RlYWQsIHlvdSBtdXN0IHJldHVybiB0aGUgXCIgKyBcImN1cnJlbnQgc3RhdGUgZm9yIGFueSB1bmtub3duIGFjdGlvbnMsIHVubGVzcyBpdCBpcyB1bmRlZmluZWQsIFwiICsgXCJpbiB3aGljaCBjYXNlIHlvdSBtdXN0IHJldHVybiB0aGUgaW5pdGlhbCBzdGF0ZSwgcmVnYXJkbGVzcyBvZiB0aGUgXCIgKyBcImFjdGlvbiB0eXBlLiBUaGUgaW5pdGlhbCBzdGF0ZSBtYXkgbm90IGJlIHVuZGVmaW5lZCwgYnV0IGNhbiBiZSBudWxsLlwiKTtcbiAgICB9XG4gIH0pO1xufVxuLyoqXG4gKiBUdXJucyBhbiBvYmplY3Qgd2hvc2UgdmFsdWVzIGFyZSBkaWZmZXJlbnQgcmVkdWNlciBmdW5jdGlvbnMsIGludG8gYSBzaW5nbGVcbiAqIHJlZHVjZXIgZnVuY3Rpb24uIEl0IHdpbGwgY2FsbCBldmVyeSBjaGlsZCByZWR1Y2VyLCBhbmQgZ2F0aGVyIHRoZWlyIHJlc3VsdHNcbiAqIGludG8gYSBzaW5nbGUgc3RhdGUgb2JqZWN0LCB3aG9zZSBrZXlzIGNvcnJlc3BvbmQgdG8gdGhlIGtleXMgb2YgdGhlIHBhc3NlZFxuICogcmVkdWNlciBmdW5jdGlvbnMuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHJlZHVjZXJzIEFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgY29ycmVzcG9uZCB0byBkaWZmZXJlbnRcbiAqIHJlZHVjZXIgZnVuY3Rpb25zIHRoYXQgbmVlZCB0byBiZSBjb21iaW5lZCBpbnRvIG9uZS4gT25lIGhhbmR5IHdheSB0byBvYnRhaW5cbiAqIGl0IGlzIHRvIHVzZSBFUzYgYGltcG9ydCAqIGFzIHJlZHVjZXJzYCBzeW50YXguIFRoZSByZWR1Y2VycyBtYXkgbmV2ZXIgcmV0dXJuXG4gKiB1bmRlZmluZWQgZm9yIGFueSBhY3Rpb24uIEluc3RlYWQsIHRoZXkgc2hvdWxkIHJldHVybiB0aGVpciBpbml0aWFsIHN0YXRlXG4gKiBpZiB0aGUgc3RhdGUgcGFzc2VkIHRvIHRoZW0gd2FzIHVuZGVmaW5lZCwgYW5kIHRoZSBjdXJyZW50IHN0YXRlIGZvciBhbnlcbiAqIHVucmVjb2duaXplZCBhY3Rpb24uXG4gKlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBBIHJlZHVjZXIgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGV2ZXJ5IHJlZHVjZXIgaW5zaWRlIHRoZVxuICogcGFzc2VkIG9iamVjdCwgYW5kIGJ1aWxkcyBhIHN0YXRlIG9iamVjdCB3aXRoIHRoZSBzYW1lIHNoYXBlLlxuICovXG5cblxuZnVuY3Rpb24gY29tYmluZVJlZHVjZXJzKHJlZHVjZXJzKSB7XG4gIHZhciByZWR1Y2VyS2V5cyA9IE9iamVjdC5rZXlzKHJlZHVjZXJzKTtcbiAgdmFyIGZpbmFsUmVkdWNlcnMgPSB7fTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHJlZHVjZXJLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGtleSA9IHJlZHVjZXJLZXlzW2ldO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmICh0eXBlb2YgcmVkdWNlcnNba2V5XSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgd2FybmluZyhcIk5vIHJlZHVjZXIgcHJvdmlkZWQgZm9yIGtleSBcXFwiXCIgKyBrZXkgKyBcIlxcXCJcIik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiByZWR1Y2Vyc1trZXldID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBmaW5hbFJlZHVjZXJzW2tleV0gPSByZWR1Y2Vyc1trZXldO1xuICAgIH1cbiAgfVxuXG4gIHZhciBmaW5hbFJlZHVjZXJLZXlzID0gT2JqZWN0LmtleXMoZmluYWxSZWR1Y2Vycyk7IC8vIFRoaXMgaXMgdXNlZCB0byBtYWtlIHN1cmUgd2UgZG9uJ3Qgd2FybiBhYm91dCB0aGUgc2FtZVxuICAvLyBrZXlzIG11bHRpcGxlIHRpbWVzLlxuXG4gIHZhciB1bmV4cGVjdGVkS2V5Q2FjaGU7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB1bmV4cGVjdGVkS2V5Q2FjaGUgPSB7fTtcbiAgfVxuXG4gIHZhciBzaGFwZUFzc2VydGlvbkVycm9yO1xuXG4gIHRyeSB7XG4gICAgYXNzZXJ0UmVkdWNlclNoYXBlKGZpbmFsUmVkdWNlcnMpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgc2hhcGVBc3NlcnRpb25FcnJvciA9IGU7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gY29tYmluYXRpb24oc3RhdGUsIGFjdGlvbikge1xuICAgIGlmIChzdGF0ZSA9PT0gdm9pZCAwKSB7XG4gICAgICBzdGF0ZSA9IHt9O1xuICAgIH1cblxuICAgIGlmIChzaGFwZUFzc2VydGlvbkVycm9yKSB7XG4gICAgICB0aHJvdyBzaGFwZUFzc2VydGlvbkVycm9yO1xuICAgIH1cblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB2YXIgd2FybmluZ01lc3NhZ2UgPSBnZXRVbmV4cGVjdGVkU3RhdGVTaGFwZVdhcm5pbmdNZXNzYWdlKHN0YXRlLCBmaW5hbFJlZHVjZXJzLCBhY3Rpb24sIHVuZXhwZWN0ZWRLZXlDYWNoZSk7XG5cbiAgICAgIGlmICh3YXJuaW5nTWVzc2FnZSkge1xuICAgICAgICB3YXJuaW5nKHdhcm5pbmdNZXNzYWdlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgaGFzQ2hhbmdlZCA9IGZhbHNlO1xuICAgIHZhciBuZXh0U3RhdGUgPSB7fTtcblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBmaW5hbFJlZHVjZXJLZXlzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF9rZXkgPSBmaW5hbFJlZHVjZXJLZXlzW19pXTtcbiAgICAgIHZhciByZWR1Y2VyID0gZmluYWxSZWR1Y2Vyc1tfa2V5XTtcbiAgICAgIHZhciBwcmV2aW91c1N0YXRlRm9yS2V5ID0gc3RhdGVbX2tleV07XG4gICAgICB2YXIgbmV4dFN0YXRlRm9yS2V5ID0gcmVkdWNlcihwcmV2aW91c1N0YXRlRm9yS2V5LCBhY3Rpb24pO1xuXG4gICAgICBpZiAodHlwZW9mIG5leHRTdGF0ZUZvcktleSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgdmFyIGVycm9yTWVzc2FnZSA9IGdldFVuZGVmaW5lZFN0YXRlRXJyb3JNZXNzYWdlKF9rZXksIGFjdGlvbik7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvck1lc3NhZ2UpO1xuICAgICAgfVxuXG4gICAgICBuZXh0U3RhdGVbX2tleV0gPSBuZXh0U3RhdGVGb3JLZXk7XG4gICAgICBoYXNDaGFuZ2VkID0gaGFzQ2hhbmdlZCB8fCBuZXh0U3RhdGVGb3JLZXkgIT09IHByZXZpb3VzU3RhdGVGb3JLZXk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGhhc0NoYW5nZWQgPyBuZXh0U3RhdGUgOiBzdGF0ZTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYmluZEFjdGlvbkNyZWF0b3IoYWN0aW9uQ3JlYXRvciwgZGlzcGF0Y2gpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZGlzcGF0Y2goYWN0aW9uQ3JlYXRvci5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfTtcbn1cbi8qKlxuICogVHVybnMgYW4gb2JqZWN0IHdob3NlIHZhbHVlcyBhcmUgYWN0aW9uIGNyZWF0b3JzLCBpbnRvIGFuIG9iamVjdCB3aXRoIHRoZVxuICogc2FtZSBrZXlzLCBidXQgd2l0aCBldmVyeSBmdW5jdGlvbiB3cmFwcGVkIGludG8gYSBgZGlzcGF0Y2hgIGNhbGwgc28gdGhleVxuICogbWF5IGJlIGludm9rZWQgZGlyZWN0bHkuIFRoaXMgaXMganVzdCBhIGNvbnZlbmllbmNlIG1ldGhvZCwgYXMgeW91IGNhbiBjYWxsXG4gKiBgc3RvcmUuZGlzcGF0Y2goTXlBY3Rpb25DcmVhdG9ycy5kb1NvbWV0aGluZygpKWAgeW91cnNlbGYganVzdCBmaW5lLlxuICpcbiAqIEZvciBjb252ZW5pZW5jZSwgeW91IGNhbiBhbHNvIHBhc3MgYW4gYWN0aW9uIGNyZWF0b3IgYXMgdGhlIGZpcnN0IGFyZ3VtZW50LFxuICogYW5kIGdldCBhIGRpc3BhdGNoIHdyYXBwZWQgZnVuY3Rpb24gaW4gcmV0dXJuLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb258T2JqZWN0fSBhY3Rpb25DcmVhdG9ycyBBbiBvYmplY3Qgd2hvc2UgdmFsdWVzIGFyZSBhY3Rpb25cbiAqIGNyZWF0b3IgZnVuY3Rpb25zLiBPbmUgaGFuZHkgd2F5IHRvIG9idGFpbiBpdCBpcyB0byB1c2UgRVM2IGBpbXBvcnQgKiBhc2BcbiAqIHN5bnRheC4gWW91IG1heSBhbHNvIHBhc3MgYSBzaW5nbGUgZnVuY3Rpb24uXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZGlzcGF0Y2ggVGhlIGBkaXNwYXRjaGAgZnVuY3Rpb24gYXZhaWxhYmxlIG9uIHlvdXIgUmVkdXhcbiAqIHN0b3JlLlxuICpcbiAqIEByZXR1cm5zIHtGdW5jdGlvbnxPYmplY3R9IFRoZSBvYmplY3QgbWltaWNraW5nIHRoZSBvcmlnaW5hbCBvYmplY3QsIGJ1dCB3aXRoXG4gKiBldmVyeSBhY3Rpb24gY3JlYXRvciB3cmFwcGVkIGludG8gdGhlIGBkaXNwYXRjaGAgY2FsbC4gSWYgeW91IHBhc3NlZCBhXG4gKiBmdW5jdGlvbiBhcyBgYWN0aW9uQ3JlYXRvcnNgLCB0aGUgcmV0dXJuIHZhbHVlIHdpbGwgYWxzbyBiZSBhIHNpbmdsZVxuICogZnVuY3Rpb24uXG4gKi9cblxuXG5mdW5jdGlvbiBiaW5kQWN0aW9uQ3JlYXRvcnMoYWN0aW9uQ3JlYXRvcnMsIGRpc3BhdGNoKSB7XG4gIGlmICh0eXBlb2YgYWN0aW9uQ3JlYXRvcnMgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gYmluZEFjdGlvbkNyZWF0b3IoYWN0aW9uQ3JlYXRvcnMsIGRpc3BhdGNoKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgYWN0aW9uQ3JlYXRvcnMgIT09ICdvYmplY3QnIHx8IGFjdGlvbkNyZWF0b3JzID09PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiYmluZEFjdGlvbkNyZWF0b3JzIGV4cGVjdGVkIGFuIG9iamVjdCBvciBhIGZ1bmN0aW9uLCBpbnN0ZWFkIHJlY2VpdmVkIFwiICsgKGFjdGlvbkNyZWF0b3JzID09PSBudWxsID8gJ251bGwnIDogdHlwZW9mIGFjdGlvbkNyZWF0b3JzKSArIFwiLiBcIiArIFwiRGlkIHlvdSB3cml0ZSBcXFwiaW1wb3J0IEFjdGlvbkNyZWF0b3JzIGZyb21cXFwiIGluc3RlYWQgb2YgXFxcImltcG9ydCAqIGFzIEFjdGlvbkNyZWF0b3JzIGZyb21cXFwiP1wiKTtcbiAgfVxuXG4gIHZhciBib3VuZEFjdGlvbkNyZWF0b3JzID0ge307XG5cbiAgZm9yICh2YXIga2V5IGluIGFjdGlvbkNyZWF0b3JzKSB7XG4gICAgdmFyIGFjdGlvbkNyZWF0b3IgPSBhY3Rpb25DcmVhdG9yc1trZXldO1xuXG4gICAgaWYgKHR5cGVvZiBhY3Rpb25DcmVhdG9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBib3VuZEFjdGlvbkNyZWF0b3JzW2tleV0gPSBiaW5kQWN0aW9uQ3JlYXRvcihhY3Rpb25DcmVhdG9yLCBkaXNwYXRjaCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGJvdW5kQWN0aW9uQ3JlYXRvcnM7XG59XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHtcbiAgaWYgKGtleSBpbiBvYmopIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIG9ialtrZXldID0gdmFsdWU7XG4gIH1cblxuICByZXR1cm4gb2JqO1xufVxuXG5mdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHtcbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpO1xuXG4gIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAga2V5cy5wdXNoLmFwcGx5KGtleXMsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KSk7XG4gIH1cblxuICBpZiAoZW51bWVyYWJsZU9ubHkpIGtleXMgPSBrZXlzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7XG4gICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7XG4gIH0pO1xuICByZXR1cm4ga2V5cztcbn1cblxuZnVuY3Rpb24gX29iamVjdFNwcmVhZDIodGFyZ2V0KSB7XG4gIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307XG5cbiAgICBpZiAoaSAlIDIpIHtcbiAgICAgIG93bktleXMoc291cmNlLCB0cnVlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7XG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBvd25LZXlzKHNvdXJjZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxuLyoqXG4gKiBDb21wb3NlcyBzaW5nbGUtYXJndW1lbnQgZnVuY3Rpb25zIGZyb20gcmlnaHQgdG8gbGVmdC4gVGhlIHJpZ2h0bW9zdFxuICogZnVuY3Rpb24gY2FuIHRha2UgbXVsdGlwbGUgYXJndW1lbnRzIGFzIGl0IHByb3ZpZGVzIHRoZSBzaWduYXR1cmUgZm9yXG4gKiB0aGUgcmVzdWx0aW5nIGNvbXBvc2l0ZSBmdW5jdGlvbi5cbiAqXG4gKiBAcGFyYW0gey4uLkZ1bmN0aW9ufSBmdW5jcyBUaGUgZnVuY3Rpb25zIHRvIGNvbXBvc2UuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgZnVuY3Rpb24gb2J0YWluZWQgYnkgY29tcG9zaW5nIHRoZSBhcmd1bWVudCBmdW5jdGlvbnNcbiAqIGZyb20gcmlnaHQgdG8gbGVmdC4gRm9yIGV4YW1wbGUsIGNvbXBvc2UoZiwgZywgaCkgaXMgaWRlbnRpY2FsIHRvIGRvaW5nXG4gKiAoLi4uYXJncykgPT4gZihnKGgoLi4uYXJncykpKS5cbiAqL1xuZnVuY3Rpb24gY29tcG9zZSgpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGZ1bmNzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGZ1bmNzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgaWYgKGZ1bmNzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoYXJnKSB7XG4gICAgICByZXR1cm4gYXJnO1xuICAgIH07XG4gIH1cblxuICBpZiAoZnVuY3MubGVuZ3RoID09PSAxKSB7XG4gICAgcmV0dXJuIGZ1bmNzWzBdO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmNzLnJlZHVjZShmdW5jdGlvbiAoYSwgYikge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gYShiLmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKSk7XG4gICAgfTtcbiAgfSk7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIHN0b3JlIGVuaGFuY2VyIHRoYXQgYXBwbGllcyBtaWRkbGV3YXJlIHRvIHRoZSBkaXNwYXRjaCBtZXRob2RcbiAqIG9mIHRoZSBSZWR1eCBzdG9yZS4gVGhpcyBpcyBoYW5keSBmb3IgYSB2YXJpZXR5IG9mIHRhc2tzLCBzdWNoIGFzIGV4cHJlc3NpbmdcbiAqIGFzeW5jaHJvbm91cyBhY3Rpb25zIGluIGEgY29uY2lzZSBtYW5uZXIsIG9yIGxvZ2dpbmcgZXZlcnkgYWN0aW9uIHBheWxvYWQuXG4gKlxuICogU2VlIGByZWR1eC10aHVua2AgcGFja2FnZSBhcyBhbiBleGFtcGxlIG9mIHRoZSBSZWR1eCBtaWRkbGV3YXJlLlxuICpcbiAqIEJlY2F1c2UgbWlkZGxld2FyZSBpcyBwb3RlbnRpYWxseSBhc3luY2hyb25vdXMsIHRoaXMgc2hvdWxkIGJlIHRoZSBmaXJzdFxuICogc3RvcmUgZW5oYW5jZXIgaW4gdGhlIGNvbXBvc2l0aW9uIGNoYWluLlxuICpcbiAqIE5vdGUgdGhhdCBlYWNoIG1pZGRsZXdhcmUgd2lsbCBiZSBnaXZlbiB0aGUgYGRpc3BhdGNoYCBhbmQgYGdldFN0YXRlYCBmdW5jdGlvbnNcbiAqIGFzIG5hbWVkIGFyZ3VtZW50cy5cbiAqXG4gKiBAcGFyYW0gey4uLkZ1bmN0aW9ufSBtaWRkbGV3YXJlcyBUaGUgbWlkZGxld2FyZSBjaGFpbiB0byBiZSBhcHBsaWVkLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBBIHN0b3JlIGVuaGFuY2VyIGFwcGx5aW5nIHRoZSBtaWRkbGV3YXJlLlxuICovXG5cbmZ1bmN0aW9uIGFwcGx5TWlkZGxld2FyZSgpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIG1pZGRsZXdhcmVzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIG1pZGRsZXdhcmVzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChjcmVhdGVTdG9yZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgc3RvcmUgPSBjcmVhdGVTdG9yZS5hcHBseSh2b2lkIDAsIGFyZ3VtZW50cyk7XG5cbiAgICAgIHZhciBfZGlzcGF0Y2ggPSBmdW5jdGlvbiBkaXNwYXRjaCgpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdEaXNwYXRjaGluZyB3aGlsZSBjb25zdHJ1Y3RpbmcgeW91ciBtaWRkbGV3YXJlIGlzIG5vdCBhbGxvd2VkLiAnICsgJ090aGVyIG1pZGRsZXdhcmUgd291bGQgbm90IGJlIGFwcGxpZWQgdG8gdGhpcyBkaXNwYXRjaC4nKTtcbiAgICAgIH07XG5cbiAgICAgIHZhciBtaWRkbGV3YXJlQVBJID0ge1xuICAgICAgICBnZXRTdGF0ZTogc3RvcmUuZ2V0U3RhdGUsXG4gICAgICAgIGRpc3BhdGNoOiBmdW5jdGlvbiBkaXNwYXRjaCgpIHtcbiAgICAgICAgICByZXR1cm4gX2Rpc3BhdGNoLmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIHZhciBjaGFpbiA9IG1pZGRsZXdhcmVzLm1hcChmdW5jdGlvbiAobWlkZGxld2FyZSkge1xuICAgICAgICByZXR1cm4gbWlkZGxld2FyZShtaWRkbGV3YXJlQVBJKTtcbiAgICAgIH0pO1xuICAgICAgX2Rpc3BhdGNoID0gY29tcG9zZS5hcHBseSh2b2lkIDAsIGNoYWluKShzdG9yZS5kaXNwYXRjaCk7XG4gICAgICByZXR1cm4gX29iamVjdFNwcmVhZDIoe30sIHN0b3JlLCB7XG4gICAgICAgIGRpc3BhdGNoOiBfZGlzcGF0Y2hcbiAgICAgIH0pO1xuICAgIH07XG4gIH07XG59XG5cbi8qXG4gKiBUaGlzIGlzIGEgZHVtbXkgZnVuY3Rpb24gdG8gY2hlY2sgaWYgdGhlIGZ1bmN0aW9uIG5hbWUgaGFzIGJlZW4gYWx0ZXJlZCBieSBtaW5pZmljYXRpb24uXG4gKiBJZiB0aGUgZnVuY3Rpb24gaGFzIGJlZW4gbWluaWZpZWQgYW5kIE5PREVfRU5WICE9PSAncHJvZHVjdGlvbicsIHdhcm4gdGhlIHVzZXIuXG4gKi9cblxuZnVuY3Rpb24gaXNDcnVzaGVkKCkge31cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgdHlwZW9mIGlzQ3J1c2hlZC5uYW1lID09PSAnc3RyaW5nJyAmJiBpc0NydXNoZWQubmFtZSAhPT0gJ2lzQ3J1c2hlZCcpIHtcbiAgd2FybmluZygnWW91IGFyZSBjdXJyZW50bHkgdXNpbmcgbWluaWZpZWQgY29kZSBvdXRzaWRlIG9mIE5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIi4gJyArICdUaGlzIG1lYW5zIHRoYXQgeW91IGFyZSBydW5uaW5nIGEgc2xvd2VyIGRldmVsb3BtZW50IGJ1aWxkIG9mIFJlZHV4LiAnICsgJ1lvdSBjYW4gdXNlIGxvb3NlLWVudmlmeSAoaHR0cHM6Ly9naXRodWIuY29tL3plcnRvc2gvbG9vc2UtZW52aWZ5KSBmb3IgYnJvd3NlcmlmeSAnICsgJ29yIHNldHRpbmcgbW9kZSB0byBwcm9kdWN0aW9uIGluIHdlYnBhY2sgKGh0dHBzOi8vd2VicGFjay5qcy5vcmcvY29uY2VwdHMvbW9kZS8pICcgKyAndG8gZW5zdXJlIHlvdSBoYXZlIHRoZSBjb3JyZWN0IGNvZGUgZm9yIHlvdXIgcHJvZHVjdGlvbiBidWlsZC4nKTtcbn1cblxuZXhwb3J0IHsgQWN0aW9uVHlwZXMgYXMgX19ET19OT1RfVVNFX19BY3Rpb25UeXBlcywgYXBwbHlNaWRkbGV3YXJlLCBiaW5kQWN0aW9uQ3JlYXRvcnMsIGNvbWJpbmVSZWR1Y2VycywgY29tcG9zZSwgY3JlYXRlU3RvcmUgfTtcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5leHBvcnQgdmFyIFJlYWN0UmVkdXhDb250ZXh0ID0gUmVhY3QuY3JlYXRlQ29udGV4dChudWxsKTtcbmV4cG9ydCBkZWZhdWx0IFJlYWN0UmVkdXhDb250ZXh0OyIsIi8vIERlZmF1bHQgdG8gYSBkdW1teSBcImJhdGNoXCIgaW1wbGVtZW50YXRpb24gdGhhdCBqdXN0IHJ1bnMgdGhlIGNhbGxiYWNrXG5mdW5jdGlvbiBkZWZhdWx0Tm9vcEJhdGNoKGNhbGxiYWNrKSB7XG4gIGNhbGxiYWNrKCk7XG59XG5cbnZhciBiYXRjaCA9IGRlZmF1bHROb29wQmF0Y2g7IC8vIEFsbG93IGluamVjdGluZyBhbm90aGVyIGJhdGNoaW5nIGZ1bmN0aW9uIGxhdGVyXG5cbmV4cG9ydCB2YXIgc2V0QmF0Y2ggPSBmdW5jdGlvbiBzZXRCYXRjaChuZXdCYXRjaCkge1xuICByZXR1cm4gYmF0Y2ggPSBuZXdCYXRjaDtcbn07IC8vIFN1cHBseSBhIGdldHRlciBqdXN0IHRvIHNraXAgZGVhbGluZyB3aXRoIEVTTSBiaW5kaW5nc1xuXG5leHBvcnQgdmFyIGdldEJhdGNoID0gZnVuY3Rpb24gZ2V0QmF0Y2goKSB7XG4gIHJldHVybiBiYXRjaDtcbn07IiwiaW1wb3J0IHsgZ2V0QmF0Y2ggfSBmcm9tICcuL2JhdGNoJzsgLy8gZW5jYXBzdWxhdGVzIHRoZSBzdWJzY3JpcHRpb24gbG9naWMgZm9yIGNvbm5lY3RpbmcgYSBjb21wb25lbnQgdG8gdGhlIHJlZHV4IHN0b3JlLCBhc1xuLy8gd2VsbCBhcyBuZXN0aW5nIHN1YnNjcmlwdGlvbnMgb2YgZGVzY2VuZGFudCBjb21wb25lbnRzLCBzbyB0aGF0IHdlIGNhbiBlbnN1cmUgdGhlXG4vLyBhbmNlc3RvciBjb21wb25lbnRzIHJlLXJlbmRlciBiZWZvcmUgZGVzY2VuZGFudHNcblxudmFyIENMRUFSRUQgPSBudWxsO1xudmFyIG51bGxMaXN0ZW5lcnMgPSB7XG4gIG5vdGlmeTogZnVuY3Rpb24gbm90aWZ5KCkge31cbn07XG5cbmZ1bmN0aW9uIGNyZWF0ZUxpc3RlbmVyQ29sbGVjdGlvbigpIHtcbiAgdmFyIGJhdGNoID0gZ2V0QmF0Y2goKTsgLy8gdGhlIGN1cnJlbnQvbmV4dCBwYXR0ZXJuIGlzIGNvcGllZCBmcm9tIHJlZHV4J3MgY3JlYXRlU3RvcmUgY29kZS5cbiAgLy8gVE9ETzogcmVmYWN0b3IrZXhwb3NlIHRoYXQgY29kZSB0byBiZSByZXVzYWJsZSBoZXJlP1xuXG4gIHZhciBjdXJyZW50ID0gW107XG4gIHZhciBuZXh0ID0gW107XG4gIHJldHVybiB7XG4gICAgY2xlYXI6IGZ1bmN0aW9uIGNsZWFyKCkge1xuICAgICAgbmV4dCA9IENMRUFSRUQ7XG4gICAgICBjdXJyZW50ID0gQ0xFQVJFRDtcbiAgICB9LFxuICAgIG5vdGlmeTogZnVuY3Rpb24gbm90aWZ5KCkge1xuICAgICAgdmFyIGxpc3RlbmVycyA9IGN1cnJlbnQgPSBuZXh0O1xuICAgICAgYmF0Y2goZnVuY3Rpb24gKCkge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3RlbmVycy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGxpc3RlbmVyc1tpXSgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9LFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIG5leHQ7XG4gICAgfSxcbiAgICBzdWJzY3JpYmU6IGZ1bmN0aW9uIHN1YnNjcmliZShsaXN0ZW5lcikge1xuICAgICAgdmFyIGlzU3Vic2NyaWJlZCA9IHRydWU7XG4gICAgICBpZiAobmV4dCA9PT0gY3VycmVudCkgbmV4dCA9IGN1cnJlbnQuc2xpY2UoKTtcbiAgICAgIG5leHQucHVzaChsaXN0ZW5lcik7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gdW5zdWJzY3JpYmUoKSB7XG4gICAgICAgIGlmICghaXNTdWJzY3JpYmVkIHx8IGN1cnJlbnQgPT09IENMRUFSRUQpIHJldHVybjtcbiAgICAgICAgaXNTdWJzY3JpYmVkID0gZmFsc2U7XG4gICAgICAgIGlmIChuZXh0ID09PSBjdXJyZW50KSBuZXh0ID0gY3VycmVudC5zbGljZSgpO1xuICAgICAgICBuZXh0LnNwbGljZShuZXh0LmluZGV4T2YobGlzdGVuZXIpLCAxKTtcbiAgICAgIH07XG4gICAgfVxuICB9O1xufVxuXG52YXIgU3Vic2NyaXB0aW9uID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gU3Vic2NyaXB0aW9uKHN0b3JlLCBwYXJlbnRTdWIpIHtcbiAgICB0aGlzLnN0b3JlID0gc3RvcmU7XG4gICAgdGhpcy5wYXJlbnRTdWIgPSBwYXJlbnRTdWI7XG4gICAgdGhpcy51bnN1YnNjcmliZSA9IG51bGw7XG4gICAgdGhpcy5saXN0ZW5lcnMgPSBudWxsTGlzdGVuZXJzO1xuICAgIHRoaXMuaGFuZGxlQ2hhbmdlV3JhcHBlciA9IHRoaXMuaGFuZGxlQ2hhbmdlV3JhcHBlci5iaW5kKHRoaXMpO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFN1YnNjcmlwdGlvbi5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmFkZE5lc3RlZFN1YiA9IGZ1bmN0aW9uIGFkZE5lc3RlZFN1YihsaXN0ZW5lcikge1xuICAgIHRoaXMudHJ5U3Vic2NyaWJlKCk7XG4gICAgcmV0dXJuIHRoaXMubGlzdGVuZXJzLnN1YnNjcmliZShsaXN0ZW5lcik7XG4gIH07XG5cbiAgX3Byb3RvLm5vdGlmeU5lc3RlZFN1YnMgPSBmdW5jdGlvbiBub3RpZnlOZXN0ZWRTdWJzKCkge1xuICAgIHRoaXMubGlzdGVuZXJzLm5vdGlmeSgpO1xuICB9O1xuXG4gIF9wcm90by5oYW5kbGVDaGFuZ2VXcmFwcGVyID0gZnVuY3Rpb24gaGFuZGxlQ2hhbmdlV3JhcHBlcigpIHtcbiAgICBpZiAodGhpcy5vblN0YXRlQ2hhbmdlKSB7XG4gICAgICB0aGlzLm9uU3RhdGVDaGFuZ2UoKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLmlzU3Vic2NyaWJlZCA9IGZ1bmN0aW9uIGlzU3Vic2NyaWJlZCgpIHtcbiAgICByZXR1cm4gQm9vbGVhbih0aGlzLnVuc3Vic2NyaWJlKTtcbiAgfTtcblxuICBfcHJvdG8udHJ5U3Vic2NyaWJlID0gZnVuY3Rpb24gdHJ5U3Vic2NyaWJlKCkge1xuICAgIGlmICghdGhpcy51bnN1YnNjcmliZSkge1xuICAgICAgdGhpcy51bnN1YnNjcmliZSA9IHRoaXMucGFyZW50U3ViID8gdGhpcy5wYXJlbnRTdWIuYWRkTmVzdGVkU3ViKHRoaXMuaGFuZGxlQ2hhbmdlV3JhcHBlcikgOiB0aGlzLnN0b3JlLnN1YnNjcmliZSh0aGlzLmhhbmRsZUNoYW5nZVdyYXBwZXIpO1xuICAgICAgdGhpcy5saXN0ZW5lcnMgPSBjcmVhdGVMaXN0ZW5lckNvbGxlY3Rpb24oKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLnRyeVVuc3Vic2NyaWJlID0gZnVuY3Rpb24gdHJ5VW5zdWJzY3JpYmUoKSB7XG4gICAgaWYgKHRoaXMudW5zdWJzY3JpYmUpIHtcbiAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgIHRoaXMudW5zdWJzY3JpYmUgPSBudWxsO1xuICAgICAgdGhpcy5saXN0ZW5lcnMuY2xlYXIoKTtcbiAgICAgIHRoaXMubGlzdGVuZXJzID0gbnVsbExpc3RlbmVycztcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIFN1YnNjcmlwdGlvbjtcbn0oKTtcblxuZXhwb3J0IHsgU3Vic2NyaXB0aW9uIGFzIGRlZmF1bHQgfTsiLCJpbXBvcnQgUmVhY3QsIHsgdXNlTWVtbywgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IFJlYWN0UmVkdXhDb250ZXh0IH0gZnJvbSAnLi9Db250ZXh0JztcbmltcG9ydCBTdWJzY3JpcHRpb24gZnJvbSAnLi4vdXRpbHMvU3Vic2NyaXB0aW9uJztcblxuZnVuY3Rpb24gUHJvdmlkZXIoX3JlZikge1xuICB2YXIgc3RvcmUgPSBfcmVmLnN0b3JlLFxuICAgICAgY29udGV4dCA9IF9yZWYuY29udGV4dCxcbiAgICAgIGNoaWxkcmVuID0gX3JlZi5jaGlsZHJlbjtcbiAgdmFyIGNvbnRleHRWYWx1ZSA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgIHZhciBzdWJzY3JpcHRpb24gPSBuZXcgU3Vic2NyaXB0aW9uKHN0b3JlKTtcbiAgICBzdWJzY3JpcHRpb24ub25TdGF0ZUNoYW5nZSA9IHN1YnNjcmlwdGlvbi5ub3RpZnlOZXN0ZWRTdWJzO1xuICAgIHJldHVybiB7XG4gICAgICBzdG9yZTogc3RvcmUsXG4gICAgICBzdWJzY3JpcHRpb246IHN1YnNjcmlwdGlvblxuICAgIH07XG4gIH0sIFtzdG9yZV0pO1xuICB2YXIgcHJldmlvdXNTdGF0ZSA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBzdG9yZS5nZXRTdGF0ZSgpO1xuICB9LCBbc3RvcmVdKTtcbiAgdXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc3Vic2NyaXB0aW9uID0gY29udGV4dFZhbHVlLnN1YnNjcmlwdGlvbjtcbiAgICBzdWJzY3JpcHRpb24udHJ5U3Vic2NyaWJlKCk7XG5cbiAgICBpZiAocHJldmlvdXNTdGF0ZSAhPT0gc3RvcmUuZ2V0U3RhdGUoKSkge1xuICAgICAgc3Vic2NyaXB0aW9uLm5vdGlmeU5lc3RlZFN1YnMoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgc3Vic2NyaXB0aW9uLnRyeVVuc3Vic2NyaWJlKCk7XG4gICAgICBzdWJzY3JpcHRpb24ub25TdGF0ZUNoYW5nZSA9IG51bGw7XG4gICAgfTtcbiAgfSwgW2NvbnRleHRWYWx1ZSwgcHJldmlvdXNTdGF0ZV0pO1xuICB2YXIgQ29udGV4dCA9IGNvbnRleHQgfHwgUmVhY3RSZWR1eENvbnRleHQ7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogY29udGV4dFZhbHVlXG4gIH0sIGNoaWxkcmVuKTtcbn1cblxuUHJvdmlkZXIucHJvcFR5cGVzID0ge1xuICBzdG9yZTogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBzdWJzY3JpYmU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgZGlzcGF0Y2g6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgZ2V0U3RhdGU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWRcbiAgfSksXG4gIGNvbnRleHQ6IFByb3BUeXBlcy5vYmplY3QsXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMuYW55XG59O1xuZXhwb3J0IGRlZmF1bHQgUHJvdmlkZXI7IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2V4dGVuZHMoKSB7XG4gIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcblxuICByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKSB7XG4gIGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9O1xuICB2YXIgdGFyZ2V0ID0ge307XG4gIHZhciBzb3VyY2VLZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTtcbiAgdmFyIGtleSwgaTtcblxuICBmb3IgKGkgPSAwOyBpIDwgc291cmNlS2V5cy5sZW5ndGg7IGkrKykge1xuICAgIGtleSA9IHNvdXJjZUtleXNbaV07XG4gICAgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTtcbiAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn0iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IGhvaXN0U3RhdGljcyBmcm9tICdob2lzdC1ub24tcmVhY3Qtc3RhdGljcyc7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gJ2ludmFyaWFudCc7XG5pbXBvcnQgUmVhY3QsIHsgdXNlQ29udGV4dCwgdXNlTWVtbywgdXNlRWZmZWN0LCB1c2VMYXlvdXRFZmZlY3QsIHVzZVJlZiwgdXNlUmVkdWNlciB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGlzVmFsaWRFbGVtZW50VHlwZSwgaXNDb250ZXh0Q29uc3VtZXIgfSBmcm9tICdyZWFjdC1pcyc7XG5pbXBvcnQgU3Vic2NyaXB0aW9uIGZyb20gJy4uL3V0aWxzL1N1YnNjcmlwdGlvbic7XG5pbXBvcnQgeyBSZWFjdFJlZHV4Q29udGV4dCB9IGZyb20gJy4vQ29udGV4dCc7IC8vIERlZmluZSBzb21lIGNvbnN0YW50IGFycmF5cyBqdXN0IHRvIGF2b2lkIHJlLWNyZWF0aW5nIHRoZXNlXG5cbnZhciBFTVBUWV9BUlJBWSA9IFtdO1xudmFyIE5PX1NVQlNDUklQVElPTl9BUlJBWSA9IFtudWxsLCBudWxsXTtcblxudmFyIHN0cmluZ2lmeUNvbXBvbmVudCA9IGZ1bmN0aW9uIHN0cmluZ2lmeUNvbXBvbmVudChDb21wKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KENvbXApO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICByZXR1cm4gU3RyaW5nKENvbXApO1xuICB9XG59O1xuXG5mdW5jdGlvbiBzdG9yZVN0YXRlVXBkYXRlc1JlZHVjZXIoc3RhdGUsIGFjdGlvbikge1xuICB2YXIgdXBkYXRlQ291bnQgPSBzdGF0ZVsxXTtcbiAgcmV0dXJuIFthY3Rpb24ucGF5bG9hZCwgdXBkYXRlQ291bnQgKyAxXTtcbn1cblxudmFyIGluaXRTdGF0ZVVwZGF0ZXMgPSBmdW5jdGlvbiBpbml0U3RhdGVVcGRhdGVzKCkge1xuICByZXR1cm4gW251bGwsIDBdO1xufTsgLy8gUmVhY3QgY3VycmVudGx5IHRocm93cyBhIHdhcm5pbmcgd2hlbiB1c2luZyB1c2VMYXlvdXRFZmZlY3Qgb24gdGhlIHNlcnZlci5cbi8vIFRvIGdldCBhcm91bmQgaXQsIHdlIGNhbiBjb25kaXRpb25hbGx5IHVzZUVmZmVjdCBvbiB0aGUgc2VydmVyIChuby1vcCkgYW5kXG4vLyB1c2VMYXlvdXRFZmZlY3QgaW4gdGhlIGJyb3dzZXIuIFdlIG5lZWQgdXNlTGF5b3V0RWZmZWN0IGJlY2F1c2Ugd2Ugd2FudFxuLy8gYGNvbm5lY3RgIHRvIHBlcmZvcm0gc3luYyB1cGRhdGVzIHRvIGEgcmVmIHRvIHNhdmUgdGhlIGxhdGVzdCBwcm9wcyBhZnRlclxuLy8gYSByZW5kZXIgaXMgYWN0dWFsbHkgY29tbWl0dGVkIHRvIHRoZSBET00uXG5cblxudmFyIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2Ygd2luZG93LmRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2Ygd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgIT09ICd1bmRlZmluZWQnID8gdXNlTGF5b3V0RWZmZWN0IDogdXNlRWZmZWN0O1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY29ubmVjdEFkdmFuY2VkKFxuLypcbiAgc2VsZWN0b3JGYWN0b3J5IGlzIGEgZnVuYyB0aGF0IGlzIHJlc3BvbnNpYmxlIGZvciByZXR1cm5pbmcgdGhlIHNlbGVjdG9yIGZ1bmN0aW9uIHVzZWQgdG9cbiAgY29tcHV0ZSBuZXcgcHJvcHMgZnJvbSBzdGF0ZSwgcHJvcHMsIGFuZCBkaXNwYXRjaC4gRm9yIGV4YW1wbGU6XG4gICAgIGV4cG9ydCBkZWZhdWx0IGNvbm5lY3RBZHZhbmNlZCgoZGlzcGF0Y2gsIG9wdGlvbnMpID0+IChzdGF0ZSwgcHJvcHMpID0+ICh7XG4gICAgICB0aGluZzogc3RhdGUudGhpbmdzW3Byb3BzLnRoaW5nSWRdLFxuICAgICAgc2F2ZVRoaW5nOiBmaWVsZHMgPT4gZGlzcGF0Y2goYWN0aW9uQ3JlYXRvcnMuc2F2ZVRoaW5nKHByb3BzLnRoaW5nSWQsIGZpZWxkcykpLFxuICAgIH0pKShZb3VyQ29tcG9uZW50KVxuICAgQWNjZXNzIHRvIGRpc3BhdGNoIGlzIHByb3ZpZGVkIHRvIHRoZSBmYWN0b3J5IHNvIHNlbGVjdG9yRmFjdG9yaWVzIGNhbiBiaW5kIGFjdGlvbkNyZWF0b3JzXG4gIG91dHNpZGUgb2YgdGhlaXIgc2VsZWN0b3IgYXMgYW4gb3B0aW1pemF0aW9uLiBPcHRpb25zIHBhc3NlZCB0byBjb25uZWN0QWR2YW5jZWQgYXJlIHBhc3NlZCB0b1xuICB0aGUgc2VsZWN0b3JGYWN0b3J5LCBhbG9uZyB3aXRoIGRpc3BsYXlOYW1lIGFuZCBXcmFwcGVkQ29tcG9uZW50LCBhcyB0aGUgc2Vjb25kIGFyZ3VtZW50LlxuICAgTm90ZSB0aGF0IHNlbGVjdG9yRmFjdG9yeSBpcyByZXNwb25zaWJsZSBmb3IgYWxsIGNhY2hpbmcvbWVtb2l6YXRpb24gb2YgaW5ib3VuZCBhbmQgb3V0Ym91bmRcbiAgcHJvcHMuIERvIG5vdCB1c2UgY29ubmVjdEFkdmFuY2VkIGRpcmVjdGx5IHdpdGhvdXQgbWVtb2l6aW5nIHJlc3VsdHMgYmV0d2VlbiBjYWxscyB0byB5b3VyXG4gIHNlbGVjdG9yLCBvdGhlcndpc2UgdGhlIENvbm5lY3QgY29tcG9uZW50IHdpbGwgcmUtcmVuZGVyIG9uIGV2ZXJ5IHN0YXRlIG9yIHByb3BzIGNoYW5nZS5cbiovXG5zZWxlY3RvckZhY3RvcnksIC8vIG9wdGlvbnMgb2JqZWN0OlxuX3JlZikge1xuICBpZiAoX3JlZiA9PT0gdm9pZCAwKSB7XG4gICAgX3JlZiA9IHt9O1xuICB9XG5cbiAgdmFyIF9yZWYyID0gX3JlZixcbiAgICAgIF9yZWYyJGdldERpc3BsYXlOYW1lID0gX3JlZjIuZ2V0RGlzcGxheU5hbWUsXG4gICAgICBnZXREaXNwbGF5TmFtZSA9IF9yZWYyJGdldERpc3BsYXlOYW1lID09PSB2b2lkIDAgPyBmdW5jdGlvbiAobmFtZSkge1xuICAgIHJldHVybiBcIkNvbm5lY3RBZHZhbmNlZChcIiArIG5hbWUgKyBcIilcIjtcbiAgfSA6IF9yZWYyJGdldERpc3BsYXlOYW1lLFxuICAgICAgX3JlZjIkbWV0aG9kTmFtZSA9IF9yZWYyLm1ldGhvZE5hbWUsXG4gICAgICBtZXRob2ROYW1lID0gX3JlZjIkbWV0aG9kTmFtZSA9PT0gdm9pZCAwID8gJ2Nvbm5lY3RBZHZhbmNlZCcgOiBfcmVmMiRtZXRob2ROYW1lLFxuICAgICAgX3JlZjIkcmVuZGVyQ291bnRQcm9wID0gX3JlZjIucmVuZGVyQ291bnRQcm9wLFxuICAgICAgcmVuZGVyQ291bnRQcm9wID0gX3JlZjIkcmVuZGVyQ291bnRQcm9wID09PSB2b2lkIDAgPyB1bmRlZmluZWQgOiBfcmVmMiRyZW5kZXJDb3VudFByb3AsXG4gICAgICBfcmVmMiRzaG91bGRIYW5kbGVTdGEgPSBfcmVmMi5zaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMsXG4gICAgICBzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMgPSBfcmVmMiRzaG91bGRIYW5kbGVTdGEgPT09IHZvaWQgMCA/IHRydWUgOiBfcmVmMiRzaG91bGRIYW5kbGVTdGEsXG4gICAgICBfcmVmMiRzdG9yZUtleSA9IF9yZWYyLnN0b3JlS2V5LFxuICAgICAgc3RvcmVLZXkgPSBfcmVmMiRzdG9yZUtleSA9PT0gdm9pZCAwID8gJ3N0b3JlJyA6IF9yZWYyJHN0b3JlS2V5LFxuICAgICAgX3JlZjIkd2l0aFJlZiA9IF9yZWYyLndpdGhSZWYsXG4gICAgICB3aXRoUmVmID0gX3JlZjIkd2l0aFJlZiA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmMiR3aXRoUmVmLFxuICAgICAgX3JlZjIkZm9yd2FyZFJlZiA9IF9yZWYyLmZvcndhcmRSZWYsXG4gICAgICBmb3J3YXJkUmVmID0gX3JlZjIkZm9yd2FyZFJlZiA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmMiRmb3J3YXJkUmVmLFxuICAgICAgX3JlZjIkY29udGV4dCA9IF9yZWYyLmNvbnRleHQsXG4gICAgICBjb250ZXh0ID0gX3JlZjIkY29udGV4dCA9PT0gdm9pZCAwID8gUmVhY3RSZWR1eENvbnRleHQgOiBfcmVmMiRjb250ZXh0LFxuICAgICAgY29ubmVjdE9wdGlvbnMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmMiwgW1wiZ2V0RGlzcGxheU5hbWVcIiwgXCJtZXRob2ROYW1lXCIsIFwicmVuZGVyQ291bnRQcm9wXCIsIFwic2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzXCIsIFwic3RvcmVLZXlcIiwgXCJ3aXRoUmVmXCIsIFwiZm9yd2FyZFJlZlwiLCBcImNvbnRleHRcIl0pO1xuXG4gIGludmFyaWFudChyZW5kZXJDb3VudFByb3AgPT09IHVuZGVmaW5lZCwgXCJyZW5kZXJDb3VudFByb3AgaXMgcmVtb3ZlZC4gcmVuZGVyIGNvdW50aW5nIGlzIGJ1aWx0IGludG8gdGhlIGxhdGVzdCBSZWFjdCBEZXYgVG9vbHMgcHJvZmlsaW5nIGV4dGVuc2lvblwiKTtcbiAgaW52YXJpYW50KCF3aXRoUmVmLCAnd2l0aFJlZiBpcyByZW1vdmVkLiBUbyBhY2Nlc3MgdGhlIHdyYXBwZWQgaW5zdGFuY2UsIHVzZSBhIHJlZiBvbiB0aGUgY29ubmVjdGVkIGNvbXBvbmVudCcpO1xuICB2YXIgY3VzdG9tU3RvcmVXYXJuaW5nTWVzc2FnZSA9ICdUbyB1c2UgYSBjdXN0b20gUmVkdXggc3RvcmUgZm9yIHNwZWNpZmljIGNvbXBvbmVudHMsIGNyZWF0ZSBhIGN1c3RvbSBSZWFjdCBjb250ZXh0IHdpdGggJyArIFwiUmVhY3QuY3JlYXRlQ29udGV4dCgpLCBhbmQgcGFzcyB0aGUgY29udGV4dCBvYmplY3QgdG8gUmVhY3QgUmVkdXgncyBQcm92aWRlciBhbmQgc3BlY2lmaWMgY29tcG9uZW50c1wiICsgJyBsaWtlOiA8UHJvdmlkZXIgY29udGV4dD17TXlDb250ZXh0fT48Q29ubmVjdGVkQ29tcG9uZW50IGNvbnRleHQ9e015Q29udGV4dH0gLz48L1Byb3ZpZGVyPi4gJyArICdZb3UgbWF5IGFsc28gcGFzcyBhIHtjb250ZXh0IDogTXlDb250ZXh0fSBvcHRpb24gdG8gY29ubmVjdCc7XG4gIGludmFyaWFudChzdG9yZUtleSA9PT0gJ3N0b3JlJywgJ3N0b3JlS2V5IGhhcyBiZWVuIHJlbW92ZWQgYW5kIGRvZXMgbm90IGRvIGFueXRoaW5nLiAnICsgY3VzdG9tU3RvcmVXYXJuaW5nTWVzc2FnZSk7XG4gIHZhciBDb250ZXh0ID0gY29udGV4dDtcbiAgcmV0dXJuIGZ1bmN0aW9uIHdyYXBXaXRoQ29ubmVjdChXcmFwcGVkQ29tcG9uZW50KSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGludmFyaWFudChpc1ZhbGlkRWxlbWVudFR5cGUoV3JhcHBlZENvbXBvbmVudCksIFwiWW91IG11c3QgcGFzcyBhIGNvbXBvbmVudCB0byB0aGUgZnVuY3Rpb24gcmV0dXJuZWQgYnkgXCIgKyAobWV0aG9kTmFtZSArIFwiLiBJbnN0ZWFkIHJlY2VpdmVkIFwiICsgc3RyaW5naWZ5Q29tcG9uZW50KFdyYXBwZWRDb21wb25lbnQpKSk7XG4gICAgfVxuXG4gICAgdmFyIHdyYXBwZWRDb21wb25lbnROYW1lID0gV3JhcHBlZENvbXBvbmVudC5kaXNwbGF5TmFtZSB8fCBXcmFwcGVkQ29tcG9uZW50Lm5hbWUgfHwgJ0NvbXBvbmVudCc7XG4gICAgdmFyIGRpc3BsYXlOYW1lID0gZ2V0RGlzcGxheU5hbWUod3JhcHBlZENvbXBvbmVudE5hbWUpO1xuXG4gICAgdmFyIHNlbGVjdG9yRmFjdG9yeU9wdGlvbnMgPSBfZXh0ZW5kcyh7fSwgY29ubmVjdE9wdGlvbnMsIHtcbiAgICAgIGdldERpc3BsYXlOYW1lOiBnZXREaXNwbGF5TmFtZSxcbiAgICAgIG1ldGhvZE5hbWU6IG1ldGhvZE5hbWUsXG4gICAgICByZW5kZXJDb3VudFByb3A6IHJlbmRlckNvdW50UHJvcCxcbiAgICAgIHNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlczogc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzLFxuICAgICAgc3RvcmVLZXk6IHN0b3JlS2V5LFxuICAgICAgZGlzcGxheU5hbWU6IGRpc3BsYXlOYW1lLFxuICAgICAgd3JhcHBlZENvbXBvbmVudE5hbWU6IHdyYXBwZWRDb21wb25lbnROYW1lLFxuICAgICAgV3JhcHBlZENvbXBvbmVudDogV3JhcHBlZENvbXBvbmVudFxuICAgIH0pO1xuXG4gICAgdmFyIHB1cmUgPSBjb25uZWN0T3B0aW9ucy5wdXJlO1xuXG4gICAgZnVuY3Rpb24gY3JlYXRlQ2hpbGRTZWxlY3RvcihzdG9yZSkge1xuICAgICAgcmV0dXJuIHNlbGVjdG9yRmFjdG9yeShzdG9yZS5kaXNwYXRjaCwgc2VsZWN0b3JGYWN0b3J5T3B0aW9ucyk7XG4gICAgfSAvLyBJZiB3ZSBhcmVuJ3QgcnVubmluZyBpbiBcInB1cmVcIiBtb2RlLCB3ZSBkb24ndCB3YW50IHRvIG1lbW9pemUgdmFsdWVzLlxuICAgIC8vIFRvIGF2b2lkIGNvbmRpdGlvbmFsbHkgY2FsbGluZyBob29rcywgd2UgZmFsbCBiYWNrIHRvIGEgdGlueSB3cmFwcGVyXG4gICAgLy8gdGhhdCBqdXN0IGV4ZWN1dGVzIHRoZSBnaXZlbiBjYWxsYmFjayBpbW1lZGlhdGVseS5cblxuXG4gICAgdmFyIHVzZVB1cmVPbmx5TWVtbyA9IHB1cmUgPyB1c2VNZW1vIDogZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICByZXR1cm4gY2FsbGJhY2soKTtcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gQ29ubmVjdEZ1bmN0aW9uKHByb3BzKSB7XG4gICAgICB2YXIgX3VzZU1lbW8gPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gRGlzdGluZ3Vpc2ggYmV0d2VlbiBhY3R1YWwgXCJkYXRhXCIgcHJvcHMgdGhhdCB3ZXJlIHBhc3NlZCB0byB0aGUgd3JhcHBlciBjb21wb25lbnQsXG4gICAgICAgIC8vIGFuZCB2YWx1ZXMgbmVlZGVkIHRvIGNvbnRyb2wgYmVoYXZpb3IgKGZvcndhcmRlZCByZWZzLCBhbHRlcm5hdGUgY29udGV4dCBpbnN0YW5jZXMpLlxuICAgICAgICAvLyBUbyBtYWludGFpbiB0aGUgd3JhcHBlclByb3BzIG9iamVjdCByZWZlcmVuY2UsIG1lbW9pemUgdGhpcyBkZXN0cnVjdHVyaW5nLlxuICAgICAgICB2YXIgZm9yd2FyZGVkUmVmID0gcHJvcHMuZm9yd2FyZGVkUmVmLFxuICAgICAgICAgICAgd3JhcHBlclByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIFtcImZvcndhcmRlZFJlZlwiXSk7XG5cbiAgICAgICAgcmV0dXJuIFtwcm9wcy5jb250ZXh0LCBmb3J3YXJkZWRSZWYsIHdyYXBwZXJQcm9wc107XG4gICAgICB9LCBbcHJvcHNdKSxcbiAgICAgICAgICBwcm9wc0NvbnRleHQgPSBfdXNlTWVtb1swXSxcbiAgICAgICAgICBmb3J3YXJkZWRSZWYgPSBfdXNlTWVtb1sxXSxcbiAgICAgICAgICB3cmFwcGVyUHJvcHMgPSBfdXNlTWVtb1syXTtcblxuICAgICAgdmFyIENvbnRleHRUb1VzZSA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBVc2VycyBtYXkgb3B0aW9uYWxseSBwYXNzIGluIGEgY3VzdG9tIGNvbnRleHQgaW5zdGFuY2UgdG8gdXNlIGluc3RlYWQgb2Ygb3VyIFJlYWN0UmVkdXhDb250ZXh0LlxuICAgICAgICAvLyBNZW1vaXplIHRoZSBjaGVjayB0aGF0IGRldGVybWluZXMgd2hpY2ggY29udGV4dCBpbnN0YW5jZSB3ZSBzaG91bGQgdXNlLlxuICAgICAgICByZXR1cm4gcHJvcHNDb250ZXh0ICYmIHByb3BzQ29udGV4dC5Db25zdW1lciAmJiBpc0NvbnRleHRDb25zdW1lcihSZWFjdC5jcmVhdGVFbGVtZW50KHByb3BzQ29udGV4dC5Db25zdW1lciwgbnVsbCkpID8gcHJvcHNDb250ZXh0IDogQ29udGV4dDtcbiAgICAgIH0sIFtwcm9wc0NvbnRleHQsIENvbnRleHRdKTsgLy8gUmV0cmlldmUgdGhlIHN0b3JlIGFuZCBhbmNlc3RvciBzdWJzY3JpcHRpb24gdmlhIGNvbnRleHQsIGlmIGF2YWlsYWJsZVxuXG4gICAgICB2YXIgY29udGV4dFZhbHVlID0gdXNlQ29udGV4dChDb250ZXh0VG9Vc2UpOyAvLyBUaGUgc3RvcmUgX211c3RfIGV4aXN0IGFzIGVpdGhlciBhIHByb3Agb3IgaW4gY29udGV4dFxuXG4gICAgICB2YXIgZGlkU3RvcmVDb21lRnJvbVByb3BzID0gQm9vbGVhbihwcm9wcy5zdG9yZSk7XG4gICAgICB2YXIgZGlkU3RvcmVDb21lRnJvbUNvbnRleHQgPSBCb29sZWFuKGNvbnRleHRWYWx1ZSkgJiYgQm9vbGVhbihjb250ZXh0VmFsdWUuc3RvcmUpO1xuICAgICAgaW52YXJpYW50KGRpZFN0b3JlQ29tZUZyb21Qcm9wcyB8fCBkaWRTdG9yZUNvbWVGcm9tQ29udGV4dCwgXCJDb3VsZCBub3QgZmluZCBcXFwic3RvcmVcXFwiIGluIHRoZSBjb250ZXh0IG9mIFwiICsgKFwiXFxcIlwiICsgZGlzcGxheU5hbWUgKyBcIlxcXCIuIEVpdGhlciB3cmFwIHRoZSByb290IGNvbXBvbmVudCBpbiBhIDxQcm92aWRlcj4sIFwiKSArIFwib3IgcGFzcyBhIGN1c3RvbSBSZWFjdCBjb250ZXh0IHByb3ZpZGVyIHRvIDxQcm92aWRlcj4gYW5kIHRoZSBjb3JyZXNwb25kaW5nIFwiICsgKFwiUmVhY3QgY29udGV4dCBjb25zdW1lciB0byBcIiArIGRpc3BsYXlOYW1lICsgXCIgaW4gY29ubmVjdCBvcHRpb25zLlwiKSk7XG4gICAgICB2YXIgc3RvcmUgPSBwcm9wcy5zdG9yZSB8fCBjb250ZXh0VmFsdWUuc3RvcmU7XG4gICAgICB2YXIgY2hpbGRQcm9wc1NlbGVjdG9yID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIFRoZSBjaGlsZCBwcm9wcyBzZWxlY3RvciBuZWVkcyB0aGUgc3RvcmUgcmVmZXJlbmNlIGFzIGFuIGlucHV0LlxuICAgICAgICAvLyBSZS1jcmVhdGUgdGhpcyBzZWxlY3RvciB3aGVuZXZlciB0aGUgc3RvcmUgY2hhbmdlcy5cbiAgICAgICAgcmV0dXJuIGNyZWF0ZUNoaWxkU2VsZWN0b3Ioc3RvcmUpO1xuICAgICAgfSwgW3N0b3JlXSk7XG5cbiAgICAgIHZhciBfdXNlTWVtbzIgPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCFzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMpIHJldHVybiBOT19TVUJTQ1JJUFRJT05fQVJSQVk7IC8vIFRoaXMgU3Vic2NyaXB0aW9uJ3Mgc291cmNlIHNob3VsZCBtYXRjaCB3aGVyZSBzdG9yZSBjYW1lIGZyb206IHByb3BzIHZzLiBjb250ZXh0LiBBIGNvbXBvbmVudFxuICAgICAgICAvLyBjb25uZWN0ZWQgdG8gdGhlIHN0b3JlIHZpYSBwcm9wcyBzaG91bGRuJ3QgdXNlIHN1YnNjcmlwdGlvbiBmcm9tIGNvbnRleHQsIG9yIHZpY2UgdmVyc2EuXG5cbiAgICAgICAgdmFyIHN1YnNjcmlwdGlvbiA9IG5ldyBTdWJzY3JpcHRpb24oc3RvcmUsIGRpZFN0b3JlQ29tZUZyb21Qcm9wcyA/IG51bGwgOiBjb250ZXh0VmFsdWUuc3Vic2NyaXB0aW9uKTsgLy8gYG5vdGlmeU5lc3RlZFN1YnNgIGlzIGR1cGxpY2F0ZWQgdG8gaGFuZGxlIHRoZSBjYXNlIHdoZXJlIHRoZSBjb21wb25lbnQgaXMgdW5tb3VudGVkIGluXG4gICAgICAgIC8vIHRoZSBtaWRkbGUgb2YgdGhlIG5vdGlmaWNhdGlvbiBsb29wLCB3aGVyZSBgc3Vic2NyaXB0aW9uYCB3aWxsIHRoZW4gYmUgbnVsbC4gVGhpcyBjYW5cbiAgICAgICAgLy8gcHJvYmFibHkgYmUgYXZvaWRlZCBpZiBTdWJzY3JpcHRpb24ncyBsaXN0ZW5lcnMgbG9naWMgaXMgY2hhbmdlZCB0byBub3QgY2FsbCBsaXN0ZW5lcnNcbiAgICAgICAgLy8gdGhhdCBoYXZlIGJlZW4gdW5zdWJzY3JpYmVkIGluIHRoZSAgbWlkZGxlIG9mIHRoZSBub3RpZmljYXRpb24gbG9vcC5cblxuICAgICAgICB2YXIgbm90aWZ5TmVzdGVkU3VicyA9IHN1YnNjcmlwdGlvbi5ub3RpZnlOZXN0ZWRTdWJzLmJpbmQoc3Vic2NyaXB0aW9uKTtcbiAgICAgICAgcmV0dXJuIFtzdWJzY3JpcHRpb24sIG5vdGlmeU5lc3RlZFN1YnNdO1xuICAgICAgfSwgW3N0b3JlLCBkaWRTdG9yZUNvbWVGcm9tUHJvcHMsIGNvbnRleHRWYWx1ZV0pLFxuICAgICAgICAgIHN1YnNjcmlwdGlvbiA9IF91c2VNZW1vMlswXSxcbiAgICAgICAgICBub3RpZnlOZXN0ZWRTdWJzID0gX3VzZU1lbW8yWzFdOyAvLyBEZXRlcm1pbmUgd2hhdCB7c3RvcmUsIHN1YnNjcmlwdGlvbn0gdmFsdWUgc2hvdWxkIGJlIHB1dCBpbnRvIG5lc3RlZCBjb250ZXh0LCBpZiBuZWNlc3NhcnksXG4gICAgICAvLyBhbmQgbWVtb2l6ZSB0aGF0IHZhbHVlIHRvIGF2b2lkIHVubmVjZXNzYXJ5IGNvbnRleHQgdXBkYXRlcy5cblxuXG4gICAgICB2YXIgb3ZlcnJpZGRlbkNvbnRleHRWYWx1ZSA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoZGlkU3RvcmVDb21lRnJvbVByb3BzKSB7XG4gICAgICAgICAgLy8gVGhpcyBjb21wb25lbnQgaXMgZGlyZWN0bHkgc3Vic2NyaWJlZCB0byBhIHN0b3JlIGZyb20gcHJvcHMuXG4gICAgICAgICAgLy8gV2UgZG9uJ3Qgd2FudCBkZXNjZW5kYW50cyByZWFkaW5nIGZyb20gdGhpcyBzdG9yZSAtIHBhc3MgZG93biB3aGF0ZXZlclxuICAgICAgICAgIC8vIHRoZSBleGlzdGluZyBjb250ZXh0IHZhbHVlIGlzIGZyb20gdGhlIG5lYXJlc3QgY29ubmVjdGVkIGFuY2VzdG9yLlxuICAgICAgICAgIHJldHVybiBjb250ZXh0VmFsdWU7XG4gICAgICAgIH0gLy8gT3RoZXJ3aXNlLCBwdXQgdGhpcyBjb21wb25lbnQncyBzdWJzY3JpcHRpb24gaW5zdGFuY2UgaW50byBjb250ZXh0LCBzbyB0aGF0XG4gICAgICAgIC8vIGNvbm5lY3RlZCBkZXNjZW5kYW50cyB3b24ndCB1cGRhdGUgdW50aWwgYWZ0ZXIgdGhpcyBjb21wb25lbnQgaXMgZG9uZVxuXG5cbiAgICAgICAgcmV0dXJuIF9leHRlbmRzKHt9LCBjb250ZXh0VmFsdWUsIHtcbiAgICAgICAgICBzdWJzY3JpcHRpb246IHN1YnNjcmlwdGlvblxuICAgICAgICB9KTtcbiAgICAgIH0sIFtkaWRTdG9yZUNvbWVGcm9tUHJvcHMsIGNvbnRleHRWYWx1ZSwgc3Vic2NyaXB0aW9uXSk7IC8vIFdlIG5lZWQgdG8gZm9yY2UgdGhpcyB3cmFwcGVyIGNvbXBvbmVudCB0byByZS1yZW5kZXIgd2hlbmV2ZXIgYSBSZWR1eCBzdG9yZSB1cGRhdGVcbiAgICAgIC8vIGNhdXNlcyBhIGNoYW5nZSB0byB0aGUgY2FsY3VsYXRlZCBjaGlsZCBjb21wb25lbnQgcHJvcHMgKG9yIHdlIGNhdWdodCBhbiBlcnJvciBpbiBtYXBTdGF0ZSlcblxuICAgICAgdmFyIF91c2VSZWR1Y2VyID0gdXNlUmVkdWNlcihzdG9yZVN0YXRlVXBkYXRlc1JlZHVjZXIsIEVNUFRZX0FSUkFZLCBpbml0U3RhdGVVcGRhdGVzKSxcbiAgICAgICAgICBfdXNlUmVkdWNlciQgPSBfdXNlUmVkdWNlclswXSxcbiAgICAgICAgICBwcmV2aW91c1N0YXRlVXBkYXRlUmVzdWx0ID0gX3VzZVJlZHVjZXIkWzBdLFxuICAgICAgICAgIGZvcmNlQ29tcG9uZW50VXBkYXRlRGlzcGF0Y2ggPSBfdXNlUmVkdWNlclsxXTsgLy8gUHJvcGFnYXRlIGFueSBtYXBTdGF0ZS9tYXBEaXNwYXRjaCBlcnJvcnMgdXB3YXJkc1xuXG5cbiAgICAgIGlmIChwcmV2aW91c1N0YXRlVXBkYXRlUmVzdWx0ICYmIHByZXZpb3VzU3RhdGVVcGRhdGVSZXN1bHQuZXJyb3IpIHtcbiAgICAgICAgdGhyb3cgcHJldmlvdXNTdGF0ZVVwZGF0ZVJlc3VsdC5lcnJvcjtcbiAgICAgIH0gLy8gU2V0IHVwIHJlZnMgdG8gY29vcmRpbmF0ZSB2YWx1ZXMgYmV0d2VlbiB0aGUgc3Vic2NyaXB0aW9uIGVmZmVjdCBhbmQgdGhlIHJlbmRlciBsb2dpY1xuXG5cbiAgICAgIHZhciBsYXN0Q2hpbGRQcm9wcyA9IHVzZVJlZigpO1xuICAgICAgdmFyIGxhc3RXcmFwcGVyUHJvcHMgPSB1c2VSZWYod3JhcHBlclByb3BzKTtcbiAgICAgIHZhciBjaGlsZFByb3BzRnJvbVN0b3JlVXBkYXRlID0gdXNlUmVmKCk7XG4gICAgICB2YXIgcmVuZGVySXNTY2hlZHVsZWQgPSB1c2VSZWYoZmFsc2UpO1xuICAgICAgdmFyIGFjdHVhbENoaWxkUHJvcHMgPSB1c2VQdXJlT25seU1lbW8oZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBUcmlja3kgbG9naWMgaGVyZTpcbiAgICAgICAgLy8gLSBUaGlzIHJlbmRlciBtYXkgaGF2ZSBiZWVuIHRyaWdnZXJlZCBieSBhIFJlZHV4IHN0b3JlIHVwZGF0ZSB0aGF0IHByb2R1Y2VkIG5ldyBjaGlsZCBwcm9wc1xuICAgICAgICAvLyAtIEhvd2V2ZXIsIHdlIG1heSBoYXZlIGdvdHRlbiBuZXcgd3JhcHBlciBwcm9wcyBhZnRlciB0aGF0XG4gICAgICAgIC8vIElmIHdlIGhhdmUgbmV3IGNoaWxkIHByb3BzLCBhbmQgdGhlIHNhbWUgd3JhcHBlciBwcm9wcywgd2Uga25vdyB3ZSBzaG91bGQgdXNlIHRoZSBuZXcgY2hpbGQgcHJvcHMgYXMtaXMuXG4gICAgICAgIC8vIEJ1dCwgaWYgd2UgaGF2ZSBuZXcgd3JhcHBlciBwcm9wcywgdGhvc2UgbWlnaHQgY2hhbmdlIHRoZSBjaGlsZCBwcm9wcywgc28gd2UgaGF2ZSB0byByZWNhbGN1bGF0ZSB0aGluZ3MuXG4gICAgICAgIC8vIFNvLCB3ZSdsbCB1c2UgdGhlIGNoaWxkIHByb3BzIGZyb20gc3RvcmUgdXBkYXRlIG9ubHkgaWYgdGhlIHdyYXBwZXIgcHJvcHMgYXJlIHRoZSBzYW1lIGFzIGxhc3QgdGltZS5cbiAgICAgICAgaWYgKGNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUuY3VycmVudCAmJiB3cmFwcGVyUHJvcHMgPT09IGxhc3RXcmFwcGVyUHJvcHMuY3VycmVudCkge1xuICAgICAgICAgIHJldHVybiBjaGlsZFByb3BzRnJvbVN0b3JlVXBkYXRlLmN1cnJlbnQ7XG4gICAgICAgIH0gLy8gVE9ETyBXZSdyZSByZWFkaW5nIHRoZSBzdG9yZSBkaXJlY3RseSBpbiByZW5kZXIoKSBoZXJlLiBCYWQgaWRlYT9cbiAgICAgICAgLy8gVGhpcyB3aWxsIGxpa2VseSBjYXVzZSBCYWQgVGhpbmdzIChUTSkgdG8gaGFwcGVuIGluIENvbmN1cnJlbnQgTW9kZS5cbiAgICAgICAgLy8gTm90ZSB0aGF0IHdlIGRvIHRoaXMgYmVjYXVzZSBvbiByZW5kZXJzIF9ub3RfIGNhdXNlZCBieSBzdG9yZSB1cGRhdGVzLCB3ZSBuZWVkIHRoZSBsYXRlc3Qgc3RvcmUgc3RhdGVcbiAgICAgICAgLy8gdG8gZGV0ZXJtaW5lIHdoYXQgdGhlIGNoaWxkIHByb3BzIHNob3VsZCBiZS5cblxuXG4gICAgICAgIHJldHVybiBjaGlsZFByb3BzU2VsZWN0b3Ioc3RvcmUuZ2V0U3RhdGUoKSwgd3JhcHBlclByb3BzKTtcbiAgICAgIH0sIFtzdG9yZSwgcHJldmlvdXNTdGF0ZVVwZGF0ZVJlc3VsdCwgd3JhcHBlclByb3BzXSk7IC8vIFdlIG5lZWQgdGhpcyB0byBleGVjdXRlIHN5bmNocm9ub3VzbHkgZXZlcnkgdGltZSB3ZSByZS1yZW5kZXIuIEhvd2V2ZXIsIFJlYWN0IHdhcm5zXG4gICAgICAvLyBhYm91dCB1c2VMYXlvdXRFZmZlY3QgaW4gU1NSLCBzbyB3ZSB0cnkgdG8gZGV0ZWN0IGVudmlyb25tZW50IGFuZCBmYWxsIGJhY2sgdG9cbiAgICAgIC8vIGp1c3QgdXNlRWZmZWN0IGluc3RlYWQgdG8gYXZvaWQgdGhlIHdhcm5pbmcsIHNpbmNlIG5laXRoZXIgd2lsbCBydW4gYW55d2F5LlxuXG4gICAgICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gV2Ugd2FudCB0byBjYXB0dXJlIHRoZSB3cmFwcGVyIHByb3BzIGFuZCBjaGlsZCBwcm9wcyB3ZSB1c2VkIGZvciBsYXRlciBjb21wYXJpc29uc1xuICAgICAgICBsYXN0V3JhcHBlclByb3BzLmN1cnJlbnQgPSB3cmFwcGVyUHJvcHM7XG4gICAgICAgIGxhc3RDaGlsZFByb3BzLmN1cnJlbnQgPSBhY3R1YWxDaGlsZFByb3BzO1xuICAgICAgICByZW5kZXJJc1NjaGVkdWxlZC5jdXJyZW50ID0gZmFsc2U7IC8vIElmIHRoZSByZW5kZXIgd2FzIGZyb20gYSBzdG9yZSB1cGRhdGUsIGNsZWFyIG91dCB0aGF0IHJlZmVyZW5jZSBhbmQgY2FzY2FkZSB0aGUgc3Vic2NyaWJlciB1cGRhdGVcblxuICAgICAgICBpZiAoY2hpbGRQcm9wc0Zyb21TdG9yZVVwZGF0ZS5jdXJyZW50KSB7XG4gICAgICAgICAgY2hpbGRQcm9wc0Zyb21TdG9yZVVwZGF0ZS5jdXJyZW50ID0gbnVsbDtcbiAgICAgICAgICBub3RpZnlOZXN0ZWRTdWJzKCk7XG4gICAgICAgIH1cbiAgICAgIH0pOyAvLyBPdXIgcmUtc3Vic2NyaWJlIGxvZ2ljIG9ubHkgcnVucyB3aGVuIHRoZSBzdG9yZS9zdWJzY3JpcHRpb24gc2V0dXAgY2hhbmdlc1xuXG4gICAgICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gSWYgd2UncmUgbm90IHN1YnNjcmliZWQgdG8gdGhlIHN0b3JlLCBub3RoaW5nIHRvIGRvIGhlcmVcbiAgICAgICAgaWYgKCFzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMpIHJldHVybjsgLy8gQ2FwdHVyZSB2YWx1ZXMgZm9yIGNoZWNraW5nIGlmIGFuZCB3aGVuIHRoaXMgY29tcG9uZW50IHVubW91bnRzXG5cbiAgICAgICAgdmFyIGRpZFVuc3Vic2NyaWJlID0gZmFsc2U7XG4gICAgICAgIHZhciBsYXN0VGhyb3duRXJyb3IgPSBudWxsOyAvLyBXZSdsbCBydW4gdGhpcyBjYWxsYmFjayBldmVyeSB0aW1lIGEgc3RvcmUgc3Vic2NyaXB0aW9uIHVwZGF0ZSBwcm9wYWdhdGVzIHRvIHRoaXMgY29tcG9uZW50XG5cbiAgICAgICAgdmFyIGNoZWNrRm9yVXBkYXRlcyA9IGZ1bmN0aW9uIGNoZWNrRm9yVXBkYXRlcygpIHtcbiAgICAgICAgICBpZiAoZGlkVW5zdWJzY3JpYmUpIHtcbiAgICAgICAgICAgIC8vIERvbid0IHJ1biBzdGFsZSBsaXN0ZW5lcnMuXG4gICAgICAgICAgICAvLyBSZWR1eCBkb2Vzbid0IGd1YXJhbnRlZSB1bnN1YnNjcmlwdGlvbnMgaGFwcGVuIHVudGlsIG5leHQgZGlzcGF0Y2guXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIGxhdGVzdFN0b3JlU3RhdGUgPSBzdG9yZS5nZXRTdGF0ZSgpO1xuICAgICAgICAgIHZhciBuZXdDaGlsZFByb3BzLCBlcnJvcjtcblxuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBBY3R1YWxseSBydW4gdGhlIHNlbGVjdG9yIHdpdGggdGhlIG1vc3QgcmVjZW50IHN0b3JlIHN0YXRlIGFuZCB3cmFwcGVyIHByb3BzXG4gICAgICAgICAgICAvLyB0byBkZXRlcm1pbmUgd2hhdCB0aGUgY2hpbGQgcHJvcHMgc2hvdWxkIGJlXG4gICAgICAgICAgICBuZXdDaGlsZFByb3BzID0gY2hpbGRQcm9wc1NlbGVjdG9yKGxhdGVzdFN0b3JlU3RhdGUsIGxhc3RXcmFwcGVyUHJvcHMuY3VycmVudCk7XG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgZXJyb3IgPSBlO1xuICAgICAgICAgICAgbGFzdFRocm93bkVycm9yID0gZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoIWVycm9yKSB7XG4gICAgICAgICAgICBsYXN0VGhyb3duRXJyb3IgPSBudWxsO1xuICAgICAgICAgIH0gLy8gSWYgdGhlIGNoaWxkIHByb3BzIGhhdmVuJ3QgY2hhbmdlZCwgbm90aGluZyB0byBkbyBoZXJlIC0gY2FzY2FkZSB0aGUgc3Vic2NyaXB0aW9uIHVwZGF0ZVxuXG5cbiAgICAgICAgICBpZiAobmV3Q2hpbGRQcm9wcyA9PT0gbGFzdENoaWxkUHJvcHMuY3VycmVudCkge1xuICAgICAgICAgICAgaWYgKCFyZW5kZXJJc1NjaGVkdWxlZC5jdXJyZW50KSB7XG4gICAgICAgICAgICAgIG5vdGlmeU5lc3RlZFN1YnMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gU2F2ZSByZWZlcmVuY2VzIHRvIHRoZSBuZXcgY2hpbGQgcHJvcHMuICBOb3RlIHRoYXQgd2UgdHJhY2sgdGhlIFwiY2hpbGQgcHJvcHMgZnJvbSBzdG9yZSB1cGRhdGVcIlxuICAgICAgICAgICAgLy8gYXMgYSByZWYgaW5zdGVhZCBvZiBhIHVzZVN0YXRlL3VzZVJlZHVjZXIgYmVjYXVzZSB3ZSBuZWVkIGEgd2F5IHRvIGRldGVybWluZSBpZiB0aGF0IHZhbHVlIGhhc1xuICAgICAgICAgICAgLy8gYmVlbiBwcm9jZXNzZWQuICBJZiB0aGlzIHdlbnQgaW50byB1c2VTdGF0ZS91c2VSZWR1Y2VyLCB3ZSBjb3VsZG4ndCBjbGVhciBvdXQgdGhlIHZhbHVlIHdpdGhvdXRcbiAgICAgICAgICAgIC8vIGZvcmNpbmcgYW5vdGhlciByZS1yZW5kZXIsIHdoaWNoIHdlIGRvbid0IHdhbnQuXG4gICAgICAgICAgICBsYXN0Q2hpbGRQcm9wcy5jdXJyZW50ID0gbmV3Q2hpbGRQcm9wcztcbiAgICAgICAgICAgIGNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUuY3VycmVudCA9IG5ld0NoaWxkUHJvcHM7XG4gICAgICAgICAgICByZW5kZXJJc1NjaGVkdWxlZC5jdXJyZW50ID0gdHJ1ZTsgLy8gSWYgdGhlIGNoaWxkIHByb3BzIF9kaWRfIGNoYW5nZSAob3Igd2UgY2F1Z2h0IGFuIGVycm9yKSwgdGhpcyB3cmFwcGVyIGNvbXBvbmVudCBuZWVkcyB0byByZS1yZW5kZXJcblxuICAgICAgICAgICAgZm9yY2VDb21wb25lbnRVcGRhdGVEaXNwYXRjaCh7XG4gICAgICAgICAgICAgIHR5cGU6ICdTVE9SRV9VUERBVEVEJyxcbiAgICAgICAgICAgICAgcGF5bG9hZDoge1xuICAgICAgICAgICAgICAgIGxhdGVzdFN0b3JlU3RhdGU6IGxhdGVzdFN0b3JlU3RhdGUsXG4gICAgICAgICAgICAgICAgZXJyb3I6IGVycm9yXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfTsgLy8gQWN0dWFsbHkgc3Vic2NyaWJlIHRvIHRoZSBuZWFyZXN0IGNvbm5lY3RlZCBhbmNlc3RvciAob3Igc3RvcmUpXG5cblxuICAgICAgICBzdWJzY3JpcHRpb24ub25TdGF0ZUNoYW5nZSA9IGNoZWNrRm9yVXBkYXRlcztcbiAgICAgICAgc3Vic2NyaXB0aW9uLnRyeVN1YnNjcmliZSgpOyAvLyBQdWxsIGRhdGEgZnJvbSB0aGUgc3RvcmUgYWZ0ZXIgZmlyc3QgcmVuZGVyIGluIGNhc2UgdGhlIHN0b3JlIGhhc1xuICAgICAgICAvLyBjaGFuZ2VkIHNpbmNlIHdlIGJlZ2FuLlxuXG4gICAgICAgIGNoZWNrRm9yVXBkYXRlcygpO1xuXG4gICAgICAgIHZhciB1bnN1YnNjcmliZVdyYXBwZXIgPSBmdW5jdGlvbiB1bnN1YnNjcmliZVdyYXBwZXIoKSB7XG4gICAgICAgICAgZGlkVW5zdWJzY3JpYmUgPSB0cnVlO1xuICAgICAgICAgIHN1YnNjcmlwdGlvbi50cnlVbnN1YnNjcmliZSgpO1xuICAgICAgICAgIHN1YnNjcmlwdGlvbi5vblN0YXRlQ2hhbmdlID0gbnVsbDtcblxuICAgICAgICAgIGlmIChsYXN0VGhyb3duRXJyb3IpIHtcbiAgICAgICAgICAgIC8vIEl0J3MgcG9zc2libGUgdGhhdCB3ZSBjYXVnaHQgYW4gZXJyb3IgZHVlIHRvIGEgYmFkIG1hcFN0YXRlIGZ1bmN0aW9uLCBidXQgdGhlXG4gICAgICAgICAgICAvLyBwYXJlbnQgcmUtcmVuZGVyZWQgd2l0aG91dCB0aGlzIGNvbXBvbmVudCBhbmQgd2UncmUgYWJvdXQgdG8gdW5tb3VudC5cbiAgICAgICAgICAgIC8vIFRoaXMgc2hvdWxkbid0IGhhcHBlbiBhcyBsb25nIGFzIHdlIGRvIHRvcC1kb3duIHN1YnNjcmlwdGlvbnMgY29ycmVjdGx5LCBidXRcbiAgICAgICAgICAgIC8vIGlmIHdlIGV2ZXIgZG8gdGhvc2Ugd3JvbmcsIHRoaXMgdGhyb3cgd2lsbCBzdXJmYWNlIHRoZSBlcnJvciBpbiBvdXIgdGVzdHMuXG4gICAgICAgICAgICAvLyBJbiB0aGF0IGNhc2UsIHRocm93IHRoZSBlcnJvciBmcm9tIGhlcmUgc28gaXQgZG9lc24ndCBnZXQgbG9zdC5cbiAgICAgICAgICAgIHRocm93IGxhc3RUaHJvd25FcnJvcjtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIHVuc3Vic2NyaWJlV3JhcHBlcjtcbiAgICAgIH0sIFtzdG9yZSwgc3Vic2NyaXB0aW9uLCBjaGlsZFByb3BzU2VsZWN0b3JdKTsgLy8gTm93IHRoYXQgYWxsIHRoYXQncyBkb25lLCB3ZSBjYW4gZmluYWxseSB0cnkgdG8gYWN0dWFsbHkgcmVuZGVyIHRoZSBjaGlsZCBjb21wb25lbnQuXG4gICAgICAvLyBXZSBtZW1vaXplIHRoZSBlbGVtZW50cyBmb3IgdGhlIHJlbmRlcmVkIGNoaWxkIGNvbXBvbmVudCBhcyBhbiBvcHRpbWl6YXRpb24uXG5cbiAgICAgIHZhciByZW5kZXJlZFdyYXBwZWRDb21wb25lbnQgPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoV3JhcHBlZENvbXBvbmVudCwgX2V4dGVuZHMoe30sIGFjdHVhbENoaWxkUHJvcHMsIHtcbiAgICAgICAgICByZWY6IGZvcndhcmRlZFJlZlxuICAgICAgICB9KSk7XG4gICAgICB9LCBbZm9yd2FyZGVkUmVmLCBXcmFwcGVkQ29tcG9uZW50LCBhY3R1YWxDaGlsZFByb3BzXSk7IC8vIElmIFJlYWN0IHNlZXMgdGhlIGV4YWN0IHNhbWUgZWxlbWVudCByZWZlcmVuY2UgYXMgbGFzdCB0aW1lLCBpdCBiYWlscyBvdXQgb2YgcmUtcmVuZGVyaW5nXG4gICAgICAvLyB0aGF0IGNoaWxkLCBzYW1lIGFzIGlmIGl0IHdhcyB3cmFwcGVkIGluIFJlYWN0Lm1lbW8oKSBvciByZXR1cm5lZCBmYWxzZSBmcm9tIHNob3VsZENvbXBvbmVudFVwZGF0ZS5cblxuICAgICAgdmFyIHJlbmRlcmVkQ2hpbGQgPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcykge1xuICAgICAgICAgIC8vIElmIHRoaXMgY29tcG9uZW50IGlzIHN1YnNjcmliZWQgdG8gc3RvcmUgdXBkYXRlcywgd2UgbmVlZCB0byBwYXNzIGl0cyBvd25cbiAgICAgICAgICAvLyBzdWJzY3JpcHRpb24gaW5zdGFuY2UgZG93biB0byBvdXIgZGVzY2VuZGFudHMuIFRoYXQgbWVhbnMgcmVuZGVyaW5nIHRoZSBzYW1lXG4gICAgICAgICAgLy8gQ29udGV4dCBpbnN0YW5jZSwgYW5kIHB1dHRpbmcgYSBkaWZmZXJlbnQgdmFsdWUgaW50byB0aGUgY29udGV4dC5cbiAgICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChDb250ZXh0VG9Vc2UuUHJvdmlkZXIsIHtcbiAgICAgICAgICAgIHZhbHVlOiBvdmVycmlkZGVuQ29udGV4dFZhbHVlXG4gICAgICAgICAgfSwgcmVuZGVyZWRXcmFwcGVkQ29tcG9uZW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZW5kZXJlZFdyYXBwZWRDb21wb25lbnQ7XG4gICAgICB9LCBbQ29udGV4dFRvVXNlLCByZW5kZXJlZFdyYXBwZWRDb21wb25lbnQsIG92ZXJyaWRkZW5Db250ZXh0VmFsdWVdKTtcbiAgICAgIHJldHVybiByZW5kZXJlZENoaWxkO1xuICAgIH0gLy8gSWYgd2UncmUgaW4gXCJwdXJlXCIgbW9kZSwgZW5zdXJlIG91ciB3cmFwcGVyIGNvbXBvbmVudCBvbmx5IHJlLXJlbmRlcnMgd2hlbiBpbmNvbWluZyBwcm9wcyBoYXZlIGNoYW5nZWQuXG5cblxuICAgIHZhciBDb25uZWN0ID0gcHVyZSA/IFJlYWN0Lm1lbW8oQ29ubmVjdEZ1bmN0aW9uKSA6IENvbm5lY3RGdW5jdGlvbjtcbiAgICBDb25uZWN0LldyYXBwZWRDb21wb25lbnQgPSBXcmFwcGVkQ29tcG9uZW50O1xuICAgIENvbm5lY3QuZGlzcGxheU5hbWUgPSBkaXNwbGF5TmFtZTtcblxuICAgIGlmIChmb3J3YXJkUmVmKSB7XG4gICAgICB2YXIgZm9yd2FyZGVkID0gUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBmb3J3YXJkQ29ubmVjdFJlZihwcm9wcywgcmVmKSB7XG4gICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENvbm5lY3QsIF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgICAgICAgIGZvcndhcmRlZFJlZjogcmVmXG4gICAgICAgIH0pKTtcbiAgICAgIH0pO1xuICAgICAgZm9yd2FyZGVkLmRpc3BsYXlOYW1lID0gZGlzcGxheU5hbWU7XG4gICAgICBmb3J3YXJkZWQuV3JhcHBlZENvbXBvbmVudCA9IFdyYXBwZWRDb21wb25lbnQ7XG4gICAgICByZXR1cm4gaG9pc3RTdGF0aWNzKGZvcndhcmRlZCwgV3JhcHBlZENvbXBvbmVudCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGhvaXN0U3RhdGljcyhDb25uZWN0LCBXcmFwcGVkQ29tcG9uZW50KTtcbiAgfTtcbn0iLCJ2YXIgaGFzT3duID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxuZnVuY3Rpb24gaXMoeCwgeSkge1xuICBpZiAoeCA9PT0geSkge1xuICAgIHJldHVybiB4ICE9PSAwIHx8IHkgIT09IDAgfHwgMSAvIHggPT09IDEgLyB5O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB4ICE9PSB4ICYmIHkgIT09IHk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2hhbGxvd0VxdWFsKG9iakEsIG9iakIpIHtcbiAgaWYgKGlzKG9iakEsIG9iakIpKSByZXR1cm4gdHJ1ZTtcblxuICBpZiAodHlwZW9mIG9iakEgIT09ICdvYmplY3QnIHx8IG9iakEgPT09IG51bGwgfHwgdHlwZW9mIG9iakIgIT09ICdvYmplY3QnIHx8IG9iakIgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIga2V5c0EgPSBPYmplY3Qua2V5cyhvYmpBKTtcbiAgdmFyIGtleXNCID0gT2JqZWN0LmtleXMob2JqQik7XG4gIGlmIChrZXlzQS5sZW5ndGggIT09IGtleXNCLmxlbmd0aCkgcmV0dXJuIGZhbHNlO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwga2V5c0EubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoIWhhc093bi5jYWxsKG9iakIsIGtleXNBW2ldKSB8fCAhaXMob2JqQVtrZXlzQVtpXV0sIG9iakJba2V5c0FbaV1dKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufSIsImltcG9ydCB2ZXJpZnlQbGFpbk9iamVjdCBmcm9tICcuLi91dGlscy92ZXJpZnlQbGFpbk9iamVjdCc7XG5leHBvcnQgZnVuY3Rpb24gd3JhcE1hcFRvUHJvcHNDb25zdGFudChnZXRDb25zdGFudCkge1xuICByZXR1cm4gZnVuY3Rpb24gaW5pdENvbnN0YW50U2VsZWN0b3IoZGlzcGF0Y2gsIG9wdGlvbnMpIHtcbiAgICB2YXIgY29uc3RhbnQgPSBnZXRDb25zdGFudChkaXNwYXRjaCwgb3B0aW9ucyk7XG5cbiAgICBmdW5jdGlvbiBjb25zdGFudFNlbGVjdG9yKCkge1xuICAgICAgcmV0dXJuIGNvbnN0YW50O1xuICAgIH1cblxuICAgIGNvbnN0YW50U2VsZWN0b3IuZGVwZW5kc09uT3duUHJvcHMgPSBmYWxzZTtcbiAgICByZXR1cm4gY29uc3RhbnRTZWxlY3RvcjtcbiAgfTtcbn0gLy8gZGVwZW5kc09uT3duUHJvcHMgaXMgdXNlZCBieSBjcmVhdGVNYXBUb1Byb3BzUHJveHkgdG8gZGV0ZXJtaW5lIHdoZXRoZXIgdG8gcGFzcyBwcm9wcyBhcyBhcmdzXG4vLyB0byB0aGUgbWFwVG9Qcm9wcyBmdW5jdGlvbiBiZWluZyB3cmFwcGVkLiBJdCBpcyBhbHNvIHVzZWQgYnkgbWFrZVB1cmVQcm9wc1NlbGVjdG9yIHRvIGRldGVybWluZVxuLy8gd2hldGhlciBtYXBUb1Byb3BzIG5lZWRzIHRvIGJlIGludm9rZWQgd2hlbiBwcm9wcyBoYXZlIGNoYW5nZWQuXG4vL1xuLy8gQSBsZW5ndGggb2Ygb25lIHNpZ25hbHMgdGhhdCBtYXBUb1Byb3BzIGRvZXMgbm90IGRlcGVuZCBvbiBwcm9wcyBmcm9tIHRoZSBwYXJlbnQgY29tcG9uZW50LlxuLy8gQSBsZW5ndGggb2YgemVybyBpcyBhc3N1bWVkIHRvIG1lYW4gbWFwVG9Qcm9wcyBpcyBnZXR0aW5nIGFyZ3MgdmlhIGFyZ3VtZW50cyBvciAuLi5hcmdzIGFuZFxuLy8gdGhlcmVmb3JlIG5vdCByZXBvcnRpbmcgaXRzIGxlbmd0aCBhY2N1cmF0ZWx5Li5cblxuZXhwb3J0IGZ1bmN0aW9uIGdldERlcGVuZHNPbk93blByb3BzKG1hcFRvUHJvcHMpIHtcbiAgcmV0dXJuIG1hcFRvUHJvcHMuZGVwZW5kc09uT3duUHJvcHMgIT09IG51bGwgJiYgbWFwVG9Qcm9wcy5kZXBlbmRzT25Pd25Qcm9wcyAhPT0gdW5kZWZpbmVkID8gQm9vbGVhbihtYXBUb1Byb3BzLmRlcGVuZHNPbk93blByb3BzKSA6IG1hcFRvUHJvcHMubGVuZ3RoICE9PSAxO1xufSAvLyBVc2VkIGJ5IHdoZW5NYXBTdGF0ZVRvUHJvcHNJc0Z1bmN0aW9uIGFuZCB3aGVuTWFwRGlzcGF0Y2hUb1Byb3BzSXNGdW5jdGlvbixcbi8vIHRoaXMgZnVuY3Rpb24gd3JhcHMgbWFwVG9Qcm9wcyBpbiBhIHByb3h5IGZ1bmN0aW9uIHdoaWNoIGRvZXMgc2V2ZXJhbCB0aGluZ3M6XG4vL1xuLy8gICogRGV0ZWN0cyB3aGV0aGVyIHRoZSBtYXBUb1Byb3BzIGZ1bmN0aW9uIGJlaW5nIGNhbGxlZCBkZXBlbmRzIG9uIHByb3BzLCB3aGljaFxuLy8gICAgaXMgdXNlZCBieSBzZWxlY3RvckZhY3RvcnkgdG8gZGVjaWRlIGlmIGl0IHNob3VsZCByZWludm9rZSBvbiBwcm9wcyBjaGFuZ2VzLlxuLy9cbi8vICAqIE9uIGZpcnN0IGNhbGwsIGhhbmRsZXMgbWFwVG9Qcm9wcyBpZiByZXR1cm5zIGFub3RoZXIgZnVuY3Rpb24sIGFuZCB0cmVhdHMgdGhhdFxuLy8gICAgbmV3IGZ1bmN0aW9uIGFzIHRoZSB0cnVlIG1hcFRvUHJvcHMgZm9yIHN1YnNlcXVlbnQgY2FsbHMuXG4vL1xuLy8gICogT24gZmlyc3QgY2FsbCwgdmVyaWZpZXMgdGhlIGZpcnN0IHJlc3VsdCBpcyBhIHBsYWluIG9iamVjdCwgaW4gb3JkZXIgdG8gd2FyblxuLy8gICAgdGhlIGRldmVsb3BlciB0aGF0IHRoZWlyIG1hcFRvUHJvcHMgZnVuY3Rpb24gaXMgbm90IHJldHVybmluZyBhIHZhbGlkIHJlc3VsdC5cbi8vXG5cbmV4cG9ydCBmdW5jdGlvbiB3cmFwTWFwVG9Qcm9wc0Z1bmMobWFwVG9Qcm9wcywgbWV0aG9kTmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24gaW5pdFByb3h5U2VsZWN0b3IoZGlzcGF0Y2gsIF9yZWYpIHtcbiAgICB2YXIgZGlzcGxheU5hbWUgPSBfcmVmLmRpc3BsYXlOYW1lO1xuXG4gICAgdmFyIHByb3h5ID0gZnVuY3Rpb24gbWFwVG9Qcm9wc1Byb3h5KHN0YXRlT3JEaXNwYXRjaCwgb3duUHJvcHMpIHtcbiAgICAgIHJldHVybiBwcm94eS5kZXBlbmRzT25Pd25Qcm9wcyA/IHByb3h5Lm1hcFRvUHJvcHMoc3RhdGVPckRpc3BhdGNoLCBvd25Qcm9wcykgOiBwcm94eS5tYXBUb1Byb3BzKHN0YXRlT3JEaXNwYXRjaCk7XG4gICAgfTsgLy8gYWxsb3cgZGV0ZWN0RmFjdG9yeUFuZFZlcmlmeSB0byBnZXQgb3duUHJvcHNcblxuXG4gICAgcHJveHkuZGVwZW5kc09uT3duUHJvcHMgPSB0cnVlO1xuXG4gICAgcHJveHkubWFwVG9Qcm9wcyA9IGZ1bmN0aW9uIGRldGVjdEZhY3RvcnlBbmRWZXJpZnkoc3RhdGVPckRpc3BhdGNoLCBvd25Qcm9wcykge1xuICAgICAgcHJveHkubWFwVG9Qcm9wcyA9IG1hcFRvUHJvcHM7XG4gICAgICBwcm94eS5kZXBlbmRzT25Pd25Qcm9wcyA9IGdldERlcGVuZHNPbk93blByb3BzKG1hcFRvUHJvcHMpO1xuICAgICAgdmFyIHByb3BzID0gcHJveHkoc3RhdGVPckRpc3BhdGNoLCBvd25Qcm9wcyk7XG5cbiAgICAgIGlmICh0eXBlb2YgcHJvcHMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcHJveHkubWFwVG9Qcm9wcyA9IHByb3BzO1xuICAgICAgICBwcm94eS5kZXBlbmRzT25Pd25Qcm9wcyA9IGdldERlcGVuZHNPbk93blByb3BzKHByb3BzKTtcbiAgICAgICAgcHJvcHMgPSBwcm94eShzdGF0ZU9yRGlzcGF0Y2gsIG93blByb3BzKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHZlcmlmeVBsYWluT2JqZWN0KHByb3BzLCBkaXNwbGF5TmFtZSwgbWV0aG9kTmFtZSk7XG4gICAgICByZXR1cm4gcHJvcHM7XG4gICAgfTtcblxuICAgIHJldHVybiBwcm94eTtcbiAgfTtcbn0iLCJpbXBvcnQgeyBiaW5kQWN0aW9uQ3JlYXRvcnMgfSBmcm9tICdyZWR1eCc7XG5pbXBvcnQgeyB3cmFwTWFwVG9Qcm9wc0NvbnN0YW50LCB3cmFwTWFwVG9Qcm9wc0Z1bmMgfSBmcm9tICcuL3dyYXBNYXBUb1Byb3BzJztcbmV4cG9ydCBmdW5jdGlvbiB3aGVuTWFwRGlzcGF0Y2hUb1Byb3BzSXNGdW5jdGlvbihtYXBEaXNwYXRjaFRvUHJvcHMpIHtcbiAgcmV0dXJuIHR5cGVvZiBtYXBEaXNwYXRjaFRvUHJvcHMgPT09ICdmdW5jdGlvbicgPyB3cmFwTWFwVG9Qcm9wc0Z1bmMobWFwRGlzcGF0Y2hUb1Byb3BzLCAnbWFwRGlzcGF0Y2hUb1Byb3BzJykgOiB1bmRlZmluZWQ7XG59XG5leHBvcnQgZnVuY3Rpb24gd2hlbk1hcERpc3BhdGNoVG9Qcm9wc0lzTWlzc2luZyhtYXBEaXNwYXRjaFRvUHJvcHMpIHtcbiAgcmV0dXJuICFtYXBEaXNwYXRjaFRvUHJvcHMgPyB3cmFwTWFwVG9Qcm9wc0NvbnN0YW50KGZ1bmN0aW9uIChkaXNwYXRjaCkge1xuICAgIHJldHVybiB7XG4gICAgICBkaXNwYXRjaDogZGlzcGF0Y2hcbiAgICB9O1xuICB9KSA6IHVuZGVmaW5lZDtcbn1cbmV4cG9ydCBmdW5jdGlvbiB3aGVuTWFwRGlzcGF0Y2hUb1Byb3BzSXNPYmplY3QobWFwRGlzcGF0Y2hUb1Byb3BzKSB7XG4gIHJldHVybiBtYXBEaXNwYXRjaFRvUHJvcHMgJiYgdHlwZW9mIG1hcERpc3BhdGNoVG9Qcm9wcyA9PT0gJ29iamVjdCcgPyB3cmFwTWFwVG9Qcm9wc0NvbnN0YW50KGZ1bmN0aW9uIChkaXNwYXRjaCkge1xuICAgIHJldHVybiBiaW5kQWN0aW9uQ3JlYXRvcnMobWFwRGlzcGF0Y2hUb1Byb3BzLCBkaXNwYXRjaCk7XG4gIH0pIDogdW5kZWZpbmVkO1xufVxuZXhwb3J0IGRlZmF1bHQgW3doZW5NYXBEaXNwYXRjaFRvUHJvcHNJc0Z1bmN0aW9uLCB3aGVuTWFwRGlzcGF0Y2hUb1Byb3BzSXNNaXNzaW5nLCB3aGVuTWFwRGlzcGF0Y2hUb1Byb3BzSXNPYmplY3RdOyIsImltcG9ydCB7IHdyYXBNYXBUb1Byb3BzQ29uc3RhbnQsIHdyYXBNYXBUb1Byb3BzRnVuYyB9IGZyb20gJy4vd3JhcE1hcFRvUHJvcHMnO1xuZXhwb3J0IGZ1bmN0aW9uIHdoZW5NYXBTdGF0ZVRvUHJvcHNJc0Z1bmN0aW9uKG1hcFN0YXRlVG9Qcm9wcykge1xuICByZXR1cm4gdHlwZW9mIG1hcFN0YXRlVG9Qcm9wcyA9PT0gJ2Z1bmN0aW9uJyA/IHdyYXBNYXBUb1Byb3BzRnVuYyhtYXBTdGF0ZVRvUHJvcHMsICdtYXBTdGF0ZVRvUHJvcHMnKSA6IHVuZGVmaW5lZDtcbn1cbmV4cG9ydCBmdW5jdGlvbiB3aGVuTWFwU3RhdGVUb1Byb3BzSXNNaXNzaW5nKG1hcFN0YXRlVG9Qcm9wcykge1xuICByZXR1cm4gIW1hcFN0YXRlVG9Qcm9wcyA/IHdyYXBNYXBUb1Byb3BzQ29uc3RhbnQoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7fTtcbiAgfSkgOiB1bmRlZmluZWQ7XG59XG5leHBvcnQgZGVmYXVsdCBbd2hlbk1hcFN0YXRlVG9Qcm9wc0lzRnVuY3Rpb24sIHdoZW5NYXBTdGF0ZVRvUHJvcHNJc01pc3NpbmddOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IHZlcmlmeVBsYWluT2JqZWN0IGZyb20gJy4uL3V0aWxzL3ZlcmlmeVBsYWluT2JqZWN0JztcbmV4cG9ydCBmdW5jdGlvbiBkZWZhdWx0TWVyZ2VQcm9wcyhzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcykge1xuICByZXR1cm4gX2V4dGVuZHMoe30sIG93blByb3BzLCB7fSwgc3RhdGVQcm9wcywge30sIGRpc3BhdGNoUHJvcHMpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHdyYXBNZXJnZVByb3BzRnVuYyhtZXJnZVByb3BzKSB7XG4gIHJldHVybiBmdW5jdGlvbiBpbml0TWVyZ2VQcm9wc1Byb3h5KGRpc3BhdGNoLCBfcmVmKSB7XG4gICAgdmFyIGRpc3BsYXlOYW1lID0gX3JlZi5kaXNwbGF5TmFtZSxcbiAgICAgICAgcHVyZSA9IF9yZWYucHVyZSxcbiAgICAgICAgYXJlTWVyZ2VkUHJvcHNFcXVhbCA9IF9yZWYuYXJlTWVyZ2VkUHJvcHNFcXVhbDtcbiAgICB2YXIgaGFzUnVuT25jZSA9IGZhbHNlO1xuICAgIHZhciBtZXJnZWRQcm9wcztcbiAgICByZXR1cm4gZnVuY3Rpb24gbWVyZ2VQcm9wc1Byb3h5KHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKSB7XG4gICAgICB2YXIgbmV4dE1lcmdlZFByb3BzID0gbWVyZ2VQcm9wcyhzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcyk7XG5cbiAgICAgIGlmIChoYXNSdW5PbmNlKSB7XG4gICAgICAgIGlmICghcHVyZSB8fCAhYXJlTWVyZ2VkUHJvcHNFcXVhbChuZXh0TWVyZ2VkUHJvcHMsIG1lcmdlZFByb3BzKSkgbWVyZ2VkUHJvcHMgPSBuZXh0TWVyZ2VkUHJvcHM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBoYXNSdW5PbmNlID0gdHJ1ZTtcbiAgICAgICAgbWVyZ2VkUHJvcHMgPSBuZXh0TWVyZ2VkUHJvcHM7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB2ZXJpZnlQbGFpbk9iamVjdChtZXJnZWRQcm9wcywgZGlzcGxheU5hbWUsICdtZXJnZVByb3BzJyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBtZXJnZWRQcm9wcztcbiAgICB9O1xuICB9O1xufVxuZXhwb3J0IGZ1bmN0aW9uIHdoZW5NZXJnZVByb3BzSXNGdW5jdGlvbihtZXJnZVByb3BzKSB7XG4gIHJldHVybiB0eXBlb2YgbWVyZ2VQcm9wcyA9PT0gJ2Z1bmN0aW9uJyA/IHdyYXBNZXJnZVByb3BzRnVuYyhtZXJnZVByb3BzKSA6IHVuZGVmaW5lZDtcbn1cbmV4cG9ydCBmdW5jdGlvbiB3aGVuTWVyZ2VQcm9wc0lzT21pdHRlZChtZXJnZVByb3BzKSB7XG4gIHJldHVybiAhbWVyZ2VQcm9wcyA/IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZGVmYXVsdE1lcmdlUHJvcHM7XG4gIH0gOiB1bmRlZmluZWQ7XG59XG5leHBvcnQgZGVmYXVsdCBbd2hlbk1lcmdlUHJvcHNJc0Z1bmN0aW9uLCB3aGVuTWVyZ2VQcm9wc0lzT21pdHRlZF07IiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgdmVyaWZ5U3Vic2VsZWN0b3JzIGZyb20gJy4vdmVyaWZ5U3Vic2VsZWN0b3JzJztcbmV4cG9ydCBmdW5jdGlvbiBpbXB1cmVGaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtZXJnZVByb3BzLCBkaXNwYXRjaCkge1xuICByZXR1cm4gZnVuY3Rpb24gaW1wdXJlRmluYWxQcm9wc1NlbGVjdG9yKHN0YXRlLCBvd25Qcm9wcykge1xuICAgIHJldHVybiBtZXJnZVByb3BzKG1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSwgb3duUHJvcHMpLCBtYXBEaXNwYXRjaFRvUHJvcHMoZGlzcGF0Y2gsIG93blByb3BzKSwgb3duUHJvcHMpO1xuICB9O1xufVxuZXhwb3J0IGZ1bmN0aW9uIHB1cmVGaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtZXJnZVByb3BzLCBkaXNwYXRjaCwgX3JlZikge1xuICB2YXIgYXJlU3RhdGVzRXF1YWwgPSBfcmVmLmFyZVN0YXRlc0VxdWFsLFxuICAgICAgYXJlT3duUHJvcHNFcXVhbCA9IF9yZWYuYXJlT3duUHJvcHNFcXVhbCxcbiAgICAgIGFyZVN0YXRlUHJvcHNFcXVhbCA9IF9yZWYuYXJlU3RhdGVQcm9wc0VxdWFsO1xuICB2YXIgaGFzUnVuQXRMZWFzdE9uY2UgPSBmYWxzZTtcbiAgdmFyIHN0YXRlO1xuICB2YXIgb3duUHJvcHM7XG4gIHZhciBzdGF0ZVByb3BzO1xuICB2YXIgZGlzcGF0Y2hQcm9wcztcbiAgdmFyIG1lcmdlZFByb3BzO1xuXG4gIGZ1bmN0aW9uIGhhbmRsZUZpcnN0Q2FsbChmaXJzdFN0YXRlLCBmaXJzdE93blByb3BzKSB7XG4gICAgc3RhdGUgPSBmaXJzdFN0YXRlO1xuICAgIG93blByb3BzID0gZmlyc3RPd25Qcm9wcztcbiAgICBzdGF0ZVByb3BzID0gbWFwU3RhdGVUb1Byb3BzKHN0YXRlLCBvd25Qcm9wcyk7XG4gICAgZGlzcGF0Y2hQcm9wcyA9IG1hcERpc3BhdGNoVG9Qcm9wcyhkaXNwYXRjaCwgb3duUHJvcHMpO1xuICAgIG1lcmdlZFByb3BzID0gbWVyZ2VQcm9wcyhzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcyk7XG4gICAgaGFzUnVuQXRMZWFzdE9uY2UgPSB0cnVlO1xuICAgIHJldHVybiBtZXJnZWRQcm9wcztcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZU5ld1Byb3BzQW5kTmV3U3RhdGUoKSB7XG4gICAgc3RhdGVQcm9wcyA9IG1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSwgb3duUHJvcHMpO1xuICAgIGlmIChtYXBEaXNwYXRjaFRvUHJvcHMuZGVwZW5kc09uT3duUHJvcHMpIGRpc3BhdGNoUHJvcHMgPSBtYXBEaXNwYXRjaFRvUHJvcHMoZGlzcGF0Y2gsIG93blByb3BzKTtcbiAgICBtZXJnZWRQcm9wcyA9IG1lcmdlUHJvcHMoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpO1xuICAgIHJldHVybiBtZXJnZWRQcm9wcztcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZU5ld1Byb3BzKCkge1xuICAgIGlmIChtYXBTdGF0ZVRvUHJvcHMuZGVwZW5kc09uT3duUHJvcHMpIHN0YXRlUHJvcHMgPSBtYXBTdGF0ZVRvUHJvcHMoc3RhdGUsIG93blByb3BzKTtcbiAgICBpZiAobWFwRGlzcGF0Y2hUb1Byb3BzLmRlcGVuZHNPbk93blByb3BzKSBkaXNwYXRjaFByb3BzID0gbWFwRGlzcGF0Y2hUb1Byb3BzKGRpc3BhdGNoLCBvd25Qcm9wcyk7XG4gICAgbWVyZ2VkUHJvcHMgPSBtZXJnZVByb3BzKHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKTtcbiAgICByZXR1cm4gbWVyZ2VkUHJvcHM7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVOZXdTdGF0ZSgpIHtcbiAgICB2YXIgbmV4dFN0YXRlUHJvcHMgPSBtYXBTdGF0ZVRvUHJvcHMoc3RhdGUsIG93blByb3BzKTtcbiAgICB2YXIgc3RhdGVQcm9wc0NoYW5nZWQgPSAhYXJlU3RhdGVQcm9wc0VxdWFsKG5leHRTdGF0ZVByb3BzLCBzdGF0ZVByb3BzKTtcbiAgICBzdGF0ZVByb3BzID0gbmV4dFN0YXRlUHJvcHM7XG4gICAgaWYgKHN0YXRlUHJvcHNDaGFuZ2VkKSBtZXJnZWRQcm9wcyA9IG1lcmdlUHJvcHMoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpO1xuICAgIHJldHVybiBtZXJnZWRQcm9wcztcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZVN1YnNlcXVlbnRDYWxscyhuZXh0U3RhdGUsIG5leHRPd25Qcm9wcykge1xuICAgIHZhciBwcm9wc0NoYW5nZWQgPSAhYXJlT3duUHJvcHNFcXVhbChuZXh0T3duUHJvcHMsIG93blByb3BzKTtcbiAgICB2YXIgc3RhdGVDaGFuZ2VkID0gIWFyZVN0YXRlc0VxdWFsKG5leHRTdGF0ZSwgc3RhdGUpO1xuICAgIHN0YXRlID0gbmV4dFN0YXRlO1xuICAgIG93blByb3BzID0gbmV4dE93blByb3BzO1xuICAgIGlmIChwcm9wc0NoYW5nZWQgJiYgc3RhdGVDaGFuZ2VkKSByZXR1cm4gaGFuZGxlTmV3UHJvcHNBbmROZXdTdGF0ZSgpO1xuICAgIGlmIChwcm9wc0NoYW5nZWQpIHJldHVybiBoYW5kbGVOZXdQcm9wcygpO1xuICAgIGlmIChzdGF0ZUNoYW5nZWQpIHJldHVybiBoYW5kbGVOZXdTdGF0ZSgpO1xuICAgIHJldHVybiBtZXJnZWRQcm9wcztcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiBwdXJlRmluYWxQcm9wc1NlbGVjdG9yKG5leHRTdGF0ZSwgbmV4dE93blByb3BzKSB7XG4gICAgcmV0dXJuIGhhc1J1bkF0TGVhc3RPbmNlID8gaGFuZGxlU3Vic2VxdWVudENhbGxzKG5leHRTdGF0ZSwgbmV4dE93blByb3BzKSA6IGhhbmRsZUZpcnN0Q2FsbChuZXh0U3RhdGUsIG5leHRPd25Qcm9wcyk7XG4gIH07XG59IC8vIFRPRE86IEFkZCBtb3JlIGNvbW1lbnRzXG4vLyBJZiBwdXJlIGlzIHRydWUsIHRoZSBzZWxlY3RvciByZXR1cm5lZCBieSBzZWxlY3RvckZhY3Rvcnkgd2lsbCBtZW1vaXplIGl0cyByZXN1bHRzLFxuLy8gYWxsb3dpbmcgY29ubmVjdEFkdmFuY2VkJ3Mgc2hvdWxkQ29tcG9uZW50VXBkYXRlIHRvIHJldHVybiBmYWxzZSBpZiBmaW5hbFxuLy8gcHJvcHMgaGF2ZSBub3QgY2hhbmdlZC4gSWYgZmFsc2UsIHRoZSBzZWxlY3RvciB3aWxsIGFsd2F5cyByZXR1cm4gYSBuZXdcbi8vIG9iamVjdCBhbmQgc2hvdWxkQ29tcG9uZW50VXBkYXRlIHdpbGwgYWx3YXlzIHJldHVybiB0cnVlLlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5KGRpc3BhdGNoLCBfcmVmMikge1xuICB2YXIgaW5pdE1hcFN0YXRlVG9Qcm9wcyA9IF9yZWYyLmluaXRNYXBTdGF0ZVRvUHJvcHMsXG4gICAgICBpbml0TWFwRGlzcGF0Y2hUb1Byb3BzID0gX3JlZjIuaW5pdE1hcERpc3BhdGNoVG9Qcm9wcyxcbiAgICAgIGluaXRNZXJnZVByb3BzID0gX3JlZjIuaW5pdE1lcmdlUHJvcHMsXG4gICAgICBvcHRpb25zID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZjIsIFtcImluaXRNYXBTdGF0ZVRvUHJvcHNcIiwgXCJpbml0TWFwRGlzcGF0Y2hUb1Byb3BzXCIsIFwiaW5pdE1lcmdlUHJvcHNcIl0pO1xuXG4gIHZhciBtYXBTdGF0ZVRvUHJvcHMgPSBpbml0TWFwU3RhdGVUb1Byb3BzKGRpc3BhdGNoLCBvcHRpb25zKTtcbiAgdmFyIG1hcERpc3BhdGNoVG9Qcm9wcyA9IGluaXRNYXBEaXNwYXRjaFRvUHJvcHMoZGlzcGF0Y2gsIG9wdGlvbnMpO1xuICB2YXIgbWVyZ2VQcm9wcyA9IGluaXRNZXJnZVByb3BzKGRpc3BhdGNoLCBvcHRpb25zKTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHZlcmlmeVN1YnNlbGVjdG9ycyhtYXBTdGF0ZVRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wcywgbWVyZ2VQcm9wcywgb3B0aW9ucy5kaXNwbGF5TmFtZSk7XG4gIH1cblxuICB2YXIgc2VsZWN0b3JGYWN0b3J5ID0gb3B0aW9ucy5wdXJlID8gcHVyZUZpbmFsUHJvcHNTZWxlY3RvckZhY3RvcnkgOiBpbXB1cmVGaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5O1xuICByZXR1cm4gc2VsZWN0b3JGYWN0b3J5KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtZXJnZVByb3BzLCBkaXNwYXRjaCwgb3B0aW9ucyk7XG59IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBjb25uZWN0QWR2YW5jZWQgZnJvbSAnLi4vY29tcG9uZW50cy9jb25uZWN0QWR2YW5jZWQnO1xuaW1wb3J0IHNoYWxsb3dFcXVhbCBmcm9tICcuLi91dGlscy9zaGFsbG93RXF1YWwnO1xuaW1wb3J0IGRlZmF1bHRNYXBEaXNwYXRjaFRvUHJvcHNGYWN0b3JpZXMgZnJvbSAnLi9tYXBEaXNwYXRjaFRvUHJvcHMnO1xuaW1wb3J0IGRlZmF1bHRNYXBTdGF0ZVRvUHJvcHNGYWN0b3JpZXMgZnJvbSAnLi9tYXBTdGF0ZVRvUHJvcHMnO1xuaW1wb3J0IGRlZmF1bHRNZXJnZVByb3BzRmFjdG9yaWVzIGZyb20gJy4vbWVyZ2VQcm9wcyc7XG5pbXBvcnQgZGVmYXVsdFNlbGVjdG9yRmFjdG9yeSBmcm9tICcuL3NlbGVjdG9yRmFjdG9yeSc7XG4vKlxuICBjb25uZWN0IGlzIGEgZmFjYWRlIG92ZXIgY29ubmVjdEFkdmFuY2VkLiBJdCB0dXJucyBpdHMgYXJncyBpbnRvIGEgY29tcGF0aWJsZVxuICBzZWxlY3RvckZhY3RvcnksIHdoaWNoIGhhcyB0aGUgc2lnbmF0dXJlOlxuXG4gICAgKGRpc3BhdGNoLCBvcHRpb25zKSA9PiAobmV4dFN0YXRlLCBuZXh0T3duUHJvcHMpID0+IG5leHRGaW5hbFByb3BzXG4gIFxuICBjb25uZWN0IHBhc3NlcyBpdHMgYXJncyB0byBjb25uZWN0QWR2YW5jZWQgYXMgb3B0aW9ucywgd2hpY2ggd2lsbCBpbiB0dXJuIHBhc3MgdGhlbSB0b1xuICBzZWxlY3RvckZhY3RvcnkgZWFjaCB0aW1lIGEgQ29ubmVjdCBjb21wb25lbnQgaW5zdGFuY2UgaXMgaW5zdGFudGlhdGVkIG9yIGhvdCByZWxvYWRlZC5cblxuICBzZWxlY3RvckZhY3RvcnkgcmV0dXJucyBhIGZpbmFsIHByb3BzIHNlbGVjdG9yIGZyb20gaXRzIG1hcFN0YXRlVG9Qcm9wcyxcbiAgbWFwU3RhdGVUb1Byb3BzRmFjdG9yaWVzLCBtYXBEaXNwYXRjaFRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcmllcywgbWVyZ2VQcm9wcyxcbiAgbWVyZ2VQcm9wc0ZhY3RvcmllcywgYW5kIHB1cmUgYXJncy5cblxuICBUaGUgcmVzdWx0aW5nIGZpbmFsIHByb3BzIHNlbGVjdG9yIGlzIGNhbGxlZCBieSB0aGUgQ29ubmVjdCBjb21wb25lbnQgaW5zdGFuY2Ugd2hlbmV2ZXJcbiAgaXQgcmVjZWl2ZXMgbmV3IHByb3BzIG9yIHN0b3JlIHN0YXRlLlxuICovXG5cbmZ1bmN0aW9uIG1hdGNoKGFyZywgZmFjdG9yaWVzLCBuYW1lKSB7XG4gIGZvciAodmFyIGkgPSBmYWN0b3JpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICB2YXIgcmVzdWx0ID0gZmFjdG9yaWVzW2ldKGFyZyk7XG4gICAgaWYgKHJlc3VsdCkgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoZGlzcGF0Y2gsIG9wdGlvbnMpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIHZhbHVlIG9mIHR5cGUgXCIgKyB0eXBlb2YgYXJnICsgXCIgZm9yIFwiICsgbmFtZSArIFwiIGFyZ3VtZW50IHdoZW4gY29ubmVjdGluZyBjb21wb25lbnQgXCIgKyBvcHRpb25zLndyYXBwZWRDb21wb25lbnROYW1lICsgXCIuXCIpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzdHJpY3RFcXVhbChhLCBiKSB7XG4gIHJldHVybiBhID09PSBiO1xufSAvLyBjcmVhdGVDb25uZWN0IHdpdGggZGVmYXVsdCBhcmdzIGJ1aWxkcyB0aGUgJ29mZmljaWFsJyBjb25uZWN0IGJlaGF2aW9yLiBDYWxsaW5nIGl0IHdpdGhcbi8vIGRpZmZlcmVudCBvcHRpb25zIG9wZW5zIHVwIHNvbWUgdGVzdGluZyBhbmQgZXh0ZW5zaWJpbGl0eSBzY2VuYXJpb3NcblxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQ29ubmVjdChfdGVtcCkge1xuICB2YXIgX3JlZiA9IF90ZW1wID09PSB2b2lkIDAgPyB7fSA6IF90ZW1wLFxuICAgICAgX3JlZiRjb25uZWN0SE9DID0gX3JlZi5jb25uZWN0SE9DLFxuICAgICAgY29ubmVjdEhPQyA9IF9yZWYkY29ubmVjdEhPQyA9PT0gdm9pZCAwID8gY29ubmVjdEFkdmFuY2VkIDogX3JlZiRjb25uZWN0SE9DLFxuICAgICAgX3JlZiRtYXBTdGF0ZVRvUHJvcHNGID0gX3JlZi5tYXBTdGF0ZVRvUHJvcHNGYWN0b3JpZXMsXG4gICAgICBtYXBTdGF0ZVRvUHJvcHNGYWN0b3JpZXMgPSBfcmVmJG1hcFN0YXRlVG9Qcm9wc0YgPT09IHZvaWQgMCA/IGRlZmF1bHRNYXBTdGF0ZVRvUHJvcHNGYWN0b3JpZXMgOiBfcmVmJG1hcFN0YXRlVG9Qcm9wc0YsXG4gICAgICBfcmVmJG1hcERpc3BhdGNoVG9Qcm8gPSBfcmVmLm1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcmllcyxcbiAgICAgIG1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcmllcyA9IF9yZWYkbWFwRGlzcGF0Y2hUb1BybyA9PT0gdm9pZCAwID8gZGVmYXVsdE1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcmllcyA6IF9yZWYkbWFwRGlzcGF0Y2hUb1BybyxcbiAgICAgIF9yZWYkbWVyZ2VQcm9wc0ZhY3RvciA9IF9yZWYubWVyZ2VQcm9wc0ZhY3RvcmllcyxcbiAgICAgIG1lcmdlUHJvcHNGYWN0b3JpZXMgPSBfcmVmJG1lcmdlUHJvcHNGYWN0b3IgPT09IHZvaWQgMCA/IGRlZmF1bHRNZXJnZVByb3BzRmFjdG9yaWVzIDogX3JlZiRtZXJnZVByb3BzRmFjdG9yLFxuICAgICAgX3JlZiRzZWxlY3RvckZhY3RvcnkgPSBfcmVmLnNlbGVjdG9yRmFjdG9yeSxcbiAgICAgIHNlbGVjdG9yRmFjdG9yeSA9IF9yZWYkc2VsZWN0b3JGYWN0b3J5ID09PSB2b2lkIDAgPyBkZWZhdWx0U2VsZWN0b3JGYWN0b3J5IDogX3JlZiRzZWxlY3RvckZhY3Rvcnk7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIGNvbm5lY3QobWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMsIG1lcmdlUHJvcHMsIF9yZWYyKSB7XG4gICAgaWYgKF9yZWYyID09PSB2b2lkIDApIHtcbiAgICAgIF9yZWYyID0ge307XG4gICAgfVxuXG4gICAgdmFyIF9yZWYzID0gX3JlZjIsXG4gICAgICAgIF9yZWYzJHB1cmUgPSBfcmVmMy5wdXJlLFxuICAgICAgICBwdXJlID0gX3JlZjMkcHVyZSA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9yZWYzJHB1cmUsXG4gICAgICAgIF9yZWYzJGFyZVN0YXRlc0VxdWFsID0gX3JlZjMuYXJlU3RhdGVzRXF1YWwsXG4gICAgICAgIGFyZVN0YXRlc0VxdWFsID0gX3JlZjMkYXJlU3RhdGVzRXF1YWwgPT09IHZvaWQgMCA/IHN0cmljdEVxdWFsIDogX3JlZjMkYXJlU3RhdGVzRXF1YWwsXG4gICAgICAgIF9yZWYzJGFyZU93blByb3BzRXF1YSA9IF9yZWYzLmFyZU93blByb3BzRXF1YWwsXG4gICAgICAgIGFyZU93blByb3BzRXF1YWwgPSBfcmVmMyRhcmVPd25Qcm9wc0VxdWEgPT09IHZvaWQgMCA/IHNoYWxsb3dFcXVhbCA6IF9yZWYzJGFyZU93blByb3BzRXF1YSxcbiAgICAgICAgX3JlZjMkYXJlU3RhdGVQcm9wc0VxID0gX3JlZjMuYXJlU3RhdGVQcm9wc0VxdWFsLFxuICAgICAgICBhcmVTdGF0ZVByb3BzRXF1YWwgPSBfcmVmMyRhcmVTdGF0ZVByb3BzRXEgPT09IHZvaWQgMCA/IHNoYWxsb3dFcXVhbCA6IF9yZWYzJGFyZVN0YXRlUHJvcHNFcSxcbiAgICAgICAgX3JlZjMkYXJlTWVyZ2VkUHJvcHNFID0gX3JlZjMuYXJlTWVyZ2VkUHJvcHNFcXVhbCxcbiAgICAgICAgYXJlTWVyZ2VkUHJvcHNFcXVhbCA9IF9yZWYzJGFyZU1lcmdlZFByb3BzRSA9PT0gdm9pZCAwID8gc2hhbGxvd0VxdWFsIDogX3JlZjMkYXJlTWVyZ2VkUHJvcHNFLFxuICAgICAgICBleHRyYU9wdGlvbnMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmMywgW1wicHVyZVwiLCBcImFyZVN0YXRlc0VxdWFsXCIsIFwiYXJlT3duUHJvcHNFcXVhbFwiLCBcImFyZVN0YXRlUHJvcHNFcXVhbFwiLCBcImFyZU1lcmdlZFByb3BzRXF1YWxcIl0pO1xuXG4gICAgdmFyIGluaXRNYXBTdGF0ZVRvUHJvcHMgPSBtYXRjaChtYXBTdGF0ZVRvUHJvcHMsIG1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcywgJ21hcFN0YXRlVG9Qcm9wcycpO1xuICAgIHZhciBpbml0TWFwRGlzcGF0Y2hUb1Byb3BzID0gbWF0Y2gobWFwRGlzcGF0Y2hUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHNGYWN0b3JpZXMsICdtYXBEaXNwYXRjaFRvUHJvcHMnKTtcbiAgICB2YXIgaW5pdE1lcmdlUHJvcHMgPSBtYXRjaChtZXJnZVByb3BzLCBtZXJnZVByb3BzRmFjdG9yaWVzLCAnbWVyZ2VQcm9wcycpO1xuICAgIHJldHVybiBjb25uZWN0SE9DKHNlbGVjdG9yRmFjdG9yeSwgX2V4dGVuZHMoe1xuICAgICAgLy8gdXNlZCBpbiBlcnJvciBtZXNzYWdlc1xuICAgICAgbWV0aG9kTmFtZTogJ2Nvbm5lY3QnLFxuICAgICAgLy8gdXNlZCB0byBjb21wdXRlIENvbm5lY3QncyBkaXNwbGF5TmFtZSBmcm9tIHRoZSB3cmFwcGVkIGNvbXBvbmVudCdzIGRpc3BsYXlOYW1lLlxuICAgICAgZ2V0RGlzcGxheU5hbWU6IGZ1bmN0aW9uIGdldERpc3BsYXlOYW1lKG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIFwiQ29ubmVjdChcIiArIG5hbWUgKyBcIilcIjtcbiAgICAgIH0sXG4gICAgICAvLyBpZiBtYXBTdGF0ZVRvUHJvcHMgaXMgZmFsc3ksIHRoZSBDb25uZWN0IGNvbXBvbmVudCBkb2Vzbid0IHN1YnNjcmliZSB0byBzdG9yZSBzdGF0ZSBjaGFuZ2VzXG4gICAgICBzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXM6IEJvb2xlYW4obWFwU3RhdGVUb1Byb3BzKSxcbiAgICAgIC8vIHBhc3NlZCB0aHJvdWdoIHRvIHNlbGVjdG9yRmFjdG9yeVxuICAgICAgaW5pdE1hcFN0YXRlVG9Qcm9wczogaW5pdE1hcFN0YXRlVG9Qcm9wcyxcbiAgICAgIGluaXRNYXBEaXNwYXRjaFRvUHJvcHM6IGluaXRNYXBEaXNwYXRjaFRvUHJvcHMsXG4gICAgICBpbml0TWVyZ2VQcm9wczogaW5pdE1lcmdlUHJvcHMsXG4gICAgICBwdXJlOiBwdXJlLFxuICAgICAgYXJlU3RhdGVzRXF1YWw6IGFyZVN0YXRlc0VxdWFsLFxuICAgICAgYXJlT3duUHJvcHNFcXVhbDogYXJlT3duUHJvcHNFcXVhbCxcbiAgICAgIGFyZVN0YXRlUHJvcHNFcXVhbDogYXJlU3RhdGVQcm9wc0VxdWFsLFxuICAgICAgYXJlTWVyZ2VkUHJvcHNFcXVhbDogYXJlTWVyZ2VkUHJvcHNFcXVhbFxuICAgIH0sIGV4dHJhT3B0aW9ucykpO1xuICB9O1xufVxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlQ29ubmVjdCgpOyIsImltcG9ydCB7IHVzZUNvbnRleHQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gJ2ludmFyaWFudCc7XG5pbXBvcnQgeyBSZWFjdFJlZHV4Q29udGV4dCB9IGZyb20gJy4uL2NvbXBvbmVudHMvQ29udGV4dCc7XG4vKipcbiAqIEEgaG9vayB0byBhY2Nlc3MgdGhlIHZhbHVlIG9mIHRoZSBgUmVhY3RSZWR1eENvbnRleHRgLiBUaGlzIGlzIGEgbG93LWxldmVsXG4gKiBob29rIHRoYXQgeW91IHNob3VsZCB1c3VhbGx5IG5vdCBuZWVkIHRvIGNhbGwgZGlyZWN0bHkuXG4gKlxuICogQHJldHVybnMge2FueX0gdGhlIHZhbHVlIG9mIHRoZSBgUmVhY3RSZWR1eENvbnRleHRgXG4gKlxuICogQGV4YW1wbGVcbiAqXG4gKiBpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG4gKiBpbXBvcnQgeyB1c2VSZWR1eENvbnRleHQgfSBmcm9tICdyZWFjdC1yZWR1eCdcbiAqXG4gKiBleHBvcnQgY29uc3QgQ291bnRlckNvbXBvbmVudCA9ICh7IHZhbHVlIH0pID0+IHtcbiAqICAgY29uc3QgeyBzdG9yZSB9ID0gdXNlUmVkdXhDb250ZXh0KClcbiAqICAgcmV0dXJuIDxkaXY+e3N0b3JlLmdldFN0YXRlKCl9PC9kaXY+XG4gKiB9XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHVzZVJlZHV4Q29udGV4dCgpIHtcbiAgdmFyIGNvbnRleHRWYWx1ZSA9IHVzZUNvbnRleHQoUmVhY3RSZWR1eENvbnRleHQpO1xuICBpbnZhcmlhbnQoY29udGV4dFZhbHVlLCAnY291bGQgbm90IGZpbmQgcmVhY3QtcmVkdXggY29udGV4dCB2YWx1ZTsgcGxlYXNlIGVuc3VyZSB0aGUgY29tcG9uZW50IGlzIHdyYXBwZWQgaW4gYSA8UHJvdmlkZXI+Jyk7XG4gIHJldHVybiBjb250ZXh0VmFsdWU7XG59IiwiaW1wb3J0IHsgdXNlQ29udGV4dCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IFJlYWN0UmVkdXhDb250ZXh0IH0gZnJvbSAnLi4vY29tcG9uZW50cy9Db250ZXh0JztcbmltcG9ydCB7IHVzZVJlZHV4Q29udGV4dCBhcyB1c2VEZWZhdWx0UmVkdXhDb250ZXh0IH0gZnJvbSAnLi91c2VSZWR1eENvbnRleHQnO1xuLyoqXG4gKiBIb29rIGZhY3RvcnksIHdoaWNoIGNyZWF0ZXMgYSBgdXNlU3RvcmVgIGhvb2sgYm91bmQgdG8gYSBnaXZlbiBjb250ZXh0LlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb250ZXh0PVJlYWN0UmVkdXhDb250ZXh0XSBDb250ZXh0IHBhc3NlZCB0byB5b3VyIGA8UHJvdmlkZXI+YC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSBgdXNlU3RvcmVgIGhvb2sgYm91bmQgdG8gdGhlIHNwZWNpZmllZCBjb250ZXh0LlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTdG9yZUhvb2soY29udGV4dCkge1xuICBpZiAoY29udGV4dCA9PT0gdm9pZCAwKSB7XG4gICAgY29udGV4dCA9IFJlYWN0UmVkdXhDb250ZXh0O1xuICB9XG5cbiAgdmFyIHVzZVJlZHV4Q29udGV4dCA9IGNvbnRleHQgPT09IFJlYWN0UmVkdXhDb250ZXh0ID8gdXNlRGVmYXVsdFJlZHV4Q29udGV4dCA6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdXNlQ29udGV4dChjb250ZXh0KTtcbiAgfTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVzZVN0b3JlKCkge1xuICAgIHZhciBfdXNlUmVkdXhDb250ZXh0ID0gdXNlUmVkdXhDb250ZXh0KCksXG4gICAgICAgIHN0b3JlID0gX3VzZVJlZHV4Q29udGV4dC5zdG9yZTtcblxuICAgIHJldHVybiBzdG9yZTtcbiAgfTtcbn1cbi8qKlxuICogQSBob29rIHRvIGFjY2VzcyB0aGUgcmVkdXggc3RvcmUuXG4gKlxuICogQHJldHVybnMge2FueX0gdGhlIHJlZHV4IHN0b3JlXG4gKlxuICogQGV4YW1wbGVcbiAqXG4gKiBpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG4gKiBpbXBvcnQgeyB1c2VTdG9yZSB9IGZyb20gJ3JlYWN0LXJlZHV4J1xuICpcbiAqIGV4cG9ydCBjb25zdCBFeGFtcGxlQ29tcG9uZW50ID0gKCkgPT4ge1xuICogICBjb25zdCBzdG9yZSA9IHVzZVN0b3JlKClcbiAqICAgcmV0dXJuIDxkaXY+e3N0b3JlLmdldFN0YXRlKCl9PC9kaXY+XG4gKiB9XG4gKi9cblxuZXhwb3J0IHZhciB1c2VTdG9yZSA9IGNyZWF0ZVN0b3JlSG9vaygpOyIsImltcG9ydCB7IFJlYWN0UmVkdXhDb250ZXh0IH0gZnJvbSAnLi4vY29tcG9uZW50cy9Db250ZXh0JztcbmltcG9ydCB7IHVzZVN0b3JlIGFzIHVzZURlZmF1bHRTdG9yZSwgY3JlYXRlU3RvcmVIb29rIH0gZnJvbSAnLi91c2VTdG9yZSc7XG4vKipcbiAqIEhvb2sgZmFjdG9yeSwgd2hpY2ggY3JlYXRlcyBhIGB1c2VEaXNwYXRjaGAgaG9vayBib3VuZCB0byBhIGdpdmVuIGNvbnRleHQuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbnRleHQ9UmVhY3RSZWR1eENvbnRleHRdIENvbnRleHQgcGFzc2VkIHRvIHlvdXIgYDxQcm92aWRlcj5gLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBBIGB1c2VEaXNwYXRjaGAgaG9vayBib3VuZCB0byB0aGUgc3BlY2lmaWVkIGNvbnRleHQuXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZURpc3BhdGNoSG9vayhjb250ZXh0KSB7XG4gIGlmIChjb250ZXh0ID09PSB2b2lkIDApIHtcbiAgICBjb250ZXh0ID0gUmVhY3RSZWR1eENvbnRleHQ7XG4gIH1cblxuICB2YXIgdXNlU3RvcmUgPSBjb250ZXh0ID09PSBSZWFjdFJlZHV4Q29udGV4dCA/IHVzZURlZmF1bHRTdG9yZSA6IGNyZWF0ZVN0b3JlSG9vayhjb250ZXh0KTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVzZURpc3BhdGNoKCkge1xuICAgIHZhciBzdG9yZSA9IHVzZVN0b3JlKCk7XG4gICAgcmV0dXJuIHN0b3JlLmRpc3BhdGNoO1xuICB9O1xufVxuLyoqXG4gKiBBIGhvb2sgdG8gYWNjZXNzIHRoZSByZWR1eCBgZGlzcGF0Y2hgIGZ1bmN0aW9uLlxuICpcbiAqIEByZXR1cm5zIHthbnl8ZnVuY3Rpb259IHJlZHV4IHN0b3JlJ3MgYGRpc3BhdGNoYCBmdW5jdGlvblxuICpcbiAqIEBleGFtcGxlXG4gKlxuICogaW1wb3J0IFJlYWN0LCB7IHVzZUNhbGxiYWNrIH0gZnJvbSAncmVhY3QnXG4gKiBpbXBvcnQgeyB1c2VEaXNwYXRjaCB9IGZyb20gJ3JlYWN0LXJlZHV4J1xuICpcbiAqIGV4cG9ydCBjb25zdCBDb3VudGVyQ29tcG9uZW50ID0gKHsgdmFsdWUgfSkgPT4ge1xuICogICBjb25zdCBkaXNwYXRjaCA9IHVzZURpc3BhdGNoKClcbiAqICAgY29uc3QgaW5jcmVhc2VDb3VudGVyID0gdXNlQ2FsbGJhY2soKCkgPT4gZGlzcGF0Y2goeyB0eXBlOiAnaW5jcmVhc2UtY291bnRlcicgfSksIFtdKVxuICogICByZXR1cm4gKFxuICogICAgIDxkaXY+XG4gKiAgICAgICA8c3Bhbj57dmFsdWV9PC9zcGFuPlxuICogICAgICAgPGJ1dHRvbiBvbkNsaWNrPXtpbmNyZWFzZUNvdW50ZXJ9PkluY3JlYXNlIGNvdW50ZXI8L2J1dHRvbj5cbiAqICAgICA8L2Rpdj5cbiAqICAgKVxuICogfVxuICovXG5cbmV4cG9ydCB2YXIgdXNlRGlzcGF0Y2ggPSBjcmVhdGVEaXNwYXRjaEhvb2soKTsiLCJpbXBvcnQgeyB1c2VSZWR1Y2VyLCB1c2VSZWYsIHVzZUVmZmVjdCwgdXNlTWVtbywgdXNlTGF5b3V0RWZmZWN0LCB1c2VDb250ZXh0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IGludmFyaWFudCBmcm9tICdpbnZhcmlhbnQnO1xuaW1wb3J0IHsgdXNlUmVkdXhDb250ZXh0IGFzIHVzZURlZmF1bHRSZWR1eENvbnRleHQgfSBmcm9tICcuL3VzZVJlZHV4Q29udGV4dCc7XG5pbXBvcnQgU3Vic2NyaXB0aW9uIGZyb20gJy4uL3V0aWxzL1N1YnNjcmlwdGlvbic7XG5pbXBvcnQgeyBSZWFjdFJlZHV4Q29udGV4dCB9IGZyb20gJy4uL2NvbXBvbmVudHMvQ29udGV4dCc7IC8vIFJlYWN0IGN1cnJlbnRseSB0aHJvd3MgYSB3YXJuaW5nIHdoZW4gdXNpbmcgdXNlTGF5b3V0RWZmZWN0IG9uIHRoZSBzZXJ2ZXIuXG4vLyBUbyBnZXQgYXJvdW5kIGl0LCB3ZSBjYW4gY29uZGl0aW9uYWxseSB1c2VFZmZlY3Qgb24gdGhlIHNlcnZlciAobm8tb3ApIGFuZFxuLy8gdXNlTGF5b3V0RWZmZWN0IGluIHRoZSBicm93c2VyLiBXZSBuZWVkIHVzZUxheW91dEVmZmVjdCB0byBlbnN1cmUgdGhlIHN0b3JlXG4vLyBzdWJzY3JpcHRpb24gY2FsbGJhY2sgYWx3YXlzIGhhcyB0aGUgc2VsZWN0b3IgZnJvbSB0aGUgbGF0ZXN0IHJlbmRlciBjb21taXRcbi8vIGF2YWlsYWJsZSwgb3RoZXJ3aXNlIGEgc3RvcmUgdXBkYXRlIG1heSBoYXBwZW4gYmV0d2VlbiByZW5kZXIgYW5kIHRoZSBlZmZlY3QsXG4vLyB3aGljaCBtYXkgY2F1c2UgbWlzc2VkIHVwZGF0ZXM7IHdlIGFsc28gbXVzdCBlbnN1cmUgdGhlIHN0b3JlIHN1YnNjcmlwdGlvblxuLy8gaXMgY3JlYXRlZCBzeW5jaHJvbm91c2x5LCBvdGhlcndpc2UgYSBzdG9yZSB1cGRhdGUgbWF5IG9jY3VyIGJlZm9yZSB0aGVcbi8vIHN1YnNjcmlwdGlvbiBpcyBjcmVhdGVkIGFuZCBhbiBpbmNvbnNpc3RlbnQgc3RhdGUgbWF5IGJlIG9ic2VydmVkXG5cbnZhciB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0ID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyB1c2VMYXlvdXRFZmZlY3QgOiB1c2VFZmZlY3Q7XG5cbnZhciByZWZFcXVhbGl0eSA9IGZ1bmN0aW9uIHJlZkVxdWFsaXR5KGEsIGIpIHtcbiAgcmV0dXJuIGEgPT09IGI7XG59O1xuXG5mdW5jdGlvbiB1c2VTZWxlY3RvcldpdGhTdG9yZUFuZFN1YnNjcmlwdGlvbihzZWxlY3RvciwgZXF1YWxpdHlGbiwgc3RvcmUsIGNvbnRleHRTdWIpIHtcbiAgdmFyIF91c2VSZWR1Y2VyID0gdXNlUmVkdWNlcihmdW5jdGlvbiAocykge1xuICAgIHJldHVybiBzICsgMTtcbiAgfSwgMCksXG4gICAgICBmb3JjZVJlbmRlciA9IF91c2VSZWR1Y2VyWzFdO1xuXG4gIHZhciBzdWJzY3JpcHRpb24gPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gbmV3IFN1YnNjcmlwdGlvbihzdG9yZSwgY29udGV4dFN1Yik7XG4gIH0sIFtzdG9yZSwgY29udGV4dFN1Yl0pO1xuICB2YXIgbGF0ZXN0U3Vic2NyaXB0aW9uQ2FsbGJhY2tFcnJvciA9IHVzZVJlZigpO1xuICB2YXIgbGF0ZXN0U2VsZWN0b3IgPSB1c2VSZWYoKTtcbiAgdmFyIGxhdGVzdFNlbGVjdGVkU3RhdGUgPSB1c2VSZWYoKTtcbiAgdmFyIHNlbGVjdGVkU3RhdGU7XG5cbiAgdHJ5IHtcbiAgICBpZiAoc2VsZWN0b3IgIT09IGxhdGVzdFNlbGVjdG9yLmN1cnJlbnQgfHwgbGF0ZXN0U3Vic2NyaXB0aW9uQ2FsbGJhY2tFcnJvci5jdXJyZW50KSB7XG4gICAgICBzZWxlY3RlZFN0YXRlID0gc2VsZWN0b3Ioc3RvcmUuZ2V0U3RhdGUoKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNlbGVjdGVkU3RhdGUgPSBsYXRlc3RTZWxlY3RlZFN0YXRlLmN1cnJlbnQ7XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICB2YXIgZXJyb3JNZXNzYWdlID0gXCJBbiBlcnJvciBvY2N1cmVkIHdoaWxlIHNlbGVjdGluZyB0aGUgc3RvcmUgc3RhdGU6IFwiICsgZXJyLm1lc3NhZ2UgKyBcIi5cIjtcblxuICAgIGlmIChsYXRlc3RTdWJzY3JpcHRpb25DYWxsYmFja0Vycm9yLmN1cnJlbnQpIHtcbiAgICAgIGVycm9yTWVzc2FnZSArPSBcIlxcblRoZSBlcnJvciBtYXkgYmUgY29ycmVsYXRlZCB3aXRoIHRoaXMgcHJldmlvdXMgZXJyb3I6XFxuXCIgKyBsYXRlc3RTdWJzY3JpcHRpb25DYWxsYmFja0Vycm9yLmN1cnJlbnQuc3RhY2sgKyBcIlxcblxcbk9yaWdpbmFsIHN0YWNrIHRyYWNlOlwiO1xuICAgIH1cblxuICAgIHRocm93IG5ldyBFcnJvcihlcnJvck1lc3NhZ2UpO1xuICB9XG5cbiAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgbGF0ZXN0U2VsZWN0b3IuY3VycmVudCA9IHNlbGVjdG9yO1xuICAgIGxhdGVzdFNlbGVjdGVkU3RhdGUuY3VycmVudCA9IHNlbGVjdGVkU3RhdGU7XG4gICAgbGF0ZXN0U3Vic2NyaXB0aW9uQ2FsbGJhY2tFcnJvci5jdXJyZW50ID0gdW5kZWZpbmVkO1xuICB9KTtcbiAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gY2hlY2tGb3JVcGRhdGVzKCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgdmFyIG5ld1NlbGVjdGVkU3RhdGUgPSBsYXRlc3RTZWxlY3Rvci5jdXJyZW50KHN0b3JlLmdldFN0YXRlKCkpO1xuXG4gICAgICAgIGlmIChlcXVhbGl0eUZuKG5ld1NlbGVjdGVkU3RhdGUsIGxhdGVzdFNlbGVjdGVkU3RhdGUuY3VycmVudCkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBsYXRlc3RTZWxlY3RlZFN0YXRlLmN1cnJlbnQgPSBuZXdTZWxlY3RlZFN0YXRlO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIC8vIHdlIGlnbm9yZSBhbGwgZXJyb3JzIGhlcmUsIHNpbmNlIHdoZW4gdGhlIGNvbXBvbmVudFxuICAgICAgICAvLyBpcyByZS1yZW5kZXJlZCwgdGhlIHNlbGVjdG9ycyBhcmUgY2FsbGVkIGFnYWluLCBhbmRcbiAgICAgICAgLy8gd2lsbCB0aHJvdyBhZ2FpbiwgaWYgbmVpdGhlciBwcm9wcyBub3Igc3RvcmUgc3RhdGVcbiAgICAgICAgLy8gY2hhbmdlZFxuICAgICAgICBsYXRlc3RTdWJzY3JpcHRpb25DYWxsYmFja0Vycm9yLmN1cnJlbnQgPSBlcnI7XG4gICAgICB9XG5cbiAgICAgIGZvcmNlUmVuZGVyKHt9KTtcbiAgICB9XG5cbiAgICBzdWJzY3JpcHRpb24ub25TdGF0ZUNoYW5nZSA9IGNoZWNrRm9yVXBkYXRlcztcbiAgICBzdWJzY3JpcHRpb24udHJ5U3Vic2NyaWJlKCk7XG4gICAgY2hlY2tGb3JVcGRhdGVzKCk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBzdWJzY3JpcHRpb24udHJ5VW5zdWJzY3JpYmUoKTtcbiAgICB9O1xuICB9LCBbc3RvcmUsIHN1YnNjcmlwdGlvbl0pO1xuICByZXR1cm4gc2VsZWN0ZWRTdGF0ZTtcbn1cbi8qKlxuICogSG9vayBmYWN0b3J5LCB3aGljaCBjcmVhdGVzIGEgYHVzZVNlbGVjdG9yYCBob29rIGJvdW5kIHRvIGEgZ2l2ZW4gY29udGV4dC5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29udGV4dD1SZWFjdFJlZHV4Q29udGV4dF0gQ29udGV4dCBwYXNzZWQgdG8geW91ciBgPFByb3ZpZGVyPmAuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgYHVzZVNlbGVjdG9yYCBob29rIGJvdW5kIHRvIHRoZSBzcGVjaWZpZWQgY29udGV4dC5cbiAqL1xuXG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTZWxlY3Rvckhvb2soY29udGV4dCkge1xuICBpZiAoY29udGV4dCA9PT0gdm9pZCAwKSB7XG4gICAgY29udGV4dCA9IFJlYWN0UmVkdXhDb250ZXh0O1xuICB9XG5cbiAgdmFyIHVzZVJlZHV4Q29udGV4dCA9IGNvbnRleHQgPT09IFJlYWN0UmVkdXhDb250ZXh0ID8gdXNlRGVmYXVsdFJlZHV4Q29udGV4dCA6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdXNlQ29udGV4dChjb250ZXh0KTtcbiAgfTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVzZVNlbGVjdG9yKHNlbGVjdG9yLCBlcXVhbGl0eUZuKSB7XG4gICAgaWYgKGVxdWFsaXR5Rm4gPT09IHZvaWQgMCkge1xuICAgICAgZXF1YWxpdHlGbiA9IHJlZkVxdWFsaXR5O1xuICAgIH1cblxuICAgIGludmFyaWFudChzZWxlY3RvciwgXCJZb3UgbXVzdCBwYXNzIGEgc2VsZWN0b3IgdG8gdXNlU2VsZWN0b3JzXCIpO1xuXG4gICAgdmFyIF91c2VSZWR1eENvbnRleHQgPSB1c2VSZWR1eENvbnRleHQoKSxcbiAgICAgICAgc3RvcmUgPSBfdXNlUmVkdXhDb250ZXh0LnN0b3JlLFxuICAgICAgICBjb250ZXh0U3ViID0gX3VzZVJlZHV4Q29udGV4dC5zdWJzY3JpcHRpb247XG5cbiAgICByZXR1cm4gdXNlU2VsZWN0b3JXaXRoU3RvcmVBbmRTdWJzY3JpcHRpb24oc2VsZWN0b3IsIGVxdWFsaXR5Rm4sIHN0b3JlLCBjb250ZXh0U3ViKTtcbiAgfTtcbn1cbi8qKlxuICogQSBob29rIHRvIGFjY2VzcyB0aGUgcmVkdXggc3RvcmUncyBzdGF0ZS4gVGhpcyBob29rIHRha2VzIGEgc2VsZWN0b3IgZnVuY3Rpb25cbiAqIGFzIGFuIGFyZ3VtZW50LiBUaGUgc2VsZWN0b3IgaXMgY2FsbGVkIHdpdGggdGhlIHN0b3JlIHN0YXRlLlxuICpcbiAqIFRoaXMgaG9vayB0YWtlcyBhbiBvcHRpb25hbCBlcXVhbGl0eSBjb21wYXJpc29uIGZ1bmN0aW9uIGFzIHRoZSBzZWNvbmQgcGFyYW1ldGVyXG4gKiB0aGF0IGFsbG93cyB5b3UgdG8gY3VzdG9taXplIHRoZSB3YXkgdGhlIHNlbGVjdGVkIHN0YXRlIGlzIGNvbXBhcmVkIHRvIGRldGVybWluZVxuICogd2hldGhlciB0aGUgY29tcG9uZW50IG5lZWRzIHRvIGJlIHJlLXJlbmRlcmVkLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHNlbGVjdG9yIHRoZSBzZWxlY3RvciBmdW5jdGlvblxuICogQHBhcmFtIHtGdW5jdGlvbj19IGVxdWFsaXR5Rm4gdGhlIGZ1bmN0aW9uIHRoYXQgd2lsbCBiZSB1c2VkIHRvIGRldGVybWluZSBlcXVhbGl0eVxuICpcbiAqIEByZXR1cm5zIHthbnl9IHRoZSBzZWxlY3RlZCBzdGF0ZVxuICpcbiAqIEBleGFtcGxlXG4gKlxuICogaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuICogaW1wb3J0IHsgdXNlU2VsZWN0b3IgfSBmcm9tICdyZWFjdC1yZWR1eCdcbiAqXG4gKiBleHBvcnQgY29uc3QgQ291bnRlckNvbXBvbmVudCA9ICgpID0+IHtcbiAqICAgY29uc3QgY291bnRlciA9IHVzZVNlbGVjdG9yKHN0YXRlID0+IHN0YXRlLmNvdW50ZXIpXG4gKiAgIHJldHVybiA8ZGl2Pntjb3VudGVyfTwvZGl2PlxuICogfVxuICovXG5cbmV4cG9ydCB2YXIgdXNlU2VsZWN0b3IgPSBjcmVhdGVTZWxlY3Rvckhvb2soKTsiLCJpbXBvcnQgUHJvdmlkZXIgZnJvbSAnLi9jb21wb25lbnRzL1Byb3ZpZGVyJztcbmltcG9ydCBjb25uZWN0QWR2YW5jZWQgZnJvbSAnLi9jb21wb25lbnRzL2Nvbm5lY3RBZHZhbmNlZCc7XG5pbXBvcnQgeyBSZWFjdFJlZHV4Q29udGV4dCB9IGZyb20gJy4vY29tcG9uZW50cy9Db250ZXh0JztcbmltcG9ydCBjb25uZWN0IGZyb20gJy4vY29ubmVjdC9jb25uZWN0JztcbmltcG9ydCB7IHVzZURpc3BhdGNoLCBjcmVhdGVEaXNwYXRjaEhvb2sgfSBmcm9tICcuL2hvb2tzL3VzZURpc3BhdGNoJztcbmltcG9ydCB7IHVzZVNlbGVjdG9yLCBjcmVhdGVTZWxlY3Rvckhvb2sgfSBmcm9tICcuL2hvb2tzL3VzZVNlbGVjdG9yJztcbmltcG9ydCB7IHVzZVN0b3JlLCBjcmVhdGVTdG9yZUhvb2sgfSBmcm9tICcuL2hvb2tzL3VzZVN0b3JlJztcbmltcG9ydCB7IHNldEJhdGNoIH0gZnJvbSAnLi91dGlscy9iYXRjaCc7XG5pbXBvcnQgeyB1bnN0YWJsZV9iYXRjaGVkVXBkYXRlcyBhcyBiYXRjaCB9IGZyb20gJy4vdXRpbHMvcmVhY3RCYXRjaGVkVXBkYXRlcyc7XG5pbXBvcnQgc2hhbGxvd0VxdWFsIGZyb20gJy4vdXRpbHMvc2hhbGxvd0VxdWFsJztcbnNldEJhdGNoKGJhdGNoKTtcbmV4cG9ydCB7IFByb3ZpZGVyLCBjb25uZWN0QWR2YW5jZWQsIFJlYWN0UmVkdXhDb250ZXh0LCBjb25uZWN0LCBiYXRjaCwgdXNlRGlzcGF0Y2gsIGNyZWF0ZURpc3BhdGNoSG9vaywgdXNlU2VsZWN0b3IsIGNyZWF0ZVNlbGVjdG9ySG9vaywgdXNlU3RvcmUsIGNyZWF0ZVN0b3JlSG9vaywgc2hhbGxvd0VxdWFsIH07IiwiaW1wb3J0IGludmFyaWFudCBmcm9tICd0aW55LWludmFyaWFudCc7XG5cbnZhciBnZXRSZWN0ID0gZnVuY3Rpb24gZ2V0UmVjdChfcmVmKSB7XG4gIHZhciB0b3AgPSBfcmVmLnRvcCxcbiAgICAgIHJpZ2h0ID0gX3JlZi5yaWdodCxcbiAgICAgIGJvdHRvbSA9IF9yZWYuYm90dG9tLFxuICAgICAgbGVmdCA9IF9yZWYubGVmdDtcbiAgdmFyIHdpZHRoID0gcmlnaHQgLSBsZWZ0O1xuICB2YXIgaGVpZ2h0ID0gYm90dG9tIC0gdG9wO1xuICB2YXIgcmVjdCA9IHtcbiAgICB0b3A6IHRvcCxcbiAgICByaWdodDogcmlnaHQsXG4gICAgYm90dG9tOiBib3R0b20sXG4gICAgbGVmdDogbGVmdCxcbiAgICB3aWR0aDogd2lkdGgsXG4gICAgaGVpZ2h0OiBoZWlnaHQsXG4gICAgeDogbGVmdCxcbiAgICB5OiB0b3AsXG4gICAgY2VudGVyOiB7XG4gICAgICB4OiAocmlnaHQgKyBsZWZ0KSAvIDIsXG4gICAgICB5OiAoYm90dG9tICsgdG9wKSAvIDJcbiAgICB9XG4gIH07XG4gIHJldHVybiByZWN0O1xufTtcbnZhciBleHBhbmQgPSBmdW5jdGlvbiBleHBhbmQodGFyZ2V0LCBleHBhbmRCeSkge1xuICByZXR1cm4ge1xuICAgIHRvcDogdGFyZ2V0LnRvcCAtIGV4cGFuZEJ5LnRvcCxcbiAgICBsZWZ0OiB0YXJnZXQubGVmdCAtIGV4cGFuZEJ5LmxlZnQsXG4gICAgYm90dG9tOiB0YXJnZXQuYm90dG9tICsgZXhwYW5kQnkuYm90dG9tLFxuICAgIHJpZ2h0OiB0YXJnZXQucmlnaHQgKyBleHBhbmRCeS5yaWdodFxuICB9O1xufTtcbnZhciBzaHJpbmsgPSBmdW5jdGlvbiBzaHJpbmsodGFyZ2V0LCBzaHJpbmtCeSkge1xuICByZXR1cm4ge1xuICAgIHRvcDogdGFyZ2V0LnRvcCArIHNocmlua0J5LnRvcCxcbiAgICBsZWZ0OiB0YXJnZXQubGVmdCArIHNocmlua0J5LmxlZnQsXG4gICAgYm90dG9tOiB0YXJnZXQuYm90dG9tIC0gc2hyaW5rQnkuYm90dG9tLFxuICAgIHJpZ2h0OiB0YXJnZXQucmlnaHQgLSBzaHJpbmtCeS5yaWdodFxuICB9O1xufTtcblxudmFyIHNoaWZ0ID0gZnVuY3Rpb24gc2hpZnQodGFyZ2V0LCBzaGlmdEJ5KSB7XG4gIHJldHVybiB7XG4gICAgdG9wOiB0YXJnZXQudG9wICsgc2hpZnRCeS55LFxuICAgIGxlZnQ6IHRhcmdldC5sZWZ0ICsgc2hpZnRCeS54LFxuICAgIGJvdHRvbTogdGFyZ2V0LmJvdHRvbSArIHNoaWZ0QnkueSxcbiAgICByaWdodDogdGFyZ2V0LnJpZ2h0ICsgc2hpZnRCeS54XG4gIH07XG59O1xuXG52YXIgbm9TcGFjaW5nID0ge1xuICB0b3A6IDAsXG4gIHJpZ2h0OiAwLFxuICBib3R0b206IDAsXG4gIGxlZnQ6IDBcbn07XG52YXIgY3JlYXRlQm94ID0gZnVuY3Rpb24gY3JlYXRlQm94KF9yZWYyKSB7XG4gIHZhciBib3JkZXJCb3ggPSBfcmVmMi5ib3JkZXJCb3gsXG4gICAgICBfcmVmMiRtYXJnaW4gPSBfcmVmMi5tYXJnaW4sXG4gICAgICBtYXJnaW4gPSBfcmVmMiRtYXJnaW4gPT09IHZvaWQgMCA/IG5vU3BhY2luZyA6IF9yZWYyJG1hcmdpbixcbiAgICAgIF9yZWYyJGJvcmRlciA9IF9yZWYyLmJvcmRlcixcbiAgICAgIGJvcmRlciA9IF9yZWYyJGJvcmRlciA9PT0gdm9pZCAwID8gbm9TcGFjaW5nIDogX3JlZjIkYm9yZGVyLFxuICAgICAgX3JlZjIkcGFkZGluZyA9IF9yZWYyLnBhZGRpbmcsXG4gICAgICBwYWRkaW5nID0gX3JlZjIkcGFkZGluZyA9PT0gdm9pZCAwID8gbm9TcGFjaW5nIDogX3JlZjIkcGFkZGluZztcbiAgdmFyIG1hcmdpbkJveCA9IGdldFJlY3QoZXhwYW5kKGJvcmRlckJveCwgbWFyZ2luKSk7XG4gIHZhciBwYWRkaW5nQm94ID0gZ2V0UmVjdChzaHJpbmsoYm9yZGVyQm94LCBib3JkZXIpKTtcbiAgdmFyIGNvbnRlbnRCb3ggPSBnZXRSZWN0KHNocmluayhwYWRkaW5nQm94LCBwYWRkaW5nKSk7XG4gIHJldHVybiB7XG4gICAgbWFyZ2luQm94OiBtYXJnaW5Cb3gsXG4gICAgYm9yZGVyQm94OiBnZXRSZWN0KGJvcmRlckJveCksXG4gICAgcGFkZGluZ0JveDogcGFkZGluZ0JveCxcbiAgICBjb250ZW50Qm94OiBjb250ZW50Qm94LFxuICAgIG1hcmdpbjogbWFyZ2luLFxuICAgIGJvcmRlcjogYm9yZGVyLFxuICAgIHBhZGRpbmc6IHBhZGRpbmdcbiAgfTtcbn07XG5cbnZhciBwYXJzZSA9IGZ1bmN0aW9uIHBhcnNlKHJhdykge1xuICB2YXIgdmFsdWUgPSByYXcuc2xpY2UoMCwgLTIpO1xuICB2YXIgc3VmZml4ID0gcmF3LnNsaWNlKC0yKTtcblxuICBpZiAoc3VmZml4ICE9PSAncHgnKSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cblxuICB2YXIgcmVzdWx0ID0gTnVtYmVyKHZhbHVlKTtcbiAgISFpc05hTihyZXN1bHQpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIkNvdWxkIG5vdCBwYXJzZSB2YWx1ZSBbcmF3OiBcIiArIHJhdyArIFwiLCB3aXRob3V0IHN1ZmZpeDogXCIgKyB2YWx1ZSArIFwiXVwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG52YXIgZ2V0V2luZG93U2Nyb2xsID0gZnVuY3Rpb24gZ2V0V2luZG93U2Nyb2xsKCkge1xuICByZXR1cm4ge1xuICAgIHg6IHdpbmRvdy5wYWdlWE9mZnNldCxcbiAgICB5OiB3aW5kb3cucGFnZVlPZmZzZXRcbiAgfTtcbn07XG5cbnZhciBvZmZzZXQgPSBmdW5jdGlvbiBvZmZzZXQob3JpZ2luYWwsIGNoYW5nZSkge1xuICB2YXIgYm9yZGVyQm94ID0gb3JpZ2luYWwuYm9yZGVyQm94LFxuICAgICAgYm9yZGVyID0gb3JpZ2luYWwuYm9yZGVyLFxuICAgICAgbWFyZ2luID0gb3JpZ2luYWwubWFyZ2luLFxuICAgICAgcGFkZGluZyA9IG9yaWdpbmFsLnBhZGRpbmc7XG4gIHZhciBzaGlmdGVkID0gc2hpZnQoYm9yZGVyQm94LCBjaGFuZ2UpO1xuICByZXR1cm4gY3JlYXRlQm94KHtcbiAgICBib3JkZXJCb3g6IHNoaWZ0ZWQsXG4gICAgYm9yZGVyOiBib3JkZXIsXG4gICAgbWFyZ2luOiBtYXJnaW4sXG4gICAgcGFkZGluZzogcGFkZGluZ1xuICB9KTtcbn07XG52YXIgd2l0aFNjcm9sbCA9IGZ1bmN0aW9uIHdpdGhTY3JvbGwob3JpZ2luYWwsIHNjcm9sbCkge1xuICBpZiAoc2Nyb2xsID09PSB2b2lkIDApIHtcbiAgICBzY3JvbGwgPSBnZXRXaW5kb3dTY3JvbGwoKTtcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQob3JpZ2luYWwsIHNjcm9sbCk7XG59O1xudmFyIGNhbGN1bGF0ZUJveCA9IGZ1bmN0aW9uIGNhbGN1bGF0ZUJveChib3JkZXJCb3gsIHN0eWxlcykge1xuICB2YXIgbWFyZ2luID0ge1xuICAgIHRvcDogcGFyc2Uoc3R5bGVzLm1hcmdpblRvcCksXG4gICAgcmlnaHQ6IHBhcnNlKHN0eWxlcy5tYXJnaW5SaWdodCksXG4gICAgYm90dG9tOiBwYXJzZShzdHlsZXMubWFyZ2luQm90dG9tKSxcbiAgICBsZWZ0OiBwYXJzZShzdHlsZXMubWFyZ2luTGVmdClcbiAgfTtcbiAgdmFyIHBhZGRpbmcgPSB7XG4gICAgdG9wOiBwYXJzZShzdHlsZXMucGFkZGluZ1RvcCksXG4gICAgcmlnaHQ6IHBhcnNlKHN0eWxlcy5wYWRkaW5nUmlnaHQpLFxuICAgIGJvdHRvbTogcGFyc2Uoc3R5bGVzLnBhZGRpbmdCb3R0b20pLFxuICAgIGxlZnQ6IHBhcnNlKHN0eWxlcy5wYWRkaW5nTGVmdClcbiAgfTtcbiAgdmFyIGJvcmRlciA9IHtcbiAgICB0b3A6IHBhcnNlKHN0eWxlcy5ib3JkZXJUb3BXaWR0aCksXG4gICAgcmlnaHQ6IHBhcnNlKHN0eWxlcy5ib3JkZXJSaWdodFdpZHRoKSxcbiAgICBib3R0b206IHBhcnNlKHN0eWxlcy5ib3JkZXJCb3R0b21XaWR0aCksXG4gICAgbGVmdDogcGFyc2Uoc3R5bGVzLmJvcmRlckxlZnRXaWR0aClcbiAgfTtcbiAgcmV0dXJuIGNyZWF0ZUJveCh7XG4gICAgYm9yZGVyQm94OiBib3JkZXJCb3gsXG4gICAgbWFyZ2luOiBtYXJnaW4sXG4gICAgcGFkZGluZzogcGFkZGluZyxcbiAgICBib3JkZXI6IGJvcmRlclxuICB9KTtcbn07XG52YXIgZ2V0Qm94ID0gZnVuY3Rpb24gZ2V0Qm94KGVsKSB7XG4gIHZhciBib3JkZXJCb3ggPSBlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgdmFyIHN0eWxlcyA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsKTtcbiAgcmV0dXJuIGNhbGN1bGF0ZUJveChib3JkZXJCb3gsIHN0eWxlcyk7XG59O1xuXG5leHBvcnQgeyBjYWxjdWxhdGVCb3gsIGNyZWF0ZUJveCwgZXhwYW5kLCBnZXRCb3gsIGdldFJlY3QsIG9mZnNldCwgc2hyaW5rLCB3aXRoU2Nyb2xsIH07XG4iLCJmdW5jdGlvbiBhcmVJbnB1dHNFcXVhbChuZXdJbnB1dHMsIGxhc3RJbnB1dHMpIHtcbiAgICBpZiAobmV3SW5wdXRzLmxlbmd0aCAhPT0gbGFzdElucHV0cy5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5ld0lucHV0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAobmV3SW5wdXRzW2ldICE9PSBsYXN0SW5wdXRzW2ldKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIG1lbW9pemVPbmUocmVzdWx0Rm4sIGlzRXF1YWwpIHtcbiAgICBpZiAoaXNFcXVhbCA9PT0gdm9pZCAwKSB7IGlzRXF1YWwgPSBhcmVJbnB1dHNFcXVhbDsgfVxuICAgIHZhciBsYXN0VGhpcztcbiAgICB2YXIgbGFzdEFyZ3MgPSBbXTtcbiAgICB2YXIgbGFzdFJlc3VsdDtcbiAgICB2YXIgY2FsbGVkT25jZSA9IGZhbHNlO1xuICAgIGZ1bmN0aW9uIG1lbW9pemVkKCkge1xuICAgICAgICB2YXIgbmV3QXJncyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgbmV3QXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjYWxsZWRPbmNlICYmIGxhc3RUaGlzID09PSB0aGlzICYmIGlzRXF1YWwobmV3QXJncywgbGFzdEFyZ3MpKSB7XG4gICAgICAgICAgICByZXR1cm4gbGFzdFJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgICBsYXN0UmVzdWx0ID0gcmVzdWx0Rm4uYXBwbHkodGhpcywgbmV3QXJncyk7XG4gICAgICAgIGNhbGxlZE9uY2UgPSB0cnVlO1xuICAgICAgICBsYXN0VGhpcyA9IHRoaXM7XG4gICAgICAgIGxhc3RBcmdzID0gbmV3QXJncztcbiAgICAgICAgcmV0dXJuIGxhc3RSZXN1bHQ7XG4gICAgfVxuICAgIHJldHVybiBtZW1vaXplZDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbWVtb2l6ZU9uZTtcbiIsInZhciByYWZTY2hkID0gZnVuY3Rpb24gcmFmU2NoZChmbikge1xuICB2YXIgbGFzdEFyZ3MgPSBbXTtcbiAgdmFyIGZyYW1lSWQgPSBudWxsO1xuXG4gIHZhciB3cmFwcGVyRm4gPSBmdW5jdGlvbiB3cmFwcGVyRm4oKSB7XG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIGxhc3RBcmdzID0gYXJncztcblxuICAgIGlmIChmcmFtZUlkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZnJhbWVJZCA9IHJlcXVlc3RBbmltYXRpb25GcmFtZShmdW5jdGlvbiAoKSB7XG4gICAgICBmcmFtZUlkID0gbnVsbDtcbiAgICAgIGZuLmFwcGx5KHZvaWQgMCwgbGFzdEFyZ3MpO1xuICAgIH0pO1xuICB9O1xuXG4gIHdyYXBwZXJGbi5jYW5jZWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFmcmFtZUlkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY2FuY2VsQW5pbWF0aW9uRnJhbWUoZnJhbWVJZCk7XG4gICAgZnJhbWVJZCA9IG51bGw7XG4gIH07XG5cbiAgcmV0dXJuIHdyYXBwZXJGbjtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHJhZlNjaGQ7XG4iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSAnQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2VzbS9leHRlbmRzJztcbmltcG9ydCBSZWFjdCwgeyB1c2VMYXlvdXRFZmZlY3QsIHVzZUVmZmVjdCwgdXNlUmVmLCB1c2VDb250ZXh0LCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVzZU1lbW8sIHVzZUNhbGxiYWNrIH0gZnJvbSAndXNlLW1lbW8tb25lJztcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tICdAYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2UnO1xuaW1wb3J0IGludmFyaWFudCBmcm9tICd0aW55LWludmFyaWFudCc7XG5pbXBvcnQgeyBjcmVhdGVTdG9yZSBhcyBjcmVhdGVTdG9yZSQxLCBhcHBseU1pZGRsZXdhcmUsIGNvbXBvc2UsIGJpbmRBY3Rpb25DcmVhdG9ycyB9IGZyb20gJ3JlZHV4JztcbmltcG9ydCB7IFByb3ZpZGVyLCBjb25uZWN0IH0gZnJvbSAncmVhY3QtcmVkdXgnO1xuaW1wb3J0IHsgZ2V0UmVjdCwgZXhwYW5kLCBvZmZzZXQsIHdpdGhTY3JvbGwsIGNyZWF0ZUJveCwgZ2V0Qm94LCBjYWxjdWxhdGVCb3ggfSBmcm9tICdjc3MtYm94LW1vZGVsJztcbmltcG9ydCBtZW1vaXplT25lIGZyb20gJ21lbW9pemUtb25lJztcbmltcG9ydCBfT2JqZWN0JHZhbHVlcyBmcm9tICdAYmFiZWwvcnVudGltZS1jb3JlanMyL2NvcmUtanMvb2JqZWN0L3ZhbHVlcyc7XG5pbXBvcnQgX09iamVjdCRrZXlzIGZyb20gJ0BiYWJlbC9ydW50aW1lLWNvcmVqczIvY29yZS1qcy9vYmplY3Qva2V5cyc7XG5pbXBvcnQgX0RhdGUkbm93IGZyb20gJ0BiYWJlbC9ydW50aW1lLWNvcmVqczIvY29yZS1qcy9kYXRlL25vdyc7XG5pbXBvcnQgcmFmU2NoZCBmcm9tICdyYWYtc2NoZCc7XG5pbXBvcnQgX09iamVjdCRhc3NpZ24gZnJvbSAnQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9jb3JlLWpzL29iamVjdC9hc3NpZ24nO1xuaW1wb3J0IF9OdW1iZXIkaXNJbnRlZ2VyIGZyb20gJ0BiYWJlbC9ydW50aW1lLWNvcmVqczIvY29yZS1qcy9udW1iZXIvaXMtaW50ZWdlcic7XG5cbnZhciBpc1Byb2R1Y3Rpb24gPSBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nO1xudmFyIHNwYWNlc0FuZFRhYnMgPSAvWyBcXHRdezIsfS9nO1xudmFyIGxpbmVTdGFydFdpdGhTcGFjZXMgPSAvXlsgXFx0XSovZ207XG5cbnZhciBjbGVhbiA9IGZ1bmN0aW9uIGNsZWFuKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZS5yZXBsYWNlKHNwYWNlc0FuZFRhYnMsICcgJykucmVwbGFjZShsaW5lU3RhcnRXaXRoU3BhY2VzLCAnJykudHJpbSgpO1xufTtcblxudmFyIGdldERldk1lc3NhZ2UgPSBmdW5jdGlvbiBnZXREZXZNZXNzYWdlKG1lc3NhZ2UpIHtcbiAgcmV0dXJuIGNsZWFuKFwiXFxuICAlY3JlYWN0LWJlYXV0aWZ1bC1kbmRcXG5cXG4gICVjXCIgKyBjbGVhbihtZXNzYWdlKSArIFwiXFxuXFxuICAlY1xcdUQ4M0RcXHVEQzc3XFx1MjAwRCBUaGlzIGlzIGEgZGV2ZWxvcG1lbnQgb25seSBtZXNzYWdlLiBJdCB3aWxsIGJlIHJlbW92ZWQgaW4gcHJvZHVjdGlvbiBidWlsZHMuXFxuXCIpO1xufTtcblxudmFyIGdldEZvcm1hdHRlZE1lc3NhZ2UgPSBmdW5jdGlvbiBnZXRGb3JtYXR0ZWRNZXNzYWdlKG1lc3NhZ2UpIHtcbiAgcmV0dXJuIFtnZXREZXZNZXNzYWdlKG1lc3NhZ2UpLCAnY29sb3I6ICMwMEM1ODQ7IGZvbnQtc2l6ZTogMS4yZW07IGZvbnQtd2VpZ2h0OiBib2xkOycsICdsaW5lLWhlaWdodDogMS41JywgJ2NvbG9yOiAjNzIzODc0OyddO1xufTtcbnZhciBpc0Rpc2FibGVkRmxhZyA9ICdfX3JlYWN0LWJlYXV0aWZ1bC1kbmQtZGlzYWJsZS1kZXYtd2FybmluZ3MnO1xudmFyIHdhcm5pbmcgPSBmdW5jdGlvbiB3YXJuaW5nKG1lc3NhZ2UpIHtcbiAgdmFyIF9jb25zb2xlO1xuXG4gIGlmIChpc1Byb2R1Y3Rpb24pIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93W2lzRGlzYWJsZWRGbGFnXSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIChfY29uc29sZSA9IGNvbnNvbGUpLndhcm4uYXBwbHkoX2NvbnNvbGUsIGdldEZvcm1hdHRlZE1lc3NhZ2UobWVzc2FnZSkpO1xufTtcblxuZnVuY3Rpb24gcHJpbnRGYXRhbEVycm9yKGVycm9yKSB7XG4gIHZhciBfY29uc29sZTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIChfY29uc29sZSA9IGNvbnNvbGUpLmVycm9yLmFwcGx5KF9jb25zb2xlLCBnZXRGb3JtYXR0ZWRNZXNzYWdlKFwiXFxuICAgICAgICBBbiBlcnJvciBoYXMgb2NjdXJyZWQgd2hpbGUgYSBkcmFnIGlzIG9jY3VycmluZy5cXG4gICAgICAgIEFueSBleGlzdGluZyBkcmFnIHdpbGwgYmUgY2FuY2VsbGVkLlxcblxcbiAgICAgICAgPiBcIiArIGVycm9yLm1lc3NhZ2UgKyBcIlxcbiAgICAgICAgXCIpKTtcblxuICBjb25zb2xlLmVycm9yKCdyYXcnLCBlcnJvcik7XG59XG5cbmZ1bmN0aW9uIHNob3VsZFJlY292ZXIoZXJyb3IpIHtcbiAgcmV0dXJuIGVycm9yLm1lc3NhZ2UuaW5kZXhPZignSW52YXJpYW50IGZhaWxlZCcpICE9PSAtMTtcbn1cblxudmFyIEVycm9yQm91bmRhcnkgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShFcnJvckJvdW5kYXJ5LCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBFcnJvckJvdW5kYXJ5KCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSB8fCB0aGlzO1xuICAgIF90aGlzLm9uRXJyb3IgPSB2b2lkIDA7XG5cbiAgICBfdGhpcy5zZXRPbkVycm9yID0gZnVuY3Rpb24gKGZuKSB7XG4gICAgICBfdGhpcy5vbkVycm9yID0gZm47XG4gICAgfTtcblxuICAgIF90aGlzLm9uRmF0YWxFcnJvciA9IGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgcHJpbnRGYXRhbEVycm9yKGVycm9yKTtcblxuICAgICAgaWYgKF90aGlzLm9uRXJyb3IpIHtcbiAgICAgICAgX3RoaXMub25FcnJvcigpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZygnQ291bGQgbm90IGZpbmQgcmVjb3ZlcmluZyBmdW5jdGlvbicpIDogdm9pZCAwO1xuICAgICAgfVxuXG4gICAgICBpZiAoc2hvdWxkUmVjb3ZlcihlcnJvcikpIHtcbiAgICAgICAgX3RoaXMuc2V0U3RhdGUoe30pO1xuICAgICAgfVxuICAgIH07XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gRXJyb3JCb3VuZGFyeS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgdGhpcy5vbkZhdGFsRXJyb3IpO1xuICB9O1xuXG4gIF9wcm90by5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdlcnJvcicsIHRoaXMub25GYXRhbEVycm9yKTtcbiAgfTtcblxuICBfcHJvdG8uY29tcG9uZW50RGlkQ2F0Y2ggPSBmdW5jdGlvbiBjb21wb25lbnREaWRDYXRjaChlcnJvcikge1xuICAgIHRoaXMub25GYXRhbEVycm9yKGVycm9yKTtcblxuICAgIGlmICghc2hvdWxkUmVjb3ZlcihlcnJvcikpIHtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiB0aGlzLnByb3BzLmNoaWxkcmVuKHRoaXMuc2V0T25FcnJvcik7XG4gIH07XG5cbiAgcmV0dXJuIEVycm9yQm91bmRhcnk7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbnZhciBvcmlnaW4gPSB7XG4gIHg6IDAsXG4gIHk6IDBcbn07XG52YXIgYWRkID0gZnVuY3Rpb24gYWRkKHBvaW50MSwgcG9pbnQyKSB7XG4gIHJldHVybiB7XG4gICAgeDogcG9pbnQxLnggKyBwb2ludDIueCxcbiAgICB5OiBwb2ludDEueSArIHBvaW50Mi55XG4gIH07XG59O1xudmFyIHN1YnRyYWN0ID0gZnVuY3Rpb24gc3VidHJhY3QocG9pbnQxLCBwb2ludDIpIHtcbiAgcmV0dXJuIHtcbiAgICB4OiBwb2ludDEueCAtIHBvaW50Mi54LFxuICAgIHk6IHBvaW50MS55IC0gcG9pbnQyLnlcbiAgfTtcbn07XG52YXIgaXNFcXVhbCA9IGZ1bmN0aW9uIGlzRXF1YWwocG9pbnQxLCBwb2ludDIpIHtcbiAgcmV0dXJuIHBvaW50MS54ID09PSBwb2ludDIueCAmJiBwb2ludDEueSA9PT0gcG9pbnQyLnk7XG59O1xudmFyIG5lZ2F0ZSA9IGZ1bmN0aW9uIG5lZ2F0ZShwb2ludCkge1xuICByZXR1cm4ge1xuICAgIHg6IHBvaW50LnggIT09IDAgPyAtcG9pbnQueCA6IDAsXG4gICAgeTogcG9pbnQueSAhPT0gMCA/IC1wb2ludC55IDogMFxuICB9O1xufTtcbnZhciBwYXRjaCA9IGZ1bmN0aW9uIHBhdGNoKGxpbmUsIHZhbHVlLCBvdGhlclZhbHVlKSB7XG4gIHZhciBfcmVmO1xuXG4gIGlmIChvdGhlclZhbHVlID09PSB2b2lkIDApIHtcbiAgICBvdGhlclZhbHVlID0gMDtcbiAgfVxuXG4gIHJldHVybiBfcmVmID0ge30sIF9yZWZbbGluZV0gPSB2YWx1ZSwgX3JlZltsaW5lID09PSAneCcgPyAneScgOiAneCddID0gb3RoZXJWYWx1ZSwgX3JlZjtcbn07XG52YXIgZGlzdGFuY2UgPSBmdW5jdGlvbiBkaXN0YW5jZShwb2ludDEsIHBvaW50Mikge1xuICByZXR1cm4gTWF0aC5zcXJ0KE1hdGgucG93KHBvaW50Mi54IC0gcG9pbnQxLngsIDIpICsgTWF0aC5wb3cocG9pbnQyLnkgLSBwb2ludDEueSwgMikpO1xufTtcbnZhciBjbG9zZXN0ID0gZnVuY3Rpb24gY2xvc2VzdCh0YXJnZXQsIHBvaW50cykge1xuICByZXR1cm4gTWF0aC5taW4uYXBwbHkoTWF0aCwgcG9pbnRzLm1hcChmdW5jdGlvbiAocG9pbnQpIHtcbiAgICByZXR1cm4gZGlzdGFuY2UodGFyZ2V0LCBwb2ludCk7XG4gIH0pKTtcbn07XG52YXIgYXBwbHkgPSBmdW5jdGlvbiBhcHBseShmbikge1xuICByZXR1cm4gZnVuY3Rpb24gKHBvaW50KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHg6IGZuKHBvaW50LngpLFxuICAgICAgeTogZm4ocG9pbnQueSlcbiAgICB9O1xuICB9O1xufTtcblxudmFyIGV4ZWN1dGVDbGlwID0gKGZ1bmN0aW9uIChmcmFtZSwgc3ViamVjdCkge1xuICB2YXIgcmVzdWx0ID0gZ2V0UmVjdCh7XG4gICAgdG9wOiBNYXRoLm1heChzdWJqZWN0LnRvcCwgZnJhbWUudG9wKSxcbiAgICByaWdodDogTWF0aC5taW4oc3ViamVjdC5yaWdodCwgZnJhbWUucmlnaHQpLFxuICAgIGJvdHRvbTogTWF0aC5taW4oc3ViamVjdC5ib3R0b20sIGZyYW1lLmJvdHRvbSksXG4gICAgbGVmdDogTWF0aC5tYXgoc3ViamVjdC5sZWZ0LCBmcmFtZS5sZWZ0KVxuICB9KTtcblxuICBpZiAocmVzdWx0LndpZHRoIDw9IDAgfHwgcmVzdWx0LmhlaWdodCA8PSAwKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufSk7XG5cbnZhciBpc0VxdWFsJDEgPSBmdW5jdGlvbiBpc0VxdWFsKGZpcnN0LCBzZWNvbmQpIHtcbiAgcmV0dXJuIGZpcnN0LnRvcCA9PT0gc2Vjb25kLnRvcCAmJiBmaXJzdC5yaWdodCA9PT0gc2Vjb25kLnJpZ2h0ICYmIGZpcnN0LmJvdHRvbSA9PT0gc2Vjb25kLmJvdHRvbSAmJiBmaXJzdC5sZWZ0ID09PSBzZWNvbmQubGVmdDtcbn07XG52YXIgb2Zmc2V0QnlQb3NpdGlvbiA9IGZ1bmN0aW9uIG9mZnNldEJ5UG9zaXRpb24oc3BhY2luZywgcG9pbnQpIHtcbiAgcmV0dXJuIHtcbiAgICB0b3A6IHNwYWNpbmcudG9wICsgcG9pbnQueSxcbiAgICBsZWZ0OiBzcGFjaW5nLmxlZnQgKyBwb2ludC54LFxuICAgIGJvdHRvbTogc3BhY2luZy5ib3R0b20gKyBwb2ludC55LFxuICAgIHJpZ2h0OiBzcGFjaW5nLnJpZ2h0ICsgcG9pbnQueFxuICB9O1xufTtcbnZhciBnZXRDb3JuZXJzID0gZnVuY3Rpb24gZ2V0Q29ybmVycyhzcGFjaW5nKSB7XG4gIHJldHVybiBbe1xuICAgIHg6IHNwYWNpbmcubGVmdCxcbiAgICB5OiBzcGFjaW5nLnRvcFxuICB9LCB7XG4gICAgeDogc3BhY2luZy5yaWdodCxcbiAgICB5OiBzcGFjaW5nLnRvcFxuICB9LCB7XG4gICAgeDogc3BhY2luZy5sZWZ0LFxuICAgIHk6IHNwYWNpbmcuYm90dG9tXG4gIH0sIHtcbiAgICB4OiBzcGFjaW5nLnJpZ2h0LFxuICAgIHk6IHNwYWNpbmcuYm90dG9tXG4gIH1dO1xufTtcbnZhciBub1NwYWNpbmcgPSB7XG4gIHRvcDogMCxcbiAgcmlnaHQ6IDAsXG4gIGJvdHRvbTogMCxcbiAgbGVmdDogMFxufTtcblxudmFyIHNjcm9sbCA9IGZ1bmN0aW9uIHNjcm9sbCh0YXJnZXQsIGZyYW1lKSB7XG4gIGlmICghZnJhbWUpIHtcbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9XG5cbiAgcmV0dXJuIG9mZnNldEJ5UG9zaXRpb24odGFyZ2V0LCBmcmFtZS5zY3JvbGwuZGlmZi5kaXNwbGFjZW1lbnQpO1xufTtcblxudmFyIGluY3JlYXNlID0gZnVuY3Rpb24gaW5jcmVhc2UodGFyZ2V0LCBheGlzLCB3aXRoUGxhY2Vob2xkZXIpIHtcbiAgaWYgKHdpdGhQbGFjZWhvbGRlciAmJiB3aXRoUGxhY2Vob2xkZXIuaW5jcmVhc2VkQnkpIHtcbiAgICB2YXIgX2V4dGVuZHMyO1xuXG4gICAgcmV0dXJuIF9leHRlbmRzKHt9LCB0YXJnZXQsIChfZXh0ZW5kczIgPSB7fSwgX2V4dGVuZHMyW2F4aXMuZW5kXSA9IHRhcmdldFtheGlzLmVuZF0gKyB3aXRoUGxhY2Vob2xkZXIuaW5jcmVhc2VkQnlbYXhpcy5saW5lXSwgX2V4dGVuZHMyKSk7XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufTtcblxudmFyIGNsaXAgPSBmdW5jdGlvbiBjbGlwKHRhcmdldCwgZnJhbWUpIHtcbiAgaWYgKGZyYW1lICYmIGZyYW1lLnNob3VsZENsaXBTdWJqZWN0KSB7XG4gICAgcmV0dXJuIGV4ZWN1dGVDbGlwKGZyYW1lLnBhZ2VNYXJnaW5Cb3gsIHRhcmdldCk7XG4gIH1cblxuICByZXR1cm4gZ2V0UmVjdCh0YXJnZXQpO1xufTtcblxudmFyIGdldFN1YmplY3QgPSAoZnVuY3Rpb24gKF9yZWYpIHtcbiAgdmFyIHBhZ2UgPSBfcmVmLnBhZ2UsXG4gICAgICB3aXRoUGxhY2Vob2xkZXIgPSBfcmVmLndpdGhQbGFjZWhvbGRlcixcbiAgICAgIGF4aXMgPSBfcmVmLmF4aXMsXG4gICAgICBmcmFtZSA9IF9yZWYuZnJhbWU7XG4gIHZhciBzY3JvbGxlZCA9IHNjcm9sbChwYWdlLm1hcmdpbkJveCwgZnJhbWUpO1xuICB2YXIgaW5jcmVhc2VkID0gaW5jcmVhc2Uoc2Nyb2xsZWQsIGF4aXMsIHdpdGhQbGFjZWhvbGRlcik7XG4gIHZhciBjbGlwcGVkID0gY2xpcChpbmNyZWFzZWQsIGZyYW1lKTtcbiAgcmV0dXJuIHtcbiAgICBwYWdlOiBwYWdlLFxuICAgIHdpdGhQbGFjZWhvbGRlcjogd2l0aFBsYWNlaG9sZGVyLFxuICAgIGFjdGl2ZTogY2xpcHBlZFxuICB9O1xufSk7XG5cbnZhciBzY3JvbGxEcm9wcGFibGUgPSAoZnVuY3Rpb24gKGRyb3BwYWJsZSwgbmV3U2Nyb2xsKSB7XG4gICFkcm9wcGFibGUuZnJhbWUgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgdmFyIHNjcm9sbGFibGUgPSBkcm9wcGFibGUuZnJhbWU7XG4gIHZhciBzY3JvbGxEaWZmID0gc3VidHJhY3QobmV3U2Nyb2xsLCBzY3JvbGxhYmxlLnNjcm9sbC5pbml0aWFsKTtcbiAgdmFyIHNjcm9sbERpc3BsYWNlbWVudCA9IG5lZ2F0ZShzY3JvbGxEaWZmKTtcblxuICB2YXIgZnJhbWUgPSBfZXh0ZW5kcyh7fSwgc2Nyb2xsYWJsZSwge1xuICAgIHNjcm9sbDoge1xuICAgICAgaW5pdGlhbDogc2Nyb2xsYWJsZS5zY3JvbGwuaW5pdGlhbCxcbiAgICAgIGN1cnJlbnQ6IG5ld1Njcm9sbCxcbiAgICAgIGRpZmY6IHtcbiAgICAgICAgdmFsdWU6IHNjcm9sbERpZmYsXG4gICAgICAgIGRpc3BsYWNlbWVudDogc2Nyb2xsRGlzcGxhY2VtZW50XG4gICAgICB9LFxuICAgICAgbWF4OiBzY3JvbGxhYmxlLnNjcm9sbC5tYXhcbiAgICB9XG4gIH0pO1xuXG4gIHZhciBzdWJqZWN0ID0gZ2V0U3ViamVjdCh7XG4gICAgcGFnZTogZHJvcHBhYmxlLnN1YmplY3QucGFnZSxcbiAgICB3aXRoUGxhY2Vob2xkZXI6IGRyb3BwYWJsZS5zdWJqZWN0LndpdGhQbGFjZWhvbGRlcixcbiAgICBheGlzOiBkcm9wcGFibGUuYXhpcyxcbiAgICBmcmFtZTogZnJhbWVcbiAgfSk7XG5cbiAgdmFyIHJlc3VsdCA9IF9leHRlbmRzKHt9LCBkcm9wcGFibGUsIHtcbiAgICBmcmFtZTogZnJhbWUsXG4gICAgc3ViamVjdDogc3ViamVjdFxuICB9KTtcblxuICByZXR1cm4gcmVzdWx0O1xufSk7XG5cbnZhciByZWNvcmRzID0ge307XG52YXIgaXNFbmFibGVkID0gZmFsc2U7XG5cbnZhciBpc1RpbWluZ3NFbmFibGVkID0gZnVuY3Rpb24gaXNUaW1pbmdzRW5hYmxlZCgpIHtcbiAgcmV0dXJuIGlzRW5hYmxlZDtcbn07XG52YXIgc3RhcnQgPSBmdW5jdGlvbiBzdGFydChrZXkpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAoIWlzVGltaW5nc0VuYWJsZWQoKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBub3cgPSBwZXJmb3JtYW5jZS5ub3coKTtcbiAgICByZWNvcmRzW2tleV0gPSBub3c7XG4gIH1cbn07XG52YXIgZmluaXNoID0gZnVuY3Rpb24gZmluaXNoKGtleSkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmICghaXNUaW1pbmdzRW5hYmxlZCgpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIG5vdyA9IHBlcmZvcm1hbmNlLm5vdygpO1xuICAgIHZhciBwcmV2aW91cyA9IHJlY29yZHNba2V5XTtcblxuICAgIGlmICghcHJldmlvdXMpIHtcbiAgICAgIGNvbnNvbGUud2FybignY2Fubm90IGZpbmlzaCB0aW1pbmcgYXMgbm8gcHJldmlvdXMgdGltZSBmb3VuZCcsIGtleSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHJlc3VsdCA9IG5vdyAtIHByZXZpb3VzO1xuICAgIHZhciByb3VuZGVkID0gcmVzdWx0LnRvRml4ZWQoMik7XG5cbiAgICB2YXIgc3R5bGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAocmVzdWx0IDwgMTIpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB0ZXh0Q29sb3I6ICdncmVlbicsXG4gICAgICAgICAgc3ltYm9sOiAn4pyFJ1xuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBpZiAocmVzdWx0IDwgNDApIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB0ZXh0Q29sb3I6ICdvcmFuZ2UnLFxuICAgICAgICAgIHN5bWJvbDogJ+KaoO+4jydcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdGV4dENvbG9yOiAncmVkJyxcbiAgICAgICAgc3ltYm9sOiAn4p2MJ1xuICAgICAgfTtcbiAgICB9KCk7XG5cbiAgICBjb25zb2xlLmxvZyhzdHlsZS5zeW1ib2wgKyBcIiAlY1RpbWluZyAlY1wiICsgcm91bmRlZCArIFwiICVjbXMgJWNcIiArIGtleSwgJ2NvbG9yOiBibHVlOyBmb250LXdlaWdodDogYm9sZDsnLCBcImNvbG9yOiBcIiArIHN0eWxlLnRleHRDb2xvciArIFwiOyBmb250LXNpemU6IDEuMWVtO1wiLCAnY29sb3I6IGdyZXk7JywgJ2NvbG9yOiBwdXJwbGU7IGZvbnQtd2VpZ2h0OiBib2xkOycpO1xuICB9XG59O1xuXG52YXIgd2hhdElzRHJhZ2dlZE92ZXIgPSAoZnVuY3Rpb24gKGltcGFjdCkge1xuICB2YXIgbWVyZ2UgPSBpbXBhY3QubWVyZ2UsXG4gICAgICBkZXN0aW5hdGlvbiA9IGltcGFjdC5kZXN0aW5hdGlvbjtcblxuICBpZiAoZGVzdGluYXRpb24pIHtcbiAgICByZXR1cm4gZGVzdGluYXRpb24uZHJvcHBhYmxlSWQ7XG4gIH1cblxuICBpZiAobWVyZ2UpIHtcbiAgICByZXR1cm4gbWVyZ2UuY29tYmluZS5kcm9wcGFibGVJZDtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufSk7XG5cbmZ1bmN0aW9uIHZhbHVlcyhtYXApIHtcbiAgcmV0dXJuIF9PYmplY3QkdmFsdWVzKG1hcCk7XG59XG5mdW5jdGlvbiBmaW5kSW5kZXgobGlzdCwgcHJlZGljYXRlKSB7XG4gIGlmIChsaXN0LmZpbmRJbmRleCkge1xuICAgIHJldHVybiBsaXN0LmZpbmRJbmRleChwcmVkaWNhdGUpO1xuICB9XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHByZWRpY2F0ZShsaXN0W2ldKSkge1xuICAgICAgcmV0dXJuIGk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIC0xO1xufVxuZnVuY3Rpb24gZmluZChsaXN0LCBwcmVkaWNhdGUpIHtcbiAgaWYgKGxpc3QuZmluZCkge1xuICAgIHJldHVybiBsaXN0LmZpbmQocHJlZGljYXRlKTtcbiAgfVxuXG4gIHZhciBpbmRleCA9IGZpbmRJbmRleChsaXN0LCBwcmVkaWNhdGUpO1xuXG4gIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICByZXR1cm4gbGlzdFtpbmRleF07XG4gIH1cblxuICByZXR1cm4gdW5kZWZpbmVkO1xufVxuXG52YXIgdG9Ecm9wcGFibGVNYXAgPSBtZW1vaXplT25lKGZ1bmN0aW9uIChkcm9wcGFibGVzKSB7XG4gIHJldHVybiBkcm9wcGFibGVzLnJlZHVjZShmdW5jdGlvbiAocHJldmlvdXMsIGN1cnJlbnQpIHtcbiAgICBwcmV2aW91c1tjdXJyZW50LmRlc2NyaXB0b3IuaWRdID0gY3VycmVudDtcbiAgICByZXR1cm4gcHJldmlvdXM7XG4gIH0sIHt9KTtcbn0pO1xudmFyIHRvRHJhZ2dhYmxlTWFwID0gbWVtb2l6ZU9uZShmdW5jdGlvbiAoZHJhZ2dhYmxlcykge1xuICByZXR1cm4gZHJhZ2dhYmxlcy5yZWR1Y2UoZnVuY3Rpb24gKHByZXZpb3VzLCBjdXJyZW50KSB7XG4gICAgcHJldmlvdXNbY3VycmVudC5kZXNjcmlwdG9yLmlkXSA9IGN1cnJlbnQ7XG4gICAgcmV0dXJuIHByZXZpb3VzO1xuICB9LCB7fSk7XG59KTtcbnZhciB0b0Ryb3BwYWJsZUxpc3QgPSBtZW1vaXplT25lKGZ1bmN0aW9uIChkcm9wcGFibGVzKSB7XG4gIHJldHVybiB2YWx1ZXMoZHJvcHBhYmxlcyk7XG59KTtcbnZhciB0b0RyYWdnYWJsZUxpc3QgPSBtZW1vaXplT25lKGZ1bmN0aW9uIChkcmFnZ2FibGVzKSB7XG4gIHJldHVybiB2YWx1ZXMoZHJhZ2dhYmxlcyk7XG59KTtcblxudmFyIGlzV2l0aGluID0gKGZ1bmN0aW9uIChsb3dlckJvdW5kLCB1cHBlckJvdW5kKSB7XG4gIHJldHVybiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICByZXR1cm4gbG93ZXJCb3VuZCA8PSB2YWx1ZSAmJiB2YWx1ZSA8PSB1cHBlckJvdW5kO1xuICB9O1xufSk7XG5cbnZhciBpc1Bvc2l0aW9uSW5GcmFtZSA9IChmdW5jdGlvbiAoZnJhbWUpIHtcbiAgdmFyIGlzV2l0aGluVmVydGljYWwgPSBpc1dpdGhpbihmcmFtZS50b3AsIGZyYW1lLmJvdHRvbSk7XG4gIHZhciBpc1dpdGhpbkhvcml6b250YWwgPSBpc1dpdGhpbihmcmFtZS5sZWZ0LCBmcmFtZS5yaWdodCk7XG4gIHJldHVybiBmdW5jdGlvbiAocG9pbnQpIHtcbiAgICByZXR1cm4gaXNXaXRoaW5WZXJ0aWNhbChwb2ludC55KSAmJiBpc1dpdGhpblZlcnRpY2FsKHBvaW50LnkpICYmIGlzV2l0aGluSG9yaXpvbnRhbChwb2ludC54KSAmJiBpc1dpdGhpbkhvcml6b250YWwocG9pbnQueCk7XG4gIH07XG59KTtcblxudmFyIGdldERyb3BwYWJsZU92ZXIgPSAoZnVuY3Rpb24gKF9yZWYpIHtcbiAgdmFyIHRhcmdldCA9IF9yZWYudGFyZ2V0LFxuICAgICAgZHJvcHBhYmxlcyA9IF9yZWYuZHJvcHBhYmxlcztcbiAgdmFyIG1heWJlID0gZmluZCh0b0Ryb3BwYWJsZUxpc3QoZHJvcHBhYmxlcyksIGZ1bmN0aW9uIChkcm9wcGFibGUpIHtcbiAgICBpZiAoIWRyb3BwYWJsZS5pc0VuYWJsZWQpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgYWN0aXZlID0gZHJvcHBhYmxlLnN1YmplY3QuYWN0aXZlO1xuXG4gICAgaWYgKCFhY3RpdmUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gaXNQb3NpdGlvbkluRnJhbWUoYWN0aXZlKSh0YXJnZXQpO1xuICB9KTtcbiAgcmV0dXJuIG1heWJlID8gbWF5YmUuZGVzY3JpcHRvci5pZCA6IG51bGw7XG59KTtcblxudmFyIGdldERyYWdnYWJsZXNJbnNpZGVEcm9wcGFibGUgPSBtZW1vaXplT25lKGZ1bmN0aW9uIChkcm9wcGFibGVJZCwgZHJhZ2dhYmxlcykge1xuICB2YXIgcmVzdWx0ID0gdG9EcmFnZ2FibGVMaXN0KGRyYWdnYWJsZXMpLmZpbHRlcihmdW5jdGlvbiAoZHJhZ2dhYmxlKSB7XG4gICAgcmV0dXJuIGRyb3BwYWJsZUlkID09PSBkcmFnZ2FibGUuZGVzY3JpcHRvci5kcm9wcGFibGVJZDtcbiAgfSkuc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgIHJldHVybiBhLmRlc2NyaXB0b3IuaW5kZXggLSBiLmRlc2NyaXB0b3IuaW5kZXg7XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufSk7XG5cbnZhciB3aXRoRHJvcHBhYmxlU2Nyb2xsID0gKGZ1bmN0aW9uIChkcm9wcGFibGUsIHBvaW50KSB7XG4gIHZhciBmcmFtZSA9IGRyb3BwYWJsZS5mcmFtZTtcblxuICBpZiAoIWZyYW1lKSB7XG4gICAgcmV0dXJuIHBvaW50O1xuICB9XG5cbiAgcmV0dXJuIGFkZChwb2ludCwgZnJhbWUuc2Nyb2xsLmRpZmYudmFsdWUpO1xufSk7XG5cbnZhciB2ZXJ0aWNhbCA9IHtcbiAgZGlyZWN0aW9uOiAndmVydGljYWwnLFxuICBsaW5lOiAneScsXG4gIGNyb3NzQXhpc0xpbmU6ICd4JyxcbiAgc3RhcnQ6ICd0b3AnLFxuICBlbmQ6ICdib3R0b20nLFxuICBzaXplOiAnaGVpZ2h0JyxcbiAgY3Jvc3NBeGlzU3RhcnQ6ICdsZWZ0JyxcbiAgY3Jvc3NBeGlzRW5kOiAncmlnaHQnLFxuICBjcm9zc0F4aXNTaXplOiAnd2lkdGgnXG59O1xudmFyIGhvcml6b250YWwgPSB7XG4gIGRpcmVjdGlvbjogJ2hvcml6b250YWwnLFxuICBsaW5lOiAneCcsXG4gIGNyb3NzQXhpc0xpbmU6ICd5JyxcbiAgc3RhcnQ6ICdsZWZ0JyxcbiAgZW5kOiAncmlnaHQnLFxuICBzaXplOiAnd2lkdGgnLFxuICBjcm9zc0F4aXNTdGFydDogJ3RvcCcsXG4gIGNyb3NzQXhpc0VuZDogJ2JvdHRvbScsXG4gIGNyb3NzQXhpc1NpemU6ICdoZWlnaHQnXG59O1xuXG52YXIgaXNVc2VyTW92aW5nRm9yd2FyZCA9IChmdW5jdGlvbiAoYXhpcywgZGlyZWN0aW9uKSB7XG4gIHJldHVybiBheGlzID09PSB2ZXJ0aWNhbCA/IGRpcmVjdGlvbi52ZXJ0aWNhbCA9PT0gJ2Rvd24nIDogZGlyZWN0aW9uLmhvcml6b250YWwgPT09ICdyaWdodCc7XG59KTtcblxudmFyIGRpZFN0YXJ0RGlzcGxhY2VkID0gKGZ1bmN0aW9uIChkcmFnZ2FibGVJZCwgb25MaWZ0KSB7XG4gIHJldHVybiBCb29sZWFuKG9uTGlmdC53YXNEaXNwbGFjZWRbZHJhZ2dhYmxlSWRdKTtcbn0pO1xuXG52YXIgZ2V0Q29tYmluZWRJdGVtRGlzcGxhY2VtZW50ID0gKGZ1bmN0aW9uIChfcmVmKSB7XG4gIHZhciBkaXNwbGFjZWQgPSBfcmVmLmRpc3BsYWNlZCxcbiAgICAgIG9uTGlmdCA9IF9yZWYub25MaWZ0LFxuICAgICAgY29tYmluZVdpdGggPSBfcmVmLmNvbWJpbmVXaXRoLFxuICAgICAgZGlzcGxhY2VkQnkgPSBfcmVmLmRpc3BsYWNlZEJ5O1xuICB2YXIgaXNEaXNwbGFjZWQgPSBCb29sZWFuKGRpc3BsYWNlZFtjb21iaW5lV2l0aF0pO1xuXG4gIGlmIChkaWRTdGFydERpc3BsYWNlZChjb21iaW5lV2l0aCwgb25MaWZ0KSkge1xuICAgIHJldHVybiBpc0Rpc3BsYWNlZCA/IG9yaWdpbiA6IG5lZ2F0ZShkaXNwbGFjZWRCeS5wb2ludCk7XG4gIH1cblxuICByZXR1cm4gaXNEaXNwbGFjZWQgPyBkaXNwbGFjZWRCeS5wb2ludCA6IG9yaWdpbjtcbn0pO1xuXG52YXIgZ2V0V2hlbkVudGVyZWQgPSBmdW5jdGlvbiBnZXRXaGVuRW50ZXJlZChpZCwgY3VycmVudCwgb2xkTWVyZ2UpIHtcbiAgaWYgKCFvbGRNZXJnZSkge1xuICAgIHJldHVybiBjdXJyZW50O1xuICB9XG5cbiAgaWYgKGlkICE9PSBvbGRNZXJnZS5jb21iaW5lLmRyYWdnYWJsZUlkKSB7XG4gICAgcmV0dXJuIGN1cnJlbnQ7XG4gIH1cblxuICByZXR1cm4gb2xkTWVyZ2Uud2hlbkVudGVyZWQ7XG59O1xuXG52YXIgaXNDb21iaW5pbmdXaXRoID0gZnVuY3Rpb24gaXNDb21iaW5pbmdXaXRoKF9yZWYpIHtcbiAgdmFyIGlkID0gX3JlZi5pZCxcbiAgICAgIGN1cnJlbnRDZW50ZXIgPSBfcmVmLmN1cnJlbnRDZW50ZXIsXG4gICAgICBheGlzID0gX3JlZi5heGlzLFxuICAgICAgYm9yZGVyQm94ID0gX3JlZi5ib3JkZXJCb3gsXG4gICAgICBkaXNwbGFjZUJ5ID0gX3JlZi5kaXNwbGFjZUJ5LFxuICAgICAgY3VycmVudFVzZXJEaXJlY3Rpb24gPSBfcmVmLmN1cnJlbnRVc2VyRGlyZWN0aW9uLFxuICAgICAgb2xkTWVyZ2UgPSBfcmVmLm9sZE1lcmdlO1xuICB2YXIgc3RhcnQgPSBib3JkZXJCb3hbYXhpcy5zdGFydF0gKyBkaXNwbGFjZUJ5W2F4aXMubGluZV07XG4gIHZhciBlbmQgPSBib3JkZXJCb3hbYXhpcy5lbmRdICsgZGlzcGxhY2VCeVtheGlzLmxpbmVdO1xuICB2YXIgc2l6ZSA9IGJvcmRlckJveFtheGlzLnNpemVdO1xuICB2YXIgdHdvVGhpcmRzT2ZTaXplID0gc2l6ZSAqIDAuNjY2O1xuICB2YXIgd2hlbkVudGVyZWQgPSBnZXRXaGVuRW50ZXJlZChpZCwgY3VycmVudFVzZXJEaXJlY3Rpb24sIG9sZE1lcmdlKTtcbiAgdmFyIGlzTW92aW5nRm9yd2FyZCA9IGlzVXNlck1vdmluZ0ZvcndhcmQoYXhpcywgd2hlbkVudGVyZWQpO1xuICB2YXIgdGFyZ2V0Q2VudGVyID0gY3VycmVudENlbnRlcltheGlzLmxpbmVdO1xuXG4gIGlmIChpc01vdmluZ0ZvcndhcmQpIHtcbiAgICByZXR1cm4gaXNXaXRoaW4oc3RhcnQsIHN0YXJ0ICsgdHdvVGhpcmRzT2ZTaXplKSh0YXJnZXRDZW50ZXIpO1xuICB9XG5cbiAgcmV0dXJuIGlzV2l0aGluKGVuZCAtIHR3b1RoaXJkc09mU2l6ZSwgZW5kKSh0YXJnZXRDZW50ZXIpO1xufTtcblxudmFyIGdldENvbWJpbmVJbXBhY3QgPSAoZnVuY3Rpb24gKF9yZWYyKSB7XG4gIHZhciBjdXJyZW50Q2VudGVyID0gX3JlZjIucGFnZUJvcmRlckJveENlbnRlcldpdGhEcm9wcGFibGVTY3JvbGxDaGFuZ2UsXG4gICAgICBwcmV2aW91c0ltcGFjdCA9IF9yZWYyLnByZXZpb3VzSW1wYWN0LFxuICAgICAgZGVzdGluYXRpb24gPSBfcmVmMi5kZXN0aW5hdGlvbixcbiAgICAgIGluc2lkZURlc3RpbmF0aW9uV2l0aG91dERyYWdnYWJsZSA9IF9yZWYyLmluc2lkZURlc3RpbmF0aW9uV2l0aG91dERyYWdnYWJsZSxcbiAgICAgIHVzZXJEaXJlY3Rpb24gPSBfcmVmMi51c2VyRGlyZWN0aW9uLFxuICAgICAgb25MaWZ0ID0gX3JlZjIub25MaWZ0O1xuXG4gIGlmICghZGVzdGluYXRpb24uaXNDb21iaW5lRW5hYmxlZCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgdmFyIGF4aXMgPSBkZXN0aW5hdGlvbi5heGlzO1xuICB2YXIgbWFwID0gcHJldmlvdXNJbXBhY3QubW92ZW1lbnQubWFwO1xuICB2YXIgY2FuQmVEaXNwbGFjZWRCeSA9IHByZXZpb3VzSW1wYWN0Lm1vdmVtZW50LmRpc3BsYWNlZEJ5O1xuICB2YXIgb2xkTWVyZ2UgPSBwcmV2aW91c0ltcGFjdC5tZXJnZTtcbiAgdmFyIHRhcmdldCA9IGZpbmQoaW5zaWRlRGVzdGluYXRpb25XaXRob3V0RHJhZ2dhYmxlLCBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICB2YXIgaWQgPSBjaGlsZC5kZXNjcmlwdG9yLmlkO1xuICAgIHZhciBkaXNwbGFjZUJ5ID0gZ2V0Q29tYmluZWRJdGVtRGlzcGxhY2VtZW50KHtcbiAgICAgIGRpc3BsYWNlZDogbWFwLFxuICAgICAgb25MaWZ0OiBvbkxpZnQsXG4gICAgICBjb21iaW5lV2l0aDogaWQsXG4gICAgICBkaXNwbGFjZWRCeTogY2FuQmVEaXNwbGFjZWRCeVxuICAgIH0pO1xuICAgIHJldHVybiBpc0NvbWJpbmluZ1dpdGgoe1xuICAgICAgaWQ6IGlkLFxuICAgICAgY3VycmVudENlbnRlcjogY3VycmVudENlbnRlcixcbiAgICAgIGF4aXM6IGF4aXMsXG4gICAgICBib3JkZXJCb3g6IGNoaWxkLnBhZ2UuYm9yZGVyQm94LFxuICAgICAgZGlzcGxhY2VCeTogZGlzcGxhY2VCeSxcbiAgICAgIGN1cnJlbnRVc2VyRGlyZWN0aW9uOiB1c2VyRGlyZWN0aW9uLFxuICAgICAgb2xkTWVyZ2U6IG9sZE1lcmdlXG4gICAgfSk7XG4gIH0pO1xuXG4gIGlmICghdGFyZ2V0KSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICB2YXIgbWVyZ2UgPSB7XG4gICAgd2hlbkVudGVyZWQ6IGdldFdoZW5FbnRlcmVkKHRhcmdldC5kZXNjcmlwdG9yLmlkLCB1c2VyRGlyZWN0aW9uLCBvbGRNZXJnZSksXG4gICAgY29tYmluZToge1xuICAgICAgZHJhZ2dhYmxlSWQ6IHRhcmdldC5kZXNjcmlwdG9yLmlkLFxuICAgICAgZHJvcHBhYmxlSWQ6IGRlc3RpbmF0aW9uLmRlc2NyaXB0b3IuaWRcbiAgICB9XG4gIH07XG5cbiAgdmFyIHdpdGhNZXJnZSA9IF9leHRlbmRzKHt9LCBwcmV2aW91c0ltcGFjdCwge1xuICAgIGRlc3RpbmF0aW9uOiBudWxsLFxuICAgIG1lcmdlOiBtZXJnZVxuICB9KTtcblxuICByZXR1cm4gd2l0aE1lcmdlO1xufSk7XG5cbnZhciBpc1BhcnRpYWxseVZpc2libGVUaHJvdWdoRnJhbWUgPSAoZnVuY3Rpb24gKGZyYW1lKSB7XG4gIHZhciBpc1dpdGhpblZlcnRpY2FsID0gaXNXaXRoaW4oZnJhbWUudG9wLCBmcmFtZS5ib3R0b20pO1xuICB2YXIgaXNXaXRoaW5Ib3Jpem9udGFsID0gaXNXaXRoaW4oZnJhbWUubGVmdCwgZnJhbWUucmlnaHQpO1xuICByZXR1cm4gZnVuY3Rpb24gKHN1YmplY3QpIHtcbiAgICB2YXIgaXNDb250YWluZWQgPSBpc1dpdGhpblZlcnRpY2FsKHN1YmplY3QudG9wKSAmJiBpc1dpdGhpblZlcnRpY2FsKHN1YmplY3QuYm90dG9tKSAmJiBpc1dpdGhpbkhvcml6b250YWwoc3ViamVjdC5sZWZ0KSAmJiBpc1dpdGhpbkhvcml6b250YWwoc3ViamVjdC5yaWdodCk7XG5cbiAgICBpZiAoaXNDb250YWluZWQpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHZhciBpc1BhcnRpYWxseVZpc2libGVWZXJ0aWNhbGx5ID0gaXNXaXRoaW5WZXJ0aWNhbChzdWJqZWN0LnRvcCkgfHwgaXNXaXRoaW5WZXJ0aWNhbChzdWJqZWN0LmJvdHRvbSk7XG4gICAgdmFyIGlzUGFydGlhbGx5VmlzaWJsZUhvcml6b250YWxseSA9IGlzV2l0aGluSG9yaXpvbnRhbChzdWJqZWN0LmxlZnQpIHx8IGlzV2l0aGluSG9yaXpvbnRhbChzdWJqZWN0LnJpZ2h0KTtcbiAgICB2YXIgaXNQYXJ0aWFsbHlDb250YWluZWQgPSBpc1BhcnRpYWxseVZpc2libGVWZXJ0aWNhbGx5ICYmIGlzUGFydGlhbGx5VmlzaWJsZUhvcml6b250YWxseTtcblxuICAgIGlmIChpc1BhcnRpYWxseUNvbnRhaW5lZCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgdmFyIGlzQmlnZ2VyVmVydGljYWxseSA9IHN1YmplY3QudG9wIDwgZnJhbWUudG9wICYmIHN1YmplY3QuYm90dG9tID4gZnJhbWUuYm90dG9tO1xuICAgIHZhciBpc0JpZ2dlckhvcml6b250YWxseSA9IHN1YmplY3QubGVmdCA8IGZyYW1lLmxlZnQgJiYgc3ViamVjdC5yaWdodCA+IGZyYW1lLnJpZ2h0O1xuICAgIHZhciBpc1RhcmdldEJpZ2dlclRoYW5GcmFtZSA9IGlzQmlnZ2VyVmVydGljYWxseSAmJiBpc0JpZ2dlckhvcml6b250YWxseTtcblxuICAgIGlmIChpc1RhcmdldEJpZ2dlclRoYW5GcmFtZSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgdmFyIGlzVGFyZ2V0QmlnZ2VyT25PbmVBeGlzID0gaXNCaWdnZXJWZXJ0aWNhbGx5ICYmIGlzUGFydGlhbGx5VmlzaWJsZUhvcml6b250YWxseSB8fCBpc0JpZ2dlckhvcml6b250YWxseSAmJiBpc1BhcnRpYWxseVZpc2libGVWZXJ0aWNhbGx5O1xuICAgIHJldHVybiBpc1RhcmdldEJpZ2dlck9uT25lQXhpcztcbiAgfTtcbn0pO1xuXG52YXIgaXNUb3RhbGx5VmlzaWJsZVRocm91Z2hGcmFtZSA9IChmdW5jdGlvbiAoZnJhbWUpIHtcbiAgdmFyIGlzV2l0aGluVmVydGljYWwgPSBpc1dpdGhpbihmcmFtZS50b3AsIGZyYW1lLmJvdHRvbSk7XG4gIHZhciBpc1dpdGhpbkhvcml6b250YWwgPSBpc1dpdGhpbihmcmFtZS5sZWZ0LCBmcmFtZS5yaWdodCk7XG4gIHJldHVybiBmdW5jdGlvbiAoc3ViamVjdCkge1xuICAgIHZhciBpc0NvbnRhaW5lZCA9IGlzV2l0aGluVmVydGljYWwoc3ViamVjdC50b3ApICYmIGlzV2l0aGluVmVydGljYWwoc3ViamVjdC5ib3R0b20pICYmIGlzV2l0aGluSG9yaXpvbnRhbChzdWJqZWN0LmxlZnQpICYmIGlzV2l0aGluSG9yaXpvbnRhbChzdWJqZWN0LnJpZ2h0KTtcbiAgICByZXR1cm4gaXNDb250YWluZWQ7XG4gIH07XG59KTtcblxudmFyIGlzVG90YWxseVZpc2libGVUaHJvdWdoRnJhbWVPbkF4aXMgPSAoZnVuY3Rpb24gKGF4aXMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChmcmFtZSkge1xuICAgIHZhciBpc1dpdGhpblZlcnRpY2FsID0gaXNXaXRoaW4oZnJhbWUudG9wLCBmcmFtZS5ib3R0b20pO1xuICAgIHZhciBpc1dpdGhpbkhvcml6b250YWwgPSBpc1dpdGhpbihmcmFtZS5sZWZ0LCBmcmFtZS5yaWdodCk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzdWJqZWN0KSB7XG4gICAgICBpZiAoYXhpcyA9PT0gdmVydGljYWwpIHtcbiAgICAgICAgcmV0dXJuIGlzV2l0aGluVmVydGljYWwoc3ViamVjdC50b3ApICYmIGlzV2l0aGluVmVydGljYWwoc3ViamVjdC5ib3R0b20pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gaXNXaXRoaW5Ib3Jpem9udGFsKHN1YmplY3QubGVmdCkgJiYgaXNXaXRoaW5Ib3Jpem9udGFsKHN1YmplY3QucmlnaHQpO1xuICAgIH07XG4gIH07XG59KTtcblxudmFyIGdldERyb3BwYWJsZURpc3BsYWNlZCA9IGZ1bmN0aW9uIGdldERyb3BwYWJsZURpc3BsYWNlZCh0YXJnZXQsIGRlc3RpbmF0aW9uKSB7XG4gIHZhciBkaXNwbGFjZW1lbnQgPSBkZXN0aW5hdGlvbi5mcmFtZSA/IGRlc3RpbmF0aW9uLmZyYW1lLnNjcm9sbC5kaWZmLmRpc3BsYWNlbWVudCA6IG9yaWdpbjtcbiAgcmV0dXJuIG9mZnNldEJ5UG9zaXRpb24odGFyZ2V0LCBkaXNwbGFjZW1lbnQpO1xufTtcblxudmFyIGlzVmlzaWJsZUluRHJvcHBhYmxlID0gZnVuY3Rpb24gaXNWaXNpYmxlSW5Ecm9wcGFibGUodGFyZ2V0LCBkZXN0aW5hdGlvbiwgaXNWaXNpYmxlVGhyb3VnaEZyYW1lRm4pIHtcbiAgaWYgKCFkZXN0aW5hdGlvbi5zdWJqZWN0LmFjdGl2ZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiBpc1Zpc2libGVUaHJvdWdoRnJhbWVGbihkZXN0aW5hdGlvbi5zdWJqZWN0LmFjdGl2ZSkodGFyZ2V0KTtcbn07XG5cbnZhciBpc1Zpc2libGVJblZpZXdwb3J0ID0gZnVuY3Rpb24gaXNWaXNpYmxlSW5WaWV3cG9ydCh0YXJnZXQsIHZpZXdwb3J0LCBpc1Zpc2libGVUaHJvdWdoRnJhbWVGbikge1xuICByZXR1cm4gaXNWaXNpYmxlVGhyb3VnaEZyYW1lRm4odmlld3BvcnQpKHRhcmdldCk7XG59O1xuXG52YXIgaXNWaXNpYmxlID0gZnVuY3Rpb24gaXNWaXNpYmxlKF9yZWYpIHtcbiAgdmFyIHRvQmVEaXNwbGFjZWQgPSBfcmVmLnRhcmdldCxcbiAgICAgIGRlc3RpbmF0aW9uID0gX3JlZi5kZXN0aW5hdGlvbixcbiAgICAgIHZpZXdwb3J0ID0gX3JlZi52aWV3cG9ydCxcbiAgICAgIHdpdGhEcm9wcGFibGVEaXNwbGFjZW1lbnQgPSBfcmVmLndpdGhEcm9wcGFibGVEaXNwbGFjZW1lbnQsXG4gICAgICBpc1Zpc2libGVUaHJvdWdoRnJhbWVGbiA9IF9yZWYuaXNWaXNpYmxlVGhyb3VnaEZyYW1lRm47XG4gIHZhciBkaXNwbGFjZWRUYXJnZXQgPSB3aXRoRHJvcHBhYmxlRGlzcGxhY2VtZW50ID8gZ2V0RHJvcHBhYmxlRGlzcGxhY2VkKHRvQmVEaXNwbGFjZWQsIGRlc3RpbmF0aW9uKSA6IHRvQmVEaXNwbGFjZWQ7XG4gIHJldHVybiBpc1Zpc2libGVJbkRyb3BwYWJsZShkaXNwbGFjZWRUYXJnZXQsIGRlc3RpbmF0aW9uLCBpc1Zpc2libGVUaHJvdWdoRnJhbWVGbikgJiYgaXNWaXNpYmxlSW5WaWV3cG9ydChkaXNwbGFjZWRUYXJnZXQsIHZpZXdwb3J0LCBpc1Zpc2libGVUaHJvdWdoRnJhbWVGbik7XG59O1xuXG52YXIgaXNQYXJ0aWFsbHlWaXNpYmxlID0gZnVuY3Rpb24gaXNQYXJ0aWFsbHlWaXNpYmxlKGFyZ3MpIHtcbiAgcmV0dXJuIGlzVmlzaWJsZShfZXh0ZW5kcyh7fSwgYXJncywge1xuICAgIGlzVmlzaWJsZVRocm91Z2hGcmFtZUZuOiBpc1BhcnRpYWxseVZpc2libGVUaHJvdWdoRnJhbWVcbiAgfSkpO1xufTtcbnZhciBpc1RvdGFsbHlWaXNpYmxlID0gZnVuY3Rpb24gaXNUb3RhbGx5VmlzaWJsZShhcmdzKSB7XG4gIHJldHVybiBpc1Zpc2libGUoX2V4dGVuZHMoe30sIGFyZ3MsIHtcbiAgICBpc1Zpc2libGVUaHJvdWdoRnJhbWVGbjogaXNUb3RhbGx5VmlzaWJsZVRocm91Z2hGcmFtZVxuICB9KSk7XG59O1xudmFyIGlzVG90YWxseVZpc2libGVPbkF4aXMgPSBmdW5jdGlvbiBpc1RvdGFsbHlWaXNpYmxlT25BeGlzKGFyZ3MpIHtcbiAgcmV0dXJuIGlzVmlzaWJsZShfZXh0ZW5kcyh7fSwgYXJncywge1xuICAgIGlzVmlzaWJsZVRocm91Z2hGcmFtZUZuOiBpc1RvdGFsbHlWaXNpYmxlVGhyb3VnaEZyYW1lT25BeGlzKGFyZ3MuZGVzdGluYXRpb24uYXhpcylcbiAgfSkpO1xufTtcblxudmFyIGdldFNob3VsZEFuaW1hdGUgPSBmdW5jdGlvbiBnZXRTaG91bGRBbmltYXRlKGZvcmNlU2hvdWxkQW5pbWF0ZSwgaXNWaXNpYmxlLCBwcmV2aW91cykge1xuICBpZiAodHlwZW9mIGZvcmNlU2hvdWxkQW5pbWF0ZSA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgcmV0dXJuIGZvcmNlU2hvdWxkQW5pbWF0ZTtcbiAgfVxuXG4gIGlmICghaXNWaXNpYmxlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKCFwcmV2aW91cykge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgcmV0dXJuIHByZXZpb3VzLnNob3VsZEFuaW1hdGU7XG59O1xuXG52YXIgZ2V0VGFyZ2V0ID0gZnVuY3Rpb24gZ2V0VGFyZ2V0KGRyYWdnYWJsZSwgb25MaWZ0KSB7XG4gIHZhciBtYXJnaW5Cb3ggPSBkcmFnZ2FibGUucGFnZS5tYXJnaW5Cb3g7XG5cbiAgaWYgKCFkaWRTdGFydERpc3BsYWNlZChkcmFnZ2FibGUuZGVzY3JpcHRvci5pZCwgb25MaWZ0KSkge1xuICAgIHJldHVybiBtYXJnaW5Cb3g7XG4gIH1cblxuICB2YXIgZXhwYW5kQnkgPSB7XG4gICAgdG9wOiBvbkxpZnQuZGlzcGxhY2VkQnkucG9pbnQueSxcbiAgICByaWdodDogMCxcbiAgICBib3R0b206IDAsXG4gICAgbGVmdDogb25MaWZ0LmRpc3BsYWNlZEJ5LnBvaW50LnhcbiAgfTtcbiAgcmV0dXJuIGdldFJlY3QoZXhwYW5kKG1hcmdpbkJveCwgZXhwYW5kQnkpKTtcbn07XG5cbnZhciBnZXREaXNwbGFjZW1lbnQgPSAoZnVuY3Rpb24gKF9yZWYpIHtcbiAgdmFyIGRyYWdnYWJsZSA9IF9yZWYuZHJhZ2dhYmxlLFxuICAgICAgZGVzdGluYXRpb24gPSBfcmVmLmRlc3RpbmF0aW9uLFxuICAgICAgcHJldmlvdXNJbXBhY3QgPSBfcmVmLnByZXZpb3VzSW1wYWN0LFxuICAgICAgdmlld3BvcnQgPSBfcmVmLnZpZXdwb3J0LFxuICAgICAgb25MaWZ0ID0gX3JlZi5vbkxpZnQsXG4gICAgICBmb3JjZVNob3VsZEFuaW1hdGUgPSBfcmVmLmZvcmNlU2hvdWxkQW5pbWF0ZTtcbiAgdmFyIGlkID0gZHJhZ2dhYmxlLmRlc2NyaXB0b3IuaWQ7XG4gIHZhciBtYXAgPSBwcmV2aW91c0ltcGFjdC5tb3ZlbWVudC5tYXA7XG4gIHZhciB0YXJnZXQgPSBnZXRUYXJnZXQoZHJhZ2dhYmxlLCBvbkxpZnQpO1xuICB2YXIgaXNWaXNpYmxlID0gaXNQYXJ0aWFsbHlWaXNpYmxlKHtcbiAgICB0YXJnZXQ6IHRhcmdldCxcbiAgICBkZXN0aW5hdGlvbjogZGVzdGluYXRpb24sXG4gICAgdmlld3BvcnQ6IHZpZXdwb3J0LFxuICAgIHdpdGhEcm9wcGFibGVEaXNwbGFjZW1lbnQ6IHRydWVcbiAgfSk7XG4gIHZhciBzaG91bGRBbmltYXRlID0gZ2V0U2hvdWxkQW5pbWF0ZShmb3JjZVNob3VsZEFuaW1hdGUsIGlzVmlzaWJsZSwgbWFwW2lkXSk7XG4gIHZhciBkaXNwbGFjZW1lbnQgPSB7XG4gICAgZHJhZ2dhYmxlSWQ6IGlkLFxuICAgIGlzVmlzaWJsZTogaXNWaXNpYmxlLFxuICAgIHNob3VsZEFuaW1hdGU6IHNob3VsZEFuaW1hdGVcbiAgfTtcbiAgcmV0dXJuIGRpc3BsYWNlbWVudDtcbn0pO1xuXG52YXIgZ2V0RGlzcGxhY2VtZW50TWFwID0gbWVtb2l6ZU9uZShmdW5jdGlvbiAoZGlzcGxhY2VkKSB7XG4gIHJldHVybiBkaXNwbGFjZWQucmVkdWNlKGZ1bmN0aW9uIChtYXAsIGRpc3BsYWNlbWVudCkge1xuICAgIG1hcFtkaXNwbGFjZW1lbnQuZHJhZ2dhYmxlSWRdID0gZGlzcGxhY2VtZW50O1xuICAgIHJldHVybiBtYXA7XG4gIH0sIHt9KTtcbn0pO1xuXG52YXIgZ2V0RGlzcGxhY2VkQnkgPSBtZW1vaXplT25lKGZ1bmN0aW9uIChheGlzLCBkaXNwbGFjZUJ5KSB7XG4gIHZhciBkaXNwbGFjZW1lbnQgPSBkaXNwbGFjZUJ5W2F4aXMubGluZV07XG4gIHJldHVybiB7XG4gICAgdmFsdWU6IGRpc3BsYWNlbWVudCxcbiAgICBwb2ludDogcGF0Y2goYXhpcy5saW5lLCBkaXNwbGFjZW1lbnQpXG4gIH07XG59KTtcblxudmFyIGdldFJlb3JkZXJJbXBhY3QgPSAoZnVuY3Rpb24gKF9yZWYpIHtcbiAgdmFyIGN1cnJlbnRDZW50ZXIgPSBfcmVmLnBhZ2VCb3JkZXJCb3hDZW50ZXJXaXRoRHJvcHBhYmxlU2Nyb2xsQ2hhbmdlLFxuICAgICAgZHJhZ2dhYmxlID0gX3JlZi5kcmFnZ2FibGUsXG4gICAgICBkZXN0aW5hdGlvbiA9IF9yZWYuZGVzdGluYXRpb24sXG4gICAgICBpbnNpZGVEZXN0aW5hdGlvbldpdGhvdXREcmFnZ2FibGUgPSBfcmVmLmluc2lkZURlc3RpbmF0aW9uV2l0aG91dERyYWdnYWJsZSxcbiAgICAgIHByZXZpb3VzSW1wYWN0ID0gX3JlZi5wcmV2aW91c0ltcGFjdCxcbiAgICAgIHZpZXdwb3J0ID0gX3JlZi52aWV3cG9ydCxcbiAgICAgIHVzZXJEaXJlY3Rpb24gPSBfcmVmLnVzZXJEaXJlY3Rpb24sXG4gICAgICBvbkxpZnQgPSBfcmVmLm9uTGlmdDtcbiAgdmFyIGF4aXMgPSBkZXN0aW5hdGlvbi5heGlzO1xuICB2YXIgaXNNb3ZpbmdGb3J3YXJkID0gaXNVc2VyTW92aW5nRm9yd2FyZChkZXN0aW5hdGlvbi5heGlzLCB1c2VyRGlyZWN0aW9uKTtcbiAgdmFyIGRpc3BsYWNlZEJ5ID0gZ2V0RGlzcGxhY2VkQnkoZGVzdGluYXRpb24uYXhpcywgZHJhZ2dhYmxlLmRpc3BsYWNlQnkpO1xuICB2YXIgdGFyZ2V0Q2VudGVyID0gY3VycmVudENlbnRlcltheGlzLmxpbmVdO1xuICB2YXIgZGlzcGxhY2VtZW50ID0gZGlzcGxhY2VkQnkudmFsdWU7XG4gIHZhciBkaXNwbGFjZWQgPSBpbnNpZGVEZXN0aW5hdGlvbldpdGhvdXREcmFnZ2FibGUuZmlsdGVyKGZ1bmN0aW9uIChjaGlsZCkge1xuICAgIHZhciBib3JkZXJCb3ggPSBjaGlsZC5wYWdlLmJvcmRlckJveDtcbiAgICB2YXIgc3RhcnQgPSBib3JkZXJCb3hbYXhpcy5zdGFydF07XG4gICAgdmFyIGVuZCA9IGJvcmRlckJveFtheGlzLmVuZF07XG4gICAgdmFyIGRpZFN0YXJ0RGlzcGxhY2VkJDEgPSBkaWRTdGFydERpc3BsYWNlZChjaGlsZC5kZXNjcmlwdG9yLmlkLCBvbkxpZnQpO1xuXG4gICAgaWYgKGlzTW92aW5nRm9yd2FyZCkge1xuICAgICAgaWYgKGRpZFN0YXJ0RGlzcGxhY2VkJDEpIHtcbiAgICAgICAgcmV0dXJuIHRhcmdldENlbnRlciA8IHN0YXJ0O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGFyZ2V0Q2VudGVyIDwgc3RhcnQgKyBkaXNwbGFjZW1lbnQ7XG4gICAgfVxuXG4gICAgaWYgKGRpZFN0YXJ0RGlzcGxhY2VkJDEpIHtcbiAgICAgIHJldHVybiB0YXJnZXRDZW50ZXIgPD0gZW5kIC0gZGlzcGxhY2VtZW50O1xuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXRDZW50ZXIgPD0gZW5kO1xuICB9KS5tYXAoZnVuY3Rpb24gKGRpbWVuc2lvbikge1xuICAgIHJldHVybiBnZXREaXNwbGFjZW1lbnQoe1xuICAgICAgZHJhZ2dhYmxlOiBkaW1lbnNpb24sXG4gICAgICBkZXN0aW5hdGlvbjogZGVzdGluYXRpb24sXG4gICAgICBwcmV2aW91c0ltcGFjdDogcHJldmlvdXNJbXBhY3QsXG4gICAgICB2aWV3cG9ydDogdmlld3BvcnQuZnJhbWUsXG4gICAgICBvbkxpZnQ6IG9uTGlmdFxuICAgIH0pO1xuICB9KTtcbiAgdmFyIG5ld0luZGV4ID0gaW5zaWRlRGVzdGluYXRpb25XaXRob3V0RHJhZ2dhYmxlLmxlbmd0aCAtIGRpc3BsYWNlZC5sZW5ndGg7XG4gIHZhciBtb3ZlbWVudCA9IHtcbiAgICBkaXNwbGFjZWRCeTogZGlzcGxhY2VkQnksXG4gICAgZGlzcGxhY2VkOiBkaXNwbGFjZWQsXG4gICAgbWFwOiBnZXREaXNwbGFjZW1lbnRNYXAoZGlzcGxhY2VkKVxuICB9O1xuICB2YXIgaW1wYWN0ID0ge1xuICAgIG1vdmVtZW50OiBtb3ZlbWVudCxcbiAgICBkZXN0aW5hdGlvbjoge1xuICAgICAgZHJvcHBhYmxlSWQ6IGRlc3RpbmF0aW9uLmRlc2NyaXB0b3IuaWQsXG4gICAgICBpbmRleDogbmV3SW5kZXhcbiAgICB9LFxuICAgIG1lcmdlOiBudWxsXG4gIH07XG4gIHJldHVybiBpbXBhY3Q7XG59KTtcblxudmFyIG5vRGlzcGxhY2VkQnkgPSB7XG4gIHBvaW50OiBvcmlnaW4sXG4gIHZhbHVlOiAwXG59O1xudmFyIG5vTW92ZW1lbnQgPSB7XG4gIGRpc3BsYWNlZDogW10sXG4gIG1hcDoge30sXG4gIGRpc3BsYWNlZEJ5OiBub0Rpc3BsYWNlZEJ5XG59O1xudmFyIG5vSW1wYWN0ID0ge1xuICBtb3ZlbWVudDogbm9Nb3ZlbWVudCxcbiAgZGVzdGluYXRpb246IG51bGwsXG4gIG1lcmdlOiBudWxsXG59O1xuXG52YXIgcmVtb3ZlRHJhZ2dhYmxlRnJvbUxpc3QgPSBtZW1vaXplT25lKGZ1bmN0aW9uIChyZW1vdmUsIGxpc3QpIHtcbiAgcmV0dXJuIGxpc3QuZmlsdGVyKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgcmV0dXJuIGl0ZW0uZGVzY3JpcHRvci5pZCAhPT0gcmVtb3ZlLmRlc2NyaXB0b3IuaWQ7XG4gIH0pO1xufSk7XG5cbnZhciBnZXREcmFnSW1wYWN0ID0gKGZ1bmN0aW9uIChfcmVmKSB7XG4gIHZhciBwYWdlQm9yZGVyQm94Q2VudGVyID0gX3JlZi5wYWdlQm9yZGVyQm94Q2VudGVyLFxuICAgICAgZHJhZ2dhYmxlID0gX3JlZi5kcmFnZ2FibGUsXG4gICAgICBkcmFnZ2FibGVzID0gX3JlZi5kcmFnZ2FibGVzLFxuICAgICAgZHJvcHBhYmxlcyA9IF9yZWYuZHJvcHBhYmxlcyxcbiAgICAgIHByZXZpb3VzSW1wYWN0ID0gX3JlZi5wcmV2aW91c0ltcGFjdCxcbiAgICAgIHZpZXdwb3J0ID0gX3JlZi52aWV3cG9ydCxcbiAgICAgIHVzZXJEaXJlY3Rpb24gPSBfcmVmLnVzZXJEaXJlY3Rpb24sXG4gICAgICBvbkxpZnQgPSBfcmVmLm9uTGlmdDtcbiAgdmFyIGRlc3RpbmF0aW9uSWQgPSBnZXREcm9wcGFibGVPdmVyKHtcbiAgICB0YXJnZXQ6IHBhZ2VCb3JkZXJCb3hDZW50ZXIsXG4gICAgZHJvcHBhYmxlczogZHJvcHBhYmxlc1xuICB9KTtcblxuICBpZiAoIWRlc3RpbmF0aW9uSWQpIHtcbiAgICByZXR1cm4gbm9JbXBhY3Q7XG4gIH1cblxuICB2YXIgZGVzdGluYXRpb24gPSBkcm9wcGFibGVzW2Rlc3RpbmF0aW9uSWRdO1xuICB2YXIgaW5zaWRlRGVzdGluYXRpb24gPSBnZXREcmFnZ2FibGVzSW5zaWRlRHJvcHBhYmxlKGRlc3RpbmF0aW9uLmRlc2NyaXB0b3IuaWQsIGRyYWdnYWJsZXMpO1xuICB2YXIgaW5zaWRlRGVzdGluYXRpb25XaXRob3V0RHJhZ2dhYmxlID0gcmVtb3ZlRHJhZ2dhYmxlRnJvbUxpc3QoZHJhZ2dhYmxlLCBpbnNpZGVEZXN0aW5hdGlvbik7XG4gIHZhciBwYWdlQm9yZGVyQm94Q2VudGVyV2l0aERyb3BwYWJsZVNjcm9sbENoYW5nZSA9IHdpdGhEcm9wcGFibGVTY3JvbGwoZGVzdGluYXRpb24sIHBhZ2VCb3JkZXJCb3hDZW50ZXIpO1xuICB2YXIgd2l0aE1lcmdlID0gZ2V0Q29tYmluZUltcGFjdCh7XG4gICAgcGFnZUJvcmRlckJveENlbnRlcldpdGhEcm9wcGFibGVTY3JvbGxDaGFuZ2U6IHBhZ2VCb3JkZXJCb3hDZW50ZXJXaXRoRHJvcHBhYmxlU2Nyb2xsQ2hhbmdlLFxuICAgIHByZXZpb3VzSW1wYWN0OiBwcmV2aW91c0ltcGFjdCxcbiAgICBkZXN0aW5hdGlvbjogZGVzdGluYXRpb24sXG4gICAgaW5zaWRlRGVzdGluYXRpb25XaXRob3V0RHJhZ2dhYmxlOiBpbnNpZGVEZXN0aW5hdGlvbldpdGhvdXREcmFnZ2FibGUsXG4gICAgdXNlckRpcmVjdGlvbjogdXNlckRpcmVjdGlvbixcbiAgICBvbkxpZnQ6IG9uTGlmdFxuICB9KTtcblxuICBpZiAod2l0aE1lcmdlKSB7XG4gICAgcmV0dXJuIHdpdGhNZXJnZTtcbiAgfVxuXG4gIHJldHVybiBnZXRSZW9yZGVySW1wYWN0KHtcbiAgICBwYWdlQm9yZGVyQm94Q2VudGVyV2l0aERyb3BwYWJsZVNjcm9sbENoYW5nZTogcGFnZUJvcmRlckJveENlbnRlcldpdGhEcm9wcGFibGVTY3JvbGxDaGFuZ2UsXG4gICAgZGVzdGluYXRpb246IGRlc3RpbmF0aW9uLFxuICAgIGRyYWdnYWJsZTogZHJhZ2dhYmxlLFxuICAgIGluc2lkZURlc3RpbmF0aW9uV2l0aG91dERyYWdnYWJsZTogaW5zaWRlRGVzdGluYXRpb25XaXRob3V0RHJhZ2dhYmxlLFxuICAgIHByZXZpb3VzSW1wYWN0OiBwcmV2aW91c0ltcGFjdCxcbiAgICB2aWV3cG9ydDogdmlld3BvcnQsXG4gICAgdXNlckRpcmVjdGlvbjogdXNlckRpcmVjdGlvbixcbiAgICBvbkxpZnQ6IG9uTGlmdFxuICB9KTtcbn0pO1xuXG52YXIgZ2V0SG9tZUxvY2F0aW9uID0gKGZ1bmN0aW9uIChkZXNjcmlwdG9yKSB7XG4gIHJldHVybiB7XG4gICAgaW5kZXg6IGRlc2NyaXB0b3IuaW5kZXgsXG4gICAgZHJvcHBhYmxlSWQ6IGRlc2NyaXB0b3IuZHJvcHBhYmxlSWRcbiAgfTtcbn0pO1xuXG52YXIgZ2V0SG9tZU9uTGlmdCA9IChmdW5jdGlvbiAoX3JlZikge1xuICB2YXIgZHJhZ2dhYmxlID0gX3JlZi5kcmFnZ2FibGUsXG4gICAgICBob21lID0gX3JlZi5ob21lLFxuICAgICAgZHJhZ2dhYmxlcyA9IF9yZWYuZHJhZ2dhYmxlcyxcbiAgICAgIHZpZXdwb3J0ID0gX3JlZi52aWV3cG9ydDtcbiAgdmFyIGRpc3BsYWNlZEJ5ID0gZ2V0RGlzcGxhY2VkQnkoaG9tZS5heGlzLCBkcmFnZ2FibGUuZGlzcGxhY2VCeSk7XG4gIHZhciBpbnNpZGVIb21lID0gZ2V0RHJhZ2dhYmxlc0luc2lkZURyb3BwYWJsZShob21lLmRlc2NyaXB0b3IuaWQsIGRyYWdnYWJsZXMpO1xuICB2YXIgb3JpZ2luYWxseURpc3BsYWNlZCA9IGluc2lkZUhvbWUuc2xpY2UoZHJhZ2dhYmxlLmRlc2NyaXB0b3IuaW5kZXggKyAxKTtcbiAgdmFyIHdhc0Rpc3BsYWNlZCA9IG9yaWdpbmFsbHlEaXNwbGFjZWQucmVkdWNlKGZ1bmN0aW9uIChwcmV2aW91cywgaXRlbSkge1xuICAgIHByZXZpb3VzW2l0ZW0uZGVzY3JpcHRvci5pZF0gPSB0cnVlO1xuICAgIHJldHVybiBwcmV2aW91cztcbiAgfSwge30pO1xuICB2YXIgb25MaWZ0ID0ge1xuICAgIGRpc3BsYWNlZEJ5OiBkaXNwbGFjZWRCeSxcbiAgICB3YXNEaXNwbGFjZWQ6IHdhc0Rpc3BsYWNlZFxuICB9O1xuICB2YXIgZGlzcGxhY2VkID0gb3JpZ2luYWxseURpc3BsYWNlZC5tYXAoZnVuY3Rpb24gKGRpbWVuc2lvbikge1xuICAgIHJldHVybiBnZXREaXNwbGFjZW1lbnQoe1xuICAgICAgZHJhZ2dhYmxlOiBkaW1lbnNpb24sXG4gICAgICBkZXN0aW5hdGlvbjogaG9tZSxcbiAgICAgIHByZXZpb3VzSW1wYWN0OiBub0ltcGFjdCxcbiAgICAgIHZpZXdwb3J0OiB2aWV3cG9ydC5mcmFtZSxcbiAgICAgIGZvcmNlU2hvdWxkQW5pbWF0ZTogZmFsc2UsXG4gICAgICBvbkxpZnQ6IG9uTGlmdFxuICAgIH0pO1xuICB9KTtcbiAgdmFyIG1vdmVtZW50ID0ge1xuICAgIGRpc3BsYWNlZDogZGlzcGxhY2VkLFxuICAgIG1hcDogZ2V0RGlzcGxhY2VtZW50TWFwKGRpc3BsYWNlZCksXG4gICAgZGlzcGxhY2VkQnk6IGRpc3BsYWNlZEJ5XG4gIH07XG4gIHZhciBpbXBhY3QgPSB7XG4gICAgbW92ZW1lbnQ6IG1vdmVtZW50LFxuICAgIGRlc3RpbmF0aW9uOiBnZXRIb21lTG9jYXRpb24oZHJhZ2dhYmxlLmRlc2NyaXB0b3IpLFxuICAgIG1lcmdlOiBudWxsXG4gIH07XG4gIHJldHVybiB7XG4gICAgaW1wYWN0OiBpbXBhY3QsXG4gICAgb25MaWZ0OiBvbkxpZnRcbiAgfTtcbn0pO1xuXG52YXIgZ2V0RHJhZ1Bvc2l0aW9ucyA9IChmdW5jdGlvbiAoX3JlZikge1xuICB2YXIgb2xkSW5pdGlhbCA9IF9yZWYuaW5pdGlhbCxcbiAgICAgIG9sZEN1cnJlbnQgPSBfcmVmLmN1cnJlbnQsXG4gICAgICBvbGRDbGllbnRCb3JkZXJCb3hDZW50ZXIgPSBfcmVmLm9sZENsaWVudEJvcmRlckJveENlbnRlcixcbiAgICAgIG5ld0NsaWVudEJvcmRlckJveENlbnRlciA9IF9yZWYubmV3Q2xpZW50Qm9yZGVyQm94Q2VudGVyLFxuICAgICAgdmlld3BvcnQgPSBfcmVmLnZpZXdwb3J0O1xuICB2YXIgc2hpZnQgPSBzdWJ0cmFjdChuZXdDbGllbnRCb3JkZXJCb3hDZW50ZXIsIG9sZENsaWVudEJvcmRlckJveENlbnRlcik7XG5cbiAgdmFyIGluaXRpYWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGNsaWVudCA9IHtcbiAgICAgIHNlbGVjdGlvbjogYWRkKG9sZEluaXRpYWwuY2xpZW50LnNlbGVjdGlvbiwgc2hpZnQpLFxuICAgICAgYm9yZGVyQm94Q2VudGVyOiBuZXdDbGllbnRCb3JkZXJCb3hDZW50ZXIsXG4gICAgICBvZmZzZXQ6IG9yaWdpblxuICAgIH07XG4gICAgdmFyIHBhZ2UgPSB7XG4gICAgICBzZWxlY3Rpb246IGFkZChjbGllbnQuc2VsZWN0aW9uLCB2aWV3cG9ydC5zY3JvbGwuaW5pdGlhbCksXG4gICAgICBib3JkZXJCb3hDZW50ZXI6IGFkZChjbGllbnQuc2VsZWN0aW9uLCB2aWV3cG9ydC5zY3JvbGwuaW5pdGlhbClcbiAgICB9O1xuICAgIHJldHVybiB7XG4gICAgICBjbGllbnQ6IGNsaWVudCxcbiAgICAgIHBhZ2U6IHBhZ2VcbiAgICB9O1xuICB9KCk7XG5cbiAgdmFyIGN1cnJlbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHJldmVyc2UgPSBuZWdhdGUoc2hpZnQpO1xuICAgIHZhciBvZmZzZXQgPSBhZGQob2xkQ3VycmVudC5jbGllbnQub2Zmc2V0LCByZXZlcnNlKTtcbiAgICB2YXIgY2xpZW50ID0ge1xuICAgICAgc2VsZWN0aW9uOiBhZGQoaW5pdGlhbC5jbGllbnQuc2VsZWN0aW9uLCBvZmZzZXQpLFxuICAgICAgYm9yZGVyQm94Q2VudGVyOiBhZGQoaW5pdGlhbC5jbGllbnQuYm9yZGVyQm94Q2VudGVyLCBvZmZzZXQpLFxuICAgICAgb2Zmc2V0OiBvZmZzZXRcbiAgICB9O1xuICAgIHZhciBwYWdlID0ge1xuICAgICAgc2VsZWN0aW9uOiBhZGQoY2xpZW50LnNlbGVjdGlvbiwgdmlld3BvcnQuc2Nyb2xsLmN1cnJlbnQpLFxuICAgICAgYm9yZGVyQm94Q2VudGVyOiBhZGQoY2xpZW50LmJvcmRlckJveENlbnRlciwgdmlld3BvcnQuc2Nyb2xsLmN1cnJlbnQpXG4gICAgfTtcbiAgICAhaXNFcXVhbChvbGRDdXJyZW50LmNsaWVudC5ib3JkZXJCb3hDZW50ZXIsIGNsaWVudC5ib3JkZXJCb3hDZW50ZXIpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIlxcbiAgICAgICAgSW5jb3JyZWN0IG5ldyBjbGllbnQgY2VudGVyIHBvc2l0aW9uLlxcbiAgICAgICAgRXhwZWN0ZWQgKFwiICsgb2xkQ3VycmVudC5jbGllbnQuYm9yZGVyQm94Q2VudGVyLnggKyBcIiwgXCIgKyBvbGRDdXJyZW50LmNsaWVudC5ib3JkZXJCb3hDZW50ZXIueSArIFwiKVxcbiAgICAgICAgdG8gZXF1YWwgKFwiICsgY2xpZW50LmJvcmRlckJveENlbnRlci54ICsgXCIsIFwiICsgY2xpZW50LmJvcmRlckJveENlbnRlci55ICsgXCIpXFxuICAgICAgXCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICByZXR1cm4ge1xuICAgICAgY2xpZW50OiBjbGllbnQsXG4gICAgICBwYWdlOiBwYWdlXG4gICAgfTtcbiAgfSgpO1xuXG4gIHJldHVybiB7XG4gICAgY3VycmVudDogY3VycmVudCxcbiAgICBpbml0aWFsOiBpbml0aWFsXG4gIH07XG59KTtcblxudmFyIG9mZnNldERyYWdnYWJsZSA9IChmdW5jdGlvbiAoX3JlZikge1xuICB2YXIgZHJhZ2dhYmxlID0gX3JlZi5kcmFnZ2FibGUsXG4gICAgICBvZmZzZXQkMSA9IF9yZWYub2Zmc2V0LFxuICAgICAgaW5pdGlhbFdpbmRvd1Njcm9sbCA9IF9yZWYuaW5pdGlhbFdpbmRvd1Njcm9sbDtcbiAgdmFyIGNsaWVudCA9IG9mZnNldChkcmFnZ2FibGUuY2xpZW50LCBvZmZzZXQkMSk7XG4gIHZhciBwYWdlID0gd2l0aFNjcm9sbChjbGllbnQsIGluaXRpYWxXaW5kb3dTY3JvbGwpO1xuXG4gIHZhciBtb3ZlZCA9IF9leHRlbmRzKHt9LCBkcmFnZ2FibGUsIHtcbiAgICBwbGFjZWhvbGRlcjogX2V4dGVuZHMoe30sIGRyYWdnYWJsZS5wbGFjZWhvbGRlciwge1xuICAgICAgY2xpZW50OiBjbGllbnRcbiAgICB9KSxcbiAgICBjbGllbnQ6IGNsaWVudCxcbiAgICBwYWdlOiBwYWdlXG4gIH0pO1xuXG4gIHJldHVybiBtb3ZlZDtcbn0pO1xuXG52YXIgYWRqdXN0RXhpc3RpbmdGb3JBZGRpdGlvbnNBbmRSZW1vdmFscyA9IChmdW5jdGlvbiAoX3JlZikge1xuICB2YXIgZXhpc3RpbmcgPSBfcmVmLmV4aXN0aW5nLFxuICAgICAgZHJvcHBhYmxlcyA9IF9yZWYuZHJvcHBhYmxlcyxcbiAgICAgIGFkZGVkRHJhZ2dhYmxlcyA9IF9yZWYuYWRkaXRpb25zLFxuICAgICAgcmVtb3ZlZERyYWdnYWJsZXMgPSBfcmVmLnJlbW92YWxzLFxuICAgICAgdmlld3BvcnQgPSBfcmVmLnZpZXdwb3J0O1xuICB2YXIgc2hpZnRlZCA9IHt9O1xuICB0b0Ryb3BwYWJsZUxpc3QoZHJvcHBhYmxlcykuZm9yRWFjaChmdW5jdGlvbiAoZHJvcHBhYmxlKSB7XG4gICAgdmFyIGF4aXMgPSBkcm9wcGFibGUuYXhpcztcbiAgICB2YXIgb3JpZ2luYWwgPSBnZXREcmFnZ2FibGVzSW5zaWRlRHJvcHBhYmxlKGRyb3BwYWJsZS5kZXNjcmlwdG9yLmlkLCBleGlzdGluZyk7XG4gICAgdmFyIHRvU2hpZnQgPSB7fTtcblxuICAgIHZhciBhZGRTaGlmdCA9IGZ1bmN0aW9uIGFkZFNoaWZ0KGlkLCBzaGlmdCkge1xuICAgICAgdmFyIHByZXZpb3VzID0gdG9TaGlmdFtpZF07XG5cbiAgICAgIGlmICghcHJldmlvdXMpIHtcbiAgICAgICAgdG9TaGlmdFtpZF0gPSBzaGlmdDtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB0b1NoaWZ0W2lkXSA9IHtcbiAgICAgICAgaW5kZXhDaGFuZ2U6IHByZXZpb3VzLmluZGV4Q2hhbmdlICsgc2hpZnQuaW5kZXhDaGFuZ2UsXG4gICAgICAgIG9mZnNldDogYWRkKHByZXZpb3VzLm9mZnNldCwgc2hpZnQub2Zmc2V0KVxuICAgICAgfTtcbiAgICB9O1xuXG4gICAgdmFyIHJlbW92YWxzID0gdG9EcmFnZ2FibGVNYXAocmVtb3ZlZERyYWdnYWJsZXMubWFwKGZ1bmN0aW9uIChpZCkge1xuICAgICAgdmFyIGl0ZW0gPSBleGlzdGluZ1tpZF07XG4gICAgICAhaXRlbSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJDb3VsZCBub3QgZmluZCByZW1vdmVkIGRyYWdnYWJsZSBcXFwiXCIgKyBpZCArIFwiXFxcIlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICByZXR1cm4gaXRlbTtcbiAgICB9KS5maWx0ZXIoZnVuY3Rpb24gKGRyYWdnYWJsZSkge1xuICAgICAgcmV0dXJuIGRyYWdnYWJsZS5kZXNjcmlwdG9yLmRyb3BwYWJsZUlkID09PSBkcm9wcGFibGUuZGVzY3JpcHRvci5pZDtcbiAgICB9KSk7XG4gICAgdmFyIHdpdGhSZW1vdmFscyA9IG9yaWdpbmFsLmZpbHRlcihmdW5jdGlvbiAoaXRlbSwgaW5kZXgpIHtcbiAgICAgIHZhciBpc0JlaW5nUmVtb3ZlZCA9IEJvb2xlYW4ocmVtb3ZhbHNbaXRlbS5kZXNjcmlwdG9yLmlkXSk7XG5cbiAgICAgIGlmICghaXNCZWluZ1JlbW92ZWQpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG5cbiAgICAgIHZhciBvZmZzZXQgPSBuZWdhdGUocGF0Y2goYXhpcy5saW5lLCBpdGVtLmRpc3BsYWNlQnlbYXhpcy5saW5lXSkpO1xuICAgICAgb3JpZ2luYWwuc2xpY2UoaW5kZXgpLmZvckVhY2goZnVuY3Rpb24gKHNpYmxpbmcpIHtcbiAgICAgICAgaWYgKHJlbW92YWxzW3NpYmxpbmcuZGVzY3JpcHRvci5pZF0pIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBhZGRTaGlmdChzaWJsaW5nLmRlc2NyaXB0b3IuaWQsIHtcbiAgICAgICAgICBpbmRleENoYW5nZTogLTEsXG4gICAgICAgICAgb2Zmc2V0OiBvZmZzZXRcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9KTtcbiAgICB2YXIgYWRkaXRpb25zID0gYWRkZWREcmFnZ2FibGVzLmZpbHRlcihmdW5jdGlvbiAoZHJhZ2dhYmxlKSB7XG4gICAgICByZXR1cm4gZHJhZ2dhYmxlLmRlc2NyaXB0b3IuZHJvcHBhYmxlSWQgPT09IGRyb3BwYWJsZS5kZXNjcmlwdG9yLmlkO1xuICAgIH0pO1xuICAgIHZhciB3aXRoQWRkaXRpb25zID0gd2l0aFJlbW92YWxzLnNsaWNlKDApO1xuICAgIGFkZGl0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICB3aXRoQWRkaXRpb25zLnNwbGljZShpdGVtLmRlc2NyaXB0b3IuaW5kZXgsIDAsIGl0ZW0pO1xuICAgIH0pO1xuICAgIHZhciBhZGRpdGlvbk1hcCA9IHRvRHJhZ2dhYmxlTWFwKGFkZGl0aW9ucyk7XG4gICAgd2l0aEFkZGl0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtLCBpbmRleCkge1xuICAgICAgdmFyIHdhc0FkZGVkID0gQm9vbGVhbihhZGRpdGlvbk1hcFtpdGVtLmRlc2NyaXB0b3IuaWRdKTtcblxuICAgICAgaWYgKCF3YXNBZGRlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBvZmZzZXQgPSBwYXRjaChheGlzLmxpbmUsIGl0ZW0uY2xpZW50Lm1hcmdpbkJveFtheGlzLnNpemVdKTtcbiAgICAgIHdpdGhBZGRpdGlvbnMuc2xpY2UoaW5kZXgpLmZvckVhY2goZnVuY3Rpb24gKHNpYmxpbmcpIHtcbiAgICAgICAgaWYgKGFkZGl0aW9uTWFwW3NpYmxpbmcuZGVzY3JpcHRvci5pZF0pIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBhZGRTaGlmdChzaWJsaW5nLmRlc2NyaXB0b3IuaWQsIHtcbiAgICAgICAgICBpbmRleENoYW5nZTogMSxcbiAgICAgICAgICBvZmZzZXQ6IG9mZnNldFxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIHdpdGhBZGRpdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgaWYgKGFkZGl0aW9uTWFwW2l0ZW0uZGVzY3JpcHRvci5pZF0pIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgc2hpZnQgPSB0b1NoaWZ0W2l0ZW0uZGVzY3JpcHRvci5pZF07XG5cbiAgICAgIGlmICghc2hpZnQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgbW92ZWQgPSBvZmZzZXREcmFnZ2FibGUoe1xuICAgICAgICBkcmFnZ2FibGU6IGl0ZW0sXG4gICAgICAgIG9mZnNldDogc2hpZnQub2Zmc2V0LFxuICAgICAgICBpbml0aWFsV2luZG93U2Nyb2xsOiB2aWV3cG9ydC5zY3JvbGwuaW5pdGlhbFxuICAgICAgfSk7XG4gICAgICB2YXIgaW5kZXggPSBpdGVtLmRlc2NyaXB0b3IuaW5kZXggKyBzaGlmdC5pbmRleENoYW5nZTtcblxuICAgICAgdmFyIHVwZGF0ZWQgPSBfZXh0ZW5kcyh7fSwgbW92ZWQsIHtcbiAgICAgICAgZGVzY3JpcHRvcjogX2V4dGVuZHMoe30sIGl0ZW0uZGVzY3JpcHRvciwge1xuICAgICAgICAgIGluZGV4OiBpbmRleFxuICAgICAgICB9KVxuICAgICAgfSk7XG5cbiAgICAgIHNoaWZ0ZWRbbW92ZWQuZGVzY3JpcHRvci5pZF0gPSB1cGRhdGVkO1xuICAgIH0pO1xuICB9KTtcblxuICB2YXIgbWFwID0gX2V4dGVuZHMoe30sIGV4aXN0aW5nLCBzaGlmdGVkKTtcblxuICByZXR1cm4gbWFwO1xufSk7XG5cbnZhciBhZGp1c3RBZGRpdGlvbnNGb3JTY3JvbGxDaGFuZ2VzID0gKGZ1bmN0aW9uIChfcmVmKSB7XG4gIHZhciBhZGRpdGlvbnMgPSBfcmVmLmFkZGl0aW9ucyxcbiAgICAgIHVwZGF0ZWREcm9wcGFibGVzID0gX3JlZi51cGRhdGVkRHJvcHBhYmxlcyxcbiAgICAgIHZpZXdwb3J0ID0gX3JlZi52aWV3cG9ydDtcbiAgdmFyIHdpbmRvd1Njcm9sbENoYW5nZSA9IHZpZXdwb3J0LnNjcm9sbC5kaWZmLnZhbHVlO1xuICByZXR1cm4gYWRkaXRpb25zLm1hcChmdW5jdGlvbiAoZHJhZ2dhYmxlKSB7XG4gICAgdmFyIGRyb3BwYWJsZUlkID0gZHJhZ2dhYmxlLmRlc2NyaXB0b3IuZHJvcHBhYmxlSWQ7XG4gICAgdmFyIG1vZGlmaWVkID0gdXBkYXRlZERyb3BwYWJsZXNbZHJvcHBhYmxlSWRdO1xuICAgIHZhciBmcmFtZSA9IG1vZGlmaWVkLmZyYW1lO1xuICAgICFmcmFtZSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHZhciBkcm9wcGFibGVTY3JvbGxDaGFuZ2UgPSBmcmFtZS5zY3JvbGwuZGlmZi52YWx1ZTtcbiAgICB2YXIgdG90YWxDaGFuZ2UgPSBhZGQod2luZG93U2Nyb2xsQ2hhbmdlLCBkcm9wcGFibGVTY3JvbGxDaGFuZ2UpO1xuICAgIHZhciBtb3ZlZCA9IG9mZnNldERyYWdnYWJsZSh7XG4gICAgICBkcmFnZ2FibGU6IGRyYWdnYWJsZSxcbiAgICAgIG9mZnNldDogdG90YWxDaGFuZ2UsXG4gICAgICBpbml0aWFsV2luZG93U2Nyb2xsOiB2aWV3cG9ydC5zY3JvbGwuaW5pdGlhbFxuICAgIH0pO1xuICAgIHJldHVybiBtb3ZlZDtcbiAgfSk7XG59KTtcblxudmFyIGFkanVzdEFkZGl0aW9uc0ZvckNvbGxhcHNlZEhvbWUgPSAoZnVuY3Rpb24gKF9yZWYpIHtcbiAgdmFyIGFkZGl0aW9ucyA9IF9yZWYuYWRkaXRpb25zLFxuICAgICAgZHJhZ2dpbmcgPSBfcmVmLmRyYWdnaW5nLFxuICAgICAgaG9tZSA9IF9yZWYuaG9tZSxcbiAgICAgIHZpZXdwb3J0ID0gX3JlZi52aWV3cG9ydDtcbiAgdmFyIGRpc3BsYWNlZEJ5ID0gZ2V0RGlzcGxhY2VkQnkoaG9tZS5heGlzLCBkcmFnZ2luZy5kaXNwbGFjZUJ5KTtcbiAgcmV0dXJuIGFkZGl0aW9ucy5tYXAoZnVuY3Rpb24gKGRyYWdnYWJsZSkge1xuICAgIGlmIChkcmFnZ2FibGUuZGVzY3JpcHRvci5kcm9wcGFibGVJZCAhPT0gaG9tZS5kZXNjcmlwdG9yLmlkKSB7XG4gICAgICByZXR1cm4gZHJhZ2dhYmxlO1xuICAgIH1cblxuICAgIGlmIChkcmFnZ2FibGUuZGVzY3JpcHRvci5pbmRleCA8IGRyYWdnaW5nLmRlc2NyaXB0b3IuaW5kZXgpIHtcbiAgICAgIHJldHVybiBkcmFnZ2FibGU7XG4gICAgfVxuXG4gICAgcmV0dXJuIG9mZnNldERyYWdnYWJsZSh7XG4gICAgICBkcmFnZ2FibGU6IGRyYWdnYWJsZSxcbiAgICAgIG9mZnNldDogZGlzcGxhY2VkQnkucG9pbnQsXG4gICAgICBpbml0aWFsV2luZG93U2Nyb2xsOiB2aWV3cG9ydC5zY3JvbGwuaW5pdGlhbFxuICAgIH0pO1xuICB9KTtcbn0pO1xuXG52YXIgdXBkYXRlRHJhZ2dhYmxlcyA9IChmdW5jdGlvbiAoX3JlZikge1xuICB2YXIgdXBkYXRlZERyb3BwYWJsZXMgPSBfcmVmLnVwZGF0ZWREcm9wcGFibGVzLFxuICAgICAgY3JpdGljYWxJZCA9IF9yZWYuY3JpdGljYWxJZCxcbiAgICAgIHVubW9kaWZpZWRFeGlzdGluZyA9IF9yZWYuZXhpc3RpbmcsXG4gICAgICB1bm1vZGlmaWVkQWRkaXRpb25zID0gX3JlZi5hZGRpdGlvbnMsXG4gICAgICByZW1vdmFscyA9IF9yZWYucmVtb3ZhbHMsXG4gICAgICB2aWV3cG9ydCA9IF9yZWYudmlld3BvcnQ7XG4gIHZhciBleGlzdGluZyA9IGFkanVzdEV4aXN0aW5nRm9yQWRkaXRpb25zQW5kUmVtb3ZhbHMoe1xuICAgIGRyb3BwYWJsZXM6IHVwZGF0ZWREcm9wcGFibGVzLFxuICAgIGV4aXN0aW5nOiB1bm1vZGlmaWVkRXhpc3RpbmcsXG4gICAgYWRkaXRpb25zOiB1bm1vZGlmaWVkQWRkaXRpb25zLFxuICAgIHJlbW92YWxzOiByZW1vdmFscyxcbiAgICB2aWV3cG9ydDogdmlld3BvcnRcbiAgfSk7XG4gIHZhciBkcmFnZ2luZyA9IGV4aXN0aW5nW2NyaXRpY2FsSWRdO1xuICB2YXIgaG9tZSA9IHVwZGF0ZWREcm9wcGFibGVzW2RyYWdnaW5nLmRlc2NyaXB0b3IuZHJvcHBhYmxlSWRdO1xuICB2YXIgc2Nyb2xsZWRBZGRpdGlvbnMgPSBhZGp1c3RBZGRpdGlvbnNGb3JTY3JvbGxDaGFuZ2VzKHtcbiAgICBhZGRpdGlvbnM6IHVubW9kaWZpZWRBZGRpdGlvbnMsXG4gICAgdXBkYXRlZERyb3BwYWJsZXM6IHVwZGF0ZWREcm9wcGFibGVzLFxuICAgIHZpZXdwb3J0OiB2aWV3cG9ydFxuICB9KTtcbiAgdmFyIGFkZGl0aW9ucyA9IGFkanVzdEFkZGl0aW9uc0ZvckNvbGxhcHNlZEhvbWUoe1xuICAgIGFkZGl0aW9uczogc2Nyb2xsZWRBZGRpdGlvbnMsXG4gICAgZHJhZ2dpbmc6IGRyYWdnaW5nLFxuICAgIGhvbWU6IGhvbWUsXG4gICAgdmlld3BvcnQ6IHZpZXdwb3J0XG4gIH0pO1xuXG4gIHZhciBtYXAgPSBfZXh0ZW5kcyh7fSwgZXhpc3RpbmcsIHRvRHJhZ2dhYmxlTWFwKGFkZGl0aW9ucykpO1xuXG4gIHJlbW92YWxzLmZvckVhY2goZnVuY3Rpb24gKGlkKSB7XG4gICAgZGVsZXRlIG1hcFtpZF07XG4gIH0pO1xuICByZXR1cm4gbWFwO1xufSk7XG5cbnZhciBnZXRNYXhTY3JvbGwgPSAoZnVuY3Rpb24gKF9yZWYpIHtcbiAgdmFyIHNjcm9sbEhlaWdodCA9IF9yZWYuc2Nyb2xsSGVpZ2h0LFxuICAgICAgc2Nyb2xsV2lkdGggPSBfcmVmLnNjcm9sbFdpZHRoLFxuICAgICAgaGVpZ2h0ID0gX3JlZi5oZWlnaHQsXG4gICAgICB3aWR0aCA9IF9yZWYud2lkdGg7XG4gIHZhciBtYXhTY3JvbGwgPSBzdWJ0cmFjdCh7XG4gICAgeDogc2Nyb2xsV2lkdGgsXG4gICAgeTogc2Nyb2xsSGVpZ2h0XG4gIH0sIHtcbiAgICB4OiB3aWR0aCxcbiAgICB5OiBoZWlnaHRcbiAgfSk7XG4gIHZhciBhZGp1c3RlZE1heFNjcm9sbCA9IHtcbiAgICB4OiBNYXRoLm1heCgwLCBtYXhTY3JvbGwueCksXG4gICAgeTogTWF0aC5tYXgoMCwgbWF4U2Nyb2xsLnkpXG4gIH07XG4gIHJldHVybiBhZGp1c3RlZE1heFNjcm9sbDtcbn0pO1xuXG52YXIgZ2V0RHJvcHBhYmxlRGltZW5zaW9uID0gKGZ1bmN0aW9uIChfcmVmKSB7XG4gIHZhciBkZXNjcmlwdG9yID0gX3JlZi5kZXNjcmlwdG9yLFxuICAgICAgaXNFbmFibGVkID0gX3JlZi5pc0VuYWJsZWQsXG4gICAgICBpc0NvbWJpbmVFbmFibGVkID0gX3JlZi5pc0NvbWJpbmVFbmFibGVkLFxuICAgICAgaXNGaXhlZE9uUGFnZSA9IF9yZWYuaXNGaXhlZE9uUGFnZSxcbiAgICAgIGRpcmVjdGlvbiA9IF9yZWYuZGlyZWN0aW9uLFxuICAgICAgY2xpZW50ID0gX3JlZi5jbGllbnQsXG4gICAgICBwYWdlID0gX3JlZi5wYWdlLFxuICAgICAgY2xvc2VzdCA9IF9yZWYuY2xvc2VzdDtcblxuICB2YXIgZnJhbWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFjbG9zZXN0KSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICB2YXIgc2Nyb2xsU2l6ZSA9IGNsb3Nlc3Quc2Nyb2xsU2l6ZSxcbiAgICAgICAgZnJhbWVDbGllbnQgPSBjbG9zZXN0LmNsaWVudDtcbiAgICB2YXIgbWF4U2Nyb2xsID0gZ2V0TWF4U2Nyb2xsKHtcbiAgICAgIHNjcm9sbEhlaWdodDogc2Nyb2xsU2l6ZS5zY3JvbGxIZWlnaHQsXG4gICAgICBzY3JvbGxXaWR0aDogc2Nyb2xsU2l6ZS5zY3JvbGxXaWR0aCxcbiAgICAgIGhlaWdodDogZnJhbWVDbGllbnQucGFkZGluZ0JveC5oZWlnaHQsXG4gICAgICB3aWR0aDogZnJhbWVDbGllbnQucGFkZGluZ0JveC53aWR0aFxuICAgIH0pO1xuICAgIHJldHVybiB7XG4gICAgICBwYWdlTWFyZ2luQm94OiBjbG9zZXN0LnBhZ2UubWFyZ2luQm94LFxuICAgICAgZnJhbWVDbGllbnQ6IGZyYW1lQ2xpZW50LFxuICAgICAgc2Nyb2xsU2l6ZTogc2Nyb2xsU2l6ZSxcbiAgICAgIHNob3VsZENsaXBTdWJqZWN0OiBjbG9zZXN0LnNob3VsZENsaXBTdWJqZWN0LFxuICAgICAgc2Nyb2xsOiB7XG4gICAgICAgIGluaXRpYWw6IGNsb3Nlc3Quc2Nyb2xsLFxuICAgICAgICBjdXJyZW50OiBjbG9zZXN0LnNjcm9sbCxcbiAgICAgICAgbWF4OiBtYXhTY3JvbGwsXG4gICAgICAgIGRpZmY6IHtcbiAgICAgICAgICB2YWx1ZTogb3JpZ2luLFxuICAgICAgICAgIGRpc3BsYWNlbWVudDogb3JpZ2luXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9KCk7XG5cbiAgdmFyIGF4aXMgPSBkaXJlY3Rpb24gPT09ICd2ZXJ0aWNhbCcgPyB2ZXJ0aWNhbCA6IGhvcml6b250YWw7XG4gIHZhciBzdWJqZWN0ID0gZ2V0U3ViamVjdCh7XG4gICAgcGFnZTogcGFnZSxcbiAgICB3aXRoUGxhY2Vob2xkZXI6IG51bGwsXG4gICAgYXhpczogYXhpcyxcbiAgICBmcmFtZTogZnJhbWVcbiAgfSk7XG4gIHZhciBkaW1lbnNpb24gPSB7XG4gICAgZGVzY3JpcHRvcjogZGVzY3JpcHRvcixcbiAgICBpc0NvbWJpbmVFbmFibGVkOiBpc0NvbWJpbmVFbmFibGVkLFxuICAgIGlzRml4ZWRPblBhZ2U6IGlzRml4ZWRPblBhZ2UsXG4gICAgYXhpczogYXhpcyxcbiAgICBpc0VuYWJsZWQ6IGlzRW5hYmxlZCxcbiAgICBjbGllbnQ6IGNsaWVudCxcbiAgICBwYWdlOiBwYWdlLFxuICAgIGZyYW1lOiBmcmFtZSxcbiAgICBzdWJqZWN0OiBzdWJqZWN0XG4gIH07XG4gIHJldHVybiBkaW1lbnNpb247XG59KTtcblxudmFyIGlzSG9tZU9mID0gKGZ1bmN0aW9uIChkcmFnZ2FibGUsIGRlc3RpbmF0aW9uKSB7XG4gIHJldHVybiBkcmFnZ2FibGUuZGVzY3JpcHRvci5kcm9wcGFibGVJZCA9PT0gZGVzdGluYXRpb24uZGVzY3JpcHRvci5pZDtcbn0pO1xuXG52YXIgZ2V0UmVxdWlyZWRHcm93dGhGb3JQbGFjZWhvbGRlciA9IGZ1bmN0aW9uIGdldFJlcXVpcmVkR3Jvd3RoRm9yUGxhY2Vob2xkZXIoZHJvcHBhYmxlLCBwbGFjZWhvbGRlclNpemUsIGRyYWdnYWJsZXMpIHtcbiAgdmFyIGF4aXMgPSBkcm9wcGFibGUuYXhpcztcbiAgdmFyIGF2YWlsYWJsZVNwYWNlID0gZHJvcHBhYmxlLnN1YmplY3QucGFnZS5jb250ZW50Qm94W2F4aXMuc2l6ZV07XG4gIHZhciBpbnNpZGVEcm9wcGFibGUgPSBnZXREcmFnZ2FibGVzSW5zaWRlRHJvcHBhYmxlKGRyb3BwYWJsZS5kZXNjcmlwdG9yLmlkLCBkcmFnZ2FibGVzKTtcbiAgdmFyIHNwYWNlVXNlZCA9IGluc2lkZURyb3BwYWJsZS5yZWR1Y2UoZnVuY3Rpb24gKHN1bSwgZGltZW5zaW9uKSB7XG4gICAgcmV0dXJuIHN1bSArIGRpbWVuc2lvbi5jbGllbnQubWFyZ2luQm94W2F4aXMuc2l6ZV07XG4gIH0sIDApO1xuICB2YXIgcmVxdWlyZWRTcGFjZSA9IHNwYWNlVXNlZCArIHBsYWNlaG9sZGVyU2l6ZVtheGlzLmxpbmVdO1xuICB2YXIgbmVlZHNUb0dyb3dCeSA9IHJlcXVpcmVkU3BhY2UgLSBhdmFpbGFibGVTcGFjZTtcblxuICBpZiAobmVlZHNUb0dyb3dCeSA8PSAwKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZXR1cm4gcGF0Y2goYXhpcy5saW5lLCBuZWVkc1RvR3Jvd0J5KTtcbn07XG5cbnZhciB3aXRoTWF4U2Nyb2xsID0gZnVuY3Rpb24gd2l0aE1heFNjcm9sbChmcmFtZSwgbWF4KSB7XG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgZnJhbWUsIHtcbiAgICBzY3JvbGw6IF9leHRlbmRzKHt9LCBmcmFtZS5zY3JvbGwsIHtcbiAgICAgIG1heDogbWF4XG4gICAgfSlcbiAgfSk7XG59O1xuXG52YXIgYWRkUGxhY2Vob2xkZXIgPSBmdW5jdGlvbiBhZGRQbGFjZWhvbGRlcihkcm9wcGFibGUsIGRyYWdnYWJsZSwgZHJhZ2dhYmxlcykge1xuICB2YXIgZnJhbWUgPSBkcm9wcGFibGUuZnJhbWU7XG4gICEhaXNIb21lT2YoZHJhZ2dhYmxlLCBkcm9wcGFibGUpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnU2hvdWxkIG5vdCBhZGQgcGxhY2Vob2xkZXIgc3BhY2UgdG8gaG9tZSBsaXN0JykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAhIWRyb3BwYWJsZS5zdWJqZWN0LndpdGhQbGFjZWhvbGRlciA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0Nhbm5vdCBhZGQgcGxhY2Vob2xkZXIgc2l6ZSB0byBhIHN1YmplY3Qgd2hlbiBpdCBhbHJlYWR5IGhhcyBvbmUnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHZhciBwbGFjZWhvbGRlclNpemUgPSBnZXREaXNwbGFjZWRCeShkcm9wcGFibGUuYXhpcywgZHJhZ2dhYmxlLmRpc3BsYWNlQnkpLnBvaW50O1xuICB2YXIgcmVxdWlyZWRHcm93dGggPSBnZXRSZXF1aXJlZEdyb3d0aEZvclBsYWNlaG9sZGVyKGRyb3BwYWJsZSwgcGxhY2Vob2xkZXJTaXplLCBkcmFnZ2FibGVzKTtcbiAgdmFyIGFkZGVkID0ge1xuICAgIHBsYWNlaG9sZGVyU2l6ZTogcGxhY2Vob2xkZXJTaXplLFxuICAgIGluY3JlYXNlZEJ5OiByZXF1aXJlZEdyb3d0aCxcbiAgICBvbGRGcmFtZU1heFNjcm9sbDogZHJvcHBhYmxlLmZyYW1lID8gZHJvcHBhYmxlLmZyYW1lLnNjcm9sbC5tYXggOiBudWxsXG4gIH07XG5cbiAgaWYgKCFmcmFtZSkge1xuICAgIHZhciBfc3ViamVjdCA9IGdldFN1YmplY3Qoe1xuICAgICAgcGFnZTogZHJvcHBhYmxlLnN1YmplY3QucGFnZSxcbiAgICAgIHdpdGhQbGFjZWhvbGRlcjogYWRkZWQsXG4gICAgICBheGlzOiBkcm9wcGFibGUuYXhpcyxcbiAgICAgIGZyYW1lOiBkcm9wcGFibGUuZnJhbWVcbiAgICB9KTtcblxuICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgZHJvcHBhYmxlLCB7XG4gICAgICBzdWJqZWN0OiBfc3ViamVjdFxuICAgIH0pO1xuICB9XG5cbiAgdmFyIG1heFNjcm9sbCA9IHJlcXVpcmVkR3Jvd3RoID8gYWRkKGZyYW1lLnNjcm9sbC5tYXgsIHJlcXVpcmVkR3Jvd3RoKSA6IGZyYW1lLnNjcm9sbC5tYXg7XG4gIHZhciBuZXdGcmFtZSA9IHdpdGhNYXhTY3JvbGwoZnJhbWUsIG1heFNjcm9sbCk7XG4gIHZhciBzdWJqZWN0ID0gZ2V0U3ViamVjdCh7XG4gICAgcGFnZTogZHJvcHBhYmxlLnN1YmplY3QucGFnZSxcbiAgICB3aXRoUGxhY2Vob2xkZXI6IGFkZGVkLFxuICAgIGF4aXM6IGRyb3BwYWJsZS5heGlzLFxuICAgIGZyYW1lOiBuZXdGcmFtZVxuICB9KTtcbiAgcmV0dXJuIF9leHRlbmRzKHt9LCBkcm9wcGFibGUsIHtcbiAgICBzdWJqZWN0OiBzdWJqZWN0LFxuICAgIGZyYW1lOiBuZXdGcmFtZVxuICB9KTtcbn07XG52YXIgcmVtb3ZlUGxhY2Vob2xkZXIgPSBmdW5jdGlvbiByZW1vdmVQbGFjZWhvbGRlcihkcm9wcGFibGUpIHtcbiAgdmFyIGFkZGVkID0gZHJvcHBhYmxlLnN1YmplY3Qud2l0aFBsYWNlaG9sZGVyO1xuICAhYWRkZWQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdDYW5ub3QgcmVtb3ZlIHBsYWNlaG9sZGVyIGZvcm0gc3ViamVjdCB3aGVuIHRoZXJlIHdhcyBub25lJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICB2YXIgZnJhbWUgPSBkcm9wcGFibGUuZnJhbWU7XG5cbiAgaWYgKCFmcmFtZSkge1xuICAgIHZhciBfc3ViamVjdDIgPSBnZXRTdWJqZWN0KHtcbiAgICAgIHBhZ2U6IGRyb3BwYWJsZS5zdWJqZWN0LnBhZ2UsXG4gICAgICBheGlzOiBkcm9wcGFibGUuYXhpcyxcbiAgICAgIGZyYW1lOiBudWxsLFxuICAgICAgd2l0aFBsYWNlaG9sZGVyOiBudWxsXG4gICAgfSk7XG5cbiAgICByZXR1cm4gX2V4dGVuZHMoe30sIGRyb3BwYWJsZSwge1xuICAgICAgc3ViamVjdDogX3N1YmplY3QyXG4gICAgfSk7XG4gIH1cblxuICB2YXIgb2xkTWF4U2Nyb2xsID0gYWRkZWQub2xkRnJhbWVNYXhTY3JvbGw7XG4gICFvbGRNYXhTY3JvbGwgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdFeHBlY3RlZCBkcm9wcGFibGUgd2l0aCBmcmFtZSB0byBoYXZlIG9sZCBtYXggZnJhbWUgc2Nyb2xsIHdoZW4gcmVtb3ZpbmcgcGxhY2Vob2xkZXInKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHZhciBuZXdGcmFtZSA9IHdpdGhNYXhTY3JvbGwoZnJhbWUsIG9sZE1heFNjcm9sbCk7XG4gIHZhciBzdWJqZWN0ID0gZ2V0U3ViamVjdCh7XG4gICAgcGFnZTogZHJvcHBhYmxlLnN1YmplY3QucGFnZSxcbiAgICBheGlzOiBkcm9wcGFibGUuYXhpcyxcbiAgICBmcmFtZTogbmV3RnJhbWUsXG4gICAgd2l0aFBsYWNlaG9sZGVyOiBudWxsXG4gIH0pO1xuICByZXR1cm4gX2V4dGVuZHMoe30sIGRyb3BwYWJsZSwge1xuICAgIHN1YmplY3Q6IHN1YmplY3QsXG4gICAgZnJhbWU6IG5ld0ZyYW1lXG4gIH0pO1xufTtcblxudmFyIGdldEZyYW1lID0gKGZ1bmN0aW9uIChkcm9wcGFibGUpIHtcbiAgdmFyIGZyYW1lID0gZHJvcHBhYmxlLmZyYW1lO1xuICAhZnJhbWUgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdFeHBlY3RlZCBEcm9wcGFibGUgdG8gaGF2ZSBhIGZyYW1lJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICByZXR1cm4gZnJhbWU7XG59KTtcblxudmFyIHRocm93SWZTcGFjaW5nQ2hhbmdlID0gZnVuY3Rpb24gdGhyb3dJZlNwYWNpbmdDaGFuZ2Uob2xkLCBmcmVzaCkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHZhciBnZXRNZXNzYWdlID0gZnVuY3Rpb24gZ2V0TWVzc2FnZShzcGFjaW5nVHlwZSkge1xuICAgICAgcmV0dXJuIFwiQ2Fubm90IGNoYW5nZSB0aGUgXCIgKyBzcGFjaW5nVHlwZSArIFwiIG9mIGEgRHJvcHBhYmxlIGR1cmluZyBhIGRyYWdcIjtcbiAgICB9O1xuXG4gICAgIWlzRXF1YWwkMShvbGQubWFyZ2luLCBmcmVzaC5tYXJnaW4pID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBnZXRNZXNzYWdlKCdtYXJnaW4nKSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICFpc0VxdWFsJDEob2xkLmJvcmRlciwgZnJlc2guYm9yZGVyKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgZ2V0TWVzc2FnZSgnYm9yZGVyJykpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAhaXNFcXVhbCQxKG9sZC5wYWRkaW5nLCBmcmVzaC5wYWRkaW5nKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgZ2V0TWVzc2FnZSgncGFkZGluZycpKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIH1cbn07XG5cbnZhciBhZGp1c3RCb3JkZXJCb3hTaXplID0gZnVuY3Rpb24gYWRqdXN0Qm9yZGVyQm94U2l6ZShheGlzLCBvbGQsIGZyZXNoKSB7XG4gIHJldHVybiB7XG4gICAgdG9wOiBvbGQudG9wLFxuICAgIGxlZnQ6IG9sZC5sZWZ0LFxuICAgIHJpZ2h0OiBvbGQubGVmdCArIGZyZXNoLndpZHRoLFxuICAgIGJvdHRvbTogb2xkLnRvcCArIGZyZXNoLmhlaWdodFxuICB9O1xufTtcblxudmFyIHVwZGF0ZURyb3BwYWJsZXMgPSAoZnVuY3Rpb24gKF9yZWYpIHtcbiAgdmFyIG1vZGlmaWVkID0gX3JlZi5tb2RpZmllZCxcbiAgICAgIGV4aXN0aW5nID0gX3JlZi5leGlzdGluZyxcbiAgICAgIHZpZXdwb3J0ID0gX3JlZi52aWV3cG9ydDtcblxuICBpZiAoIW1vZGlmaWVkLmxlbmd0aCkge1xuICAgIHJldHVybiBleGlzdGluZztcbiAgfVxuXG4gIHZhciBhZGp1c3RlZCA9IG1vZGlmaWVkLm1hcChmdW5jdGlvbiAocHJvdmlkZWQpIHtcbiAgICB2YXIgcmF3ID0gZXhpc3RpbmdbcHJvdmlkZWQuZGVzY3JpcHRvci5pZF07XG4gICAgIXJhdyA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0NvdWxkIG5vdCBsb2NhdGUgZHJvcHBhYmxlIGluIGV4aXN0aW5nIGRyb3BwYWJsZXMnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgdmFyIGhhc1BsYWNlaG9sZGVyID0gQm9vbGVhbihyYXcuc3ViamVjdC53aXRoUGxhY2Vob2xkZXIpO1xuICAgIHZhciBkaW1lbnNpb24gPSBoYXNQbGFjZWhvbGRlciA/IHJlbW92ZVBsYWNlaG9sZGVyKHJhdykgOiByYXc7XG4gICAgdmFyIG9sZENsaWVudCA9IGRpbWVuc2lvbi5jbGllbnQ7XG4gICAgdmFyIG5ld0NsaWVudCA9IHByb3ZpZGVkLmNsaWVudDtcbiAgICB2YXIgb2xkU2Nyb2xsYWJsZSA9IGdldEZyYW1lKGRpbWVuc2lvbik7XG4gICAgdmFyIG5ld1Njcm9sbGFibGUgPSBnZXRGcmFtZShwcm92aWRlZCk7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdGhyb3dJZlNwYWNpbmdDaGFuZ2UoZGltZW5zaW9uLmNsaWVudCwgcHJvdmlkZWQuY2xpZW50KTtcbiAgICAgIHRocm93SWZTcGFjaW5nQ2hhbmdlKG9sZFNjcm9sbGFibGUuZnJhbWVDbGllbnQsIG5ld1Njcm9sbGFibGUuZnJhbWVDbGllbnQpO1xuICAgICAgdmFyIGlzRnJhbWVFcXVhbCA9IG9sZFNjcm9sbGFibGUuZnJhbWVDbGllbnQuYm9yZGVyQm94LmhlaWdodCA9PT0gbmV3U2Nyb2xsYWJsZS5mcmFtZUNsaWVudC5ib3JkZXJCb3guaGVpZ2h0ICYmIG9sZFNjcm9sbGFibGUuZnJhbWVDbGllbnQuYm9yZGVyQm94LndpZHRoID09PSBuZXdTY3JvbGxhYmxlLmZyYW1lQ2xpZW50LmJvcmRlckJveC53aWR0aDtcbiAgICAgICFpc0ZyYW1lRXF1YWwgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdUaGUgd2lkdGggYW5kIGhlaWdodCBvZiB5b3VyIERyb3BwYWJsZSBzY3JvbGwgY29udGFpbmVyIGNhbm5vdCBjaGFuZ2Ugd2hlbiBhZGRpbmcgb3IgcmVtb3ZpbmcgRHJhZ2dhYmxlcyBkdXJpbmcgYSBkcmFnJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIH1cblxuICAgIHZhciBjbGllbnQgPSBjcmVhdGVCb3goe1xuICAgICAgYm9yZGVyQm94OiBhZGp1c3RCb3JkZXJCb3hTaXplKGRpbWVuc2lvbi5heGlzLCBvbGRDbGllbnQuYm9yZGVyQm94LCBuZXdDbGllbnQuYm9yZGVyQm94KSxcbiAgICAgIG1hcmdpbjogb2xkQ2xpZW50Lm1hcmdpbixcbiAgICAgIGJvcmRlcjogb2xkQ2xpZW50LmJvcmRlcixcbiAgICAgIHBhZGRpbmc6IG9sZENsaWVudC5wYWRkaW5nXG4gICAgfSk7XG4gICAgdmFyIGNsb3Nlc3QgPSB7XG4gICAgICBjbGllbnQ6IG9sZFNjcm9sbGFibGUuZnJhbWVDbGllbnQsXG4gICAgICBwYWdlOiB3aXRoU2Nyb2xsKG9sZFNjcm9sbGFibGUuZnJhbWVDbGllbnQsIHZpZXdwb3J0LnNjcm9sbC5pbml0aWFsKSxcbiAgICAgIHNob3VsZENsaXBTdWJqZWN0OiBvbGRTY3JvbGxhYmxlLnNob3VsZENsaXBTdWJqZWN0LFxuICAgICAgc2Nyb2xsU2l6ZTogbmV3U2Nyb2xsYWJsZS5zY3JvbGxTaXplLFxuICAgICAgc2Nyb2xsOiBvbGRTY3JvbGxhYmxlLnNjcm9sbC5pbml0aWFsXG4gICAgfTtcbiAgICB2YXIgd2l0aFNpemVDaGFuZ2VkID0gZ2V0RHJvcHBhYmxlRGltZW5zaW9uKHtcbiAgICAgIGRlc2NyaXB0b3I6IHByb3ZpZGVkLmRlc2NyaXB0b3IsXG4gICAgICBpc0VuYWJsZWQ6IHByb3ZpZGVkLmlzRW5hYmxlZCxcbiAgICAgIGlzQ29tYmluZUVuYWJsZWQ6IHByb3ZpZGVkLmlzQ29tYmluZUVuYWJsZWQsXG4gICAgICBpc0ZpeGVkT25QYWdlOiBwcm92aWRlZC5pc0ZpeGVkT25QYWdlLFxuICAgICAgZGlyZWN0aW9uOiBwcm92aWRlZC5heGlzLmRpcmVjdGlvbixcbiAgICAgIGNsaWVudDogY2xpZW50LFxuICAgICAgcGFnZTogd2l0aFNjcm9sbChjbGllbnQsIHZpZXdwb3J0LnNjcm9sbC5pbml0aWFsKSxcbiAgICAgIGNsb3Nlc3Q6IGNsb3Nlc3RcbiAgICB9KTtcbiAgICB2YXIgc2Nyb2xsZWQgPSBzY3JvbGxEcm9wcGFibGUod2l0aFNpemVDaGFuZ2VkLCBuZXdTY3JvbGxhYmxlLnNjcm9sbC5jdXJyZW50KTtcbiAgICByZXR1cm4gc2Nyb2xsZWQ7XG4gIH0pO1xuXG4gIHZhciByZXN1bHQgPSBfZXh0ZW5kcyh7fSwgZXhpc3RpbmcsIHRvRHJvcHBhYmxlTWFwKGFkanVzdGVkKSk7XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn0pO1xuXG52YXIgd2l0aE5vQW5pbWF0ZWREaXNwbGFjZW1lbnQgPSAoZnVuY3Rpb24gKGltcGFjdCkge1xuICB2YXIgZGlzcGxhY2VkID0gaW1wYWN0Lm1vdmVtZW50LmRpc3BsYWNlZDtcblxuICBpZiAoIWRpc3BsYWNlZC5sZW5ndGgpIHtcbiAgICByZXR1cm4gaW1wYWN0O1xuICB9XG5cbiAgdmFyIHdpdGhvdXRBbmltYXRpb24gPSBkaXNwbGFjZWQubWFwKGZ1bmN0aW9uIChkaXNwbGFjZW1lbnQpIHtcbiAgICBpZiAoIWRpc3BsYWNlbWVudC5pc1Zpc2libGUpIHtcbiAgICAgIHJldHVybiBkaXNwbGFjZW1lbnQ7XG4gICAgfVxuXG4gICAgaWYgKCFkaXNwbGFjZW1lbnQuc2hvdWxkQW5pbWF0ZSkge1xuICAgICAgcmV0dXJuIGRpc3BsYWNlbWVudDtcbiAgICB9XG5cbiAgICByZXR1cm4gX2V4dGVuZHMoe30sIGRpc3BsYWNlbWVudCwge1xuICAgICAgc2hvdWxkQW5pbWF0ZTogZmFsc2VcbiAgICB9KTtcbiAgfSk7XG5cbiAgdmFyIHJlc3VsdCA9IF9leHRlbmRzKHt9LCBpbXBhY3QsIHtcbiAgICBtb3ZlbWVudDogX2V4dGVuZHMoe30sIGltcGFjdC5tb3ZlbWVudCwge1xuICAgICAgZGlzcGxhY2VkOiB3aXRob3V0QW5pbWF0aW9uLFxuICAgICAgbWFwOiBnZXREaXNwbGFjZW1lbnRNYXAod2l0aG91dEFuaW1hdGlvbilcbiAgICB9KVxuICB9KTtcblxuICByZXR1cm4gcmVzdWx0O1xufSk7XG5cbnZhciBwYXRjaERyb3BwYWJsZU1hcCA9IChmdW5jdGlvbiAoZHJvcHBhYmxlcywgdXBkYXRlZCkge1xuICB2YXIgX2V4dGVuZHMyO1xuXG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgZHJvcHBhYmxlcywgKF9leHRlbmRzMiA9IHt9LCBfZXh0ZW5kczJbdXBkYXRlZC5kZXNjcmlwdG9yLmlkXSA9IHVwZGF0ZWQsIF9leHRlbmRzMikpO1xufSk7XG5cbnZhciBjbGVhclVudXNlZFBsYWNlaG9sZGVyID0gZnVuY3Rpb24gY2xlYXJVbnVzZWRQbGFjZWhvbGRlcihfcmVmKSB7XG4gIHZhciBwcmV2aW91c0ltcGFjdCA9IF9yZWYucHJldmlvdXNJbXBhY3QsXG4gICAgICBpbXBhY3QgPSBfcmVmLmltcGFjdCxcbiAgICAgIGRyb3BwYWJsZXMgPSBfcmVmLmRyb3BwYWJsZXM7XG4gIHZhciBsYXN0ID0gd2hhdElzRHJhZ2dlZE92ZXIocHJldmlvdXNJbXBhY3QpO1xuICB2YXIgbm93ID0gd2hhdElzRHJhZ2dlZE92ZXIoaW1wYWN0KTtcblxuICBpZiAoIWxhc3QpIHtcbiAgICByZXR1cm4gZHJvcHBhYmxlcztcbiAgfVxuXG4gIGlmIChsYXN0ID09PSBub3cpIHtcbiAgICByZXR1cm4gZHJvcHBhYmxlcztcbiAgfVxuXG4gIHZhciBsYXN0RHJvcHBhYmxlID0gZHJvcHBhYmxlc1tsYXN0XTtcblxuICBpZiAoIWxhc3REcm9wcGFibGUuc3ViamVjdC53aXRoUGxhY2Vob2xkZXIpIHtcbiAgICByZXR1cm4gZHJvcHBhYmxlcztcbiAgfVxuXG4gIHZhciB1cGRhdGVkID0gcmVtb3ZlUGxhY2Vob2xkZXIobGFzdERyb3BwYWJsZSk7XG4gIHJldHVybiBwYXRjaERyb3BwYWJsZU1hcChkcm9wcGFibGVzLCB1cGRhdGVkKTtcbn07XG5cbnZhciByZWNvbXB1dGVQbGFjZWhvbGRlcnMgPSAoZnVuY3Rpb24gKF9yZWYyKSB7XG4gIHZhciBkcmFnZ2FibGUgPSBfcmVmMi5kcmFnZ2FibGUsXG4gICAgICBkcmFnZ2FibGVzID0gX3JlZjIuZHJhZ2dhYmxlcyxcbiAgICAgIGRyb3BwYWJsZXMgPSBfcmVmMi5kcm9wcGFibGVzLFxuICAgICAgcHJldmlvdXNJbXBhY3QgPSBfcmVmMi5wcmV2aW91c0ltcGFjdCxcbiAgICAgIGltcGFjdCA9IF9yZWYyLmltcGFjdDtcbiAgdmFyIGNsZWFuZWQgPSBjbGVhclVudXNlZFBsYWNlaG9sZGVyKHtcbiAgICBwcmV2aW91c0ltcGFjdDogcHJldmlvdXNJbXBhY3QsXG4gICAgaW1wYWN0OiBpbXBhY3QsXG4gICAgZHJvcHBhYmxlczogZHJvcHBhYmxlc1xuICB9KTtcbiAgdmFyIGlzT3ZlciA9IHdoYXRJc0RyYWdnZWRPdmVyKGltcGFjdCk7XG5cbiAgaWYgKCFpc092ZXIpIHtcbiAgICByZXR1cm4gY2xlYW5lZDtcbiAgfVxuXG4gIHZhciBkcm9wcGFibGUgPSBkcm9wcGFibGVzW2lzT3Zlcl07XG5cbiAgaWYgKGlzSG9tZU9mKGRyYWdnYWJsZSwgZHJvcHBhYmxlKSkge1xuICAgIHJldHVybiBjbGVhbmVkO1xuICB9XG5cbiAgaWYgKGRyb3BwYWJsZS5zdWJqZWN0LndpdGhQbGFjZWhvbGRlcikge1xuICAgIHJldHVybiBjbGVhbmVkO1xuICB9XG5cbiAgdmFyIHBhdGNoZWQgPSBhZGRQbGFjZWhvbGRlcihkcm9wcGFibGUsIGRyYWdnYWJsZSwgZHJhZ2dhYmxlcyk7XG4gIHJldHVybiBwYXRjaERyb3BwYWJsZU1hcChjbGVhbmVkLCBwYXRjaGVkKTtcbn0pO1xuXG52YXIgdGltaW5nc0tleSA9ICdQcm9jZXNzaW5nIGR5bmFtaWMgY2hhbmdlcyc7XG52YXIgcHVibGlzaFdoaWxlRHJhZ2dpbmcgPSAoZnVuY3Rpb24gKF9yZWYpIHtcbiAgdmFyIF9leHRlbmRzMiwgX2V4dGVuZHMzO1xuXG4gIHZhciBzdGF0ZSA9IF9yZWYuc3RhdGUsXG4gICAgICBwdWJsaXNoZWQgPSBfcmVmLnB1Ymxpc2hlZDtcbiAgc3RhcnQodGltaW5nc0tleSk7XG4gIHZhciB1cGRhdGVkRHJvcHBhYmxlcyA9IHVwZGF0ZURyb3BwYWJsZXMoe1xuICAgIG1vZGlmaWVkOiBwdWJsaXNoZWQubW9kaWZpZWQsXG4gICAgZXhpc3Rpbmc6IHN0YXRlLmRpbWVuc2lvbnMuZHJvcHBhYmxlcyxcbiAgICB2aWV3cG9ydDogc3RhdGUudmlld3BvcnRcbiAgfSk7XG4gIHZhciBkcmFnZ2FibGVzID0gdXBkYXRlRHJhZ2dhYmxlcyh7XG4gICAgdXBkYXRlZERyb3BwYWJsZXM6IHVwZGF0ZWREcm9wcGFibGVzLFxuICAgIGNyaXRpY2FsSWQ6IHN0YXRlLmNyaXRpY2FsLmRyYWdnYWJsZS5pZCxcbiAgICBleGlzdGluZzogc3RhdGUuZGltZW5zaW9ucy5kcmFnZ2FibGVzLFxuICAgIGFkZGl0aW9uczogcHVibGlzaGVkLmFkZGl0aW9ucyxcbiAgICByZW1vdmFsczogcHVibGlzaGVkLnJlbW92YWxzLFxuICAgIHZpZXdwb3J0OiBzdGF0ZS52aWV3cG9ydFxuICB9KTtcbiAgdmFyIGNyaXRpY2FsID0ge1xuICAgIGRyYWdnYWJsZTogZHJhZ2dhYmxlc1tzdGF0ZS5jcml0aWNhbC5kcmFnZ2FibGUuaWRdLmRlc2NyaXB0b3IsXG4gICAgZHJvcHBhYmxlOiB1cGRhdGVkRHJvcHBhYmxlc1tzdGF0ZS5jcml0aWNhbC5kcm9wcGFibGUuaWRdLmRlc2NyaXB0b3JcbiAgfTtcbiAgdmFyIG9yaWdpbmFsID0gc3RhdGUuZGltZW5zaW9ucy5kcmFnZ2FibGVzW2NyaXRpY2FsLmRyYWdnYWJsZS5pZF07XG4gIHZhciB1cGRhdGVkID0gZHJhZ2dhYmxlc1tjcml0aWNhbC5kcmFnZ2FibGUuaWRdO1xuICB2YXIgZHJvcHBhYmxlcyA9IHJlY29tcHV0ZVBsYWNlaG9sZGVycyh7XG4gICAgZHJhZ2dhYmxlOiB1cGRhdGVkLFxuICAgIGRyYWdnYWJsZXM6IGRyYWdnYWJsZXMsXG4gICAgZHJvcHBhYmxlczogdXBkYXRlZERyb3BwYWJsZXMsXG4gICAgcHJldmlvdXNJbXBhY3Q6IHN0YXRlLmltcGFjdCxcbiAgICBpbXBhY3Q6IHN0YXRlLmltcGFjdFxuICB9KTtcbiAgdmFyIGRpbWVuc2lvbnMgPSB7XG4gICAgZHJhZ2dhYmxlczogZHJhZ2dhYmxlcyxcbiAgICBkcm9wcGFibGVzOiBkcm9wcGFibGVzXG4gIH07XG5cbiAgdmFyIF9nZXREcmFnUG9zaXRpb25zID0gZ2V0RHJhZ1Bvc2l0aW9ucyh7XG4gICAgaW5pdGlhbDogc3RhdGUuaW5pdGlhbCxcbiAgICBjdXJyZW50OiBzdGF0ZS5jdXJyZW50LFxuICAgIG9sZENsaWVudEJvcmRlckJveENlbnRlcjogb3JpZ2luYWwuY2xpZW50LmJvcmRlckJveC5jZW50ZXIsXG4gICAgbmV3Q2xpZW50Qm9yZGVyQm94Q2VudGVyOiB1cGRhdGVkLmNsaWVudC5ib3JkZXJCb3guY2VudGVyLFxuICAgIHZpZXdwb3J0OiBzdGF0ZS52aWV3cG9ydFxuICB9KSxcbiAgICAgIGluaXRpYWwgPSBfZ2V0RHJhZ1Bvc2l0aW9ucy5pbml0aWFsLFxuICAgICAgY3VycmVudCA9IF9nZXREcmFnUG9zaXRpb25zLmN1cnJlbnQ7XG5cbiAgdmFyIF9nZXRIb21lT25MaWZ0ID0gZ2V0SG9tZU9uTGlmdCh7XG4gICAgZHJhZ2dhYmxlOiB1cGRhdGVkLFxuICAgIGhvbWU6IGRpbWVuc2lvbnMuZHJvcHBhYmxlc1tjcml0aWNhbC5kcm9wcGFibGUuaWRdLFxuICAgIGRyYWdnYWJsZXM6IGRpbWVuc2lvbnMuZHJhZ2dhYmxlcyxcbiAgICB2aWV3cG9ydDogc3RhdGUudmlld3BvcnRcbiAgfSksXG4gICAgICBob21lSW1wYWN0ID0gX2dldEhvbWVPbkxpZnQuaW1wYWN0LFxuICAgICAgb25MaWZ0ID0gX2dldEhvbWVPbkxpZnQub25MaWZ0O1xuXG4gIHZhciBpbXBhY3QgPSB3aXRoTm9BbmltYXRlZERpc3BsYWNlbWVudChnZXREcmFnSW1wYWN0KHtcbiAgICBwYWdlQm9yZGVyQm94Q2VudGVyOiBjdXJyZW50LnBhZ2UuYm9yZGVyQm94Q2VudGVyLFxuICAgIGRyYWdnYWJsZTogdXBkYXRlZCxcbiAgICBkcmFnZ2FibGVzOiBkaW1lbnNpb25zLmRyYWdnYWJsZXMsXG4gICAgZHJvcHBhYmxlczogZGltZW5zaW9ucy5kcm9wcGFibGVzLFxuICAgIHByZXZpb3VzSW1wYWN0OiBob21lSW1wYWN0LFxuICAgIHZpZXdwb3J0OiBzdGF0ZS52aWV3cG9ydCxcbiAgICB1c2VyRGlyZWN0aW9uOiBzdGF0ZS51c2VyRGlyZWN0aW9uLFxuICAgIG9uTGlmdDogb25MaWZ0XG4gIH0pKTtcbiAgdmFyIGlzT3JwaGFuZWQgPSBCb29sZWFuKHN0YXRlLm1vdmVtZW50TW9kZSA9PT0gJ1NOQVAnICYmICF3aGF0SXNEcmFnZ2VkT3ZlcihpbXBhY3QpKTtcbiAgISFpc09ycGhhbmVkID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnRHJhZ2dpbmcgaXRlbSBubyBsb25nZXIgaGFzIGEgdmFsaWQgbWVyZ2UvZGVzdGluYXRpb24gYWZ0ZXIgYSBkeW5hbWljIHVwZGF0ZS4gVGhpcyBpcyBub3Qgc3VwcG9ydGVkJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICBmaW5pc2godGltaW5nc0tleSk7XG5cbiAgdmFyIGRyYWdnaW5nU3RhdGUgPSBfZXh0ZW5kcyh7XG4gICAgcGhhc2U6ICdEUkFHR0lORydcbiAgfSwgc3RhdGUsIChfZXh0ZW5kczIgPSB7fSwgX2V4dGVuZHMyW1wicGhhc2VcIl0gPSAnRFJBR0dJTkcnLCBfZXh0ZW5kczIuY3JpdGljYWwgPSBjcml0aWNhbCwgX2V4dGVuZHMyLmN1cnJlbnQgPSBjdXJyZW50LCBfZXh0ZW5kczIuaW5pdGlhbCA9IGluaXRpYWwsIF9leHRlbmRzMi5pbXBhY3QgPSBpbXBhY3QsIF9leHRlbmRzMi5kaW1lbnNpb25zID0gZGltZW5zaW9ucywgX2V4dGVuZHMyLm9uTGlmdCA9IG9uTGlmdCwgX2V4dGVuZHMyLm9uTGlmdEltcGFjdCA9IGhvbWVJbXBhY3QsIF9leHRlbmRzMi5mb3JjZVNob3VsZEFuaW1hdGUgPSBmYWxzZSwgX2V4dGVuZHMyKSk7XG5cbiAgaWYgKHN0YXRlLnBoYXNlID09PSAnQ09MTEVDVElORycpIHtcbiAgICByZXR1cm4gZHJhZ2dpbmdTdGF0ZTtcbiAgfVxuXG4gIHZhciBkcm9wUGVuZGluZyA9IF9leHRlbmRzKHtcbiAgICBwaGFzZTogJ0RST1BfUEVORElORydcbiAgfSwgZHJhZ2dpbmdTdGF0ZSwgKF9leHRlbmRzMyA9IHt9LCBfZXh0ZW5kczNbXCJwaGFzZVwiXSA9ICdEUk9QX1BFTkRJTkcnLCBfZXh0ZW5kczMucmVhc29uID0gc3RhdGUucmVhc29uLCBfZXh0ZW5kczMuaXNXYWl0aW5nID0gZmFsc2UsIF9leHRlbmRzMykpO1xuXG4gIHJldHVybiBkcm9wUGVuZGluZztcbn0pO1xuXG52YXIgZm9yd2FyZCA9IHtcbiAgdmVydGljYWw6ICdkb3duJyxcbiAgaG9yaXpvbnRhbDogJ3JpZ2h0J1xufTtcbnZhciBiYWNrd2FyZCA9IHtcbiAgdmVydGljYWw6ICd1cCcsXG4gIGhvcml6b250YWw6ICdsZWZ0J1xufTtcblxudmFyIG1vdmVUb05leHRDb21iaW5lID0gKGZ1bmN0aW9uIChfcmVmKSB7XG4gIHZhciBpc01vdmluZ0ZvcndhcmQgPSBfcmVmLmlzTW92aW5nRm9yd2FyZCxcbiAgICAgIGlzSW5Ib21lTGlzdCA9IF9yZWYuaXNJbkhvbWVMaXN0LFxuICAgICAgZHJhZ2dhYmxlID0gX3JlZi5kcmFnZ2FibGUsXG4gICAgICBkZXN0aW5hdGlvbiA9IF9yZWYuZGVzdGluYXRpb24sXG4gICAgICBvcmlnaW5hbEluc2lkZURlc3RpbmF0aW9uID0gX3JlZi5pbnNpZGVEZXN0aW5hdGlvbixcbiAgICAgIHByZXZpb3VzSW1wYWN0ID0gX3JlZi5wcmV2aW91c0ltcGFjdDtcblxuICBpZiAoIWRlc3RpbmF0aW9uLmlzQ29tYmluZUVuYWJsZWQpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGlmIChwcmV2aW91c0ltcGFjdC5tZXJnZSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgdmFyIGxvY2F0aW9uID0gcHJldmlvdXNJbXBhY3QuZGVzdGluYXRpb247XG4gICFsb2NhdGlvbiA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ05lZWQgYSBwcmV2aW91cyBsb2NhdGlvbiB0byBtb3ZlIGZyb20gaW50byBhIGNvbWJpbmUnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHZhciBjdXJyZW50SW5kZXggPSBsb2NhdGlvbi5pbmRleDtcblxuICB2YXIgY3VycmVudEluc2lkZURlc3RpbmF0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBzaGFsbG93ID0gb3JpZ2luYWxJbnNpZGVEZXN0aW5hdGlvbi5zbGljZSgpO1xuXG4gICAgaWYgKGlzSW5Ib21lTGlzdCkge1xuICAgICAgc2hhbGxvdy5zcGxpY2UoZHJhZ2dhYmxlLmRlc2NyaXB0b3IuaW5kZXgsIDEpO1xuICAgIH1cblxuICAgIHNoYWxsb3cuc3BsaWNlKGxvY2F0aW9uLmluZGV4LCAwLCBkcmFnZ2FibGUpO1xuICAgIHJldHVybiBzaGFsbG93O1xuICB9KCk7XG5cbiAgdmFyIHRhcmdldEluZGV4ID0gaXNNb3ZpbmdGb3J3YXJkID8gY3VycmVudEluZGV4ICsgMSA6IGN1cnJlbnRJbmRleCAtIDE7XG5cbiAgaWYgKHRhcmdldEluZGV4IDwgMCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgaWYgKHRhcmdldEluZGV4ID4gY3VycmVudEluc2lkZURlc3RpbmF0aW9uLmxlbmd0aCAtIDEpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHZhciB0YXJnZXQgPSBjdXJyZW50SW5zaWRlRGVzdGluYXRpb25bdGFyZ2V0SW5kZXhdO1xuICAhKHRhcmdldCAhPT0gZHJhZ2dhYmxlKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0Nhbm5vdCBjb21iaW5lIHdpdGggc2VsZicpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgdmFyIG1lcmdlID0ge1xuICAgIHdoZW5FbnRlcmVkOiBpc01vdmluZ0ZvcndhcmQgPyBmb3J3YXJkIDogYmFja3dhcmQsXG4gICAgY29tYmluZToge1xuICAgICAgZHJhZ2dhYmxlSWQ6IHRhcmdldC5kZXNjcmlwdG9yLmlkLFxuICAgICAgZHJvcHBhYmxlSWQ6IGRlc3RpbmF0aW9uLmRlc2NyaXB0b3IuaWRcbiAgICB9XG4gIH07XG4gIHZhciBpbXBhY3QgPSB7XG4gICAgbW92ZW1lbnQ6IHByZXZpb3VzSW1wYWN0Lm1vdmVtZW50LFxuICAgIGRlc3RpbmF0aW9uOiBudWxsLFxuICAgIG1lcmdlOiBtZXJnZVxuICB9O1xuICByZXR1cm4gaW1wYWN0O1xufSk7XG5cbnZhciBhZGRDbG9zZXN0ID0gZnVuY3Rpb24gYWRkQ2xvc2VzdChhZGQsIGRpc3BsYWNlZCkge1xuICB2YXIgYWRkZWQgPSB7XG4gICAgZHJhZ2dhYmxlSWQ6IGFkZC5kZXNjcmlwdG9yLmlkLFxuICAgIGlzVmlzaWJsZTogdHJ1ZSxcbiAgICBzaG91bGRBbmltYXRlOiB0cnVlXG4gIH07XG4gIHJldHVybiBbYWRkZWRdLmNvbmNhdChkaXNwbGFjZWQpO1xufTtcbnZhciByZW1vdmVDbG9zZXN0ID0gZnVuY3Rpb24gcmVtb3ZlQ2xvc2VzdChkaXNwbGFjZWQpIHtcbiAgcmV0dXJuIGRpc3BsYWNlZC5zbGljZSgxKTtcbn07XG5cbnZhciBmcm9tUmVvcmRlciA9IChmdW5jdGlvbiAoX3JlZikge1xuICB2YXIgaXNNb3ZpbmdGb3J3YXJkID0gX3JlZi5pc01vdmluZ0ZvcndhcmQsXG4gICAgICBpc0luSG9tZUxpc3QgPSBfcmVmLmlzSW5Ib21lTGlzdCxcbiAgICAgIGRyYWdnYWJsZSA9IF9yZWYuZHJhZ2dhYmxlLFxuICAgICAgaW5pdGlhbEluc2lkZSA9IF9yZWYuaW5zaWRlRGVzdGluYXRpb24sXG4gICAgICBsb2NhdGlvbiA9IF9yZWYubG9jYXRpb247XG4gIHZhciBpbnNpZGVEZXN0aW5hdGlvbiA9IGluaXRpYWxJbnNpZGUuc2xpY2UoKTtcbiAgdmFyIGN1cnJlbnRJbmRleCA9IGxvY2F0aW9uLmluZGV4O1xuICB2YXIgaXNJbkZvcmVpZ25MaXN0ID0gIWlzSW5Ib21lTGlzdDtcblxuICBpZiAoaXNJbkZvcmVpZ25MaXN0KSB7XG4gICAgaW5zaWRlRGVzdGluYXRpb24uc3BsaWNlKGxvY2F0aW9uLmluZGV4LCAwLCBkcmFnZ2FibGUpO1xuICB9XG5cbiAgdmFyIHByb3Bvc2VkSW5kZXggPSBpc01vdmluZ0ZvcndhcmQgPyBjdXJyZW50SW5kZXggKyAxIDogY3VycmVudEluZGV4IC0gMTtcblxuICBpZiAocHJvcG9zZWRJbmRleCA8IDApIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGlmIChwcm9wb3NlZEluZGV4ID4gaW5zaWRlRGVzdGluYXRpb24ubGVuZ3RoIC0gMSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBwcm9wb3NlZEluZGV4OiBwcm9wb3NlZEluZGV4LFxuICAgIG1vZGlmeURpc3BsYWNlbWVudDogdHJ1ZVxuICB9O1xufSk7XG5cbnZhciBmcm9tQ29tYmluZSA9IChmdW5jdGlvbiAoX3JlZikge1xuICB2YXIgaXNNb3ZpbmdGb3J3YXJkID0gX3JlZi5pc01vdmluZ0ZvcndhcmQsXG4gICAgICBkZXN0aW5hdGlvbiA9IF9yZWYuZGVzdGluYXRpb24sXG4gICAgICBwcmV2aW91c0ltcGFjdCA9IF9yZWYucHJldmlvdXNJbXBhY3QsXG4gICAgICBkcmFnZ2FibGVzID0gX3JlZi5kcmFnZ2FibGVzLFxuICAgICAgbWVyZ2UgPSBfcmVmLm1lcmdlLFxuICAgICAgb25MaWZ0ID0gX3JlZi5vbkxpZnQ7XG5cbiAgaWYgKCFkZXN0aW5hdGlvbi5pc0NvbWJpbmVFbmFibGVkKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICB2YXIgbW92ZW1lbnQgPSBwcmV2aW91c0ltcGFjdC5tb3ZlbWVudDtcbiAgdmFyIGNvbWJpbmVJZCA9IG1lcmdlLmNvbWJpbmUuZHJhZ2dhYmxlSWQ7XG4gIHZhciBjb21iaW5lID0gZHJhZ2dhYmxlc1tjb21iaW5lSWRdO1xuICB2YXIgY29tYmluZUluZGV4ID0gY29tYmluZS5kZXNjcmlwdG9yLmluZGV4O1xuICB2YXIgd2FzRGlzcGxhY2VkQXRTdGFydCA9IGRpZFN0YXJ0RGlzcGxhY2VkKGNvbWJpbmVJZCwgb25MaWZ0KTtcblxuICBpZiAod2FzRGlzcGxhY2VkQXRTdGFydCkge1xuICAgIHZhciBoYXNEaXNwbGFjZWRGcm9tU3RhcnQgPSAhbW92ZW1lbnQubWFwW2NvbWJpbmVJZF07XG5cbiAgICBpZiAoaGFzRGlzcGxhY2VkRnJvbVN0YXJ0KSB7XG4gICAgICBpZiAoaXNNb3ZpbmdGb3J3YXJkKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgcHJvcG9zZWRJbmRleDogY29tYmluZUluZGV4LFxuICAgICAgICAgIG1vZGlmeURpc3BsYWNlbWVudDogZmFsc2VcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcHJvcG9zZWRJbmRleDogY29tYmluZUluZGV4IC0gMSxcbiAgICAgICAgbW9kaWZ5RGlzcGxhY2VtZW50OiB0cnVlXG4gICAgICB9O1xuICAgIH1cblxuICAgIGlmIChpc01vdmluZ0ZvcndhcmQpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHByb3Bvc2VkSW5kZXg6IGNvbWJpbmVJbmRleCxcbiAgICAgICAgbW9kaWZ5RGlzcGxhY2VtZW50OiB0cnVlXG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBwcm9wb3NlZEluZGV4OiBjb21iaW5lSW5kZXggLSAxLFxuICAgICAgbW9kaWZ5RGlzcGxhY2VtZW50OiBmYWxzZVxuICAgIH07XG4gIH1cblxuICB2YXIgaXNEaXNwbGFjZWQgPSBCb29sZWFuKG1vdmVtZW50Lm1hcFtjb21iaW5lSWRdKTtcblxuICBpZiAoaXNEaXNwbGFjZWQpIHtcbiAgICBpZiAoaXNNb3ZpbmdGb3J3YXJkKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBwcm9wb3NlZEluZGV4OiBjb21iaW5lSW5kZXggKyAxLFxuICAgICAgICBtb2RpZnlEaXNwbGFjZW1lbnQ6IHRydWVcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIHByb3Bvc2VkSW5kZXg6IGNvbWJpbmVJbmRleCxcbiAgICAgIG1vZGlmeURpc3BsYWNlbWVudDogZmFsc2VcbiAgICB9O1xuICB9XG5cbiAgaWYgKGlzTW92aW5nRm9yd2FyZCkge1xuICAgIHJldHVybiB7XG4gICAgICBwcm9wb3NlZEluZGV4OiBjb21iaW5lSW5kZXggKyAxLFxuICAgICAgbW9kaWZ5RGlzcGxhY2VtZW50OiBmYWxzZVxuICAgIH07XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHByb3Bvc2VkSW5kZXg6IGNvbWJpbmVJbmRleCxcbiAgICBtb2RpZnlEaXNwbGFjZW1lbnQ6IHRydWVcbiAgfTtcbn0pO1xuXG52YXIgbW92ZVRvTmV4dEluZGV4ID0gKGZ1bmN0aW9uIChfcmVmKSB7XG4gIHZhciBpc01vdmluZ0ZvcndhcmQgPSBfcmVmLmlzTW92aW5nRm9yd2FyZCxcbiAgICAgIGlzSW5Ib21lTGlzdCA9IF9yZWYuaXNJbkhvbWVMaXN0LFxuICAgICAgZHJhZ2dhYmxlID0gX3JlZi5kcmFnZ2FibGUsXG4gICAgICBkcmFnZ2FibGVzID0gX3JlZi5kcmFnZ2FibGVzLFxuICAgICAgZGVzdGluYXRpb24gPSBfcmVmLmRlc3RpbmF0aW9uLFxuICAgICAgaW5zaWRlRGVzdGluYXRpb24gPSBfcmVmLmluc2lkZURlc3RpbmF0aW9uLFxuICAgICAgcHJldmlvdXNJbXBhY3QgPSBfcmVmLnByZXZpb3VzSW1wYWN0LFxuICAgICAgb25MaWZ0ID0gX3JlZi5vbkxpZnQ7XG5cbiAgdmFyIGluc3RydWN0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgIGlmIChwcmV2aW91c0ltcGFjdC5kZXN0aW5hdGlvbikge1xuICAgICAgcmV0dXJuIGZyb21SZW9yZGVyKHtcbiAgICAgICAgaXNNb3ZpbmdGb3J3YXJkOiBpc01vdmluZ0ZvcndhcmQsXG4gICAgICAgIGlzSW5Ib21lTGlzdDogaXNJbkhvbWVMaXN0LFxuICAgICAgICBkcmFnZ2FibGU6IGRyYWdnYWJsZSxcbiAgICAgICAgbG9jYXRpb246IHByZXZpb3VzSW1wYWN0LmRlc3RpbmF0aW9uLFxuICAgICAgICBpbnNpZGVEZXN0aW5hdGlvbjogaW5zaWRlRGVzdGluYXRpb25cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChwcmV2aW91c0ltcGFjdC5tZXJnZSkge1xuICAgICAgcmV0dXJuIGZyb21Db21iaW5lKHtcbiAgICAgICAgaXNNb3ZpbmdGb3J3YXJkOiBpc01vdmluZ0ZvcndhcmQsXG4gICAgICAgIGRlc3RpbmF0aW9uOiBkZXN0aW5hdGlvbixcbiAgICAgICAgcHJldmlvdXNJbXBhY3Q6IHByZXZpb3VzSW1wYWN0LFxuICAgICAgICBkcmFnZ2FibGVzOiBkcmFnZ2FibGVzLFxuICAgICAgICBtZXJnZTogcHJldmlvdXNJbXBhY3QubWVyZ2UsXG4gICAgICAgIG9uTGlmdDogb25MaWZ0XG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH0oKTtcblxuICBpZiAoaW5zdHJ1Y3Rpb24gPT0gbnVsbCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgdmFyIHByb3Bvc2VkSW5kZXggPSBpbnN0cnVjdGlvbi5wcm9wb3NlZEluZGV4LFxuICAgICAgbW9kaWZ5RGlzcGxhY2VtZW50ID0gaW5zdHJ1Y3Rpb24ubW9kaWZ5RGlzcGxhY2VtZW50O1xuICB2YXIgZGlzcGxhY2VkQnkgPSBnZXREaXNwbGFjZWRCeShkZXN0aW5hdGlvbi5heGlzLCBkcmFnZ2FibGUuZGlzcGxhY2VCeSk7XG5cbiAgdmFyIGRpc3BsYWNlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgbGFzdERpc3BsYWNlZCA9IHByZXZpb3VzSW1wYWN0Lm1vdmVtZW50LmRpc3BsYWNlZDtcblxuICAgIGlmICghbW9kaWZ5RGlzcGxhY2VtZW50KSB7XG4gICAgICByZXR1cm4gbGFzdERpc3BsYWNlZDtcbiAgICB9XG5cbiAgICBpZiAoaXNNb3ZpbmdGb3J3YXJkKSB7XG4gICAgICByZXR1cm4gcmVtb3ZlQ2xvc2VzdChsYXN0RGlzcGxhY2VkKTtcbiAgICB9XG5cbiAgICB2YXIgd2l0aG91dERyYWdnYWJsZSA9IHJlbW92ZURyYWdnYWJsZUZyb21MaXN0KGRyYWdnYWJsZSwgaW5zaWRlRGVzdGluYXRpb24pO1xuICAgIHZhciBhdFByb3Bvc2VkSW5kZXggPSB3aXRob3V0RHJhZ2dhYmxlW3Byb3Bvc2VkSW5kZXhdO1xuICAgIHJldHVybiBhZGRDbG9zZXN0KGF0UHJvcG9zZWRJbmRleCwgbGFzdERpc3BsYWNlZCk7XG4gIH0oKTtcblxuICByZXR1cm4ge1xuICAgIG1vdmVtZW50OiB7XG4gICAgICBkaXNwbGFjZWRCeTogZGlzcGxhY2VkQnksXG4gICAgICBkaXNwbGFjZWQ6IGRpc3BsYWNlZCxcbiAgICAgIG1hcDogZ2V0RGlzcGxhY2VtZW50TWFwKGRpc3BsYWNlZClcbiAgICB9LFxuICAgIGRlc3RpbmF0aW9uOiB7XG4gICAgICBkcm9wcGFibGVJZDogZGVzdGluYXRpb24uZGVzY3JpcHRvci5pZCxcbiAgICAgIGluZGV4OiBwcm9wb3NlZEluZGV4XG4gICAgfSxcbiAgICBtZXJnZTogbnVsbFxuICB9O1xufSk7XG5cbnZhciB3aGVuQ29tYmluaW5nID0gKGZ1bmN0aW9uIChfcmVmKSB7XG4gIHZhciBjb21iaW5lID0gX3JlZi5jb21iaW5lLFxuICAgICAgb25MaWZ0ID0gX3JlZi5vbkxpZnQsXG4gICAgICBtb3ZlbWVudCA9IF9yZWYubW92ZW1lbnQsXG4gICAgICBkcmFnZ2FibGVzID0gX3JlZi5kcmFnZ2FibGVzO1xuICB2YXIgY29tYmluZVdpdGggPSBjb21iaW5lLmRyYWdnYWJsZUlkO1xuICB2YXIgY2VudGVyID0gZHJhZ2dhYmxlc1tjb21iaW5lV2l0aF0ucGFnZS5ib3JkZXJCb3guY2VudGVyO1xuICB2YXIgZGlzcGxhY2VCeSA9IGdldENvbWJpbmVkSXRlbURpc3BsYWNlbWVudCh7XG4gICAgZGlzcGxhY2VkOiBtb3ZlbWVudC5tYXAsXG4gICAgb25MaWZ0OiBvbkxpZnQsXG4gICAgY29tYmluZVdpdGg6IGNvbWJpbmVXaXRoLFxuICAgIGRpc3BsYWNlZEJ5OiBtb3ZlbWVudC5kaXNwbGFjZWRCeVxuICB9KTtcbiAgcmV0dXJuIGFkZChjZW50ZXIsIGRpc3BsYWNlQnkpO1xufSk7XG5cbnZhciBkaXN0YW5jZUZyb21TdGFydFRvQm9yZGVyQm94Q2VudGVyID0gZnVuY3Rpb24gZGlzdGFuY2VGcm9tU3RhcnRUb0JvcmRlckJveENlbnRlcihheGlzLCBib3gpIHtcbiAgcmV0dXJuIGJveC5tYXJnaW5bYXhpcy5zdGFydF0gKyBib3guYm9yZGVyQm94W2F4aXMuc2l6ZV0gLyAyO1xufTtcblxudmFyIGRpc3RhbmNlRnJvbUVuZFRvQm9yZGVyQm94Q2VudGVyID0gZnVuY3Rpb24gZGlzdGFuY2VGcm9tRW5kVG9Cb3JkZXJCb3hDZW50ZXIoYXhpcywgYm94KSB7XG4gIHJldHVybiBib3gubWFyZ2luW2F4aXMuZW5kXSArIGJveC5ib3JkZXJCb3hbYXhpcy5zaXplXSAvIDI7XG59O1xuXG52YXIgZ2V0Q3Jvc3NBeGlzQm9yZGVyQm94Q2VudGVyID0gZnVuY3Rpb24gZ2V0Q3Jvc3NBeGlzQm9yZGVyQm94Q2VudGVyKGF4aXMsIHRhcmdldCwgaXNNb3ZpbmcpIHtcbiAgcmV0dXJuIHRhcmdldFtheGlzLmNyb3NzQXhpc1N0YXJ0XSArIGlzTW92aW5nLm1hcmdpbltheGlzLmNyb3NzQXhpc1N0YXJ0XSArIGlzTW92aW5nLmJvcmRlckJveFtheGlzLmNyb3NzQXhpc1NpemVdIC8gMjtcbn07XG5cbnZhciBnb0FmdGVyID0gZnVuY3Rpb24gZ29BZnRlcihfcmVmKSB7XG4gIHZhciBheGlzID0gX3JlZi5heGlzLFxuICAgICAgbW92ZVJlbGF0aXZlVG8gPSBfcmVmLm1vdmVSZWxhdGl2ZVRvLFxuICAgICAgaXNNb3ZpbmcgPSBfcmVmLmlzTW92aW5nO1xuICByZXR1cm4gcGF0Y2goYXhpcy5saW5lLCBtb3ZlUmVsYXRpdmVUby5tYXJnaW5Cb3hbYXhpcy5lbmRdICsgZGlzdGFuY2VGcm9tU3RhcnRUb0JvcmRlckJveENlbnRlcihheGlzLCBpc01vdmluZyksIGdldENyb3NzQXhpc0JvcmRlckJveENlbnRlcihheGlzLCBtb3ZlUmVsYXRpdmVUby5tYXJnaW5Cb3gsIGlzTW92aW5nKSk7XG59O1xudmFyIGdvQmVmb3JlID0gZnVuY3Rpb24gZ29CZWZvcmUoX3JlZjIpIHtcbiAgdmFyIGF4aXMgPSBfcmVmMi5heGlzLFxuICAgICAgbW92ZVJlbGF0aXZlVG8gPSBfcmVmMi5tb3ZlUmVsYXRpdmVUbyxcbiAgICAgIGlzTW92aW5nID0gX3JlZjIuaXNNb3Zpbmc7XG4gIHJldHVybiBwYXRjaChheGlzLmxpbmUsIG1vdmVSZWxhdGl2ZVRvLm1hcmdpbkJveFtheGlzLnN0YXJ0XSAtIGRpc3RhbmNlRnJvbUVuZFRvQm9yZGVyQm94Q2VudGVyKGF4aXMsIGlzTW92aW5nKSwgZ2V0Q3Jvc3NBeGlzQm9yZGVyQm94Q2VudGVyKGF4aXMsIG1vdmVSZWxhdGl2ZVRvLm1hcmdpbkJveCwgaXNNb3ZpbmcpKTtcbn07XG52YXIgZ29JbnRvU3RhcnQgPSBmdW5jdGlvbiBnb0ludG9TdGFydChfcmVmMykge1xuICB2YXIgYXhpcyA9IF9yZWYzLmF4aXMsXG4gICAgICBtb3ZlSW50byA9IF9yZWYzLm1vdmVJbnRvLFxuICAgICAgaXNNb3ZpbmcgPSBfcmVmMy5pc01vdmluZztcbiAgcmV0dXJuIHBhdGNoKGF4aXMubGluZSwgbW92ZUludG8uY29udGVudEJveFtheGlzLnN0YXJ0XSArIGRpc3RhbmNlRnJvbVN0YXJ0VG9Cb3JkZXJCb3hDZW50ZXIoYXhpcywgaXNNb3ZpbmcpLCBnZXRDcm9zc0F4aXNCb3JkZXJCb3hDZW50ZXIoYXhpcywgbW92ZUludG8uY29udGVudEJveCwgaXNNb3ZpbmcpKTtcbn07XG5cbnZhciB3aGVuUmVvcmRlcmluZyA9IChmdW5jdGlvbiAoX3JlZikge1xuICB2YXIgbW92ZW1lbnQgPSBfcmVmLm1vdmVtZW50LFxuICAgICAgZHJhZ2dhYmxlID0gX3JlZi5kcmFnZ2FibGUsXG4gICAgICBkcmFnZ2FibGVzID0gX3JlZi5kcmFnZ2FibGVzLFxuICAgICAgZHJvcHBhYmxlID0gX3JlZi5kcm9wcGFibGUsXG4gICAgICBvbkxpZnQgPSBfcmVmLm9uTGlmdDtcbiAgdmFyIGluc2lkZURlc3RpbmF0aW9uID0gZ2V0RHJhZ2dhYmxlc0luc2lkZURyb3BwYWJsZShkcm9wcGFibGUuZGVzY3JpcHRvci5pZCwgZHJhZ2dhYmxlcyk7XG4gIHZhciBkcmFnZ2FibGVQYWdlID0gZHJhZ2dhYmxlLnBhZ2U7XG4gIHZhciBheGlzID0gZHJvcHBhYmxlLmF4aXM7XG5cbiAgaWYgKCFpbnNpZGVEZXN0aW5hdGlvbi5sZW5ndGgpIHtcbiAgICByZXR1cm4gZ29JbnRvU3RhcnQoe1xuICAgICAgYXhpczogYXhpcyxcbiAgICAgIG1vdmVJbnRvOiBkcm9wcGFibGUucGFnZSxcbiAgICAgIGlzTW92aW5nOiBkcmFnZ2FibGVQYWdlXG4gICAgfSk7XG4gIH1cblxuICB2YXIgZGlzcGxhY2VkID0gbW92ZW1lbnQuZGlzcGxhY2VkLFxuICAgICAgZGlzcGxhY2VkQnkgPSBtb3ZlbWVudC5kaXNwbGFjZWRCeTtcblxuICBpZiAoZGlzcGxhY2VkLmxlbmd0aCkge1xuICAgIHZhciBjbG9zZXN0QWZ0ZXIgPSBkcmFnZ2FibGVzW2Rpc3BsYWNlZFswXS5kcmFnZ2FibGVJZF07XG5cbiAgICBpZiAoZGlkU3RhcnREaXNwbGFjZWQoY2xvc2VzdEFmdGVyLmRlc2NyaXB0b3IuaWQsIG9uTGlmdCkpIHtcbiAgICAgIHJldHVybiBnb0JlZm9yZSh7XG4gICAgICAgIGF4aXM6IGF4aXMsXG4gICAgICAgIG1vdmVSZWxhdGl2ZVRvOiBjbG9zZXN0QWZ0ZXIucGFnZSxcbiAgICAgICAgaXNNb3Zpbmc6IGRyYWdnYWJsZVBhZ2VcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHZhciB3aXRoRGlzcGxhY2VtZW50ID0gb2Zmc2V0KGNsb3Nlc3RBZnRlci5wYWdlLCBkaXNwbGFjZWRCeS5wb2ludCk7XG4gICAgcmV0dXJuIGdvQmVmb3JlKHtcbiAgICAgIGF4aXM6IGF4aXMsXG4gICAgICBtb3ZlUmVsYXRpdmVUbzogd2l0aERpc3BsYWNlbWVudCxcbiAgICAgIGlzTW92aW5nOiBkcmFnZ2FibGVQYWdlXG4gICAgfSk7XG4gIH1cblxuICB2YXIgbGFzdCA9IGluc2lkZURlc3RpbmF0aW9uW2luc2lkZURlc3RpbmF0aW9uLmxlbmd0aCAtIDFdO1xuXG4gIGlmIChsYXN0LmRlc2NyaXB0b3IuaWQgPT09IGRyYWdnYWJsZS5kZXNjcmlwdG9yLmlkKSB7XG4gICAgcmV0dXJuIGRyYWdnYWJsZVBhZ2UuYm9yZGVyQm94LmNlbnRlcjtcbiAgfVxuXG4gIGlmIChkaWRTdGFydERpc3BsYWNlZChsYXN0LmRlc2NyaXB0b3IuaWQsIG9uTGlmdCkpIHtcbiAgICB2YXIgcGFnZSA9IG9mZnNldChsYXN0LnBhZ2UsIG5lZ2F0ZShvbkxpZnQuZGlzcGxhY2VkQnkucG9pbnQpKTtcbiAgICByZXR1cm4gZ29BZnRlcih7XG4gICAgICBheGlzOiBheGlzLFxuICAgICAgbW92ZVJlbGF0aXZlVG86IHBhZ2UsXG4gICAgICBpc01vdmluZzogZHJhZ2dhYmxlUGFnZVxuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIGdvQWZ0ZXIoe1xuICAgIGF4aXM6IGF4aXMsXG4gICAgbW92ZVJlbGF0aXZlVG86IGxhc3QucGFnZSxcbiAgICBpc01vdmluZzogZHJhZ2dhYmxlUGFnZVxuICB9KTtcbn0pO1xuXG52YXIgd2l0aERyb3BwYWJsZURpc3BsYWNlbWVudCA9IChmdW5jdGlvbiAoZHJvcHBhYmxlLCBwb2ludCkge1xuICB2YXIgZnJhbWUgPSBkcm9wcGFibGUuZnJhbWU7XG5cbiAgaWYgKCFmcmFtZSkge1xuICAgIHJldHVybiBwb2ludDtcbiAgfVxuXG4gIHJldHVybiBhZGQocG9pbnQsIGZyYW1lLnNjcm9sbC5kaWZmLmRpc3BsYWNlbWVudCk7XG59KTtcblxudmFyIGdldFJlc3VsdFdpdGhvdXREcm9wcGFibGVEaXNwbGFjZW1lbnQgPSBmdW5jdGlvbiBnZXRSZXN1bHRXaXRob3V0RHJvcHBhYmxlRGlzcGxhY2VtZW50KF9yZWYpIHtcbiAgdmFyIGltcGFjdCA9IF9yZWYuaW1wYWN0LFxuICAgICAgZHJhZ2dhYmxlID0gX3JlZi5kcmFnZ2FibGUsXG4gICAgICBkcm9wcGFibGUgPSBfcmVmLmRyb3BwYWJsZSxcbiAgICAgIGRyYWdnYWJsZXMgPSBfcmVmLmRyYWdnYWJsZXMsXG4gICAgICBvbkxpZnQgPSBfcmVmLm9uTGlmdDtcbiAgdmFyIG1lcmdlID0gaW1wYWN0Lm1lcmdlO1xuICB2YXIgZGVzdGluYXRpb24gPSBpbXBhY3QuZGVzdGluYXRpb247XG4gIHZhciBvcmlnaW5hbCA9IGRyYWdnYWJsZS5wYWdlLmJvcmRlckJveC5jZW50ZXI7XG5cbiAgaWYgKCFkcm9wcGFibGUpIHtcbiAgICByZXR1cm4gb3JpZ2luYWw7XG4gIH1cblxuICBpZiAoZGVzdGluYXRpb24pIHtcbiAgICByZXR1cm4gd2hlblJlb3JkZXJpbmcoe1xuICAgICAgbW92ZW1lbnQ6IGltcGFjdC5tb3ZlbWVudCxcbiAgICAgIGRyYWdnYWJsZTogZHJhZ2dhYmxlLFxuICAgICAgZHJhZ2dhYmxlczogZHJhZ2dhYmxlcyxcbiAgICAgIGRyb3BwYWJsZTogZHJvcHBhYmxlLFxuICAgICAgb25MaWZ0OiBvbkxpZnRcbiAgICB9KTtcbiAgfVxuXG4gIGlmIChtZXJnZSkge1xuICAgIHJldHVybiB3aGVuQ29tYmluaW5nKHtcbiAgICAgIG1vdmVtZW50OiBpbXBhY3QubW92ZW1lbnQsXG4gICAgICBjb21iaW5lOiBtZXJnZS5jb21iaW5lLFxuICAgICAgZHJhZ2dhYmxlczogZHJhZ2dhYmxlcyxcbiAgICAgIG9uTGlmdDogb25MaWZ0XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gb3JpZ2luYWw7XG59O1xuXG52YXIgZ2V0UGFnZUJvcmRlckJveENlbnRlckZyb21JbXBhY3QgPSAoZnVuY3Rpb24gKGFyZ3MpIHtcbiAgdmFyIHdpdGhvdXREaXNwbGFjZW1lbnQgPSBnZXRSZXN1bHRXaXRob3V0RHJvcHBhYmxlRGlzcGxhY2VtZW50KGFyZ3MpO1xuICB2YXIgZHJvcHBhYmxlID0gYXJncy5kcm9wcGFibGU7XG4gIHZhciB3aXRoRGlzcGxhY2VtZW50ID0gZHJvcHBhYmxlID8gd2l0aERyb3BwYWJsZURpc3BsYWNlbWVudChkcm9wcGFibGUsIHdpdGhvdXREaXNwbGFjZW1lbnQpIDogd2l0aG91dERpc3BsYWNlbWVudDtcbiAgcmV0dXJuIHdpdGhEaXNwbGFjZW1lbnQ7XG59KTtcblxudmFyIHNjcm9sbFZpZXdwb3J0ID0gKGZ1bmN0aW9uICh2aWV3cG9ydCwgbmV3U2Nyb2xsKSB7XG4gIHZhciBkaWZmID0gc3VidHJhY3QobmV3U2Nyb2xsLCB2aWV3cG9ydC5zY3JvbGwuaW5pdGlhbCk7XG4gIHZhciBkaXNwbGFjZW1lbnQgPSBuZWdhdGUoZGlmZik7XG4gIHZhciBmcmFtZSA9IGdldFJlY3Qoe1xuICAgIHRvcDogbmV3U2Nyb2xsLnksXG4gICAgYm90dG9tOiBuZXdTY3JvbGwueSArIHZpZXdwb3J0LmZyYW1lLmhlaWdodCxcbiAgICBsZWZ0OiBuZXdTY3JvbGwueCxcbiAgICByaWdodDogbmV3U2Nyb2xsLnggKyB2aWV3cG9ydC5mcmFtZS53aWR0aFxuICB9KTtcbiAgdmFyIHVwZGF0ZWQgPSB7XG4gICAgZnJhbWU6IGZyYW1lLFxuICAgIHNjcm9sbDoge1xuICAgICAgaW5pdGlhbDogdmlld3BvcnQuc2Nyb2xsLmluaXRpYWwsXG4gICAgICBtYXg6IHZpZXdwb3J0LnNjcm9sbC5tYXgsXG4gICAgICBjdXJyZW50OiBuZXdTY3JvbGwsXG4gICAgICBkaWZmOiB7XG4gICAgICAgIHZhbHVlOiBkaWZmLFxuICAgICAgICBkaXNwbGFjZW1lbnQ6IGRpc3BsYWNlbWVudFxuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgcmV0dXJuIHVwZGF0ZWQ7XG59KTtcblxudmFyIHdpdGhOZXdEaXNwbGFjZW1lbnQgPSAoZnVuY3Rpb24gKGltcGFjdCwgZGlzcGxhY2VkKSB7XG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgaW1wYWN0LCB7XG4gICAgbW92ZW1lbnQ6IF9leHRlbmRzKHt9LCBpbXBhY3QubW92ZW1lbnQsIHtcbiAgICAgIGRpc3BsYWNlZDogZGlzcGxhY2VkLFxuICAgICAgbWFwOiBnZXREaXNwbGFjZW1lbnRNYXAoZGlzcGxhY2VkKVxuICAgIH0pXG4gIH0pO1xufSk7XG5cbnZhciBzcGVjdWxhdGl2ZWx5SW5jcmVhc2UgPSAoZnVuY3Rpb24gKF9yZWYpIHtcbiAgdmFyIGltcGFjdCA9IF9yZWYuaW1wYWN0LFxuICAgICAgdmlld3BvcnQgPSBfcmVmLnZpZXdwb3J0LFxuICAgICAgZGVzdGluYXRpb24gPSBfcmVmLmRlc3RpbmF0aW9uLFxuICAgICAgZHJhZ2dhYmxlcyA9IF9yZWYuZHJhZ2dhYmxlcyxcbiAgICAgIG1heFNjcm9sbENoYW5nZSA9IF9yZWYubWF4U2Nyb2xsQ2hhbmdlLFxuICAgICAgb25MaWZ0ID0gX3JlZi5vbkxpZnQ7XG4gIHZhciBkaXNwbGFjZWQgPSBpbXBhY3QubW92ZW1lbnQuZGlzcGxhY2VkO1xuICB2YXIgc2Nyb2xsZWRWaWV3cG9ydCA9IHNjcm9sbFZpZXdwb3J0KHZpZXdwb3J0LCBhZGQodmlld3BvcnQuc2Nyb2xsLmN1cnJlbnQsIG1heFNjcm9sbENoYW5nZSkpO1xuICB2YXIgc2Nyb2xsZWREcm9wcGFibGUgPSBkZXN0aW5hdGlvbi5mcmFtZSA/IHNjcm9sbERyb3BwYWJsZShkZXN0aW5hdGlvbiwgYWRkKGRlc3RpbmF0aW9uLmZyYW1lLnNjcm9sbC5jdXJyZW50LCBtYXhTY3JvbGxDaGFuZ2UpKSA6IGRlc3RpbmF0aW9uO1xuICB2YXIgdXBkYXRlZCA9IGRpc3BsYWNlZC5tYXAoZnVuY3Rpb24gKGVudHJ5KSB7XG4gICAgaWYgKGVudHJ5LmlzVmlzaWJsZSkge1xuICAgICAgcmV0dXJuIGVudHJ5O1xuICAgIH1cblxuICAgIHZhciBkcmFnZ2FibGUgPSBkcmFnZ2FibGVzW2VudHJ5LmRyYWdnYWJsZUlkXTtcbiAgICB2YXIgd2l0aFNjcm9sbGVkVmlld3BvcnQgPSBnZXREaXNwbGFjZW1lbnQoe1xuICAgICAgZHJhZ2dhYmxlOiBkcmFnZ2FibGUsXG4gICAgICBkZXN0aW5hdGlvbjogZGVzdGluYXRpb24sXG4gICAgICBwcmV2aW91c0ltcGFjdDogaW1wYWN0LFxuICAgICAgdmlld3BvcnQ6IHNjcm9sbGVkVmlld3BvcnQuZnJhbWUsXG4gICAgICBvbkxpZnQ6IG9uTGlmdCxcbiAgICAgIGZvcmNlU2hvdWxkQW5pbWF0ZTogZmFsc2VcbiAgICB9KTtcblxuICAgIGlmICh3aXRoU2Nyb2xsZWRWaWV3cG9ydC5pc1Zpc2libGUpIHtcbiAgICAgIHJldHVybiB3aXRoU2Nyb2xsZWRWaWV3cG9ydDtcbiAgICB9XG5cbiAgICB2YXIgd2l0aFNjcm9sbGVkRHJvcHBhYmxlID0gZ2V0RGlzcGxhY2VtZW50KHtcbiAgICAgIGRyYWdnYWJsZTogZHJhZ2dhYmxlLFxuICAgICAgZGVzdGluYXRpb246IHNjcm9sbGVkRHJvcHBhYmxlLFxuICAgICAgcHJldmlvdXNJbXBhY3Q6IGltcGFjdCxcbiAgICAgIHZpZXdwb3J0OiB2aWV3cG9ydC5mcmFtZSxcbiAgICAgIG9uTGlmdDogb25MaWZ0LFxuICAgICAgZm9yY2VTaG91bGRBbmltYXRlOiBmYWxzZVxuICAgIH0pO1xuXG4gICAgaWYgKHdpdGhTY3JvbGxlZERyb3BwYWJsZS5pc1Zpc2libGUpIHtcbiAgICAgIHJldHVybiB3aXRoU2Nyb2xsZWREcm9wcGFibGU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGVudHJ5O1xuICB9KTtcbiAgcmV0dXJuIHdpdGhOZXdEaXNwbGFjZW1lbnQoaW1wYWN0LCB1cGRhdGVkKTtcbn0pO1xuXG52YXIgd2l0aFZpZXdwb3J0RGlzcGxhY2VtZW50ID0gKGZ1bmN0aW9uICh2aWV3cG9ydCwgcG9pbnQpIHtcbiAgcmV0dXJuIGFkZCh2aWV3cG9ydC5zY3JvbGwuZGlmZi5kaXNwbGFjZW1lbnQsIHBvaW50KTtcbn0pO1xuXG52YXIgZ2V0Q2xpZW50RnJvbVBhZ2VCb3JkZXJCb3hDZW50ZXIgPSAoZnVuY3Rpb24gKF9yZWYpIHtcbiAgdmFyIHBhZ2VCb3JkZXJCb3hDZW50ZXIgPSBfcmVmLnBhZ2VCb3JkZXJCb3hDZW50ZXIsXG4gICAgICBkcmFnZ2FibGUgPSBfcmVmLmRyYWdnYWJsZSxcbiAgICAgIHZpZXdwb3J0ID0gX3JlZi52aWV3cG9ydDtcbiAgdmFyIHdpdGhvdXRQYWdlU2Nyb2xsQ2hhbmdlID0gd2l0aFZpZXdwb3J0RGlzcGxhY2VtZW50KHZpZXdwb3J0LCBwYWdlQm9yZGVyQm94Q2VudGVyKTtcbiAgdmFyIG9mZnNldCA9IHN1YnRyYWN0KHdpdGhvdXRQYWdlU2Nyb2xsQ2hhbmdlLCBkcmFnZ2FibGUucGFnZS5ib3JkZXJCb3guY2VudGVyKTtcbiAgcmV0dXJuIGFkZChkcmFnZ2FibGUuY2xpZW50LmJvcmRlckJveC5jZW50ZXIsIG9mZnNldCk7XG59KTtcblxudmFyIGlzVG90YWxseVZpc2libGVJbk5ld0xvY2F0aW9uID0gKGZ1bmN0aW9uIChfcmVmKSB7XG4gIHZhciBkcmFnZ2FibGUgPSBfcmVmLmRyYWdnYWJsZSxcbiAgICAgIGRlc3RpbmF0aW9uID0gX3JlZi5kZXN0aW5hdGlvbixcbiAgICAgIG5ld1BhZ2VCb3JkZXJCb3hDZW50ZXIgPSBfcmVmLm5ld1BhZ2VCb3JkZXJCb3hDZW50ZXIsXG4gICAgICB2aWV3cG9ydCA9IF9yZWYudmlld3BvcnQsXG4gICAgICB3aXRoRHJvcHBhYmxlRGlzcGxhY2VtZW50ID0gX3JlZi53aXRoRHJvcHBhYmxlRGlzcGxhY2VtZW50LFxuICAgICAgX3JlZiRvbmx5T25NYWluQXhpcyA9IF9yZWYub25seU9uTWFpbkF4aXMsXG4gICAgICBvbmx5T25NYWluQXhpcyA9IF9yZWYkb25seU9uTWFpbkF4aXMgPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZiRvbmx5T25NYWluQXhpcztcbiAgdmFyIGNoYW5nZU5lZWRlZCA9IHN1YnRyYWN0KG5ld1BhZ2VCb3JkZXJCb3hDZW50ZXIsIGRyYWdnYWJsZS5wYWdlLmJvcmRlckJveC5jZW50ZXIpO1xuICB2YXIgc2hpZnRlZCA9IG9mZnNldEJ5UG9zaXRpb24oZHJhZ2dhYmxlLnBhZ2UuYm9yZGVyQm94LCBjaGFuZ2VOZWVkZWQpO1xuICB2YXIgYXJncyA9IHtcbiAgICB0YXJnZXQ6IHNoaWZ0ZWQsXG4gICAgZGVzdGluYXRpb246IGRlc3RpbmF0aW9uLFxuICAgIHdpdGhEcm9wcGFibGVEaXNwbGFjZW1lbnQ6IHdpdGhEcm9wcGFibGVEaXNwbGFjZW1lbnQsXG4gICAgdmlld3BvcnQ6IHZpZXdwb3J0XG4gIH07XG4gIHJldHVybiBvbmx5T25NYWluQXhpcyA/IGlzVG90YWxseVZpc2libGVPbkF4aXMoYXJncykgOiBpc1RvdGFsbHlWaXNpYmxlKGFyZ3MpO1xufSk7XG5cbnZhciBtb3ZlVG9OZXh0UGxhY2UgPSAoZnVuY3Rpb24gKF9yZWYpIHtcbiAgdmFyIGlzTW92aW5nRm9yd2FyZCA9IF9yZWYuaXNNb3ZpbmdGb3J3YXJkLFxuICAgICAgZHJhZ2dhYmxlID0gX3JlZi5kcmFnZ2FibGUsXG4gICAgICBkZXN0aW5hdGlvbiA9IF9yZWYuZGVzdGluYXRpb24sXG4gICAgICBkcmFnZ2FibGVzID0gX3JlZi5kcmFnZ2FibGVzLFxuICAgICAgcHJldmlvdXNJbXBhY3QgPSBfcmVmLnByZXZpb3VzSW1wYWN0LFxuICAgICAgdmlld3BvcnQgPSBfcmVmLnZpZXdwb3J0LFxuICAgICAgcHJldmlvdXNQYWdlQm9yZGVyQm94Q2VudGVyID0gX3JlZi5wcmV2aW91c1BhZ2VCb3JkZXJCb3hDZW50ZXIsXG4gICAgICBwcmV2aW91c0NsaWVudFNlbGVjdGlvbiA9IF9yZWYucHJldmlvdXNDbGllbnRTZWxlY3Rpb24sXG4gICAgICBvbkxpZnQgPSBfcmVmLm9uTGlmdDtcblxuICBpZiAoIWRlc3RpbmF0aW9uLmlzRW5hYmxlZCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgdmFyIGluc2lkZURlc3RpbmF0aW9uID0gZ2V0RHJhZ2dhYmxlc0luc2lkZURyb3BwYWJsZShkZXN0aW5hdGlvbi5kZXNjcmlwdG9yLmlkLCBkcmFnZ2FibGVzKTtcbiAgdmFyIGlzSW5Ib21lTGlzdCA9IGlzSG9tZU9mKGRyYWdnYWJsZSwgZGVzdGluYXRpb24pO1xuICB2YXIgaW1wYWN0ID0gbW92ZVRvTmV4dENvbWJpbmUoe1xuICAgIGlzSW5Ib21lTGlzdDogaXNJbkhvbWVMaXN0LFxuICAgIGlzTW92aW5nRm9yd2FyZDogaXNNb3ZpbmdGb3J3YXJkLFxuICAgIGRyYWdnYWJsZTogZHJhZ2dhYmxlLFxuICAgIGRlc3RpbmF0aW9uOiBkZXN0aW5hdGlvbixcbiAgICBpbnNpZGVEZXN0aW5hdGlvbjogaW5zaWRlRGVzdGluYXRpb24sXG4gICAgcHJldmlvdXNJbXBhY3Q6IHByZXZpb3VzSW1wYWN0XG4gIH0pIHx8IG1vdmVUb05leHRJbmRleCh7XG4gICAgaXNNb3ZpbmdGb3J3YXJkOiBpc01vdmluZ0ZvcndhcmQsXG4gICAgaXNJbkhvbWVMaXN0OiBpc0luSG9tZUxpc3QsXG4gICAgZHJhZ2dhYmxlOiBkcmFnZ2FibGUsXG4gICAgZHJhZ2dhYmxlczogZHJhZ2dhYmxlcyxcbiAgICBkZXN0aW5hdGlvbjogZGVzdGluYXRpb24sXG4gICAgaW5zaWRlRGVzdGluYXRpb246IGluc2lkZURlc3RpbmF0aW9uLFxuICAgIHByZXZpb3VzSW1wYWN0OiBwcmV2aW91c0ltcGFjdCxcbiAgICBvbkxpZnQ6IG9uTGlmdFxuICB9KTtcblxuICBpZiAoIWltcGFjdCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgdmFyIHBhZ2VCb3JkZXJCb3hDZW50ZXIgPSBnZXRQYWdlQm9yZGVyQm94Q2VudGVyRnJvbUltcGFjdCh7XG4gICAgaW1wYWN0OiBpbXBhY3QsXG4gICAgZHJhZ2dhYmxlOiBkcmFnZ2FibGUsXG4gICAgZHJvcHBhYmxlOiBkZXN0aW5hdGlvbixcbiAgICBkcmFnZ2FibGVzOiBkcmFnZ2FibGVzLFxuICAgIG9uTGlmdDogb25MaWZ0XG4gIH0pO1xuICB2YXIgaXNWaXNpYmxlSW5OZXdMb2NhdGlvbiA9IGlzVG90YWxseVZpc2libGVJbk5ld0xvY2F0aW9uKHtcbiAgICBkcmFnZ2FibGU6IGRyYWdnYWJsZSxcbiAgICBkZXN0aW5hdGlvbjogZGVzdGluYXRpb24sXG4gICAgbmV3UGFnZUJvcmRlckJveENlbnRlcjogcGFnZUJvcmRlckJveENlbnRlcixcbiAgICB2aWV3cG9ydDogdmlld3BvcnQuZnJhbWUsXG4gICAgd2l0aERyb3BwYWJsZURpc3BsYWNlbWVudDogZmFsc2UsXG4gICAgb25seU9uTWFpbkF4aXM6IHRydWVcbiAgfSk7XG5cbiAgaWYgKGlzVmlzaWJsZUluTmV3TG9jYXRpb24pIHtcbiAgICB2YXIgY2xpZW50U2VsZWN0aW9uID0gZ2V0Q2xpZW50RnJvbVBhZ2VCb3JkZXJCb3hDZW50ZXIoe1xuICAgICAgcGFnZUJvcmRlckJveENlbnRlcjogcGFnZUJvcmRlckJveENlbnRlcixcbiAgICAgIGRyYWdnYWJsZTogZHJhZ2dhYmxlLFxuICAgICAgdmlld3BvcnQ6IHZpZXdwb3J0XG4gICAgfSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGNsaWVudFNlbGVjdGlvbjogY2xpZW50U2VsZWN0aW9uLFxuICAgICAgaW1wYWN0OiBpbXBhY3QsXG4gICAgICBzY3JvbGxKdW1wUmVxdWVzdDogbnVsbFxuICAgIH07XG4gIH1cblxuICB2YXIgZGlzdGFuY2UgPSBzdWJ0cmFjdChwYWdlQm9yZGVyQm94Q2VudGVyLCBwcmV2aW91c1BhZ2VCb3JkZXJCb3hDZW50ZXIpO1xuICB2YXIgY2F1dGlvdXMgPSBzcGVjdWxhdGl2ZWx5SW5jcmVhc2Uoe1xuICAgIGltcGFjdDogaW1wYWN0LFxuICAgIHZpZXdwb3J0OiB2aWV3cG9ydCxcbiAgICBkZXN0aW5hdGlvbjogZGVzdGluYXRpb24sXG4gICAgZHJhZ2dhYmxlczogZHJhZ2dhYmxlcyxcbiAgICBtYXhTY3JvbGxDaGFuZ2U6IGRpc3RhbmNlLFxuICAgIG9uTGlmdDogb25MaWZ0XG4gIH0pO1xuICByZXR1cm4ge1xuICAgIGNsaWVudFNlbGVjdGlvbjogcHJldmlvdXNDbGllbnRTZWxlY3Rpb24sXG4gICAgaW1wYWN0OiBjYXV0aW91cyxcbiAgICBzY3JvbGxKdW1wUmVxdWVzdDogZGlzdGFuY2VcbiAgfTtcbn0pO1xuXG52YXIgZ2V0S25vd25BY3RpdmUgPSBmdW5jdGlvbiBnZXRLbm93bkFjdGl2ZShkcm9wcGFibGUpIHtcbiAgdmFyIHJlY3QgPSBkcm9wcGFibGUuc3ViamVjdC5hY3RpdmU7XG4gICFyZWN0ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnQ2Fubm90IGdldCBjbGlwcGVkIGFyZWEgZnJvbSBkcm9wcGFibGUnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHJldHVybiByZWN0O1xufTtcblxudmFyIGdldEJlc3RDcm9zc0F4aXNEcm9wcGFibGUgPSAoZnVuY3Rpb24gKF9yZWYpIHtcbiAgdmFyIGlzTW92aW5nRm9yd2FyZCA9IF9yZWYuaXNNb3ZpbmdGb3J3YXJkLFxuICAgICAgcGFnZUJvcmRlckJveENlbnRlciA9IF9yZWYucGFnZUJvcmRlckJveENlbnRlcixcbiAgICAgIHNvdXJjZSA9IF9yZWYuc291cmNlLFxuICAgICAgZHJvcHBhYmxlcyA9IF9yZWYuZHJvcHBhYmxlcyxcbiAgICAgIHZpZXdwb3J0ID0gX3JlZi52aWV3cG9ydDtcbiAgdmFyIGFjdGl2ZSA9IHNvdXJjZS5zdWJqZWN0LmFjdGl2ZTtcblxuICBpZiAoIWFjdGl2ZSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgdmFyIGF4aXMgPSBzb3VyY2UuYXhpcztcbiAgdmFyIGlzQmV0d2VlblNvdXJjZUNsaXBwZWQgPSBpc1dpdGhpbihhY3RpdmVbYXhpcy5zdGFydF0sIGFjdGl2ZVtheGlzLmVuZF0pO1xuICB2YXIgY2FuZGlkYXRlcyA9IHRvRHJvcHBhYmxlTGlzdChkcm9wcGFibGVzKS5maWx0ZXIoZnVuY3Rpb24gKGRyb3BwYWJsZSkge1xuICAgIHJldHVybiBkcm9wcGFibGUgIT09IHNvdXJjZTtcbiAgfSkuZmlsdGVyKGZ1bmN0aW9uIChkcm9wcGFibGUpIHtcbiAgICByZXR1cm4gZHJvcHBhYmxlLmlzRW5hYmxlZDtcbiAgfSkuZmlsdGVyKGZ1bmN0aW9uIChkcm9wcGFibGUpIHtcbiAgICByZXR1cm4gQm9vbGVhbihkcm9wcGFibGUuc3ViamVjdC5hY3RpdmUpO1xuICB9KS5maWx0ZXIoZnVuY3Rpb24gKGRyb3BwYWJsZSkge1xuICAgIHJldHVybiBpc1BhcnRpYWxseVZpc2libGVUaHJvdWdoRnJhbWUodmlld3BvcnQuZnJhbWUpKGdldEtub3duQWN0aXZlKGRyb3BwYWJsZSkpO1xuICB9KS5maWx0ZXIoZnVuY3Rpb24gKGRyb3BwYWJsZSkge1xuICAgIHZhciBhY3RpdmVPZlRhcmdldCA9IGdldEtub3duQWN0aXZlKGRyb3BwYWJsZSk7XG5cbiAgICBpZiAoaXNNb3ZpbmdGb3J3YXJkKSB7XG4gICAgICByZXR1cm4gYWN0aXZlW2F4aXMuY3Jvc3NBeGlzRW5kXSA8IGFjdGl2ZU9mVGFyZ2V0W2F4aXMuY3Jvc3NBeGlzRW5kXTtcbiAgICB9XG5cbiAgICByZXR1cm4gYWN0aXZlT2ZUYXJnZXRbYXhpcy5jcm9zc0F4aXNTdGFydF0gPCBhY3RpdmVbYXhpcy5jcm9zc0F4aXNTdGFydF07XG4gIH0pLmZpbHRlcihmdW5jdGlvbiAoZHJvcHBhYmxlKSB7XG4gICAgdmFyIGFjdGl2ZU9mVGFyZ2V0ID0gZ2V0S25vd25BY3RpdmUoZHJvcHBhYmxlKTtcbiAgICB2YXIgaXNCZXR3ZWVuRGVzdGluYXRpb25DbGlwcGVkID0gaXNXaXRoaW4oYWN0aXZlT2ZUYXJnZXRbYXhpcy5zdGFydF0sIGFjdGl2ZU9mVGFyZ2V0W2F4aXMuZW5kXSk7XG4gICAgcmV0dXJuIGlzQmV0d2VlblNvdXJjZUNsaXBwZWQoYWN0aXZlT2ZUYXJnZXRbYXhpcy5zdGFydF0pIHx8IGlzQmV0d2VlblNvdXJjZUNsaXBwZWQoYWN0aXZlT2ZUYXJnZXRbYXhpcy5lbmRdKSB8fCBpc0JldHdlZW5EZXN0aW5hdGlvbkNsaXBwZWQoYWN0aXZlW2F4aXMuc3RhcnRdKSB8fCBpc0JldHdlZW5EZXN0aW5hdGlvbkNsaXBwZWQoYWN0aXZlW2F4aXMuZW5kXSk7XG4gIH0pLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICB2YXIgZmlyc3QgPSBnZXRLbm93bkFjdGl2ZShhKVtheGlzLmNyb3NzQXhpc1N0YXJ0XTtcbiAgICB2YXIgc2Vjb25kID0gZ2V0S25vd25BY3RpdmUoYilbYXhpcy5jcm9zc0F4aXNTdGFydF07XG5cbiAgICBpZiAoaXNNb3ZpbmdGb3J3YXJkKSB7XG4gICAgICByZXR1cm4gZmlyc3QgLSBzZWNvbmQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHNlY29uZCAtIGZpcnN0O1xuICB9KS5maWx0ZXIoZnVuY3Rpb24gKGRyb3BwYWJsZSwgaW5kZXgsIGFycmF5KSB7XG4gICAgcmV0dXJuIGdldEtub3duQWN0aXZlKGRyb3BwYWJsZSlbYXhpcy5jcm9zc0F4aXNTdGFydF0gPT09IGdldEtub3duQWN0aXZlKGFycmF5WzBdKVtheGlzLmNyb3NzQXhpc1N0YXJ0XTtcbiAgfSk7XG5cbiAgaWYgKCFjYW5kaWRhdGVzLmxlbmd0aCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgaWYgKGNhbmRpZGF0ZXMubGVuZ3RoID09PSAxKSB7XG4gICAgcmV0dXJuIGNhbmRpZGF0ZXNbMF07XG4gIH1cblxuICB2YXIgY29udGFpbnMgPSBjYW5kaWRhdGVzLmZpbHRlcihmdW5jdGlvbiAoZHJvcHBhYmxlKSB7XG4gICAgdmFyIGlzV2l0aGluRHJvcHBhYmxlID0gaXNXaXRoaW4oZ2V0S25vd25BY3RpdmUoZHJvcHBhYmxlKVtheGlzLnN0YXJ0XSwgZ2V0S25vd25BY3RpdmUoZHJvcHBhYmxlKVtheGlzLmVuZF0pO1xuICAgIHJldHVybiBpc1dpdGhpbkRyb3BwYWJsZShwYWdlQm9yZGVyQm94Q2VudGVyW2F4aXMubGluZV0pO1xuICB9KTtcblxuICBpZiAoY29udGFpbnMubGVuZ3RoID09PSAxKSB7XG4gICAgcmV0dXJuIGNvbnRhaW5zWzBdO1xuICB9XG5cbiAgaWYgKGNvbnRhaW5zLmxlbmd0aCA+IDEpIHtcbiAgICByZXR1cm4gY29udGFpbnMuc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgICAgcmV0dXJuIGdldEtub3duQWN0aXZlKGEpW2F4aXMuc3RhcnRdIC0gZ2V0S25vd25BY3RpdmUoYilbYXhpcy5zdGFydF07XG4gICAgfSlbMF07XG4gIH1cblxuICByZXR1cm4gY2FuZGlkYXRlcy5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgdmFyIGZpcnN0ID0gY2xvc2VzdChwYWdlQm9yZGVyQm94Q2VudGVyLCBnZXRDb3JuZXJzKGdldEtub3duQWN0aXZlKGEpKSk7XG4gICAgdmFyIHNlY29uZCA9IGNsb3Nlc3QocGFnZUJvcmRlckJveENlbnRlciwgZ2V0Q29ybmVycyhnZXRLbm93bkFjdGl2ZShiKSkpO1xuXG4gICAgaWYgKGZpcnN0ICE9PSBzZWNvbmQpIHtcbiAgICAgIHJldHVybiBmaXJzdCAtIHNlY29uZDtcbiAgICB9XG5cbiAgICByZXR1cm4gZ2V0S25vd25BY3RpdmUoYSlbYXhpcy5zdGFydF0gLSBnZXRLbm93bkFjdGl2ZShiKVtheGlzLnN0YXJ0XTtcbiAgfSlbMF07XG59KTtcblxudmFyIGdldEN1cnJlbnRQYWdlQm9yZGVyQm94Q2VudGVyID0gZnVuY3Rpb24gZ2V0Q3VycmVudFBhZ2VCb3JkZXJCb3hDZW50ZXIoZHJhZ2dhYmxlLCBvbkxpZnQpIHtcbiAgdmFyIG9yaWdpbmFsID0gZHJhZ2dhYmxlLnBhZ2UuYm9yZGVyQm94LmNlbnRlcjtcbiAgcmV0dXJuIGRpZFN0YXJ0RGlzcGxhY2VkKGRyYWdnYWJsZS5kZXNjcmlwdG9yLmlkLCBvbkxpZnQpID8gc3VidHJhY3Qob3JpZ2luYWwsIG9uTGlmdC5kaXNwbGFjZWRCeS5wb2ludCkgOiBvcmlnaW5hbDtcbn07XG52YXIgZ2V0Q3VycmVudFBhZ2VCb3JkZXJCb3ggPSBmdW5jdGlvbiBnZXRDdXJyZW50UGFnZUJvcmRlckJveChkcmFnZ2FibGUsIG9uTGlmdCkge1xuICB2YXIgb3JpZ2luYWwgPSBkcmFnZ2FibGUucGFnZS5ib3JkZXJCb3g7XG4gIHJldHVybiBkaWRTdGFydERpc3BsYWNlZChkcmFnZ2FibGUuZGVzY3JpcHRvci5pZCwgb25MaWZ0KSA/IG9mZnNldEJ5UG9zaXRpb24ob3JpZ2luYWwsIG5lZ2F0ZShvbkxpZnQuZGlzcGxhY2VkQnkucG9pbnQpKSA6IG9yaWdpbmFsO1xufTtcblxudmFyIGdldENsb3Nlc3REcmFnZ2FibGUgPSAoZnVuY3Rpb24gKF9yZWYpIHtcbiAgdmFyIHBhZ2VCb3JkZXJCb3hDZW50ZXIgPSBfcmVmLnBhZ2VCb3JkZXJCb3hDZW50ZXIsXG4gICAgICB2aWV3cG9ydCA9IF9yZWYudmlld3BvcnQsXG4gICAgICBkZXN0aW5hdGlvbiA9IF9yZWYuZGVzdGluYXRpb24sXG4gICAgICBpbnNpZGVEZXN0aW5hdGlvbiA9IF9yZWYuaW5zaWRlRGVzdGluYXRpb24sXG4gICAgICBvbkxpZnQgPSBfcmVmLm9uTGlmdDtcbiAgdmFyIHNvcnRlZCA9IGluc2lkZURlc3RpbmF0aW9uLmZpbHRlcihmdW5jdGlvbiAoZHJhZ2dhYmxlKSB7XG4gICAgcmV0dXJuIGlzVG90YWxseVZpc2libGUoe1xuICAgICAgdGFyZ2V0OiBnZXRDdXJyZW50UGFnZUJvcmRlckJveChkcmFnZ2FibGUsIG9uTGlmdCksXG4gICAgICBkZXN0aW5hdGlvbjogZGVzdGluYXRpb24sXG4gICAgICB2aWV3cG9ydDogdmlld3BvcnQuZnJhbWUsXG4gICAgICB3aXRoRHJvcHBhYmxlRGlzcGxhY2VtZW50OiB0cnVlXG4gICAgfSk7XG4gIH0pLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICB2YXIgZGlzdGFuY2VUb0EgPSBkaXN0YW5jZShwYWdlQm9yZGVyQm94Q2VudGVyLCB3aXRoRHJvcHBhYmxlRGlzcGxhY2VtZW50KGRlc3RpbmF0aW9uLCBnZXRDdXJyZW50UGFnZUJvcmRlckJveENlbnRlcihhLCBvbkxpZnQpKSk7XG4gICAgdmFyIGRpc3RhbmNlVG9CID0gZGlzdGFuY2UocGFnZUJvcmRlckJveENlbnRlciwgd2l0aERyb3BwYWJsZURpc3BsYWNlbWVudChkZXN0aW5hdGlvbiwgZ2V0Q3VycmVudFBhZ2VCb3JkZXJCb3hDZW50ZXIoYiwgb25MaWZ0KSkpO1xuXG4gICAgaWYgKGRpc3RhbmNlVG9BIDwgZGlzdGFuY2VUb0IpIHtcbiAgICAgIHJldHVybiAtMTtcbiAgICB9XG5cbiAgICBpZiAoZGlzdGFuY2VUb0IgPCBkaXN0YW5jZVRvQSkge1xuICAgICAgcmV0dXJuIDE7XG4gICAgfVxuXG4gICAgcmV0dXJuIGEuZGVzY3JpcHRvci5pbmRleCAtIGIuZGVzY3JpcHRvci5pbmRleDtcbiAgfSk7XG4gIHJldHVybiBzb3J0ZWRbMF0gfHwgbnVsbDtcbn0pO1xuXG52YXIgbW92ZVRvTmV3RHJvcHBhYmxlID0gKGZ1bmN0aW9uIChfcmVmKSB7XG4gIHZhciBwcmV2aW91c1BhZ2VCb3JkZXJCb3hDZW50ZXIgPSBfcmVmLnByZXZpb3VzUGFnZUJvcmRlckJveENlbnRlcixcbiAgICAgIG1vdmVSZWxhdGl2ZVRvID0gX3JlZi5tb3ZlUmVsYXRpdmVUbyxcbiAgICAgIGluc2lkZURlc3RpbmF0aW9uID0gX3JlZi5pbnNpZGVEZXN0aW5hdGlvbixcbiAgICAgIGRyYWdnYWJsZSA9IF9yZWYuZHJhZ2dhYmxlLFxuICAgICAgZHJhZ2dhYmxlcyA9IF9yZWYuZHJhZ2dhYmxlcyxcbiAgICAgIGRlc3RpbmF0aW9uID0gX3JlZi5kZXN0aW5hdGlvbixcbiAgICAgIHByZXZpb3VzSW1wYWN0ID0gX3JlZi5wcmV2aW91c0ltcGFjdCxcbiAgICAgIHZpZXdwb3J0ID0gX3JlZi52aWV3cG9ydCxcbiAgICAgIG9uTGlmdCA9IF9yZWYub25MaWZ0O1xuXG4gIGlmICghbW92ZVJlbGF0aXZlVG8pIHtcbiAgICBpZiAoaW5zaWRlRGVzdGluYXRpb24ubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICB2YXIgcHJvcG9zZWQgPSB7XG4gICAgICBtb3ZlbWVudDogbm9Nb3ZlbWVudCxcbiAgICAgIGRlc3RpbmF0aW9uOiB7XG4gICAgICAgIGRyb3BwYWJsZUlkOiBkZXN0aW5hdGlvbi5kZXNjcmlwdG9yLmlkLFxuICAgICAgICBpbmRleDogMFxuICAgICAgfSxcbiAgICAgIG1lcmdlOiBudWxsXG4gICAgfTtcbiAgICB2YXIgcHJvcG9zZWRQYWdlQm9yZGVyQm94Q2VudGVyID0gZ2V0UGFnZUJvcmRlckJveENlbnRlckZyb21JbXBhY3Qoe1xuICAgICAgaW1wYWN0OiBwcm9wb3NlZCxcbiAgICAgIGRyYWdnYWJsZTogZHJhZ2dhYmxlLFxuICAgICAgZHJvcHBhYmxlOiBkZXN0aW5hdGlvbixcbiAgICAgIGRyYWdnYWJsZXM6IGRyYWdnYWJsZXMsXG4gICAgICBvbkxpZnQ6IG9uTGlmdFxuICAgIH0pO1xuICAgIHZhciB3aXRoUGxhY2Vob2xkZXIgPSBpc0hvbWVPZihkcmFnZ2FibGUsIGRlc3RpbmF0aW9uKSA/IGRlc3RpbmF0aW9uIDogYWRkUGxhY2Vob2xkZXIoZGVzdGluYXRpb24sIGRyYWdnYWJsZSwgZHJhZ2dhYmxlcyk7XG4gICAgdmFyIGlzVmlzaWJsZUluTmV3TG9jYXRpb24gPSBpc1RvdGFsbHlWaXNpYmxlSW5OZXdMb2NhdGlvbih7XG4gICAgICBkcmFnZ2FibGU6IGRyYWdnYWJsZSxcbiAgICAgIGRlc3RpbmF0aW9uOiB3aXRoUGxhY2Vob2xkZXIsXG4gICAgICBuZXdQYWdlQm9yZGVyQm94Q2VudGVyOiBwcm9wb3NlZFBhZ2VCb3JkZXJCb3hDZW50ZXIsXG4gICAgICB2aWV3cG9ydDogdmlld3BvcnQuZnJhbWUsXG4gICAgICB3aXRoRHJvcHBhYmxlRGlzcGxhY2VtZW50OiBmYWxzZSxcbiAgICAgIG9ubHlPbk1haW5BeGlzOiB0cnVlXG4gICAgfSk7XG4gICAgcmV0dXJuIGlzVmlzaWJsZUluTmV3TG9jYXRpb24gPyBwcm9wb3NlZCA6IG51bGw7XG4gIH1cblxuICB2YXIgaXNHb2luZ0JlZm9yZVRhcmdldCA9IEJvb2xlYW4ocHJldmlvdXNQYWdlQm9yZGVyQm94Q2VudGVyW2Rlc3RpbmF0aW9uLmF4aXMubGluZV0gPCBtb3ZlUmVsYXRpdmVUby5wYWdlLmJvcmRlckJveC5jZW50ZXJbZGVzdGluYXRpb24uYXhpcy5saW5lXSk7XG4gIHZhciB0YXJnZXRJbmRleCA9IGluc2lkZURlc3RpbmF0aW9uLmluZGV4T2YobW92ZVJlbGF0aXZlVG8pO1xuICAhKHRhcmdldEluZGV4ICE9PSAtMSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdDYW5ub3QgZmluZCB0YXJnZXQgaW4gbGlzdCcpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcblxuICB2YXIgcHJvcG9zZWRJbmRleCA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAobW92ZVJlbGF0aXZlVG8uZGVzY3JpcHRvci5pZCA9PT0gZHJhZ2dhYmxlLmRlc2NyaXB0b3IuaWQpIHtcbiAgICAgIHJldHVybiB0YXJnZXRJbmRleDtcbiAgICB9XG5cbiAgICBpZiAoaXNHb2luZ0JlZm9yZVRhcmdldCkge1xuICAgICAgcmV0dXJuIHRhcmdldEluZGV4O1xuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXRJbmRleCArIDE7XG4gIH0oKTtcblxuICB2YXIgZGlzcGxhY2VkID0gcmVtb3ZlRHJhZ2dhYmxlRnJvbUxpc3QoZHJhZ2dhYmxlLCBpbnNpZGVEZXN0aW5hdGlvbikuc2xpY2UocHJvcG9zZWRJbmRleCkubWFwKGZ1bmN0aW9uIChkaW1lbnNpb24pIHtcbiAgICByZXR1cm4gZ2V0RGlzcGxhY2VtZW50KHtcbiAgICAgIGRyYWdnYWJsZTogZGltZW5zaW9uLFxuICAgICAgZGVzdGluYXRpb246IGRlc3RpbmF0aW9uLFxuICAgICAgdmlld3BvcnQ6IHZpZXdwb3J0LmZyYW1lLFxuICAgICAgcHJldmlvdXNJbXBhY3Q6IHByZXZpb3VzSW1wYWN0LFxuICAgICAgb25MaWZ0OiBvbkxpZnRcbiAgICB9KTtcbiAgfSk7XG4gIHZhciBkaXNwbGFjZWRCeSA9IGdldERpc3BsYWNlZEJ5KGRlc3RpbmF0aW9uLmF4aXMsIGRyYWdnYWJsZS5kaXNwbGFjZUJ5KTtcbiAgdmFyIGltcGFjdCA9IHtcbiAgICBtb3ZlbWVudDoge1xuICAgICAgZGlzcGxhY2VkQnk6IGRpc3BsYWNlZEJ5LFxuICAgICAgZGlzcGxhY2VkOiBkaXNwbGFjZWQsXG4gICAgICBtYXA6IGdldERpc3BsYWNlbWVudE1hcChkaXNwbGFjZWQpXG4gICAgfSxcbiAgICBkZXN0aW5hdGlvbjoge1xuICAgICAgZHJvcHBhYmxlSWQ6IGRlc3RpbmF0aW9uLmRlc2NyaXB0b3IuaWQsXG4gICAgICBpbmRleDogcHJvcG9zZWRJbmRleFxuICAgIH0sXG4gICAgbWVyZ2U6IG51bGxcbiAgfTtcbiAgcmV0dXJuIGltcGFjdDtcbn0pO1xuXG52YXIgbW92ZUNyb3NzQXhpcyA9IChmdW5jdGlvbiAoX3JlZikge1xuICB2YXIgaXNNb3ZpbmdGb3J3YXJkID0gX3JlZi5pc01vdmluZ0ZvcndhcmQsXG4gICAgICBwcmV2aW91c1BhZ2VCb3JkZXJCb3hDZW50ZXIgPSBfcmVmLnByZXZpb3VzUGFnZUJvcmRlckJveENlbnRlcixcbiAgICAgIGRyYWdnYWJsZSA9IF9yZWYuZHJhZ2dhYmxlLFxuICAgICAgaXNPdmVyID0gX3JlZi5pc092ZXIsXG4gICAgICBkcmFnZ2FibGVzID0gX3JlZi5kcmFnZ2FibGVzLFxuICAgICAgZHJvcHBhYmxlcyA9IF9yZWYuZHJvcHBhYmxlcyxcbiAgICAgIHByZXZpb3VzSW1wYWN0ID0gX3JlZi5wcmV2aW91c0ltcGFjdCxcbiAgICAgIHZpZXdwb3J0ID0gX3JlZi52aWV3cG9ydCxcbiAgICAgIG9uTGlmdCA9IF9yZWYub25MaWZ0O1xuICB2YXIgZGVzdGluYXRpb24gPSBnZXRCZXN0Q3Jvc3NBeGlzRHJvcHBhYmxlKHtcbiAgICBpc01vdmluZ0ZvcndhcmQ6IGlzTW92aW5nRm9yd2FyZCxcbiAgICBwYWdlQm9yZGVyQm94Q2VudGVyOiBwcmV2aW91c1BhZ2VCb3JkZXJCb3hDZW50ZXIsXG4gICAgc291cmNlOiBpc092ZXIsXG4gICAgZHJvcHBhYmxlczogZHJvcHBhYmxlcyxcbiAgICB2aWV3cG9ydDogdmlld3BvcnRcbiAgfSk7XG5cbiAgaWYgKCFkZXN0aW5hdGlvbikge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgdmFyIGluc2lkZURlc3RpbmF0aW9uID0gZ2V0RHJhZ2dhYmxlc0luc2lkZURyb3BwYWJsZShkZXN0aW5hdGlvbi5kZXNjcmlwdG9yLmlkLCBkcmFnZ2FibGVzKTtcbiAgdmFyIG1vdmVSZWxhdGl2ZVRvID0gZ2V0Q2xvc2VzdERyYWdnYWJsZSh7XG4gICAgcGFnZUJvcmRlckJveENlbnRlcjogcHJldmlvdXNQYWdlQm9yZGVyQm94Q2VudGVyLFxuICAgIHZpZXdwb3J0OiB2aWV3cG9ydCxcbiAgICBkZXN0aW5hdGlvbjogZGVzdGluYXRpb24sXG4gICAgaW5zaWRlRGVzdGluYXRpb246IGluc2lkZURlc3RpbmF0aW9uLFxuICAgIG9uTGlmdDogb25MaWZ0XG4gIH0pO1xuICB2YXIgaW1wYWN0ID0gbW92ZVRvTmV3RHJvcHBhYmxlKHtcbiAgICBwcmV2aW91c1BhZ2VCb3JkZXJCb3hDZW50ZXI6IHByZXZpb3VzUGFnZUJvcmRlckJveENlbnRlcixcbiAgICBkZXN0aW5hdGlvbjogZGVzdGluYXRpb24sXG4gICAgZHJhZ2dhYmxlOiBkcmFnZ2FibGUsXG4gICAgZHJhZ2dhYmxlczogZHJhZ2dhYmxlcyxcbiAgICBtb3ZlUmVsYXRpdmVUbzogbW92ZVJlbGF0aXZlVG8sXG4gICAgaW5zaWRlRGVzdGluYXRpb246IGluc2lkZURlc3RpbmF0aW9uLFxuICAgIHByZXZpb3VzSW1wYWN0OiBwcmV2aW91c0ltcGFjdCxcbiAgICB2aWV3cG9ydDogdmlld3BvcnQsXG4gICAgb25MaWZ0OiBvbkxpZnRcbiAgfSk7XG5cbiAgaWYgKCFpbXBhY3QpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHZhciBwYWdlQm9yZGVyQm94Q2VudGVyID0gZ2V0UGFnZUJvcmRlckJveENlbnRlckZyb21JbXBhY3Qoe1xuICAgIGltcGFjdDogaW1wYWN0LFxuICAgIGRyYWdnYWJsZTogZHJhZ2dhYmxlLFxuICAgIGRyb3BwYWJsZTogZGVzdGluYXRpb24sXG4gICAgZHJhZ2dhYmxlczogZHJhZ2dhYmxlcyxcbiAgICBvbkxpZnQ6IG9uTGlmdFxuICB9KTtcbiAgdmFyIGNsaWVudFNlbGVjdGlvbiA9IGdldENsaWVudEZyb21QYWdlQm9yZGVyQm94Q2VudGVyKHtcbiAgICBwYWdlQm9yZGVyQm94Q2VudGVyOiBwYWdlQm9yZGVyQm94Q2VudGVyLFxuICAgIGRyYWdnYWJsZTogZHJhZ2dhYmxlLFxuICAgIHZpZXdwb3J0OiB2aWV3cG9ydFxuICB9KTtcbiAgcmV0dXJuIHtcbiAgICBjbGllbnRTZWxlY3Rpb246IGNsaWVudFNlbGVjdGlvbixcbiAgICBpbXBhY3Q6IGltcGFjdCxcbiAgICBzY3JvbGxKdW1wUmVxdWVzdDogbnVsbFxuICB9O1xufSk7XG5cbnZhciBnZXREcm9wcGFibGVPdmVyJDEgPSBmdW5jdGlvbiBnZXREcm9wcGFibGVPdmVyKGltcGFjdCwgZHJvcHBhYmxlcykge1xuICB2YXIgaWQgPSB3aGF0SXNEcmFnZ2VkT3ZlcihpbXBhY3QpO1xuICByZXR1cm4gaWQgPyBkcm9wcGFibGVzW2lkXSA6IG51bGw7XG59O1xuXG52YXIgbW92ZUluRGlyZWN0aW9uID0gKGZ1bmN0aW9uIChfcmVmKSB7XG4gIHZhciBzdGF0ZSA9IF9yZWYuc3RhdGUsXG4gICAgICB0eXBlID0gX3JlZi50eXBlO1xuICB2YXIgaXNBY3R1YWxseU92ZXIgPSBnZXREcm9wcGFibGVPdmVyJDEoc3RhdGUuaW1wYWN0LCBzdGF0ZS5kaW1lbnNpb25zLmRyb3BwYWJsZXMpO1xuICB2YXIgaXNNYWluQXhpc01vdmVtZW50QWxsb3dlZCA9IEJvb2xlYW4oaXNBY3R1YWxseU92ZXIpO1xuICB2YXIgaG9tZSA9IHN0YXRlLmRpbWVuc2lvbnMuZHJvcHBhYmxlc1tzdGF0ZS5jcml0aWNhbC5kcm9wcGFibGUuaWRdO1xuICB2YXIgaXNPdmVyID0gaXNBY3R1YWxseU92ZXIgfHwgaG9tZTtcbiAgdmFyIGRpcmVjdGlvbiA9IGlzT3Zlci5heGlzLmRpcmVjdGlvbjtcbiAgdmFyIGlzTW92aW5nT25NYWluQXhpcyA9IGRpcmVjdGlvbiA9PT0gJ3ZlcnRpY2FsJyAmJiAodHlwZSA9PT0gJ01PVkVfVVAnIHx8IHR5cGUgPT09ICdNT1ZFX0RPV04nKSB8fCBkaXJlY3Rpb24gPT09ICdob3Jpem9udGFsJyAmJiAodHlwZSA9PT0gJ01PVkVfTEVGVCcgfHwgdHlwZSA9PT0gJ01PVkVfUklHSFQnKTtcblxuICBpZiAoaXNNb3ZpbmdPbk1haW5BeGlzICYmICFpc01haW5BeGlzTW92ZW1lbnRBbGxvd2VkKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICB2YXIgaXNNb3ZpbmdGb3J3YXJkID0gdHlwZSA9PT0gJ01PVkVfRE9XTicgfHwgdHlwZSA9PT0gJ01PVkVfUklHSFQnO1xuICB2YXIgZHJhZ2dhYmxlID0gc3RhdGUuZGltZW5zaW9ucy5kcmFnZ2FibGVzW3N0YXRlLmNyaXRpY2FsLmRyYWdnYWJsZS5pZF07XG4gIHZhciBwcmV2aW91c1BhZ2VCb3JkZXJCb3hDZW50ZXIgPSBzdGF0ZS5jdXJyZW50LnBhZ2UuYm9yZGVyQm94Q2VudGVyO1xuICB2YXIgX3N0YXRlJGRpbWVuc2lvbnMgPSBzdGF0ZS5kaW1lbnNpb25zLFxuICAgICAgZHJhZ2dhYmxlcyA9IF9zdGF0ZSRkaW1lbnNpb25zLmRyYWdnYWJsZXMsXG4gICAgICBkcm9wcGFibGVzID0gX3N0YXRlJGRpbWVuc2lvbnMuZHJvcHBhYmxlcztcbiAgcmV0dXJuIGlzTW92aW5nT25NYWluQXhpcyA/IG1vdmVUb05leHRQbGFjZSh7XG4gICAgaXNNb3ZpbmdGb3J3YXJkOiBpc01vdmluZ0ZvcndhcmQsXG4gICAgcHJldmlvdXNQYWdlQm9yZGVyQm94Q2VudGVyOiBwcmV2aW91c1BhZ2VCb3JkZXJCb3hDZW50ZXIsXG4gICAgZHJhZ2dhYmxlOiBkcmFnZ2FibGUsXG4gICAgZGVzdGluYXRpb246IGlzT3ZlcixcbiAgICBkcmFnZ2FibGVzOiBkcmFnZ2FibGVzLFxuICAgIHZpZXdwb3J0OiBzdGF0ZS52aWV3cG9ydCxcbiAgICBwcmV2aW91c0NsaWVudFNlbGVjdGlvbjogc3RhdGUuY3VycmVudC5jbGllbnQuc2VsZWN0aW9uLFxuICAgIHByZXZpb3VzSW1wYWN0OiBzdGF0ZS5pbXBhY3QsXG4gICAgb25MaWZ0OiBzdGF0ZS5vbkxpZnRcbiAgfSkgOiBtb3ZlQ3Jvc3NBeGlzKHtcbiAgICBpc01vdmluZ0ZvcndhcmQ6IGlzTW92aW5nRm9yd2FyZCxcbiAgICBwcmV2aW91c1BhZ2VCb3JkZXJCb3hDZW50ZXI6IHByZXZpb3VzUGFnZUJvcmRlckJveENlbnRlcixcbiAgICBkcmFnZ2FibGU6IGRyYWdnYWJsZSxcbiAgICBpc092ZXI6IGlzT3ZlcixcbiAgICBkcmFnZ2FibGVzOiBkcmFnZ2FibGVzLFxuICAgIGRyb3BwYWJsZXM6IGRyb3BwYWJsZXMsXG4gICAgcHJldmlvdXNJbXBhY3Q6IHN0YXRlLmltcGFjdCxcbiAgICB2aWV3cG9ydDogc3RhdGUudmlld3BvcnQsXG4gICAgb25MaWZ0OiBzdGF0ZS5vbkxpZnRcbiAgfSk7XG59KTtcblxuZnVuY3Rpb24gaXNNb3ZlbWVudEFsbG93ZWQoc3RhdGUpIHtcbiAgcmV0dXJuIHN0YXRlLnBoYXNlID09PSAnRFJBR0dJTkcnIHx8IHN0YXRlLnBoYXNlID09PSAnQ09MTEVDVElORyc7XG59XG5cbnZhciBnZXRWZXJ0aWNhbCA9IGZ1bmN0aW9uIGdldFZlcnRpY2FsKHByZXZpb3VzLCBkaWZmKSB7XG4gIGlmIChkaWZmID09PSAwKSB7XG4gICAgcmV0dXJuIHByZXZpb3VzO1xuICB9XG5cbiAgcmV0dXJuIGRpZmYgPiAwID8gJ2Rvd24nIDogJ3VwJztcbn07XG5cbnZhciBnZXRIb3Jpem9udGFsID0gZnVuY3Rpb24gZ2V0SG9yaXpvbnRhbChwcmV2aW91cywgZGlmZikge1xuICBpZiAoZGlmZiA9PT0gMCkge1xuICAgIHJldHVybiBwcmV2aW91cztcbiAgfVxuXG4gIHJldHVybiBkaWZmID4gMCA/ICdyaWdodCcgOiAnbGVmdCc7XG59O1xuXG52YXIgZ2V0VXNlckRpcmVjdGlvbiA9IChmdW5jdGlvbiAocHJldmlvdXMsIG9sZFBhZ2VCb3JkZXJCb3hDZW50ZXIsIG5ld1BhZ2VCb3JkZXJCb3hDZW50ZXIpIHtcbiAgdmFyIGRpZmYgPSBzdWJ0cmFjdChuZXdQYWdlQm9yZGVyQm94Q2VudGVyLCBvbGRQYWdlQm9yZGVyQm94Q2VudGVyKTtcbiAgcmV0dXJuIHtcbiAgICBob3Jpem9udGFsOiBnZXRIb3Jpem9udGFsKHByZXZpb3VzLmhvcml6b250YWwsIGRpZmYueCksXG4gICAgdmVydGljYWw6IGdldFZlcnRpY2FsKHByZXZpb3VzLnZlcnRpY2FsLCBkaWZmLnkpXG4gIH07XG59KTtcblxudmFyIHVwZGF0ZSA9IChmdW5jdGlvbiAoX3JlZikge1xuICB2YXIgc3RhdGUgPSBfcmVmLnN0YXRlLFxuICAgICAgZm9yY2VkQ2xpZW50U2VsZWN0aW9uID0gX3JlZi5jbGllbnRTZWxlY3Rpb24sXG4gICAgICBmb3JjZWREaW1lbnNpb25zID0gX3JlZi5kaW1lbnNpb25zLFxuICAgICAgZm9yY2VkVmlld3BvcnQgPSBfcmVmLnZpZXdwb3J0LFxuICAgICAgZm9yY2VkSW1wYWN0ID0gX3JlZi5pbXBhY3QsXG4gICAgICBzY3JvbGxKdW1wUmVxdWVzdCA9IF9yZWYuc2Nyb2xsSnVtcFJlcXVlc3Q7XG4gIHZhciB2aWV3cG9ydCA9IGZvcmNlZFZpZXdwb3J0IHx8IHN0YXRlLnZpZXdwb3J0O1xuICB2YXIgY3VycmVudFdpbmRvd1Njcm9sbCA9IHZpZXdwb3J0LnNjcm9sbC5jdXJyZW50O1xuICB2YXIgZGltZW5zaW9ucyA9IGZvcmNlZERpbWVuc2lvbnMgfHwgc3RhdGUuZGltZW5zaW9ucztcbiAgdmFyIGNsaWVudFNlbGVjdGlvbiA9IGZvcmNlZENsaWVudFNlbGVjdGlvbiB8fCBzdGF0ZS5jdXJyZW50LmNsaWVudC5zZWxlY3Rpb247XG4gIHZhciBvZmZzZXQgPSBzdWJ0cmFjdChjbGllbnRTZWxlY3Rpb24sIHN0YXRlLmluaXRpYWwuY2xpZW50LnNlbGVjdGlvbik7XG4gIHZhciBjbGllbnQgPSB7XG4gICAgb2Zmc2V0OiBvZmZzZXQsXG4gICAgc2VsZWN0aW9uOiBjbGllbnRTZWxlY3Rpb24sXG4gICAgYm9yZGVyQm94Q2VudGVyOiBhZGQoc3RhdGUuaW5pdGlhbC5jbGllbnQuYm9yZGVyQm94Q2VudGVyLCBvZmZzZXQpXG4gIH07XG4gIHZhciBwYWdlID0ge1xuICAgIHNlbGVjdGlvbjogYWRkKGNsaWVudC5zZWxlY3Rpb24sIGN1cnJlbnRXaW5kb3dTY3JvbGwpLFxuICAgIGJvcmRlckJveENlbnRlcjogYWRkKGNsaWVudC5ib3JkZXJCb3hDZW50ZXIsIGN1cnJlbnRXaW5kb3dTY3JvbGwpXG4gIH07XG4gIHZhciBjdXJyZW50ID0ge1xuICAgIGNsaWVudDogY2xpZW50LFxuICAgIHBhZ2U6IHBhZ2VcbiAgfTtcbiAgdmFyIHVzZXJEaXJlY3Rpb24gPSBnZXRVc2VyRGlyZWN0aW9uKHN0YXRlLnVzZXJEaXJlY3Rpb24sIHN0YXRlLmN1cnJlbnQucGFnZS5ib3JkZXJCb3hDZW50ZXIsIGN1cnJlbnQucGFnZS5ib3JkZXJCb3hDZW50ZXIpO1xuXG4gIGlmIChzdGF0ZS5waGFzZSA9PT0gJ0NPTExFQ1RJTkcnKSB7XG4gICAgcmV0dXJuIF9leHRlbmRzKHtcbiAgICAgIHBoYXNlOiAnQ09MTEVDVElORydcbiAgICB9LCBzdGF0ZSwge1xuICAgICAgZGltZW5zaW9uczogZGltZW5zaW9ucyxcbiAgICAgIHZpZXdwb3J0OiB2aWV3cG9ydCxcbiAgICAgIGN1cnJlbnQ6IGN1cnJlbnQsXG4gICAgICB1c2VyRGlyZWN0aW9uOiB1c2VyRGlyZWN0aW9uXG4gICAgfSk7XG4gIH1cblxuICB2YXIgZHJhZ2dhYmxlID0gZGltZW5zaW9ucy5kcmFnZ2FibGVzW3N0YXRlLmNyaXRpY2FsLmRyYWdnYWJsZS5pZF07XG4gIHZhciBuZXdJbXBhY3QgPSBmb3JjZWRJbXBhY3QgfHwgZ2V0RHJhZ0ltcGFjdCh7XG4gICAgcGFnZUJvcmRlckJveENlbnRlcjogcGFnZS5ib3JkZXJCb3hDZW50ZXIsXG4gICAgZHJhZ2dhYmxlOiBkcmFnZ2FibGUsXG4gICAgZHJhZ2dhYmxlczogZGltZW5zaW9ucy5kcmFnZ2FibGVzLFxuICAgIGRyb3BwYWJsZXM6IGRpbWVuc2lvbnMuZHJvcHBhYmxlcyxcbiAgICBwcmV2aW91c0ltcGFjdDogc3RhdGUuaW1wYWN0LFxuICAgIHZpZXdwb3J0OiB2aWV3cG9ydCxcbiAgICB1c2VyRGlyZWN0aW9uOiB1c2VyRGlyZWN0aW9uLFxuICAgIG9uTGlmdDogc3RhdGUub25MaWZ0XG4gIH0pO1xuICB2YXIgd2l0aFVwZGF0ZWRQbGFjZWhvbGRlcnMgPSByZWNvbXB1dGVQbGFjZWhvbGRlcnMoe1xuICAgIGRyYWdnYWJsZTogZHJhZ2dhYmxlLFxuICAgIGltcGFjdDogbmV3SW1wYWN0LFxuICAgIHByZXZpb3VzSW1wYWN0OiBzdGF0ZS5pbXBhY3QsXG4gICAgZHJhZ2dhYmxlczogZGltZW5zaW9ucy5kcmFnZ2FibGVzLFxuICAgIGRyb3BwYWJsZXM6IGRpbWVuc2lvbnMuZHJvcHBhYmxlc1xuICB9KTtcblxuICB2YXIgcmVzdWx0ID0gX2V4dGVuZHMoe30sIHN0YXRlLCB7XG4gICAgY3VycmVudDogY3VycmVudCxcbiAgICB1c2VyRGlyZWN0aW9uOiB1c2VyRGlyZWN0aW9uLFxuICAgIGRpbWVuc2lvbnM6IHtcbiAgICAgIGRyYWdnYWJsZXM6IGRpbWVuc2lvbnMuZHJhZ2dhYmxlcyxcbiAgICAgIGRyb3BwYWJsZXM6IHdpdGhVcGRhdGVkUGxhY2Vob2xkZXJzXG4gICAgfSxcbiAgICBpbXBhY3Q6IG5ld0ltcGFjdCxcbiAgICB2aWV3cG9ydDogdmlld3BvcnQsXG4gICAgc2Nyb2xsSnVtcFJlcXVlc3Q6IHNjcm9sbEp1bXBSZXF1ZXN0IHx8IG51bGwsXG4gICAgZm9yY2VTaG91bGRBbmltYXRlOiBzY3JvbGxKdW1wUmVxdWVzdCA/IGZhbHNlIDogbnVsbFxuICB9KTtcblxuICByZXR1cm4gcmVzdWx0O1xufSk7XG5cbnZhciByZWNvbXB1dGUgPSAoZnVuY3Rpb24gKF9yZWYpIHtcbiAgdmFyIGltcGFjdCA9IF9yZWYuaW1wYWN0LFxuICAgICAgdmlld3BvcnQgPSBfcmVmLnZpZXdwb3J0LFxuICAgICAgZGVzdGluYXRpb24gPSBfcmVmLmRlc3RpbmF0aW9uLFxuICAgICAgZHJhZ2dhYmxlcyA9IF9yZWYuZHJhZ2dhYmxlcyxcbiAgICAgIG9uTGlmdCA9IF9yZWYub25MaWZ0LFxuICAgICAgZm9yY2VTaG91bGRBbmltYXRlID0gX3JlZi5mb3JjZVNob3VsZEFuaW1hdGU7XG4gIHZhciB1cGRhdGVkID0gaW1wYWN0Lm1vdmVtZW50LmRpc3BsYWNlZC5tYXAoZnVuY3Rpb24gKGVudHJ5KSB7XG4gICAgcmV0dXJuIGdldERpc3BsYWNlbWVudCh7XG4gICAgICBkcmFnZ2FibGU6IGRyYWdnYWJsZXNbZW50cnkuZHJhZ2dhYmxlSWRdLFxuICAgICAgZGVzdGluYXRpb246IGRlc3RpbmF0aW9uLFxuICAgICAgcHJldmlvdXNJbXBhY3Q6IGltcGFjdCxcbiAgICAgIHZpZXdwb3J0OiB2aWV3cG9ydC5mcmFtZSxcbiAgICAgIG9uTGlmdDogb25MaWZ0LFxuICAgICAgZm9yY2VTaG91bGRBbmltYXRlOiBmb3JjZVNob3VsZEFuaW1hdGVcbiAgICB9KTtcbiAgfSk7XG4gIHJldHVybiB3aXRoTmV3RGlzcGxhY2VtZW50KGltcGFjdCwgdXBkYXRlZCk7XG59KTtcblxudmFyIGdldENsaWVudEJvcmRlckJveENlbnRlciA9IChmdW5jdGlvbiAoX3JlZikge1xuICB2YXIgaW1wYWN0ID0gX3JlZi5pbXBhY3QsXG4gICAgICBkcmFnZ2FibGUgPSBfcmVmLmRyYWdnYWJsZSxcbiAgICAgIGRyb3BwYWJsZSA9IF9yZWYuZHJvcHBhYmxlLFxuICAgICAgZHJhZ2dhYmxlcyA9IF9yZWYuZHJhZ2dhYmxlcyxcbiAgICAgIHZpZXdwb3J0ID0gX3JlZi52aWV3cG9ydCxcbiAgICAgIG9uTGlmdCA9IF9yZWYub25MaWZ0O1xuICB2YXIgcGFnZUJvcmRlckJveENlbnRlciA9IGdldFBhZ2VCb3JkZXJCb3hDZW50ZXJGcm9tSW1wYWN0KHtcbiAgICBpbXBhY3Q6IGltcGFjdCxcbiAgICBkcmFnZ2FibGU6IGRyYWdnYWJsZSxcbiAgICBkcmFnZ2FibGVzOiBkcmFnZ2FibGVzLFxuICAgIGRyb3BwYWJsZTogZHJvcHBhYmxlLFxuICAgIG9uTGlmdDogb25MaWZ0XG4gIH0pO1xuICByZXR1cm4gZ2V0Q2xpZW50RnJvbVBhZ2VCb3JkZXJCb3hDZW50ZXIoe1xuICAgIHBhZ2VCb3JkZXJCb3hDZW50ZXI6IHBhZ2VCb3JkZXJCb3hDZW50ZXIsXG4gICAgZHJhZ2dhYmxlOiBkcmFnZ2FibGUsXG4gICAgdmlld3BvcnQ6IHZpZXdwb3J0XG4gIH0pO1xufSk7XG5cbnZhciByZWZyZXNoU25hcCA9IChmdW5jdGlvbiAoX3JlZikge1xuICB2YXIgc3RhdGUgPSBfcmVmLnN0YXRlLFxuICAgICAgZm9yY2VkRGltZW5zaW9ucyA9IF9yZWYuZGltZW5zaW9ucyxcbiAgICAgIGZvcmNlZFZpZXdwb3J0ID0gX3JlZi52aWV3cG9ydDtcbiAgIShzdGF0ZS5tb3ZlbWVudE1vZGUgPT09ICdTTkFQJykgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgdmFyIG5lZWRzVmlzaWJpbGl0eUNoZWNrID0gc3RhdGUuaW1wYWN0O1xuICB2YXIgdmlld3BvcnQgPSBmb3JjZWRWaWV3cG9ydCB8fCBzdGF0ZS52aWV3cG9ydDtcbiAgdmFyIGRpbWVuc2lvbnMgPSBmb3JjZWREaW1lbnNpb25zIHx8IHN0YXRlLmRpbWVuc2lvbnM7XG4gIHZhciBkcmFnZ2FibGVzID0gZGltZW5zaW9ucy5kcmFnZ2FibGVzLFxuICAgICAgZHJvcHBhYmxlcyA9IGRpbWVuc2lvbnMuZHJvcHBhYmxlcztcbiAgdmFyIGRyYWdnYWJsZSA9IGRyYWdnYWJsZXNbc3RhdGUuY3JpdGljYWwuZHJhZ2dhYmxlLmlkXTtcbiAgdmFyIGlzT3ZlciA9IHdoYXRJc0RyYWdnZWRPdmVyKG5lZWRzVmlzaWJpbGl0eUNoZWNrKTtcbiAgIWlzT3ZlciA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ011c3QgYmUgb3ZlciBhIGRlc3RpbmF0aW9uIGluIFNOQVAgbW92ZW1lbnQgbW9kZScpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgdmFyIGRlc3RpbmF0aW9uID0gZHJvcHBhYmxlc1tpc092ZXJdO1xuICB2YXIgaW1wYWN0ID0gcmVjb21wdXRlKHtcbiAgICBpbXBhY3Q6IG5lZWRzVmlzaWJpbGl0eUNoZWNrLFxuICAgIHZpZXdwb3J0OiB2aWV3cG9ydCxcbiAgICBkZXN0aW5hdGlvbjogZGVzdGluYXRpb24sXG4gICAgZHJhZ2dhYmxlczogZHJhZ2dhYmxlcyxcbiAgICBvbkxpZnQ6IHN0YXRlLm9uTGlmdFxuICB9KTtcbiAgdmFyIGNsaWVudFNlbGVjdGlvbiA9IGdldENsaWVudEJvcmRlckJveENlbnRlcih7XG4gICAgaW1wYWN0OiBpbXBhY3QsXG4gICAgZHJhZ2dhYmxlOiBkcmFnZ2FibGUsXG4gICAgZHJvcHBhYmxlOiBkZXN0aW5hdGlvbixcbiAgICBkcmFnZ2FibGVzOiBkcmFnZ2FibGVzLFxuICAgIHZpZXdwb3J0OiB2aWV3cG9ydCxcbiAgICBvbkxpZnQ6IHN0YXRlLm9uTGlmdFxuICB9KTtcbiAgcmV0dXJuIHVwZGF0ZSh7XG4gICAgaW1wYWN0OiBpbXBhY3QsXG4gICAgY2xpZW50U2VsZWN0aW9uOiBjbGllbnRTZWxlY3Rpb24sXG4gICAgc3RhdGU6IHN0YXRlLFxuICAgIGRpbWVuc2lvbnM6IGRpbWVuc2lvbnMsXG4gICAgdmlld3BvcnQ6IHZpZXdwb3J0XG4gIH0pO1xufSk7XG5cbnZhciBwYXRjaERpbWVuc2lvbk1hcCA9IChmdW5jdGlvbiAoZGltZW5zaW9ucywgdXBkYXRlZCkge1xuICByZXR1cm4ge1xuICAgIGRyYWdnYWJsZXM6IGRpbWVuc2lvbnMuZHJhZ2dhYmxlcyxcbiAgICBkcm9wcGFibGVzOiBwYXRjaERyb3BwYWJsZU1hcChkaW1lbnNpb25zLmRyb3BwYWJsZXMsIHVwZGF0ZWQpXG4gIH07XG59KTtcblxudmFyIGlzU25hcHBpbmcgPSBmdW5jdGlvbiBpc1NuYXBwaW5nKHN0YXRlKSB7XG4gIHJldHVybiBzdGF0ZS5tb3ZlbWVudE1vZGUgPT09ICdTTkFQJztcbn07XG5cbnZhciBwb3N0RHJvcHBhYmxlQ2hhbmdlID0gZnVuY3Rpb24gcG9zdERyb3BwYWJsZUNoYW5nZShzdGF0ZSwgdXBkYXRlZCwgaXNFbmFibGVkQ2hhbmdpbmcpIHtcbiAgdmFyIGRpbWVuc2lvbnMgPSBwYXRjaERpbWVuc2lvbk1hcChzdGF0ZS5kaW1lbnNpb25zLCB1cGRhdGVkKTtcblxuICBpZiAoIWlzU25hcHBpbmcoc3RhdGUpIHx8IGlzRW5hYmxlZENoYW5naW5nKSB7XG4gICAgcmV0dXJuIHVwZGF0ZSh7XG4gICAgICBzdGF0ZTogc3RhdGUsXG4gICAgICBkaW1lbnNpb25zOiBkaW1lbnNpb25zXG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gcmVmcmVzaFNuYXAoe1xuICAgIHN0YXRlOiBzdGF0ZSxcbiAgICBkaW1lbnNpb25zOiBkaW1lbnNpb25zXG4gIH0pO1xufTtcblxudmFyIGlkbGUgPSB7XG4gIHBoYXNlOiAnSURMRScsXG4gIGNvbXBsZXRlZDogbnVsbCxcbiAgc2hvdWxkRmx1c2g6IGZhbHNlXG59O1xudmFyIHJlZHVjZXIgPSAoZnVuY3Rpb24gKHN0YXRlLCBhY3Rpb24pIHtcbiAgaWYgKHN0YXRlID09PSB2b2lkIDApIHtcbiAgICBzdGF0ZSA9IGlkbGU7XG4gIH1cblxuICBpZiAoYWN0aW9uLnR5cGUgPT09ICdDTEVBTicpIHtcbiAgICByZXR1cm4gX2V4dGVuZHMoe30sIGlkbGUsIHtcbiAgICAgIHNob3VsZEZsdXNoOiBhY3Rpb24ucGF5bG9hZC5zaG91bGRGbHVzaFxuICAgIH0pO1xuICB9XG5cbiAgaWYgKGFjdGlvbi50eXBlID09PSAnSU5JVElBTF9QVUJMSVNIJykge1xuICAgICEoc3RhdGUucGhhc2UgPT09ICdJRExFJykgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdJTklUSUFMX1BVQkxJU0ggbXVzdCBjb21lIGFmdGVyIGEgSURMRSBwaGFzZScpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICB2YXIgX2FjdGlvbiRwYXlsb2FkID0gYWN0aW9uLnBheWxvYWQsXG4gICAgICAgIGNyaXRpY2FsID0gX2FjdGlvbiRwYXlsb2FkLmNyaXRpY2FsLFxuICAgICAgICBjbGllbnRTZWxlY3Rpb24gPSBfYWN0aW9uJHBheWxvYWQuY2xpZW50U2VsZWN0aW9uLFxuICAgICAgICB2aWV3cG9ydCA9IF9hY3Rpb24kcGF5bG9hZC52aWV3cG9ydCxcbiAgICAgICAgZGltZW5zaW9ucyA9IF9hY3Rpb24kcGF5bG9hZC5kaW1lbnNpb25zLFxuICAgICAgICBtb3ZlbWVudE1vZGUgPSBfYWN0aW9uJHBheWxvYWQubW92ZW1lbnRNb2RlO1xuICAgIHZhciBkcmFnZ2FibGUgPSBkaW1lbnNpb25zLmRyYWdnYWJsZXNbY3JpdGljYWwuZHJhZ2dhYmxlLmlkXTtcbiAgICB2YXIgaG9tZSA9IGRpbWVuc2lvbnMuZHJvcHBhYmxlc1tjcml0aWNhbC5kcm9wcGFibGUuaWRdO1xuICAgIHZhciBjbGllbnQgPSB7XG4gICAgICBzZWxlY3Rpb246IGNsaWVudFNlbGVjdGlvbixcbiAgICAgIGJvcmRlckJveENlbnRlcjogZHJhZ2dhYmxlLmNsaWVudC5ib3JkZXJCb3guY2VudGVyLFxuICAgICAgb2Zmc2V0OiBvcmlnaW5cbiAgICB9O1xuICAgIHZhciBpbml0aWFsID0ge1xuICAgICAgY2xpZW50OiBjbGllbnQsXG4gICAgICBwYWdlOiB7XG4gICAgICAgIHNlbGVjdGlvbjogYWRkKGNsaWVudC5zZWxlY3Rpb24sIHZpZXdwb3J0LnNjcm9sbC5pbml0aWFsKSxcbiAgICAgICAgYm9yZGVyQm94Q2VudGVyOiBhZGQoY2xpZW50LnNlbGVjdGlvbiwgdmlld3BvcnQuc2Nyb2xsLmluaXRpYWwpXG4gICAgICB9XG4gICAgfTtcbiAgICB2YXIgaXNXaW5kb3dTY3JvbGxBbGxvd2VkID0gdG9Ecm9wcGFibGVMaXN0KGRpbWVuc2lvbnMuZHJvcHBhYmxlcykuZXZlcnkoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHJldHVybiAhaXRlbS5pc0ZpeGVkT25QYWdlO1xuICAgIH0pO1xuXG4gICAgdmFyIF9nZXRIb21lT25MaWZ0ID0gZ2V0SG9tZU9uTGlmdCh7XG4gICAgICBkcmFnZ2FibGU6IGRyYWdnYWJsZSxcbiAgICAgIGhvbWU6IGhvbWUsXG4gICAgICBkcmFnZ2FibGVzOiBkaW1lbnNpb25zLmRyYWdnYWJsZXMsXG4gICAgICB2aWV3cG9ydDogdmlld3BvcnRcbiAgICB9KSxcbiAgICAgICAgaW1wYWN0ID0gX2dldEhvbWVPbkxpZnQuaW1wYWN0LFxuICAgICAgICBvbkxpZnQgPSBfZ2V0SG9tZU9uTGlmdC5vbkxpZnQ7XG5cbiAgICB2YXIgcmVzdWx0ID0ge1xuICAgICAgcGhhc2U6ICdEUkFHR0lORycsXG4gICAgICBpc0RyYWdnaW5nOiB0cnVlLFxuICAgICAgY3JpdGljYWw6IGNyaXRpY2FsLFxuICAgICAgbW92ZW1lbnRNb2RlOiBtb3ZlbWVudE1vZGUsXG4gICAgICBkaW1lbnNpb25zOiBkaW1lbnNpb25zLFxuICAgICAgaW5pdGlhbDogaW5pdGlhbCxcbiAgICAgIGN1cnJlbnQ6IGluaXRpYWwsXG4gICAgICBpc1dpbmRvd1Njcm9sbEFsbG93ZWQ6IGlzV2luZG93U2Nyb2xsQWxsb3dlZCxcbiAgICAgIGltcGFjdDogaW1wYWN0LFxuICAgICAgb25MaWZ0OiBvbkxpZnQsXG4gICAgICBvbkxpZnRJbXBhY3Q6IGltcGFjdCxcbiAgICAgIHZpZXdwb3J0OiB2aWV3cG9ydCxcbiAgICAgIHVzZXJEaXJlY3Rpb246IGZvcndhcmQsXG4gICAgICBzY3JvbGxKdW1wUmVxdWVzdDogbnVsbCxcbiAgICAgIGZvcmNlU2hvdWxkQW5pbWF0ZTogbnVsbFxuICAgIH07XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIGlmIChhY3Rpb24udHlwZSA9PT0gJ0NPTExFQ1RJT05fU1RBUlRJTkcnKSB7XG4gICAgdmFyIF9leHRlbmRzMjtcblxuICAgIGlmIChzdGF0ZS5waGFzZSA9PT0gJ0NPTExFQ1RJTkcnIHx8IHN0YXRlLnBoYXNlID09PSAnRFJPUF9QRU5ESU5HJykge1xuICAgICAgcmV0dXJuIHN0YXRlO1xuICAgIH1cblxuICAgICEoc3RhdGUucGhhc2UgPT09ICdEUkFHR0lORycpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIkNvbGxlY3Rpb24gY2Fubm90IHN0YXJ0IGZyb20gcGhhc2UgXCIgKyBzdGF0ZS5waGFzZSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuXG4gICAgdmFyIF9yZXN1bHQgPSBfZXh0ZW5kcyh7XG4gICAgICBwaGFzZTogJ0NPTExFQ1RJTkcnXG4gICAgfSwgc3RhdGUsIChfZXh0ZW5kczIgPSB7fSwgX2V4dGVuZHMyW1wicGhhc2VcIl0gPSAnQ09MTEVDVElORycsIF9leHRlbmRzMikpO1xuXG4gICAgcmV0dXJuIF9yZXN1bHQ7XG4gIH1cblxuICBpZiAoYWN0aW9uLnR5cGUgPT09ICdQVUJMSVNIX1dISUxFX0RSQUdHSU5HJykge1xuICAgICEoc3RhdGUucGhhc2UgPT09ICdDT0xMRUNUSU5HJyB8fCBzdGF0ZS5waGFzZSA9PT0gJ0RST1BfUEVORElORycpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIlVuZXhwZWN0ZWQgXCIgKyBhY3Rpb24udHlwZSArIFwiIHJlY2VpdmVkIGluIHBoYXNlIFwiICsgc3RhdGUucGhhc2UpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICByZXR1cm4gcHVibGlzaFdoaWxlRHJhZ2dpbmcoe1xuICAgICAgc3RhdGU6IHN0YXRlLFxuICAgICAgcHVibGlzaGVkOiBhY3Rpb24ucGF5bG9hZFxuICAgIH0pO1xuICB9XG5cbiAgaWYgKGFjdGlvbi50eXBlID09PSAnTU9WRScpIHtcbiAgICBpZiAoc3RhdGUucGhhc2UgPT09ICdEUk9QX1BFTkRJTkcnKSB7XG4gICAgICByZXR1cm4gc3RhdGU7XG4gICAgfVxuXG4gICAgIWlzTW92ZW1lbnRBbGxvd2VkKHN0YXRlKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgYWN0aW9uLnR5cGUgKyBcIiBub3QgcGVybWl0dGVkIGluIHBoYXNlIFwiICsgc3RhdGUucGhhc2UpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICB2YXIgX2NsaWVudFNlbGVjdGlvbiA9IGFjdGlvbi5wYXlsb2FkLmNsaWVudDtcblxuICAgIGlmIChpc0VxdWFsKF9jbGllbnRTZWxlY3Rpb24sIHN0YXRlLmN1cnJlbnQuY2xpZW50LnNlbGVjdGlvbikpIHtcbiAgICAgIHJldHVybiBzdGF0ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdXBkYXRlKHtcbiAgICAgIHN0YXRlOiBzdGF0ZSxcbiAgICAgIGNsaWVudFNlbGVjdGlvbjogX2NsaWVudFNlbGVjdGlvbixcbiAgICAgIGltcGFjdDogaXNTbmFwcGluZyhzdGF0ZSkgPyBzdGF0ZS5pbXBhY3QgOiBudWxsXG4gICAgfSk7XG4gIH1cblxuICBpZiAoYWN0aW9uLnR5cGUgPT09ICdVUERBVEVfRFJPUFBBQkxFX1NDUk9MTCcpIHtcbiAgICBpZiAoc3RhdGUucGhhc2UgPT09ICdEUk9QX1BFTkRJTkcnKSB7XG4gICAgICByZXR1cm4gc3RhdGU7XG4gICAgfVxuXG4gICAgaWYgKHN0YXRlLnBoYXNlID09PSAnQ09MTEVDVElORycpIHtcbiAgICAgIHJldHVybiBzdGF0ZTtcbiAgICB9XG5cbiAgICAhaXNNb3ZlbWVudEFsbG93ZWQoc3RhdGUpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBhY3Rpb24udHlwZSArIFwiIG5vdCBwZXJtaXR0ZWQgaW4gcGhhc2UgXCIgKyBzdGF0ZS5waGFzZSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHZhciBfYWN0aW9uJHBheWxvYWQyID0gYWN0aW9uLnBheWxvYWQsXG4gICAgICAgIGlkID0gX2FjdGlvbiRwYXlsb2FkMi5pZCxcbiAgICAgICAgb2Zmc2V0ID0gX2FjdGlvbiRwYXlsb2FkMi5vZmZzZXQ7XG4gICAgdmFyIHRhcmdldCA9IHN0YXRlLmRpbWVuc2lvbnMuZHJvcHBhYmxlc1tpZF07XG5cbiAgICBpZiAoIXRhcmdldCkge1xuICAgICAgcmV0dXJuIHN0YXRlO1xuICAgIH1cblxuICAgIHZhciBzY3JvbGxlZCA9IHNjcm9sbERyb3BwYWJsZSh0YXJnZXQsIG9mZnNldCk7XG4gICAgcmV0dXJuIHBvc3REcm9wcGFibGVDaGFuZ2Uoc3RhdGUsIHNjcm9sbGVkLCBmYWxzZSk7XG4gIH1cblxuICBpZiAoYWN0aW9uLnR5cGUgPT09ICdVUERBVEVfRFJPUFBBQkxFX0lTX0VOQUJMRUQnKSB7XG4gICAgaWYgKHN0YXRlLnBoYXNlID09PSAnRFJPUF9QRU5ESU5HJykge1xuICAgICAgcmV0dXJuIHN0YXRlO1xuICAgIH1cblxuICAgICFpc01vdmVtZW50QWxsb3dlZChzdGF0ZSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiQXR0ZW1wdGluZyB0byBtb3ZlIGluIGFuIHVuc3VwcG9ydGVkIHBoYXNlIFwiICsgc3RhdGUucGhhc2UpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICB2YXIgX2FjdGlvbiRwYXlsb2FkMyA9IGFjdGlvbi5wYXlsb2FkLFxuICAgICAgICBfaWQgPSBfYWN0aW9uJHBheWxvYWQzLmlkLFxuICAgICAgICBpc0VuYWJsZWQgPSBfYWN0aW9uJHBheWxvYWQzLmlzRW5hYmxlZDtcbiAgICB2YXIgX3RhcmdldCA9IHN0YXRlLmRpbWVuc2lvbnMuZHJvcHBhYmxlc1tfaWRdO1xuICAgICFfdGFyZ2V0ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIkNhbm5vdCBmaW5kIERyb3BwYWJsZVtpZDogXCIgKyBfaWQgKyBcIl0gdG8gdG9nZ2xlIGl0cyBlbmFibGVkIHN0YXRlXCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAhKF90YXJnZXQuaXNFbmFibGVkICE9PSBpc0VuYWJsZWQpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIlRyeWluZyB0byBzZXQgZHJvcHBhYmxlIGlzRW5hYmxlZCB0byBcIiArIFN0cmluZyhpc0VuYWJsZWQpICsgXCJcXG4gICAgICBidXQgaXQgaXMgYWxyZWFkeSBcIiArIFN0cmluZyhfdGFyZ2V0LmlzRW5hYmxlZCkpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcblxuICAgIHZhciB1cGRhdGVkID0gX2V4dGVuZHMoe30sIF90YXJnZXQsIHtcbiAgICAgIGlzRW5hYmxlZDogaXNFbmFibGVkXG4gICAgfSk7XG5cbiAgICByZXR1cm4gcG9zdERyb3BwYWJsZUNoYW5nZShzdGF0ZSwgdXBkYXRlZCwgdHJ1ZSk7XG4gIH1cblxuICBpZiAoYWN0aW9uLnR5cGUgPT09ICdVUERBVEVfRFJPUFBBQkxFX0lTX0NPTUJJTkVfRU5BQkxFRCcpIHtcbiAgICBpZiAoc3RhdGUucGhhc2UgPT09ICdEUk9QX1BFTkRJTkcnKSB7XG4gICAgICByZXR1cm4gc3RhdGU7XG4gICAgfVxuXG4gICAgIWlzTW92ZW1lbnRBbGxvd2VkKHN0YXRlKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJBdHRlbXB0aW5nIHRvIG1vdmUgaW4gYW4gdW5zdXBwb3J0ZWQgcGhhc2UgXCIgKyBzdGF0ZS5waGFzZSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHZhciBfYWN0aW9uJHBheWxvYWQ0ID0gYWN0aW9uLnBheWxvYWQsXG4gICAgICAgIF9pZDIgPSBfYWN0aW9uJHBheWxvYWQ0LmlkLFxuICAgICAgICBpc0NvbWJpbmVFbmFibGVkID0gX2FjdGlvbiRwYXlsb2FkNC5pc0NvbWJpbmVFbmFibGVkO1xuICAgIHZhciBfdGFyZ2V0MiA9IHN0YXRlLmRpbWVuc2lvbnMuZHJvcHBhYmxlc1tfaWQyXTtcbiAgICAhX3RhcmdldDIgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiQ2Fubm90IGZpbmQgRHJvcHBhYmxlW2lkOiBcIiArIF9pZDIgKyBcIl0gdG8gdG9nZ2xlIGl0cyBpc0NvbWJpbmVFbmFibGVkIHN0YXRlXCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAhKF90YXJnZXQyLmlzQ29tYmluZUVuYWJsZWQgIT09IGlzQ29tYmluZUVuYWJsZWQpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIlRyeWluZyB0byBzZXQgZHJvcHBhYmxlIGlzQ29tYmluZUVuYWJsZWQgdG8gXCIgKyBTdHJpbmcoaXNDb21iaW5lRW5hYmxlZCkgKyBcIlxcbiAgICAgIGJ1dCBpdCBpcyBhbHJlYWR5IFwiICsgU3RyaW5nKF90YXJnZXQyLmlzQ29tYmluZUVuYWJsZWQpKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG5cbiAgICB2YXIgX3VwZGF0ZWQgPSBfZXh0ZW5kcyh7fSwgX3RhcmdldDIsIHtcbiAgICAgIGlzQ29tYmluZUVuYWJsZWQ6IGlzQ29tYmluZUVuYWJsZWRcbiAgICB9KTtcblxuICAgIHJldHVybiBwb3N0RHJvcHBhYmxlQ2hhbmdlKHN0YXRlLCBfdXBkYXRlZCwgdHJ1ZSk7XG4gIH1cblxuICBpZiAoYWN0aW9uLnR5cGUgPT09ICdNT1ZFX0JZX1dJTkRPV19TQ1JPTEwnKSB7XG4gICAgaWYgKHN0YXRlLnBoYXNlID09PSAnRFJPUF9QRU5ESU5HJyB8fCBzdGF0ZS5waGFzZSA9PT0gJ0RST1BfQU5JTUFUSU5HJykge1xuICAgICAgcmV0dXJuIHN0YXRlO1xuICAgIH1cblxuICAgICFpc01vdmVtZW50QWxsb3dlZChzdGF0ZSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiQ2Fubm90IG1vdmUgYnkgd2luZG93IGluIHBoYXNlIFwiICsgc3RhdGUucGhhc2UpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAhc3RhdGUuaXNXaW5kb3dTY3JvbGxBbGxvd2VkID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnV2luZG93IHNjcm9sbGluZyBpcyBjdXJyZW50bHkgbm90IHN1cHBvcnRlZCBmb3IgZml4ZWQgbGlzdHMuIEFib3J0aW5nIGRyYWcnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgdmFyIG5ld1Njcm9sbCA9IGFjdGlvbi5wYXlsb2FkLm5ld1Njcm9sbDtcblxuICAgIGlmIChpc0VxdWFsKHN0YXRlLnZpZXdwb3J0LnNjcm9sbC5jdXJyZW50LCBuZXdTY3JvbGwpKSB7XG4gICAgICByZXR1cm4gc3RhdGU7XG4gICAgfVxuXG4gICAgdmFyIF92aWV3cG9ydCA9IHNjcm9sbFZpZXdwb3J0KHN0YXRlLnZpZXdwb3J0LCBuZXdTY3JvbGwpO1xuXG4gICAgaWYgKGlzU25hcHBpbmcoc3RhdGUpKSB7XG4gICAgICByZXR1cm4gcmVmcmVzaFNuYXAoe1xuICAgICAgICBzdGF0ZTogc3RhdGUsXG4gICAgICAgIHZpZXdwb3J0OiBfdmlld3BvcnRcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiB1cGRhdGUoe1xuICAgICAgc3RhdGU6IHN0YXRlLFxuICAgICAgdmlld3BvcnQ6IF92aWV3cG9ydFxuICAgIH0pO1xuICB9XG5cbiAgaWYgKGFjdGlvbi50eXBlID09PSAnVVBEQVRFX1ZJRVdQT1JUX01BWF9TQ1JPTEwnKSB7XG4gICAgaWYgKCFpc01vdmVtZW50QWxsb3dlZChzdGF0ZSkpIHtcbiAgICAgIHJldHVybiBzdGF0ZTtcbiAgICB9XG5cbiAgICB2YXIgbWF4U2Nyb2xsID0gYWN0aW9uLnBheWxvYWQubWF4U2Nyb2xsO1xuXG4gICAgaWYgKGlzRXF1YWwobWF4U2Nyb2xsLCBzdGF0ZS52aWV3cG9ydC5zY3JvbGwubWF4KSkge1xuICAgICAgcmV0dXJuIHN0YXRlO1xuICAgIH1cblxuICAgIHZhciB3aXRoTWF4U2Nyb2xsID0gX2V4dGVuZHMoe30sIHN0YXRlLnZpZXdwb3J0LCB7XG4gICAgICBzY3JvbGw6IF9leHRlbmRzKHt9LCBzdGF0ZS52aWV3cG9ydC5zY3JvbGwsIHtcbiAgICAgICAgbWF4OiBtYXhTY3JvbGxcbiAgICAgIH0pXG4gICAgfSk7XG5cbiAgICByZXR1cm4gX2V4dGVuZHMoe1xuICAgICAgcGhhc2U6ICdEUkFHR0lORydcbiAgICB9LCBzdGF0ZSwge1xuICAgICAgdmlld3BvcnQ6IHdpdGhNYXhTY3JvbGxcbiAgICB9KTtcbiAgfVxuXG4gIGlmIChhY3Rpb24udHlwZSA9PT0gJ01PVkVfVVAnIHx8IGFjdGlvbi50eXBlID09PSAnTU9WRV9ET1dOJyB8fCBhY3Rpb24udHlwZSA9PT0gJ01PVkVfTEVGVCcgfHwgYWN0aW9uLnR5cGUgPT09ICdNT1ZFX1JJR0hUJykge1xuICAgIGlmIChzdGF0ZS5waGFzZSA9PT0gJ0NPTExFQ1RJTkcnIHx8IHN0YXRlLnBoYXNlID09PSAnRFJPUF9QRU5ESU5HJykge1xuICAgICAgcmV0dXJuIHN0YXRlO1xuICAgIH1cblxuICAgICEoc3RhdGUucGhhc2UgPT09ICdEUkFHR0lORycpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBhY3Rpb24udHlwZSArIFwiIHJlY2VpdmVkIHdoaWxlIG5vdCBpbiBEUkFHR0lORyBwaGFzZVwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG5cbiAgICB2YXIgX3Jlc3VsdDIgPSBtb3ZlSW5EaXJlY3Rpb24oe1xuICAgICAgc3RhdGU6IHN0YXRlLFxuICAgICAgdHlwZTogYWN0aW9uLnR5cGVcbiAgICB9KTtcblxuICAgIGlmICghX3Jlc3VsdDIpIHtcbiAgICAgIHJldHVybiBzdGF0ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdXBkYXRlKHtcbiAgICAgIHN0YXRlOiBzdGF0ZSxcbiAgICAgIGltcGFjdDogX3Jlc3VsdDIuaW1wYWN0LFxuICAgICAgY2xpZW50U2VsZWN0aW9uOiBfcmVzdWx0Mi5jbGllbnRTZWxlY3Rpb24sXG4gICAgICBzY3JvbGxKdW1wUmVxdWVzdDogX3Jlc3VsdDIuc2Nyb2xsSnVtcFJlcXVlc3RcbiAgICB9KTtcbiAgfVxuXG4gIGlmIChhY3Rpb24udHlwZSA9PT0gJ0RST1BfUEVORElORycpIHtcbiAgICB2YXIgX2V4dGVuZHMzO1xuXG4gICAgdmFyIHJlYXNvbiA9IGFjdGlvbi5wYXlsb2FkLnJlYXNvbjtcbiAgICAhKHN0YXRlLnBoYXNlID09PSAnQ09MTEVDVElORycpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnQ2FuIG9ubHkgbW92ZSBpbnRvIHRoZSBEUk9QX1BFTkRJTkcgcGhhc2UgZnJvbSB0aGUgQ09MTEVDVElORyBwaGFzZScpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcblxuICAgIHZhciBuZXdTdGF0ZSA9IF9leHRlbmRzKHtcbiAgICAgIHBoYXNlOiAnRFJPUF9QRU5ESU5HJ1xuICAgIH0sIHN0YXRlLCAoX2V4dGVuZHMzID0ge30sIF9leHRlbmRzM1tcInBoYXNlXCJdID0gJ0RST1BfUEVORElORycsIF9leHRlbmRzMy5pc1dhaXRpbmcgPSB0cnVlLCBfZXh0ZW5kczMucmVhc29uID0gcmVhc29uLCBfZXh0ZW5kczMpKTtcblxuICAgIHJldHVybiBuZXdTdGF0ZTtcbiAgfVxuXG4gIGlmIChhY3Rpb24udHlwZSA9PT0gJ0RST1BfQU5JTUFURScpIHtcbiAgICB2YXIgX2FjdGlvbiRwYXlsb2FkNSA9IGFjdGlvbi5wYXlsb2FkLFxuICAgICAgICBjb21wbGV0ZWQgPSBfYWN0aW9uJHBheWxvYWQ1LmNvbXBsZXRlZCxcbiAgICAgICAgZHJvcER1cmF0aW9uID0gX2FjdGlvbiRwYXlsb2FkNS5kcm9wRHVyYXRpb24sXG4gICAgICAgIG5ld0hvbWVDbGllbnRPZmZzZXQgPSBfYWN0aW9uJHBheWxvYWQ1Lm5ld0hvbWVDbGllbnRPZmZzZXQ7XG4gICAgIShzdGF0ZS5waGFzZSA9PT0gJ0RSQUdHSU5HJyB8fCBzdGF0ZS5waGFzZSA9PT0gJ0RST1BfUEVORElORycpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIkNhbm5vdCBhbmltYXRlIGRyb3AgZnJvbSBwaGFzZSBcIiArIHN0YXRlLnBoYXNlKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgdmFyIF9yZXN1bHQzID0ge1xuICAgICAgcGhhc2U6ICdEUk9QX0FOSU1BVElORycsXG4gICAgICBkaW1lbnNpb25zOiBzdGF0ZS5kaW1lbnNpb25zLFxuICAgICAgY29tcGxldGVkOiBjb21wbGV0ZWQsXG4gICAgICBkcm9wRHVyYXRpb246IGRyb3BEdXJhdGlvbixcbiAgICAgIG5ld0hvbWVDbGllbnRPZmZzZXQ6IG5ld0hvbWVDbGllbnRPZmZzZXRcbiAgICB9O1xuICAgIHJldHVybiBfcmVzdWx0MztcbiAgfVxuXG4gIGlmIChhY3Rpb24udHlwZSA9PT0gJ0RST1BfQ09NUExFVEUnKSB7XG4gICAgdmFyIF9hY3Rpb24kcGF5bG9hZDYgPSBhY3Rpb24ucGF5bG9hZCxcbiAgICAgICAgX2NvbXBsZXRlZCA9IF9hY3Rpb24kcGF5bG9hZDYuY29tcGxldGVkLFxuICAgICAgICBzaG91bGRGbHVzaCA9IF9hY3Rpb24kcGF5bG9hZDYuc2hvdWxkRmx1c2g7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBoYXNlOiAnSURMRScsXG4gICAgICBjb21wbGV0ZWQ6IF9jb21wbGV0ZWQsXG4gICAgICBzaG91bGRGbHVzaDogc2hvdWxkRmx1c2hcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIHN0YXRlO1xufSk7XG5cbnZhciBsaWZ0ID0gZnVuY3Rpb24gbGlmdChhcmdzKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogJ0xJRlQnLFxuICAgIHBheWxvYWQ6IGFyZ3NcbiAgfTtcbn07XG52YXIgaW5pdGlhbFB1Ymxpc2ggPSBmdW5jdGlvbiBpbml0aWFsUHVibGlzaChhcmdzKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogJ0lOSVRJQUxfUFVCTElTSCcsXG4gICAgcGF5bG9hZDogYXJnc1xuICB9O1xufTtcbnZhciBwdWJsaXNoV2hpbGVEcmFnZ2luZyQxID0gZnVuY3Rpb24gcHVibGlzaFdoaWxlRHJhZ2dpbmcoYXJncykge1xuICByZXR1cm4ge1xuICAgIHR5cGU6ICdQVUJMSVNIX1dISUxFX0RSQUdHSU5HJyxcbiAgICBwYXlsb2FkOiBhcmdzXG4gIH07XG59O1xudmFyIGNvbGxlY3Rpb25TdGFydGluZyA9IGZ1bmN0aW9uIGNvbGxlY3Rpb25TdGFydGluZygpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiAnQ09MTEVDVElPTl9TVEFSVElORycsXG4gICAgcGF5bG9hZDogbnVsbFxuICB9O1xufTtcbnZhciB1cGRhdGVEcm9wcGFibGVTY3JvbGwgPSBmdW5jdGlvbiB1cGRhdGVEcm9wcGFibGVTY3JvbGwoYXJncykge1xuICByZXR1cm4ge1xuICAgIHR5cGU6ICdVUERBVEVfRFJPUFBBQkxFX1NDUk9MTCcsXG4gICAgcGF5bG9hZDogYXJnc1xuICB9O1xufTtcbnZhciB1cGRhdGVEcm9wcGFibGVJc0VuYWJsZWQgPSBmdW5jdGlvbiB1cGRhdGVEcm9wcGFibGVJc0VuYWJsZWQoYXJncykge1xuICByZXR1cm4ge1xuICAgIHR5cGU6ICdVUERBVEVfRFJPUFBBQkxFX0lTX0VOQUJMRUQnLFxuICAgIHBheWxvYWQ6IGFyZ3NcbiAgfTtcbn07XG52YXIgdXBkYXRlRHJvcHBhYmxlSXNDb21iaW5lRW5hYmxlZCA9IGZ1bmN0aW9uIHVwZGF0ZURyb3BwYWJsZUlzQ29tYmluZUVuYWJsZWQoYXJncykge1xuICByZXR1cm4ge1xuICAgIHR5cGU6ICdVUERBVEVfRFJPUFBBQkxFX0lTX0NPTUJJTkVfRU5BQkxFRCcsXG4gICAgcGF5bG9hZDogYXJnc1xuICB9O1xufTtcbnZhciBtb3ZlID0gZnVuY3Rpb24gbW92ZShhcmdzKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogJ01PVkUnLFxuICAgIHBheWxvYWQ6IGFyZ3NcbiAgfTtcbn07XG52YXIgbW92ZUJ5V2luZG93U2Nyb2xsID0gZnVuY3Rpb24gbW92ZUJ5V2luZG93U2Nyb2xsKGFyZ3MpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiAnTU9WRV9CWV9XSU5ET1dfU0NST0xMJyxcbiAgICBwYXlsb2FkOiBhcmdzXG4gIH07XG59O1xudmFyIHVwZGF0ZVZpZXdwb3J0TWF4U2Nyb2xsID0gZnVuY3Rpb24gdXBkYXRlVmlld3BvcnRNYXhTY3JvbGwoYXJncykge1xuICByZXR1cm4ge1xuICAgIHR5cGU6ICdVUERBVEVfVklFV1BPUlRfTUFYX1NDUk9MTCcsXG4gICAgcGF5bG9hZDogYXJnc1xuICB9O1xufTtcbnZhciBtb3ZlVXAgPSBmdW5jdGlvbiBtb3ZlVXAoKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogJ01PVkVfVVAnLFxuICAgIHBheWxvYWQ6IG51bGxcbiAgfTtcbn07XG52YXIgbW92ZURvd24gPSBmdW5jdGlvbiBtb3ZlRG93bigpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiAnTU9WRV9ET1dOJyxcbiAgICBwYXlsb2FkOiBudWxsXG4gIH07XG59O1xudmFyIG1vdmVSaWdodCA9IGZ1bmN0aW9uIG1vdmVSaWdodCgpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiAnTU9WRV9SSUdIVCcsXG4gICAgcGF5bG9hZDogbnVsbFxuICB9O1xufTtcbnZhciBtb3ZlTGVmdCA9IGZ1bmN0aW9uIG1vdmVMZWZ0KCkge1xuICByZXR1cm4ge1xuICAgIHR5cGU6ICdNT1ZFX0xFRlQnLFxuICAgIHBheWxvYWQ6IG51bGxcbiAgfTtcbn07XG52YXIgY2xlYW4kMSA9IGZ1bmN0aW9uIGNsZWFuKGFyZ3MpIHtcbiAgaWYgKGFyZ3MgPT09IHZvaWQgMCkge1xuICAgIGFyZ3MgPSB7XG4gICAgICBzaG91bGRGbHVzaDogZmFsc2VcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICB0eXBlOiAnQ0xFQU4nLFxuICAgIHBheWxvYWQ6IGFyZ3NcbiAgfTtcbn07XG52YXIgYW5pbWF0ZURyb3AgPSBmdW5jdGlvbiBhbmltYXRlRHJvcChhcmdzKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogJ0RST1BfQU5JTUFURScsXG4gICAgcGF5bG9hZDogYXJnc1xuICB9O1xufTtcbnZhciBjb21wbGV0ZURyb3AgPSBmdW5jdGlvbiBjb21wbGV0ZURyb3AoYXJncykge1xuICByZXR1cm4ge1xuICAgIHR5cGU6ICdEUk9QX0NPTVBMRVRFJyxcbiAgICBwYXlsb2FkOiBhcmdzXG4gIH07XG59O1xudmFyIGRyb3AgPSBmdW5jdGlvbiBkcm9wKGFyZ3MpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiAnRFJPUCcsXG4gICAgcGF5bG9hZDogYXJnc1xuICB9O1xufTtcbnZhciBkcm9wUGVuZGluZyA9IGZ1bmN0aW9uIGRyb3BQZW5kaW5nKGFyZ3MpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiAnRFJPUF9QRU5ESU5HJyxcbiAgICBwYXlsb2FkOiBhcmdzXG4gIH07XG59O1xudmFyIGRyb3BBbmltYXRpb25GaW5pc2hlZCA9IGZ1bmN0aW9uIGRyb3BBbmltYXRpb25GaW5pc2hlZCgpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiAnRFJPUF9BTklNQVRJT05fRklOSVNIRUQnLFxuICAgIHBheWxvYWQ6IG51bGxcbiAgfTtcbn07XG5cbnZhciBsaWZ0JDEgPSAoZnVuY3Rpb24gKG1hcnNoYWwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgdmFyIGdldFN0YXRlID0gX3JlZi5nZXRTdGF0ZSxcbiAgICAgICAgZGlzcGF0Y2ggPSBfcmVmLmRpc3BhdGNoO1xuICAgIHJldHVybiBmdW5jdGlvbiAobmV4dCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgICAgICAgaWYgKGFjdGlvbi50eXBlICE9PSAnTElGVCcpIHtcbiAgICAgICAgICBuZXh0KGFjdGlvbik7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIF9hY3Rpb24kcGF5bG9hZCA9IGFjdGlvbi5wYXlsb2FkLFxuICAgICAgICAgICAgaWQgPSBfYWN0aW9uJHBheWxvYWQuaWQsXG4gICAgICAgICAgICBjbGllbnRTZWxlY3Rpb24gPSBfYWN0aW9uJHBheWxvYWQuY2xpZW50U2VsZWN0aW9uLFxuICAgICAgICAgICAgbW92ZW1lbnRNb2RlID0gX2FjdGlvbiRwYXlsb2FkLm1vdmVtZW50TW9kZTtcbiAgICAgICAgdmFyIGluaXRpYWwgPSBnZXRTdGF0ZSgpO1xuXG4gICAgICAgIGlmIChpbml0aWFsLnBoYXNlID09PSAnRFJPUF9BTklNQVRJTkcnKSB7XG4gICAgICAgICAgZGlzcGF0Y2goY29tcGxldGVEcm9wKHtcbiAgICAgICAgICAgIGNvbXBsZXRlZDogaW5pdGlhbC5jb21wbGV0ZWQsXG4gICAgICAgICAgICBzaG91bGRGbHVzaDogdHJ1ZVxuICAgICAgICAgIH0pKTtcbiAgICAgICAgfVxuXG4gICAgICAgICEoZ2V0U3RhdGUoKS5waGFzZSA9PT0gJ0lETEUnKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0luY29ycmVjdCBwaGFzZSB0byBzdGFydCBhIGRyYWcnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICAgIHZhciBzY3JvbGxPcHRpb25zID0ge1xuICAgICAgICAgIHNob3VsZFB1Ymxpc2hJbW1lZGlhdGVseTogbW92ZW1lbnRNb2RlID09PSAnU05BUCdcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIHJlcXVlc3QgPSB7XG4gICAgICAgICAgZHJhZ2dhYmxlSWQ6IGlkLFxuICAgICAgICAgIHNjcm9sbE9wdGlvbnM6IHNjcm9sbE9wdGlvbnNcbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgX21hcnNoYWwkc3RhcnRQdWJsaXNoID0gbWFyc2hhbC5zdGFydFB1Ymxpc2hpbmcocmVxdWVzdCksXG4gICAgICAgICAgICBjcml0aWNhbCA9IF9tYXJzaGFsJHN0YXJ0UHVibGlzaC5jcml0aWNhbCxcbiAgICAgICAgICAgIGRpbWVuc2lvbnMgPSBfbWFyc2hhbCRzdGFydFB1Ymxpc2guZGltZW5zaW9ucyxcbiAgICAgICAgICAgIHZpZXdwb3J0ID0gX21hcnNoYWwkc3RhcnRQdWJsaXNoLnZpZXdwb3J0O1xuXG4gICAgICAgIGRpc3BhdGNoKGluaXRpYWxQdWJsaXNoKHtcbiAgICAgICAgICBjcml0aWNhbDogY3JpdGljYWwsXG4gICAgICAgICAgZGltZW5zaW9uczogZGltZW5zaW9ucyxcbiAgICAgICAgICBjbGllbnRTZWxlY3Rpb246IGNsaWVudFNlbGVjdGlvbixcbiAgICAgICAgICBtb3ZlbWVudE1vZGU6IG1vdmVtZW50TW9kZSxcbiAgICAgICAgICB2aWV3cG9ydDogdmlld3BvcnRcbiAgICAgICAgfSkpO1xuICAgICAgfTtcbiAgICB9O1xuICB9O1xufSk7XG5cbnZhciBzdHlsZSA9IChmdW5jdGlvbiAobWFyc2hhbCkge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAobmV4dCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgICAgICAgaWYgKGFjdGlvbi50eXBlID09PSAnSU5JVElBTF9QVUJMSVNIJykge1xuICAgICAgICAgIG1hcnNoYWwuZHJhZ2dpbmcoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChhY3Rpb24udHlwZSA9PT0gJ0RST1BfQU5JTUFURScpIHtcbiAgICAgICAgICBtYXJzaGFsLmRyb3BwaW5nKGFjdGlvbi5wYXlsb2FkLmNvbXBsZXRlZC5yZXN1bHQucmVhc29uKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChhY3Rpb24udHlwZSA9PT0gJ0NMRUFOJyB8fCBhY3Rpb24udHlwZSA9PT0gJ0RST1BfQ09NUExFVEUnKSB7XG4gICAgICAgICAgbWFyc2hhbC5yZXN0aW5nKCk7XG4gICAgICAgIH1cblxuICAgICAgICBuZXh0KGFjdGlvbik7XG4gICAgICB9O1xuICAgIH07XG4gIH07XG59KTtcblxudmFyIGN1cnZlcyA9IHtcbiAgb3V0T2ZUaGVXYXk6ICdjdWJpYy1iZXppZXIoMC4yLCAwLCAwLCAxKScsXG4gIGRyb3A6ICdjdWJpYy1iZXppZXIoLjIsMSwuMSwxKSdcbn07XG52YXIgY29tYmluZSA9IHtcbiAgb3BhY2l0eToge1xuICAgIGRyb3A6IDAsXG4gICAgY29tYmluaW5nOiAwLjdcbiAgfSxcbiAgc2NhbGU6IHtcbiAgICBkcm9wOiAwLjc1XG4gIH1cbn07XG52YXIgdGltaW5ncyA9IHtcbiAgb3V0T2ZUaGVXYXk6IDAuMixcbiAgbWluRHJvcFRpbWU6IDAuMzMsXG4gIG1heERyb3BUaW1lOiAwLjU1XG59O1xudmFyIG91dE9mVGhlV2F5VGltaW5nID0gdGltaW5ncy5vdXRPZlRoZVdheSArIFwicyBcIiArIGN1cnZlcy5vdXRPZlRoZVdheTtcbnZhciB0cmFuc2l0aW9ucyA9IHtcbiAgZmx1aWQ6IFwib3BhY2l0eSBcIiArIG91dE9mVGhlV2F5VGltaW5nLFxuICBzbmFwOiBcInRyYW5zZm9ybSBcIiArIG91dE9mVGhlV2F5VGltaW5nICsgXCIsIG9wYWNpdHkgXCIgKyBvdXRPZlRoZVdheVRpbWluZyxcbiAgZHJvcDogZnVuY3Rpb24gZHJvcChkdXJhdGlvbikge1xuICAgIHZhciB0aW1pbmcgPSBkdXJhdGlvbiArIFwicyBcIiArIGN1cnZlcy5kcm9wO1xuICAgIHJldHVybiBcInRyYW5zZm9ybSBcIiArIHRpbWluZyArIFwiLCBvcGFjaXR5IFwiICsgdGltaW5nO1xuICB9LFxuICBvdXRPZlRoZVdheTogXCJ0cmFuc2Zvcm0gXCIgKyBvdXRPZlRoZVdheVRpbWluZyxcbiAgcGxhY2Vob2xkZXI6IFwiaGVpZ2h0IFwiICsgb3V0T2ZUaGVXYXlUaW1pbmcgKyBcIiwgd2lkdGggXCIgKyBvdXRPZlRoZVdheVRpbWluZyArIFwiLCBtYXJnaW4gXCIgKyBvdXRPZlRoZVdheVRpbWluZ1xufTtcblxudmFyIG1vdmVUbyA9IGZ1bmN0aW9uIG1vdmVUbyhvZmZzZXQpIHtcbiAgcmV0dXJuIGlzRXF1YWwob2Zmc2V0LCBvcmlnaW4pID8gbnVsbCA6IFwidHJhbnNsYXRlKFwiICsgb2Zmc2V0LnggKyBcInB4LCBcIiArIG9mZnNldC55ICsgXCJweClcIjtcbn07XG5cbnZhciB0cmFuc2Zvcm1zID0ge1xuICBtb3ZlVG86IG1vdmVUbyxcbiAgZHJvcDogZnVuY3Rpb24gZHJvcChvZmZzZXQsIGlzQ29tYmluaW5nKSB7XG4gICAgdmFyIHRyYW5zbGF0ZSA9IG1vdmVUbyhvZmZzZXQpO1xuXG4gICAgaWYgKCF0cmFuc2xhdGUpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGlmICghaXNDb21iaW5pbmcpIHtcbiAgICAgIHJldHVybiB0cmFuc2xhdGU7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRyYW5zbGF0ZSArIFwiIHNjYWxlKFwiICsgY29tYmluZS5zY2FsZS5kcm9wICsgXCIpXCI7XG4gIH1cbn07XG5cbnZhciBtaW5Ecm9wVGltZSA9IHRpbWluZ3MubWluRHJvcFRpbWUsXG4gICAgbWF4RHJvcFRpbWUgPSB0aW1pbmdzLm1heERyb3BUaW1lO1xudmFyIGRyb3BUaW1lUmFuZ2UgPSBtYXhEcm9wVGltZSAtIG1pbkRyb3BUaW1lO1xudmFyIG1heERyb3BUaW1lQXREaXN0YW5jZSA9IDE1MDA7XG52YXIgY2FuY2VsRHJvcE1vZGlmaWVyID0gMC42O1xudmFyIGdldERyb3BEdXJhdGlvbiA9IChmdW5jdGlvbiAoX3JlZikge1xuICB2YXIgY3VycmVudCA9IF9yZWYuY3VycmVudCxcbiAgICAgIGRlc3RpbmF0aW9uID0gX3JlZi5kZXN0aW5hdGlvbixcbiAgICAgIHJlYXNvbiA9IF9yZWYucmVhc29uO1xuICB2YXIgZGlzdGFuY2UkMSA9IGRpc3RhbmNlKGN1cnJlbnQsIGRlc3RpbmF0aW9uKTtcblxuICBpZiAoZGlzdGFuY2UkMSA8PSAwKSB7XG4gICAgcmV0dXJuIG1pbkRyb3BUaW1lO1xuICB9XG5cbiAgaWYgKGRpc3RhbmNlJDEgPj0gbWF4RHJvcFRpbWVBdERpc3RhbmNlKSB7XG4gICAgcmV0dXJuIG1heERyb3BUaW1lO1xuICB9XG5cbiAgdmFyIHBlcmNlbnRhZ2UgPSBkaXN0YW5jZSQxIC8gbWF4RHJvcFRpbWVBdERpc3RhbmNlO1xuICB2YXIgZHVyYXRpb24gPSBtaW5Ecm9wVGltZSArIGRyb3BUaW1lUmFuZ2UgKiBwZXJjZW50YWdlO1xuICB2YXIgd2l0aER1cmF0aW9uID0gcmVhc29uID09PSAnQ0FOQ0VMJyA/IGR1cmF0aW9uICogY2FuY2VsRHJvcE1vZGlmaWVyIDogZHVyYXRpb247XG4gIHJldHVybiBOdW1iZXIod2l0aER1cmF0aW9uLnRvRml4ZWQoMikpO1xufSk7XG5cbnZhciBnZXROZXdIb21lQ2xpZW50T2Zmc2V0ID0gKGZ1bmN0aW9uIChfcmVmKSB7XG4gIHZhciBpbXBhY3QgPSBfcmVmLmltcGFjdCxcbiAgICAgIGRyYWdnYWJsZSA9IF9yZWYuZHJhZ2dhYmxlLFxuICAgICAgZGltZW5zaW9ucyA9IF9yZWYuZGltZW5zaW9ucyxcbiAgICAgIHZpZXdwb3J0ID0gX3JlZi52aWV3cG9ydCxcbiAgICAgIG9uTGlmdCA9IF9yZWYub25MaWZ0O1xuICB2YXIgZHJhZ2dhYmxlcyA9IGRpbWVuc2lvbnMuZHJhZ2dhYmxlcyxcbiAgICAgIGRyb3BwYWJsZXMgPSBkaW1lbnNpb25zLmRyb3BwYWJsZXM7XG4gIHZhciBkcm9wcGFibGVJZCA9IHdoYXRJc0RyYWdnZWRPdmVyKGltcGFjdCk7XG4gIHZhciBkZXN0aW5hdGlvbiA9IGRyb3BwYWJsZUlkID8gZHJvcHBhYmxlc1tkcm9wcGFibGVJZF0gOiBudWxsO1xuICB2YXIgaG9tZSA9IGRyb3BwYWJsZXNbZHJhZ2dhYmxlLmRlc2NyaXB0b3IuZHJvcHBhYmxlSWRdO1xuICB2YXIgbmV3Q2xpZW50Q2VudGVyID0gZ2V0Q2xpZW50Qm9yZGVyQm94Q2VudGVyKHtcbiAgICBpbXBhY3Q6IGltcGFjdCxcbiAgICBkcmFnZ2FibGU6IGRyYWdnYWJsZSxcbiAgICBkcmFnZ2FibGVzOiBkcmFnZ2FibGVzLFxuICAgIG9uTGlmdDogb25MaWZ0LFxuICAgIGRyb3BwYWJsZTogZGVzdGluYXRpb24gfHwgaG9tZSxcbiAgICB2aWV3cG9ydDogdmlld3BvcnRcbiAgfSk7XG4gIHZhciBvZmZzZXQgPSBzdWJ0cmFjdChuZXdDbGllbnRDZW50ZXIsIGRyYWdnYWJsZS5jbGllbnQuYm9yZGVyQm94LmNlbnRlcik7XG4gIHZhciBtZXJnZSA9IGltcGFjdC5tZXJnZTtcblxuICBpZiAobWVyZ2UgJiYgZGlkU3RhcnREaXNwbGFjZWQobWVyZ2UuY29tYmluZS5kcmFnZ2FibGVJZCwgb25MaWZ0KSkge1xuICAgIHJldHVybiBzdWJ0cmFjdChvZmZzZXQsIG9uTGlmdC5kaXNwbGFjZWRCeS5wb2ludCk7XG4gIH1cblxuICByZXR1cm4gb2Zmc2V0O1xufSk7XG5cbnZhciBnZXREcm9wSW1wYWN0ID0gKGZ1bmN0aW9uIChfcmVmKSB7XG4gIHZhciByZWFzb24gPSBfcmVmLnJlYXNvbixcbiAgICAgIGxhc3RJbXBhY3QgPSBfcmVmLmxhc3RJbXBhY3QsXG4gICAgICBob21lID0gX3JlZi5ob21lLFxuICAgICAgdmlld3BvcnQgPSBfcmVmLnZpZXdwb3J0LFxuICAgICAgZHJhZ2dhYmxlcyA9IF9yZWYuZHJhZ2dhYmxlcyxcbiAgICAgIG9uTGlmdEltcGFjdCA9IF9yZWYub25MaWZ0SW1wYWN0LFxuICAgICAgb25MaWZ0ID0gX3JlZi5vbkxpZnQ7XG4gIHZhciBkaWREcm9wSW5zaWRlRHJvcHBhYmxlID0gcmVhc29uID09PSAnRFJPUCcgJiYgQm9vbGVhbih3aGF0SXNEcmFnZ2VkT3ZlcihsYXN0SW1wYWN0KSk7XG5cbiAgaWYgKCFkaWREcm9wSW5zaWRlRHJvcHBhYmxlKSB7XG4gICAgdmFyIGltcGFjdCA9IHJlY29tcHV0ZSh7XG4gICAgICBpbXBhY3Q6IG9uTGlmdEltcGFjdCxcbiAgICAgIGRlc3RpbmF0aW9uOiBob21lLFxuICAgICAgdmlld3BvcnQ6IHZpZXdwb3J0LFxuICAgICAgZHJhZ2dhYmxlczogZHJhZ2dhYmxlcyxcbiAgICAgIG9uTGlmdDogb25MaWZ0LFxuICAgICAgZm9yY2VTaG91bGRBbmltYXRlOiB0cnVlXG4gICAgfSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGltcGFjdDogaW1wYWN0LFxuICAgICAgZGlkRHJvcEluc2lkZURyb3BwYWJsZTogZGlkRHJvcEluc2lkZURyb3BwYWJsZVxuICAgIH07XG4gIH1cblxuICBpZiAobGFzdEltcGFjdC5kZXN0aW5hdGlvbikge1xuICAgIHJldHVybiB7XG4gICAgICBpbXBhY3Q6IGxhc3RJbXBhY3QsXG4gICAgICBkaWREcm9wSW5zaWRlRHJvcHBhYmxlOiBkaWREcm9wSW5zaWRlRHJvcHBhYmxlXG4gICAgfTtcbiAgfVxuXG4gIHZhciB3aXRob3V0TW92ZW1lbnQgPSBfZXh0ZW5kcyh7fSwgbGFzdEltcGFjdCwge1xuICAgIG1vdmVtZW50OiBub01vdmVtZW50XG4gIH0pO1xuXG4gIHJldHVybiB7XG4gICAgaW1wYWN0OiB3aXRob3V0TW92ZW1lbnQsXG4gICAgZGlkRHJvcEluc2lkZURyb3BwYWJsZTogZGlkRHJvcEluc2lkZURyb3BwYWJsZVxuICB9O1xufSk7XG5cbnZhciBkcm9wJDEgPSAoZnVuY3Rpb24gKF9yZWYpIHtcbiAgdmFyIGdldFN0YXRlID0gX3JlZi5nZXRTdGF0ZSxcbiAgICAgIGRpc3BhdGNoID0gX3JlZi5kaXNwYXRjaDtcbiAgcmV0dXJuIGZ1bmN0aW9uIChuZXh0KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgICAgIGlmIChhY3Rpb24udHlwZSAhPT0gJ0RST1AnKSB7XG4gICAgICAgIG5leHQoYWN0aW9uKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgc3RhdGUgPSBnZXRTdGF0ZSgpO1xuICAgICAgdmFyIHJlYXNvbiA9IGFjdGlvbi5wYXlsb2FkLnJlYXNvbjtcblxuICAgICAgaWYgKHN0YXRlLnBoYXNlID09PSAnQ09MTEVDVElORycpIHtcbiAgICAgICAgZGlzcGF0Y2goZHJvcFBlbmRpbmcoe1xuICAgICAgICAgIHJlYXNvbjogcmVhc29uXG4gICAgICAgIH0pKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3RhdGUucGhhc2UgPT09ICdJRExFJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBpc1dhaXRpbmdGb3JEcm9wID0gc3RhdGUucGhhc2UgPT09ICdEUk9QX1BFTkRJTkcnICYmIHN0YXRlLmlzV2FpdGluZztcbiAgICAgICEhaXNXYWl0aW5nRm9yRHJvcCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0EgRFJPUCBhY3Rpb24gb2NjdXJyZWQgd2hpbGUgRFJPUF9QRU5ESU5HIGFuZCBzdGlsbCB3YWl0aW5nJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgIShzdGF0ZS5waGFzZSA9PT0gJ0RSQUdHSU5HJyB8fCBzdGF0ZS5waGFzZSA9PT0gJ0RST1BfUEVORElORycpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIkNhbm5vdCBkcm9wIGluIHBoYXNlOiBcIiArIHN0YXRlLnBoYXNlKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICB2YXIgY3JpdGljYWwgPSBzdGF0ZS5jcml0aWNhbDtcbiAgICAgIHZhciBkaW1lbnNpb25zID0gc3RhdGUuZGltZW5zaW9ucztcblxuICAgICAgdmFyIF9nZXREcm9wSW1wYWN0ID0gZ2V0RHJvcEltcGFjdCh7XG4gICAgICAgIHJlYXNvbjogcmVhc29uLFxuICAgICAgICBsYXN0SW1wYWN0OiBzdGF0ZS5pbXBhY3QsXG4gICAgICAgIG9uTGlmdDogc3RhdGUub25MaWZ0LFxuICAgICAgICBvbkxpZnRJbXBhY3Q6IHN0YXRlLm9uTGlmdEltcGFjdCxcbiAgICAgICAgaG9tZTogc3RhdGUuZGltZW5zaW9ucy5kcm9wcGFibGVzW3N0YXRlLmNyaXRpY2FsLmRyb3BwYWJsZS5pZF0sXG4gICAgICAgIHZpZXdwb3J0OiBzdGF0ZS52aWV3cG9ydCxcbiAgICAgICAgZHJhZ2dhYmxlczogc3RhdGUuZGltZW5zaW9ucy5kcmFnZ2FibGVzXG4gICAgICB9KSxcbiAgICAgICAgICBpbXBhY3QgPSBfZ2V0RHJvcEltcGFjdC5pbXBhY3QsXG4gICAgICAgICAgZGlkRHJvcEluc2lkZURyb3BwYWJsZSA9IF9nZXREcm9wSW1wYWN0LmRpZERyb3BJbnNpZGVEcm9wcGFibGU7XG5cbiAgICAgIHZhciBkcmFnZ2FibGUgPSBkaW1lbnNpb25zLmRyYWdnYWJsZXNbc3RhdGUuY3JpdGljYWwuZHJhZ2dhYmxlLmlkXTtcbiAgICAgIHZhciBkZXN0aW5hdGlvbiA9IGRpZERyb3BJbnNpZGVEcm9wcGFibGUgPyBpbXBhY3QuZGVzdGluYXRpb24gOiBudWxsO1xuICAgICAgdmFyIGNvbWJpbmUgPSBkaWREcm9wSW5zaWRlRHJvcHBhYmxlICYmIGltcGFjdC5tZXJnZSA/IGltcGFjdC5tZXJnZS5jb21iaW5lIDogbnVsbDtcbiAgICAgIHZhciBzb3VyY2UgPSB7XG4gICAgICAgIGluZGV4OiBjcml0aWNhbC5kcmFnZ2FibGUuaW5kZXgsXG4gICAgICAgIGRyb3BwYWJsZUlkOiBjcml0aWNhbC5kcm9wcGFibGUuaWRcbiAgICAgIH07XG4gICAgICB2YXIgcmVzdWx0ID0ge1xuICAgICAgICBkcmFnZ2FibGVJZDogZHJhZ2dhYmxlLmRlc2NyaXB0b3IuaWQsXG4gICAgICAgIHR5cGU6IGRyYWdnYWJsZS5kZXNjcmlwdG9yLnR5cGUsXG4gICAgICAgIHNvdXJjZTogc291cmNlLFxuICAgICAgICByZWFzb246IHJlYXNvbixcbiAgICAgICAgbW9kZTogc3RhdGUubW92ZW1lbnRNb2RlLFxuICAgICAgICBkZXN0aW5hdGlvbjogZGVzdGluYXRpb24sXG4gICAgICAgIGNvbWJpbmU6IGNvbWJpbmVcbiAgICAgIH07XG4gICAgICB2YXIgbmV3SG9tZUNsaWVudE9mZnNldCA9IGdldE5ld0hvbWVDbGllbnRPZmZzZXQoe1xuICAgICAgICBpbXBhY3Q6IGltcGFjdCxcbiAgICAgICAgZHJhZ2dhYmxlOiBkcmFnZ2FibGUsXG4gICAgICAgIGRpbWVuc2lvbnM6IGRpbWVuc2lvbnMsXG4gICAgICAgIHZpZXdwb3J0OiBzdGF0ZS52aWV3cG9ydCxcbiAgICAgICAgb25MaWZ0OiBzdGF0ZS5vbkxpZnRcbiAgICAgIH0pO1xuICAgICAgdmFyIGNvbXBsZXRlZCA9IHtcbiAgICAgICAgY3JpdGljYWw6IHN0YXRlLmNyaXRpY2FsLFxuICAgICAgICByZXN1bHQ6IHJlc3VsdCxcbiAgICAgICAgaW1wYWN0OiBpbXBhY3RcbiAgICAgIH07XG4gICAgICB2YXIgaXNBbmltYXRpb25SZXF1aXJlZCA9ICFpc0VxdWFsKHN0YXRlLmN1cnJlbnQuY2xpZW50Lm9mZnNldCwgbmV3SG9tZUNsaWVudE9mZnNldCkgfHwgQm9vbGVhbihyZXN1bHQuY29tYmluZSk7XG5cbiAgICAgIGlmICghaXNBbmltYXRpb25SZXF1aXJlZCkge1xuICAgICAgICBkaXNwYXRjaChjb21wbGV0ZURyb3Aoe1xuICAgICAgICAgIGNvbXBsZXRlZDogY29tcGxldGVkLFxuICAgICAgICAgIHNob3VsZEZsdXNoOiBmYWxzZVxuICAgICAgICB9KSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIGRyb3BEdXJhdGlvbiA9IGdldERyb3BEdXJhdGlvbih7XG4gICAgICAgIGN1cnJlbnQ6IHN0YXRlLmN1cnJlbnQuY2xpZW50Lm9mZnNldCxcbiAgICAgICAgZGVzdGluYXRpb246IG5ld0hvbWVDbGllbnRPZmZzZXQsXG4gICAgICAgIHJlYXNvbjogcmVhc29uXG4gICAgICB9KTtcbiAgICAgIHZhciBhcmdzID0ge1xuICAgICAgICBuZXdIb21lQ2xpZW50T2Zmc2V0OiBuZXdIb21lQ2xpZW50T2Zmc2V0LFxuICAgICAgICBkcm9wRHVyYXRpb246IGRyb3BEdXJhdGlvbixcbiAgICAgICAgY29tcGxldGVkOiBjb21wbGV0ZWRcbiAgICAgIH07XG4gICAgICBkaXNwYXRjaChhbmltYXRlRHJvcChhcmdzKSk7XG4gICAgfTtcbiAgfTtcbn0pO1xuXG52YXIgcG9zaXRpb24gPSBmdW5jdGlvbiBwb3NpdGlvbihpbmRleCkge1xuICByZXR1cm4gaW5kZXggKyAxO1xufTtcblxudmFyIG9uRHJhZ1N0YXJ0ID0gZnVuY3Rpb24gb25EcmFnU3RhcnQoc3RhcnQpIHtcbiAgcmV0dXJuIFwiXFxuICBZb3UgaGF2ZSBsaWZ0ZWQgYW4gaXRlbSBpbiBwb3NpdGlvbiBcIiArIHBvc2l0aW9uKHN0YXJ0LnNvdXJjZS5pbmRleCkgKyBcIi5cXG4gIFVzZSB0aGUgYXJyb3cga2V5cyB0byBtb3ZlLCBzcGFjZSBiYXIgdG8gZHJvcCwgYW5kIGVzY2FwZSB0byBjYW5jZWwuXFxuXCI7XG59O1xuXG52YXIgd2l0aExvY2F0aW9uID0gZnVuY3Rpb24gd2l0aExvY2F0aW9uKHNvdXJjZSwgZGVzdGluYXRpb24pIHtcbiAgdmFyIGlzSW5Ib21lTGlzdCA9IHNvdXJjZS5kcm9wcGFibGVJZCA9PT0gZGVzdGluYXRpb24uZHJvcHBhYmxlSWQ7XG4gIHZhciBzdGFydFBvc2l0aW9uID0gcG9zaXRpb24oc291cmNlLmluZGV4KTtcbiAgdmFyIGVuZFBvc2l0aW9uID0gcG9zaXRpb24oZGVzdGluYXRpb24uaW5kZXgpO1xuXG4gIGlmIChpc0luSG9tZUxpc3QpIHtcbiAgICByZXR1cm4gXCJcXG4gICAgICBZb3UgaGF2ZSBtb3ZlZCB0aGUgaXRlbSBmcm9tIHBvc2l0aW9uIFwiICsgc3RhcnRQb3NpdGlvbiArIFwiXFxuICAgICAgdG8gcG9zaXRpb24gXCIgKyBlbmRQb3NpdGlvbiArIFwiXFxuICAgIFwiO1xuICB9XG5cbiAgcmV0dXJuIFwiXFxuICAgIFlvdSBoYXZlIG1vdmVkIHRoZSBpdGVtIGZyb20gcG9zaXRpb24gXCIgKyBzdGFydFBvc2l0aW9uICsgXCJcXG4gICAgaW4gbGlzdCBcIiArIHNvdXJjZS5kcm9wcGFibGVJZCArIFwiXFxuICAgIHRvIGxpc3QgXCIgKyBkZXN0aW5hdGlvbi5kcm9wcGFibGVJZCArIFwiXFxuICAgIGluIHBvc2l0aW9uIFwiICsgZW5kUG9zaXRpb24gKyBcIlxcbiAgXCI7XG59O1xuXG52YXIgd2l0aENvbWJpbmUgPSBmdW5jdGlvbiB3aXRoQ29tYmluZShpZCwgc291cmNlLCBjb21iaW5lKSB7XG4gIHZhciBpbkhvbWVMaXN0ID0gc291cmNlLmRyb3BwYWJsZUlkID09PSBjb21iaW5lLmRyb3BwYWJsZUlkO1xuXG4gIGlmIChpbkhvbWVMaXN0KSB7XG4gICAgcmV0dXJuIFwiXFxuICAgICAgVGhlIGl0ZW0gXCIgKyBpZCArIFwiXFxuICAgICAgaGFzIGJlZW4gY29tYmluZWQgd2l0aCBcIiArIGNvbWJpbmUuZHJhZ2dhYmxlSWQ7XG4gIH1cblxuICByZXR1cm4gXCJcXG4gICAgICBUaGUgaXRlbSBcIiArIGlkICsgXCJcXG4gICAgICBpbiBsaXN0IFwiICsgc291cmNlLmRyb3BwYWJsZUlkICsgXCJcXG4gICAgICBoYXMgYmVlbiBjb21iaW5lZCB3aXRoIFwiICsgY29tYmluZS5kcmFnZ2FibGVJZCArIFwiXFxuICAgICAgaW4gbGlzdCBcIiArIGNvbWJpbmUuZHJvcHBhYmxlSWQgKyBcIlxcbiAgICBcIjtcbn07XG5cbnZhciBvbkRyYWdVcGRhdGUgPSBmdW5jdGlvbiBvbkRyYWdVcGRhdGUodXBkYXRlKSB7XG4gIHZhciBsb2NhdGlvbiA9IHVwZGF0ZS5kZXN0aW5hdGlvbjtcblxuICBpZiAobG9jYXRpb24pIHtcbiAgICByZXR1cm4gd2l0aExvY2F0aW9uKHVwZGF0ZS5zb3VyY2UsIGxvY2F0aW9uKTtcbiAgfVxuXG4gIHZhciBjb21iaW5lID0gdXBkYXRlLmNvbWJpbmU7XG5cbiAgaWYgKGNvbWJpbmUpIHtcbiAgICByZXR1cm4gd2l0aENvbWJpbmUodXBkYXRlLmRyYWdnYWJsZUlkLCB1cGRhdGUuc291cmNlLCBjb21iaW5lKTtcbiAgfVxuXG4gIHJldHVybiAnWW91IGFyZSBvdmVyIGFuIGFyZWEgdGhhdCBjYW5ub3QgYmUgZHJvcHBlZCBvbic7XG59O1xuXG52YXIgcmV0dXJuZWRUb1N0YXJ0ID0gZnVuY3Rpb24gcmV0dXJuZWRUb1N0YXJ0KHNvdXJjZSkge1xuICByZXR1cm4gXCJcXG4gIFRoZSBpdGVtIGhhcyByZXR1cm5lZCB0byBpdHMgc3RhcnRpbmcgcG9zaXRpb25cXG4gIG9mIFwiICsgcG9zaXRpb24oc291cmNlLmluZGV4KSArIFwiXFxuXCI7XG59O1xuXG52YXIgb25EcmFnRW5kID0gZnVuY3Rpb24gb25EcmFnRW5kKHJlc3VsdCkge1xuICBpZiAocmVzdWx0LnJlYXNvbiA9PT0gJ0NBTkNFTCcpIHtcbiAgICByZXR1cm4gXCJcXG4gICAgICBNb3ZlbWVudCBjYW5jZWxsZWQuXFxuICAgICAgXCIgKyByZXR1cm5lZFRvU3RhcnQocmVzdWx0LnNvdXJjZSkgKyBcIlxcbiAgICBcIjtcbiAgfVxuXG4gIHZhciBsb2NhdGlvbiA9IHJlc3VsdC5kZXN0aW5hdGlvbjtcbiAgdmFyIGNvbWJpbmUgPSByZXN1bHQuY29tYmluZTtcblxuICBpZiAobG9jYXRpb24pIHtcbiAgICByZXR1cm4gXCJcXG4gICAgICBZb3UgaGF2ZSBkcm9wcGVkIHRoZSBpdGVtLlxcbiAgICAgIFwiICsgd2l0aExvY2F0aW9uKHJlc3VsdC5zb3VyY2UsIGxvY2F0aW9uKSArIFwiXFxuICAgIFwiO1xuICB9XG5cbiAgaWYgKGNvbWJpbmUpIHtcbiAgICByZXR1cm4gXCJcXG4gICAgICBZb3UgaGF2ZSBkcm9wcGVkIHRoZSBpdGVtLlxcbiAgICAgIFwiICsgd2l0aENvbWJpbmUocmVzdWx0LmRyYWdnYWJsZUlkLCByZXN1bHQuc291cmNlLCBjb21iaW5lKSArIFwiXFxuICAgIFwiO1xuICB9XG5cbiAgcmV0dXJuIFwiXFxuICAgIFRoZSBpdGVtIGhhcyBiZWVuIGRyb3BwZWQgd2hpbGUgbm90IG92ZXIgYSBkcm9wIGFyZWEuXFxuICAgIFwiICsgcmV0dXJuZWRUb1N0YXJ0KHJlc3VsdC5zb3VyY2UpICsgXCJcXG4gIFwiO1xufTtcblxudmFyIHByZXNldCA9IHtcbiAgb25EcmFnU3RhcnQ6IG9uRHJhZ1N0YXJ0LFxuICBvbkRyYWdVcGRhdGU6IG9uRHJhZ1VwZGF0ZSxcbiAgb25EcmFnRW5kOiBvbkRyYWdFbmRcbn07XG5cbnZhciBnZXRFeHBpcmluZ0Fubm91bmNlID0gKGZ1bmN0aW9uIChhbm5vdW5jZSkge1xuICB2YXIgd2FzQ2FsbGVkID0gZmFsc2U7XG4gIHZhciBpc0V4cGlyZWQgPSBmYWxzZTtcbiAgdmFyIHRpbWVvdXRJZCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgIGlzRXhwaXJlZCA9IHRydWU7XG4gIH0pO1xuXG4gIHZhciByZXN1bHQgPSBmdW5jdGlvbiByZXN1bHQobWVzc2FnZSkge1xuICAgIGlmICh3YXNDYWxsZWQpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoJ0Fubm91bmNlbWVudCBhbHJlYWR5IG1hZGUuIE5vdCBtYWtpbmcgYSBzZWNvbmQgYW5ub3VuY2VtZW50JykgOiB2b2lkIDA7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGlzRXhwaXJlZCkge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhcIlxcbiAgICAgICAgQW5ub3VuY2VtZW50cyBjYW5ub3QgYmUgbWFkZSBhc3luY2hyb25vdXNseS5cXG4gICAgICAgIERlZmF1bHQgbWVzc2FnZSBoYXMgYWxyZWFkeSBiZWVuIGFubm91bmNlZC5cXG4gICAgICBcIikgOiB2b2lkIDA7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgd2FzQ2FsbGVkID0gdHJ1ZTtcbiAgICBhbm5vdW5jZShtZXNzYWdlKTtcbiAgICBjbGVhclRpbWVvdXQodGltZW91dElkKTtcbiAgfTtcblxuICByZXN1bHQud2FzQ2FsbGVkID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB3YXNDYWxsZWQ7XG4gIH07XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn0pO1xuXG52YXIgZ2V0QXN5bmNNYXJzaGFsID0gKGZ1bmN0aW9uICgpIHtcbiAgdmFyIGVudHJpZXMgPSBbXTtcblxuICB2YXIgZXhlY3V0ZSA9IGZ1bmN0aW9uIGV4ZWN1dGUodGltZXJJZCkge1xuICAgIHZhciBpbmRleCA9IGZpbmRJbmRleChlbnRyaWVzLCBmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgcmV0dXJuIGl0ZW0udGltZXJJZCA9PT0gdGltZXJJZDtcbiAgICB9KTtcbiAgICAhKGluZGV4ICE9PSAtMSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdDb3VsZCBub3QgZmluZCB0aW1lcicpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcblxuICAgIHZhciBfZW50cmllcyRzcGxpY2UgPSBlbnRyaWVzLnNwbGljZShpbmRleCwgMSksXG4gICAgICAgIGVudHJ5ID0gX2VudHJpZXMkc3BsaWNlWzBdO1xuXG4gICAgZW50cnkuY2FsbGJhY2soKTtcbiAgfTtcblxuICB2YXIgYWRkID0gZnVuY3Rpb24gYWRkKGZuKSB7XG4gICAgdmFyIHRpbWVySWQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBleGVjdXRlKHRpbWVySWQpO1xuICAgIH0pO1xuICAgIHZhciBlbnRyeSA9IHtcbiAgICAgIHRpbWVySWQ6IHRpbWVySWQsXG4gICAgICBjYWxsYmFjazogZm5cbiAgICB9O1xuICAgIGVudHJpZXMucHVzaChlbnRyeSk7XG4gIH07XG5cbiAgdmFyIGZsdXNoID0gZnVuY3Rpb24gZmx1c2goKSB7XG4gICAgaWYgKCFlbnRyaWVzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBzaGFsbG93ID0gW10uY29uY2F0KGVudHJpZXMpO1xuICAgIGVudHJpZXMubGVuZ3RoID0gMDtcbiAgICBzaGFsbG93LmZvckVhY2goZnVuY3Rpb24gKGVudHJ5KSB7XG4gICAgICBjbGVhclRpbWVvdXQoZW50cnkudGltZXJJZCk7XG4gICAgICBlbnRyeS5jYWxsYmFjaygpO1xuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiB7XG4gICAgYWRkOiBhZGQsXG4gICAgZmx1c2g6IGZsdXNoXG4gIH07XG59KTtcblxudmFyIGFyZUxvY2F0aW9uc0VxdWFsID0gZnVuY3Rpb24gYXJlTG9jYXRpb25zRXF1YWwoZmlyc3QsIHNlY29uZCkge1xuICBpZiAoZmlyc3QgPT0gbnVsbCAmJiBzZWNvbmQgPT0gbnVsbCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKGZpcnN0ID09IG51bGwgfHwgc2Vjb25kID09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gZmlyc3QuZHJvcHBhYmxlSWQgPT09IHNlY29uZC5kcm9wcGFibGVJZCAmJiBmaXJzdC5pbmRleCA9PT0gc2Vjb25kLmluZGV4O1xufTtcbnZhciBpc0NvbWJpbmVFcXVhbCA9IGZ1bmN0aW9uIGlzQ29tYmluZUVxdWFsKGZpcnN0LCBzZWNvbmQpIHtcbiAgaWYgKGZpcnN0ID09IG51bGwgJiYgc2Vjb25kID09IG51bGwpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGlmIChmaXJzdCA9PSBudWxsIHx8IHNlY29uZCA9PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIGZpcnN0LmRyYWdnYWJsZUlkID09PSBzZWNvbmQuZHJhZ2dhYmxlSWQgJiYgZmlyc3QuZHJvcHBhYmxlSWQgPT09IHNlY29uZC5kcm9wcGFibGVJZDtcbn07XG52YXIgaXNDcml0aWNhbEVxdWFsID0gZnVuY3Rpb24gaXNDcml0aWNhbEVxdWFsKGZpcnN0LCBzZWNvbmQpIHtcbiAgaWYgKGZpcnN0ID09PSBzZWNvbmQpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHZhciBpc0RyYWdnYWJsZUVxdWFsID0gZmlyc3QuZHJhZ2dhYmxlLmlkID09PSBzZWNvbmQuZHJhZ2dhYmxlLmlkICYmIGZpcnN0LmRyYWdnYWJsZS5kcm9wcGFibGVJZCA9PT0gc2Vjb25kLmRyYWdnYWJsZS5kcm9wcGFibGVJZCAmJiBmaXJzdC5kcmFnZ2FibGUudHlwZSA9PT0gc2Vjb25kLmRyYWdnYWJsZS50eXBlICYmIGZpcnN0LmRyYWdnYWJsZS5pbmRleCA9PT0gc2Vjb25kLmRyYWdnYWJsZS5pbmRleDtcbiAgdmFyIGlzRHJvcHBhYmxlRXF1YWwgPSBmaXJzdC5kcm9wcGFibGUuaWQgPT09IHNlY29uZC5kcm9wcGFibGUuaWQgJiYgZmlyc3QuZHJvcHBhYmxlLnR5cGUgPT09IHNlY29uZC5kcm9wcGFibGUudHlwZTtcbiAgcmV0dXJuIGlzRHJhZ2dhYmxlRXF1YWwgJiYgaXNEcm9wcGFibGVFcXVhbDtcbn07XG5cbnZhciB3aXRoVGltaW5ncyA9IGZ1bmN0aW9uIHdpdGhUaW1pbmdzKGtleSwgZm4pIHtcbiAgc3RhcnQoa2V5KTtcbiAgZm4oKTtcbiAgZmluaXNoKGtleSk7XG59O1xuXG52YXIgZ2V0RHJhZ1N0YXJ0ID0gZnVuY3Rpb24gZ2V0RHJhZ1N0YXJ0KGNyaXRpY2FsLCBtb2RlKSB7XG4gIHJldHVybiB7XG4gICAgZHJhZ2dhYmxlSWQ6IGNyaXRpY2FsLmRyYWdnYWJsZS5pZCxcbiAgICB0eXBlOiBjcml0aWNhbC5kcm9wcGFibGUudHlwZSxcbiAgICBzb3VyY2U6IHtcbiAgICAgIGRyb3BwYWJsZUlkOiBjcml0aWNhbC5kcm9wcGFibGUuaWQsXG4gICAgICBpbmRleDogY3JpdGljYWwuZHJhZ2dhYmxlLmluZGV4XG4gICAgfSxcbiAgICBtb2RlOiBtb2RlXG4gIH07XG59O1xuXG52YXIgZXhlY3V0ZSA9IGZ1bmN0aW9uIGV4ZWN1dGUocmVzcG9uZGVyLCBkYXRhLCBhbm5vdW5jZSwgZ2V0RGVmYXVsdE1lc3NhZ2UpIHtcbiAgaWYgKCFyZXNwb25kZXIpIHtcbiAgICBhbm5vdW5jZShnZXREZWZhdWx0TWVzc2FnZShkYXRhKSk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIHdpbGxFeHBpcmUgPSBnZXRFeHBpcmluZ0Fubm91bmNlKGFubm91bmNlKTtcbiAgdmFyIHByb3ZpZGVkID0ge1xuICAgIGFubm91bmNlOiB3aWxsRXhwaXJlXG4gIH07XG4gIHJlc3BvbmRlcihkYXRhLCBwcm92aWRlZCk7XG5cbiAgaWYgKCF3aWxsRXhwaXJlLndhc0NhbGxlZCgpKSB7XG4gICAgYW5ub3VuY2UoZ2V0RGVmYXVsdE1lc3NhZ2UoZGF0YSkpO1xuICB9XG59O1xuXG52YXIgZ2V0UHVibGlzaGVyID0gKGZ1bmN0aW9uIChnZXRSZXNwb25kZXJzLCBhbm5vdW5jZSkge1xuICB2YXIgYXN5bmNNYXJzaGFsID0gZ2V0QXN5bmNNYXJzaGFsKCk7XG4gIHZhciBkcmFnZ2luZyA9IG51bGw7XG5cbiAgdmFyIGJlZm9yZVN0YXJ0ID0gZnVuY3Rpb24gYmVmb3JlU3RhcnQoY3JpdGljYWwsIG1vZGUpIHtcbiAgICAhIWRyYWdnaW5nID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnQ2Fubm90IGZpcmUgb25CZWZvcmVEcmFnU3RhcnQgYXMgYSBkcmFnIHN0YXJ0IGhhcyBhbHJlYWR5IGJlZW4gcHVibGlzaGVkJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHdpdGhUaW1pbmdzKCdvbkJlZm9yZURyYWdTdGFydCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBmbiA9IGdldFJlc3BvbmRlcnMoKS5vbkJlZm9yZURyYWdTdGFydDtcblxuICAgICAgaWYgKGZuKSB7XG4gICAgICAgIGZuKGdldERyYWdTdGFydChjcml0aWNhbCwgbW9kZSkpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIHZhciBzdGFydCA9IGZ1bmN0aW9uIHN0YXJ0KGNyaXRpY2FsLCBtb2RlKSB7XG4gICAgISFkcmFnZ2luZyA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0Nhbm5vdCBmaXJlIG9uQmVmb3JlRHJhZ1N0YXJ0IGFzIGEgZHJhZyBzdGFydCBoYXMgYWxyZWFkeSBiZWVuIHB1Ymxpc2hlZCcpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICB2YXIgZGF0YSA9IGdldERyYWdTdGFydChjcml0aWNhbCwgbW9kZSk7XG4gICAgZHJhZ2dpbmcgPSB7XG4gICAgICBtb2RlOiBtb2RlLFxuICAgICAgbGFzdENyaXRpY2FsOiBjcml0aWNhbCxcbiAgICAgIGxhc3RMb2NhdGlvbjogZGF0YS5zb3VyY2UsXG4gICAgICBsYXN0Q29tYmluZTogbnVsbFxuICAgIH07XG4gICAgYXN5bmNNYXJzaGFsLmFkZChmdW5jdGlvbiAoKSB7XG4gICAgICB3aXRoVGltaW5ncygnb25EcmFnU3RhcnQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBleGVjdXRlKGdldFJlc3BvbmRlcnMoKS5vbkRyYWdTdGFydCwgZGF0YSwgYW5ub3VuY2UsIHByZXNldC5vbkRyYWdTdGFydCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcblxuICB2YXIgdXBkYXRlID0gZnVuY3Rpb24gdXBkYXRlKGNyaXRpY2FsLCBpbXBhY3QpIHtcbiAgICB2YXIgbG9jYXRpb24gPSBpbXBhY3QuZGVzdGluYXRpb247XG4gICAgdmFyIGNvbWJpbmUgPSBpbXBhY3QubWVyZ2UgPyBpbXBhY3QubWVyZ2UuY29tYmluZSA6IG51bGw7XG4gICAgIWRyYWdnaW5nID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnQ2Fubm90IGZpcmUgb25EcmFnTW92ZSB3aGVuIG9uRHJhZ1N0YXJ0IGhhcyBub3QgYmVlbiBjYWxsZWQnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgdmFyIGhhc0NyaXRpY2FsQ2hhbmdlZCA9ICFpc0NyaXRpY2FsRXF1YWwoY3JpdGljYWwsIGRyYWdnaW5nLmxhc3RDcml0aWNhbCk7XG5cbiAgICBpZiAoaGFzQ3JpdGljYWxDaGFuZ2VkKSB7XG4gICAgICBkcmFnZ2luZy5sYXN0Q3JpdGljYWwgPSBjcml0aWNhbDtcbiAgICB9XG5cbiAgICB2YXIgaGFzTG9jYXRpb25DaGFuZ2VkID0gIWFyZUxvY2F0aW9uc0VxdWFsKGRyYWdnaW5nLmxhc3RMb2NhdGlvbiwgbG9jYXRpb24pO1xuXG4gICAgaWYgKGhhc0xvY2F0aW9uQ2hhbmdlZCkge1xuICAgICAgZHJhZ2dpbmcubGFzdExvY2F0aW9uID0gbG9jYXRpb247XG4gICAgfVxuXG4gICAgdmFyIGhhc0dyb3VwaW5nQ2hhbmdlZCA9ICFpc0NvbWJpbmVFcXVhbChkcmFnZ2luZy5sYXN0Q29tYmluZSwgY29tYmluZSk7XG5cbiAgICBpZiAoaGFzR3JvdXBpbmdDaGFuZ2VkKSB7XG4gICAgICBkcmFnZ2luZy5sYXN0Q29tYmluZSA9IGNvbWJpbmU7XG4gICAgfVxuXG4gICAgaWYgKCFoYXNDcml0aWNhbENoYW5nZWQgJiYgIWhhc0xvY2F0aW9uQ2hhbmdlZCAmJiAhaGFzR3JvdXBpbmdDaGFuZ2VkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGRhdGEgPSBfZXh0ZW5kcyh7fSwgZ2V0RHJhZ1N0YXJ0KGNyaXRpY2FsLCBkcmFnZ2luZy5tb2RlKSwge1xuICAgICAgY29tYmluZTogY29tYmluZSxcbiAgICAgIGRlc3RpbmF0aW9uOiBsb2NhdGlvblxuICAgIH0pO1xuXG4gICAgYXN5bmNNYXJzaGFsLmFkZChmdW5jdGlvbiAoKSB7XG4gICAgICB3aXRoVGltaW5ncygnb25EcmFnVXBkYXRlJywgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gZXhlY3V0ZShnZXRSZXNwb25kZXJzKCkub25EcmFnVXBkYXRlLCBkYXRhLCBhbm5vdW5jZSwgcHJlc2V0Lm9uRHJhZ1VwZGF0ZSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcblxuICB2YXIgZmx1c2ggPSBmdW5jdGlvbiBmbHVzaCgpIHtcbiAgICAhZHJhZ2dpbmcgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdDYW4gb25seSBmbHVzaCByZXNwb25kZXJzIHdoaWxlIGRyYWdnaW5nJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIGFzeW5jTWFyc2hhbC5mbHVzaCgpO1xuICB9O1xuXG4gIHZhciBkcm9wID0gZnVuY3Rpb24gZHJvcChyZXN1bHQpIHtcbiAgICAhZHJhZ2dpbmcgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdDYW5ub3QgZmlyZSBvbkRyYWdFbmQgd2hlbiB0aGVyZSBpcyBubyBtYXRjaGluZyBvbkRyYWdTdGFydCcpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICBkcmFnZ2luZyA9IG51bGw7XG4gICAgd2l0aFRpbWluZ3MoJ29uRHJhZ0VuZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBleGVjdXRlKGdldFJlc3BvbmRlcnMoKS5vbkRyYWdFbmQsIHJlc3VsdCwgYW5ub3VuY2UsIHByZXNldC5vbkRyYWdFbmQpO1xuICAgIH0pO1xuICB9O1xuXG4gIHZhciBhYm9ydCA9IGZ1bmN0aW9uIGFib3J0KCkge1xuICAgIGlmICghZHJhZ2dpbmcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgcmVzdWx0ID0gX2V4dGVuZHMoe30sIGdldERyYWdTdGFydChkcmFnZ2luZy5sYXN0Q3JpdGljYWwsIGRyYWdnaW5nLm1vZGUpLCB7XG4gICAgICBjb21iaW5lOiBudWxsLFxuICAgICAgZGVzdGluYXRpb246IG51bGwsXG4gICAgICByZWFzb246ICdDQU5DRUwnXG4gICAgfSk7XG5cbiAgICBkcm9wKHJlc3VsdCk7XG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICBiZWZvcmVTdGFydDogYmVmb3JlU3RhcnQsXG4gICAgc3RhcnQ6IHN0YXJ0LFxuICAgIHVwZGF0ZTogdXBkYXRlLFxuICAgIGZsdXNoOiBmbHVzaCxcbiAgICBkcm9wOiBkcm9wLFxuICAgIGFib3J0OiBhYm9ydFxuICB9O1xufSk7XG5cbnZhciByZXNwb25kZXJzID0gKGZ1bmN0aW9uIChnZXRSZXNwb25kZXJzLCBhbm5vdW5jZSkge1xuICB2YXIgcHVibGlzaGVyID0gZ2V0UHVibGlzaGVyKGdldFJlc3BvbmRlcnMsIGFubm91bmNlKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIChzdG9yZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAobmV4dCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgICAgICAgaWYgKGFjdGlvbi50eXBlID09PSAnSU5JVElBTF9QVUJMSVNIJykge1xuICAgICAgICAgIHZhciBjcml0aWNhbCA9IGFjdGlvbi5wYXlsb2FkLmNyaXRpY2FsO1xuICAgICAgICAgIHB1Ymxpc2hlci5iZWZvcmVTdGFydChjcml0aWNhbCwgYWN0aW9uLnBheWxvYWQubW92ZW1lbnRNb2RlKTtcbiAgICAgICAgICBuZXh0KGFjdGlvbik7XG4gICAgICAgICAgcHVibGlzaGVyLnN0YXJ0KGNyaXRpY2FsLCBhY3Rpb24ucGF5bG9hZC5tb3ZlbWVudE1vZGUpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChhY3Rpb24udHlwZSA9PT0gJ0RST1BfQ09NUExFVEUnKSB7XG4gICAgICAgICAgdmFyIHJlc3VsdCA9IGFjdGlvbi5wYXlsb2FkLmNvbXBsZXRlZC5yZXN1bHQ7XG4gICAgICAgICAgcHVibGlzaGVyLmZsdXNoKCk7XG4gICAgICAgICAgbmV4dChhY3Rpb24pO1xuICAgICAgICAgIHB1Ymxpc2hlci5kcm9wKHJlc3VsdCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgbmV4dChhY3Rpb24pO1xuXG4gICAgICAgIGlmIChhY3Rpb24udHlwZSA9PT0gJ0NMRUFOJykge1xuICAgICAgICAgIHB1Ymxpc2hlci5hYm9ydCgpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBzdGF0ZSA9IHN0b3JlLmdldFN0YXRlKCk7XG5cbiAgICAgICAgaWYgKHN0YXRlLnBoYXNlID09PSAnRFJBR0dJTkcnKSB7XG4gICAgICAgICAgcHVibGlzaGVyLnVwZGF0ZShzdGF0ZS5jcml0aWNhbCwgc3RhdGUuaW1wYWN0KTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9O1xuICB9O1xufSk7XG5cbnZhciBkcm9wQW5pbWF0aW9uRmluaXNoID0gKGZ1bmN0aW9uIChzdG9yZSkge1xuICByZXR1cm4gZnVuY3Rpb24gKG5leHQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGFjdGlvbikge1xuICAgICAgaWYgKGFjdGlvbi50eXBlICE9PSAnRFJPUF9BTklNQVRJT05fRklOSVNIRUQnKSB7XG4gICAgICAgIG5leHQoYWN0aW9uKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgc3RhdGUgPSBzdG9yZS5nZXRTdGF0ZSgpO1xuICAgICAgIShzdGF0ZS5waGFzZSA9PT0gJ0RST1BfQU5JTUFUSU5HJykgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdDYW5ub3QgZmluaXNoIGEgZHJvcCBhbmltYXRpbmcgd2hlbiBubyBkcm9wIGlzIG9jY3VycmluZycpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgIHN0b3JlLmRpc3BhdGNoKGNvbXBsZXRlRHJvcCh7XG4gICAgICAgIGNvbXBsZXRlZDogc3RhdGUuY29tcGxldGVkLFxuICAgICAgICBzaG91bGRGbHVzaDogZmFsc2VcbiAgICAgIH0pKTtcbiAgICB9O1xuICB9O1xufSk7XG5cbnZhciBkaW1lbnNpb25NYXJzaGFsU3RvcHBlciA9IChmdW5jdGlvbiAobWFyc2hhbCkge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAobmV4dCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgICAgICAgaWYgKGFjdGlvbi50eXBlID09PSAnRFJPUF9DT01QTEVURScgfHwgYWN0aW9uLnR5cGUgPT09ICdDTEVBTicgfHwgYWN0aW9uLnR5cGUgPT09ICdEUk9QX0FOSU1BVEUnKSB7XG4gICAgICAgICAgbWFyc2hhbC5zdG9wUHVibGlzaGluZygpO1xuICAgICAgICB9XG5cbiAgICAgICAgbmV4dChhY3Rpb24pO1xuICAgICAgfTtcbiAgICB9O1xuICB9O1xufSk7XG5cbnZhciBzaG91bGRFbmQgPSBmdW5jdGlvbiBzaG91bGRFbmQoYWN0aW9uKSB7XG4gIHJldHVybiBhY3Rpb24udHlwZSA9PT0gJ0RST1BfQ09NUExFVEUnIHx8IGFjdGlvbi50eXBlID09PSAnRFJPUF9BTklNQVRFJyB8fCBhY3Rpb24udHlwZSA9PT0gJ0NMRUFOJztcbn07XG5cbnZhciBzaG91bGRDYW5jZWxQZW5kaW5nID0gZnVuY3Rpb24gc2hvdWxkQ2FuY2VsUGVuZGluZyhhY3Rpb24pIHtcbiAgcmV0dXJuIGFjdGlvbi50eXBlID09PSAnQ09MTEVDVElPTl9TVEFSVElORyc7XG59O1xuXG52YXIgYXV0b1Njcm9sbCA9IChmdW5jdGlvbiAoYXV0b1Njcm9sbGVyKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoc3RvcmUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKG5leHQpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7XG4gICAgICAgIGlmIChzaG91bGRFbmQoYWN0aW9uKSkge1xuICAgICAgICAgIGF1dG9TY3JvbGxlci5zdG9wKCk7XG4gICAgICAgICAgbmV4dChhY3Rpb24pO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzaG91bGRDYW5jZWxQZW5kaW5nKGFjdGlvbikpIHtcbiAgICAgICAgICBhdXRvU2Nyb2xsZXIuY2FuY2VsUGVuZGluZygpO1xuICAgICAgICAgIG5leHQoYWN0aW9uKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYWN0aW9uLnR5cGUgPT09ICdJTklUSUFMX1BVQkxJU0gnKSB7XG4gICAgICAgICAgbmV4dChhY3Rpb24pO1xuICAgICAgICAgIHZhciBzdGF0ZSA9IHN0b3JlLmdldFN0YXRlKCk7XG4gICAgICAgICAgIShzdGF0ZS5waGFzZSA9PT0gJ0RSQUdHSU5HJykgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdFeHBlY3RlZCBwaGFzZSB0byBiZSBEUkFHR0lORyBhZnRlciBJTklUSUFMX1BVQkxJU0gnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICAgICAgYXV0b1Njcm9sbGVyLnN0YXJ0KHN0YXRlKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBuZXh0KGFjdGlvbik7XG4gICAgICAgIGF1dG9TY3JvbGxlci5zY3JvbGwoc3RvcmUuZ2V0U3RhdGUoKSk7XG4gICAgICB9O1xuICAgIH07XG4gIH07XG59KTtcblxudmFyIHBlbmRpbmdEcm9wID0gKGZ1bmN0aW9uIChzdG9yZSkge1xuICByZXR1cm4gZnVuY3Rpb24gKG5leHQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGFjdGlvbikge1xuICAgICAgbmV4dChhY3Rpb24pO1xuXG4gICAgICBpZiAoYWN0aW9uLnR5cGUgIT09ICdQVUJMSVNIX1dISUxFX0RSQUdHSU5HJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBwb3N0QWN0aW9uU3RhdGUgPSBzdG9yZS5nZXRTdGF0ZSgpO1xuXG4gICAgICBpZiAocG9zdEFjdGlvblN0YXRlLnBoYXNlICE9PSAnRFJPUF9QRU5ESU5HJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChwb3N0QWN0aW9uU3RhdGUuaXNXYWl0aW5nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgc3RvcmUuZGlzcGF0Y2goZHJvcCh7XG4gICAgICAgIHJlYXNvbjogcG9zdEFjdGlvblN0YXRlLnJlYXNvblxuICAgICAgfSkpO1xuICAgIH07XG4gIH07XG59KTtcblxudmFyIGNvbXBvc2VFbmhhbmNlcnMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5fX1JFRFVYX0RFVlRPT0xTX0VYVEVOU0lPTl9DT01QT1NFX18gPyB3aW5kb3cuX19SRURVWF9ERVZUT09MU19FWFRFTlNJT05fQ09NUE9TRV9fIDogY29tcG9zZTtcbnZhciBjcmVhdGVTdG9yZSA9IChmdW5jdGlvbiAoX3JlZikge1xuICB2YXIgZGltZW5zaW9uTWFyc2hhbCA9IF9yZWYuZGltZW5zaW9uTWFyc2hhbCxcbiAgICAgIHN0eWxlTWFyc2hhbCA9IF9yZWYuc3R5bGVNYXJzaGFsLFxuICAgICAgZ2V0UmVzcG9uZGVycyA9IF9yZWYuZ2V0UmVzcG9uZGVycyxcbiAgICAgIGFubm91bmNlID0gX3JlZi5hbm5vdW5jZSxcbiAgICAgIGF1dG9TY3JvbGxlciA9IF9yZWYuYXV0b1Njcm9sbGVyO1xuICByZXR1cm4gY3JlYXRlU3RvcmUkMShyZWR1Y2VyLCBjb21wb3NlRW5oYW5jZXJzKGFwcGx5TWlkZGxld2FyZShzdHlsZShzdHlsZU1hcnNoYWwpLCBkaW1lbnNpb25NYXJzaGFsU3RvcHBlcihkaW1lbnNpb25NYXJzaGFsKSwgbGlmdCQxKGRpbWVuc2lvbk1hcnNoYWwpLCBkcm9wJDEsIGRyb3BBbmltYXRpb25GaW5pc2gsIHBlbmRpbmdEcm9wLCBhdXRvU2Nyb2xsKGF1dG9TY3JvbGxlciksIHJlc3BvbmRlcnMoZ2V0UmVzcG9uZGVycywgYW5ub3VuY2UpKSkpO1xufSk7XG5cbnZhciBjbGVhbiQyID0gZnVuY3Rpb24gY2xlYW4oKSB7XG4gIHJldHVybiB7XG4gICAgYWRkaXRpb25zOiB7fSxcbiAgICByZW1vdmFsczoge30sXG4gICAgbW9kaWZpZWQ6IHt9XG4gIH07XG59O1xuXG52YXIgdGltaW5nS2V5ID0gJ1B1Ymxpc2ggY29sbGVjdGlvbiBmcm9tIERPTSc7XG52YXIgY3JlYXRlUHVibGlzaGVyID0gKGZ1bmN0aW9uIChfcmVmKSB7XG4gIHZhciBnZXRFbnRyaWVzID0gX3JlZi5nZXRFbnRyaWVzLFxuICAgICAgY2FsbGJhY2tzID0gX3JlZi5jYWxsYmFja3M7XG5cbiAgdmFyIGFkdmFuY2VkVXNhZ2VXYXJuaW5nID0gZnVuY3Rpb24gKCkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKCkge307XG4gICAgfVxuXG4gICAgdmFyIGhhc0Fubm91bmNlZCA9IGZhbHNlO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoaGFzQW5ub3VuY2VkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaGFzQW5ub3VuY2VkID0gdHJ1ZTtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoXCJcXG4gICAgICAgIEFkdmFuY2VkIHVzYWdlIHdhcm5pbmc6IHlvdSBhcmUgYWRkaW5nIG9yIHJlbW92aW5nIGEgZGltZW5zaW9uIGR1cmluZyBhIGRyYWdcXG4gICAgICAgIFRoaXMgYW4gYWR2YW5jZWQgZmVhdHVyZS5cXG5cXG4gICAgICAgIE1vcmUgaW5mb3JtYXRpb246IGh0dHBzOi8vZ2l0aHViLmNvbS9hdGxhc3NpYW4vcmVhY3QtYmVhdXRpZnVsLWRuZC9ibG9iL21hc3Rlci9kb2NzL2d1aWRlcy9jaGFuZ2VzLXdoaWxlLWRyYWdnaW5nLm1kXFxuICAgICAgXCIpIDogdm9pZCAwO1xuICAgIH07XG4gIH0oKTtcblxuICB2YXIgc3RhZ2luZyA9IGNsZWFuJDIoKTtcbiAgdmFyIGZyYW1lSWQgPSBudWxsO1xuXG4gIHZhciBjb2xsZWN0ID0gZnVuY3Rpb24gY29sbGVjdCgpIHtcbiAgICBhZHZhbmNlZFVzYWdlV2FybmluZygpO1xuXG4gICAgaWYgKGZyYW1lSWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBmcmFtZUlkID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uICgpIHtcbiAgICAgIGZyYW1lSWQgPSBudWxsO1xuICAgICAgY2FsbGJhY2tzLmNvbGxlY3Rpb25TdGFydGluZygpO1xuICAgICAgdmFyIGNyaXRpY2FsID0gY2FsbGJhY2tzLmdldENyaXRpY2FsKCk7XG4gICAgICBzdGFydCh0aW1pbmdLZXkpO1xuICAgICAgdmFyIGVudHJpZXMgPSBnZXRFbnRyaWVzKCk7XG4gICAgICB2YXIgX3N0YWdpbmcgPSBzdGFnaW5nLFxuICAgICAgICAgIGFkZGl0aW9ucyA9IF9zdGFnaW5nLmFkZGl0aW9ucyxcbiAgICAgICAgICByZW1vdmFscyA9IF9zdGFnaW5nLnJlbW92YWxzLFxuICAgICAgICAgIG1vZGlmaWVkID0gX3N0YWdpbmcubW9kaWZpZWQ7XG5cbiAgICAgIHZhciBhZGRlZCA9IF9PYmplY3Qka2V5cyhhZGRpdGlvbnMpLm1hcChmdW5jdGlvbiAoaWQpIHtcbiAgICAgICAgcmV0dXJuIGVudHJpZXMuZHJhZ2dhYmxlc1tpZF0uZ2V0RGltZW5zaW9uKG9yaWdpbik7XG4gICAgICB9KS5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgIHJldHVybiBhLmRlc2NyaXB0b3IuaW5kZXggLSBiLmRlc2NyaXB0b3IuaW5kZXg7XG4gICAgICB9KTtcblxuICAgICAgdmFyIHVwZGF0ZWQgPSBfT2JqZWN0JGtleXMobW9kaWZpZWQpLm1hcChmdW5jdGlvbiAoaWQpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gZW50cmllcy5kcm9wcGFibGVzW2lkXTtcbiAgICAgICAgIWVudHJ5ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnQ2Fubm90IGZpbmQgZHluYW1pY2FsbHkgYWRkZWQgZHJvcHBhYmxlIGluIGNhY2hlJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgICB2YXIgaXNIb21lID0gZW50cnkuZGVzY3JpcHRvci5pZCA9PT0gY3JpdGljYWwuZHJvcHBhYmxlLmlkO1xuICAgICAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgICAgICB3aXRob3V0UGxhY2Vob2xkZXI6ICFpc0hvbWVcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIGVudHJ5LmNhbGxiYWNrcy5yZWNvbGxlY3Qob3B0aW9ucyk7XG4gICAgICB9KTtcblxuICAgICAgdmFyIHJlc3VsdCA9IHtcbiAgICAgICAgYWRkaXRpb25zOiBhZGRlZCxcbiAgICAgICAgcmVtb3ZhbHM6IF9PYmplY3Qka2V5cyhyZW1vdmFscyksXG4gICAgICAgIG1vZGlmaWVkOiB1cGRhdGVkXG4gICAgICB9O1xuICAgICAgc3RhZ2luZyA9IGNsZWFuJDIoKTtcbiAgICAgIGZpbmlzaCh0aW1pbmdLZXkpO1xuICAgICAgY2FsbGJhY2tzLnB1Ymxpc2gocmVzdWx0KTtcbiAgICB9KTtcbiAgfTtcblxuICB2YXIgYWRkID0gZnVuY3Rpb24gYWRkKGRlc2NyaXB0b3IpIHtcbiAgICBzdGFnaW5nLmFkZGl0aW9uc1tkZXNjcmlwdG9yLmlkXSA9IGRlc2NyaXB0b3I7XG4gICAgc3RhZ2luZy5tb2RpZmllZFtkZXNjcmlwdG9yLmRyb3BwYWJsZUlkXSA9IHRydWU7XG5cbiAgICBpZiAoc3RhZ2luZy5yZW1vdmFsc1tkZXNjcmlwdG9yLmlkXSkge1xuICAgICAgZGVsZXRlIHN0YWdpbmcucmVtb3ZhbHNbZGVzY3JpcHRvci5pZF07XG4gICAgfVxuXG4gICAgY29sbGVjdCgpO1xuICB9O1xuXG4gIHZhciByZW1vdmUgPSBmdW5jdGlvbiByZW1vdmUoZGVzY3JpcHRvcikge1xuICAgIHN0YWdpbmcucmVtb3ZhbHNbZGVzY3JpcHRvci5pZF0gPSBkZXNjcmlwdG9yO1xuICAgIHN0YWdpbmcubW9kaWZpZWRbZGVzY3JpcHRvci5kcm9wcGFibGVJZF0gPSB0cnVlO1xuXG4gICAgaWYgKHN0YWdpbmcuYWRkaXRpb25zW2Rlc2NyaXB0b3IuaWRdKSB7XG4gICAgICBkZWxldGUgc3RhZ2luZy5hZGRpdGlvbnNbZGVzY3JpcHRvci5pZF07XG4gICAgfVxuXG4gICAgY29sbGVjdCgpO1xuICB9O1xuXG4gIHZhciBzdG9wID0gZnVuY3Rpb24gc3RvcCgpIHtcbiAgICBpZiAoIWZyYW1lSWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjYW5jZWxBbmltYXRpb25GcmFtZShmcmFtZUlkKTtcbiAgICBmcmFtZUlkID0gbnVsbDtcbiAgICBzdGFnaW5nID0gY2xlYW4kMigpO1xuICB9O1xuXG4gIHJldHVybiB7XG4gICAgYWRkOiBhZGQsXG4gICAgcmVtb3ZlOiByZW1vdmUsXG4gICAgc3RvcDogc3RvcFxuICB9O1xufSk7XG5cbnZhciBnZXRXaW5kb3dTY3JvbGwgPSAoZnVuY3Rpb24gKCkge1xuICByZXR1cm4ge1xuICAgIHg6IHdpbmRvdy5wYWdlWE9mZnNldCxcbiAgICB5OiB3aW5kb3cucGFnZVlPZmZzZXRcbiAgfTtcbn0pO1xuXG52YXIgZ2V0RG9jdW1lbnRFbGVtZW50ID0gKGZ1bmN0aW9uICgpIHtcbiAgdmFyIGRvYyA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgIWRvYyA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0Nhbm5vdCBmaW5kIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCcpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgcmV0dXJuIGRvYztcbn0pO1xuXG52YXIgZ2V0TWF4V2luZG93U2Nyb2xsID0gKGZ1bmN0aW9uICgpIHtcbiAgdmFyIGRvYyA9IGdldERvY3VtZW50RWxlbWVudCgpO1xuICB2YXIgbWF4U2Nyb2xsID0gZ2V0TWF4U2Nyb2xsKHtcbiAgICBzY3JvbGxIZWlnaHQ6IGRvYy5zY3JvbGxIZWlnaHQsXG4gICAgc2Nyb2xsV2lkdGg6IGRvYy5zY3JvbGxXaWR0aCxcbiAgICB3aWR0aDogZG9jLmNsaWVudFdpZHRoLFxuICAgIGhlaWdodDogZG9jLmNsaWVudEhlaWdodFxuICB9KTtcbiAgcmV0dXJuIG1heFNjcm9sbDtcbn0pO1xuXG52YXIgZ2V0Vmlld3BvcnQgPSAoZnVuY3Rpb24gKCkge1xuICB2YXIgc2Nyb2xsID0gZ2V0V2luZG93U2Nyb2xsKCk7XG4gIHZhciBtYXhTY3JvbGwgPSBnZXRNYXhXaW5kb3dTY3JvbGwoKTtcbiAgdmFyIHRvcCA9IHNjcm9sbC55O1xuICB2YXIgbGVmdCA9IHNjcm9sbC54O1xuICB2YXIgZG9jID0gZ2V0RG9jdW1lbnRFbGVtZW50KCk7XG4gIHZhciB3aWR0aCA9IGRvYy5jbGllbnRXaWR0aDtcbiAgdmFyIGhlaWdodCA9IGRvYy5jbGllbnRIZWlnaHQ7XG4gIHZhciByaWdodCA9IGxlZnQgKyB3aWR0aDtcbiAgdmFyIGJvdHRvbSA9IHRvcCArIGhlaWdodDtcbiAgdmFyIGZyYW1lID0gZ2V0UmVjdCh7XG4gICAgdG9wOiB0b3AsXG4gICAgbGVmdDogbGVmdCxcbiAgICByaWdodDogcmlnaHQsXG4gICAgYm90dG9tOiBib3R0b21cbiAgfSk7XG4gIHZhciB2aWV3cG9ydCA9IHtcbiAgICBmcmFtZTogZnJhbWUsXG4gICAgc2Nyb2xsOiB7XG4gICAgICBpbml0aWFsOiBzY3JvbGwsXG4gICAgICBjdXJyZW50OiBzY3JvbGwsXG4gICAgICBtYXg6IG1heFNjcm9sbCxcbiAgICAgIGRpZmY6IHtcbiAgICAgICAgdmFsdWU6IG9yaWdpbixcbiAgICAgICAgZGlzcGxhY2VtZW50OiBvcmlnaW5cbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIHJldHVybiB2aWV3cG9ydDtcbn0pO1xuXG52YXIgZ2V0SW5pdGlhbFB1Ymxpc2ggPSAoZnVuY3Rpb24gKF9yZWYpIHtcbiAgdmFyIGNyaXRpY2FsID0gX3JlZi5jcml0aWNhbCxcbiAgICAgIHNjcm9sbE9wdGlvbnMgPSBfcmVmLnNjcm9sbE9wdGlvbnMsXG4gICAgICBlbnRyaWVzID0gX3JlZi5lbnRyaWVzO1xuICB2YXIgdGltaW5nS2V5ID0gJ0luaXRpYWwgY29sbGVjdGlvbiBmcm9tIERPTSc7XG4gIHN0YXJ0KHRpbWluZ0tleSk7XG4gIHZhciB2aWV3cG9ydCA9IGdldFZpZXdwb3J0KCk7XG4gIHZhciB3aW5kb3dTY3JvbGwgPSB2aWV3cG9ydC5zY3JvbGwuY3VycmVudDtcbiAgdmFyIGhvbWUgPSBjcml0aWNhbC5kcm9wcGFibGU7XG4gIHZhciBkcm9wcGFibGVzID0gdmFsdWVzKGVudHJpZXMuZHJvcHBhYmxlcykuZmlsdGVyKGZ1bmN0aW9uIChlbnRyeSkge1xuICAgIHJldHVybiBlbnRyeS5kZXNjcmlwdG9yLnR5cGUgPT09IGhvbWUudHlwZTtcbiAgfSkubWFwKGZ1bmN0aW9uIChlbnRyeSkge1xuICAgIHJldHVybiBlbnRyeS5jYWxsYmFja3MuZ2V0RGltZW5zaW9uQW5kV2F0Y2hTY3JvbGwod2luZG93U2Nyb2xsLCBzY3JvbGxPcHRpb25zKTtcbiAgfSk7XG4gIHZhciBkcmFnZ2FibGVzID0gdmFsdWVzKGVudHJpZXMuZHJhZ2dhYmxlcykuZmlsdGVyKGZ1bmN0aW9uIChlbnRyeSkge1xuICAgIHJldHVybiBlbnRyeS5kZXNjcmlwdG9yLnR5cGUgPT09IGNyaXRpY2FsLmRyYWdnYWJsZS50eXBlO1xuICB9KS5tYXAoZnVuY3Rpb24gKGVudHJ5KSB7XG4gICAgcmV0dXJuIGVudHJ5LmdldERpbWVuc2lvbih3aW5kb3dTY3JvbGwpO1xuICB9KTtcbiAgdmFyIGRpbWVuc2lvbnMgPSB7XG4gICAgZHJhZ2dhYmxlczogdG9EcmFnZ2FibGVNYXAoZHJhZ2dhYmxlcyksXG4gICAgZHJvcHBhYmxlczogdG9Ecm9wcGFibGVNYXAoZHJvcHBhYmxlcylcbiAgfTtcbiAgZmluaXNoKHRpbWluZ0tleSk7XG4gIHZhciByZXN1bHQgPSB7XG4gICAgZGltZW5zaW9uczogZGltZW5zaW9ucyxcbiAgICBjcml0aWNhbDogY3JpdGljYWwsXG4gICAgdmlld3BvcnQ6IHZpZXdwb3J0XG4gIH07XG4gIHJldHVybiByZXN1bHQ7XG59KTtcblxudmFyIHRocm93SWZBZGRPclJlbW92ZU9mV3JvbmdUeXBlID0gZnVuY3Rpb24gdGhyb3dJZkFkZE9yUmVtb3ZlT2ZXcm9uZ1R5cGUoY29sbGVjdGlvbiwgZGVzY3JpcHRvcikge1xuICAhKGNvbGxlY3Rpb24uY3JpdGljYWwuZHJhZ2dhYmxlLnR5cGUgPT09IGRlc2NyaXB0b3IudHlwZSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiV2UgaGF2ZSBkZXRlY3RlZCB0aGF0IHlvdSBoYXZlIGFkZGVkIGEgRHJhZ2dhYmxlIGR1cmluZyBhIGRyYWcuXFxuICAgICAgVGhpcyBpcyBub3Qgb2YgdGhlIHNhbWUgdHlwZSBhcyB0aGUgZHJhZ2dpbmcgaXRlbVxcblxcbiAgICAgIERyYWdnaW5nIHR5cGU6IFwiICsgY29sbGVjdGlvbi5jcml0aWNhbC5kcmFnZ2FibGUudHlwZSArIFwiLlxcbiAgICAgIEFkZGVkIHR5cGU6IFwiICsgZGVzY3JpcHRvci50eXBlICsgXCJcXG5cXG4gICAgICBXZSBhcmUgbm90IGFsbG93aW5nIHRoaXMgYXMgeW91IGNhbiBydW4gaW50byBwcm9ibGVtcyBpZiB5b3VyIGNoYW5nZVxcbiAgICAgIGhhcyBzaGlmdGVkIHRoZSBwb3NpdGlvbmluZyBvZiBvdGhlciBEcm9wcGFibGVzLCBvciBoYXMgY2hhbmdlZCB0aGUgc2l6ZSBvZiB0aGUgcGFnZVwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG59O1xuXG52YXIgY3JlYXRlRGltZW5zaW9uTWFyc2hhbCA9IChmdW5jdGlvbiAoY2FsbGJhY2tzKSB7XG4gIHZhciBlbnRyaWVzID0ge1xuICAgIGRyb3BwYWJsZXM6IHt9LFxuICAgIGRyYWdnYWJsZXM6IHt9XG4gIH07XG4gIHZhciBjb2xsZWN0aW9uID0gbnVsbDtcbiAgdmFyIHB1Ymxpc2hlciA9IGNyZWF0ZVB1Ymxpc2hlcih7XG4gICAgY2FsbGJhY2tzOiB7XG4gICAgICBwdWJsaXNoOiBjYWxsYmFja3MucHVibGlzaFdoaWxlRHJhZ2dpbmcsXG4gICAgICBjb2xsZWN0aW9uU3RhcnRpbmc6IGNhbGxiYWNrcy5jb2xsZWN0aW9uU3RhcnRpbmcsXG4gICAgICBnZXRDcml0aWNhbDogZnVuY3Rpb24gZ2V0Q3JpdGljYWwoKSB7XG4gICAgICAgICFjb2xsZWN0aW9uID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnQ2Fubm90IGdldCBjcml0aWNhbCB3aGVuIHRoZXJlIGlzIG5vIGNvbGxlY3Rpb24nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICAgIHJldHVybiBjb2xsZWN0aW9uLmNyaXRpY2FsO1xuICAgICAgfVxuICAgIH0sXG4gICAgZ2V0RW50cmllczogZnVuY3Rpb24gZ2V0RW50cmllcygpIHtcbiAgICAgIHJldHVybiBlbnRyaWVzO1xuICAgIH1cbiAgfSk7XG5cbiAgdmFyIHJlZ2lzdGVyRHJhZ2dhYmxlID0gZnVuY3Rpb24gcmVnaXN0ZXJEcmFnZ2FibGUoZGVzY3JpcHRvciwgZ2V0RGltZW5zaW9uKSB7XG4gICAgdmFyIGVudHJ5ID0ge1xuICAgICAgZGVzY3JpcHRvcjogZGVzY3JpcHRvcixcbiAgICAgIGdldERpbWVuc2lvbjogZ2V0RGltZW5zaW9uXG4gICAgfTtcbiAgICBlbnRyaWVzLmRyYWdnYWJsZXNbZGVzY3JpcHRvci5pZF0gPSBlbnRyeTtcblxuICAgIGlmICghY29sbGVjdGlvbikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRocm93SWZBZGRPclJlbW92ZU9mV3JvbmdUeXBlKGNvbGxlY3Rpb24sIGRlc2NyaXB0b3IpO1xuICAgIHB1Ymxpc2hlci5hZGQoZGVzY3JpcHRvcik7XG4gIH07XG5cbiAgdmFyIHVwZGF0ZURyYWdnYWJsZSA9IGZ1bmN0aW9uIHVwZGF0ZURyYWdnYWJsZShwdWJsaXNoZWQsIGRlc2NyaXB0b3IsIGdldERpbWVuc2lvbikge1xuICAgIHZhciBleGlzdGluZyA9IGVudHJpZXMuZHJhZ2dhYmxlc1twdWJsaXNoZWQuaWRdO1xuICAgICFleGlzdGluZyA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0Nhbm5vdCB1cGRhdGUgZHJhZ2dhYmxlIHJlZ2lzdHJhdGlvbiBhcyBubyBwdWJsaXNoZWQgcmVnaXN0cmF0aW9uIHdhcyBmb3VuZCcpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcblxuICAgIGlmIChleGlzdGluZy5kZXNjcmlwdG9yID09PSBwdWJsaXNoZWQpIHtcbiAgICAgIGRlbGV0ZSBlbnRyaWVzLmRyYWdnYWJsZXNbcHVibGlzaGVkLmlkXTtcbiAgICB9IGVsc2Uge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhcIlxcbiAgICAgICAgRGV0ZWN0ZWQgaW5jb3JyZWN0IHVzYWdlIG9mICdrZXknIG9uICc8RHJhZ2dhYmxlIGRyYWdnYWJsZUlkPVxcXCJcIiArIHB1Ymxpc2hlZC5pZCArIFwiXFxcIiQgLz5cXG5cXG4gICAgICAgIFlvdXIgJ2tleScgc2hvdWxkIGJlOlxcbiAgICAgICAgLSBVbmlxdWUgZm9yIGVhY2ggRHJhZ2dhYmxlIGluIGEgbGlzdFxcbiAgICAgICAgLSBOb3QgYmUgYmFzZWQgb24gdGhlIGluZGV4IG9mIHRoZSBEcmFnZ2FibGVcXG5cXG4gICAgICAgIFVzdWFsbHkgeW91IHdhbnQgeW91ciAna2V5JyB0byBqdXN0IGJlIHRoZSAnZHJhZ2dhYmxlSWQnXFxuXFxuICAgICAgICBNb3JlIGluZm9ybWF0aW9uOiBodHRwczovL2dpdGh1Yi5jb20vYXRsYXNzaWFuL3JlYWN0LWJlYXV0aWZ1bC1kbmQvYmxvYi9tYXN0ZXIvZG9jcy9hcGkvZHJhZ2dhYmxlLm1kI2tleXMtZm9yLWEtbGlzdC1vZi1kcmFnZ2FibGUtXFxuICAgICAgXCIpIDogdm9pZCAwO1xuICAgIH1cblxuICAgIHZhciBlbnRyeSA9IHtcbiAgICAgIGRlc2NyaXB0b3I6IGRlc2NyaXB0b3IsXG4gICAgICBnZXREaW1lbnNpb246IGdldERpbWVuc2lvblxuICAgIH07XG4gICAgZW50cmllcy5kcmFnZ2FibGVzW2Rlc2NyaXB0b3IuaWRdID0gZW50cnk7XG4gIH07XG5cbiAgdmFyIHVucmVnaXN0ZXJEcmFnZ2FibGUgPSBmdW5jdGlvbiB1bnJlZ2lzdGVyRHJhZ2dhYmxlKGRlc2NyaXB0b3IpIHtcbiAgICB2YXIgZW50cnkgPSBlbnRyaWVzLmRyYWdnYWJsZXNbZGVzY3JpcHRvci5pZF07XG4gICAgIWVudHJ5ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIkNhbm5vdCB1bnJlZ2lzdGVyIERyYWdnYWJsZSB3aXRoIGlkOlxcbiAgICAgIFwiICsgZGVzY3JpcHRvci5pZCArIFwiIGFzIGl0IGlzIG5vdCByZWdpc3RlcmVkXCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcblxuICAgIGlmIChlbnRyeS5kZXNjcmlwdG9yICE9PSBkZXNjcmlwdG9yKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZGVsZXRlIGVudHJpZXMuZHJhZ2dhYmxlc1tkZXNjcmlwdG9yLmlkXTtcblxuICAgIGlmICghY29sbGVjdGlvbikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgICEoY29sbGVjdGlvbi5jcml0aWNhbC5kcmFnZ2FibGUuaWQgIT09IGRlc2NyaXB0b3IuaWQpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnQ2Fubm90IHJlbW92ZSB0aGUgZHJhZ2dpbmcgaXRlbSBkdXJpbmcgYSBkcmFnJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHRocm93SWZBZGRPclJlbW92ZU9mV3JvbmdUeXBlKGNvbGxlY3Rpb24sIGRlc2NyaXB0b3IpO1xuICAgIHB1Ymxpc2hlci5yZW1vdmUoZGVzY3JpcHRvcik7XG4gIH07XG5cbiAgdmFyIHJlZ2lzdGVyRHJvcHBhYmxlID0gZnVuY3Rpb24gcmVnaXN0ZXJEcm9wcGFibGUoZGVzY3JpcHRvciwgZHJvcHBhYmxlQ2FsbGJhY2tzKSB7XG4gICAgdmFyIGlkID0gZGVzY3JpcHRvci5pZDtcbiAgICBlbnRyaWVzLmRyb3BwYWJsZXNbaWRdID0ge1xuICAgICAgZGVzY3JpcHRvcjogZGVzY3JpcHRvcixcbiAgICAgIGNhbGxiYWNrczogZHJvcHBhYmxlQ2FsbGJhY2tzXG4gICAgfTtcbiAgICAhIWNvbGxlY3Rpb24gPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdDYW5ub3QgYWRkIGEgRHJvcHBhYmxlIGR1cmluZyBhIGRyYWcnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIH07XG5cbiAgdmFyIHVucmVnaXN0ZXJEcm9wcGFibGUgPSBmdW5jdGlvbiB1bnJlZ2lzdGVyRHJvcHBhYmxlKGRlc2NyaXB0b3IpIHtcbiAgICB2YXIgZW50cnkgPSBlbnRyaWVzLmRyb3BwYWJsZXNbZGVzY3JpcHRvci5pZF07XG4gICAgIWVudHJ5ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIkNhbm5vdCB1bnJlZ2lzdGVyIERyb3BwYWJsZSB3aXRoIGlkIFwiICsgZGVzY3JpcHRvci5pZCArIFwiIGFzIGFzIGl0IGlzIG5vdCByZWdpc3RlcmVkXCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcblxuICAgIGlmIChlbnRyeS5kZXNjcmlwdG9yICE9PSBkZXNjcmlwdG9yKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZGVsZXRlIGVudHJpZXMuZHJvcHBhYmxlc1tkZXNjcmlwdG9yLmlkXTtcbiAgICAhIWNvbGxlY3Rpb24gPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdDYW5ub3QgYWRkIGEgRHJvcHBhYmxlIGR1cmluZyBhIGRyYWcnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIH07XG5cbiAgdmFyIHVwZGF0ZURyb3BwYWJsZUlzRW5hYmxlZCA9IGZ1bmN0aW9uIHVwZGF0ZURyb3BwYWJsZUlzRW5hYmxlZChpZCwgaXNFbmFibGVkKSB7XG4gICAgIWVudHJpZXMuZHJvcHBhYmxlc1tpZF0gPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiQ2Fubm90IHVwZGF0ZSBpcyBlbmFibGVkIGZsYWcgb2YgRHJvcHBhYmxlIFwiICsgaWQgKyBcIiBhcyBpdCBpcyBub3QgcmVnaXN0ZXJlZFwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG5cbiAgICBpZiAoIWNvbGxlY3Rpb24pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjYWxsYmFja3MudXBkYXRlRHJvcHBhYmxlSXNFbmFibGVkKHtcbiAgICAgIGlkOiBpZCxcbiAgICAgIGlzRW5hYmxlZDogaXNFbmFibGVkXG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIHVwZGF0ZURyb3BwYWJsZUlzQ29tYmluZUVuYWJsZWQgPSBmdW5jdGlvbiB1cGRhdGVEcm9wcGFibGVJc0NvbWJpbmVFbmFibGVkKGlkLCBpc0NvbWJpbmVFbmFibGVkKSB7XG4gICAgIWVudHJpZXMuZHJvcHBhYmxlc1tpZF0gPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiQ2Fubm90IHVwZGF0ZSBpc0NvbWJpbmVFbmFibGVkIGZsYWcgb2YgRHJvcHBhYmxlIFwiICsgaWQgKyBcIiBhcyBpdCBpcyBub3QgcmVnaXN0ZXJlZFwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG5cbiAgICBpZiAoIWNvbGxlY3Rpb24pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjYWxsYmFja3MudXBkYXRlRHJvcHBhYmxlSXNDb21iaW5lRW5hYmxlZCh7XG4gICAgICBpZDogaWQsXG4gICAgICBpc0NvbWJpbmVFbmFibGVkOiBpc0NvbWJpbmVFbmFibGVkXG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIHVwZGF0ZURyb3BwYWJsZVNjcm9sbCA9IGZ1bmN0aW9uIHVwZGF0ZURyb3BwYWJsZVNjcm9sbChpZCwgbmV3U2Nyb2xsKSB7XG4gICAgIWVudHJpZXMuZHJvcHBhYmxlc1tpZF0gPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiQ2Fubm90IHVwZGF0ZSB0aGUgc2Nyb2xsIG9uIERyb3BwYWJsZSBcIiArIGlkICsgXCIgYXMgaXQgaXMgbm90IHJlZ2lzdGVyZWRcIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuXG4gICAgaWYgKCFjb2xsZWN0aW9uKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY2FsbGJhY2tzLnVwZGF0ZURyb3BwYWJsZVNjcm9sbCh7XG4gICAgICBpZDogaWQsXG4gICAgICBvZmZzZXQ6IG5ld1Njcm9sbFxuICAgIH0pO1xuICB9O1xuXG4gIHZhciBzY3JvbGxEcm9wcGFibGUgPSBmdW5jdGlvbiBzY3JvbGxEcm9wcGFibGUoaWQsIGNoYW5nZSkge1xuICAgIHZhciBlbnRyeSA9IGVudHJpZXMuZHJvcHBhYmxlc1tpZF07XG4gICAgIWVudHJ5ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIkNhbm5vdCBzY3JvbGwgRHJvcHBhYmxlIFwiICsgaWQgKyBcIiBhcyBpdCBpcyBub3QgcmVnaXN0ZXJlZFwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG5cbiAgICBpZiAoIWNvbGxlY3Rpb24pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBlbnRyeS5jYWxsYmFja3Muc2Nyb2xsKGNoYW5nZSk7XG4gIH07XG5cbiAgdmFyIHN0b3BQdWJsaXNoaW5nID0gZnVuY3Rpb24gc3RvcFB1Ymxpc2hpbmcoKSB7XG4gICAgaWYgKCFjb2xsZWN0aW9uKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgcHVibGlzaGVyLnN0b3AoKTtcbiAgICB2YXIgaG9tZSA9IGNvbGxlY3Rpb24uY3JpdGljYWwuZHJvcHBhYmxlO1xuICAgIHZhbHVlcyhlbnRyaWVzLmRyb3BwYWJsZXMpLmZpbHRlcihmdW5jdGlvbiAoZW50cnkpIHtcbiAgICAgIHJldHVybiBlbnRyeS5kZXNjcmlwdG9yLnR5cGUgPT09IGhvbWUudHlwZTtcbiAgICB9KS5mb3JFYWNoKGZ1bmN0aW9uIChlbnRyeSkge1xuICAgICAgcmV0dXJuIGVudHJ5LmNhbGxiYWNrcy5kcmFnU3RvcHBlZCgpO1xuICAgIH0pO1xuICAgIGNvbGxlY3Rpb24gPSBudWxsO1xuICB9O1xuXG4gIHZhciBzdGFydFB1Ymxpc2hpbmcgPSBmdW5jdGlvbiBzdGFydFB1Ymxpc2hpbmcocmVxdWVzdCkge1xuICAgICEhY29sbGVjdGlvbiA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0Nhbm5vdCBzdGFydCBjYXB0dXJpbmcgY3JpdGljYWwgZGltZW5zaW9ucyBhcyB0aGVyZSBpcyBhbHJlYWR5IGEgY29sbGVjdGlvbicpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICB2YXIgZW50cnkgPSBlbnRyaWVzLmRyYWdnYWJsZXNbcmVxdWVzdC5kcmFnZ2FibGVJZF07XG4gICAgIWVudHJ5ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnQ2Fubm90IGZpbmQgY3JpdGljYWwgZHJhZ2dhYmxlIGVudHJ5JykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHZhciBob21lID0gZW50cmllcy5kcm9wcGFibGVzW2VudHJ5LmRlc2NyaXB0b3IuZHJvcHBhYmxlSWRdO1xuICAgICFob21lID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnQ2Fubm90IGZpbmQgY3JpdGljYWwgZHJvcHBhYmxlIGVudHJ5JykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHZhciBjcml0aWNhbCA9IHtcbiAgICAgIGRyYWdnYWJsZTogZW50cnkuZGVzY3JpcHRvcixcbiAgICAgIGRyb3BwYWJsZTogaG9tZS5kZXNjcmlwdG9yXG4gICAgfTtcbiAgICBjb2xsZWN0aW9uID0ge1xuICAgICAgY3JpdGljYWw6IGNyaXRpY2FsXG4gICAgfTtcbiAgICByZXR1cm4gZ2V0SW5pdGlhbFB1Ymxpc2goe1xuICAgICAgY3JpdGljYWw6IGNyaXRpY2FsLFxuICAgICAgZW50cmllczogZW50cmllcyxcbiAgICAgIHNjcm9sbE9wdGlvbnM6IHJlcXVlc3Quc2Nyb2xsT3B0aW9uc1xuICAgIH0pO1xuICB9O1xuXG4gIHZhciBtYXJzaGFsID0ge1xuICAgIHJlZ2lzdGVyRHJhZ2dhYmxlOiByZWdpc3RlckRyYWdnYWJsZSxcbiAgICB1cGRhdGVEcmFnZ2FibGU6IHVwZGF0ZURyYWdnYWJsZSxcbiAgICB1bnJlZ2lzdGVyRHJhZ2dhYmxlOiB1bnJlZ2lzdGVyRHJhZ2dhYmxlLFxuICAgIHJlZ2lzdGVyRHJvcHBhYmxlOiByZWdpc3RlckRyb3BwYWJsZSxcbiAgICB1bnJlZ2lzdGVyRHJvcHBhYmxlOiB1bnJlZ2lzdGVyRHJvcHBhYmxlLFxuICAgIHVwZGF0ZURyb3BwYWJsZUlzRW5hYmxlZDogdXBkYXRlRHJvcHBhYmxlSXNFbmFibGVkLFxuICAgIHVwZGF0ZURyb3BwYWJsZUlzQ29tYmluZUVuYWJsZWQ6IHVwZGF0ZURyb3BwYWJsZUlzQ29tYmluZUVuYWJsZWQsXG4gICAgc2Nyb2xsRHJvcHBhYmxlOiBzY3JvbGxEcm9wcGFibGUsXG4gICAgdXBkYXRlRHJvcHBhYmxlU2Nyb2xsOiB1cGRhdGVEcm9wcGFibGVTY3JvbGwsXG4gICAgc3RhcnRQdWJsaXNoaW5nOiBzdGFydFB1Ymxpc2hpbmcsXG4gICAgc3RvcFB1Ymxpc2hpbmc6IHN0b3BQdWJsaXNoaW5nXG4gIH07XG4gIHJldHVybiBtYXJzaGFsO1xufSk7XG5cbnZhciBjYW5TdGFydERyYWcgPSAoZnVuY3Rpb24gKHN0YXRlLCBpZCkge1xuICBpZiAoc3RhdGUucGhhc2UgPT09ICdJRExFJykge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKHN0YXRlLnBoYXNlICE9PSAnRFJPUF9BTklNQVRJTkcnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKHN0YXRlLmNvbXBsZXRlZC5yZXN1bHQuZHJhZ2dhYmxlSWQgPT09IGlkKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIHN0YXRlLmNvbXBsZXRlZC5yZXN1bHQucmVhc29uID09PSAnRFJPUCc7XG59KTtcblxudmFyIHNjcm9sbFdpbmRvdyA9IChmdW5jdGlvbiAoY2hhbmdlKSB7XG4gIHdpbmRvdy5zY3JvbGxCeShjaGFuZ2UueCwgY2hhbmdlLnkpO1xufSk7XG5cbnZhciBnZXRTY3JvbGxhYmxlRHJvcHBhYmxlcyA9IG1lbW9pemVPbmUoZnVuY3Rpb24gKGRyb3BwYWJsZXMpIHtcbiAgcmV0dXJuIHRvRHJvcHBhYmxlTGlzdChkcm9wcGFibGVzKS5maWx0ZXIoZnVuY3Rpb24gKGRyb3BwYWJsZSkge1xuICAgIGlmICghZHJvcHBhYmxlLmlzRW5hYmxlZCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlmICghZHJvcHBhYmxlLmZyYW1lKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH0pO1xufSk7XG5cbnZhciBnZXRTY3JvbGxhYmxlRHJvcHBhYmxlT3ZlciA9IGZ1bmN0aW9uIGdldFNjcm9sbGFibGVEcm9wcGFibGVPdmVyKHRhcmdldCwgZHJvcHBhYmxlcykge1xuICB2YXIgbWF5YmUgPSBmaW5kKGdldFNjcm9sbGFibGVEcm9wcGFibGVzKGRyb3BwYWJsZXMpLCBmdW5jdGlvbiAoZHJvcHBhYmxlKSB7XG4gICAgIWRyb3BwYWJsZS5mcmFtZSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0ludmFsaWQgcmVzdWx0JykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHJldHVybiBpc1Bvc2l0aW9uSW5GcmFtZShkcm9wcGFibGUuZnJhbWUucGFnZU1hcmdpbkJveCkodGFyZ2V0KTtcbiAgfSk7XG4gIHJldHVybiBtYXliZTtcbn07XG5cbnZhciBnZXRCZXN0U2Nyb2xsYWJsZURyb3BwYWJsZSA9IChmdW5jdGlvbiAoX3JlZikge1xuICB2YXIgY2VudGVyID0gX3JlZi5jZW50ZXIsXG4gICAgICBkZXN0aW5hdGlvbiA9IF9yZWYuZGVzdGluYXRpb24sXG4gICAgICBkcm9wcGFibGVzID0gX3JlZi5kcm9wcGFibGVzO1xuXG4gIGlmIChkZXN0aW5hdGlvbikge1xuICAgIHZhciBfZGltZW5zaW9uID0gZHJvcHBhYmxlc1tkZXN0aW5hdGlvbl07XG5cbiAgICBpZiAoIV9kaW1lbnNpb24uZnJhbWUpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiBfZGltZW5zaW9uO1xuICB9XG5cbiAgdmFyIGRpbWVuc2lvbiA9IGdldFNjcm9sbGFibGVEcm9wcGFibGVPdmVyKGNlbnRlciwgZHJvcHBhYmxlcyk7XG4gIHJldHVybiBkaW1lbnNpb247XG59KTtcblxudmFyIGNvbmZpZyA9IHtcbiAgc3RhcnRGcm9tUGVyY2VudGFnZTogMC4yNSxcbiAgbWF4U2Nyb2xsQXRQZXJjZW50YWdlOiAwLjA1LFxuICBtYXhQaXhlbFNjcm9sbDogMjgsXG4gIGVhc2U6IGZ1bmN0aW9uIGVhc2UocGVyY2VudGFnZSkge1xuICAgIHJldHVybiBNYXRoLnBvdyhwZXJjZW50YWdlLCAyKTtcbiAgfSxcbiAgZHVyYXRpb25EYW1wZW5pbmc6IHtcbiAgICBzdG9wRGFtcGVuaW5nQXQ6IDEyMDAsXG4gICAgYWNjZWxlcmF0ZUF0OiAzNjBcbiAgfVxufTtcblxudmFyIGdldERpc3RhbmNlVGhyZXNob2xkcyA9IChmdW5jdGlvbiAoY29udGFpbmVyLCBheGlzKSB7XG4gIHZhciBzdGFydFNjcm9sbGluZ0Zyb20gPSBjb250YWluZXJbYXhpcy5zaXplXSAqIGNvbmZpZy5zdGFydEZyb21QZXJjZW50YWdlO1xuICB2YXIgbWF4U2Nyb2xsVmFsdWVBdCA9IGNvbnRhaW5lcltheGlzLnNpemVdICogY29uZmlnLm1heFNjcm9sbEF0UGVyY2VudGFnZTtcbiAgdmFyIHRocmVzaG9sZHMgPSB7XG4gICAgc3RhcnRTY3JvbGxpbmdGcm9tOiBzdGFydFNjcm9sbGluZ0Zyb20sXG4gICAgbWF4U2Nyb2xsVmFsdWVBdDogbWF4U2Nyb2xsVmFsdWVBdFxuICB9O1xuICByZXR1cm4gdGhyZXNob2xkcztcbn0pO1xuXG52YXIgZ2V0UGVyY2VudGFnZSA9IChmdW5jdGlvbiAoX3JlZikge1xuICB2YXIgc3RhcnRPZlJhbmdlID0gX3JlZi5zdGFydE9mUmFuZ2UsXG4gICAgICBlbmRPZlJhbmdlID0gX3JlZi5lbmRPZlJhbmdlLFxuICAgICAgY3VycmVudCA9IF9yZWYuY3VycmVudDtcbiAgdmFyIHJhbmdlID0gZW5kT2ZSYW5nZSAtIHN0YXJ0T2ZSYW5nZTtcblxuICBpZiAocmFuZ2UgPT09IDApIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKFwiXFxuICAgICAgRGV0ZWN0ZWQgZGlzdGFuY2UgcmFuZ2Ugb2YgMCBpbiB0aGUgZmx1aWQgYXV0byBzY3JvbGxlclxcbiAgICAgIFRoaXMgaXMgdW5leHBlY3RlZCBhbmQgd291bGQgY2F1c2UgYSBkaXZpZGUgYnkgMCBpc3N1ZS5cXG4gICAgICBOb3QgYWxsb3dpbmcgYW4gYXV0byBzY3JvbGxcXG4gICAgXCIpIDogdm9pZCAwO1xuICAgIHJldHVybiAwO1xuICB9XG5cbiAgdmFyIGN1cnJlbnRJblJhbmdlID0gY3VycmVudCAtIHN0YXJ0T2ZSYW5nZTtcbiAgdmFyIHBlcmNlbnRhZ2UgPSBjdXJyZW50SW5SYW5nZSAvIHJhbmdlO1xuICByZXR1cm4gcGVyY2VudGFnZTtcbn0pO1xuXG52YXIgbWluU2Nyb2xsID0gMTtcblxudmFyIGdldFZhbHVlRnJvbURpc3RhbmNlID0gKGZ1bmN0aW9uIChkaXN0YW5jZVRvRWRnZSwgdGhyZXNob2xkcykge1xuICBpZiAoZGlzdGFuY2VUb0VkZ2UgPiB0aHJlc2hvbGRzLnN0YXJ0U2Nyb2xsaW5nRnJvbSkge1xuICAgIHJldHVybiAwO1xuICB9XG5cbiAgaWYgKGRpc3RhbmNlVG9FZGdlIDw9IHRocmVzaG9sZHMubWF4U2Nyb2xsVmFsdWVBdCkge1xuICAgIHJldHVybiBjb25maWcubWF4UGl4ZWxTY3JvbGw7XG4gIH1cblxuICBpZiAoZGlzdGFuY2VUb0VkZ2UgPT09IHRocmVzaG9sZHMuc3RhcnRTY3JvbGxpbmdGcm9tKSB7XG4gICAgcmV0dXJuIG1pblNjcm9sbDtcbiAgfVxuXG4gIHZhciBwZXJjZW50YWdlRnJvbU1heFNjcm9sbFZhbHVlQXQgPSBnZXRQZXJjZW50YWdlKHtcbiAgICBzdGFydE9mUmFuZ2U6IHRocmVzaG9sZHMubWF4U2Nyb2xsVmFsdWVBdCxcbiAgICBlbmRPZlJhbmdlOiB0aHJlc2hvbGRzLnN0YXJ0U2Nyb2xsaW5nRnJvbSxcbiAgICBjdXJyZW50OiBkaXN0YW5jZVRvRWRnZVxuICB9KTtcbiAgdmFyIHBlcmNlbnRhZ2VGcm9tU3RhcnRTY3JvbGxpbmdGcm9tID0gMSAtIHBlcmNlbnRhZ2VGcm9tTWF4U2Nyb2xsVmFsdWVBdDtcbiAgdmFyIHNjcm9sbCA9IGNvbmZpZy5tYXhQaXhlbFNjcm9sbCAqIGNvbmZpZy5lYXNlKHBlcmNlbnRhZ2VGcm9tU3RhcnRTY3JvbGxpbmdGcm9tKTtcbiAgcmV0dXJuIE1hdGguY2VpbChzY3JvbGwpO1xufSk7XG5cbnZhciBhY2NlbGVyYXRlQXQgPSBjb25maWcuZHVyYXRpb25EYW1wZW5pbmcuYWNjZWxlcmF0ZUF0O1xudmFyIHN0b3BBdCA9IGNvbmZpZy5kdXJhdGlvbkRhbXBlbmluZy5zdG9wRGFtcGVuaW5nQXQ7XG52YXIgZGFtcGVuVmFsdWVCeVRpbWUgPSAoZnVuY3Rpb24gKHByb3Bvc2VkU2Nyb2xsLCBkcmFnU3RhcnRUaW1lKSB7XG4gIHZhciBzdGFydE9mUmFuZ2UgPSBkcmFnU3RhcnRUaW1lO1xuICB2YXIgZW5kT2ZSYW5nZSA9IHN0b3BBdDtcblxuICB2YXIgbm93ID0gX0RhdGUkbm93KCk7XG5cbiAgdmFyIHJ1blRpbWUgPSBub3cgLSBzdGFydE9mUmFuZ2U7XG5cbiAgaWYgKHJ1blRpbWUgPj0gc3RvcEF0KSB7XG4gICAgcmV0dXJuIHByb3Bvc2VkU2Nyb2xsO1xuICB9XG5cbiAgaWYgKHJ1blRpbWUgPCBhY2NlbGVyYXRlQXQpIHtcbiAgICByZXR1cm4gbWluU2Nyb2xsO1xuICB9XG5cbiAgdmFyIGJldHdlZW5BY2NlbGVyYXRlQXRBbmRTdG9wQXRQZXJjZW50YWdlID0gZ2V0UGVyY2VudGFnZSh7XG4gICAgc3RhcnRPZlJhbmdlOiBhY2NlbGVyYXRlQXQsXG4gICAgZW5kT2ZSYW5nZTogZW5kT2ZSYW5nZSxcbiAgICBjdXJyZW50OiBydW5UaW1lXG4gIH0pO1xuICB2YXIgc2Nyb2xsID0gcHJvcG9zZWRTY3JvbGwgKiBjb25maWcuZWFzZShiZXR3ZWVuQWNjZWxlcmF0ZUF0QW5kU3RvcEF0UGVyY2VudGFnZSk7XG4gIHJldHVybiBNYXRoLmNlaWwoc2Nyb2xsKTtcbn0pO1xuXG52YXIgZ2V0VmFsdWUgPSAoZnVuY3Rpb24gKF9yZWYpIHtcbiAgdmFyIGRpc3RhbmNlVG9FZGdlID0gX3JlZi5kaXN0YW5jZVRvRWRnZSxcbiAgICAgIHRocmVzaG9sZHMgPSBfcmVmLnRocmVzaG9sZHMsXG4gICAgICBkcmFnU3RhcnRUaW1lID0gX3JlZi5kcmFnU3RhcnRUaW1lLFxuICAgICAgc2hvdWxkVXNlVGltZURhbXBlbmluZyA9IF9yZWYuc2hvdWxkVXNlVGltZURhbXBlbmluZztcbiAgdmFyIHNjcm9sbCA9IGdldFZhbHVlRnJvbURpc3RhbmNlKGRpc3RhbmNlVG9FZGdlLCB0aHJlc2hvbGRzKTtcblxuICBpZiAoc2Nyb2xsID09PSAwKSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cblxuICBpZiAoIXNob3VsZFVzZVRpbWVEYW1wZW5pbmcpIHtcbiAgICByZXR1cm4gc2Nyb2xsO1xuICB9XG5cbiAgcmV0dXJuIE1hdGgubWF4KGRhbXBlblZhbHVlQnlUaW1lKHNjcm9sbCwgZHJhZ1N0YXJ0VGltZSksIG1pblNjcm9sbCk7XG59KTtcblxudmFyIGdldFNjcm9sbE9uQXhpcyA9IChmdW5jdGlvbiAoX3JlZikge1xuICB2YXIgY29udGFpbmVyID0gX3JlZi5jb250YWluZXIsXG4gICAgICBkaXN0YW5jZVRvRWRnZXMgPSBfcmVmLmRpc3RhbmNlVG9FZGdlcyxcbiAgICAgIGRyYWdTdGFydFRpbWUgPSBfcmVmLmRyYWdTdGFydFRpbWUsXG4gICAgICBheGlzID0gX3JlZi5heGlzLFxuICAgICAgc2hvdWxkVXNlVGltZURhbXBlbmluZyA9IF9yZWYuc2hvdWxkVXNlVGltZURhbXBlbmluZztcbiAgdmFyIHRocmVzaG9sZHMgPSBnZXREaXN0YW5jZVRocmVzaG9sZHMoY29udGFpbmVyLCBheGlzKTtcbiAgdmFyIGlzQ2xvc2VyVG9FbmQgPSBkaXN0YW5jZVRvRWRnZXNbYXhpcy5lbmRdIDwgZGlzdGFuY2VUb0VkZ2VzW2F4aXMuc3RhcnRdO1xuXG4gIGlmIChpc0Nsb3NlclRvRW5kKSB7XG4gICAgcmV0dXJuIGdldFZhbHVlKHtcbiAgICAgIGRpc3RhbmNlVG9FZGdlOiBkaXN0YW5jZVRvRWRnZXNbYXhpcy5lbmRdLFxuICAgICAgdGhyZXNob2xkczogdGhyZXNob2xkcyxcbiAgICAgIGRyYWdTdGFydFRpbWU6IGRyYWdTdGFydFRpbWUsXG4gICAgICBzaG91bGRVc2VUaW1lRGFtcGVuaW5nOiBzaG91bGRVc2VUaW1lRGFtcGVuaW5nXG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gLTEgKiBnZXRWYWx1ZSh7XG4gICAgZGlzdGFuY2VUb0VkZ2U6IGRpc3RhbmNlVG9FZGdlc1theGlzLnN0YXJ0XSxcbiAgICB0aHJlc2hvbGRzOiB0aHJlc2hvbGRzLFxuICAgIGRyYWdTdGFydFRpbWU6IGRyYWdTdGFydFRpbWUsXG4gICAgc2hvdWxkVXNlVGltZURhbXBlbmluZzogc2hvdWxkVXNlVGltZURhbXBlbmluZ1xuICB9KTtcbn0pO1xuXG52YXIgYWRqdXN0Rm9yU2l6ZUxpbWl0cyA9IChmdW5jdGlvbiAoX3JlZikge1xuICB2YXIgY29udGFpbmVyID0gX3JlZi5jb250YWluZXIsXG4gICAgICBzdWJqZWN0ID0gX3JlZi5zdWJqZWN0LFxuICAgICAgcHJvcG9zZWRTY3JvbGwgPSBfcmVmLnByb3Bvc2VkU2Nyb2xsO1xuICB2YXIgaXNUb29CaWdWZXJ0aWNhbGx5ID0gc3ViamVjdC5oZWlnaHQgPiBjb250YWluZXIuaGVpZ2h0O1xuICB2YXIgaXNUb29CaWdIb3Jpem9udGFsbHkgPSBzdWJqZWN0LndpZHRoID4gY29udGFpbmVyLndpZHRoO1xuXG4gIGlmICghaXNUb29CaWdIb3Jpem9udGFsbHkgJiYgIWlzVG9vQmlnVmVydGljYWxseSkge1xuICAgIHJldHVybiBwcm9wb3NlZFNjcm9sbDtcbiAgfVxuXG4gIGlmIChpc1Rvb0JpZ0hvcml6b250YWxseSAmJiBpc1Rvb0JpZ1ZlcnRpY2FsbHkpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgeDogaXNUb29CaWdIb3Jpem9udGFsbHkgPyAwIDogcHJvcG9zZWRTY3JvbGwueCxcbiAgICB5OiBpc1Rvb0JpZ1ZlcnRpY2FsbHkgPyAwIDogcHJvcG9zZWRTY3JvbGwueVxuICB9O1xufSk7XG5cbnZhciBjbGVhbiQzID0gYXBwbHkoZnVuY3Rpb24gKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSA9PT0gMCA/IDAgOiB2YWx1ZTtcbn0pO1xudmFyIGdldFNjcm9sbCA9IChmdW5jdGlvbiAoX3JlZikge1xuICB2YXIgZHJhZ1N0YXJ0VGltZSA9IF9yZWYuZHJhZ1N0YXJ0VGltZSxcbiAgICAgIGNvbnRhaW5lciA9IF9yZWYuY29udGFpbmVyLFxuICAgICAgc3ViamVjdCA9IF9yZWYuc3ViamVjdCxcbiAgICAgIGNlbnRlciA9IF9yZWYuY2VudGVyLFxuICAgICAgc2hvdWxkVXNlVGltZURhbXBlbmluZyA9IF9yZWYuc2hvdWxkVXNlVGltZURhbXBlbmluZztcbiAgdmFyIGRpc3RhbmNlVG9FZGdlcyA9IHtcbiAgICB0b3A6IGNlbnRlci55IC0gY29udGFpbmVyLnRvcCxcbiAgICByaWdodDogY29udGFpbmVyLnJpZ2h0IC0gY2VudGVyLngsXG4gICAgYm90dG9tOiBjb250YWluZXIuYm90dG9tIC0gY2VudGVyLnksXG4gICAgbGVmdDogY2VudGVyLnggLSBjb250YWluZXIubGVmdFxuICB9O1xuICB2YXIgeSA9IGdldFNjcm9sbE9uQXhpcyh7XG4gICAgY29udGFpbmVyOiBjb250YWluZXIsXG4gICAgZGlzdGFuY2VUb0VkZ2VzOiBkaXN0YW5jZVRvRWRnZXMsXG4gICAgZHJhZ1N0YXJ0VGltZTogZHJhZ1N0YXJ0VGltZSxcbiAgICBheGlzOiB2ZXJ0aWNhbCxcbiAgICBzaG91bGRVc2VUaW1lRGFtcGVuaW5nOiBzaG91bGRVc2VUaW1lRGFtcGVuaW5nXG4gIH0pO1xuICB2YXIgeCA9IGdldFNjcm9sbE9uQXhpcyh7XG4gICAgY29udGFpbmVyOiBjb250YWluZXIsXG4gICAgZGlzdGFuY2VUb0VkZ2VzOiBkaXN0YW5jZVRvRWRnZXMsXG4gICAgZHJhZ1N0YXJ0VGltZTogZHJhZ1N0YXJ0VGltZSxcbiAgICBheGlzOiBob3Jpem9udGFsLFxuICAgIHNob3VsZFVzZVRpbWVEYW1wZW5pbmc6IHNob3VsZFVzZVRpbWVEYW1wZW5pbmdcbiAgfSk7XG4gIHZhciByZXF1aXJlZCA9IGNsZWFuJDMoe1xuICAgIHg6IHgsXG4gICAgeTogeVxuICB9KTtcblxuICBpZiAoaXNFcXVhbChyZXF1aXJlZCwgb3JpZ2luKSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgdmFyIGxpbWl0ZWQgPSBhZGp1c3RGb3JTaXplTGltaXRzKHtcbiAgICBjb250YWluZXI6IGNvbnRhaW5lcixcbiAgICBzdWJqZWN0OiBzdWJqZWN0LFxuICAgIHByb3Bvc2VkU2Nyb2xsOiByZXF1aXJlZFxuICB9KTtcblxuICBpZiAoIWxpbWl0ZWQpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiBpc0VxdWFsKGxpbWl0ZWQsIG9yaWdpbikgPyBudWxsIDogbGltaXRlZDtcbn0pO1xuXG52YXIgc21hbGxlc3RTaWduZWQgPSBhcHBseShmdW5jdGlvbiAodmFsdWUpIHtcbiAgaWYgKHZhbHVlID09PSAwKSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cblxuICByZXR1cm4gdmFsdWUgPiAwID8gMSA6IC0xO1xufSk7XG52YXIgZ2V0T3ZlcmxhcCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGdldFJlbWFpbmRlciA9IGZ1bmN0aW9uIGdldFJlbWFpbmRlcih0YXJnZXQsIG1heCkge1xuICAgIGlmICh0YXJnZXQgPCAwKSB7XG4gICAgICByZXR1cm4gdGFyZ2V0O1xuICAgIH1cblxuICAgIGlmICh0YXJnZXQgPiBtYXgpIHtcbiAgICAgIHJldHVybiB0YXJnZXQgLSBtYXg7XG4gICAgfVxuXG4gICAgcmV0dXJuIDA7XG4gIH07XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgdmFyIGN1cnJlbnQgPSBfcmVmLmN1cnJlbnQsXG4gICAgICAgIG1heCA9IF9yZWYubWF4LFxuICAgICAgICBjaGFuZ2UgPSBfcmVmLmNoYW5nZTtcbiAgICB2YXIgdGFyZ2V0U2Nyb2xsID0gYWRkKGN1cnJlbnQsIGNoYW5nZSk7XG4gICAgdmFyIG92ZXJsYXAgPSB7XG4gICAgICB4OiBnZXRSZW1haW5kZXIodGFyZ2V0U2Nyb2xsLngsIG1heC54KSxcbiAgICAgIHk6IGdldFJlbWFpbmRlcih0YXJnZXRTY3JvbGwueSwgbWF4LnkpXG4gICAgfTtcblxuICAgIGlmIChpc0VxdWFsKG92ZXJsYXAsIG9yaWdpbikpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiBvdmVybGFwO1xuICB9O1xufSgpO1xudmFyIGNhblBhcnRpYWxseVNjcm9sbCA9IGZ1bmN0aW9uIGNhblBhcnRpYWxseVNjcm9sbChfcmVmMikge1xuICB2YXIgcmF3TWF4ID0gX3JlZjIubWF4LFxuICAgICAgY3VycmVudCA9IF9yZWYyLmN1cnJlbnQsXG4gICAgICBjaGFuZ2UgPSBfcmVmMi5jaGFuZ2U7XG4gIHZhciBtYXggPSB7XG4gICAgeDogTWF0aC5tYXgoY3VycmVudC54LCByYXdNYXgueCksXG4gICAgeTogTWF0aC5tYXgoY3VycmVudC55LCByYXdNYXgueSlcbiAgfTtcbiAgdmFyIHNtYWxsZXN0Q2hhbmdlID0gc21hbGxlc3RTaWduZWQoY2hhbmdlKTtcbiAgdmFyIG92ZXJsYXAgPSBnZXRPdmVybGFwKHtcbiAgICBtYXg6IG1heCxcbiAgICBjdXJyZW50OiBjdXJyZW50LFxuICAgIGNoYW5nZTogc21hbGxlc3RDaGFuZ2VcbiAgfSk7XG5cbiAgaWYgKCFvdmVybGFwKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAoc21hbGxlc3RDaGFuZ2UueCAhPT0gMCAmJiBvdmVybGFwLnggPT09IDApIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGlmIChzbWFsbGVzdENoYW5nZS55ICE9PSAwICYmIG92ZXJsYXAueSA9PT0gMCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufTtcbnZhciBjYW5TY3JvbGxXaW5kb3cgPSBmdW5jdGlvbiBjYW5TY3JvbGxXaW5kb3codmlld3BvcnQsIGNoYW5nZSkge1xuICByZXR1cm4gY2FuUGFydGlhbGx5U2Nyb2xsKHtcbiAgICBjdXJyZW50OiB2aWV3cG9ydC5zY3JvbGwuY3VycmVudCxcbiAgICBtYXg6IHZpZXdwb3J0LnNjcm9sbC5tYXgsXG4gICAgY2hhbmdlOiBjaGFuZ2VcbiAgfSk7XG59O1xudmFyIGdldFdpbmRvd092ZXJsYXAgPSBmdW5jdGlvbiBnZXRXaW5kb3dPdmVybGFwKHZpZXdwb3J0LCBjaGFuZ2UpIHtcbiAgaWYgKCFjYW5TY3JvbGxXaW5kb3codmlld3BvcnQsIGNoYW5nZSkpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHZhciBtYXggPSB2aWV3cG9ydC5zY3JvbGwubWF4O1xuICB2YXIgY3VycmVudCA9IHZpZXdwb3J0LnNjcm9sbC5jdXJyZW50O1xuICByZXR1cm4gZ2V0T3ZlcmxhcCh7XG4gICAgY3VycmVudDogY3VycmVudCxcbiAgICBtYXg6IG1heCxcbiAgICBjaGFuZ2U6IGNoYW5nZVxuICB9KTtcbn07XG52YXIgY2FuU2Nyb2xsRHJvcHBhYmxlID0gZnVuY3Rpb24gY2FuU2Nyb2xsRHJvcHBhYmxlKGRyb3BwYWJsZSwgY2hhbmdlKSB7XG4gIHZhciBmcmFtZSA9IGRyb3BwYWJsZS5mcmFtZTtcblxuICBpZiAoIWZyYW1lKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIGNhblBhcnRpYWxseVNjcm9sbCh7XG4gICAgY3VycmVudDogZnJhbWUuc2Nyb2xsLmN1cnJlbnQsXG4gICAgbWF4OiBmcmFtZS5zY3JvbGwubWF4LFxuICAgIGNoYW5nZTogY2hhbmdlXG4gIH0pO1xufTtcbnZhciBnZXREcm9wcGFibGVPdmVybGFwID0gZnVuY3Rpb24gZ2V0RHJvcHBhYmxlT3ZlcmxhcChkcm9wcGFibGUsIGNoYW5nZSkge1xuICB2YXIgZnJhbWUgPSBkcm9wcGFibGUuZnJhbWU7XG5cbiAgaWYgKCFmcmFtZSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgaWYgKCFjYW5TY3JvbGxEcm9wcGFibGUoZHJvcHBhYmxlLCBjaGFuZ2UpKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZXR1cm4gZ2V0T3ZlcmxhcCh7XG4gICAgY3VycmVudDogZnJhbWUuc2Nyb2xsLmN1cnJlbnQsXG4gICAgbWF4OiBmcmFtZS5zY3JvbGwubWF4LFxuICAgIGNoYW5nZTogY2hhbmdlXG4gIH0pO1xufTtcblxudmFyIGdldFdpbmRvd1Njcm9sbENoYW5nZSA9IChmdW5jdGlvbiAoX3JlZikge1xuICB2YXIgdmlld3BvcnQgPSBfcmVmLnZpZXdwb3J0LFxuICAgICAgc3ViamVjdCA9IF9yZWYuc3ViamVjdCxcbiAgICAgIGNlbnRlciA9IF9yZWYuY2VudGVyLFxuICAgICAgZHJhZ1N0YXJ0VGltZSA9IF9yZWYuZHJhZ1N0YXJ0VGltZSxcbiAgICAgIHNob3VsZFVzZVRpbWVEYW1wZW5pbmcgPSBfcmVmLnNob3VsZFVzZVRpbWVEYW1wZW5pbmc7XG4gIHZhciBzY3JvbGwgPSBnZXRTY3JvbGwoe1xuICAgIGRyYWdTdGFydFRpbWU6IGRyYWdTdGFydFRpbWUsXG4gICAgY29udGFpbmVyOiB2aWV3cG9ydC5mcmFtZSxcbiAgICBzdWJqZWN0OiBzdWJqZWN0LFxuICAgIGNlbnRlcjogY2VudGVyLFxuICAgIHNob3VsZFVzZVRpbWVEYW1wZW5pbmc6IHNob3VsZFVzZVRpbWVEYW1wZW5pbmdcbiAgfSk7XG4gIHJldHVybiBzY3JvbGwgJiYgY2FuU2Nyb2xsV2luZG93KHZpZXdwb3J0LCBzY3JvbGwpID8gc2Nyb2xsIDogbnVsbDtcbn0pO1xuXG52YXIgZ2V0RHJvcHBhYmxlU2Nyb2xsQ2hhbmdlID0gKGZ1bmN0aW9uIChfcmVmKSB7XG4gIHZhciBkcm9wcGFibGUgPSBfcmVmLmRyb3BwYWJsZSxcbiAgICAgIHN1YmplY3QgPSBfcmVmLnN1YmplY3QsXG4gICAgICBjZW50ZXIgPSBfcmVmLmNlbnRlcixcbiAgICAgIGRyYWdTdGFydFRpbWUgPSBfcmVmLmRyYWdTdGFydFRpbWUsXG4gICAgICBzaG91bGRVc2VUaW1lRGFtcGVuaW5nID0gX3JlZi5zaG91bGRVc2VUaW1lRGFtcGVuaW5nO1xuICB2YXIgZnJhbWUgPSBkcm9wcGFibGUuZnJhbWU7XG5cbiAgaWYgKCFmcmFtZSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgdmFyIHNjcm9sbCA9IGdldFNjcm9sbCh7XG4gICAgZHJhZ1N0YXJ0VGltZTogZHJhZ1N0YXJ0VGltZSxcbiAgICBjb250YWluZXI6IGZyYW1lLnBhZ2VNYXJnaW5Cb3gsXG4gICAgc3ViamVjdDogc3ViamVjdCxcbiAgICBjZW50ZXI6IGNlbnRlcixcbiAgICBzaG91bGRVc2VUaW1lRGFtcGVuaW5nOiBzaG91bGRVc2VUaW1lRGFtcGVuaW5nXG4gIH0pO1xuICByZXR1cm4gc2Nyb2xsICYmIGNhblNjcm9sbERyb3BwYWJsZShkcm9wcGFibGUsIHNjcm9sbCkgPyBzY3JvbGwgOiBudWxsO1xufSk7XG5cbnZhciBzY3JvbGwkMSA9IChmdW5jdGlvbiAoX3JlZikge1xuICB2YXIgc3RhdGUgPSBfcmVmLnN0YXRlLFxuICAgICAgZHJhZ1N0YXJ0VGltZSA9IF9yZWYuZHJhZ1N0YXJ0VGltZSxcbiAgICAgIHNob3VsZFVzZVRpbWVEYW1wZW5pbmcgPSBfcmVmLnNob3VsZFVzZVRpbWVEYW1wZW5pbmcsXG4gICAgICBzY3JvbGxXaW5kb3cgPSBfcmVmLnNjcm9sbFdpbmRvdyxcbiAgICAgIHNjcm9sbERyb3BwYWJsZSA9IF9yZWYuc2Nyb2xsRHJvcHBhYmxlO1xuICB2YXIgY2VudGVyID0gc3RhdGUuY3VycmVudC5wYWdlLmJvcmRlckJveENlbnRlcjtcbiAgdmFyIGRyYWdnYWJsZSA9IHN0YXRlLmRpbWVuc2lvbnMuZHJhZ2dhYmxlc1tzdGF0ZS5jcml0aWNhbC5kcmFnZ2FibGUuaWRdO1xuICB2YXIgc3ViamVjdCA9IGRyYWdnYWJsZS5wYWdlLm1hcmdpbkJveDtcblxuICBpZiAoc3RhdGUuaXNXaW5kb3dTY3JvbGxBbGxvd2VkKSB7XG4gICAgdmFyIHZpZXdwb3J0ID0gc3RhdGUudmlld3BvcnQ7XG5cbiAgICB2YXIgX2NoYW5nZSA9IGdldFdpbmRvd1Njcm9sbENoYW5nZSh7XG4gICAgICBkcmFnU3RhcnRUaW1lOiBkcmFnU3RhcnRUaW1lLFxuICAgICAgdmlld3BvcnQ6IHZpZXdwb3J0LFxuICAgICAgc3ViamVjdDogc3ViamVjdCxcbiAgICAgIGNlbnRlcjogY2VudGVyLFxuICAgICAgc2hvdWxkVXNlVGltZURhbXBlbmluZzogc2hvdWxkVXNlVGltZURhbXBlbmluZ1xuICAgIH0pO1xuXG4gICAgaWYgKF9jaGFuZ2UpIHtcbiAgICAgIHNjcm9sbFdpbmRvdyhfY2hhbmdlKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH1cblxuICB2YXIgZHJvcHBhYmxlID0gZ2V0QmVzdFNjcm9sbGFibGVEcm9wcGFibGUoe1xuICAgIGNlbnRlcjogY2VudGVyLFxuICAgIGRlc3RpbmF0aW9uOiB3aGF0SXNEcmFnZ2VkT3ZlcihzdGF0ZS5pbXBhY3QpLFxuICAgIGRyb3BwYWJsZXM6IHN0YXRlLmRpbWVuc2lvbnMuZHJvcHBhYmxlc1xuICB9KTtcblxuICBpZiAoIWRyb3BwYWJsZSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBjaGFuZ2UgPSBnZXREcm9wcGFibGVTY3JvbGxDaGFuZ2Uoe1xuICAgIGRyYWdTdGFydFRpbWU6IGRyYWdTdGFydFRpbWUsXG4gICAgZHJvcHBhYmxlOiBkcm9wcGFibGUsXG4gICAgc3ViamVjdDogc3ViamVjdCxcbiAgICBjZW50ZXI6IGNlbnRlcixcbiAgICBzaG91bGRVc2VUaW1lRGFtcGVuaW5nOiBzaG91bGRVc2VUaW1lRGFtcGVuaW5nXG4gIH0pO1xuXG4gIGlmIChjaGFuZ2UpIHtcbiAgICBzY3JvbGxEcm9wcGFibGUoZHJvcHBhYmxlLmRlc2NyaXB0b3IuaWQsIGNoYW5nZSk7XG4gIH1cbn0pO1xuXG52YXIgY3JlYXRlRmx1aWRTY3JvbGxlciA9IChmdW5jdGlvbiAoX3JlZikge1xuICB2YXIgc2Nyb2xsV2luZG93ID0gX3JlZi5zY3JvbGxXaW5kb3csXG4gICAgICBzY3JvbGxEcm9wcGFibGUgPSBfcmVmLnNjcm9sbERyb3BwYWJsZTtcbiAgdmFyIHNjaGVkdWxlV2luZG93U2Nyb2xsID0gcmFmU2NoZChzY3JvbGxXaW5kb3cpO1xuICB2YXIgc2NoZWR1bGVEcm9wcGFibGVTY3JvbGwgPSByYWZTY2hkKHNjcm9sbERyb3BwYWJsZSk7XG4gIHZhciBkcmFnZ2luZyA9IG51bGw7XG5cbiAgdmFyIHRyeVNjcm9sbCA9IGZ1bmN0aW9uIHRyeVNjcm9sbChzdGF0ZSkge1xuICAgICFkcmFnZ2luZyA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0Nhbm5vdCBmbHVpZCBzY3JvbGwgaWYgbm90IGRyYWdnaW5nJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHZhciBfZHJhZ2dpbmcgPSBkcmFnZ2luZyxcbiAgICAgICAgc2hvdWxkVXNlVGltZURhbXBlbmluZyA9IF9kcmFnZ2luZy5zaG91bGRVc2VUaW1lRGFtcGVuaW5nLFxuICAgICAgICBkcmFnU3RhcnRUaW1lID0gX2RyYWdnaW5nLmRyYWdTdGFydFRpbWU7XG4gICAgc2Nyb2xsJDEoe1xuICAgICAgc3RhdGU6IHN0YXRlLFxuICAgICAgc2Nyb2xsV2luZG93OiBzY2hlZHVsZVdpbmRvd1Njcm9sbCxcbiAgICAgIHNjcm9sbERyb3BwYWJsZTogc2NoZWR1bGVEcm9wcGFibGVTY3JvbGwsXG4gICAgICBkcmFnU3RhcnRUaW1lOiBkcmFnU3RhcnRUaW1lLFxuICAgICAgc2hvdWxkVXNlVGltZURhbXBlbmluZzogc2hvdWxkVXNlVGltZURhbXBlbmluZ1xuICAgIH0pO1xuICB9O1xuXG4gIHZhciBjYW5jZWxQZW5kaW5nID0gZnVuY3Rpb24gY2FuY2VsUGVuZGluZygpIHtcbiAgICAhZHJhZ2dpbmcgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdDYW5ub3QgY2FuY2VsIHBlbmRpbmcgZmx1aWQgc2Nyb2xsIHdoZW4gbm90IHN0YXJ0ZWQnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgc2NoZWR1bGVXaW5kb3dTY3JvbGwuY2FuY2VsKCk7XG4gICAgc2NoZWR1bGVEcm9wcGFibGVTY3JvbGwuY2FuY2VsKCk7XG4gIH07XG5cbiAgdmFyIHN0YXJ0JDEgPSBmdW5jdGlvbiBzdGFydCQxKHN0YXRlKSB7XG4gICAgc3RhcnQoJ3N0YXJ0aW5nIGZsdWlkIHNjcm9sbGVyJyk7XG4gICAgISFkcmFnZ2luZyA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0Nhbm5vdCBzdGFydCBhdXRvIHNjcm9sbGluZyB3aGVuIGFscmVhZHkgc3RhcnRlZCcpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcblxuICAgIHZhciBkcmFnU3RhcnRUaW1lID0gX0RhdGUkbm93KCk7XG5cbiAgICB2YXIgd2FzU2Nyb2xsTmVlZGVkID0gZmFsc2U7XG5cbiAgICB2YXIgZmFrZVNjcm9sbENhbGxiYWNrID0gZnVuY3Rpb24gZmFrZVNjcm9sbENhbGxiYWNrKCkge1xuICAgICAgd2FzU2Nyb2xsTmVlZGVkID0gdHJ1ZTtcbiAgICB9O1xuXG4gICAgc2Nyb2xsJDEoe1xuICAgICAgc3RhdGU6IHN0YXRlLFxuICAgICAgZHJhZ1N0YXJ0VGltZTogMCxcbiAgICAgIHNob3VsZFVzZVRpbWVEYW1wZW5pbmc6IGZhbHNlLFxuICAgICAgc2Nyb2xsV2luZG93OiBmYWtlU2Nyb2xsQ2FsbGJhY2ssXG4gICAgICBzY3JvbGxEcm9wcGFibGU6IGZha2VTY3JvbGxDYWxsYmFja1xuICAgIH0pO1xuICAgIGRyYWdnaW5nID0ge1xuICAgICAgZHJhZ1N0YXJ0VGltZTogZHJhZ1N0YXJ0VGltZSxcbiAgICAgIHNob3VsZFVzZVRpbWVEYW1wZW5pbmc6IHdhc1Njcm9sbE5lZWRlZFxuICAgIH07XG4gICAgZmluaXNoKCdzdGFydGluZyBmbHVpZCBzY3JvbGxlcicpO1xuXG4gICAgaWYgKHdhc1Njcm9sbE5lZWRlZCkge1xuICAgICAgdHJ5U2Nyb2xsKHN0YXRlKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIHN0b3AgPSBmdW5jdGlvbiBzdG9wKCkge1xuICAgIGlmICghZHJhZ2dpbmcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjYW5jZWxQZW5kaW5nKCk7XG4gICAgZHJhZ2dpbmcgPSBudWxsO1xuICB9O1xuXG4gIHJldHVybiB7XG4gICAgc3RhcnQ6IHN0YXJ0JDEsXG4gICAgc3RvcDogc3RvcCxcbiAgICBjYW5jZWxQZW5kaW5nOiBjYW5jZWxQZW5kaW5nLFxuICAgIHNjcm9sbDogdHJ5U2Nyb2xsXG4gIH07XG59KTtcblxudmFyIGNyZWF0ZUp1bXBTY3JvbGxlciA9IChmdW5jdGlvbiAoX3JlZikge1xuICB2YXIgbW92ZSA9IF9yZWYubW92ZSxcbiAgICAgIHNjcm9sbERyb3BwYWJsZSA9IF9yZWYuc2Nyb2xsRHJvcHBhYmxlLFxuICAgICAgc2Nyb2xsV2luZG93ID0gX3JlZi5zY3JvbGxXaW5kb3c7XG5cbiAgdmFyIG1vdmVCeU9mZnNldCA9IGZ1bmN0aW9uIG1vdmVCeU9mZnNldChzdGF0ZSwgb2Zmc2V0KSB7XG4gICAgdmFyIGNsaWVudCA9IGFkZChzdGF0ZS5jdXJyZW50LmNsaWVudC5zZWxlY3Rpb24sIG9mZnNldCk7XG4gICAgbW92ZSh7XG4gICAgICBjbGllbnQ6IGNsaWVudFxuICAgIH0pO1xuICB9O1xuXG4gIHZhciBzY3JvbGxEcm9wcGFibGVBc011Y2hBc0l0Q2FuID0gZnVuY3Rpb24gc2Nyb2xsRHJvcHBhYmxlQXNNdWNoQXNJdENhbihkcm9wcGFibGUsIGNoYW5nZSkge1xuICAgIGlmICghY2FuU2Nyb2xsRHJvcHBhYmxlKGRyb3BwYWJsZSwgY2hhbmdlKSkge1xuICAgICAgcmV0dXJuIGNoYW5nZTtcbiAgICB9XG5cbiAgICB2YXIgb3ZlcmxhcCA9IGdldERyb3BwYWJsZU92ZXJsYXAoZHJvcHBhYmxlLCBjaGFuZ2UpO1xuXG4gICAgaWYgKCFvdmVybGFwKSB7XG4gICAgICBzY3JvbGxEcm9wcGFibGUoZHJvcHBhYmxlLmRlc2NyaXB0b3IuaWQsIGNoYW5nZSk7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICB2YXIgd2hhdFRoZURyb3BwYWJsZUNhblNjcm9sbCA9IHN1YnRyYWN0KGNoYW5nZSwgb3ZlcmxhcCk7XG4gICAgc2Nyb2xsRHJvcHBhYmxlKGRyb3BwYWJsZS5kZXNjcmlwdG9yLmlkLCB3aGF0VGhlRHJvcHBhYmxlQ2FuU2Nyb2xsKTtcbiAgICB2YXIgcmVtYWluZGVyID0gc3VidHJhY3QoY2hhbmdlLCB3aGF0VGhlRHJvcHBhYmxlQ2FuU2Nyb2xsKTtcbiAgICByZXR1cm4gcmVtYWluZGVyO1xuICB9O1xuXG4gIHZhciBzY3JvbGxXaW5kb3dBc011Y2hBc0l0Q2FuID0gZnVuY3Rpb24gc2Nyb2xsV2luZG93QXNNdWNoQXNJdENhbihpc1dpbmRvd1Njcm9sbEFsbG93ZWQsIHZpZXdwb3J0LCBjaGFuZ2UpIHtcbiAgICBpZiAoIWlzV2luZG93U2Nyb2xsQWxsb3dlZCkge1xuICAgICAgcmV0dXJuIGNoYW5nZTtcbiAgICB9XG5cbiAgICBpZiAoIWNhblNjcm9sbFdpbmRvdyh2aWV3cG9ydCwgY2hhbmdlKSkge1xuICAgICAgcmV0dXJuIGNoYW5nZTtcbiAgICB9XG5cbiAgICB2YXIgb3ZlcmxhcCA9IGdldFdpbmRvd092ZXJsYXAodmlld3BvcnQsIGNoYW5nZSk7XG5cbiAgICBpZiAoIW92ZXJsYXApIHtcbiAgICAgIHNjcm9sbFdpbmRvdyhjaGFuZ2UpO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdmFyIHdoYXRUaGVXaW5kb3dDYW5TY3JvbGwgPSBzdWJ0cmFjdChjaGFuZ2UsIG92ZXJsYXApO1xuICAgIHNjcm9sbFdpbmRvdyh3aGF0VGhlV2luZG93Q2FuU2Nyb2xsKTtcbiAgICB2YXIgcmVtYWluZGVyID0gc3VidHJhY3QoY2hhbmdlLCB3aGF0VGhlV2luZG93Q2FuU2Nyb2xsKTtcbiAgICByZXR1cm4gcmVtYWluZGVyO1xuICB9O1xuXG4gIHZhciBqdW1wU2Nyb2xsZXIgPSBmdW5jdGlvbiBqdW1wU2Nyb2xsZXIoc3RhdGUpIHtcbiAgICB2YXIgcmVxdWVzdCA9IHN0YXRlLnNjcm9sbEp1bXBSZXF1ZXN0O1xuXG4gICAgaWYgKCFyZXF1ZXN0KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGRlc3RpbmF0aW9uID0gd2hhdElzRHJhZ2dlZE92ZXIoc3RhdGUuaW1wYWN0KTtcbiAgICAhZGVzdGluYXRpb24gPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdDYW5ub3QgcGVyZm9ybSBhIGp1bXAgc2Nyb2xsIHdoZW4gdGhlcmUgaXMgbm8gZGVzdGluYXRpb24nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgdmFyIGRyb3BwYWJsZVJlbWFpbmRlciA9IHNjcm9sbERyb3BwYWJsZUFzTXVjaEFzSXRDYW4oc3RhdGUuZGltZW5zaW9ucy5kcm9wcGFibGVzW2Rlc3RpbmF0aW9uXSwgcmVxdWVzdCk7XG5cbiAgICBpZiAoIWRyb3BwYWJsZVJlbWFpbmRlcikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciB2aWV3cG9ydCA9IHN0YXRlLnZpZXdwb3J0O1xuICAgIHZhciB3aW5kb3dSZW1haW5kZXIgPSBzY3JvbGxXaW5kb3dBc011Y2hBc0l0Q2FuKHN0YXRlLmlzV2luZG93U2Nyb2xsQWxsb3dlZCwgdmlld3BvcnQsIGRyb3BwYWJsZVJlbWFpbmRlcik7XG5cbiAgICBpZiAoIXdpbmRvd1JlbWFpbmRlcikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIG1vdmVCeU9mZnNldChzdGF0ZSwgd2luZG93UmVtYWluZGVyKTtcbiAgfTtcblxuICByZXR1cm4ganVtcFNjcm9sbGVyO1xufSk7XG5cbnZhciBjcmVhdGVBdXRvU2Nyb2xsZXIgPSAoZnVuY3Rpb24gKF9yZWYpIHtcbiAgdmFyIHNjcm9sbERyb3BwYWJsZSA9IF9yZWYuc2Nyb2xsRHJvcHBhYmxlLFxuICAgICAgc2Nyb2xsV2luZG93ID0gX3JlZi5zY3JvbGxXaW5kb3csXG4gICAgICBtb3ZlID0gX3JlZi5tb3ZlO1xuICB2YXIgZmx1aWRTY3JvbGxlciA9IGNyZWF0ZUZsdWlkU2Nyb2xsZXIoe1xuICAgIHNjcm9sbFdpbmRvdzogc2Nyb2xsV2luZG93LFxuICAgIHNjcm9sbERyb3BwYWJsZTogc2Nyb2xsRHJvcHBhYmxlXG4gIH0pO1xuICB2YXIganVtcFNjcm9sbCA9IGNyZWF0ZUp1bXBTY3JvbGxlcih7XG4gICAgbW92ZTogbW92ZSxcbiAgICBzY3JvbGxXaW5kb3c6IHNjcm9sbFdpbmRvdyxcbiAgICBzY3JvbGxEcm9wcGFibGU6IHNjcm9sbERyb3BwYWJsZVxuICB9KTtcblxuICB2YXIgc2Nyb2xsID0gZnVuY3Rpb24gc2Nyb2xsKHN0YXRlKSB7XG4gICAgaWYgKHN0YXRlLnBoYXNlICE9PSAnRFJBR0dJTkcnKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHN0YXRlLm1vdmVtZW50TW9kZSA9PT0gJ0ZMVUlEJykge1xuICAgICAgZmx1aWRTY3JvbGxlci5zY3JvbGwoc3RhdGUpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICghc3RhdGUuc2Nyb2xsSnVtcFJlcXVlc3QpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBqdW1wU2Nyb2xsKHN0YXRlKTtcbiAgfTtcblxuICB2YXIgc2Nyb2xsZXIgPSB7XG4gICAgc2Nyb2xsOiBzY3JvbGwsXG4gICAgY2FuY2VsUGVuZGluZzogZmx1aWRTY3JvbGxlci5jYW5jZWxQZW5kaW5nLFxuICAgIHN0YXJ0OiBmbHVpZFNjcm9sbGVyLnN0YXJ0LFxuICAgIHN0b3A6IGZsdWlkU2Nyb2xsZXIuc3RvcFxuICB9O1xuICByZXR1cm4gc2Nyb2xsZXI7XG59KTtcblxudmFyIHByZWZpeCA9ICdkYXRhLXJlYWN0LWJlYXV0aWZ1bC1kbmQnO1xudmFyIGRyYWdIYW5kbGUgPSBwcmVmaXggKyBcIi1kcmFnLWhhbmRsZVwiO1xudmFyIGRyYWdnYWJsZSA9IHByZWZpeCArIFwiLWRyYWdnYWJsZVwiO1xudmFyIGRyb3BwYWJsZSA9IHByZWZpeCArIFwiLWRyb3BwYWJsZVwiO1xuXG52YXIgbWFrZUdldFNlbGVjdG9yID0gZnVuY3Rpb24gbWFrZUdldFNlbGVjdG9yKGNvbnRleHQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChhdHRyaWJ1dGUpIHtcbiAgICByZXR1cm4gXCJbXCIgKyBhdHRyaWJ1dGUgKyBcIj1cXFwiXCIgKyBjb250ZXh0ICsgXCJcXFwiXVwiO1xuICB9O1xufTtcblxudmFyIGdldFN0eWxlcyA9IGZ1bmN0aW9uIGdldFN0eWxlcyhydWxlcywgcHJvcGVydHkpIHtcbiAgcmV0dXJuIHJ1bGVzLm1hcChmdW5jdGlvbiAocnVsZSkge1xuICAgIHZhciB2YWx1ZSA9IHJ1bGUuc3R5bGVzW3Byb3BlcnR5XTtcblxuICAgIGlmICghdmFsdWUpIHtcbiAgICAgIHJldHVybiAnJztcbiAgICB9XG5cbiAgICByZXR1cm4gcnVsZS5zZWxlY3RvciArIFwiIHsgXCIgKyB2YWx1ZSArIFwiIH1cIjtcbiAgfSkuam9pbignICcpO1xufTtcblxudmFyIG5vUG9pbnRlckV2ZW50cyA9ICdwb2ludGVyLWV2ZW50czogbm9uZTsnO1xudmFyIGdldFN0eWxlcyQxID0gKGZ1bmN0aW9uICh1bmlxdWVDb250ZXh0KSB7XG4gIHZhciBnZXRTZWxlY3RvciA9IG1ha2VHZXRTZWxlY3Rvcih1bmlxdWVDb250ZXh0KTtcblxuICB2YXIgZHJhZ0hhbmRsZSQxID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBncmFiQ3Vyc29yID0gXCJcXG4gICAgICBjdXJzb3I6IC13ZWJraXQtZ3JhYjtcXG4gICAgICBjdXJzb3I6IGdyYWI7XFxuICAgIFwiO1xuICAgIHJldHVybiB7XG4gICAgICBzZWxlY3RvcjogZ2V0U2VsZWN0b3IoZHJhZ0hhbmRsZSksXG4gICAgICBzdHlsZXM6IHtcbiAgICAgICAgYWx3YXlzOiBcIlxcbiAgICAgICAgICAtd2Via2l0LXRvdWNoLWNhbGxvdXQ6IG5vbmU7XFxuICAgICAgICAgIC13ZWJraXQtdGFwLWhpZ2hsaWdodC1jb2xvcjogcmdiYSgwLDAsMCwwKTtcXG4gICAgICAgICAgdG91Y2gtYWN0aW9uOiBtYW5pcHVsYXRpb247XFxuICAgICAgICBcIixcbiAgICAgICAgcmVzdGluZzogZ3JhYkN1cnNvcixcbiAgICAgICAgZHJhZ2dpbmc6IG5vUG9pbnRlckV2ZW50cyxcbiAgICAgICAgZHJvcEFuaW1hdGluZzogZ3JhYkN1cnNvclxuICAgICAgfVxuICAgIH07XG4gIH0oKTtcblxuICB2YXIgZHJhZ2dhYmxlJDEgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHRyYW5zaXRpb24gPSBcIlxcbiAgICAgIHRyYW5zaXRpb246IFwiICsgdHJhbnNpdGlvbnMub3V0T2ZUaGVXYXkgKyBcIjtcXG4gICAgXCI7XG4gICAgcmV0dXJuIHtcbiAgICAgIHNlbGVjdG9yOiBnZXRTZWxlY3RvcihkcmFnZ2FibGUpLFxuICAgICAgc3R5bGVzOiB7XG4gICAgICAgIGRyYWdnaW5nOiB0cmFuc2l0aW9uLFxuICAgICAgICBkcm9wQW5pbWF0aW5nOiB0cmFuc2l0aW9uLFxuICAgICAgICB1c2VyQ2FuY2VsOiB0cmFuc2l0aW9uXG4gICAgICB9XG4gICAgfTtcbiAgfSgpO1xuXG4gIHZhciBkcm9wcGFibGUkMSA9IHtcbiAgICBzZWxlY3RvcjogZ2V0U2VsZWN0b3IoZHJvcHBhYmxlKSxcbiAgICBzdHlsZXM6IHtcbiAgICAgIGFsd2F5czogXCJvdmVyZmxvdy1hbmNob3I6IG5vbmU7XCJcbiAgICB9XG4gIH07XG4gIHZhciBib2R5ID0ge1xuICAgIHNlbGVjdG9yOiAnYm9keScsXG4gICAgc3R5bGVzOiB7XG4gICAgICBkcmFnZ2luZzogXCJcXG4gICAgICAgIGN1cnNvcjogZ3JhYmJpbmc7XFxuICAgICAgICBjdXJzb3I6IC13ZWJraXQtZ3JhYmJpbmc7XFxuICAgICAgICB1c2VyLXNlbGVjdDogbm9uZTtcXG4gICAgICAgIC13ZWJraXQtdXNlci1zZWxlY3Q6IG5vbmU7XFxuICAgICAgICAtbW96LXVzZXItc2VsZWN0OiBub25lO1xcbiAgICAgICAgLW1zLXVzZXItc2VsZWN0OiBub25lO1xcbiAgICAgICAgb3ZlcmZsb3ctYW5jaG9yOiBub25lO1xcbiAgICAgIFwiXG4gICAgfVxuICB9O1xuICB2YXIgcnVsZXMgPSBbZHJhZ2dhYmxlJDEsIGRyYWdIYW5kbGUkMSwgZHJvcHBhYmxlJDEsIGJvZHldO1xuICByZXR1cm4ge1xuICAgIGFsd2F5czogZ2V0U3R5bGVzKHJ1bGVzLCAnYWx3YXlzJyksXG4gICAgcmVzdGluZzogZ2V0U3R5bGVzKHJ1bGVzLCAncmVzdGluZycpLFxuICAgIGRyYWdnaW5nOiBnZXRTdHlsZXMocnVsZXMsICdkcmFnZ2luZycpLFxuICAgIGRyb3BBbmltYXRpbmc6IGdldFN0eWxlcyhydWxlcywgJ2Ryb3BBbmltYXRpbmcnKSxcbiAgICB1c2VyQ2FuY2VsOiBnZXRTdHlsZXMocnVsZXMsICd1c2VyQ2FuY2VsJylcbiAgfTtcbn0pO1xuXG52YXIgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gdXNlTGF5b3V0RWZmZWN0IDogdXNlRWZmZWN0O1xuXG52YXIgZ2V0SGVhZCA9IGZ1bmN0aW9uIGdldEhlYWQoKSB7XG4gIHZhciBoZWFkID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignaGVhZCcpO1xuICAhaGVhZCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0Nhbm5vdCBmaW5kIHRoZSBoZWFkIHRvIGFwcGVuZCBhIHN0eWxlIHRvJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICByZXR1cm4gaGVhZDtcbn07XG5cbnZhciBjcmVhdGVTdHlsZUVsID0gZnVuY3Rpb24gY3JlYXRlU3R5bGVFbCgpIHtcbiAgdmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcbiAgZWwudHlwZSA9ICd0ZXh0L2Nzcyc7XG4gIHJldHVybiBlbDtcbn07XG5cbmZ1bmN0aW9uIHVzZVN0eWxlTWFyc2hhbCh1bmlxdWVJZCkge1xuICB2YXIgdW5pcXVlQ29udGV4dCA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBcIlwiICsgdW5pcXVlSWQ7XG4gIH0sIFt1bmlxdWVJZF0pO1xuICB2YXIgc3R5bGVzID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGdldFN0eWxlcyQxKHVuaXF1ZUNvbnRleHQpO1xuICB9LCBbdW5pcXVlQ29udGV4dF0pO1xuICB2YXIgYWx3YXlzUmVmID0gdXNlUmVmKG51bGwpO1xuICB2YXIgZHluYW1pY1JlZiA9IHVzZVJlZihudWxsKTtcbiAgdmFyIHNldER5bmFtaWNTdHlsZSA9IHVzZUNhbGxiYWNrKG1lbW9pemVPbmUoZnVuY3Rpb24gKHByb3Bvc2VkKSB7XG4gICAgdmFyIGVsID0gZHluYW1pY1JlZi5jdXJyZW50O1xuICAgICFlbCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0Nhbm5vdCBzZXQgZHluYW1pYyBzdHlsZSBlbGVtZW50IGlmIGl0IGlzIG5vdCBzZXQnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgZWwudGV4dENvbnRlbnQgPSBwcm9wb3NlZDtcbiAgfSksIFtdKTtcbiAgdmFyIHNldEFsd2F5c1N0eWxlID0gdXNlQ2FsbGJhY2soZnVuY3Rpb24gKHByb3Bvc2VkKSB7XG4gICAgdmFyIGVsID0gYWx3YXlzUmVmLmN1cnJlbnQ7XG4gICAgIWVsID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnQ2Fubm90IHNldCBkeW5hbWljIHN0eWxlIGVsZW1lbnQgaWYgaXQgaXMgbm90IHNldCcpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICBlbC50ZXh0Q29udGVudCA9IHByb3Bvc2VkO1xuICB9LCBbXSk7XG4gIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgICEoIWFsd2F5c1JlZi5jdXJyZW50ICYmICFkeW5hbWljUmVmLmN1cnJlbnQpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnc3R5bGUgZWxlbWVudHMgYWxyZWFkeSBtb3VudGVkJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHZhciBhbHdheXMgPSBjcmVhdGVTdHlsZUVsKCk7XG4gICAgdmFyIGR5bmFtaWMgPSBjcmVhdGVTdHlsZUVsKCk7XG4gICAgYWx3YXlzUmVmLmN1cnJlbnQgPSBhbHdheXM7XG4gICAgZHluYW1pY1JlZi5jdXJyZW50ID0gZHluYW1pYztcbiAgICBhbHdheXMuc2V0QXR0cmlidXRlKHByZWZpeCArIFwiLWFsd2F5c1wiLCB1bmlxdWVDb250ZXh0KTtcbiAgICBkeW5hbWljLnNldEF0dHJpYnV0ZShwcmVmaXggKyBcIi1keW5hbWljXCIsIHVuaXF1ZUNvbnRleHQpO1xuICAgIGdldEhlYWQoKS5hcHBlbmRDaGlsZChhbHdheXMpO1xuICAgIGdldEhlYWQoKS5hcHBlbmRDaGlsZChkeW5hbWljKTtcbiAgICBzZXRBbHdheXNTdHlsZShzdHlsZXMuYWx3YXlzKTtcbiAgICBzZXREeW5hbWljU3R5bGUoc3R5bGVzLnJlc3RpbmcpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgcmVtb3ZlID0gZnVuY3Rpb24gcmVtb3ZlKHJlZikge1xuICAgICAgICB2YXIgY3VycmVudCA9IHJlZi5jdXJyZW50O1xuICAgICAgICAhY3VycmVudCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0Nhbm5vdCB1bm1vdW50IHJlZiBhcyBpdCBpcyBub3Qgc2V0JykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgICBnZXRIZWFkKCkucmVtb3ZlQ2hpbGQoY3VycmVudCk7XG4gICAgICAgIHJlZi5jdXJyZW50ID0gbnVsbDtcbiAgICAgIH07XG5cbiAgICAgIHJlbW92ZShhbHdheXNSZWYpO1xuICAgICAgcmVtb3ZlKGR5bmFtaWNSZWYpO1xuICAgIH07XG4gIH0sIFtzZXRBbHdheXNTdHlsZSwgc2V0RHluYW1pY1N0eWxlLCBzdHlsZXMuYWx3YXlzLCBzdHlsZXMucmVzdGluZywgdW5pcXVlQ29udGV4dF0pO1xuICB2YXIgZHJhZ2dpbmcgPSB1c2VDYWxsYmFjayhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHNldER5bmFtaWNTdHlsZShzdHlsZXMuZHJhZ2dpbmcpO1xuICB9LCBbc2V0RHluYW1pY1N0eWxlLCBzdHlsZXMuZHJhZ2dpbmddKTtcbiAgdmFyIGRyb3BwaW5nID0gdXNlQ2FsbGJhY2soZnVuY3Rpb24gKHJlYXNvbikge1xuICAgIGlmIChyZWFzb24gPT09ICdEUk9QJykge1xuICAgICAgc2V0RHluYW1pY1N0eWxlKHN0eWxlcy5kcm9wQW5pbWF0aW5nKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBzZXREeW5hbWljU3R5bGUoc3R5bGVzLnVzZXJDYW5jZWwpO1xuICB9LCBbc2V0RHluYW1pY1N0eWxlLCBzdHlsZXMuZHJvcEFuaW1hdGluZywgc3R5bGVzLnVzZXJDYW5jZWxdKTtcbiAgdmFyIHJlc3RpbmcgPSB1c2VDYWxsYmFjayhmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFkeW5hbWljUmVmLmN1cnJlbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBzZXREeW5hbWljU3R5bGUoc3R5bGVzLnJlc3RpbmcpO1xuICB9LCBbc2V0RHluYW1pY1N0eWxlLCBzdHlsZXMucmVzdGluZ10pO1xuICB2YXIgbWFyc2hhbCA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7XG4gICAgICBkcmFnZ2luZzogZHJhZ2dpbmcsXG4gICAgICBkcm9wcGluZzogZHJvcHBpbmcsXG4gICAgICByZXN0aW5nOiByZXN0aW5nLFxuICAgICAgc3R5bGVDb250ZXh0OiB1bmlxdWVDb250ZXh0XG4gICAgfTtcbiAgfSwgW2RyYWdnaW5nLCBkcm9wcGluZywgcmVzdGluZywgdW5pcXVlQ29udGV4dF0pO1xuICByZXR1cm4gbWFyc2hhbDtcbn1cblxudmFyIFN0b3JlQ29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQobnVsbCk7XG5cbnZhciBnZXRCb2R5RWxlbWVudCA9IChmdW5jdGlvbiAoKSB7XG4gIHZhciBib2R5ID0gZG9jdW1lbnQuYm9keTtcbiAgIWJvZHkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdDYW5ub3QgZmluZCBkb2N1bWVudC5ib2R5JykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICByZXR1cm4gYm9keTtcbn0pO1xuXG52YXIgdmlzdWFsbHlIaWRkZW4gPSB7XG4gIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICB3aWR0aDogJzFweCcsXG4gIGhlaWdodDogJzFweCcsXG4gIG1hcmdpbjogJy0xcHgnLFxuICBib3JkZXI6ICcwJyxcbiAgcGFkZGluZzogJzAnLFxuICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gIGNsaXA6ICdyZWN0KDAgMCAwIDApJyxcbiAgJ2NsaXAtcGF0aCc6ICdpbnNldCgxMDAlKSdcbn07XG52YXIgZ2V0SWQgPSBmdW5jdGlvbiBnZXRJZCh1bmlxdWVJZCkge1xuICByZXR1cm4gXCJyZWFjdC1iZWF1dGlmdWwtZG5kLWFubm91bmNlbWVudC1cIiArIHVuaXF1ZUlkO1xufTtcbmZ1bmN0aW9uIHVzZUFubm91bmNlcih1bmlxdWVJZCkge1xuICB2YXIgaWQgPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZ2V0SWQodW5pcXVlSWQpO1xuICB9LCBbdW5pcXVlSWRdKTtcbiAgdmFyIHJlZiA9IHVzZVJlZihudWxsKTtcbiAgdXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICAhIXJlZi5jdXJyZW50ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnQW5ub3VuY2VtZW50IG5vZGUgYWxyZWFkeSBtb3VudGVkJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHJlZi5jdXJyZW50ID0gZWw7XG4gICAgZWwuaWQgPSBpZDtcbiAgICBlbC5zZXRBdHRyaWJ1dGUoJ2FyaWEtbGl2ZScsICdhc3NlcnRpdmUnKTtcbiAgICBlbC5zZXRBdHRyaWJ1dGUoJ3JvbGUnLCAnbG9nJyk7XG4gICAgZWwuc2V0QXR0cmlidXRlKCdhcmlhLWF0b21pYycsICd0cnVlJyk7XG5cbiAgICBfT2JqZWN0JGFzc2lnbihlbC5zdHlsZSwgdmlzdWFsbHlIaWRkZW4pO1xuXG4gICAgZ2V0Qm9keUVsZW1lbnQoKS5hcHBlbmRDaGlsZChlbCk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciB0b0JlUmVtb3ZlZCA9IHJlZi5jdXJyZW50O1xuICAgICAgIXRvQmVSZW1vdmVkID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnQ2Fubm90IHVubW91bnQgYW5ub3VuY2VtZW50IG5vZGUnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICBnZXRCb2R5RWxlbWVudCgpLnJlbW92ZUNoaWxkKHRvQmVSZW1vdmVkKTtcbiAgICAgIHJlZi5jdXJyZW50ID0gbnVsbDtcbiAgICB9O1xuICB9LCBbaWRdKTtcbiAgdmFyIGFubm91bmNlID0gdXNlQ2FsbGJhY2soZnVuY3Rpb24gKG1lc3NhZ2UpIHtcbiAgICB2YXIgZWwgPSByZWYuY3VycmVudDtcblxuICAgIGlmIChlbCkge1xuICAgICAgZWwudGV4dENvbnRlbnQgPSBtZXNzYWdlO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoXCJcXG4gICAgICBBIHNjcmVlbiByZWFkZXIgbWVzc2FnZSB3YXMgdHJ5aW5nIHRvIGJlIGFubm91bmNlZCBidXQgaXQgd2FzIHVuYWJsZSB0byBkbyBzby5cXG4gICAgICBUaGlzIGNhbiBvY2N1ciBpZiB5b3UgdW5tb3VudCB5b3VyIDxEcmFnRHJvcENvbnRleHQgLz4gaW4geW91ciBvbkRyYWdFbmQuXFxuICAgICAgQ29uc2lkZXIgY2FsbGluZyBwcm92aWRlZC5hbm5vdW5jZSgpIGJlZm9yZSB0aGUgdW5tb3VudCBzbyB0aGF0IHRoZSBpbnN0cnVjdGlvbiB3aWxsXFxuICAgICAgbm90IGJlIGxvc3QgZm9yIHVzZXJzIHJlbHlpbmcgb24gYSBzY3JlZW4gcmVhZGVyLlxcblxcbiAgICAgIE1lc3NhZ2Ugbm90IHBhc3NlZCB0byBzY3JlZW4gcmVhZGVyOlxcblxcbiAgICAgIFxcXCJcIiArIG1lc3NhZ2UgKyBcIlxcXCJcXG4gICAgXCIpIDogdm9pZCAwO1xuICB9LCBbXSk7XG4gIHJldHVybiBhbm5vdW5jZTtcbn1cblxudmFyIEFwcENvbnRleHQgPSBSZWFjdC5jcmVhdGVDb250ZXh0KG51bGwpO1xuXG52YXIgcGVlckRlcGVuZGVuY2llcyA9IHtcblx0cmVhY3Q6IFwiXjE2LjguNVwiXG59O1xuXG52YXIgc2VtdmVyID0gLyhcXGQrKVxcLihcXGQrKVxcLihcXGQrKS87XG5cbnZhciBnZXRWZXJzaW9uID0gZnVuY3Rpb24gZ2V0VmVyc2lvbih2YWx1ZSkge1xuICB2YXIgcmVzdWx0ID0gc2VtdmVyLmV4ZWModmFsdWUpO1xuICAhKHJlc3VsdCAhPSBudWxsKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJVbmFibGUgdG8gcGFyc2UgUmVhY3QgdmVyc2lvbiBcIiArIHZhbHVlKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHZhciBtYWpvciA9IE51bWJlcihyZXN1bHRbMV0pO1xuICB2YXIgbWlub3IgPSBOdW1iZXIocmVzdWx0WzJdKTtcbiAgdmFyIHBhdGNoID0gTnVtYmVyKHJlc3VsdFszXSk7XG4gIHJldHVybiB7XG4gICAgbWFqb3I6IG1ham9yLFxuICAgIG1pbm9yOiBtaW5vcixcbiAgICBwYXRjaDogcGF0Y2gsXG4gICAgcmF3OiB2YWx1ZVxuICB9O1xufTtcblxudmFyIGlzU2F0aXNmaWVkID0gZnVuY3Rpb24gaXNTYXRpc2ZpZWQoZXhwZWN0ZWQsIGFjdHVhbCkge1xuICBpZiAoYWN0dWFsLm1ham9yID4gZXhwZWN0ZWQubWFqb3IpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGlmIChhY3R1YWwubWFqb3IgPCBleHBlY3RlZC5tYWpvcikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmIChhY3R1YWwubWlub3IgPiBleHBlY3RlZC5taW5vcikge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKGFjdHVhbC5taW5vciA8IGV4cGVjdGVkLm1pbm9yKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIGFjdHVhbC5wYXRjaCA+PSBleHBlY3RlZC5wYXRjaDtcbn07XG5cbnZhciBjaGVja1JlYWN0VmVyc2lvbiA9IChmdW5jdGlvbiAocGVlckRlcFZhbHVlLCBhY3R1YWxWYWx1ZSkge1xuICB2YXIgcGVlckRlcCA9IGdldFZlcnNpb24ocGVlckRlcFZhbHVlKTtcbiAgdmFyIGFjdHVhbCA9IGdldFZlcnNpb24oYWN0dWFsVmFsdWUpO1xuXG4gIGlmIChpc1NhdGlzZmllZChwZWVyRGVwLCBhY3R1YWwpKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhcIlxcbiAgICBSZWFjdCB2ZXJzaW9uOiBbXCIgKyBhY3R1YWwucmF3ICsgXCJdXFxuICAgIGRvZXMgbm90IHNhdGlzZnkgZXhwZWN0ZWQgcGVlciBkZXBlbmRlbmN5IHZlcnNpb246IFtcIiArIHBlZXJEZXAucmF3ICsgXCJdXFxuXFxuICAgIFRoaXMgY2FuIHJlc3VsdCBpbiBydW4gdGltZSBidWdzLCBhbmQgZXZlbiBmYXRhbCBjcmFzaGVzXFxuICBcIikgOiB2b2lkIDA7XG59KTtcblxudmFyIHN1ZmZpeCA9IFwiXFxuICBXZSBleHBlY3QgYSBodG1sNSBkb2N0eXBlOiA8IWRvY3R5cGUgaHRtbD5cXG4gIFRoaXMgaXMgdG8gZW5zdXJlIGNvbnNpc3RlbnQgYnJvd3NlciBsYXlvdXQgYW5kIG1lYXN1cmVtZW50XFxuXFxuICBNb3JlIGluZm9ybWF0aW9uOiBodHRwczovL2dpdGh1Yi5jb20vYXRsYXNzaWFuL3JlYWN0LWJlYXV0aWZ1bC1kbmQvYmxvYi9tYXN0ZXIvZG9jcy9ndWlkZXMvZG9jdHlwZS5tZFxcblwiO1xudmFyIGNoZWNrRG9jdHlwZSA9IChmdW5jdGlvbiAoZG9jKSB7XG4gIHZhciBkb2N0eXBlID0gZG9jLmRvY3R5cGU7XG5cbiAgaWYgKCFkb2N0eXBlKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhcIlxcbiAgICAgIE5vIDwhZG9jdHlwZSBodG1sPiBmb3VuZC5cXG5cXG4gICAgICBcIiArIHN1ZmZpeCArIFwiXFxuICAgIFwiKSA6IHZvaWQgMDtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoZG9jdHlwZS5uYW1lLnRvTG93ZXJDYXNlKCkgIT09ICdodG1sJykge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoXCJcXG4gICAgICBVbmV4cGVjdGVkIDwhZG9jdHlwZT4gZm91bmQ6IChcIiArIGRvY3R5cGUubmFtZSArIFwiKVxcblxcbiAgICAgIFwiICsgc3VmZml4ICsgXCJcXG4gICAgXCIpIDogdm9pZCAwO1xuICB9XG5cbiAgaWYgKGRvY3R5cGUucHVibGljSWQgIT09ICcnKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhcIlxcbiAgICAgIFVuZXhwZWN0ZWQgPCFkb2N0eXBlPiBwdWJsaWNJZCBmb3VuZDogKFwiICsgZG9jdHlwZS5wdWJsaWNJZCArIFwiKVxcbiAgICAgIEEgaHRtbDUgZG9jdHlwZSBkb2VzIG5vdCBoYXZlIGEgcHVibGljSWRcXG5cXG4gICAgICBcIiArIHN1ZmZpeCArIFwiXFxuICAgIFwiKSA6IHZvaWQgMDtcbiAgfVxufSk7XG5cbmZ1bmN0aW9uIHVzZVN0YXJ0dXBWYWxpZGF0aW9uKCkge1xuICB1c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY2hlY2tSZWFjdFZlcnNpb24ocGVlckRlcGVuZGVuY2llcy5yZWFjdCwgUmVhY3QudmVyc2lvbik7XG4gICAgY2hlY2tEb2N0eXBlKGRvY3VtZW50KTtcbiAgfSwgW10pO1xufVxuXG5mdW5jdGlvbiB1c2VQcmV2aW91cyhjdXJyZW50KSB7XG4gIHZhciByZWYgPSB1c2VSZWYoY3VycmVudCk7XG4gIHVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgcmVmLmN1cnJlbnQgPSBjdXJyZW50O1xuICB9KTtcbiAgcmV0dXJuIHJlZjtcbn1cblxudmFyIGNyZWF0ZVJlc3BvbmRlcnMgPSBmdW5jdGlvbiBjcmVhdGVSZXNwb25kZXJzKHByb3BzKSB7XG4gIHJldHVybiB7XG4gICAgb25CZWZvcmVEcmFnU3RhcnQ6IHByb3BzLm9uQmVmb3JlRHJhZ1N0YXJ0LFxuICAgIG9uRHJhZ1N0YXJ0OiBwcm9wcy5vbkRyYWdTdGFydCxcbiAgICBvbkRyYWdFbmQ6IHByb3BzLm9uRHJhZ0VuZCxcbiAgICBvbkRyYWdVcGRhdGU6IHByb3BzLm9uRHJhZ1VwZGF0ZVxuICB9O1xufTtcblxuZnVuY3Rpb24gZ2V0U3RvcmUobGF6eVJlZikge1xuICAhbGF6eVJlZi5jdXJyZW50ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnQ291bGQgbm90IGZpbmQgc3RvcmUgZnJvbSBsYXp5IHJlZicpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgcmV0dXJuIGxhenlSZWYuY3VycmVudDtcbn1cblxuZnVuY3Rpb24gQXBwKHByb3BzKSB7XG4gIHZhciB1bmlxdWVJZCA9IHByb3BzLnVuaXF1ZUlkLFxuICAgICAgc2V0T25FcnJvciA9IHByb3BzLnNldE9uRXJyb3I7XG4gIHZhciBsYXp5U3RvcmVSZWYgPSB1c2VSZWYobnVsbCk7XG4gIHVzZVN0YXJ0dXBWYWxpZGF0aW9uKCk7XG4gIHZhciBsYXN0UHJvcHNSZWYgPSB1c2VQcmV2aW91cyhwcm9wcyk7XG4gIHZhciBnZXRSZXNwb25kZXJzID0gdXNlQ2FsbGJhY2soZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBjcmVhdGVSZXNwb25kZXJzKGxhc3RQcm9wc1JlZi5jdXJyZW50KTtcbiAgfSwgW2xhc3RQcm9wc1JlZl0pO1xuICB2YXIgYW5ub3VuY2UgPSB1c2VBbm5vdW5jZXIodW5pcXVlSWQpO1xuICB2YXIgc3R5bGVNYXJzaGFsID0gdXNlU3R5bGVNYXJzaGFsKHVuaXF1ZUlkKTtcbiAgdmFyIGxhenlEaXNwYXRjaCA9IHVzZUNhbGxiYWNrKGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgICBnZXRTdG9yZShsYXp5U3RvcmVSZWYpLmRpc3BhdGNoKGFjdGlvbik7XG4gIH0sIFtdKTtcbiAgdmFyIGNhbGxiYWNrcyA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBiaW5kQWN0aW9uQ3JlYXRvcnMoe1xuICAgICAgcHVibGlzaFdoaWxlRHJhZ2dpbmc6IHB1Ymxpc2hXaGlsZURyYWdnaW5nJDEsXG4gICAgICB1cGRhdGVEcm9wcGFibGVTY3JvbGw6IHVwZGF0ZURyb3BwYWJsZVNjcm9sbCxcbiAgICAgIHVwZGF0ZURyb3BwYWJsZUlzRW5hYmxlZDogdXBkYXRlRHJvcHBhYmxlSXNFbmFibGVkLFxuICAgICAgdXBkYXRlRHJvcHBhYmxlSXNDb21iaW5lRW5hYmxlZDogdXBkYXRlRHJvcHBhYmxlSXNDb21iaW5lRW5hYmxlZCxcbiAgICAgIGNvbGxlY3Rpb25TdGFydGluZzogY29sbGVjdGlvblN0YXJ0aW5nXG4gICAgfSwgbGF6eURpc3BhdGNoKTtcbiAgfSwgW2xhenlEaXNwYXRjaF0pO1xuICB2YXIgZGltZW5zaW9uTWFyc2hhbCA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBjcmVhdGVEaW1lbnNpb25NYXJzaGFsKGNhbGxiYWNrcyk7XG4gIH0sIFtjYWxsYmFja3NdKTtcbiAgdmFyIGF1dG9TY3JvbGxlciA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBjcmVhdGVBdXRvU2Nyb2xsZXIoX2V4dGVuZHMoe1xuICAgICAgc2Nyb2xsV2luZG93OiBzY3JvbGxXaW5kb3csXG4gICAgICBzY3JvbGxEcm9wcGFibGU6IGRpbWVuc2lvbk1hcnNoYWwuc2Nyb2xsRHJvcHBhYmxlXG4gICAgfSwgYmluZEFjdGlvbkNyZWF0b3JzKHtcbiAgICAgIG1vdmU6IG1vdmVcbiAgICB9LCBsYXp5RGlzcGF0Y2gpKSk7XG4gIH0sIFtkaW1lbnNpb25NYXJzaGFsLnNjcm9sbERyb3BwYWJsZSwgbGF6eURpc3BhdGNoXSk7XG4gIHZhciBzdG9yZSA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBjcmVhdGVTdG9yZSh7XG4gICAgICBkaW1lbnNpb25NYXJzaGFsOiBkaW1lbnNpb25NYXJzaGFsLFxuICAgICAgc3R5bGVNYXJzaGFsOiBzdHlsZU1hcnNoYWwsXG4gICAgICBhbm5vdW5jZTogYW5ub3VuY2UsXG4gICAgICBhdXRvU2Nyb2xsZXI6IGF1dG9TY3JvbGxlcixcbiAgICAgIGdldFJlc3BvbmRlcnM6IGdldFJlc3BvbmRlcnNcbiAgICB9KTtcbiAgfSwgW2Fubm91bmNlLCBhdXRvU2Nyb2xsZXIsIGRpbWVuc2lvbk1hcnNoYWwsIGdldFJlc3BvbmRlcnMsIHN0eWxlTWFyc2hhbF0pO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKGxhenlTdG9yZVJlZi5jdXJyZW50ICYmIGxhenlTdG9yZVJlZi5jdXJyZW50ICE9PSBzdG9yZSkge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZygndW5leHBlY3RlZCBzdG9yZSBjaGFuZ2UnKSA6IHZvaWQgMDtcbiAgICB9XG4gIH1cblxuICBsYXp5U3RvcmVSZWYuY3VycmVudCA9IHN0b3JlO1xuICB2YXIgdHJ5UmVzZXRTdG9yZSA9IHVzZUNhbGxiYWNrKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgY3VycmVudCA9IGdldFN0b3JlKGxhenlTdG9yZVJlZik7XG4gICAgdmFyIHN0YXRlID0gY3VycmVudC5nZXRTdGF0ZSgpO1xuXG4gICAgaWYgKHN0YXRlLnBoYXNlICE9PSAnSURMRScpIHtcbiAgICAgIGN1cnJlbnQuZGlzcGF0Y2goY2xlYW4kMSh7XG4gICAgICAgIHNob3VsZEZsdXNoOiB0cnVlXG4gICAgICB9KSk7XG4gICAgfVxuICB9LCBbXSk7XG4gIHNldE9uRXJyb3IodHJ5UmVzZXRTdG9yZSk7XG4gIHZhciBnZXRDYW5MaWZ0ID0gdXNlQ2FsbGJhY2soZnVuY3Rpb24gKGlkKSB7XG4gICAgcmV0dXJuIGNhblN0YXJ0RHJhZyhnZXRTdG9yZShsYXp5U3RvcmVSZWYpLmdldFN0YXRlKCksIGlkKTtcbiAgfSwgW10pO1xuICB2YXIgZ2V0SXNNb3ZlbWVudEFsbG93ZWQgPSB1c2VDYWxsYmFjayhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGlzTW92ZW1lbnRBbGxvd2VkKGdldFN0b3JlKGxhenlTdG9yZVJlZikuZ2V0U3RhdGUoKSk7XG4gIH0sIFtdKTtcbiAgdmFyIGFwcENvbnRleHQgPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbWFyc2hhbDogZGltZW5zaW9uTWFyc2hhbCxcbiAgICAgIHN0eWxlOiBzdHlsZU1hcnNoYWwuc3R5bGVDb250ZXh0LFxuICAgICAgY2FuTGlmdDogZ2V0Q2FuTGlmdCxcbiAgICAgIGlzTW92ZW1lbnRBbGxvd2VkOiBnZXRJc01vdmVtZW50QWxsb3dlZFxuICAgIH07XG4gIH0sIFtkaW1lbnNpb25NYXJzaGFsLCBnZXRDYW5MaWZ0LCBnZXRJc01vdmVtZW50QWxsb3dlZCwgc3R5bGVNYXJzaGFsLnN0eWxlQ29udGV4dF0pO1xuICB1c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0cnlSZXNldFN0b3JlO1xuICB9LCBbdHJ5UmVzZXRTdG9yZV0pO1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChBcHBDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IGFwcENvbnRleHRcbiAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudChQcm92aWRlciwge1xuICAgIGNvbnRleHQ6IFN0b3JlQ29udGV4dCxcbiAgICBzdG9yZTogc3RvcmVcbiAgfSwgcHJvcHMuY2hpbGRyZW4pKTtcbn1cblxudmFyIGluc3RhbmNlQ291bnQgPSAwO1xuZnVuY3Rpb24gcmVzZXRTZXJ2ZXJDb250ZXh0KCkge1xuICBpbnN0YW5jZUNvdW50ID0gMDtcbn1cbmZ1bmN0aW9uIERyYWdEcm9wQ29udGV4dChwcm9wcykge1xuICB2YXIgdW5pcXVlSWQgPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gaW5zdGFuY2VDb3VudCsrO1xuICB9LCBbXSk7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KEVycm9yQm91bmRhcnksIG51bGwsIGZ1bmN0aW9uIChzZXRPbkVycm9yKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQXBwLCBfZXh0ZW5kcyh7XG4gICAgICBzZXRPbkVycm9yOiBzZXRPbkVycm9yLFxuICAgICAgdW5pcXVlSWQ6IHVuaXF1ZUlkXG4gICAgfSwgcHJvcHMpLCBwcm9wcy5jaGlsZHJlbik7XG4gIH0pO1xufVxuXG52YXIgaXNFcXVhbCQyID0gZnVuY3Rpb24gaXNFcXVhbChiYXNlKSB7XG4gIHJldHVybiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICByZXR1cm4gYmFzZSA9PT0gdmFsdWU7XG4gIH07XG59O1xuXG52YXIgaXNTY3JvbGwgPSBpc0VxdWFsJDIoJ3Njcm9sbCcpO1xudmFyIGlzQXV0byA9IGlzRXF1YWwkMignYXV0bycpO1xudmFyIGlzVmlzaWJsZSQxID0gaXNFcXVhbCQyKCd2aXNpYmxlJyk7XG5cbnZhciBpc0VpdGhlciA9IGZ1bmN0aW9uIGlzRWl0aGVyKG92ZXJmbG93LCBmbikge1xuICByZXR1cm4gZm4ob3ZlcmZsb3cub3ZlcmZsb3dYKSB8fCBmbihvdmVyZmxvdy5vdmVyZmxvd1kpO1xufTtcblxudmFyIGlzQm90aCA9IGZ1bmN0aW9uIGlzQm90aChvdmVyZmxvdywgZm4pIHtcbiAgcmV0dXJuIGZuKG92ZXJmbG93Lm92ZXJmbG93WCkgJiYgZm4ob3ZlcmZsb3cub3ZlcmZsb3dZKTtcbn07XG5cbnZhciBpc0VsZW1lbnRTY3JvbGxhYmxlID0gZnVuY3Rpb24gaXNFbGVtZW50U2Nyb2xsYWJsZShlbCkge1xuICB2YXIgc3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbCk7XG4gIHZhciBvdmVyZmxvdyA9IHtcbiAgICBvdmVyZmxvd1g6IHN0eWxlLm92ZXJmbG93WCxcbiAgICBvdmVyZmxvd1k6IHN0eWxlLm92ZXJmbG93WVxuICB9O1xuICByZXR1cm4gaXNFaXRoZXIob3ZlcmZsb3csIGlzU2Nyb2xsKSB8fCBpc0VpdGhlcihvdmVyZmxvdywgaXNBdXRvKTtcbn07XG5cbnZhciBpc0JvZHlTY3JvbGxhYmxlID0gZnVuY3Rpb24gaXNCb2R5U2Nyb2xsYWJsZSgpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIgYm9keSA9IGdldEJvZHlFbGVtZW50KCk7XG4gIHZhciBodG1sID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICAhaHRtbCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuXG4gIGlmICghaXNFbGVtZW50U2Nyb2xsYWJsZShib2R5KSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBodG1sU3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShodG1sKTtcbiAgdmFyIGh0bWxPdmVyZmxvdyA9IHtcbiAgICBvdmVyZmxvd1g6IGh0bWxTdHlsZS5vdmVyZmxvd1gsXG4gICAgb3ZlcmZsb3dZOiBodG1sU3R5bGUub3ZlcmZsb3dZXG4gIH07XG5cbiAgaWYgKGlzQm90aChodG1sT3ZlcmZsb3csIGlzVmlzaWJsZSQxKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoXCJcXG4gICAgV2UgaGF2ZSBkZXRlY3RlZCB0aGF0IHlvdXIgPGJvZHk+IGVsZW1lbnQgbWlnaHQgYmUgYSBzY3JvbGwgY29udGFpbmVyLlxcbiAgICBXZSBoYXZlIGZvdW5kIG5vIHJlbGlhYmxlIHdheSBvZiBkZXRlY3Rpbmcgd2hldGhlciB0aGUgPGJvZHk+IGVsZW1lbnQgaXMgYSBzY3JvbGwgY29udGFpbmVyLlxcbiAgICBVbmRlciBtb3N0IGNpcmN1bXN0YW5jZXMgYSA8Ym9keT4gc2Nyb2xsIGJhciB3aWxsIGJlIG9uIHRoZSA8aHRtbD4gZWxlbWVudCAoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KVxcblxcbiAgICBCZWNhdXNlIHdlIGNhbm5vdCBkZXRlcm1pbmUgaWYgdGhlIDxib2R5PiBpcyBhIHNjcm9sbCBjb250YWluZXIsIGFuZCBnZW5lcmFsbHkgaXQgaXMgbm90IG9uZSxcXG4gICAgd2Ugd2lsbCBiZSB0cmVhdGluZyB0aGUgPGJvZHk+IGFzICpub3QqIGEgc2Nyb2xsIGNvbnRhaW5lclxcblxcbiAgICBNb3JlIGluZm9ybWF0aW9uOiBodHRwczovL2dpdGh1Yi5jb20vYXRsYXNzaWFuL3JlYWN0LWJlYXV0aWZ1bC1kbmQvYmxvYi9tYXN0ZXIvZG9jcy9ndWlkZXMvaG93LXdlLWRldGVjdC1zY3JvbGwtY29udGFpbmVycy5tZFxcbiAgXCIpIDogdm9pZCAwO1xuICByZXR1cm4gZmFsc2U7XG59O1xuXG52YXIgZ2V0Q2xvc2VzdFNjcm9sbGFibGUgPSBmdW5jdGlvbiBnZXRDbG9zZXN0U2Nyb2xsYWJsZShlbCkge1xuICBpZiAoZWwgPT0gbnVsbCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgaWYgKGVsID09PSBkb2N1bWVudC5ib2R5KSB7XG4gICAgcmV0dXJuIGlzQm9keVNjcm9sbGFibGUoKSA/IGVsIDogbnVsbDtcbiAgfVxuXG4gIGlmIChlbCA9PT0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBpZiAoIWlzRWxlbWVudFNjcm9sbGFibGUoZWwpKSB7XG4gICAgcmV0dXJuIGdldENsb3Nlc3RTY3JvbGxhYmxlKGVsLnBhcmVudEVsZW1lbnQpO1xuICB9XG5cbiAgcmV0dXJuIGVsO1xufTtcblxudmFyIGNoZWNrRm9yTmVzdGVkU2Nyb2xsQ29udGFpbmVycyA9IChmdW5jdGlvbiAoc2Nyb2xsYWJsZSkge1xuICBpZiAoIXNjcm9sbGFibGUpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgYW5vdGhlclNjcm9sbFBhcmVudCA9IGdldENsb3Nlc3RTY3JvbGxhYmxlKHNjcm9sbGFibGUucGFyZW50RWxlbWVudCk7XG5cbiAgaWYgKCFhbm90aGVyU2Nyb2xsUGFyZW50KSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhcIlxcbiAgICBEcm9wcGFibGU6IHVuc3VwcG9ydGVkIG5lc3RlZCBzY3JvbGwgY29udGFpbmVyIGRldGVjdGVkLlxcbiAgICBBIERyb3BwYWJsZSBjYW4gb25seSBoYXZlIG9uZSBzY3JvbGwgcGFyZW50ICh3aGljaCBjYW4gYmUgaXRzZWxmKVxcbiAgICBOZXN0ZWQgc2Nyb2xsIGNvbnRhaW5lcnMgYXJlIGN1cnJlbnRseSBub3Qgc3VwcG9ydGVkLlxcblxcbiAgICBXZSBob3BlIHRvIHN1cHBvcnQgbmVzdGVkIHNjcm9sbCBjb250YWluZXJzIHNvb246IGh0dHBzOi8vZ2l0aHViLmNvbS9hdGxhc3NpYW4vcmVhY3QtYmVhdXRpZnVsLWRuZC9pc3N1ZXMvMTMxXFxuICBcIikgOiB2b2lkIDA7XG59KTtcblxudmFyIGdldFNjcm9sbCQxID0gKGZ1bmN0aW9uIChlbCkge1xuICByZXR1cm4ge1xuICAgIHg6IGVsLnNjcm9sbExlZnQsXG4gICAgeTogZWwuc2Nyb2xsVG9wXG4gIH07XG59KTtcblxudmFyIGdldElzRml4ZWQgPSBmdW5jdGlvbiBnZXRJc0ZpeGVkKGVsKSB7XG4gIGlmICghZWwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIgc3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbCk7XG5cbiAgaWYgKHN0eWxlLnBvc2l0aW9uID09PSAnZml4ZWQnKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICByZXR1cm4gZ2V0SXNGaXhlZChlbC5wYXJlbnRFbGVtZW50KTtcbn07XG5cbnZhciBnZXRFbnYgPSAoZnVuY3Rpb24gKHN0YXJ0KSB7XG4gIHZhciBjbG9zZXN0U2Nyb2xsYWJsZSA9IGdldENsb3Nlc3RTY3JvbGxhYmxlKHN0YXJ0KTtcbiAgdmFyIGlzRml4ZWRPblBhZ2UgPSBnZXRJc0ZpeGVkKHN0YXJ0KTtcbiAgcmV0dXJuIHtcbiAgICBjbG9zZXN0U2Nyb2xsYWJsZTogY2xvc2VzdFNjcm9sbGFibGUsXG4gICAgaXNGaXhlZE9uUGFnZTogaXNGaXhlZE9uUGFnZVxuICB9O1xufSk7XG5cbnZhciBnZXRDbGllbnQgPSBmdW5jdGlvbiBnZXRDbGllbnQodGFyZ2V0UmVmLCBjbG9zZXN0U2Nyb2xsYWJsZSkge1xuICB2YXIgYmFzZSA9IGdldEJveCh0YXJnZXRSZWYpO1xuXG4gIGlmICghY2xvc2VzdFNjcm9sbGFibGUpIHtcbiAgICByZXR1cm4gYmFzZTtcbiAgfVxuXG4gIGlmICh0YXJnZXRSZWYgIT09IGNsb3Nlc3RTY3JvbGxhYmxlKSB7XG4gICAgcmV0dXJuIGJhc2U7XG4gIH1cblxuICB2YXIgdG9wID0gYmFzZS5wYWRkaW5nQm94LnRvcCAtIGNsb3Nlc3RTY3JvbGxhYmxlLnNjcm9sbFRvcDtcbiAgdmFyIGxlZnQgPSBiYXNlLnBhZGRpbmdCb3gubGVmdCAtIGNsb3Nlc3RTY3JvbGxhYmxlLnNjcm9sbExlZnQ7XG4gIHZhciBib3R0b20gPSB0b3AgKyBjbG9zZXN0U2Nyb2xsYWJsZS5zY3JvbGxIZWlnaHQ7XG4gIHZhciByaWdodCA9IGxlZnQgKyBjbG9zZXN0U2Nyb2xsYWJsZS5zY3JvbGxXaWR0aDtcbiAgdmFyIHBhZGRpbmdCb3ggPSB7XG4gICAgdG9wOiB0b3AsXG4gICAgcmlnaHQ6IHJpZ2h0LFxuICAgIGJvdHRvbTogYm90dG9tLFxuICAgIGxlZnQ6IGxlZnRcbiAgfTtcbiAgdmFyIGJvcmRlckJveCA9IGV4cGFuZChwYWRkaW5nQm94LCBiYXNlLmJvcmRlcik7XG4gIHZhciBjbGllbnQgPSBjcmVhdGVCb3goe1xuICAgIGJvcmRlckJveDogYm9yZGVyQm94LFxuICAgIG1hcmdpbjogYmFzZS5tYXJnaW4sXG4gICAgYm9yZGVyOiBiYXNlLmJvcmRlcixcbiAgICBwYWRkaW5nOiBiYXNlLnBhZGRpbmdcbiAgfSk7XG4gIHJldHVybiBjbGllbnQ7XG59O1xuXG52YXIgZ2V0RGltZW5zaW9uID0gKGZ1bmN0aW9uIChfcmVmKSB7XG4gIHZhciByZWYgPSBfcmVmLnJlZixcbiAgICAgIGRlc2NyaXB0b3IgPSBfcmVmLmRlc2NyaXB0b3IsXG4gICAgICBlbnYgPSBfcmVmLmVudixcbiAgICAgIHdpbmRvd1Njcm9sbCA9IF9yZWYud2luZG93U2Nyb2xsLFxuICAgICAgZGlyZWN0aW9uID0gX3JlZi5kaXJlY3Rpb24sXG4gICAgICBpc0Ryb3BEaXNhYmxlZCA9IF9yZWYuaXNEcm9wRGlzYWJsZWQsXG4gICAgICBpc0NvbWJpbmVFbmFibGVkID0gX3JlZi5pc0NvbWJpbmVFbmFibGVkLFxuICAgICAgc2hvdWxkQ2xpcFN1YmplY3QgPSBfcmVmLnNob3VsZENsaXBTdWJqZWN0O1xuICB2YXIgY2xvc2VzdFNjcm9sbGFibGUgPSBlbnYuY2xvc2VzdFNjcm9sbGFibGU7XG4gIHZhciBjbGllbnQgPSBnZXRDbGllbnQocmVmLCBjbG9zZXN0U2Nyb2xsYWJsZSk7XG4gIHZhciBwYWdlID0gd2l0aFNjcm9sbChjbGllbnQsIHdpbmRvd1Njcm9sbCk7XG5cbiAgdmFyIGNsb3Nlc3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFjbG9zZXN0U2Nyb2xsYWJsZSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdmFyIGZyYW1lQ2xpZW50ID0gZ2V0Qm94KGNsb3Nlc3RTY3JvbGxhYmxlKTtcbiAgICB2YXIgc2Nyb2xsU2l6ZSA9IHtcbiAgICAgIHNjcm9sbEhlaWdodDogY2xvc2VzdFNjcm9sbGFibGUuc2Nyb2xsSGVpZ2h0LFxuICAgICAgc2Nyb2xsV2lkdGg6IGNsb3Nlc3RTY3JvbGxhYmxlLnNjcm9sbFdpZHRoXG4gICAgfTtcbiAgICByZXR1cm4ge1xuICAgICAgY2xpZW50OiBmcmFtZUNsaWVudCxcbiAgICAgIHBhZ2U6IHdpdGhTY3JvbGwoZnJhbWVDbGllbnQsIHdpbmRvd1Njcm9sbCksXG4gICAgICBzY3JvbGw6IGdldFNjcm9sbCQxKGNsb3Nlc3RTY3JvbGxhYmxlKSxcbiAgICAgIHNjcm9sbFNpemU6IHNjcm9sbFNpemUsXG4gICAgICBzaG91bGRDbGlwU3ViamVjdDogc2hvdWxkQ2xpcFN1YmplY3RcbiAgICB9O1xuICB9KCk7XG5cbiAgdmFyIGRpbWVuc2lvbiA9IGdldERyb3BwYWJsZURpbWVuc2lvbih7XG4gICAgZGVzY3JpcHRvcjogZGVzY3JpcHRvcixcbiAgICBpc0VuYWJsZWQ6ICFpc0Ryb3BEaXNhYmxlZCxcbiAgICBpc0NvbWJpbmVFbmFibGVkOiBpc0NvbWJpbmVFbmFibGVkLFxuICAgIGlzRml4ZWRPblBhZ2U6IGVudi5pc0ZpeGVkT25QYWdlLFxuICAgIGRpcmVjdGlvbjogZGlyZWN0aW9uLFxuICAgIGNsaWVudDogY2xpZW50LFxuICAgIHBhZ2U6IHBhZ2UsXG4gICAgY2xvc2VzdDogY2xvc2VzdFxuICB9KTtcbiAgcmV0dXJuIGRpbWVuc2lvbjtcbn0pO1xuXG5mdW5jdGlvbiB3aXRob3V0UGxhY2Vob2xkZXIocGxhY2Vob2xkZXIsIGZuKSB7XG4gIGlmICghcGxhY2Vob2xkZXIpIHtcbiAgICByZXR1cm4gZm4oKTtcbiAgfVxuXG4gIHZhciBsYXN0ID0gcGxhY2Vob2xkZXIuc3R5bGUuZGlzcGxheTtcbiAgcGxhY2Vob2xkZXIuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgdmFyIHJlc3VsdCA9IGZuKCk7XG4gIHBsYWNlaG9sZGVyLnN0eWxlLmRpc3BsYXkgPSBsYXN0O1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG52YXIgaW1tZWRpYXRlID0ge1xuICBwYXNzaXZlOiBmYWxzZVxufTtcbnZhciBkZWxheWVkID0ge1xuICBwYXNzaXZlOiB0cnVlXG59O1xudmFyIGdldExpc3RlbmVyT3B0aW9ucyA9IChmdW5jdGlvbiAob3B0aW9ucykge1xuICByZXR1cm4gb3B0aW9ucy5zaG91bGRQdWJsaXNoSW1tZWRpYXRlbHkgPyBpbW1lZGlhdGUgOiBkZWxheWVkO1xufSk7XG5cbmZ1bmN0aW9uIHVzZVJlcXVpcmVkQ29udGV4dChDb250ZXh0KSB7XG4gIHZhciByZXN1bHQgPSB1c2VDb250ZXh0KENvbnRleHQpO1xuICAhcmVzdWx0ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnQ291bGQgbm90IGZpbmQgcmVxdWlyZWQgY29udGV4dCcpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxudmFyIGdldENsb3Nlc3RTY3JvbGxhYmxlRnJvbURyYWcgPSBmdW5jdGlvbiBnZXRDbG9zZXN0U2Nyb2xsYWJsZUZyb21EcmFnKGRyYWdnaW5nKSB7XG4gIHJldHVybiBkcmFnZ2luZyAmJiBkcmFnZ2luZy5lbnYuY2xvc2VzdFNjcm9sbGFibGUgfHwgbnVsbDtcbn07XG5cbmZ1bmN0aW9uIHVzZURyb3BwYWJsZURpbWVuc2lvblB1Ymxpc2hlcihhcmdzKSB7XG4gIHZhciB3aGlsZURyYWdnaW5nUmVmID0gdXNlUmVmKG51bGwpO1xuICB2YXIgYXBwQ29udGV4dCA9IHVzZVJlcXVpcmVkQ29udGV4dChBcHBDb250ZXh0KTtcbiAgdmFyIG1hcnNoYWwgPSBhcHBDb250ZXh0Lm1hcnNoYWw7XG4gIHZhciBwcmV2aW91c1JlZiA9IHVzZVByZXZpb3VzKGFyZ3MpO1xuICB2YXIgZGVzY3JpcHRvciA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7XG4gICAgICBpZDogYXJncy5kcm9wcGFibGVJZCxcbiAgICAgIHR5cGU6IGFyZ3MudHlwZVxuICAgIH07XG4gIH0sIFthcmdzLmRyb3BwYWJsZUlkLCBhcmdzLnR5cGVdKTtcbiAgdmFyIHB1Ymxpc2hlZERlc2NyaXB0b3JSZWYgPSB1c2VSZWYoZGVzY3JpcHRvcik7XG4gIHZhciBtZW1vaXplZFVwZGF0ZVNjcm9sbCA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBtZW1vaXplT25lKGZ1bmN0aW9uICh4LCB5KSB7XG4gICAgICAhd2hpbGVEcmFnZ2luZ1JlZi5jdXJyZW50ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnQ2FuIG9ubHkgdXBkYXRlIHNjcm9sbCB3aGVuIGRyYWdnaW5nJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgdmFyIHNjcm9sbCA9IHtcbiAgICAgICAgeDogeCxcbiAgICAgICAgeTogeVxuICAgICAgfTtcbiAgICAgIG1hcnNoYWwudXBkYXRlRHJvcHBhYmxlU2Nyb2xsKGRlc2NyaXB0b3IuaWQsIHNjcm9sbCk7XG4gICAgfSk7XG4gIH0sIFtkZXNjcmlwdG9yLmlkLCBtYXJzaGFsXSk7XG4gIHZhciBnZXRDbG9zZXN0U2Nyb2xsID0gdXNlQ2FsbGJhY2soZnVuY3Rpb24gKCkge1xuICAgIHZhciBkcmFnZ2luZyA9IHdoaWxlRHJhZ2dpbmdSZWYuY3VycmVudDtcblxuICAgIGlmICghZHJhZ2dpbmcgfHwgIWRyYWdnaW5nLmVudi5jbG9zZXN0U2Nyb2xsYWJsZSkge1xuICAgICAgcmV0dXJuIG9yaWdpbjtcbiAgICB9XG5cbiAgICByZXR1cm4gZ2V0U2Nyb2xsJDEoZHJhZ2dpbmcuZW52LmNsb3Nlc3RTY3JvbGxhYmxlKTtcbiAgfSwgW10pO1xuICB2YXIgdXBkYXRlU2Nyb2xsID0gdXNlQ2FsbGJhY2soZnVuY3Rpb24gKCkge1xuICAgIHZhciBzY3JvbGwgPSBnZXRDbG9zZXN0U2Nyb2xsKCk7XG4gICAgbWVtb2l6ZWRVcGRhdGVTY3JvbGwoc2Nyb2xsLngsIHNjcm9sbC55KTtcbiAgfSwgW2dldENsb3Nlc3RTY3JvbGwsIG1lbW9pemVkVXBkYXRlU2Nyb2xsXSk7XG4gIHZhciBzY2hlZHVsZVNjcm9sbFVwZGF0ZSA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiByYWZTY2hkKHVwZGF0ZVNjcm9sbCk7XG4gIH0sIFt1cGRhdGVTY3JvbGxdKTtcbiAgdmFyIG9uQ2xvc2VzdFNjcm9sbCA9IHVzZUNhbGxiYWNrKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZHJhZ2dpbmcgPSB3aGlsZURyYWdnaW5nUmVmLmN1cnJlbnQ7XG4gICAgdmFyIGNsb3Nlc3QgPSBnZXRDbG9zZXN0U2Nyb2xsYWJsZUZyb21EcmFnKGRyYWdnaW5nKTtcbiAgICAhKGRyYWdnaW5nICYmIGNsb3Nlc3QpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnQ291bGQgbm90IGZpbmQgc2Nyb2xsIG9wdGlvbnMgd2hpbGUgc2Nyb2xsaW5nJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHZhciBvcHRpb25zID0gZHJhZ2dpbmcuc2Nyb2xsT3B0aW9ucztcblxuICAgIGlmIChvcHRpb25zLnNob3VsZFB1Ymxpc2hJbW1lZGlhdGVseSkge1xuICAgICAgdXBkYXRlU2Nyb2xsKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgc2NoZWR1bGVTY3JvbGxVcGRhdGUoKTtcbiAgfSwgW3NjaGVkdWxlU2Nyb2xsVXBkYXRlLCB1cGRhdGVTY3JvbGxdKTtcbiAgdmFyIGdldERpbWVuc2lvbkFuZFdhdGNoU2Nyb2xsID0gdXNlQ2FsbGJhY2soZnVuY3Rpb24gKHdpbmRvd1Njcm9sbCwgb3B0aW9ucykge1xuICAgICEhd2hpbGVEcmFnZ2luZ1JlZi5jdXJyZW50ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnQ2Fubm90IGNvbGxlY3QgYSBkcm9wcGFibGUgd2hpbGUgYSBkcmFnIGlzIG9jY3VycmluZycpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICB2YXIgcHJldmlvdXMgPSBwcmV2aW91c1JlZi5jdXJyZW50O1xuICAgIHZhciByZWYgPSBwcmV2aW91cy5nZXREcm9wcGFibGVSZWYoKTtcbiAgICAhcmVmID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnQ2Fubm90IGNvbGxlY3Qgd2l0aG91dCBhIGRyb3BwYWJsZSByZWYnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgdmFyIGVudiA9IGdldEVudihyZWYpO1xuICAgIHZhciBkcmFnZ2luZyA9IHtcbiAgICAgIHJlZjogcmVmLFxuICAgICAgZGVzY3JpcHRvcjogZGVzY3JpcHRvcixcbiAgICAgIGVudjogZW52LFxuICAgICAgc2Nyb2xsT3B0aW9uczogb3B0aW9uc1xuICAgIH07XG4gICAgd2hpbGVEcmFnZ2luZ1JlZi5jdXJyZW50ID0gZHJhZ2dpbmc7XG4gICAgdmFyIGRpbWVuc2lvbiA9IGdldERpbWVuc2lvbih7XG4gICAgICByZWY6IHJlZixcbiAgICAgIGRlc2NyaXB0b3I6IGRlc2NyaXB0b3IsXG4gICAgICBlbnY6IGVudixcbiAgICAgIHdpbmRvd1Njcm9sbDogd2luZG93U2Nyb2xsLFxuICAgICAgZGlyZWN0aW9uOiBwcmV2aW91cy5kaXJlY3Rpb24sXG4gICAgICBpc0Ryb3BEaXNhYmxlZDogcHJldmlvdXMuaXNEcm9wRGlzYWJsZWQsXG4gICAgICBpc0NvbWJpbmVFbmFibGVkOiBwcmV2aW91cy5pc0NvbWJpbmVFbmFibGVkLFxuICAgICAgc2hvdWxkQ2xpcFN1YmplY3Q6ICFwcmV2aW91cy5pZ25vcmVDb250YWluZXJDbGlwcGluZ1xuICAgIH0pO1xuXG4gICAgaWYgKGVudi5jbG9zZXN0U2Nyb2xsYWJsZSkge1xuICAgICAgZW52LmNsb3Nlc3RTY3JvbGxhYmxlLmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIG9uQ2xvc2VzdFNjcm9sbCwgZ2V0TGlzdGVuZXJPcHRpb25zKGRyYWdnaW5nLnNjcm9sbE9wdGlvbnMpKTtcblxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgY2hlY2tGb3JOZXN0ZWRTY3JvbGxDb250YWluZXJzKGVudi5jbG9zZXN0U2Nyb2xsYWJsZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGRpbWVuc2lvbjtcbiAgfSwgW2Rlc2NyaXB0b3IsIG9uQ2xvc2VzdFNjcm9sbCwgcHJldmlvdXNSZWZdKTtcbiAgdmFyIHJlY29sbGVjdCA9IHVzZUNhbGxiYWNrKGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgdmFyIGRyYWdnaW5nID0gd2hpbGVEcmFnZ2luZ1JlZi5jdXJyZW50O1xuICAgIHZhciBjbG9zZXN0ID0gZ2V0Q2xvc2VzdFNjcm9sbGFibGVGcm9tRHJhZyhkcmFnZ2luZyk7XG4gICAgIShkcmFnZ2luZyAmJiBjbG9zZXN0KSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0NhbiBvbmx5IHJlY29sbGVjdCBEcm9wcGFibGUgY2xpZW50IGZvciBEcm9wcGFibGVzIHRoYXQgaGF2ZSBhIHNjcm9sbCBjb250YWluZXInKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgdmFyIHByZXZpb3VzID0gcHJldmlvdXNSZWYuY3VycmVudDtcblxuICAgIHZhciBleGVjdXRlID0gZnVuY3Rpb24gZXhlY3V0ZSgpIHtcbiAgICAgIHJldHVybiBnZXREaW1lbnNpb24oe1xuICAgICAgICByZWY6IGRyYWdnaW5nLnJlZixcbiAgICAgICAgZGVzY3JpcHRvcjogZHJhZ2dpbmcuZGVzY3JpcHRvcixcbiAgICAgICAgZW52OiBkcmFnZ2luZy5lbnYsXG4gICAgICAgIHdpbmRvd1Njcm9sbDogb3JpZ2luLFxuICAgICAgICBkaXJlY3Rpb246IHByZXZpb3VzLmRpcmVjdGlvbixcbiAgICAgICAgaXNEcm9wRGlzYWJsZWQ6IHByZXZpb3VzLmlzRHJvcERpc2FibGVkLFxuICAgICAgICBpc0NvbWJpbmVFbmFibGVkOiBwcmV2aW91cy5pc0NvbWJpbmVFbmFibGVkLFxuICAgICAgICBzaG91bGRDbGlwU3ViamVjdDogIXByZXZpb3VzLmlnbm9yZUNvbnRhaW5lckNsaXBwaW5nXG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgaWYgKCFvcHRpb25zLndpdGhvdXRQbGFjZWhvbGRlcikge1xuICAgICAgcmV0dXJuIGV4ZWN1dGUoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gd2l0aG91dFBsYWNlaG9sZGVyKHByZXZpb3VzLmdldFBsYWNlaG9sZGVyUmVmKCksIGV4ZWN1dGUpO1xuICB9LCBbcHJldmlvdXNSZWZdKTtcbiAgdmFyIGRyYWdTdG9wcGVkID0gdXNlQ2FsbGJhY2soZnVuY3Rpb24gKCkge1xuICAgIHZhciBkcmFnZ2luZyA9IHdoaWxlRHJhZ2dpbmdSZWYuY3VycmVudDtcbiAgICAhZHJhZ2dpbmcgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdDYW5ub3Qgc3RvcCBkcmFnIHdoZW4gbm8gYWN0aXZlIGRyYWcnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgdmFyIGNsb3Nlc3QgPSBnZXRDbG9zZXN0U2Nyb2xsYWJsZUZyb21EcmFnKGRyYWdnaW5nKTtcbiAgICB3aGlsZURyYWdnaW5nUmVmLmN1cnJlbnQgPSBudWxsO1xuXG4gICAgaWYgKCFjbG9zZXN0KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgc2NoZWR1bGVTY3JvbGxVcGRhdGUuY2FuY2VsKCk7XG4gICAgY2xvc2VzdC5yZW1vdmVFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBvbkNsb3Nlc3RTY3JvbGwsIGdldExpc3RlbmVyT3B0aW9ucyhkcmFnZ2luZy5zY3JvbGxPcHRpb25zKSk7XG4gIH0sIFtvbkNsb3Nlc3RTY3JvbGwsIHNjaGVkdWxlU2Nyb2xsVXBkYXRlXSk7XG4gIHZhciBzY3JvbGwgPSB1c2VDYWxsYmFjayhmdW5jdGlvbiAoY2hhbmdlKSB7XG4gICAgdmFyIGRyYWdnaW5nID0gd2hpbGVEcmFnZ2luZ1JlZi5jdXJyZW50O1xuICAgICFkcmFnZ2luZyA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0Nhbm5vdCBzY3JvbGwgd2hlbiB0aGVyZSBpcyBubyBkcmFnJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHZhciBjbG9zZXN0ID0gZ2V0Q2xvc2VzdFNjcm9sbGFibGVGcm9tRHJhZyhkcmFnZ2luZyk7XG4gICAgIWNsb3Nlc3QgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdDYW5ub3Qgc2Nyb2xsIGEgZHJvcHBhYmxlIHdpdGggbm8gY2xvc2VzdCBzY3JvbGxhYmxlJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIGNsb3Nlc3Quc2Nyb2xsVG9wICs9IGNoYW5nZS55O1xuICAgIGNsb3Nlc3Quc2Nyb2xsTGVmdCArPSBjaGFuZ2UueDtcbiAgfSwgW10pO1xuICB2YXIgY2FsbGJhY2tzID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGdldERpbWVuc2lvbkFuZFdhdGNoU2Nyb2xsOiBnZXREaW1lbnNpb25BbmRXYXRjaFNjcm9sbCxcbiAgICAgIHJlY29sbGVjdDogcmVjb2xsZWN0LFxuICAgICAgZHJhZ1N0b3BwZWQ6IGRyYWdTdG9wcGVkLFxuICAgICAgc2Nyb2xsOiBzY3JvbGxcbiAgICB9O1xuICB9LCBbZHJhZ1N0b3BwZWQsIGdldERpbWVuc2lvbkFuZFdhdGNoU2Nyb2xsLCByZWNvbGxlY3QsIHNjcm9sbF0pO1xuICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBwdWJsaXNoZWREZXNjcmlwdG9yUmVmLmN1cnJlbnQgPSBkZXNjcmlwdG9yO1xuICAgIG1hcnNoYWwucmVnaXN0ZXJEcm9wcGFibGUoZGVzY3JpcHRvciwgY2FsbGJhY2tzKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKHdoaWxlRHJhZ2dpbmdSZWYuY3VycmVudCkge1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCdVbnN1cHBvcnRlZDogY2hhbmdpbmcgdGhlIGRyb3BwYWJsZUlkIG9yIHR5cGUgb2YgYSBEcm9wcGFibGUgZHVyaW5nIGEgZHJhZycpIDogdm9pZCAwO1xuICAgICAgICBkcmFnU3RvcHBlZCgpO1xuICAgICAgfVxuXG4gICAgICBtYXJzaGFsLnVucmVnaXN0ZXJEcm9wcGFibGUoZGVzY3JpcHRvcik7XG4gICAgfTtcbiAgfSwgW2NhbGxiYWNrcywgZGVzY3JpcHRvciwgZHJhZ1N0b3BwZWQsIG1hcnNoYWxdKTtcbiAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCF3aGlsZURyYWdnaW5nUmVmLmN1cnJlbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBtYXJzaGFsLnVwZGF0ZURyb3BwYWJsZUlzRW5hYmxlZChwdWJsaXNoZWREZXNjcmlwdG9yUmVmLmN1cnJlbnQuaWQsICFhcmdzLmlzRHJvcERpc2FibGVkKTtcbiAgfSwgW2FyZ3MuaXNEcm9wRGlzYWJsZWQsIG1hcnNoYWxdKTtcbiAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCF3aGlsZURyYWdnaW5nUmVmLmN1cnJlbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBtYXJzaGFsLnVwZGF0ZURyb3BwYWJsZUlzQ29tYmluZUVuYWJsZWQocHVibGlzaGVkRGVzY3JpcHRvclJlZi5jdXJyZW50LmlkLCBhcmdzLmlzQ29tYmluZUVuYWJsZWQpO1xuICB9LCBbYXJncy5pc0NvbWJpbmVFbmFibGVkLCBtYXJzaGFsXSk7XG59XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG52YXIgZW1wdHkgPSB7XG4gIHdpZHRoOiAwLFxuICBoZWlnaHQ6IDAsXG4gIG1hcmdpbjogbm9TcGFjaW5nXG59O1xuXG52YXIgZ2V0U2l6ZSA9IGZ1bmN0aW9uIGdldFNpemUoX3JlZikge1xuICB2YXIgaXNBbmltYXRpbmdPcGVuT25Nb3VudCA9IF9yZWYuaXNBbmltYXRpbmdPcGVuT25Nb3VudCxcbiAgICAgIHBsYWNlaG9sZGVyID0gX3JlZi5wbGFjZWhvbGRlcixcbiAgICAgIGFuaW1hdGUgPSBfcmVmLmFuaW1hdGU7XG5cbiAgaWYgKGlzQW5pbWF0aW5nT3Blbk9uTW91bnQpIHtcbiAgICByZXR1cm4gZW1wdHk7XG4gIH1cblxuICBpZiAoYW5pbWF0ZSA9PT0gJ2Nsb3NlJykge1xuICAgIHJldHVybiBlbXB0eTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgaGVpZ2h0OiBwbGFjZWhvbGRlci5jbGllbnQuYm9yZGVyQm94LmhlaWdodCxcbiAgICB3aWR0aDogcGxhY2Vob2xkZXIuY2xpZW50LmJvcmRlckJveC53aWR0aCxcbiAgICBtYXJnaW46IHBsYWNlaG9sZGVyLmNsaWVudC5tYXJnaW5cbiAgfTtcbn07XG5cbnZhciBnZXRTdHlsZSA9IGZ1bmN0aW9uIGdldFN0eWxlKF9yZWYyKSB7XG4gIHZhciBpc0FuaW1hdGluZ09wZW5Pbk1vdW50ID0gX3JlZjIuaXNBbmltYXRpbmdPcGVuT25Nb3VudCxcbiAgICAgIHBsYWNlaG9sZGVyID0gX3JlZjIucGxhY2Vob2xkZXIsXG4gICAgICBhbmltYXRlID0gX3JlZjIuYW5pbWF0ZTtcbiAgdmFyIHNpemUgPSBnZXRTaXplKHtcbiAgICBpc0FuaW1hdGluZ09wZW5Pbk1vdW50OiBpc0FuaW1hdGluZ09wZW5Pbk1vdW50LFxuICAgIHBsYWNlaG9sZGVyOiBwbGFjZWhvbGRlcixcbiAgICBhbmltYXRlOiBhbmltYXRlXG4gIH0pO1xuICByZXR1cm4ge1xuICAgIGRpc3BsYXk6IHBsYWNlaG9sZGVyLmRpc3BsYXksXG4gICAgYm94U2l6aW5nOiAnYm9yZGVyLWJveCcsXG4gICAgd2lkdGg6IHNpemUud2lkdGgsXG4gICAgaGVpZ2h0OiBzaXplLmhlaWdodCxcbiAgICBtYXJnaW5Ub3A6IHNpemUubWFyZ2luLnRvcCxcbiAgICBtYXJnaW5SaWdodDogc2l6ZS5tYXJnaW4ucmlnaHQsXG4gICAgbWFyZ2luQm90dG9tOiBzaXplLm1hcmdpbi5ib3R0b20sXG4gICAgbWFyZ2luTGVmdDogc2l6ZS5tYXJnaW4ubGVmdCxcbiAgICBmbGV4U2hyaW5rOiAnMCcsXG4gICAgZmxleEdyb3c6ICcwJyxcbiAgICBwb2ludGVyRXZlbnRzOiAnbm9uZScsXG4gICAgdHJhbnNpdGlvbjogdHJhbnNpdGlvbnMucGxhY2Vob2xkZXJcbiAgfTtcbn07XG5cbmZ1bmN0aW9uIFBsYWNlaG9sZGVyKHByb3BzKSB7XG4gIHZhciBhbmltYXRlT3BlblRpbWVyUmVmID0gdXNlUmVmKG51bGwpO1xuICB2YXIgdHJ5Q2xlYXJBbmltYXRlT3BlblRpbWVyID0gdXNlQ2FsbGJhY2soZnVuY3Rpb24gKCkge1xuICAgIGlmICghYW5pbWF0ZU9wZW5UaW1lclJlZi5jdXJyZW50KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY2xlYXJUaW1lb3V0KGFuaW1hdGVPcGVuVGltZXJSZWYuY3VycmVudCk7XG4gICAgYW5pbWF0ZU9wZW5UaW1lclJlZi5jdXJyZW50ID0gbnVsbDtcbiAgfSwgW10pO1xuICB2YXIgYW5pbWF0ZSA9IHByb3BzLmFuaW1hdGUsXG4gICAgICBvblRyYW5zaXRpb25FbmQgPSBwcm9wcy5vblRyYW5zaXRpb25FbmQsXG4gICAgICBvbkNsb3NlID0gcHJvcHMub25DbG9zZSxcbiAgICAgIHN0eWxlQ29udGV4dCA9IHByb3BzLnN0eWxlQ29udGV4dDtcblxuICB2YXIgX3VzZVN0YXRlID0gdXNlU3RhdGUocHJvcHMuYW5pbWF0ZSA9PT0gJ29wZW4nKSxcbiAgICAgIGlzQW5pbWF0aW5nT3Blbk9uTW91bnQgPSBfdXNlU3RhdGVbMF0sXG4gICAgICBzZXRJc0FuaW1hdGluZ09wZW5Pbk1vdW50ID0gX3VzZVN0YXRlWzFdO1xuXG4gIHVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFpc0FuaW1hdGluZ09wZW5Pbk1vdW50KSB7XG4gICAgICByZXR1cm4gbm9vcDtcbiAgICB9XG5cbiAgICBpZiAoYW5pbWF0ZSAhPT0gJ29wZW4nKSB7XG4gICAgICB0cnlDbGVhckFuaW1hdGVPcGVuVGltZXIoKTtcbiAgICAgIHNldElzQW5pbWF0aW5nT3Blbk9uTW91bnQoZmFsc2UpO1xuICAgICAgcmV0dXJuIG5vb3A7XG4gICAgfVxuXG4gICAgaWYgKGFuaW1hdGVPcGVuVGltZXJSZWYuY3VycmVudCkge1xuICAgICAgcmV0dXJuIG5vb3A7XG4gICAgfVxuXG4gICAgYW5pbWF0ZU9wZW5UaW1lclJlZi5jdXJyZW50ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICBhbmltYXRlT3BlblRpbWVyUmVmLmN1cnJlbnQgPSBudWxsO1xuICAgICAgc2V0SXNBbmltYXRpbmdPcGVuT25Nb3VudChmYWxzZSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHRyeUNsZWFyQW5pbWF0ZU9wZW5UaW1lcjtcbiAgfSwgW2FuaW1hdGUsIGlzQW5pbWF0aW5nT3Blbk9uTW91bnQsIHRyeUNsZWFyQW5pbWF0ZU9wZW5UaW1lcl0pO1xuICB2YXIgb25TaXplQ2hhbmdlRW5kID0gdXNlQ2FsbGJhY2soZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgaWYgKGV2ZW50LnByb3BlcnR5TmFtZSAhPT0gJ2hlaWdodCcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBvblRyYW5zaXRpb25FbmQoKTtcblxuICAgIGlmIChhbmltYXRlID09PSAnY2xvc2UnKSB7XG4gICAgICBvbkNsb3NlKCk7XG4gICAgfVxuICB9LCBbYW5pbWF0ZSwgb25DbG9zZSwgb25UcmFuc2l0aW9uRW5kXSk7XG4gIHZhciBzdHlsZSA9IGdldFN0eWxlKHtcbiAgICBpc0FuaW1hdGluZ09wZW5Pbk1vdW50OiBpc0FuaW1hdGluZ09wZW5Pbk1vdW50LFxuICAgIGFuaW1hdGU6IHByb3BzLmFuaW1hdGUsXG4gICAgcGxhY2Vob2xkZXI6IHByb3BzLnBsYWNlaG9sZGVyXG4gIH0pO1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChwcm9wcy5wbGFjZWhvbGRlci50YWdOYW1lLCB7XG4gICAgc3R5bGU6IHN0eWxlLFxuICAgICdkYXRhLXJlYWN0LWJlYXV0aWZ1bC1kbmQtcGxhY2Vob2xkZXInOiBzdHlsZUNvbnRleHQsXG4gICAgb25UcmFuc2l0aW9uRW5kOiBvblNpemVDaGFuZ2VFbmQsXG4gICAgcmVmOiBwcm9wcy5pbm5lclJlZlxuICB9KTtcbn1cblxudmFyIFBsYWNlaG9sZGVyJDEgPSBSZWFjdC5tZW1vKFBsYWNlaG9sZGVyKTtcblxudmFyIERyb3BwYWJsZUNvbnRleHQgPSBSZWFjdC5jcmVhdGVDb250ZXh0KG51bGwpO1xuXG52YXIgZ2V0V2luZG93RnJvbUVsID0gKGZ1bmN0aW9uIChlbCkge1xuICByZXR1cm4gZWwgJiYgZWwub3duZXJEb2N1bWVudCA/IGVsLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcgOiB3aW5kb3c7XG59KTtcblxuZnVuY3Rpb24gaXNIdG1sRWxlbWVudChlbCkge1xuICByZXR1cm4gZWwgaW5zdGFuY2VvZiBnZXRXaW5kb3dGcm9tRWwoZWwpLkhUTUxFbGVtZW50O1xufVxuXG5mdW5jdGlvbiBjaGVja0lzVmFsaWRJbm5lclJlZihlbCkge1xuICAhKGVsICYmIGlzSHRtbEVsZW1lbnQoZWwpKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJcXG4gICAgcHJvdmlkZWQuaW5uZXJSZWYgaGFzIG5vdCBiZWVuIHByb3ZpZGVkIHdpdGggYSBIVE1MRWxlbWVudC5cXG5cXG4gICAgWW91IGNhbiBmaW5kIGEgZ3VpZGUgb24gdXNpbmcgdGhlIGlubmVyUmVmIGNhbGxiYWNrIGZ1bmN0aW9ucyBhdDpcXG4gICAgaHR0cHM6Ly9naXRodWIuY29tL2F0bGFzc2lhbi9yZWFjdC1iZWF1dGlmdWwtZG5kL2Jsb2IvbWFzdGVyL2RvY3MvZ3VpZGVzL3VzaW5nLWlubmVyLXJlZi5tZFxcbiAgXCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbn1cblxuZnVuY3Rpb24gY2hlY2tPd25Qcm9wcyhwcm9wcykge1xuICAhcHJvcHMuZHJvcHBhYmxlSWQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdBIERyb3BwYWJsZSByZXF1aXJlcyBhIGRyb3BwYWJsZUlkIHByb3AnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICEodHlwZW9mIHByb3BzLmlzRHJvcERpc2FibGVkID09PSAnYm9vbGVhbicpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnaXNEcm9wRGlzYWJsZWQgbXVzdCBiZSBhIGJvb2xlYW4nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICEodHlwZW9mIHByb3BzLmlzQ29tYmluZUVuYWJsZWQgPT09ICdib29sZWFuJykgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdpc0NvbWJpbmVFbmFibGVkIG11c3QgYmUgYSBib29sZWFuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAhKHR5cGVvZiBwcm9wcy5pZ25vcmVDb250YWluZXJDbGlwcGluZyA9PT0gJ2Jvb2xlYW4nKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ2lnbm9yZUNvbnRhaW5lckNsaXBwaW5nIG11c3QgYmUgYSBib29sZWFuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xufVxuXG5mdW5jdGlvbiBjaGVja1BsYWNlaG9sZGVyUmVmKHByb3BzLCBwbGFjZWhvbGRlckVsKSB7XG4gIGlmICghcHJvcHMucGxhY2Vob2xkZXIpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAocGxhY2Vob2xkZXJFbCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoXCJcXG4gICAgRHJvcHBhYmxlIHNldHVwIGlzc3VlIFtkcm9wcGFibGVJZDogXFxcIlwiICsgcHJvcHMuZHJvcHBhYmxlSWQgKyBcIlxcXCJdOlxcbiAgICBEcm9wcGFibGVQcm92aWRlZCA+IHBsYWNlaG9sZGVyIGNvdWxkIG5vdCBiZSBmb3VuZC5cXG5cXG4gICAgUGxlYXNlIGJlIHN1cmUgdG8gYWRkIHRoZSB7cHJvdmlkZWQucGxhY2Vob2xkZXJ9IFJlYWN0IE5vZGUgYXMgYSBjaGlsZCBvZiB5b3VyIERyb3BwYWJsZS5cXG4gICAgTW9yZSBpbmZvcm1hdGlvbjogaHR0cHM6Ly9naXRodWIuY29tL2F0bGFzc2lhbi9yZWFjdC1iZWF1dGlmdWwtZG5kL2Jsb2IvbWFzdGVyL2RvY3MvYXBpL2Ryb3BwYWJsZS5tZFxcbiAgXCIpIDogdm9pZCAwO1xufVxuXG5mdW5jdGlvbiB1c2VWYWxpZGF0aW9uKF9yZWYpIHtcbiAgdmFyIHByb3BzID0gX3JlZi5wcm9wcyxcbiAgICAgIGdldERyb3BwYWJsZVJlZiA9IF9yZWYuZ2V0RHJvcHBhYmxlUmVmLFxuICAgICAgZ2V0UGxhY2Vob2xkZXJSZWYgPSBfcmVmLmdldFBsYWNlaG9sZGVyUmVmO1xuICB1c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBjaGVja093blByb3BzKHByb3BzKTtcbiAgICAgIGNoZWNrSXNWYWxpZElubmVyUmVmKGdldERyb3BwYWJsZVJlZigpKTtcbiAgICAgIGNoZWNrUGxhY2Vob2xkZXJSZWYocHJvcHMsIGdldFBsYWNlaG9sZGVyUmVmKCkpO1xuICAgIH1cbiAgfSk7XG59XG5cbnZhciBBbmltYXRlSW5PdXQgPSBmdW5jdGlvbiAoX1JlYWN0JFB1cmVDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoQW5pbWF0ZUluT3V0LCBfUmVhY3QkUHVyZUNvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gQW5pbWF0ZUluT3V0KCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRQdXJlQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JFB1cmVDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpIHx8IHRoaXM7XG4gICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBpc1Zpc2libGU6IEJvb2xlYW4oX3RoaXMucHJvcHMub24pLFxuICAgICAgZGF0YTogX3RoaXMucHJvcHMub24sXG4gICAgICBhbmltYXRlOiBfdGhpcy5wcm9wcy5zaG91bGRBbmltYXRlICYmIF90aGlzLnByb3BzLm9uID8gJ29wZW4nIDogJ25vbmUnXG4gICAgfTtcblxuICAgIF90aGlzLm9uQ2xvc2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoX3RoaXMuc3RhdGUuYW5pbWF0ZSAhPT0gJ2Nsb3NlJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgaXNWaXNpYmxlOiBmYWxzZVxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIEFuaW1hdGVJbk91dC5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgPSBmdW5jdGlvbiBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMocHJvcHMsIHN0YXRlKSB7XG4gICAgaWYgKCFwcm9wcy5zaG91bGRBbmltYXRlKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBpc1Zpc2libGU6IEJvb2xlYW4ocHJvcHMub24pLFxuICAgICAgICBkYXRhOiBwcm9wcy5vbixcbiAgICAgICAgYW5pbWF0ZTogJ25vbmUnXG4gICAgICB9O1xuICAgIH1cblxuICAgIGlmIChwcm9wcy5vbikge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgaXNWaXNpYmxlOiB0cnVlLFxuICAgICAgICBkYXRhOiBwcm9wcy5vbixcbiAgICAgICAgYW5pbWF0ZTogJ29wZW4nXG4gICAgICB9O1xuICAgIH1cblxuICAgIGlmIChzdGF0ZS5pc1Zpc2libGUpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGlzVmlzaWJsZTogdHJ1ZSxcbiAgICAgICAgZGF0YTogc3RhdGUuZGF0YSxcbiAgICAgICAgYW5pbWF0ZTogJ2Nsb3NlJ1xuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgaXNWaXNpYmxlOiBmYWxzZSxcbiAgICAgIGFuaW1hdGU6ICdjbG9zZScsXG4gICAgICBkYXRhOiBudWxsXG4gICAgfTtcbiAgfTtcblxuICB2YXIgX3Byb3RvID0gQW5pbWF0ZUluT3V0LnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIGlmICghdGhpcy5zdGF0ZS5pc1Zpc2libGUpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHZhciBwcm92aWRlZCA9IHtcbiAgICAgIG9uQ2xvc2U6IHRoaXMub25DbG9zZSxcbiAgICAgIGRhdGE6IHRoaXMuc3RhdGUuZGF0YSxcbiAgICAgIGFuaW1hdGU6IHRoaXMuc3RhdGUuYW5pbWF0ZVxuICAgIH07XG4gICAgcmV0dXJuIHRoaXMucHJvcHMuY2hpbGRyZW4ocHJvdmlkZWQpO1xuICB9O1xuXG4gIHJldHVybiBBbmltYXRlSW5PdXQ7XG59KFJlYWN0LlB1cmVDb21wb25lbnQpO1xuXG5mdW5jdGlvbiBEcm9wcGFibGUocHJvcHMpIHtcbiAgdmFyIGFwcENvbnRleHQgPSB1c2VDb250ZXh0KEFwcENvbnRleHQpO1xuICAhYXBwQ29udGV4dCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0NvdWxkIG5vdCBmaW5kIGFwcCBjb250ZXh0JykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICB2YXIgc3R5bGVDb250ZXh0ID0gYXBwQ29udGV4dC5zdHlsZSxcbiAgICAgIGlzTW92ZW1lbnRBbGxvd2VkID0gYXBwQ29udGV4dC5pc01vdmVtZW50QWxsb3dlZDtcbiAgdmFyIGRyb3BwYWJsZVJlZiA9IHVzZVJlZihudWxsKTtcbiAgdmFyIHBsYWNlaG9sZGVyUmVmID0gdXNlUmVmKG51bGwpO1xuICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGRyb3BwYWJsZUlkID0gcHJvcHMuZHJvcHBhYmxlSWQsXG4gICAgICB0eXBlID0gcHJvcHMudHlwZSxcbiAgICAgIGRpcmVjdGlvbiA9IHByb3BzLmRpcmVjdGlvbixcbiAgICAgIGlnbm9yZUNvbnRhaW5lckNsaXBwaW5nID0gcHJvcHMuaWdub3JlQ29udGFpbmVyQ2xpcHBpbmcsXG4gICAgICBpc0Ryb3BEaXNhYmxlZCA9IHByb3BzLmlzRHJvcERpc2FibGVkLFxuICAgICAgaXNDb21iaW5lRW5hYmxlZCA9IHByb3BzLmlzQ29tYmluZUVuYWJsZWQsXG4gICAgICBzbmFwc2hvdCA9IHByb3BzLnNuYXBzaG90LFxuICAgICAgdXBkYXRlVmlld3BvcnRNYXhTY3JvbGwgPSBwcm9wcy51cGRhdGVWaWV3cG9ydE1heFNjcm9sbDtcbiAgdmFyIGdldERyb3BwYWJsZVJlZiA9IHVzZUNhbGxiYWNrKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZHJvcHBhYmxlUmVmLmN1cnJlbnQ7XG4gIH0sIFtdKTtcbiAgdmFyIGdldFBsYWNlaG9sZGVyUmVmID0gdXNlQ2FsbGJhY2soZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBwbGFjZWhvbGRlclJlZi5jdXJyZW50O1xuICB9LCBbXSk7XG4gIHZhciBzZXREcm9wcGFibGVSZWYgPSB1c2VDYWxsYmFjayhmdW5jdGlvbiAodmFsdWUpIHtcbiAgICBkcm9wcGFibGVSZWYuY3VycmVudCA9IHZhbHVlO1xuICB9LCBbXSk7XG4gIHZhciBzZXRQbGFjZWhvbGRlclJlZiA9IHVzZUNhbGxiYWNrKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHBsYWNlaG9sZGVyUmVmLmN1cnJlbnQgPSB2YWx1ZTtcbiAgfSwgW10pO1xuICB2YXIgb25QbGFjZWhvbGRlclRyYW5zaXRpb25FbmQgPSB1c2VDYWxsYmFjayhmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGlzTW92ZW1lbnRBbGxvd2VkKCkpIHtcbiAgICAgIHVwZGF0ZVZpZXdwb3J0TWF4U2Nyb2xsKHtcbiAgICAgICAgbWF4U2Nyb2xsOiBnZXRNYXhXaW5kb3dTY3JvbGwoKVxuICAgICAgfSk7XG4gICAgfVxuICB9LCBbaXNNb3ZlbWVudEFsbG93ZWQsIHVwZGF0ZVZpZXdwb3J0TWF4U2Nyb2xsXSk7XG4gIHVzZURyb3BwYWJsZURpbWVuc2lvblB1Ymxpc2hlcih7XG4gICAgZHJvcHBhYmxlSWQ6IGRyb3BwYWJsZUlkLFxuICAgIHR5cGU6IHR5cGUsXG4gICAgZGlyZWN0aW9uOiBkaXJlY3Rpb24sXG4gICAgaXNEcm9wRGlzYWJsZWQ6IGlzRHJvcERpc2FibGVkLFxuICAgIGlzQ29tYmluZUVuYWJsZWQ6IGlzQ29tYmluZUVuYWJsZWQsXG4gICAgaWdub3JlQ29udGFpbmVyQ2xpcHBpbmc6IGlnbm9yZUNvbnRhaW5lckNsaXBwaW5nLFxuICAgIGdldERyb3BwYWJsZVJlZjogZ2V0RHJvcHBhYmxlUmVmLFxuICAgIGdldFBsYWNlaG9sZGVyUmVmOiBnZXRQbGFjZWhvbGRlclJlZlxuICB9KTtcbiAgdmFyIHBsYWNlaG9sZGVyID0gUmVhY3QuY3JlYXRlRWxlbWVudChBbmltYXRlSW5PdXQsIHtcbiAgICBvbjogcHJvcHMucGxhY2Vob2xkZXIsXG4gICAgc2hvdWxkQW5pbWF0ZTogcHJvcHMuc2hvdWxkQW5pbWF0ZVBsYWNlaG9sZGVyXG4gIH0sIGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgdmFyIG9uQ2xvc2UgPSBfcmVmLm9uQ2xvc2UsXG4gICAgICAgIGRhdGEgPSBfcmVmLmRhdGEsXG4gICAgICAgIGFuaW1hdGUgPSBfcmVmLmFuaW1hdGU7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUGxhY2Vob2xkZXIkMSwge1xuICAgICAgcGxhY2Vob2xkZXI6IGRhdGEsXG4gICAgICBvbkNsb3NlOiBvbkNsb3NlLFxuICAgICAgaW5uZXJSZWY6IHNldFBsYWNlaG9sZGVyUmVmLFxuICAgICAgYW5pbWF0ZTogYW5pbWF0ZSxcbiAgICAgIHN0eWxlQ29udGV4dDogc3R5bGVDb250ZXh0LFxuICAgICAgb25UcmFuc2l0aW9uRW5kOiBvblBsYWNlaG9sZGVyVHJhbnNpdGlvbkVuZFxuICAgIH0pO1xuICB9KTtcbiAgdmFyIHByb3ZpZGVkID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGlubmVyUmVmOiBzZXREcm9wcGFibGVSZWYsXG4gICAgICBwbGFjZWhvbGRlcjogcGxhY2Vob2xkZXIsXG4gICAgICBkcm9wcGFibGVQcm9wczoge1xuICAgICAgICAnZGF0YS1yZWFjdC1iZWF1dGlmdWwtZG5kLWRyb3BwYWJsZSc6IHN0eWxlQ29udGV4dFxuICAgICAgfVxuICAgIH07XG4gIH0sIFtwbGFjZWhvbGRlciwgc2V0RHJvcHBhYmxlUmVmLCBzdHlsZUNvbnRleHRdKTtcbiAgdmFyIGRyb3BwYWJsZUNvbnRleHQgPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZHJvcHBhYmxlSWQ6IGRyb3BwYWJsZUlkLFxuICAgICAgdHlwZTogdHlwZVxuICAgIH07XG4gIH0sIFtkcm9wcGFibGVJZCwgdHlwZV0pO1xuICB1c2VWYWxpZGF0aW9uKHtcbiAgICBwcm9wczogcHJvcHMsXG4gICAgZ2V0RHJvcHBhYmxlUmVmOiBmdW5jdGlvbiBnZXREcm9wcGFibGVSZWYoKSB7XG4gICAgICByZXR1cm4gZHJvcHBhYmxlUmVmLmN1cnJlbnQ7XG4gICAgfSxcbiAgICBnZXRQbGFjZWhvbGRlclJlZjogZnVuY3Rpb24gZ2V0UGxhY2Vob2xkZXJSZWYoKSB7XG4gICAgICByZXR1cm4gcGxhY2Vob2xkZXJSZWYuY3VycmVudDtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChEcm9wcGFibGVDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IGRyb3BwYWJsZUNvbnRleHRcbiAgfSwgY2hpbGRyZW4ocHJvdmlkZWQsIHNuYXBzaG90KSk7XG59XG5cbnZhciBpc1N0cmljdEVxdWFsID0gKGZ1bmN0aW9uIChhLCBiKSB7XG4gIHJldHVybiBhID09PSBiO1xufSk7XG5cbnZhciB3aGF0SXNEcmFnZ2VkT3ZlckZyb21SZXN1bHQgPSAoZnVuY3Rpb24gKHJlc3VsdCkge1xuICB2YXIgY29tYmluZSA9IHJlc3VsdC5jb21iaW5lLFxuICAgICAgZGVzdGluYXRpb24gPSByZXN1bHQuZGVzdGluYXRpb247XG5cbiAgaWYgKGRlc3RpbmF0aW9uKSB7XG4gICAgcmV0dXJuIGRlc3RpbmF0aW9uLmRyb3BwYWJsZUlkO1xuICB9XG5cbiAgaWYgKGNvbWJpbmUpIHtcbiAgICByZXR1cm4gY29tYmluZS5kcm9wcGFibGVJZDtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufSk7XG5cbnZhciBpc01hdGNoaW5nVHlwZSA9IGZ1bmN0aW9uIGlzTWF0Y2hpbmdUeXBlKHR5cGUsIGNyaXRpY2FsKSB7XG4gIHJldHVybiB0eXBlID09PSBjcml0aWNhbC5kcm9wcGFibGUudHlwZTtcbn07XG5cbnZhciBnZXREcmFnZ2FibGUgPSBmdW5jdGlvbiBnZXREcmFnZ2FibGUoY3JpdGljYWwsIGRpbWVuc2lvbnMpIHtcbiAgcmV0dXJuIGRpbWVuc2lvbnMuZHJhZ2dhYmxlc1tjcml0aWNhbC5kcmFnZ2FibGUuaWRdO1xufTtcblxudmFyIG1ha2VNYXBTdGF0ZVRvUHJvcHMgPSBmdW5jdGlvbiBtYWtlTWFwU3RhdGVUb1Byb3BzKCkge1xuICB2YXIgaWRsZSA9IHtcbiAgICBwbGFjZWhvbGRlcjogbnVsbCxcbiAgICBzaG91bGRBbmltYXRlUGxhY2Vob2xkZXI6IHRydWUsXG4gICAgc25hcHNob3Q6IHtcbiAgICAgIGlzRHJhZ2dpbmdPdmVyOiBmYWxzZSxcbiAgICAgIGRyYWdnaW5nT3ZlcldpdGg6IG51bGwsXG4gICAgICBkcmFnZ2luZ0Zyb21UaGlzV2l0aDogbnVsbFxuICAgIH1cbiAgfTtcblxuICB2YXIgaWRsZVdpdGhvdXRBbmltYXRpb24gPSBfZXh0ZW5kcyh7fSwgaWRsZSwge1xuICAgIHNob3VsZEFuaW1hdGVQbGFjZWhvbGRlcjogZmFsc2VcbiAgfSk7XG5cbiAgdmFyIGdldE1hcFByb3BzID0gbWVtb2l6ZU9uZShmdW5jdGlvbiAoaWQsIGlzRHJhZ2dpbmdPdmVyLCBkcmFnZ2luZywgc25hcHNob3QpIHtcbiAgICB2YXIgaXNIb21lID0gZHJhZ2dpbmcuZGVzY3JpcHRvci5kcm9wcGFibGVJZCA9PT0gaWQ7XG5cbiAgICBpZiAoaXNIb21lKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBwbGFjZWhvbGRlcjogZHJhZ2dpbmcucGxhY2Vob2xkZXIsXG4gICAgICAgIHNob3VsZEFuaW1hdGVQbGFjZWhvbGRlcjogZmFsc2UsXG4gICAgICAgIHNuYXBzaG90OiBzbmFwc2hvdFxuICAgICAgfTtcbiAgICB9XG5cbiAgICBpZiAoIWlzRHJhZ2dpbmdPdmVyKSB7XG4gICAgICByZXR1cm4gaWRsZTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgcGxhY2Vob2xkZXI6IGRyYWdnaW5nLnBsYWNlaG9sZGVyLFxuICAgICAgc2hvdWxkQW5pbWF0ZVBsYWNlaG9sZGVyOiB0cnVlLFxuICAgICAgc25hcHNob3Q6IHNuYXBzaG90XG4gICAgfTtcbiAgfSk7XG4gIHZhciBnZXRTbmFwc2hvdCA9IG1lbW9pemVPbmUoZnVuY3Rpb24gKGlkLCBpc0RyYWdnaW5nT3ZlciwgZHJhZ2dpbmcpIHtcbiAgICB2YXIgZHJhZ2dhYmxlSWQgPSBkcmFnZ2luZy5kZXNjcmlwdG9yLmlkO1xuICAgIHZhciBpc0hvbWUgPSBkcmFnZ2luZy5kZXNjcmlwdG9yLmRyb3BwYWJsZUlkID09PSBpZDtcbiAgICB2YXIgZHJhZ2dpbmdPdmVyV2l0aCA9IGlzRHJhZ2dpbmdPdmVyID8gZHJhZ2dhYmxlSWQgOiBudWxsO1xuICAgIHZhciBkcmFnZ2luZ0Zyb21UaGlzV2l0aCA9IGlzSG9tZSA/IGRyYWdnYWJsZUlkIDogbnVsbDtcbiAgICByZXR1cm4ge1xuICAgICAgaXNEcmFnZ2luZ092ZXI6IGlzRHJhZ2dpbmdPdmVyLFxuICAgICAgZHJhZ2dpbmdPdmVyV2l0aDogZHJhZ2dpbmdPdmVyV2l0aCxcbiAgICAgIGRyYWdnaW5nRnJvbVRoaXNXaXRoOiBkcmFnZ2luZ0Zyb21UaGlzV2l0aFxuICAgIH07XG4gIH0pO1xuXG4gIHZhciBzZWxlY3RvciA9IGZ1bmN0aW9uIHNlbGVjdG9yKHN0YXRlLCBvd25Qcm9wcykge1xuICAgIHZhciBpZCA9IG93blByb3BzLmRyb3BwYWJsZUlkO1xuICAgIHZhciB0eXBlID0gb3duUHJvcHMudHlwZTtcblxuICAgIGlmIChzdGF0ZS5pc0RyYWdnaW5nKSB7XG4gICAgICB2YXIgY3JpdGljYWwgPSBzdGF0ZS5jcml0aWNhbDtcblxuICAgICAgaWYgKCFpc01hdGNoaW5nVHlwZSh0eXBlLCBjcml0aWNhbCkpIHtcbiAgICAgICAgcmV0dXJuIGlkbGU7XG4gICAgICB9XG5cbiAgICAgIHZhciBkcmFnZ2luZyA9IGdldERyYWdnYWJsZShjcml0aWNhbCwgc3RhdGUuZGltZW5zaW9ucyk7XG4gICAgICB2YXIgaXNEcmFnZ2luZ092ZXIgPSB3aGF0SXNEcmFnZ2VkT3ZlcihzdGF0ZS5pbXBhY3QpID09PSBpZDtcbiAgICAgIHZhciBzbmFwc2hvdCA9IGdldFNuYXBzaG90KGlkLCBpc0RyYWdnaW5nT3ZlciwgZHJhZ2dpbmcpO1xuICAgICAgcmV0dXJuIGdldE1hcFByb3BzKGlkLCBpc0RyYWdnaW5nT3ZlciwgZHJhZ2dpbmcsIHNuYXBzaG90KTtcbiAgICB9XG5cbiAgICBpZiAoc3RhdGUucGhhc2UgPT09ICdEUk9QX0FOSU1BVElORycpIHtcbiAgICAgIHZhciBjb21wbGV0ZWQgPSBzdGF0ZS5jb21wbGV0ZWQ7XG5cbiAgICAgIGlmICghaXNNYXRjaGluZ1R5cGUodHlwZSwgY29tcGxldGVkLmNyaXRpY2FsKSkge1xuICAgICAgICByZXR1cm4gaWRsZTtcbiAgICAgIH1cblxuICAgICAgdmFyIF9kcmFnZ2luZyA9IGdldERyYWdnYWJsZShjb21wbGV0ZWQuY3JpdGljYWwsIHN0YXRlLmRpbWVuc2lvbnMpO1xuXG4gICAgICB2YXIgX3NuYXBzaG90ID0gZ2V0U25hcHNob3QoaWQsIHdoYXRJc0RyYWdnZWRPdmVyRnJvbVJlc3VsdChjb21wbGV0ZWQucmVzdWx0KSA9PT0gaWQsIF9kcmFnZ2luZyk7XG5cbiAgICAgIHJldHVybiBnZXRNYXBQcm9wcyhpZCwgd2hhdElzRHJhZ2dlZE92ZXIoY29tcGxldGVkLmltcGFjdCkgPT09IGlkLCBfZHJhZ2dpbmcsIF9zbmFwc2hvdCk7XG4gICAgfVxuXG4gICAgaWYgKHN0YXRlLnBoYXNlID09PSAnSURMRScgJiYgIXN0YXRlLmNvbXBsZXRlZCAmJiBzdGF0ZS5zaG91bGRGbHVzaCkge1xuICAgICAgcmV0dXJuIGlkbGVXaXRob3V0QW5pbWF0aW9uO1xuICAgIH1cblxuICAgIGlmIChzdGF0ZS5waGFzZSA9PT0gJ0lETEUnICYmIHN0YXRlLmNvbXBsZXRlZCkge1xuICAgICAgdmFyIF9jb21wbGV0ZWQgPSBzdGF0ZS5jb21wbGV0ZWQ7XG5cbiAgICAgIGlmICghaXNNYXRjaGluZ1R5cGUodHlwZSwgX2NvbXBsZXRlZC5jcml0aWNhbCkpIHtcbiAgICAgICAgcmV0dXJuIGlkbGU7XG4gICAgICB9XG5cbiAgICAgIHZhciB3YXNPdmVyID0gd2hhdElzRHJhZ2dlZE92ZXIoX2NvbXBsZXRlZC5pbXBhY3QpID09PSBpZDtcbiAgICAgIHZhciB3YXNDb21iaW5pbmcgPSBCb29sZWFuKF9jb21wbGV0ZWQuaW1wYWN0Lm1lcmdlKTtcblxuICAgICAgaWYgKHN0YXRlLnNob3VsZEZsdXNoKSB7XG4gICAgICAgIHJldHVybiBpZGxlV2l0aG91dEFuaW1hdGlvbjtcbiAgICAgIH1cblxuICAgICAgaWYgKHdhc092ZXIpIHtcbiAgICAgICAgcmV0dXJuIHdhc0NvbWJpbmluZyA/IGlkbGUgOiBpZGxlV2l0aG91dEFuaW1hdGlvbjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGlkbGU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGlkbGU7XG4gIH07XG5cbiAgcmV0dXJuIHNlbGVjdG9yO1xufTtcbnZhciBtYXBEaXNwYXRjaFRvUHJvcHMgPSB7XG4gIHVwZGF0ZVZpZXdwb3J0TWF4U2Nyb2xsOiB1cGRhdGVWaWV3cG9ydE1heFNjcm9sbFxufTtcbnZhciBkZWZhdWx0UHJvcHMgPSB7XG4gIHR5cGU6ICdERUZBVUxUJyxcbiAgZGlyZWN0aW9uOiAndmVydGljYWwnLFxuICBpc0Ryb3BEaXNhYmxlZDogZmFsc2UsXG4gIGlzQ29tYmluZUVuYWJsZWQ6IGZhbHNlLFxuICBpZ25vcmVDb250YWluZXJDbGlwcGluZzogZmFsc2Vcbn07XG52YXIgQ29ubmVjdGVkRHJvcHBhYmxlID0gY29ubmVjdChtYWtlTWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMsIG51bGwsIHtcbiAgY29udGV4dDogU3RvcmVDb250ZXh0LFxuICBwdXJlOiB0cnVlLFxuICBhcmVTdGF0ZVByb3BzRXF1YWw6IGlzU3RyaWN0RXF1YWxcbn0pKERyb3BwYWJsZSk7XG5Db25uZWN0ZWREcm9wcGFibGUuZGVmYXVsdFByb3BzID0gZGVmYXVsdFByb3BzO1xuXG52YXIgekluZGV4T3B0aW9ucyA9IHtcbiAgZHJhZ2dpbmc6IDUwMDAsXG4gIGRyb3BBbmltYXRpbmc6IDQ1MDBcbn07XG5cbnZhciBnZXREcmFnZ2luZ1RyYW5zaXRpb24gPSBmdW5jdGlvbiBnZXREcmFnZ2luZ1RyYW5zaXRpb24oc2hvdWxkQW5pbWF0ZURyYWdNb3ZlbWVudCwgZHJvcHBpbmcpIHtcbiAgaWYgKGRyb3BwaW5nKSB7XG4gICAgcmV0dXJuIHRyYW5zaXRpb25zLmRyb3AoZHJvcHBpbmcuZHVyYXRpb24pO1xuICB9XG5cbiAgaWYgKHNob3VsZEFuaW1hdGVEcmFnTW92ZW1lbnQpIHtcbiAgICByZXR1cm4gdHJhbnNpdGlvbnMuc25hcDtcbiAgfVxuXG4gIHJldHVybiB0cmFuc2l0aW9ucy5mbHVpZDtcbn07XG5cbnZhciBnZXREcmFnZ2luZ09wYWNpdHkgPSBmdW5jdGlvbiBnZXREcmFnZ2luZ09wYWNpdHkoaXNDb21iaW5pbmcsIGlzRHJvcEFuaW1hdGluZykge1xuICBpZiAoIWlzQ29tYmluaW5nKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZXR1cm4gaXNEcm9wQW5pbWF0aW5nID8gY29tYmluZS5vcGFjaXR5LmRyb3AgOiBjb21iaW5lLm9wYWNpdHkuY29tYmluaW5nO1xufTtcblxudmFyIGdldFNob3VsZERyYWdnaW5nQW5pbWF0ZSA9IGZ1bmN0aW9uIGdldFNob3VsZERyYWdnaW5nQW5pbWF0ZShkcmFnZ2luZykge1xuICBpZiAoZHJhZ2dpbmcuZm9yY2VTaG91bGRBbmltYXRlICE9IG51bGwpIHtcbiAgICByZXR1cm4gZHJhZ2dpbmcuZm9yY2VTaG91bGRBbmltYXRlO1xuICB9XG5cbiAgcmV0dXJuIGRyYWdnaW5nLm1vZGUgPT09ICdTTkFQJztcbn07XG5cbmZ1bmN0aW9uIGdldERyYWdnaW5nU3R5bGUoZHJhZ2dpbmcpIHtcbiAgdmFyIGRpbWVuc2lvbiA9IGRyYWdnaW5nLmRpbWVuc2lvbjtcbiAgdmFyIGJveCA9IGRpbWVuc2lvbi5jbGllbnQ7XG4gIHZhciBvZmZzZXQgPSBkcmFnZ2luZy5vZmZzZXQsXG4gICAgICBjb21iaW5lV2l0aCA9IGRyYWdnaW5nLmNvbWJpbmVXaXRoLFxuICAgICAgZHJvcHBpbmcgPSBkcmFnZ2luZy5kcm9wcGluZztcbiAgdmFyIGlzQ29tYmluaW5nID0gQm9vbGVhbihjb21iaW5lV2l0aCk7XG4gIHZhciBzaG91bGRBbmltYXRlID0gZ2V0U2hvdWxkRHJhZ2dpbmdBbmltYXRlKGRyYWdnaW5nKTtcbiAgdmFyIGlzRHJvcEFuaW1hdGluZyA9IEJvb2xlYW4oZHJvcHBpbmcpO1xuICB2YXIgdHJhbnNmb3JtID0gaXNEcm9wQW5pbWF0aW5nID8gdHJhbnNmb3Jtcy5kcm9wKG9mZnNldCwgaXNDb21iaW5pbmcpIDogdHJhbnNmb3Jtcy5tb3ZlVG8ob2Zmc2V0KTtcbiAgdmFyIHN0eWxlID0ge1xuICAgIHBvc2l0aW9uOiAnZml4ZWQnLFxuICAgIHRvcDogYm94Lm1hcmdpbkJveC50b3AsXG4gICAgbGVmdDogYm94Lm1hcmdpbkJveC5sZWZ0LFxuICAgIGJveFNpemluZzogJ2JvcmRlci1ib3gnLFxuICAgIHdpZHRoOiBib3guYm9yZGVyQm94LndpZHRoLFxuICAgIGhlaWdodDogYm94LmJvcmRlckJveC5oZWlnaHQsXG4gICAgdHJhbnNpdGlvbjogZ2V0RHJhZ2dpbmdUcmFuc2l0aW9uKHNob3VsZEFuaW1hdGUsIGRyb3BwaW5nKSxcbiAgICB0cmFuc2Zvcm06IHRyYW5zZm9ybSxcbiAgICBvcGFjaXR5OiBnZXREcmFnZ2luZ09wYWNpdHkoaXNDb21iaW5pbmcsIGlzRHJvcEFuaW1hdGluZyksXG4gICAgekluZGV4OiBpc0Ryb3BBbmltYXRpbmcgPyB6SW5kZXhPcHRpb25zLmRyb3BBbmltYXRpbmcgOiB6SW5kZXhPcHRpb25zLmRyYWdnaW5nLFxuICAgIHBvaW50ZXJFdmVudHM6ICdub25lJ1xuICB9O1xuICByZXR1cm4gc3R5bGU7XG59XG5cbmZ1bmN0aW9uIGdldFNlY29uZGFyeVN0eWxlKHNlY29uZGFyeSkge1xuICByZXR1cm4ge1xuICAgIHRyYW5zZm9ybTogdHJhbnNmb3Jtcy5tb3ZlVG8oc2Vjb25kYXJ5Lm9mZnNldCksXG4gICAgdHJhbnNpdGlvbjogc2Vjb25kYXJ5LnNob3VsZEFuaW1hdGVEaXNwbGFjZW1lbnQgPyBudWxsIDogJ25vbmUnXG4gIH07XG59XG5cbmZ1bmN0aW9uIGdldFN0eWxlJDEobWFwcGVkKSB7XG4gIHJldHVybiBtYXBwZWQudHlwZSA9PT0gJ0RSQUdHSU5HJyA/IGdldERyYWdnaW5nU3R5bGUobWFwcGVkKSA6IGdldFNlY29uZGFyeVN0eWxlKG1hcHBlZCk7XG59XG5cbnZhciBjcmVhdGVFdmVudE1hcnNoYWwgPSAoZnVuY3Rpb24gKCkge1xuICB2YXIgaXNNb3VzZURvd25IYW5kbGVkID0gZmFsc2U7XG5cbiAgdmFyIGhhbmRsZSA9IGZ1bmN0aW9uIGhhbmRsZSgpIHtcbiAgICAhIWlzTW91c2VEb3duSGFuZGxlZCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0Nhbm5vdCBoYW5kbGUgbW91c2UgZG93biBhcyBpdCBpcyBhbHJlYWR5IGhhbmRsZWQnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgaXNNb3VzZURvd25IYW5kbGVkID0gdHJ1ZTtcbiAgfTtcblxuICB2YXIgaXNIYW5kbGVkID0gZnVuY3Rpb24gaXNIYW5kbGVkKCkge1xuICAgIHJldHVybiBpc01vdXNlRG93bkhhbmRsZWQ7XG4gIH07XG5cbiAgdmFyIHJlc2V0ID0gZnVuY3Rpb24gcmVzZXQoKSB7XG4gICAgaXNNb3VzZURvd25IYW5kbGVkID0gZmFsc2U7XG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICBoYW5kbGU6IGhhbmRsZSxcbiAgICBpc0hhbmRsZWQ6IGlzSGFuZGxlZCxcbiAgICByZXNldDogcmVzZXRcbiAgfTtcbn0pO1xuXG52YXIgZ2V0T3B0aW9ucyA9IGZ1bmN0aW9uIGdldE9wdGlvbnMoc2hhcmVkLCBmcm9tQmluZGluZykge1xuICByZXR1cm4gX2V4dGVuZHMoe30sIHNoYXJlZCwgZnJvbUJpbmRpbmcpO1xufTtcblxudmFyIGJpbmRFdmVudHMgPSBmdW5jdGlvbiBiaW5kRXZlbnRzKGVsLCBiaW5kaW5ncywgc2hhcmVkT3B0aW9ucykge1xuICBiaW5kaW5ncy5mb3JFYWNoKGZ1bmN0aW9uIChiaW5kaW5nKSB7XG4gICAgdmFyIG9wdGlvbnMgPSBnZXRPcHRpb25zKHNoYXJlZE9wdGlvbnMsIGJpbmRpbmcub3B0aW9ucyk7XG4gICAgZWwuYWRkRXZlbnRMaXN0ZW5lcihiaW5kaW5nLmV2ZW50TmFtZSwgYmluZGluZy5mbiwgb3B0aW9ucyk7XG4gIH0pO1xufTtcbnZhciB1bmJpbmRFdmVudHMgPSBmdW5jdGlvbiB1bmJpbmRFdmVudHMoZWwsIGJpbmRpbmdzLCBzaGFyZWRPcHRpb25zKSB7XG4gIGJpbmRpbmdzLmZvckVhY2goZnVuY3Rpb24gKGJpbmRpbmcpIHtcbiAgICB2YXIgb3B0aW9ucyA9IGdldE9wdGlvbnMoc2hhcmVkT3B0aW9ucywgYmluZGluZy5vcHRpb25zKTtcbiAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKGJpbmRpbmcuZXZlbnROYW1lLCBiaW5kaW5nLmZuLCBvcHRpb25zKTtcbiAgfSk7XG59O1xuXG52YXIgY3JlYXRlU2NoZWR1bGVyID0gKGZ1bmN0aW9uIChjYWxsYmFja3MpIHtcbiAgdmFyIG1lbW9pemVkTW92ZSA9IG1lbW9pemVPbmUoZnVuY3Rpb24gKHgsIHkpIHtcbiAgICB2YXIgcG9pbnQgPSB7XG4gICAgICB4OiB4LFxuICAgICAgeTogeVxuICAgIH07XG4gICAgY2FsbGJhY2tzLm9uTW92ZShwb2ludCk7XG4gIH0pO1xuICB2YXIgbW92ZSA9IHJhZlNjaGQoZnVuY3Rpb24gKHBvaW50KSB7XG4gICAgcmV0dXJuIG1lbW9pemVkTW92ZShwb2ludC54LCBwb2ludC55KTtcbiAgfSk7XG4gIHZhciBtb3ZlVXAgPSByYWZTY2hkKGNhbGxiYWNrcy5vbk1vdmVVcCk7XG4gIHZhciBtb3ZlRG93biA9IHJhZlNjaGQoY2FsbGJhY2tzLm9uTW92ZURvd24pO1xuICB2YXIgbW92ZVJpZ2h0ID0gcmFmU2NoZChjYWxsYmFja3Mub25Nb3ZlUmlnaHQpO1xuICB2YXIgbW92ZUxlZnQgPSByYWZTY2hkKGNhbGxiYWNrcy5vbk1vdmVMZWZ0KTtcbiAgdmFyIHdpbmRvd1Njcm9sbE1vdmUgPSByYWZTY2hkKGNhbGxiYWNrcy5vbldpbmRvd1Njcm9sbCk7XG5cbiAgdmFyIGNhbmNlbCA9IGZ1bmN0aW9uIGNhbmNlbCgpIHtcbiAgICBtb3ZlLmNhbmNlbCgpO1xuICAgIG1vdmVVcC5jYW5jZWwoKTtcbiAgICBtb3ZlRG93bi5jYW5jZWwoKTtcbiAgICBtb3ZlUmlnaHQuY2FuY2VsKCk7XG4gICAgbW92ZUxlZnQuY2FuY2VsKCk7XG4gICAgd2luZG93U2Nyb2xsTW92ZS5jYW5jZWwoKTtcbiAgfTtcblxuICByZXR1cm4ge1xuICAgIG1vdmU6IG1vdmUsXG4gICAgbW92ZVVwOiBtb3ZlVXAsXG4gICAgbW92ZURvd246IG1vdmVEb3duLFxuICAgIG1vdmVSaWdodDogbW92ZVJpZ2h0LFxuICAgIG1vdmVMZWZ0OiBtb3ZlTGVmdCxcbiAgICB3aW5kb3dTY3JvbGxNb3ZlOiB3aW5kb3dTY3JvbGxNb3ZlLFxuICAgIGNhbmNlbDogY2FuY2VsXG4gIH07XG59KTtcblxudmFyIHRhYiA9IDk7XG52YXIgZW50ZXIgPSAxMztcbnZhciBlc2NhcGUgPSAyNztcbnZhciBzcGFjZSA9IDMyO1xudmFyIHBhZ2VVcCA9IDMzO1xudmFyIHBhZ2VEb3duID0gMzQ7XG52YXIgZW5kID0gMzU7XG52YXIgaG9tZSA9IDM2O1xudmFyIGFycm93TGVmdCA9IDM3O1xudmFyIGFycm93VXAgPSAzODtcbnZhciBhcnJvd1JpZ2h0ID0gMzk7XG52YXIgYXJyb3dEb3duID0gNDA7XG5cbnZhciBzdXBwb3J0ZWRFdmVudE5hbWUgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBiYXNlID0gJ3Zpc2liaWxpdHljaGFuZ2UnO1xuXG4gIGlmICh0eXBlb2YgZG9jdW1lbnQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIGJhc2U7XG4gIH1cblxuICB2YXIgY2FuZGlkYXRlcyA9IFtiYXNlLCBcIm1zXCIgKyBiYXNlLCBcIndlYmtpdFwiICsgYmFzZSwgXCJtb3pcIiArIGJhc2UsIFwib1wiICsgYmFzZV07XG4gIHZhciBzdXBwb3J0ZWQgPSBmaW5kKGNhbmRpZGF0ZXMsIGZ1bmN0aW9uIChldmVudE5hbWUpIHtcbiAgICByZXR1cm4gXCJvblwiICsgZXZlbnROYW1lIGluIGRvY3VtZW50O1xuICB9KTtcbiAgcmV0dXJuIHN1cHBvcnRlZCB8fCBiYXNlO1xufSgpO1xuXG52YXIgc2hhcmVkT3B0aW9ucyA9IHtcbiAgY2FwdHVyZTogdHJ1ZVxufTtcbnZhciBjcmVhdGVQb3N0RHJhZ0V2ZW50UHJldmVudGVyID0gKGZ1bmN0aW9uIChnZXRXaW5kb3cpIHtcbiAgdmFyIGlzQm91bmQgPSBmYWxzZTtcblxuICB2YXIgYmluZCA9IGZ1bmN0aW9uIGJpbmQoKSB7XG4gICAgaWYgKGlzQm91bmQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpc0JvdW5kID0gdHJ1ZTtcbiAgICBiaW5kRXZlbnRzKGdldFdpbmRvdygpLCBwb2ludGVyRXZlbnRzLCBzaGFyZWRPcHRpb25zKTtcbiAgfTtcblxuICB2YXIgdW5iaW5kID0gZnVuY3Rpb24gdW5iaW5kKCkge1xuICAgIGlmICghaXNCb3VuZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlzQm91bmQgPSBmYWxzZTtcbiAgICB1bmJpbmRFdmVudHMoZ2V0V2luZG93KCksIHBvaW50ZXJFdmVudHMsIHNoYXJlZE9wdGlvbnMpO1xuICB9O1xuXG4gIHZhciBwb2ludGVyRXZlbnRzID0gW3tcbiAgICBldmVudE5hbWU6ICdjbGljaycsXG4gICAgZm46IGZ1bmN0aW9uIGZuKGV2ZW50KSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgdW5iaW5kKCk7XG4gICAgfVxuICB9LCB7XG4gICAgZXZlbnROYW1lOiAnbW91c2Vkb3duJyxcbiAgICBmbjogdW5iaW5kXG4gIH0sIHtcbiAgICBldmVudE5hbWU6ICd0b3VjaHN0YXJ0JyxcbiAgICBmbjogdW5iaW5kXG4gIH1dO1xuXG4gIHZhciBwcmV2ZW50TmV4dCA9IGZ1bmN0aW9uIHByZXZlbnROZXh0KCkge1xuICAgIGlmIChpc0JvdW5kKSB7XG4gICAgICB1bmJpbmQoKTtcbiAgICB9XG5cbiAgICBiaW5kKCk7XG4gIH07XG5cbiAgdmFyIHByZXZlbnRlciA9IHtcbiAgICBwcmV2ZW50TmV4dDogcHJldmVudE5leHQsXG4gICAgYWJvcnQ6IHVuYmluZFxuICB9O1xuICByZXR1cm4gcHJldmVudGVyO1xufSk7XG5cbnZhciBzbG9wcHlDbGlja1RocmVzaG9sZCA9IDU7XG52YXIgaXNTbG9wcHlDbGlja1RocmVzaG9sZEV4Y2VlZGVkID0gKGZ1bmN0aW9uIChvcmlnaW5hbCwgY3VycmVudCkge1xuICByZXR1cm4gTWF0aC5hYnMoY3VycmVudC54IC0gb3JpZ2luYWwueCkgPj0gc2xvcHB5Q2xpY2tUaHJlc2hvbGQgfHwgTWF0aC5hYnMoY3VycmVudC55IC0gb3JpZ2luYWwueSkgPj0gc2xvcHB5Q2xpY2tUaHJlc2hvbGQ7XG59KTtcblxudmFyIF9wcmV2ZW50ZWRLZXlzO1xudmFyIHByZXZlbnRlZEtleXMgPSAoX3ByZXZlbnRlZEtleXMgPSB7fSwgX3ByZXZlbnRlZEtleXNbZW50ZXJdID0gdHJ1ZSwgX3ByZXZlbnRlZEtleXNbdGFiXSA9IHRydWUsIF9wcmV2ZW50ZWRLZXlzKTtcbnZhciBwcmV2ZW50U3RhbmRhcmRLZXlFdmVudHMgPSAoZnVuY3Rpb24gKGV2ZW50KSB7XG4gIGlmIChwcmV2ZW50ZWRLZXlzW2V2ZW50LmtleUNvZGVdKSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgfVxufSk7XG5cbnZhciBwcmltYXJ5QnV0dG9uID0gMDtcblxudmFyIG5vb3AkMSA9IGZ1bmN0aW9uIG5vb3AoKSB7fTtcblxudmFyIG1vdXNlRG93bk1hcnNoYWwgPSBjcmVhdGVFdmVudE1hcnNoYWwoKTtcbmZ1bmN0aW9uIHVzZU1vdXNlU2Vuc29yKGFyZ3MpIHtcbiAgdmFyIGNhblN0YXJ0Q2FwdHVyaW5nID0gYXJncy5jYW5TdGFydENhcHR1cmluZyxcbiAgICAgIGdldFdpbmRvdyA9IGFyZ3MuZ2V0V2luZG93LFxuICAgICAgY2FsbGJhY2tzID0gYXJncy5jYWxsYmFja3MsXG4gICAgICBvbkNhcHR1cmVTdGFydCA9IGFyZ3Mub25DYXB0dXJlU3RhcnQsXG4gICAgICBvbkNhcHR1cmVFbmQgPSBhcmdzLm9uQ2FwdHVyZUVuZDtcbiAgdmFyIHBlbmRpbmdSZWYgPSB1c2VSZWYobnVsbCk7XG4gIHZhciBpc0RyYWdnaW5nUmVmID0gdXNlUmVmKGZhbHNlKTtcbiAgdmFyIHVuYmluZFdpbmRvd0V2ZW50c1JlZiA9IHVzZVJlZihub29wJDEpO1xuICB2YXIgZ2V0SXNDYXB0dXJpbmcgPSB1c2VDYWxsYmFjayhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIEJvb2xlYW4ocGVuZGluZ1JlZi5jdXJyZW50IHx8IGlzRHJhZ2dpbmdSZWYuY3VycmVudCk7XG4gIH0sIFtdKTtcbiAgdmFyIHNjaGVkdWxlID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgISFnZXRJc0NhcHR1cmluZygpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnU2hvdWxkIG5vdCByZWNyZWF0ZSBzY2hlZHVsZXIgd2hpbGUgY2FwdHVyaW5nJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHJldHVybiBjcmVhdGVTY2hlZHVsZXIoY2FsbGJhY2tzKTtcbiAgfSwgW2NhbGxiYWNrcywgZ2V0SXNDYXB0dXJpbmddKTtcbiAgdmFyIHBvc3REcmFnRXZlbnRQcmV2ZW50ZXIgPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gY3JlYXRlUG9zdERyYWdFdmVudFByZXZlbnRlcihnZXRXaW5kb3cpO1xuICB9LCBbZ2V0V2luZG93XSk7XG4gIHZhciBzdG9wID0gdXNlQ2FsbGJhY2soZnVuY3Rpb24gKCkge1xuICAgIGlmICghZ2V0SXNDYXB0dXJpbmcoKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHNjaGVkdWxlLmNhbmNlbCgpO1xuICAgIHVuYmluZFdpbmRvd0V2ZW50c1JlZi5jdXJyZW50KCk7XG4gICAgdmFyIHNob3VsZEJsb2NrQ2xpY2sgPSBpc0RyYWdnaW5nUmVmLmN1cnJlbnQ7XG4gICAgbW91c2VEb3duTWFyc2hhbC5yZXNldCgpO1xuXG4gICAgaWYgKHNob3VsZEJsb2NrQ2xpY2spIHtcbiAgICAgIHBvc3REcmFnRXZlbnRQcmV2ZW50ZXIucHJldmVudE5leHQoKTtcbiAgICB9XG5cbiAgICBwZW5kaW5nUmVmLmN1cnJlbnQgPSBudWxsO1xuICAgIGlzRHJhZ2dpbmdSZWYuY3VycmVudCA9IGZhbHNlO1xuICAgIG9uQ2FwdHVyZUVuZCgpO1xuICB9LCBbZ2V0SXNDYXB0dXJpbmcsIG9uQ2FwdHVyZUVuZCwgcG9zdERyYWdFdmVudFByZXZlbnRlciwgc2NoZWR1bGVdKTtcbiAgdmFyIGNhbmNlbCA9IHVzZUNhbGxiYWNrKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgd2FzRHJhZ2dpbmcgPSBpc0RyYWdnaW5nUmVmLmN1cnJlbnQ7XG4gICAgc3RvcCgpO1xuXG4gICAgaWYgKHdhc0RyYWdnaW5nKSB7XG4gICAgICBjYWxsYmFja3Mub25DYW5jZWwoKTtcbiAgICB9XG4gIH0sIFtjYWxsYmFja3MsIHN0b3BdKTtcbiAgdmFyIHN0YXJ0RHJhZ2dpbmcgPSB1c2VDYWxsYmFjayhmdW5jdGlvbiAoKSB7XG4gICAgISFpc0RyYWdnaW5nUmVmLmN1cnJlbnQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdDYW5ub3Qgc3RhcnQgYSBkcmFnIHdoaWxlIGRyYWdnaW5nJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHZhciBwZW5kaW5nID0gcGVuZGluZ1JlZi5jdXJyZW50O1xuICAgICFwZW5kaW5nID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnQ2Fubm90IHN0YXJ0IGEgZHJhZyB3aXRob3V0IGEgcGVuZGluZyBkcmFnJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHBlbmRpbmdSZWYuY3VycmVudCA9IG51bGw7XG4gICAgaXNEcmFnZ2luZ1JlZi5jdXJyZW50ID0gdHJ1ZTtcbiAgICBjYWxsYmFja3Mub25MaWZ0KHtcbiAgICAgIGNsaWVudFNlbGVjdGlvbjogcGVuZGluZyxcbiAgICAgIG1vdmVtZW50TW9kZTogJ0ZMVUlEJ1xuICAgIH0pO1xuICB9LCBbY2FsbGJhY2tzXSk7XG4gIHZhciB3aW5kb3dCaW5kaW5ncyA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgICEhZ2V0SXNDYXB0dXJpbmcoKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ1Nob3VsZCBub3QgcmVjcmVhdGUgd2luZG93IGJpbmRpbmdzIHdoaWxlIGNhcHR1cmluZycpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICB2YXIgYmluZGluZ3MgPSBbe1xuICAgICAgZXZlbnROYW1lOiAnbW91c2Vtb3ZlJyxcbiAgICAgIGZuOiBmdW5jdGlvbiBmbihldmVudCkge1xuICAgICAgICB2YXIgYnV0dG9uID0gZXZlbnQuYnV0dG9uLFxuICAgICAgICAgICAgY2xpZW50WCA9IGV2ZW50LmNsaWVudFgsXG4gICAgICAgICAgICBjbGllbnRZID0gZXZlbnQuY2xpZW50WTtcblxuICAgICAgICBpZiAoYnV0dG9uICE9PSBwcmltYXJ5QnV0dG9uKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHBvaW50ID0ge1xuICAgICAgICAgIHg6IGNsaWVudFgsXG4gICAgICAgICAgeTogY2xpZW50WVxuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChpc0RyYWdnaW5nUmVmLmN1cnJlbnQpIHtcbiAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIHNjaGVkdWxlLm1vdmUocG9pbnQpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBwZW5kaW5nID0gcGVuZGluZ1JlZi5jdXJyZW50O1xuXG4gICAgICAgIGlmICghcGVuZGluZykge1xuICAgICAgICAgIHN0b3AoKTtcbiAgICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdFeHBlY3RlZCB0aGVyZSB0byBiZSBhbiBhY3RpdmUgb3IgcGVuZGluZyBkcmFnIHdoZW4gd2luZG93IG1vdXNlbW92ZSBldmVudCBpcyByZWNlaXZlZCcpIDogaW52YXJpYW50KGZhbHNlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghaXNTbG9wcHlDbGlja1RocmVzaG9sZEV4Y2VlZGVkKHBlbmRpbmcsIHBvaW50KSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHN0YXJ0RHJhZ2dpbmcoKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBldmVudE5hbWU6ICdtb3VzZXVwJyxcbiAgICAgIGZuOiBmdW5jdGlvbiBmbihldmVudCkge1xuICAgICAgICB2YXIgd2FzRHJhZ2dpbmcgPSBpc0RyYWdnaW5nUmVmLmN1cnJlbnQ7XG4gICAgICAgIHN0b3AoKTtcblxuICAgICAgICBpZiAod2FzRHJhZ2dpbmcpIHtcbiAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIGNhbGxiYWNrcy5vbkRyb3AoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGV2ZW50TmFtZTogJ21vdXNlZG93bicsXG4gICAgICBmbjogZnVuY3Rpb24gZm4oZXZlbnQpIHtcbiAgICAgICAgaWYgKGlzRHJhZ2dpbmdSZWYuY3VycmVudCkge1xuICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH1cblxuICAgICAgICBjYW5jZWwoKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBldmVudE5hbWU6ICdrZXlkb3duJyxcbiAgICAgIGZuOiBmdW5jdGlvbiBmbihldmVudCkge1xuICAgICAgICBpZiAocGVuZGluZ1JlZi5jdXJyZW50KSB7XG4gICAgICAgICAgc3RvcCgpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChldmVudC5rZXlDb2RlID09PSBlc2NhcGUpIHtcbiAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIGNhbmNlbCgpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHByZXZlbnRTdGFuZGFyZEtleUV2ZW50cyhldmVudCk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAgZXZlbnROYW1lOiAncmVzaXplJyxcbiAgICAgIGZuOiBjYW5jZWxcbiAgICB9LCB7XG4gICAgICBldmVudE5hbWU6ICdzY3JvbGwnLFxuICAgICAgb3B0aW9uczoge1xuICAgICAgICBwYXNzaXZlOiB0cnVlLFxuICAgICAgICBjYXB0dXJlOiBmYWxzZVxuICAgICAgfSxcbiAgICAgIGZuOiBmdW5jdGlvbiBmbihldmVudCkge1xuICAgICAgICBpZiAoZXZlbnQuY3VycmVudFRhcmdldCAhPT0gZ2V0V2luZG93KCkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocGVuZGluZ1JlZi5jdXJyZW50KSB7XG4gICAgICAgICAgc3RvcCgpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHNjaGVkdWxlLndpbmRvd1Njcm9sbE1vdmUoKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBldmVudE5hbWU6ICd3ZWJraXRtb3VzZWZvcmNlZG93bicsXG4gICAgICBmbjogZnVuY3Rpb24gZm4oKSB7XG4gICAgICAgIGNhbmNlbCgpO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGV2ZW50TmFtZTogc3VwcG9ydGVkRXZlbnROYW1lLFxuICAgICAgZm46IGNhbmNlbFxuICAgIH1dO1xuICAgIHJldHVybiBiaW5kaW5ncztcbiAgfSwgW2dldElzQ2FwdHVyaW5nLCBjYW5jZWwsIHN0YXJ0RHJhZ2dpbmcsIHNjaGVkdWxlLCBzdG9wLCBjYWxsYmFja3MsIGdldFdpbmRvd10pO1xuICB2YXIgYmluZFdpbmRvd0V2ZW50cyA9IHVzZUNhbGxiYWNrKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgd2luID0gZ2V0V2luZG93KCk7XG4gICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICBjYXB0dXJlOiB0cnVlXG4gICAgfTtcblxuICAgIHVuYmluZFdpbmRvd0V2ZW50c1JlZi5jdXJyZW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHVuYmluZEV2ZW50cyh3aW4sIHdpbmRvd0JpbmRpbmdzLCBvcHRpb25zKTtcbiAgICB9O1xuXG4gICAgYmluZEV2ZW50cyh3aW4sIHdpbmRvd0JpbmRpbmdzLCBvcHRpb25zKTtcbiAgfSwgW2dldFdpbmRvdywgd2luZG93QmluZGluZ3NdKTtcbiAgdmFyIHN0YXJ0UGVuZGluZ0RyYWcgPSB1c2VDYWxsYmFjayhmdW5jdGlvbiAocG9pbnQpIHtcbiAgICAhIXBlbmRpbmdSZWYuY3VycmVudCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0V4cGVjdGVkIHRoZXJlIHRvIGJlIG5vIHBlbmRpbmcgZHJhZycpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICBwZW5kaW5nUmVmLmN1cnJlbnQgPSBwb2ludDtcbiAgICBvbkNhcHR1cmVTdGFydChzdG9wKTtcbiAgICBiaW5kV2luZG93RXZlbnRzKCk7XG4gIH0sIFtiaW5kV2luZG93RXZlbnRzLCBvbkNhcHR1cmVTdGFydCwgc3RvcF0pO1xuICB2YXIgb25Nb3VzZURvd24gPSB1c2VDYWxsYmFjayhmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICBpZiAobW91c2VEb3duTWFyc2hhbC5pc0hhbmRsZWQoKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgICEhZ2V0SXNDYXB0dXJpbmcoKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ1Nob3VsZCBub3QgYmUgYWJsZSB0byBwZXJmb3JtIGEgbW91c2UgZG93biB3aGlsZSBhIGRyYWcgb3IgcGVuZGluZyBkcmFnIGlzIG9jY3VycmluZycpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcblxuICAgIGlmICghY2FuU3RhcnRDYXB0dXJpbmcoZXZlbnQpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGV2ZW50LmJ1dHRvbiAhPT0gcHJpbWFyeUJ1dHRvbikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChldmVudC5jdHJsS2V5IHx8IGV2ZW50Lm1ldGFLZXkgfHwgZXZlbnQuc2hpZnRLZXkgfHwgZXZlbnQuYWx0S2V5KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbW91c2VEb3duTWFyc2hhbC5oYW5kbGUoKTtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIHZhciBwb2ludCA9IHtcbiAgICAgIHg6IGV2ZW50LmNsaWVudFgsXG4gICAgICB5OiBldmVudC5jbGllbnRZXG4gICAgfTtcbiAgICBzdGFydFBlbmRpbmdEcmFnKHBvaW50KTtcbiAgfSwgW2NhblN0YXJ0Q2FwdHVyaW5nLCBnZXRJc0NhcHR1cmluZywgc3RhcnRQZW5kaW5nRHJhZ10pO1xuICByZXR1cm4gb25Nb3VzZURvd247XG59XG5cbmZ1bmN0aW9uIGlzRWxlbWVudChlbCkge1xuICByZXR1cm4gZWwgaW5zdGFuY2VvZiBnZXRXaW5kb3dGcm9tRWwoZWwpLkVsZW1lbnQ7XG59XG5cbnZhciBpbnRlcmFjdGl2ZVRhZ05hbWVzID0ge1xuICBpbnB1dDogdHJ1ZSxcbiAgYnV0dG9uOiB0cnVlLFxuICB0ZXh0YXJlYTogdHJ1ZSxcbiAgc2VsZWN0OiB0cnVlLFxuICBvcHRpb246IHRydWUsXG4gIG9wdGdyb3VwOiB0cnVlLFxuICB2aWRlbzogdHJ1ZSxcbiAgYXVkaW86IHRydWVcbn07XG5cbnZhciBpc0FuSW50ZXJhY3RpdmVFbGVtZW50ID0gZnVuY3Rpb24gaXNBbkludGVyYWN0aXZlRWxlbWVudChwYXJlbnQsIGN1cnJlbnQpIHtcbiAgaWYgKGN1cnJlbnQgPT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBoYXNBbkludGVyYWN0aXZlVGFnID0gQm9vbGVhbihpbnRlcmFjdGl2ZVRhZ05hbWVzW2N1cnJlbnQudGFnTmFtZS50b0xvd2VyQ2FzZSgpXSk7XG5cbiAgaWYgKGhhc0FuSW50ZXJhY3RpdmVUYWcpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHZhciBhdHRyaWJ1dGUgPSBjdXJyZW50LmdldEF0dHJpYnV0ZSgnY29udGVudGVkaXRhYmxlJyk7XG5cbiAgaWYgKGF0dHJpYnV0ZSA9PT0gJ3RydWUnIHx8IGF0dHJpYnV0ZSA9PT0gJycpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGlmIChjdXJyZW50ID09PSBwYXJlbnQpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gaXNBbkludGVyYWN0aXZlRWxlbWVudChwYXJlbnQsIGN1cnJlbnQucGFyZW50RWxlbWVudCk7XG59O1xuXG52YXIgc2hvdWxkQWxsb3dEcmFnZ2luZ0Zyb21UYXJnZXQgPSAoZnVuY3Rpb24gKGV2ZW50LCBjYW5EcmFnSW50ZXJhY3RpdmVFbGVtZW50cykge1xuICBpZiAoY2FuRHJhZ0ludGVyYWN0aXZlRWxlbWVudHMpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHZhciB0YXJnZXQgPSBldmVudC50YXJnZXQsXG4gICAgICBjdXJyZW50VGFyZ2V0ID0gZXZlbnQuY3VycmVudFRhcmdldDtcblxuICBpZiAoIWlzRWxlbWVudCh0YXJnZXQpIHx8ICFpc0VsZW1lbnQoY3VycmVudFRhcmdldCkpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiAhaXNBbkludGVyYWN0aXZlRWxlbWVudChjdXJyZW50VGFyZ2V0LCB0YXJnZXQpO1xufSk7XG5cbnZhciBnZXRCb3JkZXJCb3hDZW50ZXJQb3NpdGlvbiA9IChmdW5jdGlvbiAoZWwpIHtcbiAgcmV0dXJuIGdldFJlY3QoZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkpLmNlbnRlcjtcbn0pO1xuXG52YXIgX3Njcm9sbEp1bXBLZXlzO1xudmFyIHNjcm9sbEp1bXBLZXlzID0gKF9zY3JvbGxKdW1wS2V5cyA9IHt9LCBfc2Nyb2xsSnVtcEtleXNbcGFnZURvd25dID0gdHJ1ZSwgX3Njcm9sbEp1bXBLZXlzW3BhZ2VVcF0gPSB0cnVlLCBfc2Nyb2xsSnVtcEtleXNbaG9tZV0gPSB0cnVlLCBfc2Nyb2xsSnVtcEtleXNbZW5kXSA9IHRydWUsIF9zY3JvbGxKdW1wS2V5cyk7XG5cbmZ1bmN0aW9uIG5vb3AkMigpIHt9XG5cbmZ1bmN0aW9uIHVzZUtleWJvYXJkU2Vuc29yKGFyZ3MpIHtcbiAgdmFyIGNhblN0YXJ0Q2FwdHVyaW5nID0gYXJncy5jYW5TdGFydENhcHR1cmluZyxcbiAgICAgIGdldFdpbmRvdyA9IGFyZ3MuZ2V0V2luZG93LFxuICAgICAgY2FsbGJhY2tzID0gYXJncy5jYWxsYmFja3MsXG4gICAgICBvbkNhcHR1cmVTdGFydCA9IGFyZ3Mub25DYXB0dXJlU3RhcnQsXG4gICAgICBvbkNhcHR1cmVFbmQgPSBhcmdzLm9uQ2FwdHVyZUVuZCxcbiAgICAgIGdldERyYWdnYWJsZVJlZiA9IGFyZ3MuZ2V0RHJhZ2dhYmxlUmVmO1xuICB2YXIgaXNEcmFnZ2luZ1JlZiA9IHVzZVJlZihmYWxzZSk7XG4gIHZhciB1bmJpbmRXaW5kb3dFdmVudHNSZWYgPSB1c2VSZWYobm9vcCQyKTtcbiAgdmFyIGdldElzRHJhZ2dpbmcgPSB1c2VDYWxsYmFjayhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGlzRHJhZ2dpbmdSZWYuY3VycmVudDtcbiAgfSwgW10pO1xuICB2YXIgc2NoZWR1bGUgPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICAhIWdldElzRHJhZ2dpbmcoKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ1Nob3VsZCBub3QgcmVjcmVhdGUgc2NoZWR1bGVyIHdoaWxlIGNhcHR1cmluZycpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICByZXR1cm4gY3JlYXRlU2NoZWR1bGVyKGNhbGxiYWNrcyk7XG4gIH0sIFtjYWxsYmFja3MsIGdldElzRHJhZ2dpbmddKTtcbiAgdmFyIHN0b3AgPSB1c2VDYWxsYmFjayhmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFnZXRJc0RyYWdnaW5nKCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBzY2hlZHVsZS5jYW5jZWwoKTtcbiAgICB1bmJpbmRXaW5kb3dFdmVudHNSZWYuY3VycmVudCgpO1xuICAgIGlzRHJhZ2dpbmdSZWYuY3VycmVudCA9IGZhbHNlO1xuICAgIG9uQ2FwdHVyZUVuZCgpO1xuICB9LCBbZ2V0SXNEcmFnZ2luZywgb25DYXB0dXJlRW5kLCBzY2hlZHVsZV0pO1xuICB2YXIgY2FuY2VsID0gdXNlQ2FsbGJhY2soZnVuY3Rpb24gKCkge1xuICAgIHZhciB3YXNEcmFnZ2luZyA9IGlzRHJhZ2dpbmdSZWYuY3VycmVudDtcbiAgICBzdG9wKCk7XG5cbiAgICBpZiAod2FzRHJhZ2dpbmcpIHtcbiAgICAgIGNhbGxiYWNrcy5vbkNhbmNlbCgpO1xuICAgIH1cbiAgfSwgW2NhbGxiYWNrcywgc3RvcF0pO1xuICB2YXIgd2luZG93QmluZGluZ3MgPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICAhIWdldElzRHJhZ2dpbmcoKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ1Nob3VsZCBub3QgcmVjcmVhdGUgd2luZG93IGJpbmRpbmdzIHdoZW4gZHJhZ2dpbmcnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgcmV0dXJuIFt7XG4gICAgICBldmVudE5hbWU6ICdtb3VzZWRvd24nLFxuICAgICAgZm46IGNhbmNlbFxuICAgIH0sIHtcbiAgICAgIGV2ZW50TmFtZTogJ21vdXNldXAnLFxuICAgICAgZm46IGNhbmNlbFxuICAgIH0sIHtcbiAgICAgIGV2ZW50TmFtZTogJ2NsaWNrJyxcbiAgICAgIGZuOiBjYW5jZWxcbiAgICB9LCB7XG4gICAgICBldmVudE5hbWU6ICd0b3VjaHN0YXJ0JyxcbiAgICAgIGZuOiBjYW5jZWxcbiAgICB9LCB7XG4gICAgICBldmVudE5hbWU6ICdyZXNpemUnLFxuICAgICAgZm46IGNhbmNlbFxuICAgIH0sIHtcbiAgICAgIGV2ZW50TmFtZTogJ3doZWVsJyxcbiAgICAgIGZuOiBjYW5jZWwsXG4gICAgICBvcHRpb25zOiB7XG4gICAgICAgIHBhc3NpdmU6IHRydWVcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBldmVudE5hbWU6ICdzY3JvbGwnLFxuICAgICAgb3B0aW9uczoge1xuICAgICAgICBjYXB0dXJlOiBmYWxzZVxuICAgICAgfSxcbiAgICAgIGZuOiBmdW5jdGlvbiBmbihldmVudCkge1xuICAgICAgICBpZiAoZXZlbnQuY3VycmVudFRhcmdldCAhPT0gZ2V0V2luZG93KCkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjYWxsYmFja3Mub25XaW5kb3dTY3JvbGwoKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBldmVudE5hbWU6IHN1cHBvcnRlZEV2ZW50TmFtZSxcbiAgICAgIGZuOiBjYW5jZWxcbiAgICB9XTtcbiAgfSwgW2NhbGxiYWNrcywgY2FuY2VsLCBnZXRJc0RyYWdnaW5nLCBnZXRXaW5kb3ddKTtcbiAgdmFyIGJpbmRXaW5kb3dFdmVudHMgPSB1c2VDYWxsYmFjayhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHdpbiA9IGdldFdpbmRvdygpO1xuICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgY2FwdHVyZTogdHJ1ZVxuICAgIH07XG5cbiAgICB1bmJpbmRXaW5kb3dFdmVudHNSZWYuY3VycmVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB1bmJpbmRFdmVudHMod2luLCB3aW5kb3dCaW5kaW5ncywgb3B0aW9ucyk7XG4gICAgfTtcblxuICAgIGJpbmRFdmVudHMod2luLCB3aW5kb3dCaW5kaW5ncywgb3B0aW9ucyk7XG4gIH0sIFtnZXRXaW5kb3csIHdpbmRvd0JpbmRpbmdzXSk7XG4gIHZhciBzdGFydERyYWdnaW5nID0gdXNlQ2FsbGJhY2soZnVuY3Rpb24gKCkge1xuICAgICEhaXNEcmFnZ2luZ1JlZi5jdXJyZW50ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnQ2Fubm90IHN0YXJ0IGEgZHJhZyB3aGlsZSBkcmFnZ2luZycpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICB2YXIgcmVmID0gZ2V0RHJhZ2dhYmxlUmVmKCk7XG4gICAgIXJlZiA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0Nhbm5vdCBzdGFydCBhIGtleWJvYXJkIGRyYWcgd2l0aG91dCBhIGRyYWdnYWJsZSByZWYnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgaXNEcmFnZ2luZ1JlZi5jdXJyZW50ID0gdHJ1ZTtcbiAgICBvbkNhcHR1cmVTdGFydChzdG9wKTtcbiAgICBiaW5kV2luZG93RXZlbnRzKCk7XG4gICAgdmFyIGNlbnRlciA9IGdldEJvcmRlckJveENlbnRlclBvc2l0aW9uKHJlZik7XG4gICAgY2FsbGJhY2tzLm9uTGlmdCh7XG4gICAgICBjbGllbnRTZWxlY3Rpb246IGNlbnRlcixcbiAgICAgIG1vdmVtZW50TW9kZTogJ1NOQVAnXG4gICAgfSk7XG4gIH0sIFtiaW5kV2luZG93RXZlbnRzLCBjYWxsYmFja3MsIGdldERyYWdnYWJsZVJlZiwgb25DYXB0dXJlU3RhcnQsIHN0b3BdKTtcbiAgdmFyIG9uS2V5RG93biA9IHVzZUNhbGxiYWNrKGZ1bmN0aW9uIChldmVudCkge1xuICAgIGlmICghZ2V0SXNEcmFnZ2luZygpKSB7XG4gICAgICBpZiAoZXZlbnQuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICghY2FuU3RhcnRDYXB0dXJpbmcoZXZlbnQpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGV2ZW50LmtleUNvZGUgIT09IHNwYWNlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIHN0YXJ0RHJhZ2dpbmcoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoZXZlbnQua2V5Q29kZSA9PT0gZXNjYXBlKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgY2FuY2VsKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGV2ZW50LmtleUNvZGUgPT09IHNwYWNlKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgc3RvcCgpO1xuICAgICAgY2FsbGJhY2tzLm9uRHJvcCgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChldmVudC5rZXlDb2RlID09PSBhcnJvd0Rvd24pIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBzY2hlZHVsZS5tb3ZlRG93bigpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChldmVudC5rZXlDb2RlID09PSBhcnJvd1VwKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgc2NoZWR1bGUubW92ZVVwKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGV2ZW50LmtleUNvZGUgPT09IGFycm93UmlnaHQpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBzY2hlZHVsZS5tb3ZlUmlnaHQoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoZXZlbnQua2V5Q29kZSA9PT0gYXJyb3dMZWZ0KSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgc2NoZWR1bGUubW92ZUxlZnQoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoc2Nyb2xsSnVtcEtleXNbZXZlbnQua2V5Q29kZV0pIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgcHJldmVudFN0YW5kYXJkS2V5RXZlbnRzKGV2ZW50KTtcbiAgfSwgW2NhbGxiYWNrcywgY2FuU3RhcnRDYXB0dXJpbmcsIGNhbmNlbCwgZ2V0SXNEcmFnZ2luZywgc2NoZWR1bGUsIHN0YXJ0RHJhZ2dpbmcsIHN0b3BdKTtcbiAgcmV0dXJuIG9uS2V5RG93bjtcbn1cblxudmFyIHRpbWVGb3JMb25nUHJlc3MgPSAxMjA7XG52YXIgZm9yY2VQcmVzc1RocmVzaG9sZCA9IDAuMTU7XG52YXIgdG91Y2hTdGFydE1hcnNoYWwgPSBjcmVhdGVFdmVudE1hcnNoYWwoKTtcblxudmFyIG5vb3AkMyA9IGZ1bmN0aW9uIG5vb3AoKSB7fTtcblxuZnVuY3Rpb24gdXNlVG91Y2hTZW5zb3IoYXJncykge1xuICB2YXIgY2FsbGJhY2tzID0gYXJncy5jYWxsYmFja3MsXG4gICAgICBnZXRXaW5kb3cgPSBhcmdzLmdldFdpbmRvdyxcbiAgICAgIGNhblN0YXJ0Q2FwdHVyaW5nID0gYXJncy5jYW5TdGFydENhcHR1cmluZyxcbiAgICAgIGdldFNob3VsZFJlc3BlY3RGb3JjZVByZXNzID0gYXJncy5nZXRTaG91bGRSZXNwZWN0Rm9yY2VQcmVzcyxcbiAgICAgIG9uQ2FwdHVyZVN0YXJ0ID0gYXJncy5vbkNhcHR1cmVTdGFydCxcbiAgICAgIG9uQ2FwdHVyZUVuZCA9IGFyZ3Mub25DYXB0dXJlRW5kO1xuICB2YXIgcGVuZGluZ1JlZiA9IHVzZVJlZihudWxsKTtcbiAgdmFyIGlzRHJhZ2dpbmdSZWYgPSB1c2VSZWYoZmFsc2UpO1xuICB2YXIgaGFzTW92ZWRSZWYgPSB1c2VSZWYoZmFsc2UpO1xuICB2YXIgdW5iaW5kV2luZG93RXZlbnRzUmVmID0gdXNlUmVmKG5vb3AkMyk7XG4gIHZhciBnZXRJc0NhcHR1cmluZyA9IHVzZUNhbGxiYWNrKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gQm9vbGVhbihwZW5kaW5nUmVmLmN1cnJlbnQgfHwgaXNEcmFnZ2luZ1JlZi5jdXJyZW50KTtcbiAgfSwgW10pO1xuICB2YXIgcG9zdERyYWdDbGlja1ByZXZlbnRlciA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBjcmVhdGVQb3N0RHJhZ0V2ZW50UHJldmVudGVyKGdldFdpbmRvdyk7XG4gIH0sIFtnZXRXaW5kb3ddKTtcbiAgdmFyIHNjaGVkdWxlID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgISFnZXRJc0NhcHR1cmluZygpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnU2hvdWxkIG5vdCByZWNyZWF0ZSBzY2hlZHVsZXIgd2hpbGUgY2FwdHVyaW5nJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHJldHVybiBjcmVhdGVTY2hlZHVsZXIoY2FsbGJhY2tzKTtcbiAgfSwgW2NhbGxiYWNrcywgZ2V0SXNDYXB0dXJpbmddKTtcbiAgdmFyIHN0b3AgPSB1c2VDYWxsYmFjayhmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFnZXRJc0NhcHR1cmluZygpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgc2NoZWR1bGUuY2FuY2VsKCk7XG4gICAgdW5iaW5kV2luZG93RXZlbnRzUmVmLmN1cnJlbnQoKTtcbiAgICB0b3VjaFN0YXJ0TWFyc2hhbC5yZXNldCgpO1xuICAgIGhhc01vdmVkUmVmLmN1cnJlbnQgPSBmYWxzZTtcbiAgICBvbkNhcHR1cmVFbmQoKTtcblxuICAgIGlmIChpc0RyYWdnaW5nUmVmLmN1cnJlbnQpIHtcbiAgICAgIHBvc3REcmFnQ2xpY2tQcmV2ZW50ZXIucHJldmVudE5leHQoKTtcbiAgICAgIGlzRHJhZ2dpbmdSZWYuY3VycmVudCA9IGZhbHNlO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBwZW5kaW5nID0gcGVuZGluZ1JlZi5jdXJyZW50O1xuICAgICFwZW5kaW5nID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnRXhwZWN0ZWQgYSBwZW5kaW5nIGRyYWcnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgY2xlYXJUaW1lb3V0KHBlbmRpbmcubG9uZ1ByZXNzVGltZXJJZCk7XG4gICAgcGVuZGluZ1JlZi5jdXJyZW50ID0gbnVsbDtcbiAgfSwgW2dldElzQ2FwdHVyaW5nLCBvbkNhcHR1cmVFbmQsIHBvc3REcmFnQ2xpY2tQcmV2ZW50ZXIsIHNjaGVkdWxlXSk7XG4gIHZhciBjYW5jZWwgPSB1c2VDYWxsYmFjayhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHdhc0RyYWdnaW5nID0gaXNEcmFnZ2luZ1JlZi5jdXJyZW50O1xuICAgIHN0b3AoKTtcblxuICAgIGlmICh3YXNEcmFnZ2luZykge1xuICAgICAgY2FsbGJhY2tzLm9uQ2FuY2VsKCk7XG4gICAgfVxuICB9LCBbY2FsbGJhY2tzLCBzdG9wXSk7XG4gIHZhciB3aW5kb3dCaW5kaW5ncyA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgICEhZ2V0SXNDYXB0dXJpbmcoKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ1Nob3VsZCBub3QgcmVjcmVhdGUgd2luZG93IGJpbmRpbmdzIHdoaWxlIGNhcHR1cmluZycpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICB2YXIgYmluZGluZ3MgPSBbe1xuICAgICAgZXZlbnROYW1lOiAndG91Y2htb3ZlJyxcbiAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgcGFzc2l2ZTogZmFsc2UsXG4gICAgICAgIGNhcHR1cmU6IGZhbHNlXG4gICAgICB9LFxuICAgICAgZm46IGZ1bmN0aW9uIGZuKGV2ZW50KSB7XG4gICAgICAgIGlmICghaXNEcmFnZ2luZ1JlZi5jdXJyZW50KSB7XG4gICAgICAgICAgc3RvcCgpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghaGFzTW92ZWRSZWYuY3VycmVudCkge1xuICAgICAgICAgIGhhc01vdmVkUmVmLmN1cnJlbnQgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHRvdWNoID0gZXZlbnQudG91Y2hlc1swXTtcblxuICAgICAgICBpZiAoIXRvdWNoKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHBvaW50ID0ge1xuICAgICAgICAgIHg6IHRvdWNoLmNsaWVudFgsXG4gICAgICAgICAgeTogdG91Y2guY2xpZW50WVxuICAgICAgICB9O1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBzY2hlZHVsZS5tb3ZlKHBvaW50KTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBldmVudE5hbWU6ICd0b3VjaGVuZCcsXG4gICAgICBmbjogZnVuY3Rpb24gZm4oZXZlbnQpIHtcbiAgICAgICAgaWYgKCFpc0RyYWdnaW5nUmVmLmN1cnJlbnQpIHtcbiAgICAgICAgICBzdG9wKCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgc3RvcCgpO1xuICAgICAgICBjYWxsYmFja3Mub25Ecm9wKCk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAgZXZlbnROYW1lOiAndG91Y2hjYW5jZWwnLFxuICAgICAgZm46IGZ1bmN0aW9uIGZuKGV2ZW50KSB7XG4gICAgICAgIGlmICghaXNEcmFnZ2luZ1JlZi5jdXJyZW50KSB7XG4gICAgICAgICAgc3RvcCgpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGNhbmNlbCgpO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGV2ZW50TmFtZTogJ3RvdWNoc3RhcnQnLFxuICAgICAgZm46IGNhbmNlbFxuICAgIH0sIHtcbiAgICAgIGV2ZW50TmFtZTogJ29yaWVudGF0aW9uY2hhbmdlJyxcbiAgICAgIGZuOiBjYW5jZWxcbiAgICB9LCB7XG4gICAgICBldmVudE5hbWU6ICdyZXNpemUnLFxuICAgICAgZm46IGNhbmNlbFxuICAgIH0sIHtcbiAgICAgIGV2ZW50TmFtZTogJ3Njcm9sbCcsXG4gICAgICBvcHRpb25zOiB7XG4gICAgICAgIHBhc3NpdmU6IHRydWUsXG4gICAgICAgIGNhcHR1cmU6IGZhbHNlXG4gICAgICB9LFxuICAgICAgZm46IGZ1bmN0aW9uIGZuKCkge1xuICAgICAgICBpZiAocGVuZGluZ1JlZi5jdXJyZW50KSB7XG4gICAgICAgICAgc3RvcCgpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHNjaGVkdWxlLndpbmRvd1Njcm9sbE1vdmUoKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBldmVudE5hbWU6ICdjb250ZXh0bWVudScsXG4gICAgICBmbjogZnVuY3Rpb24gZm4oZXZlbnQpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBldmVudE5hbWU6ICdrZXlkb3duJyxcbiAgICAgIGZuOiBmdW5jdGlvbiBmbihldmVudCkge1xuICAgICAgICBpZiAoIWlzRHJhZ2dpbmdSZWYuY3VycmVudCkge1xuICAgICAgICAgIGNhbmNlbCgpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChldmVudC5rZXlDb2RlID09PSBlc2NhcGUpIHtcbiAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgY2FuY2VsKCk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAgZXZlbnROYW1lOiAndG91Y2hmb3JjZWNoYW5nZScsXG4gICAgICBmbjogZnVuY3Rpb24gZm4oZXZlbnQpIHtcbiAgICAgICAgdmFyIHRvdWNoID0gZXZlbnQudG91Y2hlc1swXTtcbiAgICAgICAgdmFyIGlzRm9yY2VQcmVzcyA9IHRvdWNoLmZvcmNlID49IGZvcmNlUHJlc3NUaHJlc2hvbGQ7XG5cbiAgICAgICAgaWYgKCFpc0ZvcmNlUHJlc3MpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgc2hvdWxkUmVzcGVjdCA9IGdldFNob3VsZFJlc3BlY3RGb3JjZVByZXNzKCk7XG5cbiAgICAgICAgaWYgKHBlbmRpbmdSZWYuY3VycmVudCkge1xuICAgICAgICAgIGlmIChzaG91bGRSZXNwZWN0KSB7XG4gICAgICAgICAgICBjYW5jZWwoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc2hvdWxkUmVzcGVjdCkge1xuICAgICAgICAgIGlmIChoYXNNb3ZlZFJlZi5jdXJyZW50KSB7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNhbmNlbCgpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAgZXZlbnROYW1lOiBzdXBwb3J0ZWRFdmVudE5hbWUsXG4gICAgICBmbjogY2FuY2VsXG4gICAgfV07XG4gICAgcmV0dXJuIGJpbmRpbmdzO1xuICB9LCBbY2FsbGJhY2tzLCBjYW5jZWwsIGdldElzQ2FwdHVyaW5nLCBnZXRTaG91bGRSZXNwZWN0Rm9yY2VQcmVzcywgc2NoZWR1bGUsIHN0b3BdKTtcbiAgdmFyIGJpbmRXaW5kb3dFdmVudHMgPSB1c2VDYWxsYmFjayhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHdpbiA9IGdldFdpbmRvdygpO1xuICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgY2FwdHVyZTogdHJ1ZVxuICAgIH07XG5cbiAgICB1bmJpbmRXaW5kb3dFdmVudHNSZWYuY3VycmVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB1bmJpbmRFdmVudHMod2luLCB3aW5kb3dCaW5kaW5ncywgb3B0aW9ucyk7XG4gICAgfTtcblxuICAgIGJpbmRFdmVudHMod2luLCB3aW5kb3dCaW5kaW5ncywgb3B0aW9ucyk7XG4gIH0sIFtnZXRXaW5kb3csIHdpbmRvd0JpbmRpbmdzXSk7XG4gIHZhciBzdGFydERyYWdnaW5nID0gdXNlQ2FsbGJhY2soZnVuY3Rpb24gKCkge1xuICAgIHZhciBwZW5kaW5nID0gcGVuZGluZ1JlZi5jdXJyZW50O1xuICAgICFwZW5kaW5nID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnQ2Fubm90IHN0YXJ0IGEgZHJhZyB3aXRob3V0IGEgcGVuZGluZyBkcmFnJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIGlzRHJhZ2dpbmdSZWYuY3VycmVudCA9IHRydWU7XG4gICAgcGVuZGluZ1JlZi5jdXJyZW50ID0gbnVsbDtcbiAgICBoYXNNb3ZlZFJlZi5jdXJyZW50ID0gZmFsc2U7XG4gICAgY2FsbGJhY2tzLm9uTGlmdCh7XG4gICAgICBjbGllbnRTZWxlY3Rpb246IHBlbmRpbmcucG9pbnQsXG4gICAgICBtb3ZlbWVudE1vZGU6ICdGTFVJRCdcbiAgICB9KTtcbiAgfSwgW2NhbGxiYWNrc10pO1xuICB2YXIgc3RhcnRQZW5kaW5nRHJhZyA9IHVzZUNhbGxiYWNrKGZ1bmN0aW9uIChldmVudCkge1xuICAgICEhcGVuZGluZ1JlZi5jdXJyZW50ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnRXhwZWN0ZWQgdGhlcmUgdG8gYmUgbm8gcGVuZGluZyBkcmFnJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHZhciB0b3VjaCA9IGV2ZW50LnRvdWNoZXNbMF07XG4gICAgdmFyIGNsaWVudFggPSB0b3VjaC5jbGllbnRYLFxuICAgICAgICBjbGllbnRZID0gdG91Y2guY2xpZW50WTtcbiAgICB2YXIgcG9pbnQgPSB7XG4gICAgICB4OiBjbGllbnRYLFxuICAgICAgeTogY2xpZW50WVxuICAgIH07XG4gICAgdmFyIGxvbmdQcmVzc1RpbWVySWQgPSBzZXRUaW1lb3V0KHN0YXJ0RHJhZ2dpbmcsIHRpbWVGb3JMb25nUHJlc3MpO1xuICAgIHZhciBwZW5kaW5nID0ge1xuICAgICAgcG9pbnQ6IHBvaW50LFxuICAgICAgbG9uZ1ByZXNzVGltZXJJZDogbG9uZ1ByZXNzVGltZXJJZFxuICAgIH07XG4gICAgcGVuZGluZ1JlZi5jdXJyZW50ID0gcGVuZGluZztcbiAgICBvbkNhcHR1cmVTdGFydChzdG9wKTtcbiAgICBiaW5kV2luZG93RXZlbnRzKCk7XG4gIH0sIFtiaW5kV2luZG93RXZlbnRzLCBvbkNhcHR1cmVTdGFydCwgc3RhcnREcmFnZ2luZywgc3RvcF0pO1xuXG4gIHZhciBvblRvdWNoU3RhcnQgPSBmdW5jdGlvbiBvblRvdWNoU3RhcnQoZXZlbnQpIHtcbiAgICBpZiAodG91Y2hTdGFydE1hcnNoYWwuaXNIYW5kbGVkKCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAhIWdldElzQ2FwdHVyaW5nKCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdTaG91bGQgbm90IGJlIGFibGUgdG8gcGVyZm9ybSBhIHRvdWNoIHN0YXJ0IHdoaWxlIGEgZHJhZyBvciBwZW5kaW5nIGRyYWcgaXMgb2NjdXJyaW5nJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuXG4gICAgaWYgKCFjYW5TdGFydENhcHR1cmluZyhldmVudCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0b3VjaFN0YXJ0TWFyc2hhbC5oYW5kbGUoKTtcbiAgICBzdGFydFBlbmRpbmdEcmFnKGV2ZW50KTtcbiAgfTtcblxuICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0KGZ1bmN0aW9uIHdlYmtpdEhhY2soKSB7XG4gICAgdmFyIHVuYmluZCA9IGJpbmRFdmVudHMod2luZG93LCBbe1xuICAgICAgZXZlbnROYW1lOiAndG91Y2htb3ZlJyxcbiAgICAgIGZuOiBub29wJDMsXG4gICAgICBvcHRpb25zOiB7XG4gICAgICAgIGNhcHR1cmU6IGZhbHNlLFxuICAgICAgICBwYXNzaXZlOiBmYWxzZVxuICAgICAgfVxuICAgIH1dKTtcbiAgICByZXR1cm4gdW5iaW5kO1xuICB9LCBbXSk7XG4gIHJldHVybiBvblRvdWNoU3RhcnQ7XG59XG5cbmZ1bmN0aW9uIGlzU3ZnRWxlbWVudChlbCkge1xuICByZXR1cm4gQm9vbGVhbihnZXRXaW5kb3dGcm9tRWwoZWwpLlNWR0VsZW1lbnQpICYmIGVsIGluc3RhbmNlb2YgZ2V0V2luZG93RnJvbUVsKGVsKS5TVkdFbGVtZW50O1xufVxuXG52YXIgc2VsZWN0b3IgPSBcIltcIiArIGRyYWdIYW5kbGUgKyBcIl1cIjtcblxudmFyIHRocm93SWZTVkcgPSBmdW5jdGlvbiB0aHJvd0lmU1ZHKGVsKSB7XG4gICEhaXNTdmdFbGVtZW50KGVsKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJBIGRyYWcgaGFuZGxlIGNhbm5vdCBiZSBhbiBTVkdFbGVtZW50OiBpdCBoYXMgaW5jb25zaXN0ZW50IGZvY3VzIHN1cHBvcnQuXFxuXFxuICAgIE1vcmUgaW5mb3JtYXRpb246IGh0dHBzOi8vZ2l0aHViLmNvbS9hdGxhc3NpYW4vcmVhY3QtYmVhdXRpZnVsLWRuZC9ibG9iL21hc3Rlci9kb2NzL2d1aWRlcy9kcmFnZ2luZy1zdmdzLm1kXCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbn07XG5cbnZhciBnZXREcmFnSGFuZGxlUmVmID0gZnVuY3Rpb24gZ2V0RHJhZ0hhbmRsZVJlZihkcmFnZ2FibGVSZWYpIHtcbiAgaWYgKGRyYWdnYWJsZVJlZi5oYXNBdHRyaWJ1dGUoZHJhZ0hhbmRsZSkpIHtcbiAgICB0aHJvd0lmU1ZHKGRyYWdnYWJsZVJlZik7XG4gICAgcmV0dXJuIGRyYWdnYWJsZVJlZjtcbiAgfVxuXG4gIHZhciBlbCA9IGRyYWdnYWJsZVJlZi5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKTtcbiAgdGhyb3dJZlNWRyhkcmFnZ2FibGVSZWYpO1xuICAhZWwgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiXFxuICAgICAgQ2Fubm90IGZpbmQgZHJhZyBoYW5kbGUgZWxlbWVudCBpbnNpZGUgb2YgRHJhZ2dhYmxlLlxcbiAgICAgIFBsZWFzZSBiZSBzdXJlIHRvIGFwcGx5IHRoZSB7Li4ucHJvdmlkZWQuZHJhZ0hhbmRsZVByb3BzfSB0byB5b3VyIERyYWdnYWJsZVxcblxcbiAgICAgIE1vcmUgaW5mb3JtYXRpb246IGh0dHBzOi8vZ2l0aHViLmNvbS9hdGxhc3NpYW4vcmVhY3QtYmVhdXRpZnVsLWRuZC9ibG9iL21hc3Rlci9kb2NzL2FwaS9kcmFnZ2FibGUubWRcXG4gICAgXCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgIWlzSHRtbEVsZW1lbnQoZWwpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnQSBkcmFnIGhhbmRsZSBtdXN0IGJlIGEgSFRNTEVsZW1lbnQnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHJldHVybiBlbDtcbn07XG5cbmZ1bmN0aW9uIHVzZVZhbGlkYXRpb24kMShfcmVmKSB7XG4gIHZhciBpc0VuYWJsZWQgPSBfcmVmLmlzRW5hYmxlZCxcbiAgICAgIGdldERyYWdnYWJsZVJlZiA9IF9yZWYuZ2V0RHJhZ2dhYmxlUmVmO1xuICB1c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAoIWlzRW5hYmxlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBkcmFnZ2FibGVSZWYgPSBnZXREcmFnZ2FibGVSZWYoKTtcbiAgICAgICFkcmFnZ2FibGVSZWYgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdEcmFnIGhhbmRsZSB3YXMgdW5hYmxlIHRvIGZpbmQgZHJhZ2dhYmxlIHJlZicpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgIGdldERyYWdIYW5kbGVSZWYoZHJhZ2dhYmxlUmVmKTtcbiAgICB9XG4gIH0sIFtnZXREcmFnZ2FibGVSZWYsIGlzRW5hYmxlZF0pO1xufVxuXG52YXIgcmV0YWluaW5nRm9jdXNGb3IgPSBudWxsO1xudmFyIGxpc3RlbmVyT3B0aW9ucyA9IHtcbiAgY2FwdHVyZTogdHJ1ZVxufTtcblxudmFyIGNsZWFyUmV0ZW50aW9uT25Gb2N1c0NoYW5nZSA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGlzQm91bmQgPSBmYWxzZTtcblxuICB2YXIgYmluZCA9IGZ1bmN0aW9uIGJpbmQoKSB7XG4gICAgaWYgKGlzQm91bmQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpc0JvdW5kID0gdHJ1ZTtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignZm9jdXMnLCBvbldpbmRvd0ZvY3VzQ2hhbmdlLCBsaXN0ZW5lck9wdGlvbnMpO1xuICB9O1xuXG4gIHZhciB1bmJpbmQgPSBmdW5jdGlvbiB1bmJpbmQoKSB7XG4gICAgaWYgKCFpc0JvdW5kKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaXNCb3VuZCA9IGZhbHNlO1xuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdmb2N1cycsIG9uV2luZG93Rm9jdXNDaGFuZ2UsIGxpc3RlbmVyT3B0aW9ucyk7XG4gIH07XG5cbiAgdmFyIG9uV2luZG93Rm9jdXNDaGFuZ2UgPSBmdW5jdGlvbiBvbldpbmRvd0ZvY3VzQ2hhbmdlKCkge1xuICAgIHVuYmluZCgpO1xuICAgIHJldGFpbmluZ0ZvY3VzRm9yID0gbnVsbDtcbiAgfTtcblxuICB2YXIgcmVzdWx0ID0gZnVuY3Rpb24gcmVzdWx0KCkge1xuICAgIHJldHVybiBiaW5kKCk7XG4gIH07XG5cbiAgcmVzdWx0LmNhbmNlbCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdW5iaW5kKCk7XG4gIH07XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn0oKTtcblxudmFyIHJldGFpbiA9IGZ1bmN0aW9uIHJldGFpbihpZCkge1xuICByZXRhaW5pbmdGb2N1c0ZvciA9IGlkO1xuICBjbGVhclJldGVudGlvbk9uRm9jdXNDaGFuZ2UoKTtcbn07XG5cbnZhciB0cnlSZXN0b3JlRm9jdXMgPSBmdW5jdGlvbiB0cnlSZXN0b3JlRm9jdXMoaWQsIGRyYWdnYWJsZVJlZikge1xuICBpZiAoIXJldGFpbmluZ0ZvY3VzRm9yKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKGlkICE9PSByZXRhaW5pbmdGb2N1c0Zvcikge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHJldGFpbmluZ0ZvY3VzRm9yID0gbnVsbDtcbiAgY2xlYXJSZXRlbnRpb25PbkZvY3VzQ2hhbmdlLmNhbmNlbCgpO1xuICB2YXIgZHJhZ0hhbmRsZVJlZiA9IGdldERyYWdIYW5kbGVSZWYoZHJhZ2dhYmxlUmVmKTtcblxuICBpZiAoIWRyYWdIYW5kbGVSZWYpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCdDb3VsZCBub3QgZmluZCBkcmFnIGhhbmRsZSBpbiB0aGUgRE9NIHRvIGZvY3VzIG9uIGl0JykgOiB2b2lkIDA7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgZHJhZ0hhbmRsZVJlZi5mb2N1cygpO1xufTtcblxudmFyIHJldGFpbmVyID0ge1xuICByZXRhaW46IHJldGFpbixcbiAgdHJ5UmVzdG9yZUZvY3VzOiB0cnlSZXN0b3JlRm9jdXNcbn07XG5cbmZ1bmN0aW9uIG5vb3AkNCgpIHt9XG5cbmZ1bmN0aW9uIHVzZUZvY3VzUmV0YWluZXIoYXJncykge1xuICB2YXIgaXNGb2N1c2VkUmVmID0gdXNlUmVmKGZhbHNlKTtcbiAgdmFyIGxhc3RBcmdzUmVmID0gdXNlUHJldmlvdXMoYXJncyk7XG4gIHZhciBnZXREcmFnZ2FibGVSZWYgPSBhcmdzLmdldERyYWdnYWJsZVJlZjtcbiAgdmFyIG9uRm9jdXMgPSB1c2VDYWxsYmFjayhmdW5jdGlvbiAoKSB7XG4gICAgaXNGb2N1c2VkUmVmLmN1cnJlbnQgPSB0cnVlO1xuICB9LCBbXSk7XG4gIHZhciBvbkJsdXIgPSB1c2VDYWxsYmFjayhmdW5jdGlvbiAoKSB7XG4gICAgaXNGb2N1c2VkUmVmLmN1cnJlbnQgPSBmYWxzZTtcbiAgfSwgW10pO1xuICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZmlyc3QgPSBsYXN0QXJnc1JlZi5jdXJyZW50O1xuXG4gICAgaWYgKCFmaXJzdC5pc0VuYWJsZWQpIHtcbiAgICAgIHJldHVybiBub29wJDQ7XG4gICAgfVxuXG4gICAgdmFyIGRyYWdnYWJsZSA9IGdldERyYWdnYWJsZVJlZigpO1xuICAgICFkcmFnZ2FibGUgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdEcmFnIGhhbmRsZSBjb3VsZCBub3Qgb2J0YWluIGRyYWdnYWJsZSByZWYnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgdmFyIGRyYWdIYW5kbGUgPSBnZXREcmFnSGFuZGxlUmVmKGRyYWdnYWJsZSk7XG4gICAgcmV0YWluZXIudHJ5UmVzdG9yZUZvY3VzKGZpcnN0LmRyYWdnYWJsZUlkLCBkcmFnSGFuZGxlKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGxhc3QgPSBsYXN0QXJnc1JlZi5jdXJyZW50O1xuXG4gICAgICB2YXIgc2hvdWxkUmV0YWluRm9jdXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghbGFzdC5pc0VuYWJsZWQpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWlzRm9jdXNlZFJlZi5jdXJyZW50KSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGxhc3QuaXNEcmFnZ2luZyB8fCBsYXN0LmlzRHJvcEFuaW1hdGluZztcbiAgICAgIH0oKTtcblxuICAgICAgaWYgKHNob3VsZFJldGFpbkZvY3VzKSB7XG4gICAgICAgIHJldGFpbmVyLnJldGFpbihsYXN0LmRyYWdnYWJsZUlkKTtcbiAgICAgIH1cbiAgICB9O1xuICB9LCBbZ2V0RHJhZ2dhYmxlUmVmLCBsYXN0QXJnc1JlZl0pO1xuICB2YXIgbGFzdERyYWdnYWJsZVJlZiA9IHVzZVJlZihudWxsKTtcbiAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFsYXN0RHJhZ2dhYmxlUmVmLmN1cnJlbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgZHJhZ2dhYmxlUmVmID0gZ2V0RHJhZ2dhYmxlUmVmKCk7XG5cbiAgICBpZiAoIWRyYWdnYWJsZVJlZikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChkcmFnZ2FibGVSZWYgPT09IGxhc3REcmFnZ2FibGVSZWYuY3VycmVudCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChpc0ZvY3VzZWRSZWYuY3VycmVudCAmJiBsYXN0QXJnc1JlZi5jdXJyZW50LmlzRW5hYmxlZCkge1xuICAgICAgZ2V0RHJhZ0hhbmRsZVJlZihkcmFnZ2FibGVSZWYpLmZvY3VzKCk7XG4gICAgfVxuICB9KTtcbiAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgbGFzdERyYWdnYWJsZVJlZi5jdXJyZW50ID0gZ2V0RHJhZ2dhYmxlUmVmKCk7XG4gIH0pO1xuICByZXR1cm4ge1xuICAgIG9uQmx1cjogb25CbHVyLFxuICAgIG9uRm9jdXM6IG9uRm9jdXNcbiAgfTtcbn1cblxuZnVuY3Rpb24gcHJldmVudEh0bWw1RG5kKGV2ZW50KSB7XG4gIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG59XG5cbmZ1bmN0aW9uIHVzZURyYWdIYW5kbGUoYXJncykge1xuICB2YXIgY2FwdHVyaW5nUmVmID0gdXNlUmVmKG51bGwpO1xuICB2YXIgb25DYXB0dXJlU3RhcnQgPSB1c2VDYWxsYmFjayhmdW5jdGlvbiAoYWJvcnQpIHtcbiAgICAhIWNhcHR1cmluZ1JlZi5jdXJyZW50ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnQ2Fubm90IHN0YXJ0IGNhcHR1cmluZyB3aGlsZSBzb21ldGhpbmcgZWxzZSBpcycpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICBjYXB0dXJpbmdSZWYuY3VycmVudCA9IHtcbiAgICAgIGFib3J0OiBhYm9ydFxuICAgIH07XG4gIH0sIFtdKTtcbiAgdmFyIG9uQ2FwdHVyZUVuZCA9IHVzZUNhbGxiYWNrKGZ1bmN0aW9uICgpIHtcbiAgICAhY2FwdHVyaW5nUmVmLmN1cnJlbnQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdDYW5ub3Qgc3RvcCBjYXB0dXJpbmcgd2hpbGUgbm90aGluZyBpcyBjYXB0dXJpbmcnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgY2FwdHVyaW5nUmVmLmN1cnJlbnQgPSBudWxsO1xuICB9LCBbXSk7XG4gIHZhciBhYm9ydENhcHR1cmUgPSB1c2VDYWxsYmFjayhmdW5jdGlvbiAoKSB7XG4gICAgIWNhcHR1cmluZ1JlZi5jdXJyZW50ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnQ2Fubm90IGFib3J0IGNhcHR1cmUgd2hlbiB0aGVyZSBpcyBub25lJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIGNhcHR1cmluZ1JlZi5jdXJyZW50LmFib3J0KCk7XG4gIH0sIFtdKTtcblxuICB2YXIgX3VzZVJlcXVpcmVkQ29udGV4dCA9IHVzZVJlcXVpcmVkQ29udGV4dChBcHBDb250ZXh0KSxcbiAgICAgIGNhbkxpZnQgPSBfdXNlUmVxdWlyZWRDb250ZXh0LmNhbkxpZnQsXG4gICAgICBzdHlsZUNvbnRleHQgPSBfdXNlUmVxdWlyZWRDb250ZXh0LnN0eWxlO1xuXG4gIHZhciBpc0RyYWdnaW5nID0gYXJncy5pc0RyYWdnaW5nLFxuICAgICAgaXNFbmFibGVkID0gYXJncy5pc0VuYWJsZWQsXG4gICAgICBkcmFnZ2FibGVJZCA9IGFyZ3MuZHJhZ2dhYmxlSWQsXG4gICAgICBjYWxsYmFja3MgPSBhcmdzLmNhbGxiYWNrcyxcbiAgICAgIGdldERyYWdnYWJsZVJlZiA9IGFyZ3MuZ2V0RHJhZ2dhYmxlUmVmLFxuICAgICAgZ2V0U2hvdWxkUmVzcGVjdEZvcmNlUHJlc3MgPSBhcmdzLmdldFNob3VsZFJlc3BlY3RGb3JjZVByZXNzLFxuICAgICAgY2FuRHJhZ0ludGVyYWN0aXZlRWxlbWVudHMgPSBhcmdzLmNhbkRyYWdJbnRlcmFjdGl2ZUVsZW1lbnRzO1xuICB2YXIgbGFzdEFyZ3NSZWYgPSB1c2VQcmV2aW91cyhhcmdzKTtcbiAgdXNlVmFsaWRhdGlvbiQxKHtcbiAgICBpc0VuYWJsZWQ6IGlzRW5hYmxlZCxcbiAgICBnZXREcmFnZ2FibGVSZWY6IGdldERyYWdnYWJsZVJlZlxuICB9KTtcbiAgdmFyIGdldFdpbmRvdyA9IHVzZUNhbGxiYWNrKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZ2V0V2luZG93RnJvbUVsKGdldERyYWdnYWJsZVJlZigpKTtcbiAgfSwgW2dldERyYWdnYWJsZVJlZl0pO1xuICB2YXIgY2FuU3RhcnRDYXB0dXJpbmcgPSB1c2VDYWxsYmFjayhmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICBpZiAoIWlzRW5hYmxlZCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlmIChjYXB0dXJpbmdSZWYuY3VycmVudCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlmICghY2FuTGlmdChkcmFnZ2FibGVJZCkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gc2hvdWxkQWxsb3dEcmFnZ2luZ0Zyb21UYXJnZXQoZXZlbnQsIGNhbkRyYWdJbnRlcmFjdGl2ZUVsZW1lbnRzKTtcbiAgfSwgW2NhbkRyYWdJbnRlcmFjdGl2ZUVsZW1lbnRzLCBjYW5MaWZ0LCBkcmFnZ2FibGVJZCwgaXNFbmFibGVkXSk7XG5cbiAgdmFyIF91c2VGb2N1c1JldGFpbmVyID0gdXNlRm9jdXNSZXRhaW5lcihhcmdzKSxcbiAgICAgIG9uQmx1ciA9IF91c2VGb2N1c1JldGFpbmVyLm9uQmx1cixcbiAgICAgIG9uRm9jdXMgPSBfdXNlRm9jdXNSZXRhaW5lci5vbkZvY3VzO1xuXG4gIHZhciBtb3VzZUFyZ3MgPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgY2FsbGJhY2tzOiBjYWxsYmFja3MsXG4gICAgICBnZXREcmFnZ2FibGVSZWY6IGdldERyYWdnYWJsZVJlZixcbiAgICAgIGdldFdpbmRvdzogZ2V0V2luZG93LFxuICAgICAgY2FuU3RhcnRDYXB0dXJpbmc6IGNhblN0YXJ0Q2FwdHVyaW5nLFxuICAgICAgb25DYXB0dXJlU3RhcnQ6IG9uQ2FwdHVyZVN0YXJ0LFxuICAgICAgb25DYXB0dXJlRW5kOiBvbkNhcHR1cmVFbmQsXG4gICAgICBnZXRTaG91bGRSZXNwZWN0Rm9yY2VQcmVzczogZ2V0U2hvdWxkUmVzcGVjdEZvcmNlUHJlc3NcbiAgICB9O1xuICB9LCBbY2FsbGJhY2tzLCBnZXREcmFnZ2FibGVSZWYsIGdldFdpbmRvdywgY2FuU3RhcnRDYXB0dXJpbmcsIG9uQ2FwdHVyZVN0YXJ0LCBvbkNhcHR1cmVFbmQsIGdldFNob3VsZFJlc3BlY3RGb3JjZVByZXNzXSk7XG4gIHZhciBvbk1vdXNlRG93biA9IHVzZU1vdXNlU2Vuc29yKG1vdXNlQXJncyk7XG4gIHZhciBrZXlib2FyZEFyZ3MgPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgY2FsbGJhY2tzOiBjYWxsYmFja3MsXG4gICAgICBnZXREcmFnZ2FibGVSZWY6IGdldERyYWdnYWJsZVJlZixcbiAgICAgIGdldFdpbmRvdzogZ2V0V2luZG93LFxuICAgICAgY2FuU3RhcnRDYXB0dXJpbmc6IGNhblN0YXJ0Q2FwdHVyaW5nLFxuICAgICAgb25DYXB0dXJlU3RhcnQ6IG9uQ2FwdHVyZVN0YXJ0LFxuICAgICAgb25DYXB0dXJlRW5kOiBvbkNhcHR1cmVFbmRcbiAgICB9O1xuICB9LCBbY2FsbGJhY2tzLCBjYW5TdGFydENhcHR1cmluZywgZ2V0RHJhZ2dhYmxlUmVmLCBnZXRXaW5kb3csIG9uQ2FwdHVyZUVuZCwgb25DYXB0dXJlU3RhcnRdKTtcbiAgdmFyIG9uS2V5RG93biA9IHVzZUtleWJvYXJkU2Vuc29yKGtleWJvYXJkQXJncyk7XG4gIHZhciB0b3VjaEFyZ3MgPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgY2FsbGJhY2tzOiBjYWxsYmFja3MsXG4gICAgICBnZXREcmFnZ2FibGVSZWY6IGdldERyYWdnYWJsZVJlZixcbiAgICAgIGdldFdpbmRvdzogZ2V0V2luZG93LFxuICAgICAgY2FuU3RhcnRDYXB0dXJpbmc6IGNhblN0YXJ0Q2FwdHVyaW5nLFxuICAgICAgZ2V0U2hvdWxkUmVzcGVjdEZvcmNlUHJlc3M6IGdldFNob3VsZFJlc3BlY3RGb3JjZVByZXNzLFxuICAgICAgb25DYXB0dXJlU3RhcnQ6IG9uQ2FwdHVyZVN0YXJ0LFxuICAgICAgb25DYXB0dXJlRW5kOiBvbkNhcHR1cmVFbmRcbiAgICB9O1xuICB9LCBbY2FsbGJhY2tzLCBnZXREcmFnZ2FibGVSZWYsIGdldFdpbmRvdywgY2FuU3RhcnRDYXB0dXJpbmcsIGdldFNob3VsZFJlc3BlY3RGb3JjZVByZXNzLCBvbkNhcHR1cmVTdGFydCwgb25DYXB0dXJlRW5kXSk7XG4gIHZhciBvblRvdWNoU3RhcnQgPSB1c2VUb3VjaFNlbnNvcih0b3VjaEFyZ3MpO1xuICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKCFjYXB0dXJpbmdSZWYuY3VycmVudCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGFib3J0Q2FwdHVyZSgpO1xuXG4gICAgICBpZiAobGFzdEFyZ3NSZWYuY3VycmVudC5pc0RyYWdnaW5nKSB7XG4gICAgICAgIGxhc3RBcmdzUmVmLmN1cnJlbnQuY2FsbGJhY2tzLm9uQ2FuY2VsKCk7XG4gICAgICB9XG4gICAgfTtcbiAgfSwgW10pO1xuXG4gIGlmICghaXNFbmFibGVkICYmIGNhcHR1cmluZ1JlZi5jdXJyZW50KSB7XG4gICAgYWJvcnRDYXB0dXJlKCk7XG5cbiAgICBpZiAobGFzdEFyZ3NSZWYuY3VycmVudC5pc0RyYWdnaW5nKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCdZb3UgaGF2ZSBkaXNhYmxlZCBkcmFnZ2luZyBvbiBhIERyYWdnYWJsZSB3aGlsZSBpdCB3YXMgZHJhZ2dpbmcuIFRoZSBkcmFnIGhhcyBiZWVuIGNhbmNlbGxlZCcpIDogdm9pZCAwO1xuICAgICAgY2FsbGJhY2tzLm9uQ2FuY2VsKCk7XG4gICAgfVxuICB9XG5cbiAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFpc0RyYWdnaW5nICYmIGNhcHR1cmluZ1JlZi5jdXJyZW50KSB7XG4gICAgICBhYm9ydENhcHR1cmUoKTtcbiAgICB9XG4gIH0sIFthYm9ydENhcHR1cmUsIGlzRHJhZ2dpbmddKTtcbiAgdmFyIHByb3BzID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFpc0VuYWJsZWQpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBvbk1vdXNlRG93bjogb25Nb3VzZURvd24sXG4gICAgICBvbktleURvd246IG9uS2V5RG93bixcbiAgICAgIG9uVG91Y2hTdGFydDogb25Ub3VjaFN0YXJ0LFxuICAgICAgb25Gb2N1czogb25Gb2N1cyxcbiAgICAgIG9uQmx1cjogb25CbHVyLFxuICAgICAgdGFiSW5kZXg6IDAsXG4gICAgICAnZGF0YS1yZWFjdC1iZWF1dGlmdWwtZG5kLWRyYWctaGFuZGxlJzogc3R5bGVDb250ZXh0LFxuICAgICAgJ2FyaWEtcm9sZWRlc2NyaXB0aW9uJzogJ0RyYWdnYWJsZSBpdGVtLiBQcmVzcyBzcGFjZSBiYXIgdG8gbGlmdCcsXG4gICAgICBkcmFnZ2FibGU6IGZhbHNlLFxuICAgICAgb25EcmFnU3RhcnQ6IHByZXZlbnRIdG1sNURuZFxuICAgIH07XG4gIH0sIFtpc0VuYWJsZWQsIG9uQmx1ciwgb25Gb2N1cywgb25LZXlEb3duLCBvbk1vdXNlRG93biwgb25Ub3VjaFN0YXJ0LCBzdHlsZUNvbnRleHRdKTtcbiAgcmV0dXJuIHByb3BzO1xufVxuXG5mdW5jdGlvbiBnZXREaW1lbnNpb24kMShkZXNjcmlwdG9yLCBlbCwgd2luZG93U2Nyb2xsKSB7XG4gIGlmICh3aW5kb3dTY3JvbGwgPT09IHZvaWQgMCkge1xuICAgIHdpbmRvd1Njcm9sbCA9IG9yaWdpbjtcbiAgfVxuXG4gIHZhciBjb21wdXRlZFN0eWxlcyA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsKTtcbiAgdmFyIGJvcmRlckJveCA9IGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICB2YXIgY2xpZW50ID0gY2FsY3VsYXRlQm94KGJvcmRlckJveCwgY29tcHV0ZWRTdHlsZXMpO1xuICB2YXIgcGFnZSA9IHdpdGhTY3JvbGwoY2xpZW50LCB3aW5kb3dTY3JvbGwpO1xuICB2YXIgcGxhY2Vob2xkZXIgPSB7XG4gICAgY2xpZW50OiBjbGllbnQsXG4gICAgdGFnTmFtZTogZWwudGFnTmFtZS50b0xvd2VyQ2FzZSgpLFxuICAgIGRpc3BsYXk6IGNvbXB1dGVkU3R5bGVzLmRpc3BsYXlcbiAgfTtcbiAgdmFyIGRpc3BsYWNlQnkgPSB7XG4gICAgeDogY2xpZW50Lm1hcmdpbkJveC53aWR0aCxcbiAgICB5OiBjbGllbnQubWFyZ2luQm94LmhlaWdodFxuICB9O1xuICB2YXIgZGltZW5zaW9uID0ge1xuICAgIGRlc2NyaXB0b3I6IGRlc2NyaXB0b3IsXG4gICAgcGxhY2Vob2xkZXI6IHBsYWNlaG9sZGVyLFxuICAgIGRpc3BsYWNlQnk6IGRpc3BsYWNlQnksXG4gICAgY2xpZW50OiBjbGllbnQsXG4gICAgcGFnZTogcGFnZVxuICB9O1xuICByZXR1cm4gZGltZW5zaW9uO1xufVxuXG5mdW5jdGlvbiB1c2VEcmFnZ2FibGVEaW1lbnNpb25QdWJsaXNoZXIoYXJncykge1xuICB2YXIgZHJhZ2dhYmxlSWQgPSBhcmdzLmRyYWdnYWJsZUlkLFxuICAgICAgaW5kZXggPSBhcmdzLmluZGV4LFxuICAgICAgZ2V0RHJhZ2dhYmxlUmVmID0gYXJncy5nZXREcmFnZ2FibGVSZWY7XG4gIHZhciBhcHBDb250ZXh0ID0gdXNlUmVxdWlyZWRDb250ZXh0KEFwcENvbnRleHQpO1xuICB2YXIgbWFyc2hhbCA9IGFwcENvbnRleHQubWFyc2hhbDtcbiAgdmFyIGRyb3BwYWJsZUNvbnRleHQgPSB1c2VSZXF1aXJlZENvbnRleHQoRHJvcHBhYmxlQ29udGV4dCk7XG4gIHZhciBkcm9wcGFibGVJZCA9IGRyb3BwYWJsZUNvbnRleHQuZHJvcHBhYmxlSWQsXG4gICAgICB0eXBlID0gZHJvcHBhYmxlQ29udGV4dC50eXBlO1xuICB2YXIgZGVzY3JpcHRvciA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgIHZhciByZXN1bHQgPSB7XG4gICAgICBpZDogZHJhZ2dhYmxlSWQsXG4gICAgICBkcm9wcGFibGVJZDogZHJvcHBhYmxlSWQsXG4gICAgICB0eXBlOiB0eXBlLFxuICAgICAgaW5kZXg6IGluZGV4XG4gICAgfTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9LCBbZHJhZ2dhYmxlSWQsIGRyb3BwYWJsZUlkLCBpbmRleCwgdHlwZV0pO1xuICB2YXIgcHVibGlzaGVkRGVzY3JpcHRvclJlZiA9IHVzZVJlZihkZXNjcmlwdG9yKTtcbiAgdmFyIG1ha2VEaW1lbnNpb24gPSB1c2VDYWxsYmFjayhmdW5jdGlvbiAod2luZG93U2Nyb2xsKSB7XG4gICAgdmFyIGxhdGVzdCA9IHB1Ymxpc2hlZERlc2NyaXB0b3JSZWYuY3VycmVudDtcbiAgICB2YXIgZWwgPSBnZXREcmFnZ2FibGVSZWYoKTtcbiAgICAhZWwgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdDYW5ub3QgZ2V0IGRpbWVuc2lvbiB3aGVuIG5vIHJlZiBpcyBzZXQnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgcmV0dXJuIGdldERpbWVuc2lvbiQxKGxhdGVzdCwgZWwsIHdpbmRvd1Njcm9sbCk7XG4gIH0sIFtnZXREcmFnZ2FibGVSZWZdKTtcbiAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgbWFyc2hhbC5yZWdpc3RlckRyYWdnYWJsZShwdWJsaXNoZWREZXNjcmlwdG9yUmVmLmN1cnJlbnQsIG1ha2VEaW1lbnNpb24pO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gbWFyc2hhbC51bnJlZ2lzdGVyRHJhZ2dhYmxlKHB1Ymxpc2hlZERlc2NyaXB0b3JSZWYuY3VycmVudCk7XG4gICAgfTtcbiAgfSwgW21ha2VEaW1lbnNpb24sIG1hcnNoYWxdKTtcbiAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHB1Ymxpc2hlZERlc2NyaXB0b3JSZWYuY3VycmVudCA9PT0gZGVzY3JpcHRvcikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBwcmV2aW91cyA9IHB1Ymxpc2hlZERlc2NyaXB0b3JSZWYuY3VycmVudDtcbiAgICBwdWJsaXNoZWREZXNjcmlwdG9yUmVmLmN1cnJlbnQgPSBkZXNjcmlwdG9yO1xuICAgIG1hcnNoYWwudXBkYXRlRHJhZ2dhYmxlKHByZXZpb3VzLCBkZXNjcmlwdG9yLCBtYWtlRGltZW5zaW9uKTtcbiAgfSwgW2Rlc2NyaXB0b3IsIG1ha2VEaW1lbnNpb24sIG1hcnNoYWxdKTtcbn1cblxuZnVuY3Rpb24gY2hlY2tPd25Qcm9wcyQxKHByb3BzKSB7XG4gICFfTnVtYmVyJGlzSW50ZWdlcihwcm9wcy5pbmRleCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdEcmFnZ2FibGUgcmVxdWlyZXMgYW4gaW50ZWdlciBpbmRleCBwcm9wJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAhcHJvcHMuZHJhZ2dhYmxlSWQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdEcmFnZ2FibGUgcmVxdWlyZXMgYSBkcmFnZ2FibGVJZCcpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgISh0eXBlb2YgcHJvcHMuaXNEcmFnRGlzYWJsZWQgPT09ICdib29sZWFuJykgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdpc0RyYWdEaXNhYmxlZCBtdXN0IGJlIGEgYm9vbGVhbicpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbn1cblxuZnVuY3Rpb24gY2hlY2tGb3JPdXRkYXRlZFByb3BzKHByb3BzKSB7XG4gIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocHJvcHMsICdzaG91bGRSZXNwZWN0Rm9yY2VUb3VjaCcpKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZygnc2hvdWxkUmVzcGVjdEZvcmNlVG91Y2ggaGFzIGJlZW4gcmVuYW1lZCB0byBzaG91bGRSZXNwZWN0Rm9yY2VQcmVzcycpIDogdm9pZCAwO1xuICB9XG59XG5cbmZ1bmN0aW9uIHVzZVZhbGlkYXRpb24kMihwcm9wcywgZ2V0UmVmKSB7XG4gIHVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGNoZWNrT3duUHJvcHMkMShwcm9wcyk7XG4gICAgICBjaGVja0Zvck91dGRhdGVkUHJvcHMocHJvcHMpO1xuICAgICAgY2hlY2tJc1ZhbGlkSW5uZXJSZWYoZ2V0UmVmKCkpO1xuICAgIH1cbiAgfSk7XG59XG5cbmZ1bmN0aW9uIERyYWdnYWJsZShwcm9wcykge1xuICB2YXIgcmVmID0gdXNlUmVmKG51bGwpO1xuICB2YXIgc2V0UmVmID0gdXNlQ2FsbGJhY2soZnVuY3Rpb24gKGVsKSB7XG4gICAgcmVmLmN1cnJlbnQgPSBlbDtcbiAgfSwgW10pO1xuICB2YXIgZ2V0UmVmID0gdXNlQ2FsbGJhY2soZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiByZWYuY3VycmVudDtcbiAgfSwgW10pO1xuICB2YXIgYXBwQ29udGV4dCA9IHVzZVJlcXVpcmVkQ29udGV4dChBcHBDb250ZXh0KTtcbiAgdXNlVmFsaWRhdGlvbiQyKHByb3BzLCBnZXRSZWYpO1xuICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGRyYWdnYWJsZUlkID0gcHJvcHMuZHJhZ2dhYmxlSWQsXG4gICAgICBpc0RyYWdEaXNhYmxlZCA9IHByb3BzLmlzRHJhZ0Rpc2FibGVkLFxuICAgICAgc2hvdWxkUmVzcGVjdEZvcmNlUHJlc3MgPSBwcm9wcy5zaG91bGRSZXNwZWN0Rm9yY2VQcmVzcyxcbiAgICAgIGNhbkRyYWdJbnRlcmFjdGl2ZUVsZW1lbnRzID0gcHJvcHMuZGlzYWJsZUludGVyYWN0aXZlRWxlbWVudEJsb2NraW5nLFxuICAgICAgaW5kZXggPSBwcm9wcy5pbmRleCxcbiAgICAgIG1hcHBlZCA9IHByb3BzLm1hcHBlZCxcbiAgICAgIG1vdmVVcEFjdGlvbiA9IHByb3BzLm1vdmVVcCxcbiAgICAgIG1vdmVBY3Rpb24gPSBwcm9wcy5tb3ZlLFxuICAgICAgZHJvcEFjdGlvbiA9IHByb3BzLmRyb3AsXG4gICAgICBtb3ZlRG93bkFjdGlvbiA9IHByb3BzLm1vdmVEb3duLFxuICAgICAgbW92ZVJpZ2h0QWN0aW9uID0gcHJvcHMubW92ZVJpZ2h0LFxuICAgICAgbW92ZUxlZnRBY3Rpb24gPSBwcm9wcy5tb3ZlTGVmdCxcbiAgICAgIG1vdmVCeVdpbmRvd1Njcm9sbEFjdGlvbiA9IHByb3BzLm1vdmVCeVdpbmRvd1Njcm9sbCxcbiAgICAgIGxpZnRBY3Rpb24gPSBwcm9wcy5saWZ0LFxuICAgICAgZHJvcEFuaW1hdGlvbkZpbmlzaGVkQWN0aW9uID0gcHJvcHMuZHJvcEFuaW1hdGlvbkZpbmlzaGVkO1xuICB2YXIgZm9yUHVibGlzaGVyID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGRyYWdnYWJsZUlkOiBkcmFnZ2FibGVJZCxcbiAgICAgIGluZGV4OiBpbmRleCxcbiAgICAgIGdldERyYWdnYWJsZVJlZjogZ2V0UmVmXG4gICAgfTtcbiAgfSwgW2RyYWdnYWJsZUlkLCBnZXRSZWYsIGluZGV4XSk7XG4gIHVzZURyYWdnYWJsZURpbWVuc2lvblB1Ymxpc2hlcihmb3JQdWJsaXNoZXIpO1xuICB2YXIgb25MaWZ0ID0gdXNlQ2FsbGJhY2soZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICBzdGFydCgnTElGVCcpO1xuICAgIHZhciBlbCA9IHJlZi5jdXJyZW50O1xuICAgICFlbCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICEhaXNEcmFnRGlzYWJsZWQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdDYW5ub3QgbGlmdCBhIERyYWdnYWJsZSB3aGVuIGl0IGlzIGRpc2FibGVkJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHZhciBjbGllbnRTZWxlY3Rpb24gPSBvcHRpb25zLmNsaWVudFNlbGVjdGlvbixcbiAgICAgICAgbW92ZW1lbnRNb2RlID0gb3B0aW9ucy5tb3ZlbWVudE1vZGU7XG4gICAgbGlmdEFjdGlvbih7XG4gICAgICBpZDogZHJhZ2dhYmxlSWQsXG4gICAgICBjbGllbnRTZWxlY3Rpb246IGNsaWVudFNlbGVjdGlvbixcbiAgICAgIG1vdmVtZW50TW9kZTogbW92ZW1lbnRNb2RlXG4gICAgfSk7XG4gICAgZmluaXNoKCdMSUZUJyk7XG4gIH0sIFtkcmFnZ2FibGVJZCwgaXNEcmFnRGlzYWJsZWQsIGxpZnRBY3Rpb25dKTtcbiAgdmFyIGdldFNob3VsZFJlc3BlY3RGb3JjZVByZXNzID0gdXNlQ2FsbGJhY2soZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBzaG91bGRSZXNwZWN0Rm9yY2VQcmVzcztcbiAgfSwgW3Nob3VsZFJlc3BlY3RGb3JjZVByZXNzXSk7XG4gIHZhciBjYWxsYmFja3MgPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgb25MaWZ0OiBvbkxpZnQsXG4gICAgICBvbk1vdmU6IGZ1bmN0aW9uIG9uTW92ZShjbGllbnRTZWxlY3Rpb24pIHtcbiAgICAgICAgcmV0dXJuIG1vdmVBY3Rpb24oe1xuICAgICAgICAgIGNsaWVudDogY2xpZW50U2VsZWN0aW9uXG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICAgIG9uRHJvcDogZnVuY3Rpb24gb25Ecm9wKCkge1xuICAgICAgICByZXR1cm4gZHJvcEFjdGlvbih7XG4gICAgICAgICAgcmVhc29uOiAnRFJPUCdcbiAgICAgICAgfSk7XG4gICAgICB9LFxuICAgICAgb25DYW5jZWw6IGZ1bmN0aW9uIG9uQ2FuY2VsKCkge1xuICAgICAgICByZXR1cm4gZHJvcEFjdGlvbih7XG4gICAgICAgICAgcmVhc29uOiAnQ0FOQ0VMJ1xuICAgICAgICB9KTtcbiAgICAgIH0sXG4gICAgICBvbk1vdmVVcDogbW92ZVVwQWN0aW9uLFxuICAgICAgb25Nb3ZlRG93bjogbW92ZURvd25BY3Rpb24sXG4gICAgICBvbk1vdmVSaWdodDogbW92ZVJpZ2h0QWN0aW9uLFxuICAgICAgb25Nb3ZlTGVmdDogbW92ZUxlZnRBY3Rpb24sXG4gICAgICBvbldpbmRvd1Njcm9sbDogZnVuY3Rpb24gb25XaW5kb3dTY3JvbGwoKSB7XG4gICAgICAgIHJldHVybiBtb3ZlQnlXaW5kb3dTY3JvbGxBY3Rpb24oe1xuICAgICAgICAgIG5ld1Njcm9sbDogZ2V0V2luZG93U2Nyb2xsKClcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcbiAgfSwgW2Ryb3BBY3Rpb24sIG1vdmVBY3Rpb24sIG1vdmVCeVdpbmRvd1Njcm9sbEFjdGlvbiwgbW92ZURvd25BY3Rpb24sIG1vdmVMZWZ0QWN0aW9uLCBtb3ZlUmlnaHRBY3Rpb24sIG1vdmVVcEFjdGlvbiwgb25MaWZ0XSk7XG4gIHZhciBpc0RyYWdnaW5nID0gbWFwcGVkLnR5cGUgPT09ICdEUkFHR0lORyc7XG4gIHZhciBpc0Ryb3BBbmltYXRpbmcgPSBtYXBwZWQudHlwZSA9PT0gJ0RSQUdHSU5HJyAmJiBCb29sZWFuKG1hcHBlZC5kcm9wcGluZyk7XG4gIHZhciBkcmFnSGFuZGxlQXJncyA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7XG4gICAgICBkcmFnZ2FibGVJZDogZHJhZ2dhYmxlSWQsXG4gICAgICBpc0RyYWdnaW5nOiBpc0RyYWdnaW5nLFxuICAgICAgaXNEcm9wQW5pbWF0aW5nOiBpc0Ryb3BBbmltYXRpbmcsXG4gICAgICBpc0VuYWJsZWQ6ICFpc0RyYWdEaXNhYmxlZCxcbiAgICAgIGNhbGxiYWNrczogY2FsbGJhY2tzLFxuICAgICAgZ2V0RHJhZ2dhYmxlUmVmOiBnZXRSZWYsXG4gICAgICBjYW5EcmFnSW50ZXJhY3RpdmVFbGVtZW50czogY2FuRHJhZ0ludGVyYWN0aXZlRWxlbWVudHMsXG4gICAgICBnZXRTaG91bGRSZXNwZWN0Rm9yY2VQcmVzczogZ2V0U2hvdWxkUmVzcGVjdEZvcmNlUHJlc3NcbiAgICB9O1xuICB9LCBbY2FsbGJhY2tzLCBjYW5EcmFnSW50ZXJhY3RpdmVFbGVtZW50cywgZHJhZ2dhYmxlSWQsIGdldFJlZiwgZ2V0U2hvdWxkUmVzcGVjdEZvcmNlUHJlc3MsIGlzRHJhZ0Rpc2FibGVkLCBpc0RyYWdnaW5nLCBpc0Ryb3BBbmltYXRpbmddKTtcbiAgdmFyIGRyYWdIYW5kbGVQcm9wcyA9IHVzZURyYWdIYW5kbGUoZHJhZ0hhbmRsZUFyZ3MpO1xuICB2YXIgb25Nb3ZlRW5kID0gdXNlQ2FsbGJhY2soZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgaWYgKG1hcHBlZC50eXBlICE9PSAnRFJBR0dJTkcnKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKCFtYXBwZWQuZHJvcHBpbmcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoZXZlbnQucHJvcGVydHlOYW1lICE9PSAndHJhbnNmb3JtJykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGRyb3BBbmltYXRpb25GaW5pc2hlZEFjdGlvbigpO1xuICB9LCBbZHJvcEFuaW1hdGlvbkZpbmlzaGVkQWN0aW9uLCBtYXBwZWRdKTtcbiAgdmFyIHByb3ZpZGVkID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHN0eWxlID0gZ2V0U3R5bGUkMShtYXBwZWQpO1xuICAgIHZhciBvblRyYW5zaXRpb25FbmQgPSBtYXBwZWQudHlwZSA9PT0gJ0RSQUdHSU5HJyAmJiBtYXBwZWQuZHJvcHBpbmcgPyBvbk1vdmVFbmQgOiBudWxsO1xuICAgIHZhciByZXN1bHQgPSB7XG4gICAgICBpbm5lclJlZjogc2V0UmVmLFxuICAgICAgZHJhZ2dhYmxlUHJvcHM6IHtcbiAgICAgICAgJ2RhdGEtcmVhY3QtYmVhdXRpZnVsLWRuZC1kcmFnZ2FibGUnOiBhcHBDb250ZXh0LnN0eWxlLFxuICAgICAgICBzdHlsZTogc3R5bGUsXG4gICAgICAgIG9uVHJhbnNpdGlvbkVuZDogb25UcmFuc2l0aW9uRW5kXG4gICAgICB9LFxuICAgICAgZHJhZ0hhbmRsZVByb3BzOiBkcmFnSGFuZGxlUHJvcHNcbiAgICB9O1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH0sIFthcHBDb250ZXh0LnN0eWxlLCBkcmFnSGFuZGxlUHJvcHMsIG1hcHBlZCwgb25Nb3ZlRW5kLCBzZXRSZWZdKTtcbiAgcmV0dXJuIGNoaWxkcmVuKHByb3ZpZGVkLCBtYXBwZWQuc25hcHNob3QpO1xufVxuXG52YXIgZ2V0Q29tYmluZVdpdGhGcm9tUmVzdWx0ID0gZnVuY3Rpb24gZ2V0Q29tYmluZVdpdGhGcm9tUmVzdWx0KHJlc3VsdCkge1xuICByZXR1cm4gcmVzdWx0LmNvbWJpbmUgPyByZXN1bHQuY29tYmluZS5kcmFnZ2FibGVJZCA6IG51bGw7XG59O1xuXG52YXIgZ2V0Q29tYmluZVdpdGhGcm9tSW1wYWN0ID0gZnVuY3Rpb24gZ2V0Q29tYmluZVdpdGhGcm9tSW1wYWN0KGltcGFjdCkge1xuICByZXR1cm4gaW1wYWN0Lm1lcmdlID8gaW1wYWN0Lm1lcmdlLmNvbWJpbmUuZHJhZ2dhYmxlSWQgOiBudWxsO1xufTtcblxudmFyIG1ha2VNYXBTdGF0ZVRvUHJvcHMkMSA9IGZ1bmN0aW9uIG1ha2VNYXBTdGF0ZVRvUHJvcHMoKSB7XG4gIHZhciBnZXREcmFnZ2luZ1NuYXBzaG90ID0gbWVtb2l6ZU9uZShmdW5jdGlvbiAobW9kZSwgZHJhZ2dpbmdPdmVyLCBjb21iaW5lV2l0aCwgZHJvcHBpbmcpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaXNEcmFnZ2luZzogdHJ1ZSxcbiAgICAgIGlzRHJvcEFuaW1hdGluZzogQm9vbGVhbihkcm9wcGluZyksXG4gICAgICBkcm9wQW5pbWF0aW9uOiBkcm9wcGluZyxcbiAgICAgIG1vZGU6IG1vZGUsXG4gICAgICBkcmFnZ2luZ092ZXI6IGRyYWdnaW5nT3ZlcixcbiAgICAgIGNvbWJpbmVXaXRoOiBjb21iaW5lV2l0aCxcbiAgICAgIGNvbWJpbmVUYXJnZXRGb3I6IG51bGxcbiAgICB9O1xuICB9KTtcbiAgdmFyIGdldFNlY29uZGFyeVNuYXBzaG90ID0gbWVtb2l6ZU9uZShmdW5jdGlvbiAoY29tYmluZVRhcmdldEZvcikge1xuICAgIHJldHVybiB7XG4gICAgICBpc0RyYWdnaW5nOiBmYWxzZSxcbiAgICAgIGlzRHJvcEFuaW1hdGluZzogZmFsc2UsXG4gICAgICBkcm9wQW5pbWF0aW9uOiBudWxsLFxuICAgICAgbW9kZTogbnVsbCxcbiAgICAgIGRyYWdnaW5nT3ZlcjogbnVsbCxcbiAgICAgIGNvbWJpbmVUYXJnZXRGb3I6IGNvbWJpbmVUYXJnZXRGb3IsXG4gICAgICBjb21iaW5lV2l0aDogbnVsbFxuICAgIH07XG4gIH0pO1xuICB2YXIgZGVmYXVsdE1hcFByb3BzID0ge1xuICAgIG1hcHBlZDoge1xuICAgICAgdHlwZTogJ1NFQ09OREFSWScsXG4gICAgICBvZmZzZXQ6IG9yaWdpbixcbiAgICAgIGNvbWJpbmVUYXJnZXRGb3I6IG51bGwsXG4gICAgICBzaG91bGRBbmltYXRlRGlzcGxhY2VtZW50OiB0cnVlLFxuICAgICAgc25hcHNob3Q6IGdldFNlY29uZGFyeVNuYXBzaG90KG51bGwpXG4gICAgfVxuICB9O1xuICB2YXIgbWVtb2l6ZWRPZmZzZXQgPSBtZW1vaXplT25lKGZ1bmN0aW9uICh4LCB5KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHg6IHgsXG4gICAgICB5OiB5XG4gICAgfTtcbiAgfSk7XG4gIHZhciBnZXREcmFnZ2luZ1Byb3BzID0gbWVtb2l6ZU9uZShmdW5jdGlvbiAob2Zmc2V0LCBtb2RlLCBkaW1lbnNpb24sIGRyYWdnaW5nT3ZlciwgY29tYmluZVdpdGgsIGZvcmNlU2hvdWxkQW5pbWF0ZSkge1xuICAgIHJldHVybiB7XG4gICAgICBtYXBwZWQ6IHtcbiAgICAgICAgdHlwZTogJ0RSQUdHSU5HJyxcbiAgICAgICAgZHJvcHBpbmc6IG51bGwsXG4gICAgICAgIGRyYWdnaW5nT3ZlcjogZHJhZ2dpbmdPdmVyLFxuICAgICAgICBjb21iaW5lV2l0aDogY29tYmluZVdpdGgsXG4gICAgICAgIG1vZGU6IG1vZGUsXG4gICAgICAgIG9mZnNldDogb2Zmc2V0LFxuICAgICAgICBkaW1lbnNpb246IGRpbWVuc2lvbixcbiAgICAgICAgZm9yY2VTaG91bGRBbmltYXRlOiBmb3JjZVNob3VsZEFuaW1hdGUsXG4gICAgICAgIHNuYXBzaG90OiBnZXREcmFnZ2luZ1NuYXBzaG90KG1vZGUsIGRyYWdnaW5nT3ZlciwgY29tYmluZVdpdGgsIG51bGwpXG4gICAgICB9XG4gICAgfTtcbiAgfSk7XG4gIHZhciBnZXRTZWNvbmRhcnlQcm9wcyA9IG1lbW9pemVPbmUoZnVuY3Rpb24gKG9mZnNldCwgY29tYmluZVRhcmdldEZvciwgc2hvdWxkQW5pbWF0ZURpc3BsYWNlbWVudCkge1xuICAgIGlmIChjb21iaW5lVGFyZ2V0Rm9yID09PSB2b2lkIDApIHtcbiAgICAgIGNvbWJpbmVUYXJnZXRGb3IgPSBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBtYXBwZWQ6IHtcbiAgICAgICAgdHlwZTogJ1NFQ09OREFSWScsXG4gICAgICAgIG9mZnNldDogb2Zmc2V0LFxuICAgICAgICBjb21iaW5lVGFyZ2V0Rm9yOiBjb21iaW5lVGFyZ2V0Rm9yLFxuICAgICAgICBzaG91bGRBbmltYXRlRGlzcGxhY2VtZW50OiBzaG91bGRBbmltYXRlRGlzcGxhY2VtZW50LFxuICAgICAgICBzbmFwc2hvdDogZ2V0U2Vjb25kYXJ5U25hcHNob3QoY29tYmluZVRhcmdldEZvcilcbiAgICAgIH1cbiAgICB9O1xuICB9KTtcblxuICB2YXIgZ2V0U2Vjb25kYXJ5TW92ZW1lbnQgPSBmdW5jdGlvbiBnZXRTZWNvbmRhcnlNb3ZlbWVudChvd25JZCwgZHJhZ2dpbmdJZCwgaW1wYWN0KSB7XG4gICAgdmFyIG1hcCA9IGltcGFjdC5tb3ZlbWVudC5tYXA7XG4gICAgdmFyIGRpc3BsYWNlbWVudCA9IG1hcFtvd25JZF07XG4gICAgdmFyIG1vdmVtZW50ID0gaW1wYWN0Lm1vdmVtZW50O1xuICAgIHZhciBtZXJnZSA9IGltcGFjdC5tZXJnZTtcbiAgICB2YXIgaXNDb21iaW5lZFdpdGggPSBCb29sZWFuKG1lcmdlICYmIG1lcmdlLmNvbWJpbmUuZHJhZ2dhYmxlSWQgPT09IG93bklkKTtcbiAgICB2YXIgZGlzcGxhY2VkQnkgPSBtb3ZlbWVudC5kaXNwbGFjZWRCeS5wb2ludDtcbiAgICB2YXIgb2Zmc2V0ID0gbWVtb2l6ZWRPZmZzZXQoZGlzcGxhY2VkQnkueCwgZGlzcGxhY2VkQnkueSk7XG5cbiAgICBpZiAoaXNDb21iaW5lZFdpdGgpIHtcbiAgICAgIHJldHVybiBnZXRTZWNvbmRhcnlQcm9wcyhkaXNwbGFjZW1lbnQgPyBvZmZzZXQgOiBvcmlnaW4sIGRyYWdnaW5nSWQsIGRpc3BsYWNlbWVudCA/IGRpc3BsYWNlbWVudC5zaG91bGRBbmltYXRlIDogdHJ1ZSk7XG4gICAgfVxuXG4gICAgaWYgKCFkaXNwbGFjZW1lbnQpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGlmICghZGlzcGxhY2VtZW50LmlzVmlzaWJsZSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIGdldFNlY29uZGFyeVByb3BzKG9mZnNldCwgbnVsbCwgZGlzcGxhY2VtZW50LnNob3VsZEFuaW1hdGUpO1xuICB9O1xuXG4gIHZhciBkcmFnZ2luZ1NlbGVjdG9yID0gZnVuY3Rpb24gZHJhZ2dpbmdTZWxlY3RvcihzdGF0ZSwgb3duUHJvcHMpIHtcbiAgICBpZiAoc3RhdGUuaXNEcmFnZ2luZykge1xuICAgICAgaWYgKHN0YXRlLmNyaXRpY2FsLmRyYWdnYWJsZS5pZCAhPT0gb3duUHJvcHMuZHJhZ2dhYmxlSWQpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIHZhciBvZmZzZXQgPSBzdGF0ZS5jdXJyZW50LmNsaWVudC5vZmZzZXQ7XG4gICAgICB2YXIgZGltZW5zaW9uID0gc3RhdGUuZGltZW5zaW9ucy5kcmFnZ2FibGVzW293blByb3BzLmRyYWdnYWJsZUlkXTtcbiAgICAgIHZhciBtb2RlID0gc3RhdGUubW92ZW1lbnRNb2RlO1xuICAgICAgdmFyIGRyYWdnaW5nT3ZlciA9IHdoYXRJc0RyYWdnZWRPdmVyKHN0YXRlLmltcGFjdCk7XG4gICAgICB2YXIgY29tYmluZVdpdGggPSBnZXRDb21iaW5lV2l0aEZyb21JbXBhY3Qoc3RhdGUuaW1wYWN0KTtcbiAgICAgIHZhciBmb3JjZVNob3VsZEFuaW1hdGUgPSBzdGF0ZS5mb3JjZVNob3VsZEFuaW1hdGU7XG4gICAgICByZXR1cm4gZ2V0RHJhZ2dpbmdQcm9wcyhtZW1vaXplZE9mZnNldChvZmZzZXQueCwgb2Zmc2V0LnkpLCBtb2RlLCBkaW1lbnNpb24sIGRyYWdnaW5nT3ZlciwgY29tYmluZVdpdGgsIGZvcmNlU2hvdWxkQW5pbWF0ZSk7XG4gICAgfVxuXG4gICAgaWYgKHN0YXRlLnBoYXNlID09PSAnRFJPUF9BTklNQVRJTkcnKSB7XG4gICAgICB2YXIgY29tcGxldGVkID0gc3RhdGUuY29tcGxldGVkO1xuXG4gICAgICBpZiAoY29tcGxldGVkLnJlc3VsdC5kcmFnZ2FibGVJZCAhPT0gb3duUHJvcHMuZHJhZ2dhYmxlSWQpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIHZhciBfZGltZW5zaW9uID0gc3RhdGUuZGltZW5zaW9ucy5kcmFnZ2FibGVzW293blByb3BzLmRyYWdnYWJsZUlkXTtcbiAgICAgIHZhciByZXN1bHQgPSBjb21wbGV0ZWQucmVzdWx0O1xuICAgICAgdmFyIF9tb2RlID0gcmVzdWx0Lm1vZGU7XG5cbiAgICAgIHZhciBfZHJhZ2dpbmdPdmVyID0gd2hhdElzRHJhZ2dlZE92ZXJGcm9tUmVzdWx0KHJlc3VsdCk7XG5cbiAgICAgIHZhciBfY29tYmluZVdpdGggPSBnZXRDb21iaW5lV2l0aEZyb21SZXN1bHQocmVzdWx0KTtcblxuICAgICAgdmFyIGR1cmF0aW9uID0gc3RhdGUuZHJvcER1cmF0aW9uO1xuICAgICAgdmFyIGRyb3BwaW5nID0ge1xuICAgICAgICBkdXJhdGlvbjogZHVyYXRpb24sXG4gICAgICAgIGN1cnZlOiBjdXJ2ZXMuZHJvcCxcbiAgICAgICAgbW92ZVRvOiBzdGF0ZS5uZXdIb21lQ2xpZW50T2Zmc2V0LFxuICAgICAgICBvcGFjaXR5OiBfY29tYmluZVdpdGggPyBjb21iaW5lLm9wYWNpdHkuZHJvcCA6IG51bGwsXG4gICAgICAgIHNjYWxlOiBfY29tYmluZVdpdGggPyBjb21iaW5lLnNjYWxlLmRyb3AgOiBudWxsXG4gICAgICB9O1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbWFwcGVkOiB7XG4gICAgICAgICAgdHlwZTogJ0RSQUdHSU5HJyxcbiAgICAgICAgICBvZmZzZXQ6IHN0YXRlLm5ld0hvbWVDbGllbnRPZmZzZXQsXG4gICAgICAgICAgZGltZW5zaW9uOiBfZGltZW5zaW9uLFxuICAgICAgICAgIGRyb3BwaW5nOiBkcm9wcGluZyxcbiAgICAgICAgICBkcmFnZ2luZ092ZXI6IF9kcmFnZ2luZ092ZXIsXG4gICAgICAgICAgY29tYmluZVdpdGg6IF9jb21iaW5lV2l0aCxcbiAgICAgICAgICBtb2RlOiBfbW9kZSxcbiAgICAgICAgICBmb3JjZVNob3VsZEFuaW1hdGU6IG51bGwsXG4gICAgICAgICAgc25hcHNob3Q6IGdldERyYWdnaW5nU25hcHNob3QoX21vZGUsIF9kcmFnZ2luZ092ZXIsIF9jb21iaW5lV2l0aCwgZHJvcHBpbmcpXG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG5cbiAgdmFyIHNlY29uZGFyeVNlbGVjdG9yID0gZnVuY3Rpb24gc2Vjb25kYXJ5U2VsZWN0b3Ioc3RhdGUsIG93blByb3BzKSB7XG4gICAgaWYgKHN0YXRlLmlzRHJhZ2dpbmcpIHtcbiAgICAgIGlmIChzdGF0ZS5jcml0aWNhbC5kcmFnZ2FibGUuaWQgPT09IG93blByb3BzLmRyYWdnYWJsZUlkKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZ2V0U2Vjb25kYXJ5TW92ZW1lbnQob3duUHJvcHMuZHJhZ2dhYmxlSWQsIHN0YXRlLmNyaXRpY2FsLmRyYWdnYWJsZS5pZCwgc3RhdGUuaW1wYWN0KTtcbiAgICB9XG5cbiAgICBpZiAoc3RhdGUucGhhc2UgPT09ICdEUk9QX0FOSU1BVElORycpIHtcbiAgICAgIHZhciBjb21wbGV0ZWQgPSBzdGF0ZS5jb21wbGV0ZWQ7XG5cbiAgICAgIGlmIChjb21wbGV0ZWQucmVzdWx0LmRyYWdnYWJsZUlkID09PSBvd25Qcm9wcy5kcmFnZ2FibGVJZCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGdldFNlY29uZGFyeU1vdmVtZW50KG93blByb3BzLmRyYWdnYWJsZUlkLCBjb21wbGV0ZWQucmVzdWx0LmRyYWdnYWJsZUlkLCBjb21wbGV0ZWQuaW1wYWN0KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcblxuICB2YXIgc2VsZWN0b3IgPSBmdW5jdGlvbiBzZWxlY3RvcihzdGF0ZSwgb3duUHJvcHMpIHtcbiAgICByZXR1cm4gZHJhZ2dpbmdTZWxlY3RvcihzdGF0ZSwgb3duUHJvcHMpIHx8IHNlY29uZGFyeVNlbGVjdG9yKHN0YXRlLCBvd25Qcm9wcykgfHwgZGVmYXVsdE1hcFByb3BzO1xuICB9O1xuXG4gIHJldHVybiBzZWxlY3Rvcjtcbn07XG52YXIgbWFwRGlzcGF0Y2hUb1Byb3BzJDEgPSB7XG4gIGxpZnQ6IGxpZnQsXG4gIG1vdmU6IG1vdmUsXG4gIG1vdmVVcDogbW92ZVVwLFxuICBtb3ZlRG93bjogbW92ZURvd24sXG4gIG1vdmVMZWZ0OiBtb3ZlTGVmdCxcbiAgbW92ZVJpZ2h0OiBtb3ZlUmlnaHQsXG4gIG1vdmVCeVdpbmRvd1Njcm9sbDogbW92ZUJ5V2luZG93U2Nyb2xsLFxuICBkcm9wOiBkcm9wLFxuICBkcm9wQW5pbWF0aW9uRmluaXNoZWQ6IGRyb3BBbmltYXRpb25GaW5pc2hlZFxufTtcbnZhciBkZWZhdWx0UHJvcHMkMSA9IHtcbiAgaXNEcmFnRGlzYWJsZWQ6IGZhbHNlLFxuICBkaXNhYmxlSW50ZXJhY3RpdmVFbGVtZW50QmxvY2tpbmc6IGZhbHNlLFxuICBzaG91bGRSZXNwZWN0Rm9yY2VQcmVzczogZmFsc2Vcbn07XG52YXIgQ29ubmVjdGVkRHJhZ2dhYmxlID0gY29ubmVjdChtYWtlTWFwU3RhdGVUb1Byb3BzJDEsIG1hcERpc3BhdGNoVG9Qcm9wcyQxLCBudWxsLCB7XG4gIGNvbnRleHQ6IFN0b3JlQ29udGV4dCxcbiAgcHVyZTogdHJ1ZSxcbiAgYXJlU3RhdGVQcm9wc0VxdWFsOiBpc1N0cmljdEVxdWFsXG59KShEcmFnZ2FibGUpO1xuQ29ubmVjdGVkRHJhZ2dhYmxlLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcyQxO1xuXG5leHBvcnQgeyBEcmFnRHJvcENvbnRleHQsIENvbm5lY3RlZERyYWdnYWJsZSBhcyBEcmFnZ2FibGUsIENvbm5lY3RlZERyb3BwYWJsZSBhcyBEcm9wcGFibGUsIHJlc2V0U2VydmVyQ29udGV4dCB9O1xuIiwiaW1wb3J0IF9vYmplY3RTcHJlYWQgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFNwcmVhZFwiO1xuXG4vKipcbiAqIEV4dGVybmFsIGRlcGVuZGVuY2llc1xuICovXG5pbXBvcnQgVGFubmluIGZyb20gJ3Rhbm5pbic7XG5pbXBvcnQgbWVtb2l6ZSBmcm9tICdtZW1pemUnO1xuaW1wb3J0IHNwcmludGZqcyBmcm9tICdzcHJpbnRmLWpzJztcbi8qKlxuICogRGVmYXVsdCBsb2NhbGUgZGF0YSB0byB1c2UgZm9yIFRhbm5pbiBkb21haW4gd2hlbiBub3Qgb3RoZXJ3aXNlIHByb3ZpZGVkLlxuICogQXNzdW1lcyBhbiBFbmdsaXNoIHBsdXJhbCBmb3JtcyBleHByZXNzaW9uLlxuICpcbiAqIEB0eXBlIHtPYmplY3R9XG4gKi9cblxudmFyIERFRkFVTFRfTE9DQUxFX0RBVEEgPSB7XG4gICcnOiB7XG4gICAgcGx1cmFsX2Zvcm1zOiAncGx1cmFsPShuIT0xKSdcbiAgfVxufTtcbi8qKlxuICogTG9nIHRvIGNvbnNvbGUsIG9uY2UgcGVyIG1lc3NhZ2U7IG9yIG1vcmUgcHJlY2lzZWx5LCBwZXIgcmVmZXJlbnRpYWxseSBlcXVhbFxuICogYXJndW1lbnQgc2V0LiBCZWNhdXNlIEplZCB0aHJvd3MgZXJyb3JzLCB3ZSBsb2cgdGhlc2UgdG8gdGhlIGNvbnNvbGUgaW5zdGVhZFxuICogdG8gYXZvaWQgY3Jhc2hpbmcgdGhlIGFwcGxpY2F0aW9uLlxuICpcbiAqIEBwYXJhbSB7Li4uKn0gYXJncyBBcmd1bWVudHMgdG8gcGFzcyB0byBgY29uc29sZS5lcnJvcmBcbiAqL1xuXG52YXIgbG9nRXJyb3JPbmNlID0gbWVtb2l6ZShjb25zb2xlLmVycm9yKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jb25zb2xlXG5cbi8qKlxuICogVGhlIHVuZGVybHlpbmcgaW5zdGFuY2Ugb2YgVGFubmluIHRvIHdoaWNoIGV4cG9ydGVkIGZ1bmN0aW9ucyBpbnRlcmZhY2UuXG4gKlxuICogQHR5cGUge1Rhbm5pbn1cbiAqL1xuXG52YXIgaTE4biA9IG5ldyBUYW5uaW4oe30pO1xuLyoqXG4gKiBNZXJnZXMgbG9jYWxlIGRhdGEgaW50byB0aGUgVGFubmluIGluc3RhbmNlIGJ5IGRvbWFpbi4gQWNjZXB0cyBkYXRhIGluIGFcbiAqIEplZC1mb3JtYXR0ZWQgSlNPTiBvYmplY3Qgc2hhcGUuXG4gKlxuICogQHNlZSBodHRwOi8vbWVzc2FnZWZvcm1hdC5naXRodWIuaW8vSmVkL1xuICpcbiAqIEBwYXJhbSB7P09iamVjdH0gZGF0YSAgIExvY2FsZSBkYXRhIGNvbmZpZ3VyYXRpb24uXG4gKiBAcGFyYW0gez9zdHJpbmd9IGRvbWFpbiBEb21haW4gZm9yIHdoaWNoIGNvbmZpZ3VyYXRpb24gYXBwbGllcy5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gc2V0TG9jYWxlRGF0YShkYXRhKSB7XG4gIHZhciBkb21haW4gPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6ICdkZWZhdWx0JztcbiAgaTE4bi5kYXRhW2RvbWFpbl0gPSBfb2JqZWN0U3ByZWFkKHt9LCBERUZBVUxUX0xPQ0FMRV9EQVRBLCBpMThuLmRhdGFbZG9tYWluXSwgZGF0YSk7IC8vIFBvcHVsYXRlIGRlZmF1bHQgZG9tYWluIGNvbmZpZ3VyYXRpb24gKHN1cHBvcnRlZCBsb2NhbGUgZGF0ZSB3aGljaCBvbWl0c1xuICAvLyBhIHBsdXJhbCBmb3JtcyBleHByZXNzaW9uKS5cblxuICBpMThuLmRhdGFbZG9tYWluXVsnJ10gPSBfb2JqZWN0U3ByZWFkKHt9LCBERUZBVUxUX0xPQ0FMRV9EQVRBWycnXSwgaTE4bi5kYXRhW2RvbWFpbl1bJyddKTtcbn1cbi8qKlxuICogV3JhcHBlciBmb3IgVGFubmluJ3MgYGRjbnBnZXR0ZXh0YC4gUG9wdWxhdGVzIGRlZmF1bHQgbG9jYWxlIGRhdGEgaWYgbm90XG4gKiBvdGhlcndpc2UgcHJldmlvdXNseSBhc3NpZ25lZC5cbiAqXG4gKiBAcGFyYW0gez9zdHJpbmd9IGRvbWFpbiAgRG9tYWluIHRvIHJldHJpZXZlIHRoZSB0cmFuc2xhdGVkIHRleHQuXG4gKiBAcGFyYW0gez9zdHJpbmd9IGNvbnRleHQgQ29udGV4dCBpbmZvcm1hdGlvbiBmb3IgdGhlIHRyYW5zbGF0b3JzLlxuICogQHBhcmFtIHtzdHJpbmd9ICBzaW5nbGUgIFRleHQgdG8gdHJhbnNsYXRlIGlmIG5vbi1wbHVyYWwuIFVzZWQgYXMgZmFsbGJhY2tcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWUgb24gYSBjYXVnaHQgZXJyb3IuXG4gKiBAcGFyYW0gez9zdHJpbmd9IHBsdXJhbCAgVGhlIHRleHQgdG8gYmUgdXNlZCBpZiB0aGUgbnVtYmVyIGlzIHBsdXJhbC5cbiAqIEBwYXJhbSB7P251bWJlcn0gbnVtYmVyICBUaGUgbnVtYmVyIHRvIGNvbXBhcmUgYWdhaW5zdCB0byB1c2UgZWl0aGVyIHRoZVxuICogICAgICAgICAgICAgICAgICAgICAgICAgIHNpbmd1bGFyIG9yIHBsdXJhbCBmb3JtLlxuICpcbiAqIEByZXR1cm4ge3N0cmluZ30gVGhlIHRyYW5zbGF0ZWQgc3RyaW5nLlxuICovXG5cbmZ1bmN0aW9uIGRjbnBnZXR0ZXh0KCkge1xuICB2YXIgZG9tYWluID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiAnZGVmYXVsdCc7XG4gIHZhciBjb250ZXh0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7XG4gIHZhciBzaW5nbGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZDtcbiAgdmFyIHBsdXJhbCA9IGFyZ3VtZW50cy5sZW5ndGggPiAzID8gYXJndW1lbnRzWzNdIDogdW5kZWZpbmVkO1xuICB2YXIgbnVtYmVyID0gYXJndW1lbnRzLmxlbmd0aCA+IDQgPyBhcmd1bWVudHNbNF0gOiB1bmRlZmluZWQ7XG5cbiAgaWYgKCFpMThuLmRhdGFbZG9tYWluXSkge1xuICAgIHNldExvY2FsZURhdGEodW5kZWZpbmVkLCBkb21haW4pO1xuICB9XG5cbiAgcmV0dXJuIGkxOG4uZGNucGdldHRleHQoZG9tYWluLCBjb250ZXh0LCBzaW5nbGUsIHBsdXJhbCwgbnVtYmVyKTtcbn1cbi8qKlxuICogUmV0cmlldmUgdGhlIHRyYW5zbGF0aW9uIG9mIHRleHQuXG4gKlxuICogQHNlZSBodHRwczovL2RldmVsb3Blci53b3JkcHJlc3Mub3JnL3JlZmVyZW5jZS9mdW5jdGlvbnMvX18vXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9ICB0ZXh0ICAgVGV4dCB0byB0cmFuc2xhdGUuXG4gKiBAcGFyYW0gez9zdHJpbmd9IGRvbWFpbiBEb21haW4gdG8gcmV0cmlldmUgdGhlIHRyYW5zbGF0ZWQgdGV4dC5cbiAqXG4gKiBAcmV0dXJuIHtzdHJpbmd9IFRyYW5zbGF0ZWQgdGV4dC5cbiAqL1xuXG5cbmV4cG9ydCBmdW5jdGlvbiBfXyh0ZXh0LCBkb21haW4pIHtcbiAgcmV0dXJuIGRjbnBnZXR0ZXh0KGRvbWFpbiwgdW5kZWZpbmVkLCB0ZXh0KTtcbn1cbi8qKlxuICogUmV0cmlldmUgdHJhbnNsYXRlZCBzdHJpbmcgd2l0aCBnZXR0ZXh0IGNvbnRleHQuXG4gKlxuICogQHNlZSBodHRwczovL2RldmVsb3Blci53b3JkcHJlc3Mub3JnL3JlZmVyZW5jZS9mdW5jdGlvbnMvX3gvXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9ICB0ZXh0ICAgIFRleHQgdG8gdHJhbnNsYXRlLlxuICogQHBhcmFtIHtzdHJpbmd9ICBjb250ZXh0IENvbnRleHQgaW5mb3JtYXRpb24gZm9yIHRoZSB0cmFuc2xhdG9ycy5cbiAqIEBwYXJhbSB7P3N0cmluZ30gZG9tYWluICBEb21haW4gdG8gcmV0cmlldmUgdGhlIHRyYW5zbGF0ZWQgdGV4dC5cbiAqXG4gKiBAcmV0dXJuIHtzdHJpbmd9IFRyYW5zbGF0ZWQgY29udGV4dCBzdHJpbmcgd2l0aG91dCBwaXBlLlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBfeCh0ZXh0LCBjb250ZXh0LCBkb21haW4pIHtcbiAgcmV0dXJuIGRjbnBnZXR0ZXh0KGRvbWFpbiwgY29udGV4dCwgdGV4dCk7XG59XG4vKipcbiAqIFRyYW5zbGF0ZXMgYW5kIHJldHJpZXZlcyB0aGUgc2luZ3VsYXIgb3IgcGx1cmFsIGZvcm0gYmFzZWQgb24gdGhlIHN1cHBsaWVkXG4gKiBudW1iZXIuXG4gKlxuICogQHNlZSBodHRwczovL2RldmVsb3Blci53b3JkcHJlc3Mub3JnL3JlZmVyZW5jZS9mdW5jdGlvbnMvX24vXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9ICBzaW5nbGUgVGhlIHRleHQgdG8gYmUgdXNlZCBpZiB0aGUgbnVtYmVyIGlzIHNpbmd1bGFyLlxuICogQHBhcmFtIHtzdHJpbmd9ICBwbHVyYWwgVGhlIHRleHQgdG8gYmUgdXNlZCBpZiB0aGUgbnVtYmVyIGlzIHBsdXJhbC5cbiAqIEBwYXJhbSB7bnVtYmVyfSAgbnVtYmVyIFRoZSBudW1iZXIgdG8gY29tcGFyZSBhZ2FpbnN0IHRvIHVzZSBlaXRoZXIgdGhlXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICBzaW5ndWxhciBvciBwbHVyYWwgZm9ybS5cbiAqIEBwYXJhbSB7P3N0cmluZ30gZG9tYWluIERvbWFpbiB0byByZXRyaWV2ZSB0aGUgdHJhbnNsYXRlZCB0ZXh0LlxuICpcbiAqIEByZXR1cm4ge3N0cmluZ30gVGhlIHRyYW5zbGF0ZWQgc2luZ3VsYXIgb3IgcGx1cmFsIGZvcm0uXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIF9uKHNpbmdsZSwgcGx1cmFsLCBudW1iZXIsIGRvbWFpbikge1xuICByZXR1cm4gZGNucGdldHRleHQoZG9tYWluLCB1bmRlZmluZWQsIHNpbmdsZSwgcGx1cmFsLCBudW1iZXIpO1xufVxuLyoqXG4gKiBUcmFuc2xhdGVzIGFuZCByZXRyaWV2ZXMgdGhlIHNpbmd1bGFyIG9yIHBsdXJhbCBmb3JtIGJhc2VkIG9uIHRoZSBzdXBwbGllZFxuICogbnVtYmVyLCB3aXRoIGdldHRleHQgY29udGV4dC5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLndvcmRwcmVzcy5vcmcvcmVmZXJlbmNlL2Z1bmN0aW9ucy9fbngvXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9ICBzaW5nbGUgIFRoZSB0ZXh0IHRvIGJlIHVzZWQgaWYgdGhlIG51bWJlciBpcyBzaW5ndWxhci5cbiAqIEBwYXJhbSB7c3RyaW5nfSAgcGx1cmFsICBUaGUgdGV4dCB0byBiZSB1c2VkIGlmIHRoZSBudW1iZXIgaXMgcGx1cmFsLlxuICogQHBhcmFtIHtudW1iZXJ9ICBudW1iZXIgIFRoZSBudW1iZXIgdG8gY29tcGFyZSBhZ2FpbnN0IHRvIHVzZSBlaXRoZXIgdGhlXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgc2luZ3VsYXIgb3IgcGx1cmFsIGZvcm0uXG4gKiBAcGFyYW0ge3N0cmluZ30gIGNvbnRleHQgQ29udGV4dCBpbmZvcm1hdGlvbiBmb3IgdGhlIHRyYW5zbGF0b3JzLlxuICogQHBhcmFtIHs/c3RyaW5nfSBkb21haW4gIERvbWFpbiB0byByZXRyaWV2ZSB0aGUgdHJhbnNsYXRlZCB0ZXh0LlxuICpcbiAqIEByZXR1cm4ge3N0cmluZ30gVGhlIHRyYW5zbGF0ZWQgc2luZ3VsYXIgb3IgcGx1cmFsIGZvcm0uXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIF9ueChzaW5nbGUsIHBsdXJhbCwgbnVtYmVyLCBjb250ZXh0LCBkb21haW4pIHtcbiAgcmV0dXJuIGRjbnBnZXR0ZXh0KGRvbWFpbiwgY29udGV4dCwgc2luZ2xlLCBwbHVyYWwsIG51bWJlcik7XG59XG4vKipcbiAqIFJldHVybnMgYSBmb3JtYXR0ZWQgc3RyaW5nLiBJZiBhbiBlcnJvciBvY2N1cnMgaW4gYXBwbHlpbmcgdGhlIGZvcm1hdCwgdGhlXG4gKiBvcmlnaW5hbCBmb3JtYXQgc3RyaW5nIGlzIHJldHVybmVkLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSAgIGZvcm1hdCAgVGhlIGZvcm1hdCBvZiB0aGUgc3RyaW5nIHRvIGdlbmVyYXRlLlxuICogQHBhcmFtIHsuLi5zdHJpbmd9IGFyZ3MgQXJndW1lbnRzIHRvIGFwcGx5IHRvIHRoZSBmb3JtYXQuXG4gKlxuICogQHNlZSBodHRwOi8vd3d3LmRpdmVpbnRvamF2YXNjcmlwdC5jb20vcHJvamVjdHMvamF2YXNjcmlwdC1zcHJpbnRmXG4gKlxuICogQHJldHVybiB7c3RyaW5nfSBUaGUgZm9ybWF0dGVkIHN0cmluZy5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gc3ByaW50Zihmb3JtYXQpIHtcbiAgdHJ5IHtcbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gc3ByaW50ZmpzLnNwcmludGYuYXBwbHkoc3ByaW50ZmpzLCBbZm9ybWF0XS5jb25jYXQoYXJncykpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGxvZ0Vycm9yT25jZSgnc3ByaW50ZiBlcnJvcjogXFxuXFxuJyArIGVycm9yLnRvU3RyaW5nKCkpO1xuICAgIHJldHVybiBmb3JtYXQ7XG4gIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCIsIi8vIEV4dGVybmFsXG5pbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IGFwaUZldGNoIGZyb20gJ0B3b3JkcHJlc3MvYXBpLWZldGNoJztcbmltcG9ydCB7IGRlYm91bmNlIH0gZnJvbSAnLi4vdXRpbHMvZGVib3VuY2UnO1xuaW1wb3J0IHsgcGx1Y2sgfSBmcm9tICcuLi91dGlscy9wbHVjayc7XG5pbXBvcnQgeyBEcmFnRHJvcENvbnRleHQsIERyb3BwYWJsZSwgRHJhZ2dhYmxlIH0gZnJvbSAncmVhY3QtYmVhdXRpZnVsLWRuZCc7XG5pbXBvcnQgeyBfXyB9IGZyb20gJ0B3b3JkcHJlc3MvaTE4bic7XG5cbmFwaUZldGNoLnVzZSggYXBpRmV0Y2guY3JlYXRlUm9vdFVSTE1pZGRsZXdhcmUoIHdpbmRvdy5lcE9yZGVyaW5nLnJlc3RBcGlSb290ICkgKTtcblxuLyoqXG4gKiBQb2ludGVyIGNvbXBvbmVudFxuICovXG5leHBvcnQgY2xhc3MgUG9pbnRlcnMgZXh0ZW5kcyBDb21wb25lbnQge1xuXG5cdHRpdGxlSW5wdXQgPSBudWxsO1xuXG5cdC8qKlxuXHQgKiBJbml0aWFsaXplcyB0aGUgY29tcG9uZW50IHdpdGggaW5pdGlhbCBzdGF0ZSBzZXQgYnkgV1Bcblx0ICpcblx0ICogQHBhcmFtIHByb3BzXG5cdCAqL1xuXHRjb25zdHJ1Y3RvciggcHJvcHMgKSB7XG5cdFx0c3VwZXIoIHByb3BzICk7XG5cblx0XHQvLyBXZSBuZWVkIHRvIGtub3cgdGhlIHRpdGxlIG9mIHRoZSBwYWdlIGFuZCByZWFjdCB0byBjaGFuZ2VzIHNpbmNlIHRoaXMgaXMgdGhlIHF1ZXJ5IHdlIHNlYXJjaCBmb3Jcblx0XHR0aGlzLnRpdGxlSW5wdXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCggJ3RpdGxlJyApO1xuXG5cdFx0dGhpcy5zdGF0ZSA9IHtcblx0XHRcdHBvaW50ZXJzOiB3aW5kb3cuZXBPcmRlcmluZy5wb2ludGVycyxcblx0XHRcdHBvc3RzOiB3aW5kb3cuZXBPcmRlcmluZy5wb3N0cyxcblx0XHRcdHRpdGxlOiB0aGlzLnRpdGxlSW5wdXQudmFsdWUsXG5cdFx0XHRkZWZhdWx0UmVzdWx0czoge30sXG5cdFx0XHRzZWFyY2hUZXh0OiAnJyxcblx0XHRcdHNlYXJjaFJlc3VsdHM6IHt9LFxuXHRcdH07XG5cblx0XHR0aGlzLnRpdGxlSW5wdXQuYWRkRXZlbnRMaXN0ZW5lciggJ2tleXVwJywgZGVib3VuY2UoIHRoaXMuaGFuZGxlVGl0bGVDaGFuZ2UsIDIwMCApICk7XG5cblx0XHRpZiAoIDAgPCB0aGlzLnN0YXRlLnRpdGxlLmxlbmd0aCApIHtcblx0XHRcdHRoaXMuZ2V0RGVmYXVsdFJlc3VsdHMoKTtcblx0XHR9XG5cdH1cblxuXHRoYW5kbGVUaXRsZUNoYW5nZSA9ICgpID0+IHtcblx0XHR0aGlzLnNldFN0YXRlKCB7IHRpdGxlOiB0aGlzLnRpdGxlSW5wdXQudmFsdWUgfSApO1xuXHRcdHRoaXMuZGVib3VuY2VkRGVmYXVsdFJlc3VsdHMoKTtcblx0fTtcblxuXHRkZWJvdW5jZWREZWZhdWx0UmVzdWx0cyA9IGRlYm91bmNlKCAoKSA9PiB7XG5cdFx0dGhpcy5nZXREZWZhdWx0UmVzdWx0cygpO1xuXHR9LCAyMDAgKTtcblxuXHRnZXREZWZhdWx0UmVzdWx0cyA9ICgpID0+IHtcblx0XHRjb25zdCBzZWFyY2hUZXJtID0gdGhpcy5zdGF0ZS50aXRsZTtcblxuXHRcdGFwaUZldGNoKCB7XG5cdFx0XHRwYXRoOiBgL2VsYXN0aWNwcmVzcy92MS9wb2ludGVyX3ByZXZpZXc/cz0ke3NlYXJjaFRlcm19YCxcblx0XHR9ICkudGhlbiggcmVzdWx0ID0+IHtcblxuXHRcdFx0Y29uc3QgeyBkZWZhdWx0UmVzdWx0cyB9ID0gdGhpcy5zdGF0ZTtcblxuXHRcdFx0ZGVmYXVsdFJlc3VsdHNbIHNlYXJjaFRlcm0gXSA9IHJlc3VsdDtcblxuXHRcdFx0dGhpcy5zZXRTdGF0ZSggeyBkZWZhdWx0UmVzdWx0cyB9ICk7XG5cdFx0fSApO1xuXHR9O1xuXG5cdHJlbW92ZVBvaW50ZXIgPSAoIHBvaW50ZXIgKSA9PiB7XG5cdFx0bGV0IHsgcG9pbnRlcnMgfSA9IHRoaXMuc3RhdGU7XG5cblx0XHRkZWxldGUgcG9pbnRlcnNbIHBvaW50ZXJzLmluZGV4T2YoIHBvaW50ZXIgKSBdO1xuXHRcdHBvaW50ZXJzID0gcG9pbnRlcnMuZmlsdGVyKCBpdGVtID0+IG51bGwgIT09IGl0ZW0gKTtcblxuXHRcdHRoaXMuc2V0U3RhdGUoIHsgcG9pbnRlcnMgfSApO1xuXHR9O1xuXG5cdGdldE1lcmdlZFBvc3RzID0gKCkgPT4ge1xuXHRcdGxldCBtZXJnZWQgPSB0aGlzLnN0YXRlLmRlZmF1bHRSZXN1bHRzWyB0aGlzLnN0YXRlLnRpdGxlIF0uc2xpY2UoKTtcblx0XHRsZXQgcG9pbnRlcnMgPSB0aGlzLnN0YXRlLnBvaW50ZXJzO1xuXG5cdFx0Y29uc3Qgc2V0SWRzID0ge307XG5cdFx0bWVyZ2VkLm1hcCggaXRlbSA9PiB7XG5cdFx0XHRzZXRJZHNbIGl0ZW0uSUQgXSA9IGl0ZW07XG5cdFx0fSApO1xuXG5cdFx0cG9pbnRlcnMgPSBwb2ludGVycy5zb3J0KCAoIGEsIGIgKSA9PiB7XG5cdFx0XHRyZXR1cm4gYS5vcmRlciA+IGIub3JkZXIgPyAxIDogLTE7XG5cdFx0fSApO1xuXG5cdFx0cG9pbnRlcnMubWFwKCBwb2ludGVyID0+IHtcblx0XHRcdC8vIFJlbW92ZSB0aGUgb3JpZ2luYWwgaWYgYSBkdXBsaWNhdGVcblx0XHRcdGlmICggc2V0SWRzWyBwb2ludGVyLklEIF0gKSB7XG5cdFx0XHRcdGRlbGV0ZSBtZXJnZWRbIG1lcmdlZC5pbmRleE9mKCBzZXRJZHNbIHBvaW50ZXIuSUQgXSApIF07XG5cdFx0XHRcdG1lcmdlZCA9IG1lcmdlZC5maWx0ZXIoIGl0ZW0gPT4gaXRlbSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJbnNlcnQgaW50byBwcm9wZXIgbG9jYXRpb25cblx0XHRcdG1lcmdlZC5zcGxpY2UoIHBhcnNlSW50KCBwb2ludGVyLm9yZGVyLCAxMCApIC0gMSwgMCwgcG9pbnRlciApO1xuXHRcdH0gKTtcblxuXHRcdHJldHVybiBtZXJnZWQ7XG5cdH07XG5cblx0ZG9TZWFyY2ggPSBkZWJvdW5jZSggKCkgPT4ge1xuXHRcdGNvbnN0IHNlYXJjaFRlcm0gPSB0aGlzLnN0YXRlLnNlYXJjaFRleHQ7XG5cblx0XHQvLyBTZXQgbG9hZGluZyBzdGF0ZVxuXHRcdGNvbnN0IHsgc2VhcmNoUmVzdWx0cyB9ID0gdGhpcy5zdGF0ZTtcblx0XHRzZWFyY2hSZXN1bHRzWyBzZWFyY2hUZXJtIF0gPSBmYWxzZTtcblx0XHR0aGlzLnNldFN0YXRlKCB7IHNlYXJjaFJlc3VsdHMgfSApO1xuXG5cdFx0YXBpRmV0Y2goIHtcblx0XHRcdHBhdGg6IGAvZWxhc3RpY3ByZXNzL3YxL3BvaW50ZXJfc2VhcmNoP3M9JHtzZWFyY2hUZXJtfWBcblx0XHR9ICkudGhlbiggcmVzdWx0ID0+IHtcblx0XHRcdGNvbnN0IHsgc2VhcmNoUmVzdWx0cyB9ID0gdGhpcy5zdGF0ZTtcblxuXHRcdFx0c2VhcmNoUmVzdWx0c1sgc2VhcmNoVGVybSBdID0gcmVzdWx0O1xuXG5cdFx0XHR0aGlzLnNldFN0YXRlKCB7IHNlYXJjaFJlc3VsdHMgfSApO1xuXHRcdH0gKTtcblx0fSwgMjAwICk7XG5cblx0LyoqXG5cdCAqIEdldHMgdGhlIG5leHQgYXZhaWxhYmxlIHBvc2l0aW9uIGZvciBhIHBvaW50ZXJcblx0ICogQHJldHVybnMge251bWJlcn1cblx0ICovXG5cdGdldE5leHRBdmFpbGFibGVQb3NpdGlvbiA9ICgpID0+IHtcblx0XHRjb25zdCB7IHBvaW50ZXJzIH0gPSB0aGlzLnN0YXRlO1xuXHRcdGNvbnN0IGF2YWlsYWJsZVBvc2l0aW9ucyA9IHt9O1xuXG5cdFx0Zm9yICggbGV0IGkgPSAxOyBpIDw9IHdpbmRvdy5lcE9yZGVyaW5nLnBvc3RzUGVyUGFnZTsgaSsrICkge1xuXHRcdFx0YXZhaWxhYmxlUG9zaXRpb25zWyBpIF0gPSB0cnVlO1xuXHRcdH1cblxuXHRcdHBvaW50ZXJzLm1hcCggaXRlbSA9PiB7XG5cdFx0XHRkZWxldGUgYXZhaWxhYmxlUG9zaXRpb25zWyBpdGVtLm9yZGVyIF07XG5cdFx0fSApO1xuXG5cdFx0Y29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKCBhdmFpbGFibGVQb3NpdGlvbnMgKTtcblxuXHRcdGlmICggMCA9PT0ga2V5cy5sZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHBhcnNlSW50KCBrZXlzWzBdLCAxMCApO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBBZGRzIGEgbmV3IHBvaW50ZXIuIFdlIHBsYWNlIHRoZSBuZXcgcG9pbnRlciBhdCB0aGUgaGlnaGVzdCBhdmFpbGFibGUgcG9zaXRpb25cblx0ICpcblx0ICogQHBhcmFtIHBvc3Rcblx0ICovXG5cdGFkZFBvaW50ZXIgPSAoIHBvc3QgKSA9PiB7XG5cdFx0Y29uc3QgaWQgPSBwb3N0LklEO1xuXHRcdGNvbnN0IHsgcG9zdHMsIHBvaW50ZXJzIH0gPSB0aGlzLnN0YXRlO1xuXG5cdFx0aWYgKCAhIHBvc3RzWyBpZCBdICkge1xuXHRcdFx0cG9zdHNbIGlkIF0gPSBwb3N0O1xuXHRcdFx0dGhpcy5zZXRTdGF0ZSggeyBwb3N0cyB9ICk7XG5cdFx0fVxuXG5cdFx0Y29uc3QgcG9zaXRpb24gPSB0aGlzLmdldE5leHRBdmFpbGFibGVQb3NpdGlvbigpO1xuXG5cdFx0aWYgKCAhIHBvc2l0aW9uICkge1xuXHRcdFx0d2luZG93LmFsZXJ0KCBfXyggJ1lvdSBoYXZlIGFkZGVkIHRoZSBtYXhpbXVtIG51bWJlciBvZiBjdXN0b20gcmVzdWx0cy4nLCAnZWxhc3RpY3ByZXNzJyApICk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tYWxlcnRcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRwb2ludGVycy5wdXNoKCB7XG5cdFx0XHRJRDogaWQsXG5cdFx0XHRvcmRlcjogcG9zaXRpb24sXG5cdFx0fSApO1xuXG5cdFx0dGhpcy5zZXRTdGF0ZSggeyBwb2ludGVycyB9ICk7XG5cdH07XG5cblx0LyoqXG5cdCAqIENhbGxiYWNrIHdoZW4gZHJhZy9kcm9wIGlzIGNvbXBsZXRlLlxuXHQgKlxuXHQgKiBPbmx5IHRoZSBwb2ludGVycyBhcmUgYWJsZSB0byBiZSBkcmFnZ2VkIGFyb3VuZCwgc28gYWxsIHdlIG5lZWQgdG8gZG8gaXMgaW5jcmVhc2UgYW55IHBvaW50ZXIgYnkgb25lIHRoYXQgaXNcblx0ICogZWl0aGVyIGF0IHRoZSBjdXJyZW50IHBvc2l0aW9uIG9yIGdyZWF0ZXJcblx0ICpcblx0ICogQHBhcmFtIHJlc3VsdFxuXHQgKi9cblx0b25EcmFnQ29tcGxldGUgPSAoIHJlc3VsdCApID0+IHtcblx0XHQvLyBkcm9wcGVkIG91dHNpZGUgdGhlIGxpc3Rcblx0XHRpZiAoICEgcmVzdWx0LmRlc3RpbmF0aW9uICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGNvbnN0IGl0ZW1zID0gdGhpcy5nZXRNZXJnZWRQb3N0cygpO1xuXG5cdFx0Ly8gT2Zmc2V0dGluZyBpbmRleGVzIHdoZW4gb3ZlciBwb3N0cyBwZXIgcGFnZSB0byBhY2NvdW50IGZvciB0aGUgbm9uLXNvcnRhYmxlIG5vdGljZVxuXHRcdGNvbnN0IHBwcCA9IHBhcnNlSW50KCB3aW5kb3cuZXBPcmRlcmluZy5wb3N0c1BlclBhZ2UsIDEwICk7XG5cdFx0Y29uc3Qgc3RhcnRJbmRleCA9IHJlc3VsdC5zb3VyY2UuaW5kZXggPj0gcHBwID8gcmVzdWx0LnNvdXJjZS5pbmRleCAtIDEgOiByZXN1bHQuc291cmNlLmluZGV4O1xuXHRcdGNvbnN0IGVuZEluZGV4ID0gcmVzdWx0LmRlc3RpbmF0aW9uLmluZGV4ID4gcHBwID8gcmVzdWx0LmRlc3RpbmF0aW9uLmluZGV4IC0gMSA6IHJlc3VsdC5kZXN0aW5hdGlvbi5pbmRleDtcblxuXHRcdGNvbnN0IFtyZW1vdmVkXSA9IGl0ZW1zLnNwbGljZSggc3RhcnRJbmRleCwgMSApO1xuXHRcdGl0ZW1zLnNwbGljZSggZW5kSW5kZXgsIDAsIHJlbW92ZWQgKTtcblxuXHRcdC8vIE5vdyBfYWxsXyB0aGUgaXRlbXMgYXJlIGluIG9yZGVyIC0gZ3JhYiB0aGUgcG9pbnRlcnMgYW5kIHNldCB0aGUgbmV3IHBvc2l0aW9ucyB0byBzdGF0ZVxuXHRcdGNvbnN0IHBvaW50ZXJzID0gW107XG5cblx0XHRpdGVtcy5tYXAoICggaXRlbSwgaW5kZXggKSA9PiB7XG5cdFx0XHRpZiAoIGl0ZW0ub3JkZXIgKSB7XG5cdFx0XHRcdC8vIFJlb3JkZXJpbmcgYW4gZXhpc3RpbmcgcG9pbnRlclxuXHRcdFx0XHRwb2ludGVycy5wdXNoKCB7XG5cdFx0XHRcdFx0SUQ6IGl0ZW0uSUQsXG5cdFx0XHRcdFx0b3JkZXI6IGluZGV4ICsgMSxcblx0XHRcdFx0fSApO1xuXHRcdFx0fSBlbHNlIGlmICggaXRlbS5JRCA9PT0gcmVzdWx0LmRyYWdnYWJsZUlkICkge1xuXHRcdFx0XHQvLyBBZGRpbmcgYSBkZWZhdWx0IHBvc3QgdG8gdGhlIHBvaW50ZXJzIGFycmF5XG5cdFx0XHRcdHBvaW50ZXJzLnB1c2goIHtcblx0XHRcdFx0XHRJRDogaXRlbS5JRCxcblx0XHRcdFx0XHRvcmRlcjogaW5kZXggKyAxLFxuXHRcdFx0XHR9ICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXG5cdFx0dGhpcy5zZXRTdGF0ZSggeyBwb2ludGVycyB9ICk7XG5cdH07XG5cblx0LyoqXG5cdCAqIFJlbmRlcnMgdGhlIGNvbXBvbmVudFxuXHQgKlxuXHQgKiBAcmV0dXJucyB7Kn1cblx0ICovXG5cdHJlbmRlcigpIHtcblx0XHRjb25zdCB7IHBvc3RzLCBkZWZhdWx0UmVzdWx0cyB9ID0gdGhpcy5zdGF0ZTtcblxuXHRcdGlmICggMCA9PT0gdGhpcy5zdGF0ZS50aXRsZS5sZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4gKFxuXHRcdFx0XHQ8ZGl2IGNsYXNzTmFtZT1cIm5ldy1wb3N0XCI+XG5cdFx0XHRcdFx0PHA+eyBfXyggJ0VudGVyIHlvdXIgc2VhcmNoIHF1ZXJ5IGFib3ZlIHRvIHByZXZpZXcgdGhlIHJlc3VsdHMuJywgJ2VsYXN0aWNwcmVzcycgKSB9PC9wPlxuXHRcdFx0XHQ8L2Rpdj5cblx0XHRcdCk7XG5cdFx0fVxuXG5cdFx0aWYgKCAhIGRlZmF1bHRSZXN1bHRzWyB0aGlzLnN0YXRlLnRpdGxlIF0gKSB7XG5cdFx0XHRyZXR1cm4gKFxuXHRcdFx0XHQ8ZGl2IGNsYXNzTmFtZT1cImxvYWRpbmdcIj5cblx0XHRcdFx0XHQ8ZGl2IGNsYXNzTmFtZT1cInNwaW5uZXIgaXMtYWN0aXZlXCI+PC9kaXY+XG5cdFx0XHRcdFx0PHNwYW4+eyBfXyggJ0xvYWRpbmcgUmVzdWx0IFByZXZpZXcuLi4nLCAnZWxhc3RpY3ByZXNzJyApIH08L3NwYW4+XG5cdFx0XHRcdDwvZGl2PlxuXHRcdFx0KTtcblx0XHR9XG5cblx0XHQvLyBXZSBuZWVkIHRvIHJlZmVyZW5jZSB0aGVzZSBieSBJRCBsYXRlclxuXHRcdGNvbnN0IGRlZmF1bHRSZXN1bHRzQnlJZCA9IHt9O1xuXHRcdGRlZmF1bHRSZXN1bHRzWyB0aGlzLnN0YXRlLnRpdGxlIF0ubWFwKCBpdGVtID0+IHtcblx0XHRcdGRlZmF1bHRSZXN1bHRzQnlJZFsgaXRlbS5JRCBdID0gaXRlbTtcblx0XHR9ICk7XG5cblx0XHRjb25zdCBtZXJnZWRQb3N0cyA9IHRoaXMuZ2V0TWVyZ2VkUG9zdHMoKTtcblx0XHRjb25zdCByZW5kZXJlZElkcyA9IHBsdWNrKCB0aGlzLnN0YXRlLnBvaW50ZXJzLCAnSUQnICk7XG5cblx0XHRjb25zdCBzZWFyY2hSZXN1bHRzID0gdGhpcy5zdGF0ZS5zZWFyY2hSZXN1bHRzWyB0aGlzLnN0YXRlLnNlYXJjaFRleHQgXSA/XG5cdFx0XHR0aGlzLnN0YXRlLnNlYXJjaFJlc3VsdHNbIHRoaXMuc3RhdGUuc2VhcmNoVGV4dCBdLmZpbHRlciggaXRlbSA9PiAtMSA9PT0gcmVuZGVyZWRJZHMuaW5kZXhPZiggaXRlbS5JRCApICkgOlxuXHRcdFx0ZmFsc2U7XG5cblx0XHRyZXR1cm4gKFxuXHRcdFx0PGRpdj5cblx0XHRcdFx0PGlucHV0IHR5cGU9XCJoaWRkZW5cIiBuYW1lPVwic2VhcmNoLW9yZGVyaW5nLW5vbmNlXCIgdmFsdWU9e3dpbmRvdy5lcE9yZGVyaW5nLm5vbmNlfSAvPlxuXHRcdFx0XHQ8aW5wdXQgdHlwZT1cImhpZGRlblwiIG5hbWU9XCJvcmRlcmVkX3Bvc3RzXCIgdmFsdWU9eyBKU09OLnN0cmluZ2lmeSggdGhpcy5zdGF0ZS5wb2ludGVycyApIH0vPlxuXHRcdFx0XHQ8RHJhZ0Ryb3BDb250ZXh0IG9uRHJhZ0VuZD17dGhpcy5vbkRyYWdDb21wbGV0ZX0+XG5cdFx0XHRcdFx0PERyb3BwYWJsZSBkcm9wcGFibGVJZD1cImRyb3BwYWJsZVwiPlxuXHRcdFx0XHRcdFx0eyggcHJvdmlkZWQgKSA9PiAoXG5cdFx0XHRcdFx0XHRcdDxkaXZcblx0XHRcdFx0XHRcdFx0XHRjbGFzc05hbWU9XCJwb2ludGVyc1wiXG5cdFx0XHRcdFx0XHRcdFx0ey4uLnByb3ZpZGVkLmRyb3BwYWJsZVByb3BzfVxuXHRcdFx0XHRcdFx0XHRcdHJlZj17cHJvdmlkZWQuaW5uZXJSZWZ9XG5cdFx0XHRcdFx0XHRcdD5cblx0XHRcdFx0XHRcdFx0XHR7bWVyZ2VkUG9zdHMubWFwKCAoIGl0ZW0sIGluZGV4ICkgPT4ge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRjb25zdCBkcmFnZ2FibGVJbmRleCA9IHBhcnNlSW50KCB3aW5kb3cuZXBPcmRlcmluZy5wb3N0c1BlclBhZ2UsIDEwICkgPD0gaW5kZXggPyBpbmRleCArIDEgOiBpbmRleDtcblxuXHRcdFx0XHRcdFx0XHRcdFx0bGV0IHRpdGxlID0gaXRlbS50aXRsZTtcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggdW5kZWZpbmVkID09PSB0aXRsZSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0dGl0bGUgPSB1bmRlZmluZWQgIT09IHBvc3RzWyBpdGVtLklEIF0gPyBwb3N0c1sgaXRlbS5JRCBdLnBvc3RfdGl0bGUgOiBkZWZhdWx0UmVzdWx0c0J5SWRbIGl0ZW0uSUQgXS5wb3N0X3RpdGxlO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBEZXRlcm1pbmUgaWYgdGhpcyByZXN1bHQgaXMgcGFydCBvZiBkZWZhdWx0IHNlYXJjaCByZXN1bHRzIG9yIG5vdFxuXHRcdFx0XHRcdFx0XHRcdFx0Y29uc3QgaXNEZWZhdWx0UmVzdWx0ID0gdW5kZWZpbmVkICE9PSBkZWZhdWx0UmVzdWx0c0J5SWRbIGl0ZW0uSUQgXTtcblx0XHRcdFx0XHRcdFx0XHRcdGNvbnN0IHRvb2x0aXBUZXh0ID0gdHJ1ZSA9PT0gaXNEZWZhdWx0UmVzdWx0ID8gX18oICdSZXR1cm4gdG8gb3JpZ2luYWwgcG9zaXRpb24nLCAnZWxhc3RpY3ByZXNzJyApIDogX18oICdSZW1vdmUgY3VzdG9tIHJlc3VsdCBmcm9tIHJlc3VsdHMgbGlzdCcsICdlbGFzdGljcHJlc3MnICk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdHJldHVybiAoXG5cdFx0XHRcdFx0XHRcdFx0XHRcdDxSZWFjdC5GcmFnbWVudCBrZXk9e2luZGV4fT5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR7IHBhcnNlSW50KCB3aW5kb3cuZXBPcmRlcmluZy5wb3N0c1BlclBhZ2UsIDEwICkgPT09IGluZGV4ICYmIChcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdDxEcmFnZ2FibGUga2V5PSdkaXZpZGVyJyBkcmFnZ2FibGVJZD0nZGl2aWRlcicgaW5kZXg9e2luZGV4fSBpc0RyYWdEaXNhYmxlZD17ZmFsc2V9PlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR7KCBwcm92aWRlZCApID0+IChcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8ZGl2XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRjbGFzc05hbWU9e2BuZXh0LXBhZ2Utbm90aWNlICR7aW5kZXh9YH1cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlZj17cHJvdmlkZWQuaW5uZXJSZWZ9XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR7Li4ucHJvdmlkZWQuZHJhZ2dhYmxlUHJvcHN9XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR7Li4ucHJvdmlkZWQuZHJhZ0hhbmRsZVByb3BzfVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdD5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdDxzcGFuPnsgX18oICdUaGUgZm9sbG93aW5nIHBvc3RzIGhhdmUgYmVlbiBkaXNwbGFjZWQgdG8gdGhlIG5leHQgcGFnZSBvZiBzZWFyY2ggcmVzdWx0cy4nLCAnZWxhc3RpY3ByZXNzJyApIH08L3NwYW4+XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0PC9kaXY+XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdCl9XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8L0RyYWdnYWJsZT5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQpIH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdDxEcmFnZ2FibGUga2V5PXtpdGVtLklEfSBkcmFnZ2FibGVJZD17aXRlbS5JRH0gaW5kZXg9e2RyYWdnYWJsZUluZGV4fT5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHsoIHByb3ZpZGVkICkgPT4gKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8ZGl2XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0Y2xhc3NOYW1lPXtgcG9pbnRlciAke2RyYWdnYWJsZUluZGV4fWB9XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVmPXtwcm92aWRlZC5pbm5lclJlZn1cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR7Li4ucHJvdmlkZWQuZHJhZ2dhYmxlUHJvcHN9XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdD5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR7IGl0ZW0ub3JkZXIgJiYgdHJ1ZSA9PT0gaXNEZWZhdWx0UmVzdWx0ICYmIChcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdDxzcGFuIGNsYXNzTmFtZT0ncG9pbnRlci10eXBlJz5SRDwvc3Bhbj5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQpIH1cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR7IGl0ZW0ub3JkZXIgJiYgZmFsc2UgPT09IGlzRGVmYXVsdFJlc3VsdCAmJiAoXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8c3BhbiBjbGFzc05hbWU9J3BvaW50ZXItdHlwZSc+Q1I8L3NwYW4+XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0KX1cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8c3Ryb25nIGNsYXNzTmFtZT1cInRpdGxlXCI+e3RpdGxlfTwvc3Ryb25nPlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdDxkaXYgY2xhc3NOYW1lPVwicG9pbnRlci1hY3Rpb25zXCI+XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8c3BhbiBjbGFzc05hbWU9XCJkYXNoaWNvbnMgZGFzaGljb25zLW1lbnUtYWx0IGhhbmRsZVwiIHsuLi5wcm92aWRlZC5kcmFnSGFuZGxlUHJvcHN9IHRpdGxlPXsgX18oICdEcmFnIHBvc3QgdXAgb3IgZG93biB0byByZXBvc2l0aW9uJywgJ2VsYXN0aWNwcmVzcycgKSB9Pjwvc3Bhbj5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHsgaXRlbS5vcmRlciAmJiAoXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdDxzcGFuIHRpdGxlPXt0b29sdGlwVGV4dH0gY2xhc3NOYW1lPVwiZGFzaGljb25zIGRhc2hpY29ucy11bmRvIGRlbGV0ZS1wb2ludGVyXCIgb25DbGljaz17IGUgPT4geyBlLnByZXZlbnREZWZhdWx0KCk7IHRoaXMucmVtb3ZlUG9pbnRlciggaXRlbSApOyB9IH0+PHNwYW4gY2xhc3NOYW1lPVwic2NyZWVuLXJlYWRlci10ZXh0XCI+UmVtb3ZlIFBvc3Q8L3NwYW4+PC9zcGFuPlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0KSB9XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0PC9kaXY+XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdDwvZGl2PlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0KX1cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8L0RyYWdnYWJsZT5cblx0XHRcdFx0XHRcdFx0XHRcdFx0PC9SZWFjdC5GcmFnbWVudD5cblx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdFx0XHR9ICl9XG5cdFx0XHRcdFx0XHRcdFx0e3Byb3ZpZGVkLnBsYWNlaG9sZGVyfVxuXHRcdFx0XHRcdFx0XHQ8L2Rpdj5cblx0XHRcdFx0XHRcdCl9XG5cdFx0XHRcdFx0PC9Ecm9wcGFibGU+XG5cdFx0XHRcdDwvRHJhZ0Ryb3BDb250ZXh0PlxuXG5cdFx0XHRcdDxkaXYgY2xhc3NOYW1lPVwibGVnZW5kXCI+XG5cdFx0XHRcdFx0PGRpdiBjbGFzc05hbWU9J2xlZ2VuZC1pdGVtJz5cblx0XHRcdFx0XHRcdDxzcGFuIGNsYXNzTmFtZT0ncG9pbnRlci10eXBlJz5DUjwvc3Bhbj5cblx0XHRcdFx0XHRcdDxzcGFuIGNsYXNzTmFtZT0ndHlwZS1kZXNjcmlwdGlvbic+eyBfXyggJ0N1c3RvbSBSZXN1bHQgKG1hbnVhbGx5IGFkZGVkIHRvIGxpc3QpJywgJ2VsYXN0aWNwcmVzcycgKSB9PC9zcGFuPlxuXHRcdFx0XHRcdDwvZGl2PlxuXHRcdFx0XHRcdDxkaXYgY2xhc3NOYW1lPSdsZWdlbmQtaXRlbSc+XG5cdFx0XHRcdFx0XHQ8c3BhbiBjbGFzc05hbWU9J3BvaW50ZXItdHlwZSc+UkQ8L3NwYW4+XG5cdFx0XHRcdFx0XHQ8c3BhbiBjbGFzc05hbWU9J3R5cGUtZGVzY3JpcHRpb24nPnsgX18oICdSZW9yZGVyZWQgRGVmYXVsdCAob3JpZ2luYWxseSBpbiByZXN1bHRzLCBidXQgcmVwb3NpdGlvbmVkKScgLCAnZWxhc3RpY3ByZXNzJyApIH08L3NwYW4+XG5cdFx0XHRcdFx0PC9kaXY+XG5cdFx0XHRcdDwvZGl2PlxuXG5cdFx0XHRcdDxkaXYgY2xhc3NOYW1lPVwicG9pbnRlci1zZWFyY2hcIj5cblx0XHRcdFx0XHQ8aDIgY2xhc3NOYW1lPVwic2VjdGlvbi10aXRsZVwiPlxuXHRcdFx0XHRcdFx0eyBfXyggJ0FkZCB0byByZXN1bHRzJywgJ2VsYXN0aWNwcmVzcycgKSB9XG5cdFx0XHRcdFx0PC9oMj5cblxuXHRcdFx0XHRcdDxkaXYgY2xhc3NOYW1lPVwic2VhcmNoLXdyYXBwZXJcIj5cblx0XHRcdFx0XHRcdDxkaXYgY2xhc3NOYW1lPVwiaW5wdXQtd3JhcFwiPlxuXHRcdFx0XHRcdFx0XHQ8aW5wdXRcblx0XHRcdFx0XHRcdFx0XHR0eXBlPVwidGV4dFwiXG5cdFx0XHRcdFx0XHRcdFx0Y2xhc3NOYW1lPVwid2lkZWZhdCBzZWFyY2gtcG9pbnRlcnNcIlxuXHRcdFx0XHRcdFx0XHRcdHBsYWNlaG9sZGVyPVwiU2VhcmNoIGZvciBQb3N0XCJcblx0XHRcdFx0XHRcdFx0XHR2YWx1ZT17IHRoaXMuc3RhdGUuc2VhcmNoVGV4dCB9XG5cdFx0XHRcdFx0XHRcdFx0b25DaGFuZ2U9eyBlID0+IHtcblx0XHRcdFx0XHRcdFx0XHRcdHRoaXMuc2V0U3RhdGUoIHsgc2VhcmNoVGV4dDogZS50YXJnZXQudmFsdWUgfSApO1xuXHRcdFx0XHRcdFx0XHRcdFx0dGhpcy5kb1NlYXJjaCgpO1xuXHRcdFx0XHRcdFx0XHRcdH0gfS8+XG5cdFx0XHRcdFx0XHQ8L2Rpdj5cblxuXHRcdFx0XHRcdFx0PGRpdiBjbGFzc05hbWU9XCJwb2ludGVyLXJlc3VsdHNcIj5cblx0XHRcdFx0XHRcdFx0eyB0aGlzLnNlYXJjaFJlc3VsdHMoIHNlYXJjaFJlc3VsdHMgKSB9XG5cdFx0XHRcdFx0XHQ8L2Rpdj5cblx0XHRcdFx0XHQ8L2Rpdj5cblx0XHRcdFx0PC9kaXY+XG5cdFx0XHQ8L2Rpdj5cblx0XHQpO1xuXHR9XG5cblx0c2VhcmNoUmVzdWx0cyA9ICggc2VhcmNoUmVzdWx0cyApID0+IHtcblx0XHRpZiAoICcnID09PSB0aGlzLnN0YXRlLnNlYXJjaFRleHQgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCBmYWxzZSA9PT0gc2VhcmNoUmVzdWx0cyApIHtcblx0XHRcdHJldHVybiAoXG5cdFx0XHRcdDxkaXYgY2xhc3NOYW1lPSdsb2FkaW5nJz5cblx0XHRcdFx0XHQ8ZGl2IGNsYXNzTmFtZT1cInNwaW5uZXIgaXMtYWN0aXZlXCI+PC9kaXY+XG5cdFx0XHRcdFx0TG9hZGluZy4uLlxuXHRcdFx0XHQ8L2Rpdj5cblx0XHRcdCk7XG5cdFx0fVxuXG5cdFx0aWYgKCAwID09PSBzZWFyY2hSZXN1bHRzLmxlbmd0aCApIHtcblx0XHRcdHJldHVybiAoXG5cdFx0XHRcdDxkaXYgY2xhc3NOYW1lPSduby1yZXN1bHRzJz57IF9fKCAnTm8gcmVzdWx0cyBmb3VuZC4nLCAnZWxhc3RpY3ByZXNzJyApIH08L2Rpdj5cblx0XHRcdCk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHNlYXJjaFJlc3VsdHMubWFwKCByZXN1bHQgPT4ge1xuXHRcdFx0cmV0dXJuIChcblx0XHRcdFx0PGRpdiBjbGFzc05hbWU9XCJwb2ludGVyLXJlc3VsdFwiIGtleT17cmVzdWx0LklEfT5cblx0XHRcdFx0XHQ8c3BhbiBjbGFzc05hbWU9XCJ0aXRsZVwiPntyZXN1bHQucG9zdF90aXRsZX08L3NwYW4+XG5cdFx0XHRcdFx0PHNwYW4gY2xhc3NOYW1lPVwiZGFzaGljb25zIGRhc2hpY29ucy1wbHVzIGFkZC1wb2ludGVyXCIgb25DbGljaz17IGUgPT4geyBlLnByZXZlbnREZWZhdWx0KCk7IHRoaXMuYWRkUG9pbnRlciggcmVzdWx0ICk7IH0gfT5cblx0XHRcdFx0XHRcdDxzcGFuIGNsYXNzTmFtZT1cInNjcmVlbi1yZWFkZXItdGV4dFwiPnsgX18oICdBZGQgUG9zdCcsICdlbGFzdGljcHJlc3MnICkgfTwvc3Bhbj5cblx0XHRcdFx0XHQ8L3NwYW4+XG5cdFx0XHRcdDwvZGl2PlxuXHRcdFx0KTtcblx0XHR9ICk7XG5cdH07XG5cbn1cbiIsIi8qKlxuICogQXJyYXkgcGx1Y2tcbiAqXG4gKiBAcGFyYW0gYXJyYXlcbiAqIEBwYXJhbSBrZXlcbiAqXG4gKiBAcmV0dXJucyBhcnJheVxuICovXG5leHBvcnQgZnVuY3Rpb24gcGx1Y2soIGFycmF5LCBrZXkgKSB7XG5cdHJldHVybiBhcnJheS5tYXAoIG8gPT4gb1sga2V5IF0gKTtcbn1cbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcblxuaW1wb3J0IHsgUG9pbnRlcnMgfSBmcm9tICcuL3BvaW50ZXJzJztcblxuUmVhY3RET00ucmVuZGVyKFxuXHQ8UG9pbnRlcnMvPixcblx0ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoICdvcmRlcmluZy1hcHAnIClcbik7XG4iXSwic291cmNlUm9vdCI6IiJ9