!function(t){var r={};function n(e){if(r[e])return r[e].exports;var o=r[e]={i:e,l:!1,exports:{}};return t[e].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=t,n.c=r,n.d=function(t,r,e){n.o(t,r)||Object.defineProperty(t,r,{enumerable:!0,get:e})},n.r=function(t){"undefined"!==typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,r){if(1&r&&(t=n(t)),8&r)return t;if(4&r&&"object"===typeof t&&t&&t.__esModule)return t;var e=Object.create(null);if(n.r(e),Object.defineProperty(e,"default",{enumerable:!0,value:t}),2&r&&"string"!=typeof t)for(var o in t)n.d(e,o,function(r){return t[r]}.bind(null,o));return e},n.n=function(t){var r=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(r,"a",r),r},n.o=function(t,r){return Object.prototype.hasOwnProperty.call(t,r)},n.p="",n(n.s=341)}([,,function(t,r,n){(function(r){var n="object",e=function(t){return t&&t.Math==Math&&t};t.exports=e(typeof globalThis==n&&globalThis)||e(typeof window==n&&window)||e(typeof self==n&&self)||e(typeof r==n&&r)||Function("return this")()}).call(this,n(44))},function(t,r){t.exports=function(t){try{return!!t()}catch(t){return!0}}},function(t,r,n){var e=n(2),o=n(16),i=n(35),u=n(63),c=e.Symbol,a=o("wks");t.exports=function(t){return a[t]||(a[t]=u&&c[t]||(u?c:i)("Symbol."+t))}},,,function(t,r,n){var e=n(2),o=n(30).f,i=n(9),u=n(21),c=n(24),a=n(60),f=n(47);t.exports=function(t,r){var n,s,l,p,v,d=t.target,g=t.global,y=t.stat;if(n=g?e:y?e[d]||c(d,{}):(e[d]||{}).prototype)for(s in r){if(p=r[s],l=t.noTargetGet?(v=o(n,s))&&v.value:n[s],!f(g?s:d+(y?".":"#")+s,t.forced)&&void 0!==l){if(typeof p===typeof l)continue;a(p,l)}(t.sham||l&&l.sham)&&i(p,"sham",!0),u(n,s,p,t)}}},function(t,r){t.exports=function(t){return"object"===typeof t?null!==t:"function"===typeof t}},function(t,r,n){var e=n(12),o=n(13),i=n(23);t.exports=e?function(t,r,n){return o.f(t,r,i(1,n))}:function(t,r,n){return t[r]=n,t}},function(t,r,n){var e=n(8);t.exports=function(t){if(!e(t))throw TypeError(String(t)+" is not an object");return t}},function(t,r){var n={}.hasOwnProperty;t.exports=function(t,r){return n.call(t,r)}},function(t,r,n){var e=n(3);t.exports=!e((function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a}))},function(t,r,n){var e=n(12),o=n(32),i=n(10),u=n(25),c=Object.defineProperty;r.f=e?c:function(t,r,n){if(i(t),r=u(r,!0),i(n),o)try{return c(t,r,n)}catch(t){}if("get"in n||"set"in n)throw TypeError("Accessors not supported");return"value"in n&&(t[r]=n.value),t}},function(t,r){t.exports=function(t){if(void 0==t)throw TypeError("Can't call method on "+t);return t}},function(t,r,n){var e=n(20),o=Math.min;t.exports=function(t){return t>0?o(e(t),9007199254740991):0}},function(t,r,n){var e=n(2),o=n(24),i=n(33),u=e["__core-js_shared__"]||o("__core-js_shared__",{});(t.exports=function(t,r){return u[t]||(u[t]=void 0!==r?r:{})})("versions",[]).push({version:"3.2.1",mode:i?"pure":"global",copyright:"Â© 2019 Denis Pushkarev (zloirock.ru)"})},function(t,r,n){var e=n(14);t.exports=function(t){return Object(e(t))}},function(t,r,n){var e=n(28),o=n(14);t.exports=function(t){return e(o(t))}},function(t,r){var n={}.toString;t.exports=function(t){return n.call(t).slice(8,-1)}},function(t,r){var n=Math.ceil,e=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?e:n)(t)}},function(t,r,n){var e=n(2),o=n(16),i=n(9),u=n(11),c=n(24),a=n(34),f=n(45),s=f.get,l=f.enforce,p=String(a).split("toString");o("inspectSource",(function(t){return a.call(t)})),(t.exports=function(t,r,n,o){var a=!!o&&!!o.unsafe,f=!!o&&!!o.enumerable,s=!!o&&!!o.noTargetGet;"function"==typeof n&&("string"!=typeof r||u(n,"name")||i(n,"name",r),l(n).source=p.join("string"==typeof r?r:"")),t!==e?(a?!s&&t[r]&&(f=!0):delete t[r],f?t[r]=n:i(t,r,n)):f?t[r]=n:c(r,n)})(Function.prototype,"toString",(function(){return"function"==typeof this&&s(this).source||a.call(this)}))},,function(t,r){t.exports=function(t,r){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:r}}},function(t,r,n){var e=n(2),o=n(9);t.exports=function(t,r){try{o(e,t,r)}catch(n){e[t]=r}return r}},function(t,r,n){var e=n(8);t.exports=function(t,r){if(!e(t))return t;var n,o;if(r&&"function"==typeof(n=t.toString)&&!e(o=n.call(t)))return o;if("function"==typeof(n=t.valueOf)&&!e(o=n.call(t)))return o;if(!r&&"function"==typeof(n=t.toString)&&!e(o=n.call(t)))return o;throw TypeError("Can't convert object to primitive value")}},function(t,r){t.exports={}},function(t,r){t.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},function(t,r,n){var e=n(3),o=n(19),i="".split;t.exports=e((function(){return!Object("z").propertyIsEnumerable(0)}))?function(t){return"String"==o(t)?i.call(t,""):Object(t)}:Object},function(t,r,n){var e=n(56),o=n(2),i=function(t){return"function"==typeof t?t:void 0};t.exports=function(t,r){return arguments.length<2?i(e[t])||i(o[t]):e[t]&&e[t][r]||o[t]&&o[t][r]}},function(t,r,n){var e=n(12),o=n(55),i=n(23),u=n(18),c=n(25),a=n(11),f=n(32),s=Object.getOwnPropertyDescriptor;r.f=e?s:function(t,r){if(t=u(t),r=c(r,!0),f)try{return s(t,r)}catch(t){}if(a(t,r))return i(!o.f.call(t,r),t[r])}},function(t,r,n){var e=n(16),o=n(35),i=e("keys");t.exports=function(t){return i[t]||(i[t]=o(t))}},function(t,r,n){var e=n(12),o=n(3),i=n(36);t.exports=!e&&!o((function(){return 7!=Object.defineProperty(i("div"),"a",{get:function(){return 7}}).a}))},function(t,r){t.exports=!1},function(t,r,n){var e=n(16);t.exports=e("native-function-to-string",Function.toString)},function(t,r){var n=0,e=Math.random();t.exports=function(t){return"Symbol("+String(void 0===t?"":t)+")_"+(++n+e).toString(36)}},function(t,r,n){var e=n(2),o=n(8),i=e.document,u=o(i)&&o(i.createElement);t.exports=function(t){return u?i.createElement(t):{}}},function(t,r,n){var e=n(11),o=n(18),i=n(49).indexOf,u=n(26);t.exports=function(t,r){var n,c=o(t),a=0,f=[];for(n in c)!e(u,n)&&e(c,n)&&f.push(n);for(;r.length>a;)e(c,n=r[a++])&&(~i(f,n)||f.push(n));return f}},function(t,r,n){var e=n(41),o=n(28),i=n(17),u=n(15),c=n(39),a=[].push,f=function(t){var r=1==t,n=2==t,f=3==t,s=4==t,l=6==t,p=5==t||l;return function(v,d,g,y){for(var h,x,b=i(v),m=o(b),S=e(d,g,3),w=u(m.length),O=0,E=y||c,j=r?E(v,w):n?E(v,0):void 0;w>O;O++)if((p||O in m)&&(x=S(h=m[O],O,b),t))if(r)j[O]=x;else if(x)switch(t){case 3:return!0;case 5:return h;case 6:return O;case 2:a.call(j,h)}else if(s)return!1;return l?-1:f||s?s:j}};t.exports={forEach:f(0),map:f(1),filter:f(2),some:f(3),every:f(4),find:f(5),findIndex:f(6)}},function(t,r,n){var e=n(8),o=n(40),i=n(4)("species");t.exports=function(t,r){var n;return o(t)&&("function"!=typeof(n=t.constructor)||n!==Array&&!o(n.prototype)?e(n)&&null===(n=n[i])&&(n=void 0):n=void 0),new(void 0===n?Array:n)(0===r?0:r)}},function(t,r,n){var e=n(19);t.exports=Array.isArray||function(t){return"Array"==e(t)}},function(t,r,n){var e=n(42);t.exports=function(t,r,n){if(e(t),void 0===r)return t;switch(n){case 0:return function(){return t.call(r)};case 1:return function(n){return t.call(r,n)};case 2:return function(n,e){return t.call(r,n,e)};case 3:return function(n,e,o){return t.call(r,n,e,o)}}return function(){return t.apply(r,arguments)}}},function(t,r){t.exports=function(t){if("function"!=typeof t)throw TypeError(String(t)+" is not a function");return t}},function(t,r,n){var e=n(3),o=n(4)("species");t.exports=function(t){return!e((function(){var r=[];return(r.constructor={})[o]=function(){return{foo:1}},1!==r[t](Boolean).foo}))}},function(t,r){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(t){"object"===typeof window&&(n=window)}t.exports=n},function(t,r,n){var e,o,i,u=n(59),c=n(2),a=n(8),f=n(9),s=n(11),l=n(31),p=n(26),v=c.WeakMap;if(u){var d=new v,g=d.get,y=d.has,h=d.set;e=function(t,r){return h.call(d,t,r),r},o=function(t){return g.call(d,t)||{}},i=function(t){return y.call(d,t)}}else{var x=l("state");p[x]=!0,e=function(t,r){return f(t,x,r),r},o=function(t){return s(t,x)?t[x]:{}},i=function(t){return s(t,x)}}t.exports={set:e,get:o,has:i,enforce:function(t){return i(t)?o(t):e(t,{})},getterFor:function(t){return function(r){var n;if(!a(r)||(n=o(r)).type!==t)throw TypeError("Incompatible receiver, "+t+" required");return n}}}},function(t,r,n){var e=n(20),o=Math.max,i=Math.min;t.exports=function(t,r){var n=e(t);return n<0?o(n+r,0):i(n,r)}},function(t,r,n){var e=n(3),o=/#|\.prototype\./,i=function(t,r){var n=c[u(t)];return n==f||n!=a&&("function"==typeof r?e(r):!!r)},u=i.normalize=function(t){return String(t).replace(o,".").toLowerCase()},c=i.data={},a=i.NATIVE="N",f=i.POLYFILL="P";t.exports=i},function(t,r,n){var e=n(37),o=n(27).concat("length","prototype");r.f=Object.getOwnPropertyNames||function(t){return e(t,o)}},function(t,r,n){var e=n(18),o=n(15),i=n(46),u=function(t){return function(r,n,u){var c,a=e(r),f=o(a.length),s=i(u,f);if(t&&n!=n){for(;f>s;)if((c=a[s++])!=c)return!0}else for(;f>s;s++)if((t||s in a)&&a[s]===n)return t||s||0;return!t&&-1}};t.exports={includes:u(!0),indexOf:u(!1)}},function(t,r,n){"use strict";var e=n(65),o=RegExp.prototype.exec,i=String.prototype.replace,u=o,c=function(){var t=/a/,r=/b*/g;return o.call(t,"a"),o.call(r,"a"),0!==t.lastIndex||0!==r.lastIndex}(),a=void 0!==/()??/.exec("")[1];(c||a)&&(u=function(t){var r,n,u,f,s=this;return a&&(n=new RegExp("^"+s.source+"$(?!\\s)",e.call(s))),c&&(r=s.lastIndex),u=o.call(s,t),c&&u&&(s.lastIndex=s.global?u.index+u[0].length:r),a&&u&&u.length>1&&i.call(u[0],n,(function(){for(f=1;f<arguments.length-2;f++)void 0===arguments[f]&&(u[f]=void 0)})),u}),t.exports=u},,function(t,r,n){"use strict";var e=n(25),o=n(13),i=n(23);t.exports=function(t,r,n){var u=e(r);u in t?o.f(t,u,i(0,n)):t[u]=n}},function(t,r,n){"use strict";n.d(r,"a",(function(){return e})),n.d(r,"e",(function(){return o})),n.d(r,"b",(function(){return i})),n.d(r,"c",(function(){return u})),n.d(r,"d",(function(){return c}));n(86),n(73),n(97),n(117),n(77),n(93),n(104),n(79),n(105),n(106),n(80),n(75),n(71);var e=function(t,r){var n=null;return function(){for(var e=arguments.length,o=new Array(e),i=0;i<e;i++)o[i]=arguments[i];var u=this;window.clearTimeout(n),n=window.setTimeout((function(){t.apply(u,o)}),r)}},o=function(t,r,n){return t.replace(new RegExp(function(t){return t.replace(/[.*+?^${}()|[\]\\]/g,"\\$&")}(r),"g"),n)},i=function(t){return t.replace(/\\([\s\S])|(")/g,"&quot;")},u=function(t,r){for(;(t=t.parentElement)&&!t.classList.contains(r););return t},c=function(t,r){return t.map((function(t){return t[r]}))}},,function(t,r,n){"use strict";var e={}.propertyIsEnumerable,o=Object.getOwnPropertyDescriptor,i=o&&!e.call({1:2},1);r.f=i?function(t){var r=o(this,t);return!!r&&r.enumerable}:e},function(t,r,n){t.exports=n(2)},function(t,r,n){var e=n(37),o=n(27);t.exports=Object.keys||function(t){return e(t,o)}},function(t,r){t.exports={}},function(t,r,n){var e=n(2),o=n(34),i=e.WeakMap;t.exports="function"===typeof i&&/native code/.test(o.call(i))},function(t,r,n){var e=n(11),o=n(61),i=n(30),u=n(13);t.exports=function(t,r){for(var n=o(r),c=u.f,a=i.f,f=0;f<n.length;f++){var s=n[f];e(t,s)||c(t,s,a(r,s))}}},function(t,r,n){var e=n(29),o=n(48),i=n(62),u=n(10);t.exports=e("Reflect","ownKeys")||function(t){var r=o.f(u(t)),n=i.f;return n?r.concat(n(t)):r}},function(t,r){r.f=Object.getOwnPropertySymbols},function(t,r,n){var e=n(3);t.exports=!!Object.getOwnPropertySymbols&&!e((function(){return!String(Symbol())}))},function(t,r,n){"use strict";var e=n(3);t.exports=function(t,r){var n=[][t];return!n||!e((function(){n.call(null,r||function(){throw 1},1)}))}},function(t,r,n){"use strict";var e=n(10);t.exports=function(){var t=e(this),r="";return t.global&&(r+="g"),t.ignoreCase&&(r+="i"),t.multiline&&(r+="m"),t.dotAll&&(r+="s"),t.unicode&&(r+="u"),t.sticky&&(r+="y"),r}},,,function(t,r,n){var e=n(10),o=n(76),i=n(27),u=n(26),c=n(72),a=n(36),f=n(31)("IE_PROTO"),s=function(){},l=function(){var t,r=a("iframe"),n=i.length;for(r.style.display="none",c.appendChild(r),r.src=String("javascript:"),(t=r.contentWindow.document).open(),t.write("<script>document.F=Object<\/script>"),t.close(),l=t.F;n--;)delete l.prototype[i[n]];return l()};t.exports=Object.create||function(t,r){var n;return null!==t?(s.prototype=e(t),n=new s,s.prototype=null,n[f]=t):n=l(),void 0===r?n:o(n,r)},u[f]=!0},function(t,r,n){"use strict";var e=n(38).forEach,o=n(64);t.exports=o("forEach")?function(t){return e(this,t,arguments.length>1?arguments[1]:void 0)}:[].forEach},,function(t,r,n){var e=n(118),o=n(119),i=n(120);t.exports=function(t){return e(t)||o(t)||i()}},function(t,r,n){var e=n(29);t.exports=e("document","documentElement")},function(t,r,n){"use strict";var e=n(7),o=n(69);e({target:"Array",proto:!0,forced:[].forEach!=o},{forEach:o})},function(t,r,n){var e=n(20),o=n(14),i=function(t){return function(r,n){var i,u,c=String(o(r)),a=e(n),f=c.length;return a<0||a>=f?t?"":void 0:(i=c.charCodeAt(a))<55296||i>56319||a+1===f||(u=c.charCodeAt(a+1))<56320||u>57343?t?c.charAt(a):i:t?c.slice(a,a+2):u-56320+(i-55296<<10)+65536}};t.exports={codeAt:i(!1),charAt:i(!0)}},function(t,r,n){var e=n(2),o=n(94),i=n(69),u=n(9);for(var c in o){var a=e[c],f=a&&a.prototype;if(f&&f.forEach!==i)try{u(f,"forEach",i)}catch(t){f.forEach=i}}},function(t,r,n){var e=n(12),o=n(13),i=n(10),u=n(57);t.exports=e?Object.defineProperties:function(t,r){i(t);for(var n,e=u(r),c=e.length,a=0;c>a;)o.f(t,n=e[a++],r[n]);return t}},function(t,r,n){"use strict";var e=n(7),o=n(38).map;e({target:"Array",proto:!0,forced:!n(43)("map")},{map:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}})},function(t,r,n){var e=n(13).f,o=n(11),i=n(4)("toStringTag");t.exports=function(t,r,n){t&&!o(t=n?t:t.prototype,i)&&e(t,i,{configurable:!0,value:r})}},function(t,r,n){"use strict";var e=n(7),o=n(50);e({target:"RegExp",proto:!0,forced:/./.exec!==o},{exec:o})},function(t,r,n){"use strict";var e=n(81),o=n(10),i=n(17),u=n(15),c=n(20),a=n(14),f=n(92),s=n(82),l=Math.max,p=Math.min,v=Math.floor,d=/\$([$&'`]|\d\d?|<[^>]*>)/g,g=/\$([$&'`]|\d\d?)/g;e("replace",2,(function(t,r,n){return[function(n,e){var o=a(this),i=void 0==n?void 0:n[t];return void 0!==i?i.call(n,o,e):r.call(String(o),n,e)},function(t,i){var a=n(r,t,this,i);if(a.done)return a.value;var v=o(t),d=String(this),g="function"===typeof i;g||(i=String(i));var y=v.global;if(y){var h=v.unicode;v.lastIndex=0}for(var x=[];;){var b=s(v,d);if(null===b)break;if(x.push(b),!y)break;""===String(b[0])&&(v.lastIndex=f(d,u(v.lastIndex),h))}for(var m,S="",w=0,O=0;O<x.length;O++){b=x[O];for(var E=String(b[0]),j=l(p(c(b.index),d.length),0),A=[],T=1;T<b.length;T++)A.push(void 0===(m=b[T])?m:String(m));var L=b.groups;if(g){var _=[E].concat(A,j,d);void 0!==L&&_.push(L);var P=String(i.apply(void 0,_))}else P=e(E,d,j,A,L,i);j>=w&&(S+=d.slice(w,j)+P,w=j+E.length)}return S+d.slice(w)}];function e(t,n,e,o,u,c){var a=e+t.length,f=o.length,s=g;return void 0!==u&&(u=i(u),s=d),r.call(c,s,(function(r,i){var c;switch(i.charAt(0)){case"$":return"$";case"&":return t;case"`":return n.slice(0,e);case"'":return n.slice(a);case"<":c=u[i.slice(1,-1)];break;default:var s=+i;if(0===s)return r;if(s>f){var l=v(s/10);return 0===l?r:l<=f?void 0===o[l-1]?i.charAt(1):o[l-1]+i.charAt(1):r}c=o[s-1]}return void 0===c?"":c}))}}))},function(t,r,n){"use strict";var e=n(9),o=n(21),i=n(3),u=n(4),c=n(50),a=u("species"),f=!i((function(){var t=/./;return t.exec=function(){var t=[];return t.groups={a:"7"},t},"7"!=="".replace(t,"$<a>")})),s=!i((function(){var t=/(?:)/,r=t.exec;t.exec=function(){return r.apply(this,arguments)};var n="ab".split(t);return 2!==n.length||"a"!==n[0]||"b"!==n[1]}));t.exports=function(t,r,n,l){var p=u(t),v=!i((function(){var r={};return r[p]=function(){return 7},7!=""[t](r)})),d=v&&!i((function(){var r=!1,n=/a/;return n.exec=function(){return r=!0,null},"split"===t&&(n.constructor={},n.constructor[a]=function(){return n}),n[p](""),!r}));if(!v||!d||"replace"===t&&!f||"split"===t&&!s){var g=/./[p],y=n(p,""[t],(function(t,r,n,e,o){return r.exec===c?v&&!o?{done:!0,value:g.call(r,n,e)}:{done:!0,value:t.call(n,r,e)}:{done:!1}})),h=y[0],x=y[1];o(String.prototype,t,h),o(RegExp.prototype,p,2==r?function(t,r){return x.call(t,this,r)}:function(t){return x.call(t,this)}),l&&e(RegExp.prototype[p],"sham",!0)}}},function(t,r,n){var e=n(19),o=n(50);t.exports=function(t,r){var n=t.exec;if("function"===typeof n){var i=n.call(t,r);if("object"!==typeof i)throw TypeError("RegExp exec method returned something other than an Object or null");return i}if("RegExp"!==e(t))throw TypeError("RegExp#exec called on incompatible receiver");return o.call(t,r)}},,,function(t,r,n){var e=n(4),o=n(68),i=n(9),u=e("unscopables"),c=Array.prototype;void 0==c[u]&&i(c,u,o(null)),t.exports=function(t){c[u][t]=!0}},function(t,r,n){"use strict";var e=n(7),o=n(3),i=n(40),u=n(8),c=n(17),a=n(15),f=n(52),s=n(39),l=n(43),p=n(4)("isConcatSpreadable"),v=!o((function(){var t=[];return t[p]=!1,t.concat()[0]!==t})),d=l("concat"),g=function(t){if(!u(t))return!1;var r=t[p];return void 0!==r?!!r:i(t)};e({target:"Array",proto:!0,forced:!v||!d},{concat:function(t){var r,n,e,o,i,u=c(this),l=s(u,0),p=0;for(r=-1,e=arguments.length;r<e;r++)if(g(i=-1===r?u:arguments[r])){if(p+(o=a(i.length))>9007199254740991)throw TypeError("Maximum allowed index exceeded");for(n=0;n<o;n++,p++)n in i&&f(l,p,i[n])}else{if(p>=9007199254740991)throw TypeError("Maximum allowed index exceeded");f(l,p++,i)}return l.length=p,l}})},,function(t,r,n){var e=n(10),o=n(113);t.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var t,r=!1,n={};try{(t=Object.getOwnPropertyDescriptor(Object.prototype,"__proto__").set).call(n,[]),r=n instanceof Array}catch(t){}return function(n,i){return e(n),o(i),r?t.call(n,i):n.__proto__=i,n}}():void 0)},function(t,r,n){var e=n(8),o=n(19),i=n(4)("match");t.exports=function(t){var r;return e(t)&&(void 0!==(r=t[i])?!!r:"RegExp"==o(t))}},function(t,r,n){"use strict";var e,o,i,u=n(91),c=n(9),a=n(11),f=n(4),s=n(33),l=f("iterator"),p=!1;[].keys&&("next"in(i=[].keys())?(o=u(u(i)))!==Object.prototype&&(e=o):p=!0),void 0==e&&(e={}),s||a(e,l)||c(e,l,(function(){return this})),t.exports={IteratorPrototype:e,BUGGY_SAFARI_ITERATORS:p}},function(t,r,n){var e=n(11),o=n(17),i=n(31),u=n(116),c=i("IE_PROTO"),a=Object.prototype;t.exports=u?Object.getPrototypeOf:function(t){return t=o(t),e(t,c)?t[c]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?a:null}},function(t,r,n){"use strict";var e=n(74).charAt;t.exports=function(t,r,n){return r+(n?e(t,r).length:1)}},function(t,r,n){var e=n(7),o=n(17),i=n(57);e({target:"Object",stat:!0,forced:n(3)((function(){i(1)}))},{keys:function(t){return i(o(t))}})},function(t,r){t.exports={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0}},,,function(t,r,n){var e=n(7),o=n(109);e({target:"Array",stat:!0,forced:!n(102)((function(t){Array.from(t)}))},{from:o})},function(t,r,n){var e=n(10);t.exports=function(t,r,n,o){try{return o?r(e(n)[0],n[1]):r(n)}catch(r){var i=t.return;throw void 0!==i&&e(i.call(t)),r}}},function(t,r,n){var e=n(4),o=n(58),i=e("iterator"),u=Array.prototype;t.exports=function(t){return void 0!==t&&(o.Array===t||u[i]===t)}},function(t,r,n){var e=n(101),o=n(58),i=n(4)("iterator");t.exports=function(t){if(void 0!=t)return t[i]||t["@@iterator"]||o[e(t)]}},function(t,r,n){var e=n(19),o=n(4)("toStringTag"),i="Arguments"==e(function(){return arguments}());t.exports=function(t){var r,n,u;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(n=function(t,r){try{return t[r]}catch(t){}}(r=Object(t),o))?n:i?e(r):"Object"==(u=e(r))&&"function"==typeof r.callee?"Arguments":u}},function(t,r,n){var e=n(4)("iterator"),o=!1;try{var i=0,u={next:function(){return{done:!!i++}},return:function(){o=!0}};u[e]=function(){return this},Array.from(u,(function(){throw 2}))}catch(t){}t.exports=function(t,r){if(!r&&!o)return!1;var n=!1;try{var i={};i[e]=function(){return{next:function(){return{done:n=!0}}}},t(i)}catch(t){}return n}},function(t,r,n){"use strict";var e=n(29),o=n(13),i=n(4),u=n(12),c=i("species");t.exports=function(t){var r=e(t),n=o.f;u&&r&&!r[c]&&n(r,c,{configurable:!0,get:function(){return this}})}},function(t,r,n){var e=n(12),o=n(2),i=n(47),u=n(112),c=n(13).f,a=n(48).f,f=n(89),s=n(65),l=n(21),p=n(3),v=n(103),d=n(4)("match"),g=o.RegExp,y=g.prototype,h=/a/g,x=/a/g,b=new g(h)!==h;if(e&&i("RegExp",!b||p((function(){return x[d]=!1,g(h)!=h||g(x)==x||"/a/i"!=g(h,"i")})))){for(var m=function(t,r){var n=this instanceof m,e=f(t),o=void 0===r;return!n&&e&&t.constructor===m&&o?t:u(b?new g(e&&!o?t.source:t,r):g((e=t instanceof m)?t.source:t,e&&o?s.call(t):r),n?this:y,m)},S=function(t){t in m||c(m,t,{configurable:!0,get:function(){return g[t]},set:function(r){g[t]=r}})},w=a(g),O=0;w.length>O;)S(w[O++]);y.constructor=m,m.prototype=y,l(o,"RegExp",m)}v("RegExp")},function(t,r,n){"use strict";var e=n(21),o=n(10),i=n(3),u=n(65),c=RegExp.prototype,a=c.toString,f=i((function(){return"/a/b"!=a.call({source:"a",flags:"b"})})),s="toString"!=a.name;(f||s)&&e(RegExp.prototype,"toString",(function(){var t=o(this),r=String(t.source),n=t.flags;return"/"+r+"/"+String(void 0===n&&t instanceof RegExp&&!("flags"in c)?u.call(t):n)}),{unsafe:!0})},function(t,r,n){"use strict";var e=n(74).charAt,o=n(45),i=n(114),u=o.set,c=o.getterFor("String Iterator");i(String,"String",(function(t){u(this,{type:"String Iterator",string:String(t),index:0})}),(function(){var t,r=c(this),n=r.string,o=r.index;return o>=n.length?{value:void 0,done:!0}:(t=e(n,o),r.index+=t.length,{value:t,done:!1})}))},,,function(t,r,n){"use strict";var e=n(41),o=n(17),i=n(98),u=n(99),c=n(15),a=n(52),f=n(100);t.exports=function(t){var r,n,s,l,p=o(t),v="function"==typeof this?this:Array,d=arguments.length,g=d>1?arguments[1]:void 0,y=void 0!==g,h=0,x=f(p);if(y&&(g=e(g,d>2?arguments[2]:void 0,2)),void 0==x||v==Array&&u(x))for(n=new v(r=c(p.length));r>h;h++)a(n,h,y?g(p[h],h):p[h]);else for(l=x.call(p),n=new v;!(s=l.next()).done;h++)a(n,h,y?i(l,g,[s.value,h],!0):s.value);return n.length=h,n}},,,function(t,r,n){var e=n(8),o=n(88);t.exports=function(t,r,n){var i,u;return o&&"function"==typeof(i=r.constructor)&&i!==n&&e(u=i.prototype)&&u!==n.prototype&&o(t,u),t}},function(t,r,n){var e=n(8);t.exports=function(t){if(!e(t)&&null!==t)throw TypeError("Can't set "+String(t)+" as a prototype");return t}},function(t,r,n){"use strict";var e=n(7),o=n(115),i=n(91),u=n(88),c=n(78),a=n(9),f=n(21),s=n(4),l=n(33),p=n(58),v=n(90),d=v.IteratorPrototype,g=v.BUGGY_SAFARI_ITERATORS,y=s("iterator"),h=function(){return this};t.exports=function(t,r,n,s,v,x,b){o(n,r,s);var m,S,w,O=function(t){if(t===v&&L)return L;if(!g&&t in A)return A[t];switch(t){case"keys":case"values":case"entries":return function(){return new n(this,t)}}return function(){return new n(this)}},E=r+" Iterator",j=!1,A=t.prototype,T=A[y]||A["@@iterator"]||v&&A[v],L=!g&&T||O(v),_="Array"==r&&A.entries||T;if(_&&(m=i(_.call(new t)),d!==Object.prototype&&m.next&&(l||i(m)===d||(u?u(m,d):"function"!=typeof m[y]&&a(m,y,h)),c(m,E,!0,!0),l&&(p[E]=h))),"values"==v&&T&&"values"!==T.name&&(j=!0,L=function(){return T.call(this)}),l&&!b||A[y]===L||a(A,y,L),p[r]=L,v)if(S={values:O("values"),keys:x?L:O("keys"),entries:O("entries")},b)for(w in S)(g||j||!(w in A))&&f(A,w,S[w]);else e({target:r,proto:!0,forced:g||j},S);return S}},function(t,r,n){"use strict";var e=n(90).IteratorPrototype,o=n(68),i=n(23),u=n(78),c=n(58),a=function(){return this};t.exports=function(t,r,n){var f=r+" Iterator";return t.prototype=o(e,{next:i(1,n)}),u(t,f,!1,!0),c[f]=a,t}},function(t,r,n){var e=n(3);t.exports=!e((function(){function t(){}return t.prototype.constructor=null,Object.getPrototypeOf(new t)!==t.prototype}))},function(t,r,n){"use strict";var e=n(7),o=n(28),i=n(18),u=n(64),c=[].join,a=o!=Object,f=u("join",",");e({target:"Array",proto:!0,forced:a||f},{join:function(t){return c.call(i(this),void 0===t?",":t)}})},function(t,r){t.exports=function(t){if(Array.isArray(t)){for(var r=0,n=new Array(t.length);r<t.length;r++)n[r]=t[r];return n}}},function(t,r){t.exports=function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}},function(t,r){t.exports=function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}},,,,,,,,,,,,,,,,,,,,function(t,r,n){"use strict";var e=n(7),o=n(49).includes,i=n(85);e({target:"Array",proto:!0},{includes:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}}),i("includes")},,,,function(t,r,n){"use strict";var e=n(7),o=n(145),i=n(14);e({target:"String",proto:!0,forced:!n(146)("includes")},{includes:function(t){return!!~String(i(this)).indexOf(o(t),arguments.length>1?arguments[1]:void 0)}})},function(t,r,n){var e=n(89);t.exports=function(t){if(e(t))throw TypeError("The method doesn't accept regular expressions");return t}},function(t,r,n){var e=n(4)("match");t.exports=function(t){var r=/./;try{"/./"[t](r)}catch(n){try{return r[e]=!1,"/./"[t](r)}catch(t){}}return!1}},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(t,r,n){"use strict";n.r(r);n(73),n(140),n(79),n(144),n(80),n(75);var e=n(53),o=function(t,r){var n=t.target.value.replace(/\s/g,"").toLowerCase();r.querySelectorAll(".term").forEach((function(t){var r=t.getAttribute("data-term-slug");t.getAttribute("data-term-name").includes(n)||r.includes(n)?t.classList.remove("hide"):t.classList.add("hide")}))};document.addEventListener("DOMContentLoaded",(function(){var t=document.querySelector(".widget_ep-facet .terms"),r=document.querySelector(".widget_ep-facet .facet-search"),n=Object(e.a)(o,200);r&&r.addEventListener("keyup",(function(r){13!==r.keyCode&&n(r,t)}))}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZmFpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9leHBvcnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaGlkZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYW4tb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9oYXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2Rlc2NyaXB0b3JzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLWxlbmd0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc2hhcmVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jbGFzc29mLXJhdy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8taW50ZWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcmVkZWZpbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS1kZXNjcmlwdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zZXQtZ2xvYmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1wcmltaXRpdmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2hpZGRlbi1rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9lbnVtLWJ1Zy1rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pbmRleGVkLW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zaGFyZWQta2V5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pZTgtZG9tLWRlZmluZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtcHVyZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZnVuY3Rpb24tdG8tc3RyaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy91aWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2RvY3VtZW50LWNyZWF0ZS1lbGVtZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3Qta2V5cy1pbnRlcm5hbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1zcGVjaWVzLWNyZWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2JpbmQtY29udGV4dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYS1mdW5jdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLWhhcy1zcGVjaWVzLXN1cHBvcnQuanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLWFic29sdXRlLWluZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pcy1mb3JjZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LW5hbWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1pbmNsdWRlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcmVnZXhwLWV4ZWMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly8vLi9hc3NldHMvanMvdXRpbHMvaGVscGVycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LXByb3BlcnR5LWlzLWVudW1lcmFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3BhdGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pdGVyYXRvcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL25hdGl2ZS13ZWFrLW1hcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY29weS1jb25zdHJ1Y3Rvci1wcm9wZXJ0aWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vd24ta2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktc3ltYm9scy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvbmF0aXZlLXN5bWJvbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc2xvcHB5LWFycmF5LW1ldGhvZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcmVnZXhwLWZsYWdzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtY3JlYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1mb3ItZWFjaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy90b0NvbnN1bWFibGVBcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaHRtbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZvci1lYWNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zdHJpbmctbXVsdGlieXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5mb3ItZWFjaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0aWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkubWFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zZXQtdG8tc3RyaW5nLXRhZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnJlZ2V4cC5leGVjLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnJlcGxhY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2ZpeC1yZWdleHAtd2VsbC1rbm93bi1zeW1ib2wtbG9naWMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3JlZ2V4cC1leGVjLWFic3RyYWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hZGQtdG8tdW5zY29wYWJsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5jb25jYXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1zZXQtcHJvdG90eXBlLW9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pcy1yZWdleHAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2l0ZXJhdG9ycy1jb3JlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZ2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYWR2YW5jZS1zdHJpbmctaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3Qua2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZG9tLWl0ZXJhYmxlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZyb20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NhbGwtd2l0aC1zYWZlLWl0ZXJhdGlvbi1jbG9zaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pcy1hcnJheS1pdGVyYXRvci1tZXRob2QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2dldC1pdGVyYXRvci1tZXRob2QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NsYXNzb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NoZWNrLWNvcnJlY3RuZXNzLW9mLWl0ZXJhdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc2V0LXNwZWNpZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5yZWdleHAuY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5yZWdleHAudG8tc3RyaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLml0ZXJhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1mcm9tLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pbmhlcml0LWlmLXJlcXVpcmVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hLXBvc3NpYmxlLXByb3RvdHlwZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZGVmaW5lLWl0ZXJhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jcmVhdGUtaXRlcmF0b3ItY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NvcnJlY3QtcHJvdG90eXBlLWdldHRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmpvaW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXJyYXlXaXRob3V0SG9sZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvaXRlcmFibGVUb0FycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL25vbkl0ZXJhYmxlU3ByZWFkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuaW5jbHVkZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuaW5jbHVkZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL25vdC1hLXJlZ2V4cC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY29ycmVjdC1pcy1yZWdleHAtbG9naWMuanMiLCJ3ZWJwYWNrOi8vLy4vYXNzZXRzL2pzL2ZhY2V0cy5qcyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsImNoZWNrIiwiaXQiLCJNYXRoIiwiZ2xvYmFsVGhpcyIsIk8iLCJ3aW5kb3ciLCJzZWxmIiwiZ2xvYmFsIiwiRnVuY3Rpb24iLCJleGVjIiwiZXJyb3IiLCJzaGFyZWQiLCJ1aWQiLCJOQVRJVkVfU1lNQk9MIiwic3RvcmUiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJmIiwiaGlkZSIsInJlZGVmaW5lIiwic2V0R2xvYmFsIiwiY29weUNvbnN0cnVjdG9yUHJvcGVydGllcyIsImlzRm9yY2VkIiwib3B0aW9ucyIsInNvdXJjZSIsInRhcmdldCIsInRhcmdldFByb3BlcnR5Iiwic291cmNlUHJvcGVydHkiLCJkZXNjcmlwdG9yIiwiVEFSR0VUIiwiR0xPQkFMIiwiU1RBVElDIiwic3RhdCIsIm5vVGFyZ2V0R2V0IiwiZm9yY2VkIiwidW5kZWZpbmVkIiwic2hhbSIsIkRFU0NSSVBUT1JTIiwiZGVmaW5lUHJvcGVydHlNb2R1bGUiLCJjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IiLCJpc09iamVjdCIsIlR5cGVFcnJvciIsIlN0cmluZyIsImZhaWxzIiwiYSIsIklFOF9ET01fREVGSU5FIiwiYW5PYmplY3QiLCJ0b1ByaW1pdGl2ZSIsIm5hdGl2ZURlZmluZVByb3BlcnR5IiwiUCIsIkF0dHJpYnV0ZXMiLCJ0b0ludGVnZXIiLCJtaW4iLCJhcmd1bWVudCIsIklTX1BVUkUiLCJwdXNoIiwidmVyc2lvbiIsImNvcHlyaWdodCIsInJlcXVpcmVPYmplY3RDb2VyY2libGUiLCJJbmRleGVkT2JqZWN0IiwidG9TdHJpbmciLCJzbGljZSIsImNlaWwiLCJmbG9vciIsImlzTmFOIiwiaGFzIiwibmF0aXZlRnVuY3Rpb25Ub1N0cmluZyIsIkludGVybmFsU3RhdGVNb2R1bGUiLCJnZXRJbnRlcm5hbFN0YXRlIiwiZW5mb3JjZUludGVybmFsU3RhdGUiLCJlbmZvcmNlIiwiVEVNUExBVEUiLCJzcGxpdCIsInVuc2FmZSIsInNpbXBsZSIsImpvaW4iLCJ0aGlzIiwiYml0bWFwIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJpbnB1dCIsIlBSRUZFUlJFRF9TVFJJTkciLCJmbiIsInZhbCIsInZhbHVlT2YiLCJjbGFzc29mIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJwYXRoIiwiYUZ1bmN0aW9uIiwidmFyaWFibGUiLCJuYW1lc3BhY2UiLCJtZXRob2QiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZU1vZHVsZSIsInRvSW5kZXhlZE9iamVjdCIsIm5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImtleXMiLCJjcmVhdGVFbGVtZW50IiwiaWQiLCJwb3N0Zml4IiwicmFuZG9tIiwiZG9jdW1lbnQiLCJFWElTVFMiLCJpbmRleE9mIiwiaGlkZGVuS2V5cyIsIm5hbWVzIiwicmVzdWx0IiwidG9PYmplY3QiLCJ0b0xlbmd0aCIsImFycmF5U3BlY2llc0NyZWF0ZSIsImNyZWF0ZU1ldGhvZCIsIlRZUEUiLCJJU19NQVAiLCJJU19GSUxURVIiLCJJU19TT01FIiwiSVNfRVZFUlkiLCJJU19GSU5EX0lOREVYIiwiTk9fSE9MRVMiLCIkdGhpcyIsImNhbGxiYWNrZm4iLCJ0aGF0Iiwic3BlY2lmaWNDcmVhdGUiLCJib3VuZEZ1bmN0aW9uIiwiaW5kZXgiLCJmb3JFYWNoIiwibWFwIiwiZmlsdGVyIiwic29tZSIsImV2ZXJ5IiwiZmluZCIsImZpbmRJbmRleCIsImlzQXJyYXkiLCJTUEVDSUVTIiwid2VsbEtub3duU3ltYm9sIiwib3JpZ2luYWxBcnJheSIsIkMiLCJjb25zdHJ1Y3RvciIsIkFycmF5IiwiYXJnIiwiYiIsImFwcGx5IiwiTUVUSE9EX05BTUUiLCJhcnJheSIsImZvbyIsIkJvb2xlYW4iLCJnIiwiZSIsInNldCIsIk5BVElWRV9XRUFLX01BUCIsIm9iamVjdEhhcyIsInNoYXJlZEtleSIsIldlYWtNYXAiLCJ3bWdldCIsIndtaGFzIiwid21zZXQiLCJtZXRhZGF0YSIsIlNUQVRFIiwiZ2V0dGVyRm9yIiwic3RhdGUiLCJ0eXBlIiwibWF4IiwiaW50ZWdlciIsInJlcGxhY2VtZW50IiwiZmVhdHVyZSIsImRldGVjdGlvbiIsImRhdGEiLCJub3JtYWxpemUiLCJQT0xZRklMTCIsIk5BVElWRSIsInN0cmluZyIsInJlcGxhY2UiLCJ0b0xvd2VyQ2FzZSIsImludGVybmFsT2JqZWN0S2V5cyIsImNvbmNhdCIsImdldE93blByb3BlcnR5TmFtZXMiLCJ0b0Fic29sdXRlSW5kZXgiLCJJU19JTkNMVURFUyIsImVsIiwiZnJvbUluZGV4IiwiaW5jbHVkZXMiLCJyZWdleHBGbGFncyIsIm5hdGl2ZUV4ZWMiLCJSZWdFeHAiLCJuYXRpdmVSZXBsYWNlIiwicGF0Y2hlZEV4ZWMiLCJVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkciLCJyZTEiLCJyZTIiLCJsYXN0SW5kZXgiLCJOUENHX0lOQ0xVREVEIiwic3RyIiwicmVDb3B5IiwibWF0Y2giLCJyZSIsInByb3BlcnR5S2V5IiwiZGVib3VuY2UiLCJkZWxheSIsInRpbWVyIiwiYXJncyIsImNvbnRleHQiLCJjbGVhclRpbWVvdXQiLCJzZXRUaW1lb3V0IiwicmVwbGFjZUdsb2JhbGx5IiwidGVybSIsImVzY2FwZVJlZ0V4cCIsImVzY2FwZURvdWJsZVF1b3RlcyIsImZpbmRBbmNlc3RvckJ5Q2xhc3MiLCJjbGFzc05hbWUiLCJwYXJlbnRFbGVtZW50IiwiY2xhc3NMaXN0IiwiY29udGFpbnMiLCJwbHVjayIsIm5hdGl2ZVByb3BlcnR5SXNFbnVtZXJhYmxlIiwiTkFTSE9STl9CVUciLCIxIiwiViIsImVudW1CdWdLZXlzIiwidGVzdCIsIm93bktleXMiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUiLCJnZXRCdWlsdEluIiwiZ2V0T3duUHJvcGVydHlOYW1lc01vZHVsZSIsImdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZSIsImdldE93blByb3BlcnR5U3ltYm9scyIsImlnbm9yZUNhc2UiLCJtdWx0aWxpbmUiLCJkb3RBbGwiLCJ1bmljb2RlIiwic3RpY2t5IiwiZGVmaW5lUHJvcGVydGllcyIsImh0bWwiLCJkb2N1bWVudENyZWF0ZUVsZW1lbnQiLCJJRV9QUk9UTyIsIkVtcHR5IiwiY3JlYXRlRGljdCIsImlmcmFtZURvY3VtZW50IiwiaWZyYW1lIiwic3R5bGUiLCJkaXNwbGF5IiwiYXBwZW5kQ2hpbGQiLCJzcmMiLCJjb250ZW50V2luZG93Iiwib3BlbiIsIndyaXRlIiwibHQiLCJjbG9zZSIsIkYiLCJQcm9wZXJ0aWVzIiwiJGZvckVhY2giLCJzbG9wcHlBcnJheU1ldGhvZCIsImFycmF5V2l0aG91dEhvbGVzIiwiaXRlcmFibGVUb0FycmF5Iiwibm9uSXRlcmFibGVTcHJlYWQiLCJhcnIiLCIkIiwicHJvdG8iLCJDT05WRVJUX1RPX1NUUklORyIsInBvcyIsImZpcnN0Iiwic2Vjb25kIiwiUyIsInBvc2l0aW9uIiwic2l6ZSIsImNoYXJDb2RlQXQiLCJjaGFyQXQiLCJjb2RlQXQiLCJET01JdGVyYWJsZXMiLCJDT0xMRUNUSU9OX05BTUUiLCJDb2xsZWN0aW9uIiwiQ29sbGVjdGlvblByb3RvdHlwZSIsIm9iamVjdEtleXMiLCIkbWFwIiwiYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCIsIlRPX1NUUklOR19UQUciLCJUQUciLCJmaXhSZWdFeHBXZWxsS25vd25TeW1ib2xMb2dpYyIsImFkdmFuY2VTdHJpbmdJbmRleCIsInJlZ0V4cEV4ZWMiLCJTVUJTVElUVVRJT05fU1lNQk9MUyIsIlNVQlNUSVRVVElPTl9TWU1CT0xTX05PX05BTUVEIiwiUkVQTEFDRSIsIm1heWJlQ2FsbE5hdGl2ZSIsInNlYXJjaFZhbHVlIiwicmVwbGFjZVZhbHVlIiwicmVwbGFjZXIiLCJyZWdleHAiLCJyZXMiLCJkb25lIiwicngiLCJmdW5jdGlvbmFsUmVwbGFjZSIsImZ1bGxVbmljb2RlIiwicmVzdWx0cyIsImFjY3VtdWxhdGVkUmVzdWx0IiwibmV4dFNvdXJjZVBvc2l0aW9uIiwibWF0Y2hlZCIsImNhcHR1cmVzIiwiaiIsIm5hbWVkQ2FwdHVyZXMiLCJncm91cHMiLCJyZXBsYWNlckFyZ3MiLCJnZXRTdWJzdGl0dXRpb24iLCJ0YWlsUG9zIiwic3ltYm9scyIsImNoIiwiY2FwdHVyZSIsInJlZ2V4cEV4ZWMiLCJSRVBMQUNFX1NVUFBPUlRTX05BTUVEX0dST1VQUyIsIlNQTElUX1dPUktTX1dJVEhfT1ZFUldSSVRURU5fRVhFQyIsIm9yaWdpbmFsRXhlYyIsIktFWSIsIlNZTUJPTCIsIkRFTEVHQVRFU19UT19TWU1CT0wiLCJERUxFR0FURVNfVE9fRVhFQyIsImV4ZWNDYWxsZWQiLCJuYXRpdmVSZWdFeHBNZXRob2QiLCJtZXRob2RzIiwibmF0aXZlTWV0aG9kIiwiYXJnMiIsImZvcmNlU3RyaW5nTWV0aG9kIiwic3RyaW5nTWV0aG9kIiwicmVnZXhNZXRob2QiLCJSIiwiVU5TQ09QQUJMRVMiLCJBcnJheVByb3RvdHlwZSIsImNyZWF0ZVByb3BlcnR5IiwiSVNfQ09OQ0FUX1NQUkVBREFCTEUiLCJJU19DT05DQVRfU1BSRUFEQUJMRV9TVVBQT1JUIiwiU1BFQ0lFU19TVVBQT1JUIiwiaXNDb25jYXRTcHJlYWRhYmxlIiwic3ByZWFkYWJsZSIsImsiLCJsZW4iLCJFIiwiQSIsImFQb3NzaWJsZVByb3RvdHlwZSIsInNldFByb3RvdHlwZU9mIiwic2V0dGVyIiwiQ09SUkVDVF9TRVRURVIiLCJfX3Byb3RvX18iLCJNQVRDSCIsImlzUmVnRXhwIiwiSXRlcmF0b3JQcm90b3R5cGUiLCJQcm90b3R5cGVPZkFycmF5SXRlcmF0b3JQcm90b3R5cGUiLCJhcnJheUl0ZXJhdG9yIiwiZ2V0UHJvdG90eXBlT2YiLCJJVEVSQVRPUiIsIkJVR0dZX1NBRkFSSV9JVEVSQVRPUlMiLCJDT1JSRUNUX1BST1RPVFlQRV9HRVRURVIiLCJPYmplY3RQcm90b3R5cGUiLCJuYXRpdmVLZXlzIiwiQ1NTUnVsZUxpc3QiLCJDU1NTdHlsZURlY2xhcmF0aW9uIiwiQ1NTVmFsdWVMaXN0IiwiQ2xpZW50UmVjdExpc3QiLCJET01SZWN0TGlzdCIsIkRPTVN0cmluZ0xpc3QiLCJET01Ub2tlbkxpc3QiLCJEYXRhVHJhbnNmZXJJdGVtTGlzdCIsIkZpbGVMaXN0IiwiSFRNTEFsbENvbGxlY3Rpb24iLCJIVE1MQ29sbGVjdGlvbiIsIkhUTUxGb3JtRWxlbWVudCIsIkhUTUxTZWxlY3RFbGVtZW50IiwiTWVkaWFMaXN0IiwiTWltZVR5cGVBcnJheSIsIk5hbWVkTm9kZU1hcCIsIk5vZGVMaXN0IiwiUGFpbnRSZXF1ZXN0TGlzdCIsIlBsdWdpbiIsIlBsdWdpbkFycmF5IiwiU1ZHTGVuZ3RoTGlzdCIsIlNWR051bWJlckxpc3QiLCJTVkdQYXRoU2VnTGlzdCIsIlNWR1BvaW50TGlzdCIsIlNWR1N0cmluZ0xpc3QiLCJTVkdUcmFuc2Zvcm1MaXN0IiwiU291cmNlQnVmZmVyTGlzdCIsIlN0eWxlU2hlZXRMaXN0IiwiVGV4dFRyYWNrQ3VlTGlzdCIsIlRleHRUcmFja0xpc3QiLCJUb3VjaExpc3QiLCJmcm9tIiwiY2hlY2tDb3JyZWN0bmVzc09mSXRlcmF0aW9uIiwiaXRlcmFibGUiLCJpdGVyYXRvciIsIkVOVFJJRVMiLCJyZXR1cm5NZXRob2QiLCJJdGVyYXRvcnMiLCJjbGFzc29mUmF3IiwiQ09SUkVDVF9BUkdVTUVOVFMiLCJ0YWciLCJ0cnlHZXQiLCJjYWxsZWUiLCJTQUZFX0NMT1NJTkciLCJjYWxsZWQiLCJpdGVyYXRvcldpdGhSZXR1cm4iLCJuZXh0IiwiU0tJUF9DTE9TSU5HIiwiSVRFUkFUSU9OX1NVUFBPUlQiLCJDT05TVFJVQ1RPUl9OQU1FIiwiQ29uc3RydWN0b3IiLCJpbmhlcml0SWZSZXF1aXJlZCIsImdldEZsYWdzIiwic2V0U3BlY2llcyIsIk5hdGl2ZVJlZ0V4cCIsIlJlZ0V4cFByb3RvdHlwZSIsIkNPUlJFQ1RfTkVXIiwiUmVnRXhwV3JhcHBlciIsInBhdHRlcm4iLCJmbGFncyIsInRoaXNJc1JlZ0V4cCIsInBhdHRlcm5Jc1JlZ0V4cCIsImZsYWdzQXJlVW5kZWZpbmVkIiwicHJveHkiLCJuYXRpdmVUb1N0cmluZyIsIk5PVF9HRU5FUklDIiwiSU5DT1JSRUNUX05BTUUiLCJyZiIsImRlZmluZUl0ZXJhdG9yIiwic2V0SW50ZXJuYWxTdGF0ZSIsIml0ZXJhdGVkIiwicG9pbnQiLCJjYWxsV2l0aFNhZmVJdGVyYXRpb25DbG9zaW5nIiwiaXNBcnJheUl0ZXJhdG9yTWV0aG9kIiwiZ2V0SXRlcmF0b3JNZXRob2QiLCJhcnJheUxpa2UiLCJzdGVwIiwiYXJndW1lbnRzTGVuZ3RoIiwibWFwZm4iLCJtYXBwaW5nIiwiaXRlcmF0b3JNZXRob2QiLCJkdW1teSIsIldyYXBwZXIiLCJOZXdUYXJnZXQiLCJOZXdUYXJnZXRQcm90b3R5cGUiLCJjcmVhdGVJdGVyYXRvckNvbnN0cnVjdG9yIiwic2V0VG9TdHJpbmdUYWciLCJJdGVyYXRvcnNDb3JlIiwicmV0dXJuVGhpcyIsIkl0ZXJhYmxlIiwiTkFNRSIsIkl0ZXJhdG9yQ29uc3RydWN0b3IiLCJERUZBVUxUIiwiSVNfU0VUIiwiRk9SQ0VEIiwiQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlIiwiZ2V0SXRlcmF0aW9uTWV0aG9kIiwiS0lORCIsImRlZmF1bHRJdGVyYXRvciIsIkl0ZXJhYmxlUHJvdG90eXBlIiwiSU5DT1JSRUNUX1ZBTFVFU19OQU1FIiwibmF0aXZlSXRlcmF0b3IiLCJhbnlOYXRpdmVJdGVyYXRvciIsImVudHJpZXMiLCJ2YWx1ZXMiLCJuYXRpdmVKb2luIiwiRVMzX1NUUklOR1MiLCJTTE9QUFlfTUVUSE9EIiwic2VwYXJhdG9yIiwiYXJyMiIsIml0ZXIiLCIkaW5jbHVkZXMiLCJhZGRUb1Vuc2NvcGFibGVzIiwibm90QVJlZ0V4cCIsImNvcnJlY3RJc1JlZ0V4cExvZ2ljIiwic2VhcmNoU3RyaW5nIiwiaGFuZGxlRmFjZXRTZWFyY2giLCJldmVudCIsImZhY2V0VGVybXMiLCJzZWFyY2hUZXJtIiwicXVlcnlTZWxlY3RvckFsbCIsInNsdWciLCJnZXRBdHRyaWJ1dGUiLCJyZW1vdmUiLCJhZGQiLCJhZGRFdmVudExpc3RlbmVyIiwicXVlcnlTZWxlY3RvciIsImZhY2V0U2VhcmNoSW5wdXQiLCJkZWJvdW5jZUZhY2V0RmlsdGVyIiwia2V5Q29kZSJdLCJtYXBwaW5ncyI6ImFBQ0UsSUFBSUEsRUFBbUIsR0FHdkIsU0FBU0MsRUFBb0JDLEdBRzVCLEdBQUdGLEVBQWlCRSxHQUNuQixPQUFPRixFQUFpQkUsR0FBVUMsUUFHbkMsSUFBSUMsRUFBU0osRUFBaUJFLEdBQVksQ0FDekNHLEVBQUdILEVBQ0hJLEdBQUcsRUFDSEgsUUFBUyxJQVVWLE9BTkFJLEVBQVFMLEdBQVVNLEtBQUtKLEVBQU9ELFFBQVNDLEVBQVFBLEVBQU9ELFFBQVNGLEdBRy9ERyxFQUFPRSxHQUFJLEVBR0pGLEVBQU9ELFFBS2ZGLEVBQW9CUSxFQUFJRixFQUd4Qk4sRUFBb0JTLEVBQUlWLEVBR3hCQyxFQUFvQlUsRUFBSSxTQUFTUixFQUFTUyxFQUFNQyxHQUMzQ1osRUFBb0JhLEVBQUVYLEVBQVNTLElBQ2xDRyxPQUFPQyxlQUFlYixFQUFTUyxFQUFNLENBQUVLLFlBQVksRUFBTUMsSUFBS0wsS0FLaEVaLEVBQW9Ca0IsRUFBSSxTQUFTaEIsR0FDWCxxQkFBWGlCLFFBQTBCQSxPQUFPQyxhQUMxQ04sT0FBT0MsZUFBZWIsRUFBU2lCLE9BQU9DLFlBQWEsQ0FBRUMsTUFBTyxXQUU3RFAsT0FBT0MsZUFBZWIsRUFBUyxhQUFjLENBQUVtQixPQUFPLEtBUXZEckIsRUFBb0JzQixFQUFJLFNBQVNELEVBQU9FLEdBRXZDLEdBRFUsRUFBUEEsSUFBVUYsRUFBUXJCLEVBQW9CcUIsSUFDL0IsRUFBUEUsRUFBVSxPQUFPRixFQUNwQixHQUFXLEVBQVBFLEdBQThCLGtCQUFWRixHQUFzQkEsR0FBU0EsRUFBTUcsV0FBWSxPQUFPSCxFQUNoRixJQUFJSSxFQUFLWCxPQUFPWSxPQUFPLE1BR3ZCLEdBRkExQixFQUFvQmtCLEVBQUVPLEdBQ3RCWCxPQUFPQyxlQUFlVSxFQUFJLFVB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b0JBZkwsV0FDcEIsSUFBTVAsRUFBYS9XLFNBQVN1WCxjQUFjLDJCQUNwQ0MsRUFBbUJ4WCxTQUFTdVgsY0FBYyxrQ0FDMUNFLEVBQXNCM1IsWUFBUytRLEVBQW1CLEtBRXBEVyxHQUNIQSxFQUFpQkYsaUJBQWlCLFNBQVMsU0FBQ1IsR0FDckIsS0FBbEJBLEVBQU1ZLFNBR1ZELEVBQW9CWCxFQUFPQyIsImZpbGUiOiJqcy9mYWNldHMtc2NyaXB0Lm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAzNDEpO1xuIiwidmFyIE8gPSAnb2JqZWN0JztcbnZhciBjaGVjayA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgJiYgaXQuTWF0aCA9PSBNYXRoICYmIGl0O1xufTtcblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzg2I2lzc3VlY29tbWVudC0xMTU3NTkwMjhcbm1vZHVsZS5leHBvcnRzID1cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gIGNoZWNrKHR5cGVvZiBnbG9iYWxUaGlzID09IE8gJiYgZ2xvYmFsVGhpcykgfHxcbiAgY2hlY2sodHlwZW9mIHdpbmRvdyA9PSBPICYmIHdpbmRvdykgfHxcbiAgY2hlY2sodHlwZW9mIHNlbGYgPT0gTyAmJiBzZWxmKSB8fFxuICBjaGVjayh0eXBlb2YgZ2xvYmFsID09IE8gJiYgZ2xvYmFsKSB8fFxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcbiAgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gISFleGVjKCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdWlkJyk7XG52YXIgTkFUSVZFX1NZTUJPTCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uYXRpdmUtc3ltYm9sJyk7XG5cbnZhciBTeW1ib2wgPSBnbG9iYWwuU3ltYm9sO1xudmFyIHN0b3JlID0gc2hhcmVkKCd3a3MnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4gc3RvcmVbbmFtZV0gfHwgKHN0b3JlW25hbWVdID0gTkFUSVZFX1NZTUJPTCAmJiBTeW1ib2xbbmFtZV1cbiAgICB8fCAoTkFUSVZFX1NZTUJPTCA/IFN5bWJvbCA6IHVpZCkoJ1N5bWJvbC4nICsgbmFtZSkpO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKS5mO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGlkZScpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lJyk7XG52YXIgc2V0R2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC1nbG9iYWwnKTtcbnZhciBjb3B5Q29uc3RydWN0b3JQcm9wZXJ0aWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NvcHktY29uc3RydWN0b3ItcHJvcGVydGllcycpO1xudmFyIGlzRm9yY2VkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWZvcmNlZCcpO1xuXG4vKlxuICBvcHRpb25zLnRhcmdldCAgICAgIC0gbmFtZSBvZiB0aGUgdGFyZ2V0IG9iamVjdFxuICBvcHRpb25zLmdsb2JhbCAgICAgIC0gdGFyZ2V0IGlzIHRoZSBnbG9iYWwgb2JqZWN0XG4gIG9wdGlvbnMuc3RhdCAgICAgICAgLSBleHBvcnQgYXMgc3RhdGljIG1ldGhvZHMgb2YgdGFyZ2V0XG4gIG9wdGlvbnMucHJvdG8gICAgICAgLSBleHBvcnQgYXMgcHJvdG90eXBlIG1ldGhvZHMgb2YgdGFyZ2V0XG4gIG9wdGlvbnMucmVhbCAgICAgICAgLSByZWFsIHByb3RvdHlwZSBtZXRob2QgZm9yIHRoZSBgcHVyZWAgdmVyc2lvblxuICBvcHRpb25zLmZvcmNlZCAgICAgIC0gZXhwb3J0IGV2ZW4gaWYgdGhlIG5hdGl2ZSBmZWF0dXJlIGlzIGF2YWlsYWJsZVxuICBvcHRpb25zLmJpbmQgICAgICAgIC0gYmluZCBtZXRob2RzIHRvIHRoZSB0YXJnZXQsIHJlcXVpcmVkIGZvciB0aGUgYHB1cmVgIHZlcnNpb25cbiAgb3B0aW9ucy53cmFwICAgICAgICAtIHdyYXAgY29uc3RydWN0b3JzIHRvIHByZXZlbnRpbmcgZ2xvYmFsIHBvbGx1dGlvbiwgcmVxdWlyZWQgZm9yIHRoZSBgcHVyZWAgdmVyc2lvblxuICBvcHRpb25zLnVuc2FmZSAgICAgIC0gdXNlIHRoZSBzaW1wbGUgYXNzaWdubWVudCBvZiBwcm9wZXJ0eSBpbnN0ZWFkIG9mIGRlbGV0ZSArIGRlZmluZVByb3BlcnR5XG4gIG9wdGlvbnMuc2hhbSAgICAgICAgLSBhZGQgYSBmbGFnIHRvIG5vdCBjb21wbGV0ZWx5IGZ1bGwgcG9seWZpbGxzXG4gIG9wdGlvbnMuZW51bWVyYWJsZSAgLSBleHBvcnQgYXMgZW51bWVyYWJsZSBwcm9wZXJ0eVxuICBvcHRpb25zLm5vVGFyZ2V0R2V0IC0gcHJldmVudCBjYWxsaW5nIGEgZ2V0dGVyIG9uIHRhcmdldFxuKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9wdGlvbnMsIHNvdXJjZSkge1xuICB2YXIgVEFSR0VUID0gb3B0aW9ucy50YXJnZXQ7XG4gIHZhciBHTE9CQUwgPSBvcHRpb25zLmdsb2JhbDtcbiAgdmFyIFNUQVRJQyA9IG9wdGlvbnMuc3RhdDtcbiAgdmFyIEZPUkNFRCwgdGFyZ2V0LCBrZXksIHRhcmdldFByb3BlcnR5LCBzb3VyY2VQcm9wZXJ0eSwgZGVzY3JpcHRvcjtcbiAgaWYgKEdMT0JBTCkge1xuICAgIHRhcmdldCA9IGdsb2JhbDtcbiAgfSBlbHNlIGlmIChTVEFUSUMpIHtcbiAgICB0YXJnZXQgPSBnbG9iYWxbVEFSR0VUXSB8fCBzZXRHbG9iYWwoVEFSR0VULCB7fSk7XG4gIH0gZWxzZSB7XG4gICAgdGFyZ2V0ID0gKGdsb2JhbFtUQVJHRVRdIHx8IHt9KS5wcm90b3R5cGU7XG4gIH1cbiAgaWYgKHRhcmdldCkgZm9yIChrZXkgaW4gc291cmNlKSB7XG4gICAgc291cmNlUHJvcGVydHkgPSBzb3VyY2Vba2V5XTtcbiAgICBpZiAob3B0aW9ucy5ub1RhcmdldEdldCkge1xuICAgICAgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSk7XG4gICAgICB0YXJnZXRQcm9wZXJ0eSA9IGRlc2NyaXB0b3IgJiYgZGVzY3JpcHRvci52YWx1ZTtcbiAgICB9IGVsc2UgdGFyZ2V0UHJvcGVydHkgPSB0YXJnZXRba2V5XTtcbiAgICBGT1JDRUQgPSBpc0ZvcmNlZChHTE9CQUwgPyBrZXkgOiBUQVJHRVQgKyAoU1RBVElDID8gJy4nIDogJyMnKSArIGtleSwgb3B0aW9ucy5mb3JjZWQpO1xuICAgIC8vIGNvbnRhaW5lZCBpbiB0YXJnZXRcbiAgICBpZiAoIUZPUkNFRCAmJiB0YXJnZXRQcm9wZXJ0eSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAodHlwZW9mIHNvdXJjZVByb3BlcnR5ID09PSB0eXBlb2YgdGFyZ2V0UHJvcGVydHkpIGNvbnRpbnVlO1xuICAgICAgY29weUNvbnN0cnVjdG9yUHJvcGVydGllcyhzb3VyY2VQcm9wZXJ0eSwgdGFyZ2V0UHJvcGVydHkpO1xuICAgIH1cbiAgICAvLyBhZGQgYSBmbGFnIHRvIG5vdCBjb21wbGV0ZWx5IGZ1bGwgcG9seWZpbGxzXG4gICAgaWYgKG9wdGlvbnMuc2hhbSB8fCAodGFyZ2V0UHJvcGVydHkgJiYgdGFyZ2V0UHJvcGVydHkuc2hhbSkpIHtcbiAgICAgIGhpZGUoc291cmNlUHJvcGVydHksICdzaGFtJywgdHJ1ZSk7XG4gICAgfVxuICAgIC8vIGV4dGVuZCBnbG9iYWxcbiAgICByZWRlZmluZSh0YXJnZXQsIGtleSwgc291cmNlUHJvcGVydHksIG9wdGlvbnMpO1xuICB9XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PT0gJ29iamVjdCcgPyBpdCAhPT0gbnVsbCA6IHR5cGVvZiBpdCA9PT0gJ2Z1bmN0aW9uJztcbn07XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG52YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gREVTQ1JJUFRPUlMgPyBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIHJldHVybiBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mKG9iamVjdCwga2V5LCBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMSwgdmFsdWUpKTtcbn0gOiBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIG9iamVjdFtrZXldID0gdmFsdWU7XG4gIHJldHVybiBvYmplY3Q7XG59O1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoIWlzT2JqZWN0KGl0KSkge1xuICAgIHRocm93IFR5cGVFcnJvcihTdHJpbmcoaXQpICsgJyBpcyBub3QgYW4gb2JqZWN0Jyk7XG4gIH0gcmV0dXJuIGl0O1xufTtcbiIsInZhciBoYXNPd25Qcm9wZXJ0eSA9IHt9Lmhhc093blByb3BlcnR5O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwga2V5KSB7XG4gIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGl0LCBrZXkpO1xufTtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG4vLyBUaGFuaydzIElFOCBmb3IgaGlzIGZ1bm55IGRlZmluZVByb3BlcnR5XG5tb2R1bGUuZXhwb3J0cyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sICdhJywgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH0gfSkuYSAhPSA3O1xufSk7XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBJRThfRE9NX0RFRklORSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pZTgtZG9tLWRlZmluZScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXByaW1pdGl2ZScpO1xuXG52YXIgbmF0aXZlRGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG5cbi8vIGBPYmplY3QuZGVmaW5lUHJvcGVydHlgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LmRlZmluZXByb3BlcnR5XG5leHBvcnRzLmYgPSBERVNDUklQVE9SUyA/IG5hdGl2ZURlZmluZVByb3BlcnR5IDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcykge1xuICBhbk9iamVjdChPKTtcbiAgUCA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICBhbk9iamVjdChBdHRyaWJ1dGVzKTtcbiAgaWYgKElFOF9ET01fREVGSU5FKSB0cnkge1xuICAgIHJldHVybiBuYXRpdmVEZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuICBpZiAoJ2dldCcgaW4gQXR0cmlidXRlcyB8fCAnc2V0JyBpbiBBdHRyaWJ1dGVzKSB0aHJvdyBUeXBlRXJyb3IoJ0FjY2Vzc29ycyBub3Qgc3VwcG9ydGVkJyk7XG4gIGlmICgndmFsdWUnIGluIEF0dHJpYnV0ZXMpIE9bUF0gPSBBdHRyaWJ1dGVzLnZhbHVlO1xuICByZXR1cm4gTztcbn07XG4iLCIvLyBgUmVxdWlyZU9iamVjdENvZXJjaWJsZWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1yZXF1aXJlb2JqZWN0Y29lcmNpYmxlXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoaXQgPT0gdW5kZWZpbmVkKSB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjYWxsIG1ldGhvZCBvbiBcIiArIGl0KTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsInZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW50ZWdlcicpO1xuXG52YXIgbWluID0gTWF0aC5taW47XG5cbi8vIGBUb0xlbmd0aGAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy10b2xlbmd0aFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgcmV0dXJuIGFyZ3VtZW50ID4gMCA/IG1pbih0b0ludGVnZXIoYXJndW1lbnQpLCAweDFGRkZGRkZGRkZGRkZGKSA6IDA7IC8vIDIgKiogNTMgLSAxID09IDkwMDcxOTkyNTQ3NDA5OTFcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHNldEdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtZ2xvYmFsJyk7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG5cbnZhciBTSEFSRUQgPSAnX19jb3JlLWpzX3NoYXJlZF9fJztcbnZhciBzdG9yZSA9IGdsb2JhbFtTSEFSRURdIHx8IHNldEdsb2JhbChTSEFSRUQsIHt9KTtcblxuKG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIHN0b3JlW2tleV0gfHwgKHN0b3JlW2tleV0gPSB2YWx1ZSAhPT0gdW5kZWZpbmVkID8gdmFsdWUgOiB7fSk7XG59KSgndmVyc2lvbnMnLCBbXSkucHVzaCh7XG4gIHZlcnNpb246ICczLjIuMScsXG4gIG1vZGU6IElTX1BVUkUgPyAncHVyZScgOiAnZ2xvYmFsJyxcbiAgY29weXJpZ2h0OiAnwqkgMjAxOSBEZW5pcyBQdXNoa2FyZXYgKHpsb2lyb2NrLnJ1KSdcbn0pO1xuIiwidmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG5cbi8vIGBUb09iamVjdGAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy10b29iamVjdFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgcmV0dXJuIE9iamVjdChyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKGFyZ3VtZW50KSk7XG59O1xuIiwiLy8gdG9PYmplY3Qgd2l0aCBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIHN0cmluZ3NcbnZhciBJbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2luZGV4ZWQtb2JqZWN0Jyk7XG52YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIEluZGV4ZWRPYmplY3QocmVxdWlyZU9iamVjdENvZXJjaWJsZShpdCkpO1xufTtcbiIsInZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChpdCkuc2xpY2UoOCwgLTEpO1xufTtcbiIsInZhciBjZWlsID0gTWF0aC5jZWlsO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcblxuLy8gYFRvSW50ZWdlcmAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy10b2ludGVnZXJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIHJldHVybiBpc05hTihhcmd1bWVudCA9ICthcmd1bWVudCkgPyAwIDogKGFyZ3VtZW50ID4gMCA/IGZsb29yIDogY2VpbCkoYXJndW1lbnQpO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgc2hhcmVkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZCcpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGlkZScpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciBzZXRHbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LWdsb2JhbCcpO1xudmFyIG5hdGl2ZUZ1bmN0aW9uVG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdG8tc3RyaW5nJyk7XG52YXIgSW50ZXJuYWxTdGF0ZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZScpO1xuXG52YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0O1xudmFyIGVuZm9yY2VJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5lbmZvcmNlO1xudmFyIFRFTVBMQVRFID0gU3RyaW5nKG5hdGl2ZUZ1bmN0aW9uVG9TdHJpbmcpLnNwbGl0KCd0b1N0cmluZycpO1xuXG5zaGFyZWQoJ2luc3BlY3RTb3VyY2UnLCBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIG5hdGl2ZUZ1bmN0aW9uVG9TdHJpbmcuY2FsbChpdCk7XG59KTtcblxuKG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE8sIGtleSwgdmFsdWUsIG9wdGlvbnMpIHtcbiAgdmFyIHVuc2FmZSA9IG9wdGlvbnMgPyAhIW9wdGlvbnMudW5zYWZlIDogZmFsc2U7XG4gIHZhciBzaW1wbGUgPSBvcHRpb25zID8gISFvcHRpb25zLmVudW1lcmFibGUgOiBmYWxzZTtcbiAgdmFyIG5vVGFyZ2V0R2V0ID0gb3B0aW9ucyA/ICEhb3B0aW9ucy5ub1RhcmdldEdldCA6IGZhbHNlO1xuICBpZiAodHlwZW9mIHZhbHVlID09ICdmdW5jdGlvbicpIHtcbiAgICBpZiAodHlwZW9mIGtleSA9PSAnc3RyaW5nJyAmJiAhaGFzKHZhbHVlLCAnbmFtZScpKSBoaWRlKHZhbHVlLCAnbmFtZScsIGtleSk7XG4gICAgZW5mb3JjZUludGVybmFsU3RhdGUodmFsdWUpLnNvdXJjZSA9IFRFTVBMQVRFLmpvaW4odHlwZW9mIGtleSA9PSAnc3RyaW5nJyA/IGtleSA6ICcnKTtcbiAgfVxuICBpZiAoTyA9PT0gZ2xvYmFsKSB7XG4gICAgaWYgKHNpbXBsZSkgT1trZXldID0gdmFsdWU7XG4gICAgZWxzZSBzZXRHbG9iYWwoa2V5LCB2YWx1ZSk7XG4gICAgcmV0dXJuO1xuICB9IGVsc2UgaWYgKCF1bnNhZmUpIHtcbiAgICBkZWxldGUgT1trZXldO1xuICB9IGVsc2UgaWYgKCFub1RhcmdldEdldCAmJiBPW2tleV0pIHtcbiAgICBzaW1wbGUgPSB0cnVlO1xuICB9XG4gIGlmIChzaW1wbGUpIE9ba2V5XSA9IHZhbHVlO1xuICBlbHNlIGhpZGUoTywga2V5LCB2YWx1ZSk7XG4vLyBhZGQgZmFrZSBGdW5jdGlvbiN0b1N0cmluZyBmb3IgY29ycmVjdCB3b3JrIHdyYXBwZWQgbWV0aG9kcyAvIGNvbnN0cnVjdG9ycyB3aXRoIG1ldGhvZHMgbGlrZSBMb0Rhc2ggaXNOYXRpdmVcbn0pKEZ1bmN0aW9uLnByb3RvdHlwZSwgJ3RvU3RyaW5nJywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gIHJldHVybiB0eXBlb2YgdGhpcyA9PSAnZnVuY3Rpb24nICYmIGdldEludGVybmFsU3RhdGUodGhpcykuc291cmNlIHx8IG5hdGl2ZUZ1bmN0aW9uVG9TdHJpbmcuY2FsbCh0aGlzKTtcbn0pO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYml0bWFwLCB2YWx1ZSkge1xuICByZXR1cm4ge1xuICAgIGVudW1lcmFibGU6ICEoYml0bWFwICYgMSksXG4gICAgY29uZmlndXJhYmxlOiAhKGJpdG1hcCAmIDIpLFxuICAgIHdyaXRhYmxlOiAhKGJpdG1hcCAmIDQpLFxuICAgIHZhbHVlOiB2YWx1ZVxuICB9O1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oaWRlJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgdHJ5IHtcbiAgICBoaWRlKGdsb2JhbCwga2V5LCB2YWx1ZSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgZ2xvYmFsW2tleV0gPSB2YWx1ZTtcbiAgfSByZXR1cm4gdmFsdWU7XG59O1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xuXG4vLyBgVG9QcmltaXRpdmVgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtdG9wcmltaXRpdmVcbi8vIGluc3RlYWQgb2YgdGhlIEVTNiBzcGVjIHZlcnNpb24sIHdlIGRpZG4ndCBpbXBsZW1lbnQgQEB0b1ByaW1pdGl2ZSBjYXNlXG4vLyBhbmQgdGhlIHNlY29uZCBhcmd1bWVudCAtIGZsYWcgLSBwcmVmZXJyZWQgdHlwZSBpcyBhIHN0cmluZ1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaW5wdXQsIFBSRUZFUlJFRF9TVFJJTkcpIHtcbiAgaWYgKCFpc09iamVjdChpbnB1dCkpIHJldHVybiBpbnB1dDtcbiAgdmFyIGZuLCB2YWw7XG4gIGlmIChQUkVGRVJSRURfU1RSSU5HICYmIHR5cGVvZiAoZm4gPSBpbnB1dC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpbnB1dCkpKSByZXR1cm4gdmFsO1xuICBpZiAodHlwZW9mIChmbiA9IGlucHV0LnZhbHVlT2YpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaW5wdXQpKSkgcmV0dXJuIHZhbDtcbiAgaWYgKCFQUkVGRVJSRURfU1RSSU5HICYmIHR5cGVvZiAoZm4gPSBpbnB1dC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpbnB1dCkpKSByZXR1cm4gdmFsO1xuICB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjb252ZXJ0IG9iamVjdCB0byBwcmltaXRpdmUgdmFsdWVcIik7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7fTtcbiIsIi8vIElFOC0gZG9uJ3QgZW51bSBidWcga2V5c1xubW9kdWxlLmV4cG9ydHMgPSBbXG4gICdjb25zdHJ1Y3RvcicsXG4gICdoYXNPd25Qcm9wZXJ0eScsXG4gICdpc1Byb3RvdHlwZU9mJyxcbiAgJ3Byb3BlcnR5SXNFbnVtZXJhYmxlJyxcbiAgJ3RvTG9jYWxlU3RyaW5nJyxcbiAgJ3RvU3RyaW5nJyxcbiAgJ3ZhbHVlT2YnXG5dO1xuIiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mLXJhdycpO1xuXG52YXIgc3BsaXQgPSAnJy5zcGxpdDtcblxuLy8gZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBhbmQgbm9uLWVudW1lcmFibGUgb2xkIFY4IHN0cmluZ3Ncbm1vZHVsZS5leHBvcnRzID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyB0aHJvd3MgYW4gZXJyb3IgaW4gcmhpbm8sIHNlZSBodHRwczovL2dpdGh1Yi5jb20vbW96aWxsYS9yaGluby9pc3N1ZXMvMzQ2XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnNcbiAgcmV0dXJuICFPYmplY3QoJ3onKS5wcm9wZXJ0eUlzRW51bWVyYWJsZSgwKTtcbn0pID8gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBjbGFzc29mKGl0KSA9PSAnU3RyaW5nJyA/IHNwbGl0LmNhbGwoaXQsICcnKSA6IE9iamVjdChpdCk7XG59IDogT2JqZWN0O1xuIiwidmFyIHBhdGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcGF0aCcpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcblxudmFyIGFGdW5jdGlvbiA9IGZ1bmN0aW9uICh2YXJpYWJsZSkge1xuICByZXR1cm4gdHlwZW9mIHZhcmlhYmxlID09ICdmdW5jdGlvbicgPyB2YXJpYWJsZSA6IHVuZGVmaW5lZDtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG5hbWVzcGFjZSwgbWV0aG9kKSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoIDwgMiA/IGFGdW5jdGlvbihwYXRoW25hbWVzcGFjZV0pIHx8IGFGdW5jdGlvbihnbG9iYWxbbmFtZXNwYWNlXSlcbiAgICA6IHBhdGhbbmFtZXNwYWNlXSAmJiBwYXRoW25hbWVzcGFjZV1bbWV0aG9kXSB8fCBnbG9iYWxbbmFtZXNwYWNlXSAmJiBnbG9iYWxbbmFtZXNwYWNlXVttZXRob2RdO1xufTtcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIHByb3BlcnR5SXNFbnVtZXJhYmxlTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1wcm9wZXJ0eS1pcy1lbnVtZXJhYmxlJyk7XG52YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tcHJpbWl0aXZlJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIElFOF9ET01fREVGSU5FID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2llOC1kb20tZGVmaW5lJyk7XG5cbnZhciBuYXRpdmVHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuXG4vLyBgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yXG5leHBvcnRzLmYgPSBERVNDUklQVE9SUyA/IG5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvciA6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKSB7XG4gIE8gPSB0b0luZGV4ZWRPYmplY3QoTyk7XG4gIFAgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcbiAgaWYgKElFOF9ET01fREVGSU5FKSB0cnkge1xuICAgIHJldHVybiBuYXRpdmVHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cbiAgaWYgKGhhcyhPLCBQKSkgcmV0dXJuIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcighcHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUuZi5jYWxsKE8sIFApLCBPW1BdKTtcbn07XG4iLCJ2YXIgc2hhcmVkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZCcpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy91aWQnKTtcblxudmFyIGtleXMgPSBzaGFyZWQoJ2tleXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIHJldHVybiBrZXlzW2tleV0gfHwgKGtleXNba2V5XSA9IHVpZChrZXkpKTtcbn07XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGNyZWF0ZUVsZW1lbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZG9jdW1lbnQtY3JlYXRlLWVsZW1lbnQnKTtcblxuLy8gVGhhbmsncyBJRTggZm9yIGhpcyBmdW5ueSBkZWZpbmVQcm9wZXJ0eVxubW9kdWxlLmV4cG9ydHMgPSAhREVTQ1JJUFRPUlMgJiYgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjcmVhdGVFbGVtZW50KCdkaXYnKSwgJ2EnLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9XG4gIH0pLmEgIT0gNztcbn0pO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmYWxzZTtcbiIsInZhciBzaGFyZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gc2hhcmVkKCduYXRpdmUtZnVuY3Rpb24tdG8tc3RyaW5nJywgRnVuY3Rpb24udG9TdHJpbmcpO1xuIiwidmFyIGlkID0gMDtcbnZhciBwb3N0Zml4ID0gTWF0aC5yYW5kb20oKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIHJldHVybiAnU3ltYm9sKCcgKyBTdHJpbmcoa2V5ID09PSB1bmRlZmluZWQgPyAnJyA6IGtleSkgKyAnKV8nICsgKCsraWQgKyBwb3N0Zml4KS50b1N0cmluZygzNik7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcblxudmFyIGRvY3VtZW50ID0gZ2xvYmFsLmRvY3VtZW50O1xuLy8gdHlwZW9mIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgaXMgJ29iamVjdCcgaW4gb2xkIElFXG52YXIgRVhJU1RTID0gaXNPYmplY3QoZG9jdW1lbnQpICYmIGlzT2JqZWN0KGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gRVhJU1RTID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChpdCkgOiB7fTtcbn07XG4iLCJ2YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIGluZGV4T2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaW5jbHVkZXMnKS5pbmRleE9mO1xudmFyIGhpZGRlbktleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGlkZGVuLWtleXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqZWN0LCBuYW1lcykge1xuICB2YXIgTyA9IHRvSW5kZXhlZE9iamVjdChvYmplY3QpO1xuICB2YXIgaSA9IDA7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgdmFyIGtleTtcbiAgZm9yIChrZXkgaW4gTykgIWhhcyhoaWRkZW5LZXlzLCBrZXkpICYmIGhhcyhPLCBrZXkpICYmIHJlc3VsdC5wdXNoKGtleSk7XG4gIC8vIERvbid0IGVudW0gYnVnICYgaGlkZGVuIGtleXNcbiAgd2hpbGUgKG5hbWVzLmxlbmd0aCA+IGkpIGlmIChoYXMoTywga2V5ID0gbmFtZXNbaSsrXSkpIHtcbiAgICB+aW5kZXhPZihyZXN1bHQsIGtleSkgfHwgcmVzdWx0LnB1c2goa2V5KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsInZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2JpbmQtY29udGV4dCcpO1xudmFyIEluZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5kZXhlZC1vYmplY3QnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciBhcnJheVNwZWNpZXNDcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktc3BlY2llcy1jcmVhdGUnKTtcblxudmFyIHB1c2ggPSBbXS5wdXNoO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLnsgZm9yRWFjaCwgbWFwLCBmaWx0ZXIsIHNvbWUsIGV2ZXJ5LCBmaW5kLCBmaW5kSW5kZXggfWAgbWV0aG9kcyBpbXBsZW1lbnRhdGlvblxudmFyIGNyZWF0ZU1ldGhvZCA9IGZ1bmN0aW9uIChUWVBFKSB7XG4gIHZhciBJU19NQVAgPSBUWVBFID09IDE7XG4gIHZhciBJU19GSUxURVIgPSBUWVBFID09IDI7XG4gIHZhciBJU19TT01FID0gVFlQRSA9PSAzO1xuICB2YXIgSVNfRVZFUlkgPSBUWVBFID09IDQ7XG4gIHZhciBJU19GSU5EX0lOREVYID0gVFlQRSA9PSA2O1xuICB2YXIgTk9fSE9MRVMgPSBUWVBFID09IDUgfHwgSVNfRklORF9JTkRFWDtcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgY2FsbGJhY2tmbiwgdGhhdCwgc3BlY2lmaWNDcmVhdGUpIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KCR0aGlzKTtcbiAgICB2YXIgc2VsZiA9IEluZGV4ZWRPYmplY3QoTyk7XG4gICAgdmFyIGJvdW5kRnVuY3Rpb24gPSBiaW5kKGNhbGxiYWNrZm4sIHRoYXQsIDMpO1xuICAgIHZhciBsZW5ndGggPSB0b0xlbmd0aChzZWxmLmxlbmd0aCk7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgY3JlYXRlID0gc3BlY2lmaWNDcmVhdGUgfHwgYXJyYXlTcGVjaWVzQ3JlYXRlO1xuICAgIHZhciB0YXJnZXQgPSBJU19NQVAgPyBjcmVhdGUoJHRoaXMsIGxlbmd0aCkgOiBJU19GSUxURVIgPyBjcmVhdGUoJHRoaXMsIDApIDogdW5kZWZpbmVkO1xuICAgIHZhciB2YWx1ZSwgcmVzdWx0O1xuICAgIGZvciAoO2xlbmd0aCA+IGluZGV4OyBpbmRleCsrKSBpZiAoTk9fSE9MRVMgfHwgaW5kZXggaW4gc2VsZikge1xuICAgICAgdmFsdWUgPSBzZWxmW2luZGV4XTtcbiAgICAgIHJlc3VsdCA9IGJvdW5kRnVuY3Rpb24odmFsdWUsIGluZGV4LCBPKTtcbiAgICAgIGlmIChUWVBFKSB7XG4gICAgICAgIGlmIChJU19NQVApIHRhcmdldFtpbmRleF0gPSByZXN1bHQ7IC8vIG1hcFxuICAgICAgICBlbHNlIGlmIChyZXN1bHQpIHN3aXRjaCAoVFlQRSkge1xuICAgICAgICAgIGNhc2UgMzogcmV0dXJuIHRydWU7ICAgICAgICAgICAgICAvLyBzb21lXG4gICAgICAgICAgY2FzZSA1OiByZXR1cm4gdmFsdWU7ICAgICAgICAgICAgIC8vIGZpbmRcbiAgICAgICAgICBjYXNlIDY6IHJldHVybiBpbmRleDsgICAgICAgICAgICAgLy8gZmluZEluZGV4XG4gICAgICAgICAgY2FzZSAyOiBwdXNoLmNhbGwodGFyZ2V0LCB2YWx1ZSk7IC8vIGZpbHRlclxuICAgICAgICB9IGVsc2UgaWYgKElTX0VWRVJZKSByZXR1cm4gZmFsc2U7ICAvLyBldmVyeVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gSVNfRklORF9JTkRFWCA/IC0xIDogSVNfU09NRSB8fCBJU19FVkVSWSA/IElTX0VWRVJZIDogdGFyZ2V0O1xuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIC8vIGBBcnJheS5wcm90b3R5cGUuZm9yRWFjaGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5mb3JlYWNoXG4gIGZvckVhY2g6IGNyZWF0ZU1ldGhvZCgwKSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5tYXBgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUubWFwXG4gIG1hcDogY3JlYXRlTWV0aG9kKDEpLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLmZpbHRlcmAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5maWx0ZXJcbiAgZmlsdGVyOiBjcmVhdGVNZXRob2QoMiksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuc29tZWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5zb21lXG4gIHNvbWU6IGNyZWF0ZU1ldGhvZCgzKSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5ldmVyeWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5ldmVyeVxuICBldmVyeTogY3JlYXRlTWV0aG9kKDQpLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLmZpbmRgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZmluZFxuICBmaW5kOiBjcmVhdGVNZXRob2QoNSksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuZmluZEluZGV4YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZpbmRJbmRleFxuICBmaW5kSW5kZXg6IGNyZWF0ZU1ldGhvZCg2KVxufTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWFycmF5Jyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBTUEVDSUVTID0gd2VsbEtub3duU3ltYm9sKCdzcGVjaWVzJyk7XG5cbi8vIGBBcnJheVNwZWNpZXNDcmVhdGVgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXlzcGVjaWVzY3JlYXRlXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvcmlnaW5hbEFycmF5LCBsZW5ndGgpIHtcbiAgdmFyIEM7XG4gIGlmIChpc0FycmF5KG9yaWdpbmFsQXJyYXkpKSB7XG4gICAgQyA9IG9yaWdpbmFsQXJyYXkuY29uc3RydWN0b3I7XG4gICAgLy8gY3Jvc3MtcmVhbG0gZmFsbGJhY2tcbiAgICBpZiAodHlwZW9mIEMgPT0gJ2Z1bmN0aW9uJyAmJiAoQyA9PT0gQXJyYXkgfHwgaXNBcnJheShDLnByb3RvdHlwZSkpKSBDID0gdW5kZWZpbmVkO1xuICAgIGVsc2UgaWYgKGlzT2JqZWN0KEMpKSB7XG4gICAgICBDID0gQ1tTUEVDSUVTXTtcbiAgICAgIGlmIChDID09PSBudWxsKSBDID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfSByZXR1cm4gbmV3IChDID09PSB1bmRlZmluZWQgPyBBcnJheSA6IEMpKGxlbmd0aCA9PT0gMCA/IDAgOiBsZW5ndGgpO1xufTtcbiIsInZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YtcmF3Jyk7XG5cbi8vIGBJc0FycmF5YCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWlzYXJyYXlcbm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiBpc0FycmF5KGFyZykge1xuICByZXR1cm4gY2xhc3NvZihhcmcpID09ICdBcnJheSc7XG59O1xuIiwidmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWZ1bmN0aW9uJyk7XG5cbi8vIG9wdGlvbmFsIC8gc2ltcGxlIGNvbnRleHQgYmluZGluZ1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZm4sIHRoYXQsIGxlbmd0aCkge1xuICBhRnVuY3Rpb24oZm4pO1xuICBpZiAodGhhdCA9PT0gdW5kZWZpbmVkKSByZXR1cm4gZm47XG4gIHN3aXRjaCAobGVuZ3RoKSB7XG4gICAgY2FzZSAwOiByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCk7XG4gICAgfTtcbiAgICBjYXNlIDE6IHJldHVybiBmdW5jdGlvbiAoYSkge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSk7XG4gICAgfTtcbiAgICBjYXNlIDI6IHJldHVybiBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYik7XG4gICAgfTtcbiAgICBjYXNlIDM6IHJldHVybiBmdW5jdGlvbiAoYSwgYiwgYykge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYiwgYyk7XG4gICAgfTtcbiAgfVxuICByZXR1cm4gZnVuY3Rpb24gKC8qIC4uLmFyZ3MgKi8pIHtcbiAgICByZXR1cm4gZm4uYXBwbHkodGhhdCwgYXJndW1lbnRzKTtcbiAgfTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAodHlwZW9mIGl0ICE9ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IoU3RyaW5nKGl0KSArICcgaXMgbm90IGEgZnVuY3Rpb24nKTtcbiAgfSByZXR1cm4gaXQ7XG59O1xuIiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBTUEVDSUVTID0gd2VsbEtub3duU3ltYm9sKCdzcGVjaWVzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE1FVEhPRF9OQU1FKSB7XG4gIHJldHVybiAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIHZhciBhcnJheSA9IFtdO1xuICAgIHZhciBjb25zdHJ1Y3RvciA9IGFycmF5LmNvbnN0cnVjdG9yID0ge307XG4gICAgY29uc3RydWN0b3JbU1BFQ0lFU10gPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4geyBmb286IDEgfTtcbiAgICB9O1xuICAgIHJldHVybiBhcnJheVtNRVRIT0RfTkFNRV0oQm9vbGVhbikuZm9vICE9PSAxO1xuICB9KTtcbn07XG4iLCJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IG5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iLCJ2YXIgTkFUSVZFX1dFQUtfTUFQID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25hdGl2ZS13ZWFrLW1hcCcpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hpZGUnKTtcbnZhciBvYmplY3RIYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgc2hhcmVkS2V5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1rZXknKTtcbnZhciBoaWRkZW5LZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hpZGRlbi1rZXlzJyk7XG5cbnZhciBXZWFrTWFwID0gZ2xvYmFsLldlYWtNYXA7XG52YXIgc2V0LCBnZXQsIGhhcztcblxudmFyIGVuZm9yY2UgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGhhcyhpdCkgPyBnZXQoaXQpIDogc2V0KGl0LCB7fSk7XG59O1xuXG52YXIgZ2V0dGVyRm9yID0gZnVuY3Rpb24gKFRZUEUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChpdCkge1xuICAgIHZhciBzdGF0ZTtcbiAgICBpZiAoIWlzT2JqZWN0KGl0KSB8fCAoc3RhdGUgPSBnZXQoaXQpKS50eXBlICE9PSBUWVBFKSB7XG4gICAgICB0aHJvdyBUeXBlRXJyb3IoJ0luY29tcGF0aWJsZSByZWNlaXZlciwgJyArIFRZUEUgKyAnIHJlcXVpcmVkJyk7XG4gICAgfSByZXR1cm4gc3RhdGU7XG4gIH07XG59O1xuXG5pZiAoTkFUSVZFX1dFQUtfTUFQKSB7XG4gIHZhciBzdG9yZSA9IG5ldyBXZWFrTWFwKCk7XG4gIHZhciB3bWdldCA9IHN0b3JlLmdldDtcbiAgdmFyIHdtaGFzID0gc3RvcmUuaGFzO1xuICB2YXIgd21zZXQgPSBzdG9yZS5zZXQ7XG4gIHNldCA9IGZ1bmN0aW9uIChpdCwgbWV0YWRhdGEpIHtcbiAgICB3bXNldC5jYWxsKHN0b3JlLCBpdCwgbWV0YWRhdGEpO1xuICAgIHJldHVybiBtZXRhZGF0YTtcbiAgfTtcbiAgZ2V0ID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIHdtZ2V0LmNhbGwoc3RvcmUsIGl0KSB8fCB7fTtcbiAgfTtcbiAgaGFzID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIHdtaGFzLmNhbGwoc3RvcmUsIGl0KTtcbiAgfTtcbn0gZWxzZSB7XG4gIHZhciBTVEFURSA9IHNoYXJlZEtleSgnc3RhdGUnKTtcbiAgaGlkZGVuS2V5c1tTVEFURV0gPSB0cnVlO1xuICBzZXQgPSBmdW5jdGlvbiAoaXQsIG1ldGFkYXRhKSB7XG4gICAgaGlkZShpdCwgU1RBVEUsIG1ldGFkYXRhKTtcbiAgICByZXR1cm4gbWV0YWRhdGE7XG4gIH07XG4gIGdldCA9IGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiBvYmplY3RIYXMoaXQsIFNUQVRFKSA/IGl0W1NUQVRFXSA6IHt9O1xuICB9O1xuICBoYXMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgICByZXR1cm4gb2JqZWN0SGFzKGl0LCBTVEFURSk7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBzZXQ6IHNldCxcbiAgZ2V0OiBnZXQsXG4gIGhhczogaGFzLFxuICBlbmZvcmNlOiBlbmZvcmNlLFxuICBnZXR0ZXJGb3I6IGdldHRlckZvclxufTtcbiIsInZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW50ZWdlcicpO1xuXG52YXIgbWF4ID0gTWF0aC5tYXg7XG52YXIgbWluID0gTWF0aC5taW47XG5cbi8vIEhlbHBlciBmb3IgYSBwb3B1bGFyIHJlcGVhdGluZyBjYXNlIG9mIHRoZSBzcGVjOlxuLy8gTGV0IGludGVnZXIgYmUgPyBUb0ludGVnZXIoaW5kZXgpLlxuLy8gSWYgaW50ZWdlciA8IDAsIGxldCByZXN1bHQgYmUgbWF4KChsZW5ndGggKyBpbnRlZ2VyKSwgMCk7IGVsc2UgbGV0IHJlc3VsdCBiZSBtaW4obGVuZ3RoLCBsZW5ndGgpLlxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaW5kZXgsIGxlbmd0aCkge1xuICB2YXIgaW50ZWdlciA9IHRvSW50ZWdlcihpbmRleCk7XG4gIHJldHVybiBpbnRlZ2VyIDwgMCA/IG1heChpbnRlZ2VyICsgbGVuZ3RoLCAwKSA6IG1pbihpbnRlZ2VyLCBsZW5ndGgpO1xufTtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG52YXIgcmVwbGFjZW1lbnQgPSAvI3xcXC5wcm90b3R5cGVcXC4vO1xuXG52YXIgaXNGb3JjZWQgPSBmdW5jdGlvbiAoZmVhdHVyZSwgZGV0ZWN0aW9uKSB7XG4gIHZhciB2YWx1ZSA9IGRhdGFbbm9ybWFsaXplKGZlYXR1cmUpXTtcbiAgcmV0dXJuIHZhbHVlID09IFBPTFlGSUxMID8gdHJ1ZVxuICAgIDogdmFsdWUgPT0gTkFUSVZFID8gZmFsc2VcbiAgICA6IHR5cGVvZiBkZXRlY3Rpb24gPT0gJ2Z1bmN0aW9uJyA/IGZhaWxzKGRldGVjdGlvbilcbiAgICA6ICEhZGV0ZWN0aW9uO1xufTtcblxudmFyIG5vcm1hbGl6ZSA9IGlzRm9yY2VkLm5vcm1hbGl6ZSA9IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgcmV0dXJuIFN0cmluZyhzdHJpbmcpLnJlcGxhY2UocmVwbGFjZW1lbnQsICcuJykudG9Mb3dlckNhc2UoKTtcbn07XG5cbnZhciBkYXRhID0gaXNGb3JjZWQuZGF0YSA9IHt9O1xudmFyIE5BVElWRSA9IGlzRm9yY2VkLk5BVElWRSA9ICdOJztcbnZhciBQT0xZRklMTCA9IGlzRm9yY2VkLlBPTFlGSUxMID0gJ1AnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGlzRm9yY2VkO1xuIiwidmFyIGludGVybmFsT2JqZWN0S2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qta2V5cy1pbnRlcm5hbCcpO1xudmFyIGVudW1CdWdLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VudW0tYnVnLWtleXMnKTtcblxudmFyIGhpZGRlbktleXMgPSBlbnVtQnVnS2V5cy5jb25jYXQoJ2xlbmd0aCcsICdwcm90b3R5cGUnKTtcblxuLy8gYE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5nZXRvd25wcm9wZXJ0eW5hbWVzXG5leHBvcnRzLmYgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyB8fCBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKE8pIHtcbiAgcmV0dXJuIGludGVybmFsT2JqZWN0S2V5cyhPLCBoaWRkZW5LZXlzKTtcbn07XG4iLCJ2YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWFic29sdXRlLWluZGV4Jyk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUueyBpbmRleE9mLCBpbmNsdWRlcyB9YCBtZXRob2RzIGltcGxlbWVudGF0aW9uXG52YXIgY3JlYXRlTWV0aG9kID0gZnVuY3Rpb24gKElTX0lOQ0xVREVTKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIGVsLCBmcm9tSW5kZXgpIHtcbiAgICB2YXIgTyA9IHRvSW5kZXhlZE9iamVjdCgkdGhpcyk7XG4gICAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICB2YXIgaW5kZXggPSB0b0Fic29sdXRlSW5kZXgoZnJvbUluZGV4LCBsZW5ndGgpO1xuICAgIHZhciB2YWx1ZTtcbiAgICAvLyBBcnJheSNpbmNsdWRlcyB1c2VzIFNhbWVWYWx1ZVplcm8gZXF1YWxpdHkgYWxnb3JpdGhtXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIGlmIChJU19JTkNMVURFUyAmJiBlbCAhPSBlbCkgd2hpbGUgKGxlbmd0aCA+IGluZGV4KSB7XG4gICAgICB2YWx1ZSA9IE9baW5kZXgrK107XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgICBpZiAodmFsdWUgIT0gdmFsdWUpIHJldHVybiB0cnVlO1xuICAgIC8vIEFycmF5I2luZGV4T2YgaWdub3JlcyBob2xlcywgQXJyYXkjaW5jbHVkZXMgLSBub3RcbiAgICB9IGVsc2UgZm9yICg7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIHtcbiAgICAgIGlmICgoSVNfSU5DTFVERVMgfHwgaW5kZXggaW4gTykgJiYgT1tpbmRleF0gPT09IGVsKSByZXR1cm4gSVNfSU5DTFVERVMgfHwgaW5kZXggfHwgMDtcbiAgICB9IHJldHVybiAhSVNfSU5DTFVERVMgJiYgLTE7XG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5pbmNsdWRlc2AgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5pbmNsdWRlc1xuICBpbmNsdWRlczogY3JlYXRlTWV0aG9kKHRydWUpLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLmluZGV4T2ZgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuaW5kZXhvZlxuICBpbmRleE9mOiBjcmVhdGVNZXRob2QoZmFsc2UpXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHJlZ2V4cEZsYWdzID0gcmVxdWlyZSgnLi9yZWdleHAtZmxhZ3MnKTtcblxudmFyIG5hdGl2ZUV4ZWMgPSBSZWdFeHAucHJvdG90eXBlLmV4ZWM7XG4vLyBUaGlzIGFsd2F5cyByZWZlcnMgdG8gdGhlIG5hdGl2ZSBpbXBsZW1lbnRhdGlvbiwgYmVjYXVzZSB0aGVcbi8vIFN0cmluZyNyZXBsYWNlIHBvbHlmaWxsIHVzZXMgLi9maXgtcmVnZXhwLXdlbGwta25vd24tc3ltYm9sLWxvZ2ljLmpzLFxuLy8gd2hpY2ggbG9hZHMgdGhpcyBmaWxlIGJlZm9yZSBwYXRjaGluZyB0aGUgbWV0aG9kLlxudmFyIG5hdGl2ZVJlcGxhY2UgPSBTdHJpbmcucHJvdG90eXBlLnJlcGxhY2U7XG5cbnZhciBwYXRjaGVkRXhlYyA9IG5hdGl2ZUV4ZWM7XG5cbnZhciBVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkcgPSAoZnVuY3Rpb24gKCkge1xuICB2YXIgcmUxID0gL2EvO1xuICB2YXIgcmUyID0gL2IqL2c7XG4gIG5hdGl2ZUV4ZWMuY2FsbChyZTEsICdhJyk7XG4gIG5hdGl2ZUV4ZWMuY2FsbChyZTIsICdhJyk7XG4gIHJldHVybiByZTEubGFzdEluZGV4ICE9PSAwIHx8IHJlMi5sYXN0SW5kZXggIT09IDA7XG59KSgpO1xuXG4vLyBub25wYXJ0aWNpcGF0aW5nIGNhcHR1cmluZyBncm91cCwgY29waWVkIGZyb20gZXM1LXNoaW0ncyBTdHJpbmcjc3BsaXQgcGF0Y2guXG52YXIgTlBDR19JTkNMVURFRCA9IC8oKT8/Ly5leGVjKCcnKVsxXSAhPT0gdW5kZWZpbmVkO1xuXG52YXIgUEFUQ0ggPSBVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkcgfHwgTlBDR19JTkNMVURFRDtcblxuaWYgKFBBVENIKSB7XG4gIHBhdGNoZWRFeGVjID0gZnVuY3Rpb24gZXhlYyhzdHIpIHtcbiAgICB2YXIgcmUgPSB0aGlzO1xuICAgIHZhciBsYXN0SW5kZXgsIHJlQ29weSwgbWF0Y2gsIGk7XG5cbiAgICBpZiAoTlBDR19JTkNMVURFRCkge1xuICAgICAgcmVDb3B5ID0gbmV3IFJlZ0V4cCgnXicgKyByZS5zb3VyY2UgKyAnJCg/IVxcXFxzKScsIHJlZ2V4cEZsYWdzLmNhbGwocmUpKTtcbiAgICB9XG4gICAgaWYgKFVQREFURVNfTEFTVF9JTkRFWF9XUk9ORykgbGFzdEluZGV4ID0gcmUubGFzdEluZGV4O1xuXG4gICAgbWF0Y2ggPSBuYXRpdmVFeGVjLmNhbGwocmUsIHN0cik7XG5cbiAgICBpZiAoVVBEQVRFU19MQVNUX0lOREVYX1dST05HICYmIG1hdGNoKSB7XG4gICAgICByZS5sYXN0SW5kZXggPSByZS5nbG9iYWwgPyBtYXRjaC5pbmRleCArIG1hdGNoWzBdLmxlbmd0aCA6IGxhc3RJbmRleDtcbiAgICB9XG4gICAgaWYgKE5QQ0dfSU5DTFVERUQgJiYgbWF0Y2ggJiYgbWF0Y2gubGVuZ3RoID4gMSkge1xuICAgICAgLy8gRml4IGJyb3dzZXJzIHdob3NlIGBleGVjYCBtZXRob2RzIGRvbid0IGNvbnNpc3RlbnRseSByZXR1cm4gYHVuZGVmaW5lZGBcbiAgICAgIC8vIGZvciBOUENHLCBsaWtlIElFOC4gTk9URTogVGhpcyBkb2Vzbicgd29yayBmb3IgLyguPyk/L1xuICAgICAgbmF0aXZlUmVwbGFjZS5jYWxsKG1hdGNoWzBdLCByZUNvcHksIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZm9yIChpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGggLSAyOyBpKyspIHtcbiAgICAgICAgICBpZiAoYXJndW1lbnRzW2ldID09PSB1bmRlZmluZWQpIG1hdGNoW2ldID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbWF0Y2g7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gcGF0Y2hlZEV4ZWM7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tcHJpbWl0aXZlJyk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xudmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgdmFyIHByb3BlcnR5S2V5ID0gdG9QcmltaXRpdmUoa2V5KTtcbiAgaWYgKHByb3BlcnR5S2V5IGluIG9iamVjdCkgZGVmaW5lUHJvcGVydHlNb2R1bGUuZihvYmplY3QsIHByb3BlcnR5S2V5LCBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMCwgdmFsdWUpKTtcbiAgZWxzZSBvYmplY3RbcHJvcGVydHlLZXldID0gdmFsdWU7XG59O1xuIiwiLyoqXG4gKiBTaW1wbGUgdGhyb3R0bGluZyBmdW5jdGlvbiBmb3Igd2FpdGluZyBhIHNldCBhbW91bnQgb2YgdGltZSBhZnRlciB0aGUgbGFzdCBrZXlwcmVzc1xuICogU28gd2UgZG9uJ3Qgb3ZlcmxvYWQgdGhlIHNlcnZlciB3aXRoIHRvbyBtYW55IHJlcXVlc3RzIGF0IG9uY2VcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiAtIGZ1bmN0aW9uIHRvIGJlIGRlYm91bmNlZFxuICogQHBhcmFtIHtudW1iZXJ9IGRlbGF5IC0gaW50ZWdlclxuICogQHJldHVybnMge0Z1bmN0aW9ufSAtIG5ldyBmdW5jdGlvbiwgd2l0aCB0aGUgcHJvdmlkZWQgZnVuY3Rpb24gd3JhcHBlZCBpbiBhIHRpbWVvdXRcbiAqL1xuZXhwb3J0IGNvbnN0IGRlYm91bmNlID0gKGZuLCBkZWxheSkgPT4ge1xuXHRsZXQgdGltZXIgPSBudWxsO1xuXG5cdC8vIGRvbid0IHVzZSBhIGZhdCBhcnJvdyBpbiBvcmRlciB0byBwcmVzZXJ2ZSB0aGUgcHJvcGVyIGNvbnRleHRcblx0cmV0dXJuIGZ1bmN0aW9uIGRlYm91bmNlZEZ1bmN0aW9uKC4uLmFyZ3MpIHtcblx0XHRjb25zdCBjb250ZXh0ID0gdGhpcztcblx0XHR3aW5kb3cuY2xlYXJUaW1lb3V0KHRpbWVyKTtcblxuXHRcdHRpbWVyID0gd2luZG93LnNldFRpbWVvdXQoKCkgPT4ge1xuXHRcdFx0Zm4uYXBwbHkoY29udGV4dCwgYXJncyk7XG5cdFx0fSwgZGVsYXkpO1xuXHR9O1xufTtcblxuLyoqXG4gKiBIZWxwZXIgZnVuY3Rpb24gdG8gZXNjYXBlIGlucHV0IHRvIGJlIHRyZWF0ZWQgYXMgYSBsaXRlcmFsIHN0cmluZyB3aXRoIGEgUmVnRXhcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIC0gc3RyaW5nIHRvIGJlIGVzY2FwZWRcbiAqIEByZXR1cm5zIHtzdHJpbmd9IGVzY2FwZWQgc3RyaW5nXG4gKi9cbmV4cG9ydCBjb25zdCBlc2NhcGVSZWdFeHAgPSAoc3RyaW5nKSA9PiBzdHJpbmcucmVwbGFjZSgvWy4qKz9eJHt9KCl8W1xcXVxcXFxdL2csICdcXFxcJCYnKTtcblxuLyoqXG4gKiBIZWxwZXIgZnVuY3Rpb24gdG8gZXNjYXBlIGlucHV0IHRvIGJlIHRyZWF0ZWQgYXMgYSBsaXRlcmFsIHN0cmluZyB3aXRoIGEgUmVnRXhcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIC0gc3RyaW5nIHRvIHJlcGxhY2VcbiAqIEBwYXJhbSB7c3RyaW5nfSB0ZXJtIC0gdGVhcm0gdG8gc2VhcmNoIGZvclxuICogQHBhcmFtIHtzdHJpbmd9IHJlcGxhY2VtZW50ICByZXBsYWNlIHZhbHVlIHRvIHVzZVxuICogQHJldHVybnMge3N0cmluZ30gcmVwbGFjZWQgc3RyaW5nXG4gKi9cbmV4cG9ydCBjb25zdCByZXBsYWNlR2xvYmFsbHkgPSAoc3RyaW5nLCB0ZXJtLCByZXBsYWNlbWVudCkgPT4ge1xuXHRyZXR1cm4gc3RyaW5nLnJlcGxhY2UobmV3IFJlZ0V4cChlc2NhcGVSZWdFeHAodGVybSksICdnJyksIHJlcGxhY2VtZW50KTtcbn07XG5cbi8qKlxuICogRXNjYXBlcyBkb3VibGUgcXVvdGVzIGZvciBzcGVjaWZpYyBkYXRhLWF0dHJcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyIFRoZSBwcm92aWRlZCBzdHJpbmcgY29udGFpbmluZyBkb3VibGUgcXVvdGVzXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgZXNjYXBlZCBzdHJpbmdcbiAqL1xuZXhwb3J0IGNvbnN0IGVzY2FwZURvdWJsZVF1b3RlcyA9IChzdHIpID0+IHN0ci5yZXBsYWNlKC9cXFxcKFtcXHNcXFNdKXwoXCIpL2csICcmcXVvdDsnKTtcblxuLyoqXG4gKiBGaW5kcyBwYXJlbnQgbm9kZSB3aXRoIHRoZSBwcm92aWRlZCBjbGFzcyBwYXJhbVxuICpcbiAqIEBwYXJhbSB7Kn0gZWwgLSBub2RlIHRvIHNlYXJjaCBmb3IgaXRzIGFuY2VzdG9yXG4gKiBAcGFyYW0geyp9IGNsYXNzTmFtZSAtIGNsYXNzIGF0dHJpYnV0ZSB0byBzZWFyY2ggZm9yXG4gKiBAcmV0dXJucyB7RWxlbWVudH0gLSBhbmNlc3RvciBlbGVtZW50IG9mIHByb3ZpZGVkIGVsXG4gKi9cbmV4cG9ydCBjb25zdCBmaW5kQW5jZXN0b3JCeUNsYXNzID0gKGVsLCBjbGFzc05hbWUpID0+IHtcblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG5cdHdoaWxlICggKCBlbCA9IGVsLnBhcmVudEVsZW1lbnQgKSAmJiAhZWwuY2xhc3NMaXN0LmNvbnRhaW5zKCBjbGFzc05hbWUgKSApO1xuXHRyZXR1cm4gZWw7XG59O1xuXG4vKipcbiAqIEFycmF5IHBsdWNrXG4gKlxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgLSBhcnJheSB0byBzZWFyY2hcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgLSBhcnJheSB0byBzZWFyY2hcbiAqIEByZXR1cm5zIHtBcnJheX0gLSBuZXcgYXJyYXlcbiAqL1xuZXhwb3J0IGNvbnN0IHBsdWNrID0gKGFycmF5LCBrZXkpID0+IHtcblx0cmV0dXJuIGFycmF5Lm1hcCgobykgPT4gb1trZXldKTtcbn07XG5cbi8qKlxuICogRm9ybWF0cyBvYmplY3QgbGlrZSBhIHVybCBxdWVyeSBzdHJpbmcsIHdoaWNoIGlzIGhvdyBhamF4IG1ldGhvZHNcbiAqIGluIFBIUCBleHBlY3QgdG8gcmVjZWl2ZSB0aGUgZGF0YSwgZS5nLiBhY3Rpb25fd3BfYWpheF9lcF9zYXZlX2ZlYXR1cmVcbiAqIGZyb20gZGFzaGJvYXJkLnBocFxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBvYmogLSBqcyBvYmplY3RcbiAqIEByZXR1cm5zIHtzdHJpbmd9IHVybGVuY29kZWQgc3RyaW5nIGZvciBQT1NUIGFqYXggcmVxdWVzdFxuICovXG5leHBvcnQgY29uc3QgZm9ybWF0UG9zdEJvZHkgPSAob2JqKSA9PiB7XG5cdHJldHVybiBPYmplY3Qua2V5cyhvYmopXG5cdFx0Lm1hcCgoa2V5KSA9PiBgJHtlbmNvZGVVUklDb21wb25lbnQoa2V5KX09JHtlbmNvZGVVUklDb21wb25lbnQob2JqW2tleV0pfWApXG5cdFx0LmpvaW4oJyYnKVxuXHRcdC5yZXBsYWNlKC8lMjAvZywgJysnKTtcbn07XG5cbi8qKlxuICogSGVscGVyIG1ldGhvZCB0byB3cmFwIHNob3cvaGlkZSBlbGVtZW50cy4gTm90IGV4cG9ydGVkLlxuICpcbiAqIEBwYXJhbSB7QXJyYXl9IGVscyAtIGNvdWxkIHBvc3NpYmx5IGJlIGEgc2luZ2xlIG5vZGUsIG9yIGFuIGFycmF5IG9mIG5vZGVzXG4gKiBAcGFyYW0ge3N0cmluZ30gZGlzcGxheSAtIGNzcyBkaXNwbGF5IHByb3BlcnR5IHRvIHNldFxuICovXG5jb25zdCBzaG93T3JIaWRlTm9kZXMgPSAoZWxzLCBkaXNwbGF5KSA9PiB7XG5cdGxldCBub2RlcyA9IFtdO1xuXG5cdC8vIGNvbnZlcnQgbm9kZWxpc3QgdG8gYXJyYXlcblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb3RvdHlwZS1idWlsdGluc1xuXHRpZiAoTm9kZUxpc3QucHJvdG90eXBlLmlzUHJvdG90eXBlT2YoZWxzKSkge1xuXHRcdG5vZGVzID0gQXJyYXkuZnJvbShlbHMpO1xuXHR9XG5cblx0Ly8gaWYgbm90IGNvbnZlcnRlZCwgdGhlbiBpdCB3YXMgYSBzaW5nbGUgbm9kZSxcblx0Ly8gc28gY3JlYXRlIGFuIGFycmF5XG5cdGlmICghbm9kZXMubGVuZ3RoKSB7XG5cdFx0aWYgKEFycmF5LmlzQXJyYXkoZWxzKSkge1xuXHRcdFx0bm9kZXMgPSBbLi4uZWxzLCAuLi5ub2Rlc107XG5cdFx0fSBlbHNlIHtcblx0XHRcdG5vZGVzLnB1c2goZWxzKTtcblx0XHR9XG5cdH1cblxuXHRub2Rlcy5mb3JFYWNoKChlbCkgPT4ge1xuXHRcdGVsLnN0eWxlLmRpc3BsYXkgPSBkaXNwbGF5OyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG5cdH0pO1xufTtcblxuLyoqXG4gKiBEZWNvcmF0ZWQgaGVscGVyIGZ1bmN0aW9uIHRvIHNob3cgbm9kZS9Ob2RlTGlzdC9hcnJheSBvZiBub2Rlc1xuICpcbiAqIEBwYXJhbSB7QXJyYXl9IGVscyAtIE5vZGVsaXN0L2FycmF5IG9mIE5vZGVzIHRvIHNob3dcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gLSBzaG93T3JIaWRlTm9kZXNcbiAqL1xuZXhwb3J0IGNvbnN0IHNob3dFbGVtZW50cyA9IChlbHMpID0+IHNob3dPckhpZGVOb2RlcyhlbHMsICdpbmxpbmUtYmxvY2snKTtcblxuLyoqXG4gKiBEZWNvcmF0ZWQgaGVscGVyIGZ1bmN0aW9uIHRvIGhpZGUgbm9kZS9Ob2RlTGlzdC9hcnJheSBvZiBub2Rlc1xuICpcbiAqIEBwYXJhbSB7QXJyYXl9IGVscyAtIE5vZGVsaXN0L2FycmF5IG9mIE5vZGVzIHRvIHNob3dcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gLSBzaG93T3JIaWRlTm9kZXNcbiAqL1xuZXhwb3J0IGNvbnN0IGhpZGVFbGVtZW50cyA9IChlbHMpID0+IHNob3dPckhpZGVOb2RlcyhlbHMsICdub25lJyk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgbmF0aXZlUHJvcGVydHlJc0VudW1lcmFibGUgPSB7fS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuXG4vLyBOYXNob3JuIH4gSkRLOCBidWdcbnZhciBOQVNIT1JOX0JVRyA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvciAmJiAhbmF0aXZlUHJvcGVydHlJc0VudW1lcmFibGUuY2FsbCh7IDE6IDIgfSwgMSk7XG5cbi8vIGBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlYCBtZXRob2QgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5wcm90b3R5cGUucHJvcGVydHlpc2VudW1lcmFibGVcbmV4cG9ydHMuZiA9IE5BU0hPUk5fQlVHID8gZnVuY3Rpb24gcHJvcGVydHlJc0VudW1lcmFibGUoVikge1xuICB2YXIgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0aGlzLCBWKTtcbiAgcmV0dXJuICEhZGVzY3JpcHRvciAmJiBkZXNjcmlwdG9yLmVudW1lcmFibGU7XG59IDogbmF0aXZlUHJvcGVydHlJc0VudW1lcmFibGU7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbiIsInZhciBpbnRlcm5hbE9iamVjdEtleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWtleXMtaW50ZXJuYWwnKTtcbnZhciBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbnVtLWJ1Zy1rZXlzJyk7XG5cbi8vIGBPYmplY3Qua2V5c2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3Qua2V5c1xubW9kdWxlLmV4cG9ydHMgPSBPYmplY3Qua2V5cyB8fCBmdW5jdGlvbiBrZXlzKE8pIHtcbiAgcmV0dXJuIGludGVybmFsT2JqZWN0S2V5cyhPLCBlbnVtQnVnS2V5cyk7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7fTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgbmF0aXZlRnVuY3Rpb25Ub1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi10by1zdHJpbmcnKTtcblxudmFyIFdlYWtNYXAgPSBnbG9iYWwuV2Vha01hcDtcblxubW9kdWxlLmV4cG9ydHMgPSB0eXBlb2YgV2Vha01hcCA9PT0gJ2Z1bmN0aW9uJyAmJiAvbmF0aXZlIGNvZGUvLnRlc3QobmF0aXZlRnVuY3Rpb25Ub1N0cmluZy5jYWxsKFdlYWtNYXApKTtcbiIsInZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgb3duS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vd24ta2V5cycpO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0YXJnZXQsIHNvdXJjZSkge1xuICB2YXIga2V5cyA9IG93bktleXMoc291cmNlKTtcbiAgdmFyIGRlZmluZVByb3BlcnR5ID0gZGVmaW5lUHJvcGVydHlNb2R1bGUuZjtcbiAgdmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZS5mO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICBpZiAoIWhhcyh0YXJnZXQsIGtleSkpIGRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTtcbiAgfVxufTtcbiIsInZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIGdldE93blByb3BlcnR5TmFtZXNNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktc3ltYm9scycpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xuXG4vLyBhbGwgb2JqZWN0IGtleXMsIGluY2x1ZGVzIG5vbi1lbnVtZXJhYmxlIGFuZCBzeW1ib2xzXG5tb2R1bGUuZXhwb3J0cyA9IGdldEJ1aWx0SW4oJ1JlZmxlY3QnLCAnb3duS2V5cycpIHx8IGZ1bmN0aW9uIG93bktleXMoaXQpIHtcbiAgdmFyIGtleXMgPSBnZXRPd25Qcm9wZXJ0eU5hbWVzTW9kdWxlLmYoYW5PYmplY3QoaXQpKTtcbiAgdmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZS5mO1xuICByZXR1cm4gZ2V0T3duUHJvcGVydHlTeW1ib2xzID8ga2V5cy5jb25jYXQoZ2V0T3duUHJvcGVydHlTeW1ib2xzKGl0KSkgOiBrZXlzO1xufTtcbiIsImV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG4iLCJ2YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAhIU9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgJiYgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gQ2hyb21lIDM4IFN5bWJvbCBoYXMgaW5jb3JyZWN0IHRvU3RyaW5nIGNvbnZlcnNpb25cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gIHJldHVybiAhU3RyaW5nKFN5bWJvbCgpKTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE1FVEhPRF9OQU1FLCBhcmd1bWVudCkge1xuICB2YXIgbWV0aG9kID0gW11bTUVUSE9EX05BTUVdO1xuICByZXR1cm4gIW1ldGhvZCB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11c2VsZXNzLWNhbGwsbm8tdGhyb3ctbGl0ZXJhbFxuICAgIG1ldGhvZC5jYWxsKG51bGwsIGFyZ3VtZW50IHx8IGZ1bmN0aW9uICgpIHsgdGhyb3cgMTsgfSwgMSk7XG4gIH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcblxuLy8gYFJlZ0V4cC5wcm90b3R5cGUuZmxhZ3NgIGdldHRlciBpbXBsZW1lbnRhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtZ2V0LXJlZ2V4cC5wcm90b3R5cGUuZmxhZ3Ncbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuICB2YXIgdGhhdCA9IGFuT2JqZWN0KHRoaXMpO1xuICB2YXIgcmVzdWx0ID0gJyc7XG4gIGlmICh0aGF0Lmdsb2JhbCkgcmVzdWx0ICs9ICdnJztcbiAgaWYgKHRoYXQuaWdub3JlQ2FzZSkgcmVzdWx0ICs9ICdpJztcbiAgaWYgKHRoYXQubXVsdGlsaW5lKSByZXN1bHQgKz0gJ20nO1xuICBpZiAodGhhdC5kb3RBbGwpIHJlc3VsdCArPSAncyc7XG4gIGlmICh0aGF0LnVuaWNvZGUpIHJlc3VsdCArPSAndSc7XG4gIGlmICh0aGF0LnN0aWNreSkgcmVzdWx0ICs9ICd5JztcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCJ2YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgZGVmaW5lUHJvcGVydGllcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnRpZXMnKTtcbnZhciBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbnVtLWJ1Zy1rZXlzJyk7XG52YXIgaGlkZGVuS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oaWRkZW4ta2V5cycpO1xudmFyIGh0bWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaHRtbCcpO1xudmFyIGRvY3VtZW50Q3JlYXRlRWxlbWVudCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kb2N1bWVudC1jcmVhdGUtZWxlbWVudCcpO1xudmFyIHNoYXJlZEtleSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQta2V5Jyk7XG52YXIgSUVfUFJPVE8gPSBzaGFyZWRLZXkoJ0lFX1BST1RPJyk7XG5cbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcbnZhciBFbXB0eSA9IGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfTtcblxuLy8gQ3JlYXRlIG9iamVjdCB3aXRoIGZha2UgYG51bGxgIHByb3RvdHlwZTogdXNlIGlmcmFtZSBPYmplY3Qgd2l0aCBjbGVhcmVkIHByb3RvdHlwZVxudmFyIGNyZWF0ZURpY3QgPSBmdW5jdGlvbiAoKSB7XG4gIC8vIFRocmFzaCwgd2FzdGUgYW5kIHNvZG9teTogSUUgR0MgYnVnXG4gIHZhciBpZnJhbWUgPSBkb2N1bWVudENyZWF0ZUVsZW1lbnQoJ2lmcmFtZScpO1xuICB2YXIgbGVuZ3RoID0gZW51bUJ1Z0tleXMubGVuZ3RoO1xuICB2YXIgbHQgPSAnPCc7XG4gIHZhciBzY3JpcHQgPSAnc2NyaXB0JztcbiAgdmFyIGd0ID0gJz4nO1xuICB2YXIganMgPSAnamF2YScgKyBzY3JpcHQgKyAnOic7XG4gIHZhciBpZnJhbWVEb2N1bWVudDtcbiAgaWZyYW1lLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gIGh0bWwuYXBwZW5kQ2hpbGQoaWZyYW1lKTtcbiAgaWZyYW1lLnNyYyA9IFN0cmluZyhqcyk7XG4gIGlmcmFtZURvY3VtZW50ID0gaWZyYW1lLmNvbnRlbnRXaW5kb3cuZG9jdW1lbnQ7XG4gIGlmcmFtZURvY3VtZW50Lm9wZW4oKTtcbiAgaWZyYW1lRG9jdW1lbnQud3JpdGUobHQgKyBzY3JpcHQgKyBndCArICdkb2N1bWVudC5GPU9iamVjdCcgKyBsdCArICcvJyArIHNjcmlwdCArIGd0KTtcbiAgaWZyYW1lRG9jdW1lbnQuY2xvc2UoKTtcbiAgY3JlYXRlRGljdCA9IGlmcmFtZURvY3VtZW50LkY7XG4gIHdoaWxlIChsZW5ndGgtLSkgZGVsZXRlIGNyZWF0ZURpY3RbUFJPVE9UWVBFXVtlbnVtQnVnS2V5c1tsZW5ndGhdXTtcbiAgcmV0dXJuIGNyZWF0ZURpY3QoKTtcbn07XG5cbi8vIGBPYmplY3QuY3JlYXRlYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5jcmVhdGVcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmNyZWF0ZSB8fCBmdW5jdGlvbiBjcmVhdGUoTywgUHJvcGVydGllcykge1xuICB2YXIgcmVzdWx0O1xuICBpZiAoTyAhPT0gbnVsbCkge1xuICAgIEVtcHR5W1BST1RPVFlQRV0gPSBhbk9iamVjdChPKTtcbiAgICByZXN1bHQgPSBuZXcgRW1wdHkoKTtcbiAgICBFbXB0eVtQUk9UT1RZUEVdID0gbnVsbDtcbiAgICAvLyBhZGQgXCJfX3Byb3RvX19cIiBmb3IgT2JqZWN0LmdldFByb3RvdHlwZU9mIHBvbHlmaWxsXG4gICAgcmVzdWx0W0lFX1BST1RPXSA9IE87XG4gIH0gZWxzZSByZXN1bHQgPSBjcmVhdGVEaWN0KCk7XG4gIHJldHVybiBQcm9wZXJ0aWVzID09PSB1bmRlZmluZWQgPyByZXN1bHQgOiBkZWZpbmVQcm9wZXJ0aWVzKHJlc3VsdCwgUHJvcGVydGllcyk7XG59O1xuXG5oaWRkZW5LZXlzW0lFX1BST1RPXSA9IHRydWU7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGZvckVhY2ggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uJykuZm9yRWFjaDtcbnZhciBzbG9wcHlBcnJheU1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zbG9wcHktYXJyYXktbWV0aG9kJyk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuZm9yRWFjaGAgbWV0aG9kIGltcGxlbWVudGF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZm9yZWFjaFxubW9kdWxlLmV4cG9ydHMgPSBzbG9wcHlBcnJheU1ldGhvZCgnZm9yRWFjaCcpID8gZnVuY3Rpb24gZm9yRWFjaChjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICByZXR1cm4gJGZvckVhY2godGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xufSA6IFtdLmZvckVhY2g7XG4iLCJ2YXIgYXJyYXlXaXRob3V0SG9sZXMgPSByZXF1aXJlKFwiLi9hcnJheVdpdGhvdXRIb2xlc1wiKTtcblxudmFyIGl0ZXJhYmxlVG9BcnJheSA9IHJlcXVpcmUoXCIuL2l0ZXJhYmxlVG9BcnJheVwiKTtcblxudmFyIG5vbkl0ZXJhYmxlU3ByZWFkID0gcmVxdWlyZShcIi4vbm9uSXRlcmFibGVTcHJlYWRcIik7XG5cbmZ1bmN0aW9uIF90b0NvbnN1bWFibGVBcnJheShhcnIpIHtcbiAgcmV0dXJuIGFycmF5V2l0aG91dEhvbGVzKGFycikgfHwgaXRlcmFibGVUb0FycmF5KGFycikgfHwgbm9uSXRlcmFibGVTcHJlYWQoKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfdG9Db25zdW1hYmxlQXJyYXk7IiwidmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0QnVpbHRJbignZG9jdW1lbnQnLCAnZG9jdW1lbnRFbGVtZW50Jyk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBmb3JFYWNoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWZvci1lYWNoJyk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuZm9yRWFjaGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZm9yZWFjaFxuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGZvcmNlZDogW10uZm9yRWFjaCAhPSBmb3JFYWNoIH0sIHtcbiAgZm9yRWFjaDogZm9yRWFjaFxufSk7XG4iLCJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWludGVnZXInKTtcbnZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS57IGNvZGVQb2ludEF0LCBhdCB9YCBtZXRob2RzIGltcGxlbWVudGF0aW9uXG52YXIgY3JlYXRlTWV0aG9kID0gZnVuY3Rpb24gKENPTlZFUlRfVE9fU1RSSU5HKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIHBvcykge1xuICAgIHZhciBTID0gU3RyaW5nKHJlcXVpcmVPYmplY3RDb2VyY2libGUoJHRoaXMpKTtcbiAgICB2YXIgcG9zaXRpb24gPSB0b0ludGVnZXIocG9zKTtcbiAgICB2YXIgc2l6ZSA9IFMubGVuZ3RoO1xuICAgIHZhciBmaXJzdCwgc2Vjb25kO1xuICAgIGlmIChwb3NpdGlvbiA8IDAgfHwgcG9zaXRpb24gPj0gc2l6ZSkgcmV0dXJuIENPTlZFUlRfVE9fU1RSSU5HID8gJycgOiB1bmRlZmluZWQ7XG4gICAgZmlyc3QgPSBTLmNoYXJDb2RlQXQocG9zaXRpb24pO1xuICAgIHJldHVybiBmaXJzdCA8IDB4RDgwMCB8fCBmaXJzdCA+IDB4REJGRiB8fCBwb3NpdGlvbiArIDEgPT09IHNpemVcbiAgICAgIHx8IChzZWNvbmQgPSBTLmNoYXJDb2RlQXQocG9zaXRpb24gKyAxKSkgPCAweERDMDAgfHwgc2Vjb25kID4gMHhERkZGXG4gICAgICAgID8gQ09OVkVSVF9UT19TVFJJTkcgPyBTLmNoYXJBdChwb3NpdGlvbikgOiBmaXJzdFxuICAgICAgICA6IENPTlZFUlRfVE9fU1RSSU5HID8gUy5zbGljZShwb3NpdGlvbiwgcG9zaXRpb24gKyAyKSA6IChmaXJzdCAtIDB4RDgwMCA8PCAxMCkgKyAoc2Vjb25kIC0gMHhEQzAwKSArIDB4MTAwMDA7XG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgLy8gYFN0cmluZy5wcm90b3R5cGUuY29kZVBvaW50QXRgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLmNvZGVwb2ludGF0XG4gIGNvZGVBdDogY3JlYXRlTWV0aG9kKGZhbHNlKSxcbiAgLy8gYFN0cmluZy5wcm90b3R5cGUuYXRgIG1ldGhvZFxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vbWF0aGlhc2J5bmVucy9TdHJpbmcucHJvdG90eXBlLmF0XG4gIGNoYXJBdDogY3JlYXRlTWV0aG9kKHRydWUpXG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBET01JdGVyYWJsZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZG9tLWl0ZXJhYmxlcycpO1xudmFyIGZvckVhY2ggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktZm9yLWVhY2gnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hpZGUnKTtcblxuZm9yICh2YXIgQ09MTEVDVElPTl9OQU1FIGluIERPTUl0ZXJhYmxlcykge1xuICB2YXIgQ29sbGVjdGlvbiA9IGdsb2JhbFtDT0xMRUNUSU9OX05BTUVdO1xuICB2YXIgQ29sbGVjdGlvblByb3RvdHlwZSA9IENvbGxlY3Rpb24gJiYgQ29sbGVjdGlvbi5wcm90b3R5cGU7XG4gIC8vIHNvbWUgQ2hyb21lIHZlcnNpb25zIGhhdmUgbm9uLWNvbmZpZ3VyYWJsZSBtZXRob2RzIG9uIERPTVRva2VuTGlzdFxuICBpZiAoQ29sbGVjdGlvblByb3RvdHlwZSAmJiBDb2xsZWN0aW9uUHJvdG90eXBlLmZvckVhY2ggIT09IGZvckVhY2gpIHRyeSB7XG4gICAgaGlkZShDb2xsZWN0aW9uUHJvdG90eXBlLCAnZm9yRWFjaCcsIGZvckVhY2gpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIENvbGxlY3Rpb25Qcm90b3R5cGUuZm9yRWFjaCA9IGZvckVhY2g7XG4gIH1cbn1cbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBvYmplY3RLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1rZXlzJyk7XG5cbi8vIGBPYmplY3QuZGVmaW5lUHJvcGVydGllc2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3QuZGVmaW5lcHJvcGVydGllc1xubW9kdWxlLmV4cG9ydHMgPSBERVNDUklQVE9SUyA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzIDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICB2YXIga2V5cyA9IG9iamVjdEtleXMoUHJvcGVydGllcyk7XG4gIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGtleTtcbiAgd2hpbGUgKGxlbmd0aCA+IGluZGV4KSBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mKE8sIGtleSA9IGtleXNbaW5kZXgrK10sIFByb3BlcnRpZXNba2V5XSk7XG4gIHJldHVybiBPO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyICRtYXAgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uJykubWFwO1xudmFyIGFycmF5TWV0aG9kSGFzU3BlY2llc1N1cHBvcnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLWhhcy1zcGVjaWVzLXN1cHBvcnQnKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5tYXBgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLm1hcFxuLy8gd2l0aCBhZGRpbmcgc3VwcG9ydCBvZiBAQHNwZWNpZXNcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6ICFhcnJheU1ldGhvZEhhc1NwZWNpZXNTdXBwb3J0KCdtYXAnKSB9LCB7XG4gIG1hcDogZnVuY3Rpb24gbWFwKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgcmV0dXJuICRtYXAodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcbiIsInZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5JykuZjtcbnZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBUT19TVFJJTkdfVEFHID0gd2VsbEtub3duU3ltYm9sKCd0b1N0cmluZ1RhZycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgVEFHLCBTVEFUSUMpIHtcbiAgaWYgKGl0ICYmICFoYXMoaXQgPSBTVEFUSUMgPyBpdCA6IGl0LnByb3RvdHlwZSwgVE9fU1RSSU5HX1RBRykpIHtcbiAgICBkZWZpbmVQcm9wZXJ0eShpdCwgVE9fU1RSSU5HX1RBRywgeyBjb25maWd1cmFibGU6IHRydWUsIHZhbHVlOiBUQUcgfSk7XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBleGVjID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC1leGVjJyk7XG5cbiQoeyB0YXJnZXQ6ICdSZWdFeHAnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiAvLi8uZXhlYyAhPT0gZXhlYyB9LCB7XG4gIGV4ZWM6IGV4ZWNcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGZpeFJlZ0V4cFdlbGxLbm93blN5bWJvbExvZ2ljID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZpeC1yZWdleHAtd2VsbC1rbm93bi1zeW1ib2wtbG9naWMnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW50ZWdlcicpO1xudmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG52YXIgYWR2YW5jZVN0cmluZ0luZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FkdmFuY2Utc3RyaW5nLWluZGV4Jyk7XG52YXIgcmVnRXhwRXhlYyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWdleHAtZXhlYy1hYnN0cmFjdCcpO1xuXG52YXIgbWF4ID0gTWF0aC5tYXg7XG52YXIgbWluID0gTWF0aC5taW47XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xudmFyIFNVQlNUSVRVVElPTl9TWU1CT0xTID0gL1xcJChbJCYnYF18XFxkXFxkP3w8W14+XSo+KS9nO1xudmFyIFNVQlNUSVRVVElPTl9TWU1CT0xTX05PX05BTUVEID0gL1xcJChbJCYnYF18XFxkXFxkPykvZztcblxudmFyIG1heWJlVG9TdHJpbmcgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ID09PSB1bmRlZmluZWQgPyBpdCA6IFN0cmluZyhpdCk7XG59O1xuXG4vLyBAQHJlcGxhY2UgbG9naWNcbmZpeFJlZ0V4cFdlbGxLbm93blN5bWJvbExvZ2ljKCdyZXBsYWNlJywgMiwgZnVuY3Rpb24gKFJFUExBQ0UsIG5hdGl2ZVJlcGxhY2UsIG1heWJlQ2FsbE5hdGl2ZSkge1xuICByZXR1cm4gW1xuICAgIC8vIGBTdHJpbmcucHJvdG90eXBlLnJlcGxhY2VgIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUucmVwbGFjZVxuICAgIGZ1bmN0aW9uIHJlcGxhY2Uoc2VhcmNoVmFsdWUsIHJlcGxhY2VWYWx1ZSkge1xuICAgICAgdmFyIE8gPSByZXF1aXJlT2JqZWN0Q29lcmNpYmxlKHRoaXMpO1xuICAgICAgdmFyIHJlcGxhY2VyID0gc2VhcmNoVmFsdWUgPT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogc2VhcmNoVmFsdWVbUkVQTEFDRV07XG4gICAgICByZXR1cm4gcmVwbGFjZXIgIT09IHVuZGVmaW5lZFxuICAgICAgICA/IHJlcGxhY2VyLmNhbGwoc2VhcmNoVmFsdWUsIE8sIHJlcGxhY2VWYWx1ZSlcbiAgICAgICAgOiBuYXRpdmVSZXBsYWNlLmNhbGwoU3RyaW5nKE8pLCBzZWFyY2hWYWx1ZSwgcmVwbGFjZVZhbHVlKTtcbiAgICB9LFxuICAgIC8vIGBSZWdFeHAucHJvdG90eXBlW0BAcmVwbGFjZV1gIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXJlZ2V4cC5wcm90b3R5cGUtQEByZXBsYWNlXG4gICAgZnVuY3Rpb24gKHJlZ2V4cCwgcmVwbGFjZVZhbHVlKSB7XG4gICAgICB2YXIgcmVzID0gbWF5YmVDYWxsTmF0aXZlKG5hdGl2ZVJlcGxhY2UsIHJlZ2V4cCwgdGhpcywgcmVwbGFjZVZhbHVlKTtcbiAgICAgIGlmIChyZXMuZG9uZSkgcmV0dXJuIHJlcy52YWx1ZTtcblxuICAgICAgdmFyIHJ4ID0gYW5PYmplY3QocmVnZXhwKTtcbiAgICAgIHZhciBTID0gU3RyaW5nKHRoaXMpO1xuXG4gICAgICB2YXIgZnVuY3Rpb25hbFJlcGxhY2UgPSB0eXBlb2YgcmVwbGFjZVZhbHVlID09PSAnZnVuY3Rpb24nO1xuICAgICAgaWYgKCFmdW5jdGlvbmFsUmVwbGFjZSkgcmVwbGFjZVZhbHVlID0gU3RyaW5nKHJlcGxhY2VWYWx1ZSk7XG5cbiAgICAgIHZhciBnbG9iYWwgPSByeC5nbG9iYWw7XG4gICAgICBpZiAoZ2xvYmFsKSB7XG4gICAgICAgIHZhciBmdWxsVW5pY29kZSA9IHJ4LnVuaWNvZGU7XG4gICAgICAgIHJ4Lmxhc3RJbmRleCA9IDA7XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0cyA9IFtdO1xuICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHJlZ0V4cEV4ZWMocngsIFMpO1xuICAgICAgICBpZiAocmVzdWx0ID09PSBudWxsKSBicmVhaztcblxuICAgICAgICByZXN1bHRzLnB1c2gocmVzdWx0KTtcbiAgICAgICAgaWYgKCFnbG9iYWwpIGJyZWFrO1xuXG4gICAgICAgIHZhciBtYXRjaFN0ciA9IFN0cmluZyhyZXN1bHRbMF0pO1xuICAgICAgICBpZiAobWF0Y2hTdHIgPT09ICcnKSByeC5sYXN0SW5kZXggPSBhZHZhbmNlU3RyaW5nSW5kZXgoUywgdG9MZW5ndGgocngubGFzdEluZGV4KSwgZnVsbFVuaWNvZGUpO1xuICAgICAgfVxuXG4gICAgICB2YXIgYWNjdW11bGF0ZWRSZXN1bHQgPSAnJztcbiAgICAgIHZhciBuZXh0U291cmNlUG9zaXRpb24gPSAwO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZXN1bHRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHJlc3VsdCA9IHJlc3VsdHNbaV07XG5cbiAgICAgICAgdmFyIG1hdGNoZWQgPSBTdHJpbmcocmVzdWx0WzBdKTtcbiAgICAgICAgdmFyIHBvc2l0aW9uID0gbWF4KG1pbih0b0ludGVnZXIocmVzdWx0LmluZGV4KSwgUy5sZW5ndGgpLCAwKTtcbiAgICAgICAgdmFyIGNhcHR1cmVzID0gW107XG4gICAgICAgIC8vIE5PVEU6IFRoaXMgaXMgZXF1aXZhbGVudCB0b1xuICAgICAgICAvLyAgIGNhcHR1cmVzID0gcmVzdWx0LnNsaWNlKDEpLm1hcChtYXliZVRvU3RyaW5nKVxuICAgICAgICAvLyBidXQgZm9yIHNvbWUgcmVhc29uIGBuYXRpdmVTbGljZS5jYWxsKHJlc3VsdCwgMSwgcmVzdWx0Lmxlbmd0aClgIChjYWxsZWQgaW5cbiAgICAgICAgLy8gdGhlIHNsaWNlIHBvbHlmaWxsIHdoZW4gc2xpY2luZyBuYXRpdmUgYXJyYXlzKSBcImRvZXNuJ3Qgd29ya1wiIGluIHNhZmFyaSA5IGFuZFxuICAgICAgICAvLyBjYXVzZXMgYSBjcmFzaCAoaHR0cHM6Ly9wYXN0ZWJpbi5jb20vTjIxUXplUUEpIHdoZW4gdHJ5aW5nIHRvIGRlYnVnIGl0LlxuICAgICAgICBmb3IgKHZhciBqID0gMTsgaiA8IHJlc3VsdC5sZW5ndGg7IGorKykgY2FwdHVyZXMucHVzaChtYXliZVRvU3RyaW5nKHJlc3VsdFtqXSkpO1xuICAgICAgICB2YXIgbmFtZWRDYXB0dXJlcyA9IHJlc3VsdC5ncm91cHM7XG4gICAgICAgIGlmIChmdW5jdGlvbmFsUmVwbGFjZSkge1xuICAgICAgICAgIHZhciByZXBsYWNlckFyZ3MgPSBbbWF0Y2hlZF0uY29uY2F0KGNhcHR1cmVzLCBwb3NpdGlvbiwgUyk7XG4gICAgICAgICAgaWYgKG5hbWVkQ2FwdHVyZXMgIT09IHVuZGVmaW5lZCkgcmVwbGFjZXJBcmdzLnB1c2gobmFtZWRDYXB0dXJlcyk7XG4gICAgICAgICAgdmFyIHJlcGxhY2VtZW50ID0gU3RyaW5nKHJlcGxhY2VWYWx1ZS5hcHBseSh1bmRlZmluZWQsIHJlcGxhY2VyQXJncykpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlcGxhY2VtZW50ID0gZ2V0U3Vic3RpdHV0aW9uKG1hdGNoZWQsIFMsIHBvc2l0aW9uLCBjYXB0dXJlcywgbmFtZWRDYXB0dXJlcywgcmVwbGFjZVZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocG9zaXRpb24gPj0gbmV4dFNvdXJjZVBvc2l0aW9uKSB7XG4gICAgICAgICAgYWNjdW11bGF0ZWRSZXN1bHQgKz0gUy5zbGljZShuZXh0U291cmNlUG9zaXRpb24sIHBvc2l0aW9uKSArIHJlcGxhY2VtZW50O1xuICAgICAgICAgIG5leHRTb3VyY2VQb3NpdGlvbiA9IHBvc2l0aW9uICsgbWF0Y2hlZC5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBhY2N1bXVsYXRlZFJlc3VsdCArIFMuc2xpY2UobmV4dFNvdXJjZVBvc2l0aW9uKTtcbiAgICB9XG4gIF07XG5cbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtZ2V0c3Vic3RpdHV0aW9uXG4gIGZ1bmN0aW9uIGdldFN1YnN0aXR1dGlvbihtYXRjaGVkLCBzdHIsIHBvc2l0aW9uLCBjYXB0dXJlcywgbmFtZWRDYXB0dXJlcywgcmVwbGFjZW1lbnQpIHtcbiAgICB2YXIgdGFpbFBvcyA9IHBvc2l0aW9uICsgbWF0Y2hlZC5sZW5ndGg7XG4gICAgdmFyIG0gPSBjYXB0dXJlcy5sZW5ndGg7XG4gICAgdmFyIHN5bWJvbHMgPSBTVUJTVElUVVRJT05fU1lNQk9MU19OT19OQU1FRDtcbiAgICBpZiAobmFtZWRDYXB0dXJlcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBuYW1lZENhcHR1cmVzID0gdG9PYmplY3QobmFtZWRDYXB0dXJlcyk7XG4gICAgICBzeW1ib2xzID0gU1VCU1RJVFVUSU9OX1NZTUJPTFM7XG4gICAgfVxuICAgIHJldHVybiBuYXRpdmVSZXBsYWNlLmNhbGwocmVwbGFjZW1lbnQsIHN5bWJvbHMsIGZ1bmN0aW9uIChtYXRjaCwgY2gpIHtcbiAgICAgIHZhciBjYXB0dXJlO1xuICAgICAgc3dpdGNoIChjaC5jaGFyQXQoMCkpIHtcbiAgICAgICAgY2FzZSAnJCc6IHJldHVybiAnJCc7XG4gICAgICAgIGNhc2UgJyYnOiByZXR1cm4gbWF0Y2hlZDtcbiAgICAgICAgY2FzZSAnYCc6IHJldHVybiBzdHIuc2xpY2UoMCwgcG9zaXRpb24pO1xuICAgICAgICBjYXNlIFwiJ1wiOiByZXR1cm4gc3RyLnNsaWNlKHRhaWxQb3MpO1xuICAgICAgICBjYXNlICc8JzpcbiAgICAgICAgICBjYXB0dXJlID0gbmFtZWRDYXB0dXJlc1tjaC5zbGljZSgxLCAtMSldO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OiAvLyBcXGRcXGQ/XG4gICAgICAgICAgdmFyIG4gPSArY2g7XG4gICAgICAgICAgaWYgKG4gPT09IDApIHJldHVybiBtYXRjaDtcbiAgICAgICAgICBpZiAobiA+IG0pIHtcbiAgICAgICAgICAgIHZhciBmID0gZmxvb3IobiAvIDEwKTtcbiAgICAgICAgICAgIGlmIChmID09PSAwKSByZXR1cm4gbWF0Y2g7XG4gICAgICAgICAgICBpZiAoZiA8PSBtKSByZXR1cm4gY2FwdHVyZXNbZiAtIDFdID09PSB1bmRlZmluZWQgPyBjaC5jaGFyQXQoMSkgOiBjYXB0dXJlc1tmIC0gMV0gKyBjaC5jaGFyQXQoMSk7XG4gICAgICAgICAgICByZXR1cm4gbWF0Y2g7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNhcHR1cmUgPSBjYXB0dXJlc1tuIC0gMV07XG4gICAgICB9XG4gICAgICByZXR1cm4gY2FwdHVyZSA9PT0gdW5kZWZpbmVkID8gJycgOiBjYXB0dXJlO1xuICAgIH0pO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBoaWRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hpZGUnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZScpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgcmVnZXhwRXhlYyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWdleHAtZXhlYycpO1xuXG52YXIgU1BFQ0lFUyA9IHdlbGxLbm93blN5bWJvbCgnc3BlY2llcycpO1xuXG52YXIgUkVQTEFDRV9TVVBQT1JUU19OQU1FRF9HUk9VUFMgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyAjcmVwbGFjZSBuZWVkcyBidWlsdC1pbiBzdXBwb3J0IGZvciBuYW1lZCBncm91cHMuXG4gIC8vICNtYXRjaCB3b3JrcyBmaW5lIGJlY2F1c2UgaXQganVzdCByZXR1cm4gdGhlIGV4ZWMgcmVzdWx0cywgZXZlbiBpZiBpdCBoYXNcbiAgLy8gYSBcImdyb3BzXCIgcHJvcGVydHkuXG4gIHZhciByZSA9IC8uLztcbiAgcmUuZXhlYyA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgcmVzdWx0Lmdyb3VwcyA9IHsgYTogJzcnIH07XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbiAgcmV0dXJuICcnLnJlcGxhY2UocmUsICckPGE+JykgIT09ICc3Jztcbn0pO1xuXG4vLyBDaHJvbWUgNTEgaGFzIGEgYnVnZ3kgXCJzcGxpdFwiIGltcGxlbWVudGF0aW9uIHdoZW4gUmVnRXhwI2V4ZWMgIT09IG5hdGl2ZUV4ZWNcbi8vIFdlZXggSlMgaGFzIGZyb3plbiBidWlsdC1pbiBwcm90b3R5cGVzLCBzbyB1c2UgdHJ5IC8gY2F0Y2ggd3JhcHBlclxudmFyIFNQTElUX1dPUktTX1dJVEhfT1ZFUldSSVRURU5fRVhFQyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHZhciByZSA9IC8oPzopLztcbiAgdmFyIG9yaWdpbmFsRXhlYyA9IHJlLmV4ZWM7XG4gIHJlLmV4ZWMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBvcmlnaW5hbEV4ZWMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfTtcbiAgdmFyIHJlc3VsdCA9ICdhYicuc3BsaXQocmUpO1xuICByZXR1cm4gcmVzdWx0Lmxlbmd0aCAhPT0gMiB8fCByZXN1bHRbMF0gIT09ICdhJyB8fCByZXN1bHRbMV0gIT09ICdiJztcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChLRVksIGxlbmd0aCwgZXhlYywgc2hhbSkge1xuICB2YXIgU1lNQk9MID0gd2VsbEtub3duU3ltYm9sKEtFWSk7XG5cbiAgdmFyIERFTEVHQVRFU19UT19TWU1CT0wgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIC8vIFN0cmluZyBtZXRob2RzIGNhbGwgc3ltYm9sLW5hbWVkIFJlZ0VwIG1ldGhvZHNcbiAgICB2YXIgTyA9IHt9O1xuICAgIE9bU1lNQk9MXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH07XG4gICAgcmV0dXJuICcnW0tFWV0oTykgIT0gNztcbiAgfSk7XG5cbiAgdmFyIERFTEVHQVRFU19UT19FWEVDID0gREVMRUdBVEVTX1RPX1NZTUJPTCAmJiAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIC8vIFN5bWJvbC1uYW1lZCBSZWdFeHAgbWV0aG9kcyBjYWxsIC5leGVjXG4gICAgdmFyIGV4ZWNDYWxsZWQgPSBmYWxzZTtcbiAgICB2YXIgcmUgPSAvYS87XG4gICAgcmUuZXhlYyA9IGZ1bmN0aW9uICgpIHsgZXhlY0NhbGxlZCA9IHRydWU7IHJldHVybiBudWxsOyB9O1xuXG4gICAgaWYgKEtFWSA9PT0gJ3NwbGl0Jykge1xuICAgICAgLy8gUmVnRXhwW0BAc3BsaXRdIGRvZXNuJ3QgY2FsbCB0aGUgcmVnZXgncyBleGVjIG1ldGhvZCwgYnV0IGZpcnN0IGNyZWF0ZXNcbiAgICAgIC8vIGEgbmV3IG9uZS4gV2UgbmVlZCB0byByZXR1cm4gdGhlIHBhdGNoZWQgcmVnZXggd2hlbiBjcmVhdGluZyB0aGUgbmV3IG9uZS5cbiAgICAgIHJlLmNvbnN0cnVjdG9yID0ge307XG4gICAgICByZS5jb25zdHJ1Y3RvcltTUEVDSUVTXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlOyB9O1xuICAgIH1cblxuICAgIHJlW1NZTUJPTF0oJycpO1xuICAgIHJldHVybiAhZXhlY0NhbGxlZDtcbiAgfSk7XG5cbiAgaWYgKFxuICAgICFERUxFR0FURVNfVE9fU1lNQk9MIHx8XG4gICAgIURFTEVHQVRFU19UT19FWEVDIHx8XG4gICAgKEtFWSA9PT0gJ3JlcGxhY2UnICYmICFSRVBMQUNFX1NVUFBPUlRTX05BTUVEX0dST1VQUykgfHxcbiAgICAoS0VZID09PSAnc3BsaXQnICYmICFTUExJVF9XT1JLU19XSVRIX09WRVJXUklUVEVOX0VYRUMpXG4gICkge1xuICAgIHZhciBuYXRpdmVSZWdFeHBNZXRob2QgPSAvLi9bU1lNQk9MXTtcbiAgICB2YXIgbWV0aG9kcyA9IGV4ZWMoU1lNQk9MLCAnJ1tLRVldLCBmdW5jdGlvbiAobmF0aXZlTWV0aG9kLCByZWdleHAsIHN0ciwgYXJnMiwgZm9yY2VTdHJpbmdNZXRob2QpIHtcbiAgICAgIGlmIChyZWdleHAuZXhlYyA9PT0gcmVnZXhwRXhlYykge1xuICAgICAgICBpZiAoREVMRUdBVEVTX1RPX1NZTUJPTCAmJiAhZm9yY2VTdHJpbmdNZXRob2QpIHtcbiAgICAgICAgICAvLyBUaGUgbmF0aXZlIFN0cmluZyBtZXRob2QgYWxyZWFkeSBkZWxlZ2F0ZXMgdG8gQEBtZXRob2QgKHRoaXNcbiAgICAgICAgICAvLyBwb2x5ZmlsbGVkIGZ1bmN0aW9uKSwgbGVhc2luZyB0byBpbmZpbml0ZSByZWN1cnNpb24uXG4gICAgICAgICAgLy8gV2UgYXZvaWQgaXQgYnkgZGlyZWN0bHkgY2FsbGluZyB0aGUgbmF0aXZlIEBAbWV0aG9kIG1ldGhvZC5cbiAgICAgICAgICByZXR1cm4geyBkb25lOiB0cnVlLCB2YWx1ZTogbmF0aXZlUmVnRXhwTWV0aG9kLmNhbGwocmVnZXhwLCBzdHIsIGFyZzIpIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgZG9uZTogdHJ1ZSwgdmFsdWU6IG5hdGl2ZU1ldGhvZC5jYWxsKHN0ciwgcmVnZXhwLCBhcmcyKSB9O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHsgZG9uZTogZmFsc2UgfTtcbiAgICB9KTtcbiAgICB2YXIgc3RyaW5nTWV0aG9kID0gbWV0aG9kc1swXTtcbiAgICB2YXIgcmVnZXhNZXRob2QgPSBtZXRob2RzWzFdO1xuXG4gICAgcmVkZWZpbmUoU3RyaW5nLnByb3RvdHlwZSwgS0VZLCBzdHJpbmdNZXRob2QpO1xuICAgIHJlZGVmaW5lKFJlZ0V4cC5wcm90b3R5cGUsIFNZTUJPTCwgbGVuZ3RoID09IDJcbiAgICAgIC8vIDIxLjIuNS44IFJlZ0V4cC5wcm90b3R5cGVbQEByZXBsYWNlXShzdHJpbmcsIHJlcGxhY2VWYWx1ZSlcbiAgICAgIC8vIDIxLjIuNS4xMSBSZWdFeHAucHJvdG90eXBlW0BAc3BsaXRdKHN0cmluZywgbGltaXQpXG4gICAgICA/IGZ1bmN0aW9uIChzdHJpbmcsIGFyZykgeyByZXR1cm4gcmVnZXhNZXRob2QuY2FsbChzdHJpbmcsIHRoaXMsIGFyZyk7IH1cbiAgICAgIC8vIDIxLjIuNS42IFJlZ0V4cC5wcm90b3R5cGVbQEBtYXRjaF0oc3RyaW5nKVxuICAgICAgLy8gMjEuMi41LjkgUmVnRXhwLnByb3RvdHlwZVtAQHNlYXJjaF0oc3RyaW5nKVxuICAgICAgOiBmdW5jdGlvbiAoc3RyaW5nKSB7IHJldHVybiByZWdleE1ldGhvZC5jYWxsKHN0cmluZywgdGhpcyk7IH1cbiAgICApO1xuICAgIGlmIChzaGFtKSBoaWRlKFJlZ0V4cC5wcm90b3R5cGVbU1lNQk9MXSwgJ3NoYW0nLCB0cnVlKTtcbiAgfVxufTtcbiIsInZhciBjbGFzc29mID0gcmVxdWlyZSgnLi9jbGFzc29mLXJhdycpO1xudmFyIHJlZ2V4cEV4ZWMgPSByZXF1aXJlKCcuL3JlZ2V4cC1leGVjJyk7XG5cbi8vIGBSZWdFeHBFeGVjYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXJlZ2V4cGV4ZWNcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKFIsIFMpIHtcbiAgdmFyIGV4ZWMgPSBSLmV4ZWM7XG4gIGlmICh0eXBlb2YgZXhlYyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHZhciByZXN1bHQgPSBleGVjLmNhbGwoUiwgUyk7XG4gICAgaWYgKHR5cGVvZiByZXN1bHQgIT09ICdvYmplY3QnKSB7XG4gICAgICB0aHJvdyBUeXBlRXJyb3IoJ1JlZ0V4cCBleGVjIG1ldGhvZCByZXR1cm5lZCBzb21ldGhpbmcgb3RoZXIgdGhhbiBhbiBPYmplY3Qgb3IgbnVsbCcpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgaWYgKGNsYXNzb2YoUikgIT09ICdSZWdFeHAnKSB7XG4gICAgdGhyb3cgVHlwZUVycm9yKCdSZWdFeHAjZXhlYyBjYWxsZWQgb24gaW5jb21wYXRpYmxlIHJlY2VpdmVyJyk7XG4gIH1cblxuICByZXR1cm4gcmVnZXhwRXhlYy5jYWxsKFIsIFMpO1xufTtcblxuIiwidmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtY3JlYXRlJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oaWRlJyk7XG5cbnZhciBVTlNDT1BBQkxFUyA9IHdlbGxLbm93blN5bWJvbCgndW5zY29wYWJsZXMnKTtcbnZhciBBcnJheVByb3RvdHlwZSA9IEFycmF5LnByb3RvdHlwZTtcblxuLy8gQXJyYXkucHJvdG90eXBlW0BAdW5zY29wYWJsZXNdXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUtQEB1bnNjb3BhYmxlc1xuaWYgKEFycmF5UHJvdG90eXBlW1VOU0NPUEFCTEVTXSA9PSB1bmRlZmluZWQpIHtcbiAgaGlkZShBcnJheVByb3RvdHlwZSwgVU5TQ09QQUJMRVMsIGNyZWF0ZShudWxsKSk7XG59XG5cbi8vIGFkZCBhIGtleSB0byBBcnJheS5wcm90b3R5cGVbQEB1bnNjb3BhYmxlc11cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICBBcnJheVByb3RvdHlwZVtVTlNDT1BBQkxFU11ba2V5XSA9IHRydWU7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWFycmF5Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5Jyk7XG52YXIgYXJyYXlTcGVjaWVzQ3JlYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LXNwZWNpZXMtY3JlYXRlJyk7XG52YXIgYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1tZXRob2QtaGFzLXNwZWNpZXMtc3VwcG9ydCcpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgSVNfQ09OQ0FUX1NQUkVBREFCTEUgPSB3ZWxsS25vd25TeW1ib2woJ2lzQ29uY2F0U3ByZWFkYWJsZScpO1xudmFyIE1BWF9TQUZFX0lOVEVHRVIgPSAweDFGRkZGRkZGRkZGRkZGO1xudmFyIE1BWElNVU1fQUxMT1dFRF9JTkRFWF9FWENFRURFRCA9ICdNYXhpbXVtIGFsbG93ZWQgaW5kZXggZXhjZWVkZWQnO1xuXG52YXIgSVNfQ09OQ0FUX1NQUkVBREFCTEVfU1VQUE9SVCA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHZhciBhcnJheSA9IFtdO1xuICBhcnJheVtJU19DT05DQVRfU1BSRUFEQUJMRV0gPSBmYWxzZTtcbiAgcmV0dXJuIGFycmF5LmNvbmNhdCgpWzBdICE9PSBhcnJheTtcbn0pO1xuXG52YXIgU1BFQ0lFU19TVVBQT1JUID0gYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCgnY29uY2F0Jyk7XG5cbnZhciBpc0NvbmNhdFNwcmVhZGFibGUgPSBmdW5jdGlvbiAoTykge1xuICBpZiAoIWlzT2JqZWN0KE8pKSByZXR1cm4gZmFsc2U7XG4gIHZhciBzcHJlYWRhYmxlID0gT1tJU19DT05DQVRfU1BSRUFEQUJMRV07XG4gIHJldHVybiBzcHJlYWRhYmxlICE9PSB1bmRlZmluZWQgPyAhIXNwcmVhZGFibGUgOiBpc0FycmF5KE8pO1xufTtcblxudmFyIEZPUkNFRCA9ICFJU19DT05DQVRfU1BSRUFEQUJMRV9TVVBQT1JUIHx8ICFTUEVDSUVTX1NVUFBPUlQ7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuY29uY2F0YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5jb25jYXRcbi8vIHdpdGggYWRkaW5nIHN1cHBvcnQgb2YgQEBpc0NvbmNhdFNwcmVhZGFibGUgYW5kIEBAc3BlY2llc1xuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGZvcmNlZDogRk9SQ0VEIH0sIHtcbiAgY29uY2F0OiBmdW5jdGlvbiBjb25jYXQoYXJnKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICAgIHZhciBBID0gYXJyYXlTcGVjaWVzQ3JlYXRlKE8sIDApO1xuICAgIHZhciBuID0gMDtcbiAgICB2YXIgaSwgaywgbGVuZ3RoLCBsZW4sIEU7XG4gICAgZm9yIChpID0gLTEsIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgRSA9IGkgPT09IC0xID8gTyA6IGFyZ3VtZW50c1tpXTtcbiAgICAgIGlmIChpc0NvbmNhdFNwcmVhZGFibGUoRSkpIHtcbiAgICAgICAgbGVuID0gdG9MZW5ndGgoRS5sZW5ndGgpO1xuICAgICAgICBpZiAobiArIGxlbiA+IE1BWF9TQUZFX0lOVEVHRVIpIHRocm93IFR5cGVFcnJvcihNQVhJTVVNX0FMTE9XRURfSU5ERVhfRVhDRUVERUQpO1xuICAgICAgICBmb3IgKGsgPSAwOyBrIDwgbGVuOyBrKyssIG4rKykgaWYgKGsgaW4gRSkgY3JlYXRlUHJvcGVydHkoQSwgbiwgRVtrXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAobiA+PSBNQVhfU0FGRV9JTlRFR0VSKSB0aHJvdyBUeXBlRXJyb3IoTUFYSU1VTV9BTExPV0VEX0lOREVYX0VYQ0VFREVEKTtcbiAgICAgICAgY3JlYXRlUHJvcGVydHkoQSwgbisrLCBFKTtcbiAgICAgIH1cbiAgICB9XG4gICAgQS5sZW5ndGggPSBuO1xuICAgIHJldHVybiBBO1xuICB9XG59KTtcbiIsInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBhUG9zc2libGVQcm90b3R5cGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1wb3NzaWJsZS1wcm90b3R5cGUnKTtcblxuLy8gYE9iamVjdC5zZXRQcm90b3R5cGVPZmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3Quc2V0cHJvdG90eXBlb2Zcbi8vIFdvcmtzIHdpdGggX19wcm90b19fIG9ubHkuIE9sZCB2OCBjYW4ndCB3b3JrIHdpdGggbnVsbCBwcm90byBvYmplY3RzLlxuLyogZXNsaW50LWRpc2FibGUgbm8tcHJvdG8gKi9cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8ICgnX19wcm90b19fJyBpbiB7fSA/IGZ1bmN0aW9uICgpIHtcbiAgdmFyIENPUlJFQ1RfU0VUVEVSID0gZmFsc2U7XG4gIHZhciB0ZXN0ID0ge307XG4gIHZhciBzZXR0ZXI7XG4gIHRyeSB7XG4gICAgc2V0dGVyID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihPYmplY3QucHJvdG90eXBlLCAnX19wcm90b19fJykuc2V0O1xuICAgIHNldHRlci5jYWxsKHRlc3QsIFtdKTtcbiAgICBDT1JSRUNUX1NFVFRFUiA9IHRlc3QgaW5zdGFuY2VvZiBBcnJheTtcbiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuICByZXR1cm4gZnVuY3Rpb24gc2V0UHJvdG90eXBlT2YoTywgcHJvdG8pIHtcbiAgICBhbk9iamVjdChPKTtcbiAgICBhUG9zc2libGVQcm90b3R5cGUocHJvdG8pO1xuICAgIGlmIChDT1JSRUNUX1NFVFRFUikgc2V0dGVyLmNhbGwoTywgcHJvdG8pO1xuICAgIGVsc2UgTy5fX3Byb3RvX18gPSBwcm90bztcbiAgICByZXR1cm4gTztcbiAgfTtcbn0oKSA6IHVuZGVmaW5lZCk7XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mLXJhdycpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgTUFUQ0ggPSB3ZWxsS25vd25TeW1ib2woJ21hdGNoJyk7XG5cbi8vIGBJc1JlZ0V4cGAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1pc3JlZ2V4cFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIGlzUmVnRXhwO1xuICByZXR1cm4gaXNPYmplY3QoaXQpICYmICgoaXNSZWdFeHAgPSBpdFtNQVRDSF0pICE9PSB1bmRlZmluZWQgPyAhIWlzUmVnRXhwIDogY2xhc3NvZihpdCkgPT0gJ1JlZ0V4cCcpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LXByb3RvdHlwZS1vZicpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGlkZScpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcblxudmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xudmFyIEJVR0dZX1NBRkFSSV9JVEVSQVRPUlMgPSBmYWxzZTtcblxudmFyIHJldHVyblRoaXMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9O1xuXG4vLyBgJUl0ZXJhdG9yUHJvdG90eXBlJWAgb2JqZWN0XG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy0laXRlcmF0b3Jwcm90b3R5cGUlLW9iamVjdFxudmFyIEl0ZXJhdG9yUHJvdG90eXBlLCBQcm90b3R5cGVPZkFycmF5SXRlcmF0b3JQcm90b3R5cGUsIGFycmF5SXRlcmF0b3I7XG5cbmlmIChbXS5rZXlzKSB7XG4gIGFycmF5SXRlcmF0b3IgPSBbXS5rZXlzKCk7XG4gIC8vIFNhZmFyaSA4IGhhcyBidWdneSBpdGVyYXRvcnMgdy9vIGBuZXh0YFxuICBpZiAoISgnbmV4dCcgaW4gYXJyYXlJdGVyYXRvcikpIEJVR0dZX1NBRkFSSV9JVEVSQVRPUlMgPSB0cnVlO1xuICBlbHNlIHtcbiAgICBQcm90b3R5cGVPZkFycmF5SXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZihnZXRQcm90b3R5cGVPZihhcnJheUl0ZXJhdG9yKSk7XG4gICAgaWYgKFByb3RvdHlwZU9mQXJyYXlJdGVyYXRvclByb3RvdHlwZSAhPT0gT2JqZWN0LnByb3RvdHlwZSkgSXRlcmF0b3JQcm90b3R5cGUgPSBQcm90b3R5cGVPZkFycmF5SXRlcmF0b3JQcm90b3R5cGU7XG4gIH1cbn1cblxuaWYgKEl0ZXJhdG9yUHJvdG90eXBlID09IHVuZGVmaW5lZCkgSXRlcmF0b3JQcm90b3R5cGUgPSB7fTtcblxuLy8gMjUuMS4yLjEuMSAlSXRlcmF0b3JQcm90b3R5cGUlW0BAaXRlcmF0b3JdKClcbmlmICghSVNfUFVSRSAmJiAhaGFzKEl0ZXJhdG9yUHJvdG90eXBlLCBJVEVSQVRPUikpIGhpZGUoSXRlcmF0b3JQcm90b3R5cGUsIElURVJBVE9SLCByZXR1cm5UaGlzKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIEl0ZXJhdG9yUHJvdG90eXBlOiBJdGVyYXRvclByb3RvdHlwZSxcbiAgQlVHR1lfU0FGQVJJX0lURVJBVE9SUzogQlVHR1lfU0FGQVJJX0lURVJBVE9SU1xufTtcbiIsInZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgc2hhcmVkS2V5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1rZXknKTtcbnZhciBDT1JSRUNUX1BST1RPVFlQRV9HRVRURVIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29ycmVjdC1wcm90b3R5cGUtZ2V0dGVyJyk7XG5cbnZhciBJRV9QUk9UTyA9IHNoYXJlZEtleSgnSUVfUFJPVE8nKTtcbnZhciBPYmplY3RQcm90b3R5cGUgPSBPYmplY3QucHJvdG90eXBlO1xuXG4vLyBgT2JqZWN0LmdldFByb3RvdHlwZU9mYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5nZXRwcm90b3R5cGVvZlxubW9kdWxlLmV4cG9ydHMgPSBDT1JSRUNUX1BST1RPVFlQRV9HRVRURVIgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiAoTykge1xuICBPID0gdG9PYmplY3QoTyk7XG4gIGlmIChoYXMoTywgSUVfUFJPVE8pKSByZXR1cm4gT1tJRV9QUk9UT107XG4gIGlmICh0eXBlb2YgTy5jb25zdHJ1Y3RvciA9PSAnZnVuY3Rpb24nICYmIE8gaW5zdGFuY2VvZiBPLmNvbnN0cnVjdG9yKSB7XG4gICAgcmV0dXJuIE8uY29uc3RydWN0b3IucHJvdG90eXBlO1xuICB9IHJldHVybiBPIGluc3RhbmNlb2YgT2JqZWN0ID8gT2JqZWN0UHJvdG90eXBlIDogbnVsbDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgY2hhckF0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy1tdWx0aWJ5dGUnKS5jaGFyQXQ7XG5cbi8vIGBBZHZhbmNlU3RyaW5nSW5kZXhgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYWR2YW5jZXN0cmluZ2luZGV4XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChTLCBpbmRleCwgdW5pY29kZSkge1xuICByZXR1cm4gaW5kZXggKyAodW5pY29kZSA/IGNoYXJBdChTLCBpbmRleCkubGVuZ3RoIDogMSk7XG59O1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgbmF0aXZlS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qta2V5cycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbnZhciBGQUlMU19PTl9QUklNSVRJVkVTID0gZmFpbHMoZnVuY3Rpb24gKCkgeyBuYXRpdmVLZXlzKDEpOyB9KTtcblxuLy8gYE9iamVjdC5rZXlzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5rZXlzXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBGQUlMU19PTl9QUklNSVRJVkVTIH0sIHtcbiAga2V5czogZnVuY3Rpb24ga2V5cyhpdCkge1xuICAgIHJldHVybiBuYXRpdmVLZXlzKHRvT2JqZWN0KGl0KSk7XG4gIH1cbn0pO1xuIiwiLy8gaXRlcmFibGUgRE9NIGNvbGxlY3Rpb25zXG4vLyBmbGFnIC0gYGl0ZXJhYmxlYCBpbnRlcmZhY2UgLSAnZW50cmllcycsICdrZXlzJywgJ3ZhbHVlcycsICdmb3JFYWNoJyBtZXRob2RzXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgQ1NTUnVsZUxpc3Q6IDAsXG4gIENTU1N0eWxlRGVjbGFyYXRpb246IDAsXG4gIENTU1ZhbHVlTGlzdDogMCxcbiAgQ2xpZW50UmVjdExpc3Q6IDAsXG4gIERPTVJlY3RMaXN0OiAwLFxuICBET01TdHJpbmdMaXN0OiAwLFxuICBET01Ub2tlbkxpc3Q6IDEsXG4gIERhdGFUcmFuc2Zlckl0ZW1MaXN0OiAwLFxuICBGaWxlTGlzdDogMCxcbiAgSFRNTEFsbENvbGxlY3Rpb246IDAsXG4gIEhUTUxDb2xsZWN0aW9uOiAwLFxuICBIVE1MRm9ybUVsZW1lbnQ6IDAsXG4gIEhUTUxTZWxlY3RFbGVtZW50OiAwLFxuICBNZWRpYUxpc3Q6IDAsXG4gIE1pbWVUeXBlQXJyYXk6IDAsXG4gIE5hbWVkTm9kZU1hcDogMCxcbiAgTm9kZUxpc3Q6IDEsXG4gIFBhaW50UmVxdWVzdExpc3Q6IDAsXG4gIFBsdWdpbjogMCxcbiAgUGx1Z2luQXJyYXk6IDAsXG4gIFNWR0xlbmd0aExpc3Q6IDAsXG4gIFNWR051bWJlckxpc3Q6IDAsXG4gIFNWR1BhdGhTZWdMaXN0OiAwLFxuICBTVkdQb2ludExpc3Q6IDAsXG4gIFNWR1N0cmluZ0xpc3Q6IDAsXG4gIFNWR1RyYW5zZm9ybUxpc3Q6IDAsXG4gIFNvdXJjZUJ1ZmZlckxpc3Q6IDAsXG4gIFN0eWxlU2hlZXRMaXN0OiAwLFxuICBUZXh0VHJhY2tDdWVMaXN0OiAwLFxuICBUZXh0VHJhY2tMaXN0OiAwLFxuICBUb3VjaExpc3Q6IDBcbn07XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBmcm9tID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWZyb20nKTtcbnZhciBjaGVja0NvcnJlY3RuZXNzT2ZJdGVyYXRpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2hlY2stY29ycmVjdG5lc3Mtb2YtaXRlcmF0aW9uJyk7XG5cbnZhciBJTkNPUlJFQ1RfSVRFUkFUSU9OID0gIWNoZWNrQ29ycmVjdG5lc3NPZkl0ZXJhdGlvbihmdW5jdGlvbiAoaXRlcmFibGUpIHtcbiAgQXJyYXkuZnJvbShpdGVyYWJsZSk7XG59KTtcblxuLy8gYEFycmF5LmZyb21gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkuZnJvbVxuJCh7IHRhcmdldDogJ0FycmF5Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBJTkNPUlJFQ1RfSVRFUkFUSU9OIH0sIHtcbiAgZnJvbTogZnJvbVxufSk7XG4iLCJ2YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG5cbi8vIGNhbGwgc29tZXRoaW5nIG9uIGl0ZXJhdG9yIHN0ZXAgd2l0aCBzYWZlIGNsb3Npbmcgb24gZXJyb3Jcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZXJhdG9yLCBmbiwgdmFsdWUsIEVOVFJJRVMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gRU5UUklFUyA/IGZuKGFuT2JqZWN0KHZhbHVlKVswXSwgdmFsdWVbMV0pIDogZm4odmFsdWUpO1xuICAvLyA3LjQuNiBJdGVyYXRvckNsb3NlKGl0ZXJhdG9yLCBjb21wbGV0aW9uKVxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHZhciByZXR1cm5NZXRob2QgPSBpdGVyYXRvclsncmV0dXJuJ107XG4gICAgaWYgKHJldHVybk1ldGhvZCAhPT0gdW5kZWZpbmVkKSBhbk9iamVjdChyZXR1cm5NZXRob2QuY2FsbChpdGVyYXRvcikpO1xuICAgIHRocm93IGVycm9yO1xuICB9XG59O1xuIiwidmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvcnMnKTtcblxudmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xudmFyIEFycmF5UHJvdG90eXBlID0gQXJyYXkucHJvdG90eXBlO1xuXG4vLyBjaGVjayBvbiBkZWZhdWx0IEFycmF5IGl0ZXJhdG9yXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgIT09IHVuZGVmaW5lZCAmJiAoSXRlcmF0b3JzLkFycmF5ID09PSBpdCB8fCBBcnJheVByb3RvdHlwZVtJVEVSQVRPUl0gPT09IGl0KTtcbn07XG4iLCJ2YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9ycycpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgSVRFUkFUT1IgPSB3ZWxsS25vd25TeW1ib2woJ2l0ZXJhdG9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpdCAhPSB1bmRlZmluZWQpIHJldHVybiBpdFtJVEVSQVRPUl1cbiAgICB8fCBpdFsnQEBpdGVyYXRvciddXG4gICAgfHwgSXRlcmF0b3JzW2NsYXNzb2YoaXQpXTtcbn07XG4iLCJ2YXIgY2xhc3NvZlJhdyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mLXJhdycpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgVE9fU1RSSU5HX1RBRyA9IHdlbGxLbm93blN5bWJvbCgndG9TdHJpbmdUYWcnKTtcbi8vIEVTMyB3cm9uZyBoZXJlXG52YXIgQ09SUkVDVF9BUkdVTUVOVFMgPSBjbGFzc29mUmF3KGZ1bmN0aW9uICgpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKSA9PSAnQXJndW1lbnRzJztcblxuLy8gZmFsbGJhY2sgZm9yIElFMTEgU2NyaXB0IEFjY2VzcyBEZW5pZWQgZXJyb3JcbnZhciB0cnlHZXQgPSBmdW5jdGlvbiAoaXQsIGtleSkge1xuICB0cnkge1xuICAgIHJldHVybiBpdFtrZXldO1xuICB9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG59O1xuXG4vLyBnZXR0aW5nIHRhZyBmcm9tIEVTNisgYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdgXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgTywgdGFnLCByZXN1bHQ7XG4gIHJldHVybiBpdCA9PT0gdW5kZWZpbmVkID8gJ1VuZGVmaW5lZCcgOiBpdCA9PT0gbnVsbCA/ICdOdWxsJ1xuICAgIC8vIEBAdG9TdHJpbmdUYWcgY2FzZVxuICAgIDogdHlwZW9mICh0YWcgPSB0cnlHZXQoTyA9IE9iamVjdChpdCksIFRPX1NUUklOR19UQUcpKSA9PSAnc3RyaW5nJyA/IHRhZ1xuICAgIC8vIGJ1aWx0aW5UYWcgY2FzZVxuICAgIDogQ09SUkVDVF9BUkdVTUVOVFMgPyBjbGFzc29mUmF3KE8pXG4gICAgLy8gRVMzIGFyZ3VtZW50cyBmYWxsYmFja1xuICAgIDogKHJlc3VsdCA9IGNsYXNzb2ZSYXcoTykpID09ICdPYmplY3QnICYmIHR5cGVvZiBPLmNhbGxlZSA9PSAnZnVuY3Rpb24nID8gJ0FyZ3VtZW50cycgOiByZXN1bHQ7XG59O1xuIiwidmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgSVRFUkFUT1IgPSB3ZWxsS25vd25TeW1ib2woJ2l0ZXJhdG9yJyk7XG52YXIgU0FGRV9DTE9TSU5HID0gZmFsc2U7XG5cbnRyeSB7XG4gIHZhciBjYWxsZWQgPSAwO1xuICB2YXIgaXRlcmF0b3JXaXRoUmV0dXJuID0ge1xuICAgIG5leHQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB7IGRvbmU6ICEhY2FsbGVkKysgfTtcbiAgICB9LFxuICAgICdyZXR1cm4nOiBmdW5jdGlvbiAoKSB7XG4gICAgICBTQUZFX0NMT1NJTkcgPSB0cnVlO1xuICAgIH1cbiAgfTtcbiAgaXRlcmF0b3JXaXRoUmV0dXJuW0lURVJBVE9SXSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXRocm93LWxpdGVyYWxcbiAgQXJyYXkuZnJvbShpdGVyYXRvcldpdGhSZXR1cm4sIGZ1bmN0aW9uICgpIHsgdGhyb3cgMjsgfSk7XG59IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMsIFNLSVBfQ0xPU0lORykge1xuICBpZiAoIVNLSVBfQ0xPU0lORyAmJiAhU0FGRV9DTE9TSU5HKSByZXR1cm4gZmFsc2U7XG4gIHZhciBJVEVSQVRJT05fU1VQUE9SVCA9IGZhbHNlO1xuICB0cnkge1xuICAgIHZhciBvYmplY3QgPSB7fTtcbiAgICBvYmplY3RbSVRFUkFUT1JdID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbmV4dDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiB7IGRvbmU6IElURVJBVElPTl9TVVBQT1JUID0gdHJ1ZSB9O1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH07XG4gICAgZXhlYyhvYmplY3QpO1xuICB9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG4gIHJldHVybiBJVEVSQVRJT05fU1VQUE9SVDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcblxudmFyIFNQRUNJRVMgPSB3ZWxsS25vd25TeW1ib2woJ3NwZWNpZXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQ09OU1RSVUNUT1JfTkFNRSkge1xuICB2YXIgQ29uc3RydWN0b3IgPSBnZXRCdWlsdEluKENPTlNUUlVDVE9SX05BTUUpO1xuICB2YXIgZGVmaW5lUHJvcGVydHkgPSBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mO1xuXG4gIGlmIChERVNDUklQVE9SUyAmJiBDb25zdHJ1Y3RvciAmJiAhQ29uc3RydWN0b3JbU1BFQ0lFU10pIHtcbiAgICBkZWZpbmVQcm9wZXJ0eShDb25zdHJ1Y3RvciwgU1BFQ0lFUywge1xuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9XG4gICAgfSk7XG4gIH1cbn07XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgaXNGb3JjZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtZm9yY2VkJyk7XG52YXIgaW5oZXJpdElmUmVxdWlyZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5oZXJpdC1pZi1yZXF1aXJlZCcpO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKS5mO1xudmFyIGdldE93blByb3BlcnR5TmFtZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMnKS5mO1xudmFyIGlzUmVnRXhwID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXJlZ2V4cCcpO1xudmFyIGdldEZsYWdzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC1mbGFncycpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBzZXRTcGVjaWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC1zcGVjaWVzJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBNQVRDSCA9IHdlbGxLbm93blN5bWJvbCgnbWF0Y2gnKTtcbnZhciBOYXRpdmVSZWdFeHAgPSBnbG9iYWwuUmVnRXhwO1xudmFyIFJlZ0V4cFByb3RvdHlwZSA9IE5hdGl2ZVJlZ0V4cC5wcm90b3R5cGU7XG52YXIgcmUxID0gL2EvZztcbnZhciByZTIgPSAvYS9nO1xuXG4vLyBcIm5ld1wiIHNob3VsZCBjcmVhdGUgYSBuZXcgb2JqZWN0LCBvbGQgd2Via2l0IGJ1Z1xudmFyIENPUlJFQ1RfTkVXID0gbmV3IE5hdGl2ZVJlZ0V4cChyZTEpICE9PSByZTE7XG5cbnZhciBGT1JDRUQgPSBERVNDUklQVE9SUyAmJiBpc0ZvcmNlZCgnUmVnRXhwJywgKCFDT1JSRUNUX05FVyB8fCBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJlMltNQVRDSF0gPSBmYWxzZTtcbiAgLy8gUmVnRXhwIGNvbnN0cnVjdG9yIGNhbiBhbHRlciBmbGFncyBhbmQgSXNSZWdFeHAgd29ya3MgY29ycmVjdCB3aXRoIEBAbWF0Y2hcbiAgcmV0dXJuIE5hdGl2ZVJlZ0V4cChyZTEpICE9IHJlMSB8fCBOYXRpdmVSZWdFeHAocmUyKSA9PSByZTIgfHwgTmF0aXZlUmVnRXhwKHJlMSwgJ2knKSAhPSAnL2EvaSc7XG59KSkpO1xuXG4vLyBgUmVnRXhwYCBjb25zdHJ1Y3RvclxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcmVnZXhwLWNvbnN0cnVjdG9yXG5pZiAoRk9SQ0VEKSB7XG4gIHZhciBSZWdFeHBXcmFwcGVyID0gZnVuY3Rpb24gUmVnRXhwKHBhdHRlcm4sIGZsYWdzKSB7XG4gICAgdmFyIHRoaXNJc1JlZ0V4cCA9IHRoaXMgaW5zdGFuY2VvZiBSZWdFeHBXcmFwcGVyO1xuICAgIHZhciBwYXR0ZXJuSXNSZWdFeHAgPSBpc1JlZ0V4cChwYXR0ZXJuKTtcbiAgICB2YXIgZmxhZ3NBcmVVbmRlZmluZWQgPSBmbGFncyA9PT0gdW5kZWZpbmVkO1xuICAgIHJldHVybiAhdGhpc0lzUmVnRXhwICYmIHBhdHRlcm5Jc1JlZ0V4cCAmJiBwYXR0ZXJuLmNvbnN0cnVjdG9yID09PSBSZWdFeHBXcmFwcGVyICYmIGZsYWdzQXJlVW5kZWZpbmVkID8gcGF0dGVyblxuICAgICAgOiBpbmhlcml0SWZSZXF1aXJlZChDT1JSRUNUX05FV1xuICAgICAgICA/IG5ldyBOYXRpdmVSZWdFeHAocGF0dGVybklzUmVnRXhwICYmICFmbGFnc0FyZVVuZGVmaW5lZCA/IHBhdHRlcm4uc291cmNlIDogcGF0dGVybiwgZmxhZ3MpXG4gICAgICAgIDogTmF0aXZlUmVnRXhwKChwYXR0ZXJuSXNSZWdFeHAgPSBwYXR0ZXJuIGluc3RhbmNlb2YgUmVnRXhwV3JhcHBlcilcbiAgICAgICAgICA/IHBhdHRlcm4uc291cmNlXG4gICAgICAgICAgOiBwYXR0ZXJuLCBwYXR0ZXJuSXNSZWdFeHAgJiYgZmxhZ3NBcmVVbmRlZmluZWQgPyBnZXRGbGFncy5jYWxsKHBhdHRlcm4pIDogZmxhZ3MpXG4gICAgICAsIHRoaXNJc1JlZ0V4cCA/IHRoaXMgOiBSZWdFeHBQcm90b3R5cGUsIFJlZ0V4cFdyYXBwZXIpO1xuICB9O1xuICB2YXIgcHJveHkgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAga2V5IGluIFJlZ0V4cFdyYXBwZXIgfHwgZGVmaW5lUHJvcGVydHkoUmVnRXhwV3JhcHBlciwga2V5LCB7XG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIE5hdGl2ZVJlZ0V4cFtrZXldOyB9LFxuICAgICAgc2V0OiBmdW5jdGlvbiAoaXQpIHsgTmF0aXZlUmVnRXhwW2tleV0gPSBpdDsgfVxuICAgIH0pO1xuICB9O1xuICB2YXIga2V5cyA9IGdldE93blByb3BlcnR5TmFtZXMoTmF0aXZlUmVnRXhwKTtcbiAgdmFyIGluZGV4ID0gMDtcbiAgd2hpbGUgKGtleXMubGVuZ3RoID4gaW5kZXgpIHByb3h5KGtleXNbaW5kZXgrK10pO1xuICBSZWdFeHBQcm90b3R5cGUuY29uc3RydWN0b3IgPSBSZWdFeHBXcmFwcGVyO1xuICBSZWdFeHBXcmFwcGVyLnByb3RvdHlwZSA9IFJlZ0V4cFByb3RvdHlwZTtcbiAgcmVkZWZpbmUoZ2xvYmFsLCAnUmVnRXhwJywgUmVnRXhwV3JhcHBlcik7XG59XG5cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWdldC1yZWdleHAtQEBzcGVjaWVzXG5zZXRTcGVjaWVzKCdSZWdFeHAnKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgZmxhZ3MgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLWZsYWdzJyk7XG5cbnZhciBUT19TVFJJTkcgPSAndG9TdHJpbmcnO1xudmFyIFJlZ0V4cFByb3RvdHlwZSA9IFJlZ0V4cC5wcm90b3R5cGU7XG52YXIgbmF0aXZlVG9TdHJpbmcgPSBSZWdFeHBQcm90b3R5cGVbVE9fU1RSSU5HXTtcblxudmFyIE5PVF9HRU5FUklDID0gZmFpbHMoZnVuY3Rpb24gKCkgeyByZXR1cm4gbmF0aXZlVG9TdHJpbmcuY2FsbCh7IHNvdXJjZTogJ2EnLCBmbGFnczogJ2InIH0pICE9ICcvYS9iJzsgfSk7XG4vLyBGRjQ0LSBSZWdFeHAjdG9TdHJpbmcgaGFzIGEgd3JvbmcgbmFtZVxudmFyIElOQ09SUkVDVF9OQU1FID0gbmF0aXZlVG9TdHJpbmcubmFtZSAhPSBUT19TVFJJTkc7XG5cbi8vIGBSZWdFeHAucHJvdG90eXBlLnRvU3RyaW5nYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXJlZ2V4cC5wcm90b3R5cGUudG9zdHJpbmdcbmlmIChOT1RfR0VORVJJQyB8fCBJTkNPUlJFQ1RfTkFNRSkge1xuICByZWRlZmluZShSZWdFeHAucHJvdG90eXBlLCBUT19TVFJJTkcsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHZhciBSID0gYW5PYmplY3QodGhpcyk7XG4gICAgdmFyIHAgPSBTdHJpbmcoUi5zb3VyY2UpO1xuICAgIHZhciByZiA9IFIuZmxhZ3M7XG4gICAgdmFyIGYgPSBTdHJpbmcocmYgPT09IHVuZGVmaW5lZCAmJiBSIGluc3RhbmNlb2YgUmVnRXhwICYmICEoJ2ZsYWdzJyBpbiBSZWdFeHBQcm90b3R5cGUpID8gZmxhZ3MuY2FsbChSKSA6IHJmKTtcbiAgICByZXR1cm4gJy8nICsgcCArICcvJyArIGY7XG4gIH0sIHsgdW5zYWZlOiB0cnVlIH0pO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGNoYXJBdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctbXVsdGlieXRlJykuY2hhckF0O1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcbnZhciBkZWZpbmVJdGVyYXRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtaXRlcmF0b3InKTtcblxudmFyIFNUUklOR19JVEVSQVRPUiA9ICdTdHJpbmcgSXRlcmF0b3InO1xudmFyIHNldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLnNldDtcbnZhciBnZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXR0ZXJGb3IoU1RSSU5HX0lURVJBVE9SKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGVbQEBpdGVyYXRvcl1gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS1AQGl0ZXJhdG9yXG5kZWZpbmVJdGVyYXRvcihTdHJpbmcsICdTdHJpbmcnLCBmdW5jdGlvbiAoaXRlcmF0ZWQpIHtcbiAgc2V0SW50ZXJuYWxTdGF0ZSh0aGlzLCB7XG4gICAgdHlwZTogU1RSSU5HX0lURVJBVE9SLFxuICAgIHN0cmluZzogU3RyaW5nKGl0ZXJhdGVkKSxcbiAgICBpbmRleDogMFxuICB9KTtcbi8vIGAlU3RyaW5nSXRlcmF0b3JQcm90b3R5cGUlLm5leHRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtJXN0cmluZ2l0ZXJhdG9ycHJvdG90eXBlJS5uZXh0XG59LCBmdW5jdGlvbiBuZXh0KCkge1xuICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpO1xuICB2YXIgc3RyaW5nID0gc3RhdGUuc3RyaW5nO1xuICB2YXIgaW5kZXggPSBzdGF0ZS5pbmRleDtcbiAgdmFyIHBvaW50O1xuICBpZiAoaW5kZXggPj0gc3RyaW5nLmxlbmd0aCkgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICBwb2ludCA9IGNoYXJBdChzdHJpbmcsIGluZGV4KTtcbiAgc3RhdGUuaW5kZXggKz0gcG9pbnQubGVuZ3RoO1xuICByZXR1cm4geyB2YWx1ZTogcG9pbnQsIGRvbmU6IGZhbHNlIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2JpbmQtY29udGV4dCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIGNhbGxXaXRoU2FmZUl0ZXJhdGlvbkNsb3NpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2FsbC13aXRoLXNhZmUtaXRlcmF0aW9uLWNsb3NpbmcnKTtcbnZhciBpc0FycmF5SXRlcmF0b3JNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtYXJyYXktaXRlcmF0b3ItbWV0aG9kJyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5Jyk7XG52YXIgZ2V0SXRlcmF0b3JNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWl0ZXJhdG9yLW1ldGhvZCcpO1xuXG4vLyBgQXJyYXkuZnJvbWAgbWV0aG9kIGltcGxlbWVudGF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5mcm9tXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGZyb20oYXJyYXlMaWtlIC8qICwgbWFwZm4gPSB1bmRlZmluZWQsIHRoaXNBcmcgPSB1bmRlZmluZWQgKi8pIHtcbiAgdmFyIE8gPSB0b09iamVjdChhcnJheUxpa2UpO1xuICB2YXIgQyA9IHR5cGVvZiB0aGlzID09ICdmdW5jdGlvbicgPyB0aGlzIDogQXJyYXk7XG4gIHZhciBhcmd1bWVudHNMZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICB2YXIgbWFwZm4gPSBhcmd1bWVudHNMZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkO1xuICB2YXIgbWFwcGluZyA9IG1hcGZuICE9PSB1bmRlZmluZWQ7XG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciBpdGVyYXRvck1ldGhvZCA9IGdldEl0ZXJhdG9yTWV0aG9kKE8pO1xuICB2YXIgbGVuZ3RoLCByZXN1bHQsIHN0ZXAsIGl0ZXJhdG9yO1xuICBpZiAobWFwcGluZykgbWFwZm4gPSBiaW5kKG1hcGZuLCBhcmd1bWVudHNMZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkLCAyKTtcbiAgLy8gaWYgdGhlIHRhcmdldCBpcyBub3QgaXRlcmFibGUgb3IgaXQncyBhbiBhcnJheSB3aXRoIHRoZSBkZWZhdWx0IGl0ZXJhdG9yIC0gdXNlIGEgc2ltcGxlIGNhc2VcbiAgaWYgKGl0ZXJhdG9yTWV0aG9kICE9IHVuZGVmaW5lZCAmJiAhKEMgPT0gQXJyYXkgJiYgaXNBcnJheUl0ZXJhdG9yTWV0aG9kKGl0ZXJhdG9yTWV0aG9kKSkpIHtcbiAgICBpdGVyYXRvciA9IGl0ZXJhdG9yTWV0aG9kLmNhbGwoTyk7XG4gICAgcmVzdWx0ID0gbmV3IEMoKTtcbiAgICBmb3IgKDshKHN0ZXAgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmU7IGluZGV4KyspIHtcbiAgICAgIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwgaW5kZXgsIG1hcHBpbmdcbiAgICAgICAgPyBjYWxsV2l0aFNhZmVJdGVyYXRpb25DbG9zaW5nKGl0ZXJhdG9yLCBtYXBmbiwgW3N0ZXAudmFsdWUsIGluZGV4XSwgdHJ1ZSlcbiAgICAgICAgOiBzdGVwLnZhbHVlXG4gICAgICApO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgcmVzdWx0ID0gbmV3IEMobGVuZ3RoKTtcbiAgICBmb3IgKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKykge1xuICAgICAgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBpbmRleCwgbWFwcGluZyA/IG1hcGZuKE9baW5kZXhdLCBpbmRleCkgOiBPW2luZGV4XSk7XG4gICAgfVxuICB9XG4gIHJlc3VsdC5sZW5ndGggPSBpbmRleDtcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXNldC1wcm90b3R5cGUtb2YnKTtcblxuLy8gbWFrZXMgc3ViY2xhc3Npbmcgd29yayBjb3JyZWN0IGZvciB3cmFwcGVkIGJ1aWx0LWluc1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoJHRoaXMsIGR1bW15LCBXcmFwcGVyKSB7XG4gIHZhciBOZXdUYXJnZXQsIE5ld1RhcmdldFByb3RvdHlwZTtcbiAgaWYgKFxuICAgIC8vIGl0IGNhbiB3b3JrIG9ubHkgd2l0aCBuYXRpdmUgYHNldFByb3RvdHlwZU9mYFxuICAgIHNldFByb3RvdHlwZU9mICYmXG4gICAgLy8gd2UgaGF2ZW4ndCBjb21wbGV0ZWx5IGNvcnJlY3QgcHJlLUVTNiB3YXkgZm9yIGdldHRpbmcgYG5ldy50YXJnZXRgLCBzbyB1c2UgdGhpc1xuICAgIHR5cGVvZiAoTmV3VGFyZ2V0ID0gZHVtbXkuY29uc3RydWN0b3IpID09ICdmdW5jdGlvbicgJiZcbiAgICBOZXdUYXJnZXQgIT09IFdyYXBwZXIgJiZcbiAgICBpc09iamVjdChOZXdUYXJnZXRQcm90b3R5cGUgPSBOZXdUYXJnZXQucHJvdG90eXBlKSAmJlxuICAgIE5ld1RhcmdldFByb3RvdHlwZSAhPT0gV3JhcHBlci5wcm90b3R5cGVcbiAgKSBzZXRQcm90b3R5cGVPZigkdGhpcywgTmV3VGFyZ2V0UHJvdG90eXBlKTtcbiAgcmV0dXJuICR0aGlzO1xufTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKCFpc09iamVjdChpdCkgJiYgaXQgIT09IG51bGwpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBzZXQgXCIgKyBTdHJpbmcoaXQpICsgJyBhcyBhIHByb3RvdHlwZScpO1xuICB9IHJldHVybiBpdDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBjcmVhdGVJdGVyYXRvckNvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1pdGVyYXRvci1jb25zdHJ1Y3RvcicpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtcHJvdG90eXBlLW9mJyk7XG52YXIgc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXNldC1wcm90b3R5cGUtb2YnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGlkZScpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9ycycpO1xudmFyIEl0ZXJhdG9yc0NvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0b3JzLWNvcmUnKTtcblxudmFyIEl0ZXJhdG9yUHJvdG90eXBlID0gSXRlcmF0b3JzQ29yZS5JdGVyYXRvclByb3RvdHlwZTtcbnZhciBCVUdHWV9TQUZBUklfSVRFUkFUT1JTID0gSXRlcmF0b3JzQ29yZS5CVUdHWV9TQUZBUklfSVRFUkFUT1JTO1xudmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xudmFyIEtFWVMgPSAna2V5cyc7XG52YXIgVkFMVUVTID0gJ3ZhbHVlcyc7XG52YXIgRU5UUklFUyA9ICdlbnRyaWVzJztcblxudmFyIHJldHVyblRoaXMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChJdGVyYWJsZSwgTkFNRSwgSXRlcmF0b3JDb25zdHJ1Y3RvciwgbmV4dCwgREVGQVVMVCwgSVNfU0VULCBGT1JDRUQpIHtcbiAgY3JlYXRlSXRlcmF0b3JDb25zdHJ1Y3RvcihJdGVyYXRvckNvbnN0cnVjdG9yLCBOQU1FLCBuZXh0KTtcblxuICB2YXIgZ2V0SXRlcmF0aW9uTWV0aG9kID0gZnVuY3Rpb24gKEtJTkQpIHtcbiAgICBpZiAoS0lORCA9PT0gREVGQVVMVCAmJiBkZWZhdWx0SXRlcmF0b3IpIHJldHVybiBkZWZhdWx0SXRlcmF0b3I7XG4gICAgaWYgKCFCVUdHWV9TQUZBUklfSVRFUkFUT1JTICYmIEtJTkQgaW4gSXRlcmFibGVQcm90b3R5cGUpIHJldHVybiBJdGVyYWJsZVByb3RvdHlwZVtLSU5EXTtcbiAgICBzd2l0Y2ggKEtJTkQpIHtcbiAgICAgIGNhc2UgS0VZUzogcmV0dXJuIGZ1bmN0aW9uIGtleXMoKSB7IHJldHVybiBuZXcgSXRlcmF0b3JDb25zdHJ1Y3Rvcih0aGlzLCBLSU5EKTsgfTtcbiAgICAgIGNhc2UgVkFMVUVTOiByZXR1cm4gZnVuY3Rpb24gdmFsdWVzKCkgeyByZXR1cm4gbmV3IEl0ZXJhdG9yQ29uc3RydWN0b3IodGhpcywgS0lORCk7IH07XG4gICAgICBjYXNlIEVOVFJJRVM6IHJldHVybiBmdW5jdGlvbiBlbnRyaWVzKCkgeyByZXR1cm4gbmV3IEl0ZXJhdG9yQ29uc3RydWN0b3IodGhpcywgS0lORCk7IH07XG4gICAgfSByZXR1cm4gZnVuY3Rpb24gKCkgeyByZXR1cm4gbmV3IEl0ZXJhdG9yQ29uc3RydWN0b3IodGhpcyk7IH07XG4gIH07XG5cbiAgdmFyIFRPX1NUUklOR19UQUcgPSBOQU1FICsgJyBJdGVyYXRvcic7XG4gIHZhciBJTkNPUlJFQ1RfVkFMVUVTX05BTUUgPSBmYWxzZTtcbiAgdmFyIEl0ZXJhYmxlUHJvdG90eXBlID0gSXRlcmFibGUucHJvdG90eXBlO1xuICB2YXIgbmF0aXZlSXRlcmF0b3IgPSBJdGVyYWJsZVByb3RvdHlwZVtJVEVSQVRPUl1cbiAgICB8fCBJdGVyYWJsZVByb3RvdHlwZVsnQEBpdGVyYXRvciddXG4gICAgfHwgREVGQVVMVCAmJiBJdGVyYWJsZVByb3RvdHlwZVtERUZBVUxUXTtcbiAgdmFyIGRlZmF1bHRJdGVyYXRvciA9ICFCVUdHWV9TQUZBUklfSVRFUkFUT1JTICYmIG5hdGl2ZUl0ZXJhdG9yIHx8IGdldEl0ZXJhdGlvbk1ldGhvZChERUZBVUxUKTtcbiAgdmFyIGFueU5hdGl2ZUl0ZXJhdG9yID0gTkFNRSA9PSAnQXJyYXknID8gSXRlcmFibGVQcm90b3R5cGUuZW50cmllcyB8fCBuYXRpdmVJdGVyYXRvciA6IG5hdGl2ZUl0ZXJhdG9yO1xuICB2YXIgQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlLCBtZXRob2RzLCBLRVk7XG5cbiAgLy8gZml4IG5hdGl2ZVxuICBpZiAoYW55TmF0aXZlSXRlcmF0b3IpIHtcbiAgICBDdXJyZW50SXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZihhbnlOYXRpdmVJdGVyYXRvci5jYWxsKG5ldyBJdGVyYWJsZSgpKSk7XG4gICAgaWYgKEl0ZXJhdG9yUHJvdG90eXBlICE9PSBPYmplY3QucHJvdG90eXBlICYmIEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZS5uZXh0KSB7XG4gICAgICBpZiAoIUlTX1BVUkUgJiYgZ2V0UHJvdG90eXBlT2YoQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlKSAhPT0gSXRlcmF0b3JQcm90b3R5cGUpIHtcbiAgICAgICAgaWYgKHNldFByb3RvdHlwZU9mKSB7XG4gICAgICAgICAgc2V0UHJvdG90eXBlT2YoQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlLCBJdGVyYXRvclByb3RvdHlwZSk7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZVtJVEVSQVRPUl0gIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIGhpZGUoQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlLCBJVEVSQVRPUiwgcmV0dXJuVGhpcyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIFNldCBAQHRvU3RyaW5nVGFnIHRvIG5hdGl2ZSBpdGVyYXRvcnNcbiAgICAgIHNldFRvU3RyaW5nVGFnKEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSwgVE9fU1RSSU5HX1RBRywgdHJ1ZSwgdHJ1ZSk7XG4gICAgICBpZiAoSVNfUFVSRSkgSXRlcmF0b3JzW1RPX1NUUklOR19UQUddID0gcmV0dXJuVGhpcztcbiAgICB9XG4gIH1cblxuICAvLyBmaXggQXJyYXkje3ZhbHVlcywgQEBpdGVyYXRvcn0ubmFtZSBpbiBWOCAvIEZGXG4gIGlmIChERUZBVUxUID09IFZBTFVFUyAmJiBuYXRpdmVJdGVyYXRvciAmJiBuYXRpdmVJdGVyYXRvci5uYW1lICE9PSBWQUxVRVMpIHtcbiAgICBJTkNPUlJFQ1RfVkFMVUVTX05BTUUgPSB0cnVlO1xuICAgIGRlZmF1bHRJdGVyYXRvciA9IGZ1bmN0aW9uIHZhbHVlcygpIHsgcmV0dXJuIG5hdGl2ZUl0ZXJhdG9yLmNhbGwodGhpcyk7IH07XG4gIH1cblxuICAvLyBkZWZpbmUgaXRlcmF0b3JcbiAgaWYgKCghSVNfUFVSRSB8fCBGT1JDRUQpICYmIEl0ZXJhYmxlUHJvdG90eXBlW0lURVJBVE9SXSAhPT0gZGVmYXVsdEl0ZXJhdG9yKSB7XG4gICAgaGlkZShJdGVyYWJsZVByb3RvdHlwZSwgSVRFUkFUT1IsIGRlZmF1bHRJdGVyYXRvcik7XG4gIH1cbiAgSXRlcmF0b3JzW05BTUVdID0gZGVmYXVsdEl0ZXJhdG9yO1xuXG4gIC8vIGV4cG9ydCBhZGRpdGlvbmFsIG1ldGhvZHNcbiAgaWYgKERFRkFVTFQpIHtcbiAgICBtZXRob2RzID0ge1xuICAgICAgdmFsdWVzOiBnZXRJdGVyYXRpb25NZXRob2QoVkFMVUVTKSxcbiAgICAgIGtleXM6IElTX1NFVCA/IGRlZmF1bHRJdGVyYXRvciA6IGdldEl0ZXJhdGlvbk1ldGhvZChLRVlTKSxcbiAgICAgIGVudHJpZXM6IGdldEl0ZXJhdGlvbk1ldGhvZChFTlRSSUVTKVxuICAgIH07XG4gICAgaWYgKEZPUkNFRCkgZm9yIChLRVkgaW4gbWV0aG9kcykge1xuICAgICAgaWYgKEJVR0dZX1NBRkFSSV9JVEVSQVRPUlMgfHwgSU5DT1JSRUNUX1ZBTFVFU19OQU1FIHx8ICEoS0VZIGluIEl0ZXJhYmxlUHJvdG90eXBlKSkge1xuICAgICAgICByZWRlZmluZShJdGVyYWJsZVByb3RvdHlwZSwgS0VZLCBtZXRob2RzW0tFWV0pO1xuICAgICAgfVxuICAgIH0gZWxzZSAkKHsgdGFyZ2V0OiBOQU1FLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBCVUdHWV9TQUZBUklfSVRFUkFUT1JTIHx8IElOQ09SUkVDVF9WQUxVRVNfTkFNRSB9LCBtZXRob2RzKTtcbiAgfVxuXG4gIHJldHVybiBtZXRob2RzO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBJdGVyYXRvclByb3RvdHlwZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvcnMtY29yZScpLkl0ZXJhdG9yUHJvdG90eXBlO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtY3JlYXRlJyk7XG52YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0b3JzJyk7XG5cbnZhciByZXR1cm5UaGlzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoSXRlcmF0b3JDb25zdHJ1Y3RvciwgTkFNRSwgbmV4dCkge1xuICB2YXIgVE9fU1RSSU5HX1RBRyA9IE5BTUUgKyAnIEl0ZXJhdG9yJztcbiAgSXRlcmF0b3JDb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBjcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUsIHsgbmV4dDogY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDEsIG5leHQpIH0pO1xuICBzZXRUb1N0cmluZ1RhZyhJdGVyYXRvckNvbnN0cnVjdG9yLCBUT19TVFJJTkdfVEFHLCBmYWxzZSwgdHJ1ZSk7XG4gIEl0ZXJhdG9yc1tUT19TVFJJTkdfVEFHXSA9IHJldHVyblRoaXM7XG4gIHJldHVybiBJdGVyYXRvckNvbnN0cnVjdG9yO1xufTtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEYoKSB7IC8qIGVtcHR5ICovIH1cbiAgRi5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBudWxsO1xuICByZXR1cm4gT2JqZWN0LmdldFByb3RvdHlwZU9mKG5ldyBGKCkpICE9PSBGLnByb3RvdHlwZTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbmRleGVkLW9iamVjdCcpO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIHNsb3BweUFycmF5TWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3Nsb3BweS1hcnJheS1tZXRob2QnKTtcblxudmFyIG5hdGl2ZUpvaW4gPSBbXS5qb2luO1xuXG52YXIgRVMzX1NUUklOR1MgPSBJbmRleGVkT2JqZWN0ICE9IE9iamVjdDtcbnZhciBTTE9QUFlfTUVUSE9EID0gc2xvcHB5QXJyYXlNZXRob2QoJ2pvaW4nLCAnLCcpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLmpvaW5gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmpvaW5cbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IEVTM19TVFJJTkdTIHx8IFNMT1BQWV9NRVRIT0QgfSwge1xuICBqb2luOiBmdW5jdGlvbiBqb2luKHNlcGFyYXRvcikge1xuICAgIHJldHVybiBuYXRpdmVKb2luLmNhbGwodG9JbmRleGVkT2JqZWN0KHRoaXMpLCBzZXBhcmF0b3IgPT09IHVuZGVmaW5lZCA/ICcsJyA6IHNlcGFyYXRvcik7XG4gIH1cbn0pO1xuIiwiZnVuY3Rpb24gX2FycmF5V2l0aG91dEhvbGVzKGFycikge1xuICBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkoYXJyLmxlbmd0aCk7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFycjJbaV0gPSBhcnJbaV07XG4gICAgfVxuXG4gICAgcmV0dXJuIGFycjI7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfYXJyYXlXaXRob3V0SG9sZXM7IiwiZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheShpdGVyKSB7XG4gIGlmIChTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGl0ZXIpIHx8IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpdGVyKSA9PT0gXCJbb2JqZWN0IEFyZ3VtZW50c11cIikgcmV0dXJuIEFycmF5LmZyb20oaXRlcik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2l0ZXJhYmxlVG9BcnJheTsiLCJmdW5jdGlvbiBfbm9uSXRlcmFibGVTcHJlYWQoKSB7XG4gIHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gc3ByZWFkIG5vbi1pdGVyYWJsZSBpbnN0YW5jZVwiKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfbm9uSXRlcmFibGVTcHJlYWQ7IiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgJGluY2x1ZGVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWluY2x1ZGVzJykuaW5jbHVkZXM7XG52YXIgYWRkVG9VbnNjb3BhYmxlcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hZGQtdG8tdW5zY29wYWJsZXMnKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5pbmNsdWRlc2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuaW5jbHVkZXNcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlIH0sIHtcbiAgaW5jbHVkZXM6IGZ1bmN0aW9uIGluY2x1ZGVzKGVsIC8qICwgZnJvbUluZGV4ID0gMCAqLykge1xuICAgIHJldHVybiAkaW5jbHVkZXModGhpcywgZWwsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG5cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS1AQHVuc2NvcGFibGVzXG5hZGRUb1Vuc2NvcGFibGVzKCdpbmNsdWRlcycpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgbm90QVJlZ0V4cCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9ub3QtYS1yZWdleHAnKTtcbnZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xudmFyIGNvcnJlY3RJc1JlZ0V4cExvZ2ljID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NvcnJlY3QtaXMtcmVnZXhwLWxvZ2ljJyk7XG5cbi8vIGBTdHJpbmcucHJvdG90eXBlLmluY2x1ZGVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUuaW5jbHVkZXNcbiQoeyB0YXJnZXQ6ICdTdHJpbmcnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiAhY29ycmVjdElzUmVnRXhwTG9naWMoJ2luY2x1ZGVzJykgfSwge1xuICBpbmNsdWRlczogZnVuY3Rpb24gaW5jbHVkZXMoc2VhcmNoU3RyaW5nIC8qICwgcG9zaXRpb24gPSAwICovKSB7XG4gICAgcmV0dXJuICEhflN0cmluZyhyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKHRoaXMpKVxuICAgICAgLmluZGV4T2Yobm90QVJlZ0V4cChzZWFyY2hTdHJpbmcpLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xuIiwidmFyIGlzUmVnRXhwID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXJlZ2V4cCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoaXNSZWdFeHAoaXQpKSB7XG4gICAgdGhyb3cgVHlwZUVycm9yKFwiVGhlIG1ldGhvZCBkb2Vzbid0IGFjY2VwdCByZWd1bGFyIGV4cHJlc3Npb25zXCIpO1xuICB9IHJldHVybiBpdDtcbn07XG4iLCJ2YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBNQVRDSCA9IHdlbGxLbm93blN5bWJvbCgnbWF0Y2gnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTUVUSE9EX05BTUUpIHtcbiAgdmFyIHJlZ2V4cCA9IC8uLztcbiAgdHJ5IHtcbiAgICAnLy4vJ1tNRVRIT0RfTkFNRV0ocmVnZXhwKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHRyeSB7XG4gICAgICByZWdleHBbTUFUQ0hdID0gZmFsc2U7XG4gICAgICByZXR1cm4gJy8uLydbTUVUSE9EX05BTUVdKHJlZ2V4cCk7XG4gICAgfSBjYXRjaCAoZikgeyAvKiBlbXB0eSAqLyB9XG4gIH0gcmV0dXJuIGZhbHNlO1xufTtcbiIsImltcG9ydCB7IGRlYm91bmNlIH0gZnJvbSAnLi91dGlscy9oZWxwZXJzJztcblxuLyoqXG4gKiBGaWx0ZXJzIHRoZSBmYWNldHMgdG8gbWF0Y2ggdGhlIGlucHV0IHNlYXJjaCB0ZXJtIHdoZW5cbiAqIHRoZSBudW1iZXIgb2YgdGVybXMgZXhjZWVkcyB0aGUgdGhyZXNob2xkIGRldGVybWluZWRcbiAqIGJ5IHRoZSBlcF9mYWNldF9zZWFyY2hfdGhyZXNob2xkIGZpbHRlclxuICpcbiAqIEBwYXJhbSB7ZXZlbnR9IGV2ZW50IC0ga2V5dXBcbiAqIEBwYXJhbSB7Tm9kZX0gZmFjZXRUZXJtcyAtIERPTSBub2RlIHRvIHNlYXJjaCBmb3IgbWF0Y2hpbmcgdGVybXNcbiAqL1xuY29uc3QgaGFuZGxlRmFjZXRTZWFyY2ggPSAoZXZlbnQsIGZhY2V0VGVybXMpID0+IHtcblx0Y29uc3QgeyB0YXJnZXQgfSA9IGV2ZW50O1xuXHRjb25zdCBzZWFyY2hUZXJtID0gdGFyZ2V0LnZhbHVlLnJlcGxhY2UoL1xccy9nLCAnJykudG9Mb3dlckNhc2UoKTtcblx0Y29uc3QgdGVybXMgPSBmYWNldFRlcm1zLnF1ZXJ5U2VsZWN0b3JBbGwoJy50ZXJtJyk7XG5cblx0dGVybXMuZm9yRWFjaCgodGVybSkgPT4ge1xuXHRcdGNvbnN0IHNsdWcgPSB0ZXJtLmdldEF0dHJpYnV0ZSgnZGF0YS10ZXJtLXNsdWcnKTtcblx0XHRjb25zdCBuYW1lID0gdGVybS5nZXRBdHRyaWJ1dGUoJ2RhdGEtdGVybS1uYW1lJyk7XG5cblx0XHRpZiAobmFtZS5pbmNsdWRlcyhzZWFyY2hUZXJtKSB8fCBzbHVnLmluY2x1ZGVzKHNlYXJjaFRlcm0pKSB7XG5cdFx0XHR0ZXJtLmNsYXNzTGlzdC5yZW1vdmUoJ2hpZGUnKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGVybS5jbGFzc0xpc3QuYWRkKCdoaWRlJyk7XG5cdFx0fVxuXHR9KTtcbn07XG5cbi8qKlxuICogRmlsdGVyIGZhY2V0IGNob2ljZXMgdG8gbWF0Y2ggdGhlIHNlYXJjaCBmaWVsZCB0ZXJtXG4gKi9cbmNvbnN0IGluaXRMaXN0ZW5lciA9ICgpID0+IHtcblx0Y29uc3QgZmFjZXRUZXJtcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy53aWRnZXRfZXAtZmFjZXQgLnRlcm1zJyk7XG5cdGNvbnN0IGZhY2V0U2VhcmNoSW5wdXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcud2lkZ2V0X2VwLWZhY2V0IC5mYWNldC1zZWFyY2gnKTtcblx0Y29uc3QgZGVib3VuY2VGYWNldEZpbHRlciA9IGRlYm91bmNlKGhhbmRsZUZhY2V0U2VhcmNoLCAyMDApO1xuXG5cdGlmIChmYWNldFNlYXJjaElucHV0KSB7XG5cdFx0ZmFjZXRTZWFyY2hJbnB1dC5hZGRFdmVudExpc3RlbmVyKCdrZXl1cCcsIChldmVudCkgPT4ge1xuXHRcdFx0aWYgKGV2ZW50LmtleUNvZGUgPT09IDEzKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHRcdGRlYm91bmNlRmFjZXRGaWx0ZXIoZXZlbnQsIGZhY2V0VGVybXMpO1xuXHRcdH0pO1xuXHR9XG59O1xuXG5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgaW5pdExpc3RlbmVyKTtcbiJdLCJzb3VyY2VSb290IjoiIn0=