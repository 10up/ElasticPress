!function(e){var t={};function a(n){if(t[n])return t[n].exports;var i=t[n]={i:n,l:!1,exports:{}};return e[n].call(i.exports,i,i.exports,a),i.l=!0,i.exports}a.m=e,a.c=t,a.d=function(e,t,n){a.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},a.r=function(e){"undefined"!==typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},a.t=function(e,t){if(1&t&&(e=a(e)),8&t)return e;if(4&t&&"object"===typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(a.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)a.d(n,i,function(t){return e[t]}.bind(null,i));return n},a.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return a.d(t,"a",t),t},a.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},a.p="",a(a.s=347)}([function(e,t,a){(function(e){e.exports=function(){"use strict";var t,n;function i(){return t.apply(null,arguments)}function r(e){return e instanceof Array||"[object Array]"===Object.prototype.toString.call(e)}function s(e){return null!=e&&"[object Object]"===Object.prototype.toString.call(e)}function o(e){return void 0===e}function d(e){return"number"===typeof e||"[object Number]"===Object.prototype.toString.call(e)}function l(e){return e instanceof Date||"[object Date]"===Object.prototype.toString.call(e)}function u(e,t){var a,n=[];for(a=0;a<e.length;++a)n.push(t(e[a],a));return n}function _(e,t){return Object.prototype.hasOwnProperty.call(e,t)}function m(e,t){for(var a in t)_(t,a)&&(e[a]=t[a]);return _(t,"toString")&&(e.toString=t.toString),_(t,"valueOf")&&(e.valueOf=t.valueOf),e}function c(e,t,a,n){return Ot(e,t,a,n,!0).utc()}function h(e){return null==e._pf&&(e._pf={empty:!1,unusedTokens:[],unusedInput:[],overflow:-2,charsLeftOver:0,nullInput:!1,invalidMonth:null,invalidFormat:!1,userInvalidated:!1,iso:!1,parsedDateParts:[],meridiem:null,rfc2822:!1,weekdayMismatch:!1}),e._pf}function f(e){if(null==e._isValid){var t=h(e),a=n.call(t.parsedDateParts,(function(e){return null!=e})),i=!isNaN(e._d.getTime())&&t.overflow<0&&!t.empty&&!t.invalidMonth&&!t.invalidWeekday&&!t.weekdayMismatch&&!t.nullInput&&!t.invalidFormat&&!t.userInvalidated&&(!t.meridiem||t.meridiem&&a);if(e._strict&&(i=i&&0===t.charsLeftOver&&0===t.unusedTokens.length&&void 0===t.bigHour),null!=Object.isFrozen&&Object.isFrozen(e))return i;e._isValid=i}return e._isValid}function M(e){var t=c(NaN);return null!=e?m(h(t),e):h(t).userInvalidated=!0,t}n=Array.prototype.some?Array.prototype.some:function(e){for(var t=Object(this),a=t.length>>>0,n=0;n<a;n++)if(n in t&&e.call(this,t[n],n,t))return!0;return!1};var p=i.momentProperties=[];function y(e,t){var a,n,i;if(o(t._isAMomentObject)||(e._isAMomentObject=t._isAMomentObject),o(t._i)||(e._i=t._i),o(t._f)||(e._f=t._f),o(t._l)||(e._l=t._l),o(t._strict)||(e._strict=t._strict),o(t._tzm)||(e._tzm=t._tzm),o(t._isUTC)||(e._isUTC=t._isUTC),o(t._offset)||(e._offset=t._offset),o(t._pf)||(e._pf=h(t)),o(t._locale)||(e._locale=t._locale),p.length>0)for(a=0;a<p.length;a++)o(i=t[n=p[a]])||(e[n]=i);return e}var g=!1;function L(e){y(this,e),this._d=new Date(null!=e._d?e._d.getTime():NaN),this.isValid()||(this._d=new Date(NaN)),!1===g&&(g=!0,i.updateOffset(this),g=!1)}function Y(e){return e instanceof L||null!=e&&null!=e._isAMomentObject}function v(e){return e<0?Math.ceil(e)||0:Math.floor(e)}function k(e){var t=+e,a=0;return 0!==t&&isFinite(t)&&(a=v(t)),a}function b(e,t,a){var n,i=Math.min(e.length,t.length),r=Math.abs(e.length-t.length),s=0;for(n=0;n<i;n++)(a&&e[n]!==t[n]||!a&&k(e[n])!==k(t[n]))&&s++;return s+r}function D(e){!1===i.suppressDeprecationWarnings&&"undefined"!==typeof console&&console.warn&&console.warn("Deprecation warning: "+e)}function w(e,t){var a=!0;return m((function(){if(null!=i.deprecationHandler&&i.deprecationHandler(null,e),a){for(var n,r=[],s=0;s<arguments.length;s++){if(n="","object"===typeof arguments[s]){for(var o in n+="\n["+s+"] ",arguments[0])n+=o+": "+arguments[0][o]+", ";n=n.slice(0,-2)}else n=arguments[s];r.push(n)}D(e+"\nArguments: "+Array.prototype.slice.call(r).join("")+"\n"+(new Error).stack),a=!1}return t.apply(this,arguments)}),t)}var T,x={};function S(e,t){null!=i.deprecationHandler&&i.deprecationHandler(e,t),x[e]||(D(t),x[e]=!0)}function H(e){return e instanceof Function||"[object Function]"===Object.prototype.toString.call(e)}function j(e,t){var a,n=m({},e);for(a in t)_(t,a)&&(s(e[a])&&s(t[a])?(n[a]={},m(n[a],e[a]),m(n[a],t[a])):null!=t[a]?n[a]=t[a]:delete n[a]);for(a in e)_(e,a)&&!_(t,a)&&s(e[a])&&(n[a]=m({},n[a]));return n}function P(e){null!=e&&this.set(e)}i.suppressDeprecationWarnings=!1,i.deprecationHandler=null,T=Object.keys?Object.keys:function(e){var t,a=[];for(t in e)_(e,t)&&a.push(t);return a};var O={};function A(e,t){var a=e.toLowerCase();O[a]=O[a+"s"]=O[t]=e}function F(e){return"string"===typeof e?O[e]||O[e.toLowerCase()]:void 0}function W(e){var t,a,n={};for(a in e)_(e,a)&&(t=F(a))&&(n[t]=e[a]);return n}var C={};function E(e,t){C[e]=t}function I(e,t,a){var n=""+Math.abs(e),i=t-n.length;return(e>=0?a?"+":"":"-")+Math.pow(10,Math.max(0,i)).toString().substr(1)+n}var z=/(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,R=/(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,N={},V={};function B(e,t,a,n){var i=n;"string"===typeof n&&(i=function(){return this[n]()}),e&&(V[e]=i),t&&(V[t[0]]=function(){return I(i.apply(this,arguments),t[1],t[2])}),a&&(V[a]=function(){return this.localeData().ordinal(i.apply(this,arguments),e)})}function J(e,t){return e.isValid()?(t=U(t,e.localeData()),N[t]=N[t]||function(e){var t,a,n,i=e.match(z);for(t=0,a=i.length;t<a;t++)V[i[t]]?i[t]=V[i[t]]:i[t]=(n=i[t]).match(/\[[\s\S]/)?n.replace(/^\[|\]$/g,""):n.replace(/\\/g,"");return function(t){var n,r="";for(n=0;n<a;n++)r+=H(i[n])?i[n].call(t,e):i[n];return r}}(t),N[t](e)):e.localeData().invalidDate()}function U(e,t){var a=5;function n(e){return t.longDateFormat(e)||e}for(R.lastIndex=0;a>=0&&R.test(e);)e=e.replace(R,n),R.lastIndex=0,a-=1;return e}var G=/\d/,q=/\d\d/,K=/\d{3}/,Z=/\d{4}/,$=/[+-]?\d{6}/,Q=/\d\d?/,X=/\d\d\d\d?/,ee=/\d\d\d\d\d\d?/,te=/\d{1,3}/,ae=/\d{1,4}/,ne=/[+-]?\d{1,6}/,ie=/\d+/,re=/[+-]?\d+/,se=/Z|[+-]\d\d:?\d\d/gi,oe=/Z|[+-]\d\d(?::?\d\d)?/gi,de=/[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i,le={};function ue(e,t,a){le[e]=H(t)?t:function(e,n){return e&&a?a:t}}function _e(e,t){return _(le,e)?le[e](t._strict,t._locale):new RegExp(me(e.replace("\\","").replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,(function(e,t,a,n,i){return t||a||n||i}))))}function me(e){return e.replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&")}var ce={};function he(e,t){var a,n=t;for("string"===typeof e&&(e=[e]),d(t)&&(n=function(e,a){a[t]=k(e)}),a=0;a<e.length;a++)ce[e[a]]=n}function fe(e,t){he(e,(function(e,a,n,i){n._w=n._w||{},t(e,n._w,n,i)}))}function Me(e,t,a){null!=t&&_(ce,e)&&ce[e](t,a._a,a,e)}var pe=0,ye=1,ge=2,Le=3,Ye=4,ve=5,ke=6,be=7,De=8;function we(e){return Te(e)?366:365}function Te(e){return e%4===0&&e%100!==0||e%400===0}B("Y",0,0,(function(){var e=this.year();return e<=9999?""+e:"+"+e})),B(0,["YY",2],0,(function(){return this.year()%100})),B(0,["YYYY",4],0,"year"),B(0,["YYYYY",5],0,"year"),B(0,["YYYYYY",6,!0],0,"year"),A("year","y"),E("year",1),ue("Y",re),ue("YY",Q,q),ue("YYYY",ae,Z),ue("YYYYY",ne,$),ue("YYYYYY",ne,$),he(["YYYYY","YYYYYY"],pe),he("YYYY",(function(e,t){t[pe]=2===e.length?i.parseTwoDigitYear(e):k(e)})),he("YY",(function(e,t){t[pe]=i.parseTwoDigitYear(e)})),he("Y",(function(e,t){t[pe]=parseInt(e,10)})),i.parseTwoDigitYear=function(e){return k(e)+(k(e)>68?1900:2e3)};var xe,Se=He("FullYear",!0);function He(e,t){return function(a){return null!=a?(Pe(this,e,a),i.updateOffset(this,t),this):je(this,e)}}function je(e,t){return e.isValid()?e._d["get"+(e._isUTC?"UTC":"")+t]():NaN}function Pe(e,t,a){e.isValid()&&!isNaN(a)&&("FullYear"===t&&Te(e.year())&&1===e.month()&&29===e.date()?e._d["set"+(e._isUTC?"UTC":"")+t](a,e.month(),Oe(a,e.month())):e._d["set"+(e._isUTC?"UTC":"")+t](a))}function Oe(e,t){if(isNaN(e)||isNaN(t))return NaN;var a,n=(t%(a=12)+a)%a;return e+=(t-n)/12,1===n?Te(e)?29:28:31-n%7%2}xe=Array.prototype.indexOf?Array.prototype.indexOf:function(e){var t;for(t=0;t<this.length;++t)if(this[t]===e)return t;return-1},B("M",["MM",2],"Mo",(function(){return this.month()+1})),B("MMM",0,0,(function(e){return this.localeData().monthsShort(this,e)})),B("MMMM",0,0,(function(e){return this.localeData().months(this,e)})),A("month","M"),E("month",8),ue("M",Q),ue("MM",Q,q),ue("MMM",(function(e,t){return t.monthsShortRegex(e)})),ue("MMMM",(function(e,t){return t.monthsRegex(e)})),he(["M","MM"],(function(e,t){t[ye]=k(e)-1})),he(["MMM","MMMM"],(function(e,t,a,n){var i=a._locale.monthsParse(e,n,a._strict);null!=i?t[ye]=i:h(a).invalidMonth=e}));var Ae=/D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/,Fe="January_February_March_April_May_June_July_August_September_October_November_December".split("_"),We="Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_");function Ce(e,t,a){var n,i,r,s=e.toLocaleLowerCase();if(!this._monthsParse)for(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[],n=0;n<12;++n)r=c([2e3,n]),this._shortMonthsParse[n]=this.monthsShort(r,"").toLocaleLowerCase(),this._longMonthsParse[n]=this.months(r,"").toLocaleLowerCase();return a?"MMM"===t?-1!==(i=xe.call(this._shortMonthsParse,s))?i:null:-1!==(i=xe.call(this._longMonthsParse,s))?i:null:"MMM"===t?-1!==(i=xe.call(this._shortMonthsParse,s))?i:-1!==(i=xe.call(this._longMonthsParse,s))?i:null:-1!==(i=xe.call(this._longMonthsParse,s))?i:-1!==(i=xe.call(this._shortMonthsParse,s))?i:null}function Ee(e,t){var a;if(!e.isValid())return e;if("string"===typeof t)if(/^\d+$/.test(t))t=k(t);else if(!d(t=e.localeData().monthsParse(t)))return e;return a=Math.min(e.date(),Oe(e.year(),t)),e._d["set"+(e._isUTC?"UTC":"")+"Month"](t,a),e}function Ie(e){return null!=e?(Ee(this,e),i.updateOffset(this,!0),this):je(this,"Month")}var ze=de,Re=de;function Ne(){function e(e,t){return t.length-e.length}var t,a,n=[],i=[],r=[];for(t=0;t<12;t++)a=c([2e3,t]),n.push(this.monthsShort(a,"")),i.push(this.months(a,"")),r.push(this.months(a,"")),r.push(this.monthsShort(a,""));for(n.sort(e),i.sort(e),r.sort(e),t=0;t<12;t++)n[t]=me(n[t]),i[t]=me(i[t]);for(t=0;t<24;t++)r[t]=me(r[t]);this._monthsRegex=new RegExp("^("+r.join("|")+")","i"),this._monthsShortRegex=this._monthsRegex,this._monthsStrictRegex=new RegExp("^("+i.join("|")+")","i"),this._monthsShortStrictRegex=new RegExp("^("+n.join("|")+")","i")}function Ve(e,t,a,n,i,r,s){var o;return e<100&&e>=0?(o=new Date(e+400,t,a,n,i,r,s),isFinite(o.getFullYear())&&o.setFullYear(e)):o=new Date(e,t,a,n,i,r,s),o}function Be(e){var t;if(e<100&&e>=0){var a=Array.prototype.slice.call(arguments);a[0]=e+400,t=new Date(Date.UTC.apply(null,a)),isFinite(t.getUTCFullYear())&&t.setUTCFullYear(e)}else t=new Date(Date.UTC.apply(null,arguments));return t}function Je(e,t,a){var n=7+t-a;return-(7+Be(e,0,n).getUTCDay()-t)%7+n-1}function Ue(e,t,a,n,i){var r,s,o=1+7*(t-1)+(7+a-n)%7+Je(e,n,i);return o<=0?s=we(r=e-1)+o:o>we(e)?(r=e+1,s=o-we(e)):(r=e,s=o),{year:r,dayOfYear:s}}function Ge(e,t,a){var n,i,r=Je(e.year(),t,a),s=Math.floor((e.dayOfYear()-r-1)/7)+1;return s<1?n=s+qe(i=e.year()-1,t,a):s>qe(e.year(),t,a)?(n=s-qe(e.year(),t,a),i=e.year()+1):(i=e.year(),n=s),{week:n,year:i}}function qe(e,t,a){var n=Je(e,t,a),i=Je(e+1,t,a);return(we(e)-n+i)/7}function Ke(e,t){return e.slice(t,7).concat(e.slice(0,t))}B("w",["ww",2],"wo","week"),B("W",["WW",2],"Wo","isoWeek"),A("week","w"),A("isoWeek","W"),E("week",5),E("isoWeek",5),ue("w",Q),ue("ww",Q,q),ue("W",Q),ue("WW",Q,q),fe(["w","ww","W","WW"],(function(e,t,a,n){t[n.substr(0,1)]=k(e)})),B("d",0,"do","day"),B("dd",0,0,(function(e){return this.localeData().weekdaysMin(this,e)})),B("ddd",0,0,(function(e){return this.localeData().weekdaysShort(this,e)})),B("dddd",0,0,(function(e){return this.localeData().weekdays(this,e)})),B("e",0,0,"weekday"),B("E",0,0,"isoWeekday"),A("day","d"),A("weekday","e"),A("isoWeekday","E"),E("day",11),E("weekday",11),E("isoWeekday",11),ue("d",Q),ue("e",Q),ue("E",Q),ue("dd",(function(e,t){return t.weekdaysMinRegex(e)})),ue("ddd",(function(e,t){return t.weekdaysShortRegex(e)})),ue("dddd",(function(e,t){return t.weekdaysRegex(e)})),fe(["dd","ddd","dddd"],(function(e,t,a,n){var i=a._locale.weekdaysParse(e,n,a._strict);null!=i?t.d=i:h(a).invalidWeekday=e})),fe(["d","e","E"],(function(e,t,a,n){t[n]=k(e)}));var Ze="Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),$e="Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),Qe="Su_Mo_Tu_We_Th_Fr_Sa".split("_");function Xe(e,t,a){var n,i,r,s=e.toLocaleLowerCase();if(!this._weekdaysParse)for(this._weekdaysParse=[],this._shortWeekdaysParse=[],this._minWeekdaysParse=[],n=0;n<7;++n)r=c([2e3,1]).day(n),this._minWeekdaysParse[n]=this.weekdaysMin(r,"").toLocaleLowerCase(),this._shortWeekdaysParse[n]=this.weekdaysShort(r,"").toLocaleLowerCase(),this._weekdaysParse[n]=this.weekdays(r,"").toLocaleLowerCase();return a?"dddd"===t?-1!==(i=xe.call(this._weekdaysParse,s))?i:null:"ddd"===t?-1!==(i=xe.call(this._shortWeekdaysParse,s))?i:null:-1!==(i=xe.call(this._minWeekdaysParse,s))?i:null:"dddd"===t?-1!==(i=xe.call(this._weekdaysParse,s))?i:-1!==(i=xe.call(this._shortWeekdaysParse,s))?i:-1!==(i=xe.call(this._minWeekdaysParse,s))?i:null:"ddd"===t?-1!==(i=xe.call(this._shortWeekdaysParse,s))?i:-1!==(i=xe.call(this._weekdaysParse,s))?i:-1!==(i=xe.call(this._minWeekdaysParse,s))?i:null:-1!==(i=xe.call(this._minWeekdaysParse,s))?i:-1!==(i=xe.call(this._weekdaysParse,s))?i:-1!==(i=xe.call(this._shortWeekdaysParse,s))?i:null}var et=de,tt=de,at=de;function nt(){function e(e,t){return t.length-e.length}var t,a,n,i,r,s=[],o=[],d=[],l=[];for(t=0;t<7;t++)a=c([2e3,1]).day(t),n=this.weekdaysMin(a,""),i=this.weekdaysShort(a,""),r=this.weekdays(a,""),s.push(n),o.push(i),d.push(r),l.push(n),l.push(i),l.push(r);for(s.sort(e),o.sort(e),d.sort(e),l.sort(e),t=0;t<7;t++)o[t]=me(o[t]),d[t]=me(d[t]),l[t]=me(l[t]);this._weekdaysRegex=new RegExp("^("+l.join("|")+")","i"),this._weekdaysShortRegex=this._weekdaysRegex,this._weekdaysMinRegex=this._weekdaysRegex,this._weekdaysStrictRegex=new RegExp("^("+d.join("|")+")","i"),this._weekdaysShortStrictRegex=new RegExp("^("+o.join("|")+")","i"),this._weekdaysMinStrictRegex=new RegExp("^("+s.join("|")+")","i")}function it(){return this.hours()%12||12}function rt(e,t){B(e,0,0,(function(){return this.localeData().meridiem(this.hours(),this.minutes(),t)}))}function st(e,t){return t._meridiemParse}B("H",["HH",2],0,"hour"),B("h",["hh",2],0,it),B("k",["kk",2],0,(function(){return this.hours()||24})),B("hmm",0,0,(function(){return""+it.apply(this)+I(this.minutes(),2)})),B("hmmss",0,0,(function(){return""+it.apply(this)+I(this.minutes(),2)+I(this.seconds(),2)})),B("Hmm",0,0,(function(){return""+this.hours()+I(this.minutes(),2)})),B("Hmmss",0,0,(function(){return""+this.hours()+I(this.minutes(),2)+I(this.seconds(),2)})),rt("a",!0),rt("A",!1),A("hour","h"),E("hour",13),ue("a",st),ue("A",st),ue("H",Q),ue("h",Q),ue("k",Q),ue("HH",Q,q),ue("hh",Q,q),ue("kk",Q,q),ue("hmm",X),ue("hmmss",ee),ue("Hmm",X),ue("Hmmss",ee),he(["H","HH"],Le),he(["k","kk"],(function(e,t,a){var n=k(e);t[Le]=24===n?0:n})),he(["a","A"],(function(e,t,a){a._isPm=a._locale.isPM(e),a._meridiem=e})),he(["h","hh"],(function(e,t,a){t[Le]=k(e),h(a).bigHour=!0})),he("hmm",(function(e,t,a){var n=e.length-2;t[Le]=k(e.substr(0,n)),t[Ye]=k(e.substr(n)),h(a).bigHour=!0})),he("hmmss",(function(e,t,a){var n=e.length-4,i=e.length-2;t[Le]=k(e.substr(0,n)),t[Ye]=k(e.substr(n,2)),t[ve]=k(e.substr(i)),h(a).bigHour=!0})),he("Hmm",(function(e,t,a){var n=e.length-2;t[Le]=k(e.substr(0,n)),t[Ye]=k(e.substr(n))})),he("Hmmss",(function(e,t,a){var n=e.length-4,i=e.length-2;t[Le]=k(e.substr(0,n)),t[Ye]=k(e.substr(n,2)),t[ve]=k(e.substr(i))}));var ot,dt=He("Hours",!0),lt={calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},longDateFormat:{LTS:"h:mm:ss A",LT:"h:mm A",L:"MM/DD/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"},invalidDate:"Invalid date",ordinal:"%d",dayOfMonthOrdinalParse:/\d{1,2}/,relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},months:Fe,monthsShort:We,week:{dow:0,doy:6},weekdays:Ze,weekdaysMin:Qe,weekdaysShort:$e,meridiemParse:/[ap]\.?m?\.?/i},ut={},_t={};function mt(e){return e?e.toLowerCase().replace("_","-"):e}function ct(t){var n=null;if(!ut[t]&&"undefined"!==typeof e&&e&&e.exports)try{n=ot._abbr,a(349)("./"+t),ht(n)}catch(e){}return ut[t]}function ht(e,t){var a;return e&&((a=o(t)?Mt(e):ft(e,t))?ot=a:"undefined"!==typeof console&&console.warn&&console.warn("Locale "+e+" not found. Did you forget to load it?")),ot._abbr}function ft(e,t){if(null!==t){var a,n=lt;if(t.abbr=e,null!=ut[e])S("defineLocaleOverride","use moment.updateLocale(localeName, config) to change an existing locale. moment.defineLocale(localeName, config) should only be used for creating a new locale See http://momentjs.com/guides/#/warnings/define-locale/ for more info."),n=ut[e]._config;else if(null!=t.parentLocale)if(null!=ut[t.parentLocale])n=ut[t.parentLocale]._config;else{if(null==(a=ct(t.parentLocale)))return _t[t.parentLocale]||(_t[t.parentLocale]=[]),_t[t.parentLocale].push({name:e,config:t}),null;n=a._config}return ut[e]=new P(j(n,t)),_t[e]&&_t[e].forEach((function(e){ft(e.name,e.config)})),ht(e),ut[e]}return delete ut[e],null}function Mt(e){var t;if(e&&e._locale&&e._locale._abbr&&(e=e._locale._abbr),!e)return ot;if(!r(e)){if(t=ct(e))return t;e=[e]}return function(e){for(var t,a,n,i,r=0;r<e.length;){for(t=(i=mt(e[r]).split("-")).length,a=(a=mt(e[r+1]))?a.split("-"):null;t>0;){if(n=ct(i.slice(0,t).join("-")))return n;if(a&&a.length>=t&&b(i,a,!0)>=t-1)break;t--}r++}return ot}(e)}function pt(e){var t,a=e._a;return a&&-2===h(e).overflow&&(t=a[ye]<0||a[ye]>11?ye:a[ge]<1||a[ge]>Oe(a[pe],a[ye])?ge:a[Le]<0||a[Le]>24||24===a[Le]&&(0!==a[Ye]||0!==a[ve]||0!==a[ke])?Le:a[Ye]<0||a[Ye]>59?Ye:a[ve]<0||a[ve]>59?ve:a[ke]<0||a[ke]>999?ke:-1,h(e)._overflowDayOfYear&&(t<pe||t>ge)&&(t=ge),h(e)._overflowWeeks&&-1===t&&(t=be),h(e)._overflowWeekday&&-1===t&&(t=De),h(e).overflow=t),e}function yt(e,t,a){return null!=e?e:null!=t?t:a}function gt(e){var t,a,n,r,s,o=[];if(!e._d){for(n=function(e){var t=new Date(i.now());return e._useUTC?[t.getUTCFullYear(),t.getUTCMonth(),t.getUTCDate()]:[t.getFullYear(),t.getMonth(),t.getDate()]}(e),e._w&&null==e._a[ge]&&null==e._a[ye]&&function(e){var t,a,n,i,r,s,o,d;if(null!=(t=e._w).GG||null!=t.W||null!=t.E)r=1,s=4,a=yt(t.GG,e._a[pe],Ge(At(),1,4).year),n=yt(t.W,1),((i=yt(t.E,1))<1||i>7)&&(d=!0);else{r=e._locale._week.dow,s=e._locale._week.doy;var l=Ge(At(),r,s);a=yt(t.gg,e._a[pe],l.year),n=yt(t.w,l.week),null!=t.d?((i=t.d)<0||i>6)&&(d=!0):null!=t.e?(i=t.e+r,(t.e<0||t.e>6)&&(d=!0)):i=r}n<1||n>qe(a,r,s)?h(e)._overflowWeeks=!0:null!=d?h(e)._overflowWeekday=!0:(o=Ue(a,n,i,r,s),e._a[pe]=o.year,e._dayOfYear=o.dayOfYear)}(e),null!=e._dayOfYear&&(s=yt(e._a[pe],n[pe]),(e._dayOfYear>we(s)||0===e._dayOfYear)&&(h(e)._overflowDayOfYear=!0),a=Be(s,0,e._dayOfYear),e._a[ye]=a.getUTCMonth(),e._a[ge]=a.getUTCDate()),t=0;t<3&&null==e._a[t];++t)e._a[t]=o[t]=n[t];for(;t<7;t++)e._a[t]=o[t]=null==e._a[t]?2===t?1:0:e._a[t];24===e._a[Le]&&0===e._a[Ye]&&0===e._a[ve]&&0===e._a[ke]&&(e._nextDay=!0,e._a[Le]=0),e._d=(e._useUTC?Be:Ve).apply(null,o),r=e._useUTC?e._d.getUTCDay():e._d.getDay(),null!=e._tzm&&e._d.setUTCMinutes(e._d.getUTCMinutes()-e._tzm),e._nextDay&&(e._a[Le]=24),e._w&&"undefined"!==typeof e._w.d&&e._w.d!==r&&(h(e).weekdayMismatch=!0)}}var Lt=/^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,Yt=/^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,vt=/Z|[+-]\d\d(?::?\d\d)?/,kt=[["YYYYYY-MM-DD",/[+-]\d{6}-\d\d-\d\d/],["YYYY-MM-DD",/\d{4}-\d\d-\d\d/],["GGGG-[W]WW-E",/\d{4}-W\d\d-\d/],["GGGG-[W]WW",/\d{4}-W\d\d/,!1],["YYYY-DDD",/\d{4}-\d{3}/],["YYYY-MM",/\d{4}-\d\d/,!1],["YYYYYYMMDD",/[+-]\d{10}/],["YYYYMMDD",/\d{8}/],["GGGG[W]WWE",/\d{4}W\d{3}/],["GGGG[W]WW",/\d{4}W\d{2}/,!1],["YYYYDDD",/\d{7}/]],bt=[["HH:mm:ss.SSSS",/\d\d:\d\d:\d\d\.\d+/],["HH:mm:ss,SSSS",/\d\d:\d\d:\d\d,\d+/],["HH:mm:ss",/\d\d:\d\d:\d\d/],["HH:mm",/\d\d:\d\d/],["HHmmss.SSSS",/\d\d\d\d\d\d\.\d+/],["HHmmss,SSSS",/\d\d\d\d\d\d,\d+/],["HHmmss",/\d\d\d\d\d\d/],["HHmm",/\d\d\d\d/],["HH",/\d\d/]],Dt=/^\/?Date\((\-?\d+)/i;function wt(e){var t,a,n,i,r,s,o=e._i,d=Lt.exec(o)||Yt.exec(o);if(d){for(h(e).iso=!0,t=0,a=kt.length;t<a;t++)if(kt[t][1].exec(d[1])){i=kt[t][0],n=!1!==kt[t][2];break}if(null==i)return void(e._isValid=!1);if(d[3]){for(t=0,a=bt.length;t<a;t++)if(bt[t][1].exec(d[3])){r=(d[2]||" ")+bt[t][0];break}if(null==r)return void(e._isValid=!1)}if(!n&&null!=r)return void(e._isValid=!1);if(d[4]){if(!vt.exec(d[4]))return void(e._isValid=!1);s="Z"}e._f=i+(r||"")+(s||""),jt(e)}else e._isValid=!1}var Tt=/^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/;function xt(e){var t=parseInt(e,10);return t<=49?2e3+t:t<=999?1900+t:t}var St={UT:0,GMT:0,EDT:-240,EST:-300,CDT:-300,CST:-360,MDT:-360,MST:-420,PDT:-420,PST:-480};function Ht(e){var t=Tt.exec(e._i.replace(/\([^)]*\)|[\n\t]/g," ").replace(/(\s\s+)/g," ").replace(/^\s\s*/,"").replace(/\s\s*$/,""));if(t){var a=function(e,t,a,n,i,r){var s=[xt(e),We.indexOf(t),parseInt(a,10),parseInt(n,10),parseInt(i,10)];return r&&s.push(parseInt(r,10)),s}(t[4],t[3],t[2],t[5],t[6],t[7]);if(!function(e,t,a){return!e||$e.indexOf(e)===new Date(t[0],t[1],t[2]).getDay()||(h(a).weekdayMismatch=!0,a._isValid=!1,!1)}(t[1],a,e))return;e._a=a,e._tzm=function(e,t,a){if(e)return St[e];if(t)return 0;var n=parseInt(a,10),i=n%100;return(n-i)/100*60+i}(t[8],t[9],t[10]),e._d=Be.apply(null,e._a),e._d.setUTCMinutes(e._d.getUTCMinutes()-e._tzm),h(e).rfc2822=!0}else e._isValid=!1}function jt(e){if(e._f!==i.ISO_8601)if(e._f!==i.RFC_2822){e._a=[],h(e).empty=!0;var t,a,n,r,s,o=""+e._i,d=o.length,l=0;for(n=U(e._f,e._locale).match(z)||[],t=0;t<n.length;t++)r=n[t],(a=(o.match(_e(r,e))||[])[0])&&((s=o.substr(0,o.indexOf(a))).length>0&&h(e).unusedInput.push(s),o=o.slice(o.indexOf(a)+a.length),l+=a.length),V[r]?(a?h(e).empty=!1:h(e).unusedTokens.push(r),Me(r,a,e)):e._strict&&!a&&h(e).unusedTokens.push(r);h(e).charsLeftOver=d-l,o.length>0&&h(e).unusedInput.push(o),e._a[Le]<=12&&!0===h(e).bigHour&&e._a[Le]>0&&(h(e).bigHour=void 0),h(e).parsedDateParts=e._a.slice(0),h(e).meridiem=e._meridiem,e._a[Le]=function(e,t,a){var n;return null==a?t:null!=e.meridiemHour?e.meridiemHour(t,a):null!=e.isPM?((n=e.isPM(a))&&t<12&&(t+=12),n||12!==t||(t=0),t):t}(e._locale,e._a[Le],e._meridiem),gt(e),pt(e)}else Ht(e);else wt(e)}function Pt(e){var t=e._i,a=e._f;return e._locale=e._locale||Mt(e._l),null===t||void 0===a&&""===t?M({nullInput:!0}):("string"===typeof t&&(e._i=t=e._locale.preparse(t)),Y(t)?new L(pt(t)):(l(t)?e._d=t:r(a)?function(e){var t,a,n,i,r;if(0===e._f.length)return h(e).invalidFormat=!0,void(e._d=new Date(NaN));for(i=0;i<e._f.length;i++)r=0,t=y({},e),null!=e._useUTC&&(t._useUTC=e._useUTC),t._f=e._f[i],jt(t),f(t)&&(r+=h(t).charsLeftOver,r+=10*h(t).unusedTokens.length,h(t).score=r,(null==n||r<n)&&(n=r,a=t));m(e,a||t)}(e):a?jt(e):function(e){var t=e._i;o(t)?e._d=new Date(i.now()):l(t)?e._d=new Date(t.valueOf()):"string"===typeof t?function(e){var t=Dt.exec(e._i);null===t?(wt(e),!1===e._isValid&&(delete e._isValid,Ht(e),!1===e._isValid&&(delete e._isValid,i.createFromInputFallback(e)))):e._d=new Date(+t[1])}(e):r(t)?(e._a=u(t.slice(0),(function(e){return parseInt(e,10)})),gt(e)):s(t)?function(e){if(!e._d){var t=W(e._i);e._a=u([t.year,t.month,t.day||t.date,t.hour,t.minute,t.second,t.millisecond],(function(e){return e&&parseInt(e,10)})),gt(e)}}(e):d(t)?e._d=new Date(t):i.createFromInputFallback(e)}(e),f(e)||(e._d=null),e))}function Ot(e,t,a,n,i){var o={};return!0!==a&&!1!==a||(n=a,a=void 0),(s(e)&&function(e){if(Object.getOwnPropertyNames)return 0===Object.getOwnPropertyNames(e).length;var t;for(t in e)if(e.hasOwnProperty(t))return!1;return!0}(e)||r(e)&&0===e.length)&&(e=void 0),o._isAMomentObject=!0,o._useUTC=o._isUTC=i,o._l=a,o._i=e,o._f=t,o._strict=n,function(e){var t=new L(pt(Pt(e)));return t._nextDay&&(t.add(1,"d"),t._nextDay=void 0),t}(o)}function At(e,t,a,n){return Ot(e,t,a,n,!1)}i.createFromInputFallback=w("value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are discouraged and will be removed in an upcoming major release. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.",(function(e){e._d=new Date(e._i+(e._useUTC?" UTC":""))})),i.ISO_8601=function(){},i.RFC_2822=function(){};var Ft=w("moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/",(function(){var e=At.apply(null,arguments);return this.isValid()&&e.isValid()?e<this?this:e:M()})),Wt=w("moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/",(function(){var e=At.apply(null,arguments);return this.isValid()&&e.isValid()?e>this?this:e:M()}));function Ct(e,t){var a,n;if(1===t.length&&r(t[0])&&(t=t[0]),!t.length)return At();for(a=t[0],n=1;n<t.length;++n)t[n].isValid()&&!t[n][e](a)||(a=t[n]);return a}var Et=["year","quarter","month","week","day","hour","minute","second","millisecond"];function It(e){var t=W(e),a=t.year||0,n=t.quarter||0,i=t.month||0,r=t.week||t.isoWeek||0,s=t.day||0,o=t.hour||0,d=t.minute||0,l=t.second||0,u=t.millisecond||0;this._isValid=function(e){for(var t in e)if(-1===xe.call(Et,t)||null!=e[t]&&isNaN(e[t]))return!1;for(var a=!1,n=0;n<Et.length;++n)if(e[Et[n]]){if(a)return!1;parseFloat(e[Et[n]])!==k(e[Et[n]])&&(a=!0)}return!0}(t),this._milliseconds=+u+1e3*l+6e4*d+1e3*o*60*60,this._days=+s+7*r,this._months=+i+3*n+12*a,this._data={},this._locale=Mt(),this._bubble()}function zt(e){return e instanceof It}function Rt(e){return e<0?-1*Math.round(-1*e):Math.round(e)}function Nt(e,t){B(e,0,0,(function(){var e=this.utcOffset(),a="+";return e<0&&(e=-e,a="-"),a+I(~~(e/60),2)+t+I(~~e%60,2)}))}Nt("Z",":"),Nt("ZZ",""),ue("Z",oe),ue("ZZ",oe),he(["Z","ZZ"],(function(e,t,a){a._useUTC=!0,a._tzm=Bt(oe,e)}));var Vt=/([\+\-]|\d\d)/gi;function Bt(e,t){var a=(t||"").match(e);if(null===a)return null;var n=((a[a.length-1]||[])+"").match(Vt)||["-",0,0],i=60*n[1]+k(n[2]);return 0===i?0:"+"===n[0]?i:-i}function Jt(e,t){var a,n;return t._isUTC?(a=t.clone(),n=(Y(e)||l(e)?e.valueOf():At(e).valueOf())-a.valueOf(),a._d.setTime(a._d.valueOf()+n),i.updateOffset(a,!1),a):At(e).local()}function Ut(e){return 15*-Math.round(e._d.getTimezoneOffset()/15)}function Gt(){return!!this.isValid()&&this._isUTC&&0===this._offset}i.updateOffset=function(){};var qt=/^(\-|\+)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)(\.\d*)?)?$/,Kt=/^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;function Zt(e,t){var a,n,i,r=e,s=null;return zt(e)?r={ms:e._milliseconds,d:e._days,M:e._months}:d(e)?(r={},t?r[t]=e:r.milliseconds=e):(s=qt.exec(e))?(a="-"===s[1]?-1:1,r={y:0,d:k(s[ge])*a,h:k(s[Le])*a,m:k(s[Ye])*a,s:k(s[ve])*a,ms:k(Rt(1e3*s[ke]))*a}):(s=Kt.exec(e))?(a="-"===s[1]?-1:1,r={y:$t(s[2],a),M:$t(s[3],a),w:$t(s[4],a),d:$t(s[5],a),h:$t(s[6],a),m:$t(s[7],a),s:$t(s[8],a)}):null==r?r={}:"object"===typeof r&&("from"in r||"to"in r)&&(i=function(e,t){var a;return e.isValid()&&t.isValid()?(t=Jt(t,e),e.isBefore(t)?a=Qt(e,t):((a=Qt(t,e)).milliseconds=-a.milliseconds,a.months=-a.months),a):{milliseconds:0,months:0}}(At(r.from),At(r.to)),(r={}).ms=i.milliseconds,r.M=i.months),n=new It(r),zt(e)&&_(e,"_locale")&&(n._locale=e._locale),n}function $t(e,t){var a=e&&parseFloat(e.replace(",","."));return(isNaN(a)?0:a)*t}function Qt(e,t){var a={};return a.months=t.month()-e.month()+12*(t.year()-e.year()),e.clone().add(a.months,"M").isAfter(t)&&--a.months,a.milliseconds=+t-+e.clone().add(a.months,"M"),a}function Xt(e,t){return function(a,n){var i;return null===n||isNaN(+n)||(S(t,"moment()."+t+"(period, number) is deprecated. Please use moment()."+t+"(number, period). See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info."),i=a,a=n,n=i),ea(this,Zt(a="string"===typeof a?+a:a,n),e),this}}function ea(e,t,a,n){var r=t._milliseconds,s=Rt(t._days),o=Rt(t._months);e.isValid()&&(n=null==n||n,o&&Ee(e,je(e,"Month")+o*a),s&&Pe(e,"Date",je(e,"Date")+s*a),r&&e._d.setTime(e._d.valueOf()+r*a),n&&i.updateOffset(e,s||o))}Zt.fn=It.prototype,Zt.invalid=function(){return Zt(NaN)};var ta=Xt(1,"add"),aa=Xt(-1,"subtract");function na(e,t){var a=12*(t.year()-e.year())+(t.month()-e.month()),n=e.clone().add(a,"months");return-(a+(t-n<0?(t-n)/(n-e.clone().add(a-1,"months")):(t-n)/(e.clone().add(a+1,"months")-n)))||0}function ia(e){var t;return void 0===e?this._locale._abbr:(null!=(t=Mt(e))&&(this._locale=t),this)}i.defaultFormat="YYYY-MM-DDTHH:mm:ssZ",i.defaultFormatUtc="YYYY-MM-DDTHH:mm:ss[Z]";var ra=w("moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.",(function(e){return void 0===e?this.localeData():this.locale(e)}));function sa(){return this._locale}var oa=1e3,da=60*oa,la=60*da,ua=3506328*la;function _a(e,t){return(e%t+t)%t}function ma(e,t,a){return e<100&&e>=0?new Date(e+400,t,a)-ua:new Date(e,t,a).valueOf()}function ca(e,t,a){return e<100&&e>=0?Date.UTC(e+400,t,a)-ua:Date.UTC(e,t,a)}function ha(e,t){B(0,[e,e.length],0,t)}function fa(e,t,a,n,i){var r;return null==e?Ge(this,n,i).year:(t>(r=qe(e,n,i))&&(t=r),Ma.call(this,e,t,a,n,i))}function Ma(e,t,a,n,i){var r=Ue(e,t,a,n,i),s=Be(r.year,0,r.dayOfYear);return this.year(s.getUTCFullYear()),this.month(s.getUTCMonth()),this.date(s.getUTCDate()),this}B(0,["gg",2],0,(function(){return this.weekYear()%100})),B(0,["GG",2],0,(function(){return this.isoWeekYear()%100})),ha("gggg","weekYear"),ha("ggggg","weekYear"),ha("GGGG","isoWeekYear"),ha("GGGGG","isoWeekYear"),A("weekYear","gg"),A("isoWeekYear","GG"),E("weekYear",1),E("isoWeekYear",1),ue("G",re),ue("g",re),ue("GG",Q,q),ue("gg",Q,q),ue("GGGG",ae,Z),ue("gggg",ae,Z),ue("GGGGG",ne,$),ue("ggggg",ne,$),fe(["gggg","ggggg","GGGG","GGGGG"],(function(e,t,a,n){t[n.substr(0,2)]=k(e)})),fe(["gg","GG"],(function(e,t,a,n){t[n]=i.parseTwoDigitYear(e)})),B("Q",0,"Qo","quarter"),A("quarter","Q"),E("quarter",7),ue("Q",G),he("Q",(function(e,t){t[ye]=3*(k(e)-1)})),B("D",["DD",2],"Do","date"),A("date","D"),E("date",9),ue("D",Q),ue("DD",Q,q),ue("Do",(function(e,t){return e?t._dayOfMonthOrdinalParse||t._ordinalParse:t._dayOfMonthOrdinalParseLenient})),he(["D","DD"],ge),he("Do",(function(e,t){t[ge]=k(e.match(Q)[0])}));var pa=He("Date",!0);B("DDD",["DDDD",3],"DDDo","dayOfYear"),A("dayOfYear","DDD"),E("dayOfYear",4),ue("DDD",te),ue("DDDD",K),he(["DDD","DDDD"],(function(e,t,a){a._dayOfYear=k(e)})),B("m",["mm",2],0,"minute"),A("minute","m"),E("minute",14),ue("m",Q),ue("mm",Q,q),he(["m","mm"],Ye);var ya=He("Minutes",!1);B("s",["ss",2],0,"second"),A("second","s"),E("second",15),ue("s",Q),ue("ss",Q,q),he(["s","ss"],ve);var ga,La=He("Seconds",!1);for(B("S",0,0,(function(){return~~(this.millisecond()/100)})),B(0,["SS",2],0,(function(){return~~(this.millisecond()/10)})),B(0,["SSS",3],0,"millisecond"),B(0,["SSSS",4],0,(function(){return 10*this.millisecond()})),B(0,["SSSSS",5],0,(function(){return 100*this.millisecond()})),B(0,["SSSSSS",6],0,(function(){return 1e3*this.millisecond()})),B(0,["SSSSSSS",7],0,(function(){return 1e4*this.millisecond()})),B(0,["SSSSSSSS",8],0,(function(){return 1e5*this.millisecond()})),B(0,["SSSSSSSSS",9],0,(function(){return 1e6*this.millisecond()})),A("millisecond","ms"),E("millisecond",16),ue("S",te,G),ue("SS",te,q),ue("SSS",te,K),ga="SSSS";ga.length<=9;ga+="S")ue(ga,ie);function Ya(e,t){t[ke]=k(1e3*("0."+e))}for(ga="S";ga.length<=9;ga+="S")he(ga,Ya);var va=He("Milliseconds",!1);B("z",0,0,"zoneAbbr"),B("zz",0,0,"zoneName");var ka=L.prototype;function ba(e){return e}ka.add=ta,ka.calendar=function(e,t){var a=e||At(),n=Jt(a,this).startOf("day"),r=i.calendarFormat(this,n)||"sameElse",s=t&&(H(t[r])?t[r].call(this,a):t[r]);return this.format(s||this.localeData().calendar(r,this,At(a)))},ka.clone=function(){return new L(this)},ka.diff=function(e,t,a){var n,i,r;if(!this.isValid())return NaN;if(!(n=Jt(e,this)).isValid())return NaN;switch(i=6e4*(n.utcOffset()-this.utcOffset()),t=F(t)){case"year":r=na(this,n)/12;break;case"month":r=na(this,n);break;case"quarter":r=na(this,n)/3;break;case"second":r=(this-n)/1e3;break;case"minute":r=(this-n)/6e4;break;case"hour":r=(this-n)/36e5;break;case"day":r=(this-n-i)/864e5;break;case"week":r=(this-n-i)/6048e5;break;default:r=this-n}return a?r:v(r)},ka.endOf=function(e){var t;if(void 0===(e=F(e))||"millisecond"===e||!this.isValid())return this;var a=this._isUTC?ca:ma;switch(e){case"year":t=a(this.year()+1,0,1)-1;break;case"quarter":t=a(this.year(),this.month()-this.month()%3+3,1)-1;break;case"month":t=a(this.year(),this.month()+1,1)-1;break;case"week":t=a(this.year(),this.month(),this.date()-this.weekday()+7)-1;break;case"isoWeek":t=a(this.year(),this.month(),this.date()-(this.isoWeekday()-1)+7)-1;break;case"day":case"date":t=a(this.year(),this.month(),this.date()+1)-1;break;case"hour":t=this._d.valueOf(),t+=la-_a(t+(this._isUTC?0:this.utcOffset()*da),la)-1;break;case"minute":t=this._d.valueOf(),t+=da-_a(t,da)-1;break;case"second":t=this._d.valueOf(),t+=oa-_a(t,oa)-1}return this._d.setTime(t),i.updateOffset(this,!0),this},ka.format=function(e){e||(e=this.isUtc()?i.defaultFormatUtc:i.defaultFormat);var t=J(this,e);return this.localeData().postformat(t)},ka.from=function(e,t){return this.isValid()&&(Y(e)&&e.isValid()||At(e).isValid())?Zt({to:this,from:e}).locale(this.locale()).humanize(!t):this.localeData().invalidDate()},ka.fromNow=function(e){return this.from(At(),e)},ka.to=function(e,t){return this.isValid()&&(Y(e)&&e.isValid()||At(e).isValid())?Zt({from:this,to:e}).locale(this.locale()).humanize(!t):this.localeData().invalidDate()},ka.toNow=function(e){return this.to(At(),e)},ka.get=function(e){return H(this[e=F(e)])?this[e]():this},ka.invalidAt=function(){return h(this).overflow},ka.isAfter=function(e,t){var a=Y(e)?e:At(e);return!(!this.isValid()||!a.isValid())&&("millisecond"===(t=F(t)||"millisecond")?this.valueOf()>a.valueOf():a.valueOf()<this.clone().startOf(t).valueOf())},ka.isBefore=function(e,t){var a=Y(e)?e:At(e);return!(!this.isValid()||!a.isValid())&&("millisecond"===(t=F(t)||"millisecond")?this.valueOf()<a.valueOf():this.clone().endOf(t).valueOf()<a.valueOf())},ka.isBetween=function(e,t,a,n){var i=Y(e)?e:At(e),r=Y(t)?t:At(t);return!!(this.isValid()&&i.isValid()&&r.isValid())&&("("===(n=n||"()")[0]?this.isAfter(i,a):!this.isBefore(i,a))&&(")"===n[1]?this.isBefore(r,a):!this.isAfter(r,a))},ka.isSame=function(e,t){var a,n=Y(e)?e:At(e);return!(!this.isValid()||!n.isValid())&&("millisecond"===(t=F(t)||"millisecond")?this.valueOf()===n.valueOf():(a=n.valueOf(),this.clone().startOf(t).valueOf()<=a&&a<=this.clone().endOf(t).valueOf()))},ka.isSameOrAfter=function(e,t){return this.isSame(e,t)||this.isAfter(e,t)},ka.isSameOrBefore=function(e,t){return this.isSame(e,t)||this.isBefore(e,t)},ka.isValid=function(){return f(this)},ka.lang=ra,ka.locale=ia,ka.localeData=sa,ka.max=Wt,ka.min=Ft,ka.parsingFlags=function(){return m({},h(this))},ka.set=function(e,t){if("object"===typeof e)for(var a=function(e){var t=[];for(var a in e)t.push({unit:a,priority:C[a]});return t.sort((function(e,t){return e.priority-t.priority})),t}(e=W(e)),n=0;n<a.length;n++)this[a[n].unit](e[a[n].unit]);else if(H(this[e=F(e)]))return this[e](t);return this},ka.startOf=function(e){var t;if(void 0===(e=F(e))||"millisecond"===e||!this.isValid())return this;var a=this._isUTC?ca:ma;switch(e){case"year":t=a(this.year(),0,1);break;case"quarter":t=a(this.year(),this.month()-this.month()%3,1);break;case"month":t=a(this.year(),this.month(),1);break;case"week":t=a(this.year(),this.month(),this.date()-this.weekday());break;case"isoWeek":t=a(this.year(),this.month(),this.date()-(this.isoWeekday()-1));break;case"day":case"date":t=a(this.year(),this.month(),this.date());break;case"hour":t=this._d.valueOf(),t-=_a(t+(this._isUTC?0:this.utcOffset()*da),la);break;case"minute":t=this._d.valueOf(),t-=_a(t,da);break;case"second":t=this._d.valueOf(),t-=_a(t,oa)}return this._d.setTime(t),i.updateOffset(this,!0),this},ka.subtract=aa,ka.toArray=function(){var e=this;return[e.year(),e.month(),e.date(),e.hour(),e.minute(),e.second(),e.millisecond()]},ka.toObject=function(){var e=this;return{years:e.year(),months:e.month(),date:e.date(),hours:e.hours(),minutes:e.minutes(),seconds:e.seconds(),milliseconds:e.milliseconds()}},ka.toDate=function(){return new Date(this.valueOf())},ka.toISOString=function(e){if(!this.isValid())return null;var t=!0!==e,a=t?this.clone().utc():this;return a.year()<0||a.year()>9999?J(a,t?"YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]":"YYYYYY-MM-DD[T]HH:mm:ss.SSSZ"):H(Date.prototype.toISOString)?t?this.toDate().toISOString():new Date(this.valueOf()+60*this.utcOffset()*1e3).toISOString().replace("Z",J(a,"Z")):J(a,t?"YYYY-MM-DD[T]HH:mm:ss.SSS[Z]":"YYYY-MM-DD[T]HH:mm:ss.SSSZ")},ka.inspect=function(){if(!this.isValid())return"moment.invalid(/* "+this._i+" */)";var e="moment",t="";this.isLocal()||(e=0===this.utcOffset()?"moment.utc":"moment.parseZone",t="Z");var a="["+e+'("]',n=0<=this.year()&&this.year()<=9999?"YYYY":"YYYYYY",i=t+'[")]';return this.format(a+n+"-MM-DD[T]HH:mm:ss.SSS"+i)},ka.toJSON=function(){return this.isValid()?this.toISOString():null},ka.toString=function(){return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ")},ka.unix=function(){return Math.floor(this.valueOf()/1e3)},ka.valueOf=function(){return this._d.valueOf()-6e4*(this._offset||0)},ka.creationData=function(){return{input:this._i,format:this._f,locale:this._locale,isUTC:this._isUTC,strict:this._strict}},ka.year=Se,ka.isLeapYear=function(){return Te(this.year())},ka.weekYear=function(e){return fa.call(this,e,this.week(),this.weekday(),this.localeData()._week.dow,this.localeData()._week.doy)},ka.isoWeekYear=function(e){return fa.call(this,e,this.isoWeek(),this.isoWeekday(),1,4)},ka.quarter=ka.quarters=function(e){return null==e?Math.ceil((this.month()+1)/3):this.month(3*(e-1)+this.month()%3)},ka.month=Ie,ka.daysInMonth=function(){return Oe(this.year(),this.month())},ka.week=ka.weeks=function(e){var t=this.localeData().week(this);return null==e?t:this.add(7*(e-t),"d")},ka.isoWeek=ka.isoWeeks=function(e){var t=Ge(this,1,4).week;return null==e?t:this.add(7*(e-t),"d")},ka.weeksInYear=function(){var e=this.localeData()._week;return qe(this.year(),e.dow,e.doy)},ka.isoWeeksInYear=function(){return qe(this.year(),1,4)},ka.date=pa,ka.day=ka.days=function(e){if(!this.isValid())return null!=e?this:NaN;var t=this._isUTC?this._d.getUTCDay():this._d.getDay();return null!=e?(e=function(e,t){return"string"!==typeof e?e:isNaN(e)?"number"===typeof(e=t.weekdaysParse(e))?e:null:parseInt(e,10)}(e,this.localeData()),this.add(e-t,"d")):t},ka.weekday=function(e){if(!this.isValid())return null!=e?this:NaN;var t=(this.day()+7-this.localeData()._week.dow)%7;return null==e?t:this.add(e-t,"d")},ka.isoWeekday=function(e){if(!this.isValid())return null!=e?this:NaN;if(null!=e){var t=function(e,t){return"string"===typeof e?t.weekdaysParse(e)%7||7:isNaN(e)?null:e}(e,this.localeData());return this.day(this.day()%7?t:t-7)}return this.day()||7},ka.dayOfYear=function(e){var t=Math.round((this.clone().startOf("day")-this.clone().startOf("year"))/864e5)+1;return null==e?t:this.add(e-t,"d")},ka.hour=ka.hours=dt,ka.minute=ka.minutes=ya,ka.second=ka.seconds=La,ka.millisecond=ka.milliseconds=va,ka.utcOffset=function(e,t,a){var n,r=this._offset||0;if(!this.isValid())return null!=e?this:NaN;if(null!=e){if("string"===typeof e){if(null===(e=Bt(oe,e)))return this}else Math.abs(e)<16&&!a&&(e*=60);return!this._isUTC&&t&&(n=Ut(this)),this._offset=e,this._isUTC=!0,null!=n&&this.add(n,"m"),r!==e&&(!t||this._changeInProgress?ea(this,Zt(e-r,"m"),1,!1):this._changeInProgress||(this._changeInProgress=!0,i.updateOffset(this,!0),this._changeInProgress=null)),this}return this._isUTC?r:Ut(this)},ka.utc=function(e){return this.utcOffset(0,e)},ka.local=function(e){return this._isUTC&&(this.utcOffset(0,e),this._isUTC=!1,e&&this.subtract(Ut(this),"m")),this},ka.parseZone=function(){if(null!=this._tzm)this.utcOffset(this._tzm,!1,!0);else if("string"===typeof this._i){var e=Bt(se,this._i);null!=e?this.utcOffset(e):this.utcOffset(0,!0)}return this},ka.hasAlignedHourOffset=function(e){return!!this.isValid()&&(e=e?At(e).utcOffset():0,(this.utcOffset()-e)%60===0)},ka.isDST=function(){return this.utcOffset()>this.clone().month(0).utcOffset()||this.utcOffset()>this.clone().month(5).utcOffset()},ka.isLocal=function(){return!!this.isValid()&&!this._isUTC},ka.isUtcOffset=function(){return!!this.isValid()&&this._isUTC},ka.isUtc=Gt,ka.isUTC=Gt,ka.zoneAbbr=function(){return this._isUTC?"UTC":""},ka.zoneName=function(){return this._isUTC?"Coordinated Universal Time":""},ka.dates=w("dates accessor is deprecated. Use date instead.",pa),ka.months=w("months accessor is deprecated. Use month instead",Ie),ka.years=w("years accessor is deprecated. Use year instead",Se),ka.zone=w("moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/",(function(e,t){return null!=e?("string"!==typeof e&&(e=-e),this.utcOffset(e,t),this):-this.utcOffset()})),ka.isDSTShifted=w("isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information",(function(){if(!o(this._isDSTShifted))return this._isDSTShifted;var e={};if(y(e,this),(e=Pt(e))._a){var t=e._isUTC?c(e._a):At(e._a);this._isDSTShifted=this.isValid()&&b(e._a,t.toArray())>0}else this._isDSTShifted=!1;return this._isDSTShifted}));var Da=P.prototype;function wa(e,t,a,n){var i=Mt(),r=c().set(n,t);return i[a](r,e)}function Ta(e,t,a){if(d(e)&&(t=e,e=void 0),e=e||"",null!=t)return wa(e,t,a,"month");var n,i=[];for(n=0;n<12;n++)i[n]=wa(e,n,a,"month");return i}function xa(e,t,a,n){"boolean"===typeof e?(d(t)&&(a=t,t=void 0),t=t||""):(a=t=e,e=!1,d(t)&&(a=t,t=void 0),t=t||"");var i,r=Mt(),s=e?r._week.dow:0;if(null!=a)return wa(t,(a+s)%7,n,"day");var o=[];for(i=0;i<7;i++)o[i]=wa(t,(i+s)%7,n,"day");return o}Da.calendar=function(e,t,a){var n=this._calendar[e]||this._calendar.sameElse;return H(n)?n.call(t,a):n},Da.longDateFormat=function(e){var t=this._longDateFormat[e],a=this._longDateFormat[e.toUpperCase()];return t||!a?t:(this._longDateFormat[e]=a.replace(/MMMM|MM|DD|dddd/g,(function(e){return e.slice(1)})),this._longDateFormat[e])},Da.invalidDate=function(){return this._invalidDate},Da.ordinal=function(e){return this._ordinal.replace("%d",e)},Da.preparse=ba,Da.postformat=ba,Da.relativeTime=function(e,t,a,n){var i=this._relativeTime[a];return H(i)?i(e,t,a,n):i.replace(/%d/i,e)},Da.pastFuture=function(e,t){var a=this._relativeTime[e>0?"future":"past"];return H(a)?a(t):a.replace(/%s/i,t)},Da.set=function(e){var t,a;for(a in e)H(t=e[a])?this[a]=t:this["_"+a]=t;this._config=e,this._dayOfMonthOrdinalParseLenient=new RegExp((this._dayOfMonthOrdinalParse.source||this._ordinalParse.source)+"|"+/\d{1,2}/.source)},Da.months=function(e,t){return e?r(this._months)?this._months[e.month()]:this._months[(this._months.isFormat||Ae).test(t)?"format":"standalone"][e.month()]:r(this._months)?this._months:this._months.standalone},Da.monthsShort=function(e,t){return e?r(this._monthsShort)?this._monthsShort[e.month()]:this._monthsShort[Ae.test(t)?"format":"standalone"][e.month()]:r(this._monthsShort)?this._monthsShort:this._monthsShort.standalone},Da.monthsParse=function(e,t,a){var n,i,r;if(this._monthsParseExact)return Ce.call(this,e,t,a);for(this._monthsParse||(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[]),n=0;n<12;n++){if(i=c([2e3,n]),a&&!this._longMonthsParse[n]&&(this._longMonthsParse[n]=new RegExp("^"+this.months(i,"").replace(".","")+"$","i"),this._shortMonthsParse[n]=new RegExp("^"+this.monthsShort(i,"").replace(".","")+"$","i")),a||this._monthsParse[n]||(r="^"+this.months(i,"")+"|^"+this.monthsShort(i,""),this._monthsParse[n]=new RegExp(r.replace(".",""),"i")),a&&"MMMM"===t&&this._longMonthsParse[n].test(e))return n;if(a&&"MMM"===t&&this._shortMonthsParse[n].test(e))return n;if(!a&&this._monthsParse[n].test(e))return n}},Da.monthsRegex=function(e){return this._monthsParseExact?(_(this,"_monthsRegex")||Ne.call(this),e?this._monthsStrictRegex:this._monthsRegex):(_(this,"_monthsRegex")||(this._monthsRegex=Re),this._monthsStrictRegex&&e?this._monthsStrictRegex:this._monthsRegex)},Da.monthsShortRegex=function(e){return this._monthsParseExact?(_(this,"_monthsRegex")||Ne.call(this),e?this._monthsShortStrictRegex:this._monthsShortRegex):(_(this,"_monthsShortRegex")||(this._monthsShortRegex=ze),this._monthsShortStrictRegex&&e?this._monthsShortStrictRegex:this._monthsShortRegex)},Da.week=function(e){return Ge(e,this._week.dow,this._week.doy).week},Da.firstDayOfYear=function(){return this._week.doy},Da.firstDayOfWeek=function(){return this._week.dow},Da.weekdays=function(e,t){var a=r(this._weekdays)?this._weekdays:this._weekdays[e&&!0!==e&&this._weekdays.isFormat.test(t)?"format":"standalone"];return!0===e?Ke(a,this._week.dow):e?a[e.day()]:a},Da.weekdaysMin=function(e){return!0===e?Ke(this._weekdaysMin,this._week.dow):e?this._weekdaysMin[e.day()]:this._weekdaysMin},Da.weekdaysShort=function(e){return!0===e?Ke(this._weekdaysShort,this._week.dow):e?this._weekdaysShort[e.day()]:this._weekdaysShort},Da.weekdaysParse=function(e,t,a){var n,i,r;if(this._weekdaysParseExact)return Xe.call(this,e,t,a);for(this._weekdaysParse||(this._weekdaysParse=[],this._minWeekdaysParse=[],this._shortWeekdaysParse=[],this._fullWeekdaysParse=[]),n=0;n<7;n++){if(i=c([2e3,1]).day(n),a&&!this._fullWeekdaysParse[n]&&(this._fullWeekdaysParse[n]=new RegExp("^"+this.weekdays(i,"").replace(".","\\.?")+"$","i"),this._shortWeekdaysParse[n]=new RegExp("^"+this.weekdaysShort(i,"").replace(".","\\.?")+"$","i"),this._minWeekdaysParse[n]=new RegExp("^"+this.weekdaysMin(i,"").replace(".","\\.?")+"$","i")),this._weekdaysParse[n]||(r="^"+this.weekdays(i,"")+"|^"+this.weekdaysShort(i,"")+"|^"+this.weekdaysMin(i,""),this._weekdaysParse[n]=new RegExp(r.replace(".",""),"i")),a&&"dddd"===t&&this._fullWeekdaysParse[n].test(e))return n;if(a&&"ddd"===t&&this._shortWeekdaysParse[n].test(e))return n;if(a&&"dd"===t&&this._minWeekdaysParse[n].test(e))return n;if(!a&&this._weekdaysParse[n].test(e))return n}},Da.weekdaysRegex=function(e){return this._weekdaysParseExact?(_(this,"_weekdaysRegex")||nt.call(this),e?this._weekdaysStrictRegex:this._weekdaysRegex):(_(this,"_weekdaysRegex")||(this._weekdaysRegex=et),this._weekdaysStrictRegex&&e?this._weekdaysStrictRegex:this._weekdaysRegex)},Da.weekdaysShortRegex=function(e){return this._weekdaysParseExact?(_(this,"_weekdaysRegex")||nt.call(this),e?this._weekdaysShortStrictRegex:this._weekdaysShortRegex):(_(this,"_weekdaysShortRegex")||(this._weekdaysShortRegex=tt),this._weekdaysShortStrictRegex&&e?this._weekdaysShortStrictRegex:this._weekdaysShortRegex)},Da.weekdaysMinRegex=function(e){return this._weekdaysParseExact?(_(this,"_weekdaysRegex")||nt.call(this),e?this._weekdaysMinStrictRegex:this._weekdaysMinRegex):(_(this,"_weekdaysMinRegex")||(this._weekdaysMinRegex=at),this._weekdaysMinStrictRegex&&e?this._weekdaysMinStrictRegex:this._weekdaysMinRegex)},Da.isPM=function(e){return"p"===(e+"").toLowerCase().charAt(0)},Da.meridiem=function(e,t,a){return e>11?a?"pm":"PM":a?"am":"AM"},ht("en",{dayOfMonthOrdinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(e){var t=e%10;return e+(1===k(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")}}),i.lang=w("moment.lang is deprecated. Use moment.locale instead.",ht),i.langData=w("moment.langData is deprecated. Use moment.localeData instead.",Mt);var Sa=Math.abs;function Ha(e,t,a,n){var i=Zt(t,a);return e._milliseconds+=n*i._milliseconds,e._days+=n*i._days,e._months+=n*i._months,e._bubble()}function ja(e){return e<0?Math.floor(e):Math.ceil(e)}function Pa(e){return 4800*e/146097}function Oa(e){return 146097*e/4800}function Aa(e){return function(){return this.as(e)}}var Fa=Aa("ms"),Wa=Aa("s"),Ca=Aa("m"),Ea=Aa("h"),Ia=Aa("d"),za=Aa("w"),Ra=Aa("M"),Na=Aa("Q"),Va=Aa("y");function Ba(e){return function(){return this.isValid()?this._data[e]:NaN}}var Ja=Ba("milliseconds"),Ua=Ba("seconds"),Ga=Ba("minutes"),qa=Ba("hours"),Ka=Ba("days"),Za=Ba("months"),$a=Ba("years"),Qa=Math.round,Xa={ss:44,s:45,m:45,h:22,d:26,M:11};function en(e,t,a,n,i){return i.relativeTime(t||1,!!a,e,n)}var tn=Math.abs;function an(e){return(e>0)-(e<0)||+e}function nn(){if(!this.isValid())return this.localeData().invalidDate();var e,t,a=tn(this._milliseconds)/1e3,n=tn(this._days),i=tn(this._months);e=v(a/60),t=v(e/60),a%=60,e%=60;var r=v(i/12),s=i%=12,o=n,d=t,l=e,u=a?a.toFixed(3).replace(/\.?0+$/,""):"",_=this.asSeconds();if(!_)return"P0D";var m=_<0?"-":"",c=an(this._months)!==an(_)?"-":"",h=an(this._days)!==an(_)?"-":"",f=an(this._milliseconds)!==an(_)?"-":"";return m+"P"+(r?c+r+"Y":"")+(s?c+s+"M":"")+(o?h+o+"D":"")+(d||l||u?"T":"")+(d?f+d+"H":"")+(l?f+l+"M":"")+(u?f+u+"S":"")}var rn=It.prototype;return rn.isValid=function(){return this._isValid},rn.abs=function(){var e=this._data;return this._milliseconds=Sa(this._milliseconds),this._days=Sa(this._days),this._months=Sa(this._months),e.milliseconds=Sa(e.milliseconds),e.seconds=Sa(e.seconds),e.minutes=Sa(e.minutes),e.hours=Sa(e.hours),e.months=Sa(e.months),e.years=Sa(e.years),this},rn.add=function(e,t){return Ha(this,e,t,1)},rn.subtract=function(e,t){return Ha(this,e,t,-1)},rn.as=function(e){if(!this.isValid())return NaN;var t,a,n=this._milliseconds;if("month"===(e=F(e))||"quarter"===e||"year"===e)switch(t=this._days+n/864e5,a=this._months+Pa(t),e){case"month":return a;case"quarter":return a/3;case"year":return a/12}else switch(t=this._days+Math.round(Oa(this._months)),e){case"week":return t/7+n/6048e5;case"day":return t+n/864e5;case"hour":return 24*t+n/36e5;case"minute":return 1440*t+n/6e4;case"second":return 86400*t+n/1e3;case"millisecond":return Math.floor(864e5*t)+n;default:throw new Error("Unknown unit "+e)}},rn.asMilliseconds=Fa,rn.asSeconds=Wa,rn.asMinutes=Ca,rn.asHours=Ea,rn.asDays=Ia,rn.asWeeks=za,rn.asMonths=Ra,rn.asQuarters=Na,rn.asYears=Va,rn.valueOf=function(){return this.isValid()?this._milliseconds+864e5*this._days+this._months%12*2592e6+31536e6*k(this._months/12):NaN},rn._bubble=function(){var e,t,a,n,i,r=this._milliseconds,s=this._days,o=this._months,d=this._data;return r>=0&&s>=0&&o>=0||r<=0&&s<=0&&o<=0||(r+=864e5*ja(Oa(o)+s),s=0,o=0),d.milliseconds=r%1e3,e=v(r/1e3),d.seconds=e%60,t=v(e/60),d.minutes=t%60,a=v(t/60),d.hours=a%24,s+=v(a/24),i=v(Pa(s)),o+=i,s-=ja(Oa(i)),n=v(o/12),o%=12,d.days=s,d.months=o,d.years=n,this},rn.clone=function(){return Zt(this)},rn.get=function(e){return e=F(e),this.isValid()?this[e+"s"]():NaN},rn.milliseconds=Ja,rn.seconds=Ua,rn.minutes=Ga,rn.hours=qa,rn.days=Ka,rn.weeks=function(){return v(this.days()/7)},rn.months=Za,rn.years=$a,rn.humanize=function(e){if(!this.isValid())return this.localeData().invalidDate();var t=this.localeData(),a=function(e,t,a){var n=Zt(e).abs(),i=Qa(n.as("s")),r=Qa(n.as("m")),s=Qa(n.as("h")),o=Qa(n.as("d")),d=Qa(n.as("M")),l=Qa(n.as("y")),u=i<=Xa.ss&&["s",i]||i<Xa.s&&["ss",i]||r<=1&&["m"]||r<Xa.m&&["mm",r]||s<=1&&["h"]||s<Xa.h&&["hh",s]||o<=1&&["d"]||o<Xa.d&&["dd",o]||d<=1&&["M"]||d<Xa.M&&["MM",d]||l<=1&&["y"]||["yy",l];return u[2]=t,u[3]=+e>0,u[4]=a,en.apply(null,u)}(this,!e,t);return e&&(a=t.pastFuture(+this,a)),t.postformat(a)},rn.toISOString=nn,rn.toString=nn,rn.toJSON=nn,rn.locale=ia,rn.localeData=sa,rn.toIsoString=w("toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)",nn),rn.lang=ra,B("X",0,0,"unix"),B("x",0,0,"valueOf"),ue("x",re),ue("X",/[+-]?\d+(\.\d{1,3})?/),he("X",(function(e,t,a){a._d=new Date(1e3*parseFloat(e,10))})),he("x",(function(e,t,a){a._d=new Date(k(e))})),i.version="2.24.0",t=At,i.fn=ka,i.min=function(){return Ct("isBefore",[].slice.call(arguments,0))},i.max=function(){return Ct("isAfter",[].slice.call(arguments,0))},i.now=function(){return Date.now?Date.now():+new Date},i.utc=c,i.unix=function(e){return At(1e3*e)},i.months=function(e,t){return Ta(e,t,"months")},i.isDate=l,i.locale=ht,i.invalid=M,i.duration=Zt,i.isMoment=Y,i.weekdays=function(e,t,a){return xa(e,t,a,"weekdays")},i.parseZone=function(){return At.apply(null,arguments).parseZone()},i.localeData=Mt,i.isDuration=zt,i.monthsShort=function(e,t){return Ta(e,t,"monthsShort")},i.weekdaysMin=function(e,t,a){return xa(e,t,a,"weekdaysMin")},i.defineLocale=ft,i.updateLocale=function(e,t){if(null!=t){var a,n,i=lt;null!=(n=ct(e))&&(i=n._config),t=j(i,t),(a=new P(t)).parentLocale=ut[e],ut[e]=a,ht(e)}else null!=ut[e]&&(null!=ut[e].parentLocale?ut[e]=ut[e].parentLocale:null!=ut[e]&&delete ut[e]);return ut[e]},i.locales=function(){return T(ut)},i.weekdaysShort=function(e,t,a){return xa(e,t,a,"weekdaysShort")},i.normalizeUnits=F,i.relativeTimeRounding=function(e){return void 0===e?Qa:"function"===typeof e&&(Qa=e,!0)},i.relativeTimeThreshold=function(e,t){return void 0!==Xa[e]&&(void 0===t?Xa[e]:(Xa[e]=t,"s"===e&&(Xa.ss=t-1),!0))},i.calendarFormat=function(e,t){var a=e.diff(t,"days",!0);return a<-6?"sameElse":a<-1?"lastWeek":a<0?"lastDay":a<1?"sameDay":a<2?"nextDay":a<7?"nextWeek":"sameElse"},i.prototype=ka,i.HTML5_FMT={DATETIME_LOCAL:"YYYY-MM-DDTHH:mm",DATETIME_LOCAL_SECONDS:"YYYY-MM-DDTHH:mm:ss",DATETIME_LOCAL_MS:"YYYY-MM-DDTHH:mm:ss.SSS",DATE:"YYYY-MM-DD",TIME:"HH:mm",TIME_SECONDS:"HH:mm:ss",TIME_MS:"HH:mm:ss.SSS",WEEK:"GGGG-[W]WW",MONTH:"YYYY-MM"},i}()}).call(this,a(91)(e))},,function(e,t,a){(function(t){var a="object",n=function(e){return e&&e.Math==Math&&e};e.exports=n(typeof globalThis==a&&globalThis)||n(typeof window==a&&window)||n(typeof self==a&&self)||n(typeof t==a&&t)||Function("return this")()}).call(this,a(43))},,function(e,t){e.exports=function(e){try{return!!e()}catch(e){return!0}}},function(e,t){e.exports=window},,,function(e,t){e.exports=function(e){return"object"===typeof e?null!==e:"function"===typeof e}},function(e,t,a){var n=a(4);e.exports=!n((function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a}))},function(e,t,a){var n=a(9),i=a(19),r=a(26);e.exports=n?function(e,t,a){return i.f(e,t,r(1,a))}:function(e,t,a){return e[t]=a,e}},function(e,t){var a={}.hasOwnProperty;e.exports=function(e,t){return a.call(e,t)}},function(e,t,a){var n=a(2),i=a(31).f,r=a(10),s=a(45),o=a(23),d=a(56),l=a(60);e.exports=function(e,t){var a,u,_,m,c,h=e.target,f=e.global,M=e.stat;if(a=f?n:M?n[h]||o(h,{}):(n[h]||{}).prototype)for(u in t){if(m=t[u],_=e.noTargetGet?(c=i(a,u))&&c.value:a[u],!l(f?u:h+(M?".":"#")+u,e.forced)&&void 0!==_){if(typeof m===typeof _)continue;d(m,_)}(e.sham||_&&_.sham)&&r(m,"sham",!0),s(a,u,m,e)}}},function(e,t,a){var n=a(8);e.exports=function(e){if(!n(e))throw TypeError(String(e)+" is not an object");return e}},,function(e,t,a){var n=a(2),i=a(23),r=a(53),s=n["__core-js_shared__"]||i("__core-js_shared__",{});(e.exports=function(e,t){return s[e]||(s[e]=void 0!==t?t:{})})("versions",[]).push({version:"3.2.1",mode:r?"pure":"global",copyright:"© 2019 Denis Pushkarev (zloirock.ru)"})},function(e,t){e.exports=function(e){if(void 0==e)throw TypeError("Can't call method on "+e);return e}},function(e,t,a){var n=a(2),i=a(15),r=a(34),s=a(62),o=n.Symbol,d=i("wks");e.exports=function(e){return d[e]||(d[e]=s&&o[e]||(s?o:r)("Symbol."+e))}},function(e,t,a){var n=a(30),i=a(16);e.exports=function(e){return n(i(e))}},function(e,t,a){var n=a(9),i=a(32),r=a(13),s=a(27),o=Object.defineProperty;t.f=n?o:function(e,t,a){if(r(e),t=s(t,!0),r(a),i)try{return o(e,t,a)}catch(e){}if("get"in a||"set"in a)throw TypeError("Accessors not supported");return"value"in a&&(e[t]=a.value),e}},function(e,t,a){var n=a(22),i=Math.min;e.exports=function(e){return e>0?i(n(e),9007199254740991):0}},,function(e,t){var a=Math.ceil,n=Math.floor;e.exports=function(e){return isNaN(e=+e)?0:(e>0?n:a)(e)}},function(e,t,a){var n=a(2),i=a(10);e.exports=function(e,t){try{i(n,e,t)}catch(a){n[e]=t}return t}},function(e,t){var a={}.toString;e.exports=function(e){return a.call(e).slice(8,-1)}},function(e,t,a){var n=a(16);e.exports=function(e){return Object(n(e))}},function(e,t){e.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},function(e,t,a){var n=a(8);e.exports=function(e,t){if(!n(e))return e;var a,i;if(t&&"function"==typeof(a=e.toString)&&!n(i=a.call(e)))return i;if("function"==typeof(a=e.valueOf)&&!n(i=a.call(e)))return i;if(!t&&"function"==typeof(a=e.toString)&&!n(i=a.call(e)))return i;throw TypeError("Can't convert object to primitive value")}},function(e,t){e.exports={}},function(e,t){e.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},function(e,t,a){var n=a(4),i=a(24),r="".split;e.exports=n((function(){return!Object("z").propertyIsEnumerable(0)}))?function(e){return"String"==i(e)?r.call(e,""):Object(e)}:Object},function(e,t,a){var n=a(9),i=a(44),r=a(26),s=a(18),o=a(27),d=a(11),l=a(32),u=Object.getOwnPropertyDescriptor;t.f=n?u:function(e,t){if(e=s(e),t=o(t,!0),l)try{return u(e,t)}catch(e){}if(d(e,t))return r(!i.f.call(e,t),e[t])}},function(e,t,a){var n=a(9),i=a(4),r=a(36);e.exports=!n&&!i((function(){return 7!=Object.defineProperty(r("div"),"a",{get:function(){return 7}}).a}))},function(e,t,a){var n=a(15);e.exports=n("native-function-to-string",Function.toString)},function(e,t){var a=0,n=Math.random();e.exports=function(e){return"Symbol("+String(void 0===e?"":e)+")_"+(++a+n).toString(36)}},function(e,t,a){var n=a(11),i=a(18),r=a(48).indexOf,s=a(28);e.exports=function(e,t){var a,o=i(e),d=0,l=[];for(a in o)!n(s,a)&&n(o,a)&&l.push(a);for(;t.length>d;)n(o,a=t[d++])&&(~r(l,a)||l.push(a));return l}},function(e,t,a){var n=a(2),i=a(8),r=n.document,s=i(r)&&i(r.createElement);e.exports=function(e){return s?r.createElement(e):{}}},function(e,t,a){var n=a(15),i=a(34),r=n("keys");e.exports=function(e){return r[e]||(r[e]=i(e))}},function(e,t,a){var n=a(58),i=a(2),r=function(e){return"function"==typeof e?e:void 0};e.exports=function(e,t){return arguments.length<2?r(n[e])||r(i[e]):n[e]&&n[e][t]||i[e]&&i[e][t]}},function(e,t,a){var n=a(22),i=Math.max,r=Math.min;e.exports=function(e,t){var a=n(e);return a<0?i(a+t,0):r(a,t)}},function(e,t,a){var n=a(8),i=a(41),r=a(17)("species");e.exports=function(e,t){var a;return i(e)&&("function"!=typeof(a=e.constructor)||a!==Array&&!i(a.prototype)?n(a)&&null===(a=a[r])&&(a=void 0):a=void 0),new(void 0===a?Array:a)(0===t?0:t)}},function(e,t,a){var n=a(24);e.exports=Array.isArray||function(e){return"Array"==n(e)}},,function(e,t){var a;a=function(){return this}();try{a=a||new Function("return this")()}catch(e){"object"===typeof window&&(a=window)}e.exports=a},function(e,t,a){"use strict";var n={}.propertyIsEnumerable,i=Object.getOwnPropertyDescriptor,r=i&&!n.call({1:2},1);t.f=r?function(e){var t=i(this,e);return!!t&&t.enumerable}:n},function(e,t,a){var n=a(2),i=a(15),r=a(10),s=a(11),o=a(23),d=a(33),l=a(54),u=l.get,_=l.enforce,m=String(d).split("toString");i("inspectSource",(function(e){return d.call(e)})),(e.exports=function(e,t,a,i){var d=!!i&&!!i.unsafe,l=!!i&&!!i.enumerable,u=!!i&&!!i.noTargetGet;"function"==typeof a&&("string"!=typeof t||s(a,"name")||r(a,"name",t),_(a).source=m.join("string"==typeof t?t:"")),e!==n?(d?!u&&e[t]&&(l=!0):delete e[t],l?e[t]=a:r(e,t,a)):l?e[t]=a:o(t,a)})(Function.prototype,"toString",(function(){return"function"==typeof this&&u(this).source||d.call(this)}))},function(e,t,a){var n=a(61),i=a(30),r=a(25),s=a(20),o=a(40),d=[].push,l=function(e){var t=1==e,a=2==e,l=3==e,u=4==e,_=6==e,m=5==e||_;return function(c,h,f,M){for(var p,y,g=r(c),L=i(g),Y=n(h,f,3),v=s(L.length),k=0,b=M||o,D=t?b(c,v):a?b(c,0):void 0;v>k;k++)if((m||k in L)&&(y=Y(p=L[k],k,g),e))if(t)D[k]=y;else if(y)switch(e){case 3:return!0;case 5:return p;case 6:return k;case 2:d.call(D,p)}else if(u)return!1;return _?-1:l||u?u:D}};e.exports={forEach:l(0),map:l(1),filter:l(2),some:l(3),every:l(4),find:l(5),findIndex:l(6)}},function(e,t){e.exports=function(e){if("function"!=typeof e)throw TypeError(String(e)+" is not a function");return e}},function(e,t,a){var n=a(18),i=a(20),r=a(39),s=function(e){return function(t,a,s){var o,d=n(t),l=i(d.length),u=r(s,l);if(e&&a!=a){for(;l>u;)if((o=d[u++])!=o)return!0}else for(;l>u;u++)if((e||u in d)&&d[u]===a)return e||u||0;return!e&&-1}};e.exports={includes:s(!0),indexOf:s(!1)}},,function(e,t){t.f=Object.getOwnPropertySymbols},function(e,t,a){var n=a(35),i=a(29);e.exports=Object.keys||function(e){return n(e,i)}},,function(e,t){e.exports=!1},function(e,t,a){var n,i,r,s=a(55),o=a(2),d=a(8),l=a(10),u=a(11),_=a(37),m=a(28),c=o.WeakMap;if(s){var h=new c,f=h.get,M=h.has,p=h.set;n=function(e,t){return p.call(h,e,t),t},i=function(e){return f.call(h,e)||{}},r=function(e){return M.call(h,e)}}else{var y=_("state");m[y]=!0,n=function(e,t){return l(e,y,t),t},i=function(e){return u(e,y)?e[y]:{}},r=function(e){return u(e,y)}}e.exports={set:n,get:i,has:r,enforce:function(e){return r(e)?i(e):n(e,{})},getterFor:function(e){return function(t){var a;if(!d(t)||(a=i(t)).type!==e)throw TypeError("Incompatible receiver, "+e+" required");return a}}}},function(e,t,a){var n=a(2),i=a(33),r=n.WeakMap;e.exports="function"===typeof r&&/native code/.test(i.call(r))},function(e,t,a){var n=a(11),i=a(57),r=a(31),s=a(19);e.exports=function(e,t){for(var a=i(t),o=s.f,d=r.f,l=0;l<a.length;l++){var u=a[l];n(e,u)||o(e,u,d(t,u))}}},function(e,t,a){var n=a(38),i=a(59),r=a(50),s=a(13);e.exports=n("Reflect","ownKeys")||function(e){var t=i.f(s(e)),a=r.f;return a?t.concat(a(e)):t}},function(e,t,a){e.exports=a(2)},function(e,t,a){var n=a(35),i=a(29).concat("length","prototype");t.f=Object.getOwnPropertyNames||function(e){return n(e,i)}},function(e,t,a){var n=a(4),i=/#|\.prototype\./,r=function(e,t){var a=o[s(e)];return a==l||a!=d&&("function"==typeof t?n(t):!!t)},s=r.normalize=function(e){return String(e).replace(i,".").toLowerCase()},o=r.data={},d=r.NATIVE="N",l=r.POLYFILL="P";e.exports=r},function(e,t,a){var n=a(47);e.exports=function(e,t,a){if(n(e),void 0===t)return e;switch(a){case 0:return function(){return e.call(t)};case 1:return function(a){return e.call(t,a)};case 2:return function(a,n){return e.call(t,a,n)};case 3:return function(a,n,i){return e.call(t,a,n,i)}}return function(){return e.apply(t,arguments)}}},function(e,t,a){var n=a(4);e.exports=!!Object.getOwnPropertySymbols&&!n((function(){return!String(Symbol())}))},,,,,,,function(e,t,a){"use strict";var n=a(4);e.exports=function(e,t){var a=[][e];return!a||!n((function(){a.call(null,t||function(){throw 1},1)}))}},,,,,,,,,,,,,,,,,,,,,function(e,t,a){"use strict";var n=a(46).forEach,i=a(69);e.exports=i("forEach")?function(e){return n(this,e,arguments.length>1?arguments[1]:void 0)}:[].forEach},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},,,,,,,function(e,t,a){e.exports=function(e){"use strict";e=e&&e.hasOwnProperty("default")?e.default:e;var t={rgb2hsl:a,rgb2hsv:n,rgb2hwb:i,rgb2cmyk:s,rgb2keyword:o,rgb2xyz:d,rgb2lab:l,rgb2lch:function(e){return p(l(e))},hsl2rgb:u,hsl2hsv:function(e){var t=e[0],a=e[1]/100,n=e[2]/100;return 0===n?[0,0,0]:[t,2*(a*=(n*=2)<=1?n:2-n)/(n+a)*100,(n+a)/2*100]},hsl2hwb:function(e){return i(u(e))},hsl2cmyk:function(e){return s(u(e))},hsl2keyword:function(e){return o(u(e))},hsv2rgb:_,hsv2hsl:function(e){var t,a,n=e[0],i=e[1]/100,r=e[2]/100;return t=i*r,[n,100*(t=(t/=(a=(2-i)*r)<=1?a:2-a)||0),100*(a/=2)]},hsv2hwb:function(e){return i(_(e))},hsv2cmyk:function(e){return s(_(e))},hsv2keyword:function(e){return o(_(e))},hwb2rgb:m,hwb2hsl:function(e){return a(m(e))},hwb2hsv:function(e){return n(m(e))},hwb2cmyk:function(e){return s(m(e))},hwb2keyword:function(e){return o(m(e))},cmyk2rgb:c,cmyk2hsl:function(e){return a(c(e))},cmyk2hsv:function(e){return n(c(e))},cmyk2hwb:function(e){return i(c(e))},cmyk2keyword:function(e){return o(c(e))},keyword2rgb:Y,keyword2hsl:function(e){return a(Y(e))},keyword2hsv:function(e){return n(Y(e))},keyword2hwb:function(e){return i(Y(e))},keyword2cmyk:function(e){return s(Y(e))},keyword2lab:function(e){return l(Y(e))},keyword2xyz:function(e){return d(Y(e))},xyz2rgb:h,xyz2lab:f,xyz2lch:function(e){return p(f(e))},lab2xyz:M,lab2rgb:y,lab2lch:p,lch2lab:L,lch2xyz:function(e){return M(L(e))},lch2rgb:function(e){return y(L(e))}};function a(e){var t,a,n=e[0]/255,i=e[1]/255,r=e[2]/255,s=Math.min(n,i,r),o=Math.max(n,i,r),d=o-s;return o==s?t=0:n==o?t=(i-r)/d:i==o?t=2+(r-n)/d:r==o&&(t=4+(n-i)/d),(t=Math.min(60*t,360))<0&&(t+=360),a=(s+o)/2,[t,100*(o==s?0:a<=.5?d/(o+s):d/(2-o-s)),100*a]}function n(e){var t,a,n=e[0],i=e[1],r=e[2],s=Math.min(n,i,r),o=Math.max(n,i,r),d=o-s;return a=0==o?0:d/o*1e3/10,o==s?t=0:n==o?t=(i-r)/d:i==o?t=2+(r-n)/d:r==o&&(t=4+(n-i)/d),(t=Math.min(60*t,360))<0&&(t+=360),[t,a,o/255*1e3/10]}function i(e){var t=e[0],n=e[1],i=e[2];return[a(e)[0],1/255*Math.min(t,Math.min(n,i))*100,100*(i=1-1/255*Math.max(t,Math.max(n,i)))]}function s(e){var t,a=e[0]/255,n=e[1]/255,i=e[2]/255;return[100*((1-a-(t=Math.min(1-a,1-n,1-i)))/(1-t)||0),100*((1-n-t)/(1-t)||0),100*((1-i-t)/(1-t)||0),100*t]}function o(e){return k[JSON.stringify(e)]}function d(e){var t=e[0]/255,a=e[1]/255,n=e[2]/255;return[100*(.4124*(t=t>.04045?Math.pow((t+.055)/1.055,2.4):t/12.92)+.3576*(a=a>.04045?Math.pow((a+.055)/1.055,2.4):a/12.92)+.1805*(n=n>.04045?Math.pow((n+.055)/1.055,2.4):n/12.92)),100*(.2126*t+.7152*a+.0722*n),100*(.0193*t+.1192*a+.9505*n)]}function l(e){var t=d(e),a=t[0],n=t[1],i=t[2];return n/=100,i/=108.883,a=(a/=95.047)>.008856?Math.pow(a,1/3):7.787*a+16/116,[116*(n=n>.008856?Math.pow(n,1/3):7.787*n+16/116)-16,500*(a-n),200*(n-(i=i>.008856?Math.pow(i,1/3):7.787*i+16/116))]}function u(e){var t,a,n,i,r,s=e[0]/360,o=e[1]/100,d=e[2]/100;if(0==o)return[r=255*d,r,r];t=2*d-(a=d<.5?d*(1+o):d+o-d*o),i=[0,0,0];for(var l=0;l<3;l++)(n=s+1/3*-(l-1))<0&&n++,n>1&&n--,r=6*n<1?t+6*(a-t)*n:2*n<1?a:3*n<2?t+(a-t)*(2/3-n)*6:t,i[l]=255*r;return i}function _(e){var t=e[0]/60,a=e[1]/100,n=e[2]/100,i=Math.floor(t)%6,r=t-Math.floor(t),s=255*n*(1-a),o=255*n*(1-a*r),d=255*n*(1-a*(1-r));switch(n*=255,i){case 0:return[n,d,s];case 1:return[o,n,s];case 2:return[s,n,d];case 3:return[s,o,n];case 4:return[d,s,n];case 5:return[n,s,o]}}function m(e){var t,a,n,i,s=e[0]/360,o=e[1]/100,d=e[2]/100,l=o+d;switch(l>1&&(o/=l,d/=l),n=6*s-(t=Math.floor(6*s)),0!=(1&t)&&(n=1-n),i=o+n*((a=1-d)-o),t){default:case 6:case 0:r=a,g=i,b=o;break;case 1:r=i,g=a,b=o;break;case 2:r=o,g=a,b=i;break;case 3:r=o,g=i,b=a;break;case 4:r=i,g=o,b=a;break;case 5:r=a,g=o,b=i}return[255*r,255*g,255*b]}function c(e){var t=e[0]/100,a=e[1]/100,n=e[2]/100,i=e[3]/100;return[255*(1-Math.min(1,t*(1-i)+i)),255*(1-Math.min(1,a*(1-i)+i)),255*(1-Math.min(1,n*(1-i)+i))]}function h(e){var t,a,n,i=e[0]/100,r=e[1]/100,s=e[2]/100;return a=-.9689*i+1.8758*r+.0415*s,n=.0557*i+-.204*r+1.057*s,t=(t=3.2406*i+-1.5372*r+-.4986*s)>.0031308?1.055*Math.pow(t,1/2.4)-.055:t*=12.92,a=a>.0031308?1.055*Math.pow(a,1/2.4)-.055:a*=12.92,n=n>.0031308?1.055*Math.pow(n,1/2.4)-.055:n*=12.92,[255*(t=Math.min(Math.max(0,t),1)),255*(a=Math.min(Math.max(0,a),1)),255*(n=Math.min(Math.max(0,n),1))]}function f(e){var t=e[0],a=e[1],n=e[2];return a/=100,n/=108.883,t=(t/=95.047)>.008856?Math.pow(t,1/3):7.787*t+16/116,[116*(a=a>.008856?Math.pow(a,1/3):7.787*a+16/116)-16,500*(t-a),200*(a-(n=n>.008856?Math.pow(n,1/3):7.787*n+16/116))]}function M(e){var t,a,n,i,r=e[0],s=e[1],o=e[2];return r<=8?i=(a=100*r/903.3)/100*7.787+16/116:(a=100*Math.pow((r+16)/116,3),i=Math.pow(a/100,1/3)),[t=t/95.047<=.008856?t=95.047*(s/500+i-16/116)/7.787:95.047*Math.pow(s/500+i,3),a,n=n/108.883<=.008859?n=108.883*(i-o/200-16/116)/7.787:108.883*Math.pow(i-o/200,3)]}function p(e){var t,a=e[0],n=e[1],i=e[2];return(t=360*Math.atan2(i,n)/2/Math.PI)<0&&(t+=360),[a,Math.sqrt(n*n+i*i),t]}function y(e){return h(M(e))}function L(e){var t,a=e[0],n=e[1];return t=e[2]/360*2*Math.PI,[a,n*Math.cos(t),n*Math.sin(t)]}function Y(e){return v[e]}var v={aliceblue:[240,248,255],antiquewhite:[250,235,215],aqua:[0,255,255],aquamarine:[127,255,212],azure:[240,255,255],beige:[245,245,220],bisque:[255,228,196],black:[0,0,0],blanchedalmond:[255,235,205],blue:[0,0,255],blueviolet:[138,43,226],brown:[165,42,42],burlywood:[222,184,135],cadetblue:[95,158,160],chartreuse:[127,255,0],chocolate:[210,105,30],coral:[255,127,80],cornflowerblue:[100,149,237],cornsilk:[255,248,220],crimson:[220,20,60],cyan:[0,255,255],darkblue:[0,0,139],darkcyan:[0,139,139],darkgoldenrod:[184,134,11],darkgray:[169,169,169],darkgreen:[0,100,0],darkgrey:[169,169,169],darkkhaki:[189,183,107],darkmagenta:[139,0,139],darkolivegreen:[85,107,47],darkorange:[255,140,0],darkorchid:[153,50,204],darkred:[139,0,0],darksalmon:[233,150,122],darkseagreen:[143,188,143],darkslateblue:[72,61,139],darkslategray:[47,79,79],darkslategrey:[47,79,79],darkturquoise:[0,206,209],darkviolet:[148,0,211],deeppink:[255,20,147],deepskyblue:[0,191,255],dimgray:[105,105,105],dimgrey:[105,105,105],dodgerblue:[30,144,255],firebrick:[178,34,34],floralwhite:[255,250,240],forestgreen:[34,139,34],fuchsia:[255,0,255],gainsboro:[220,220,220],ghostwhite:[248,248,255],gold:[255,215,0],goldenrod:[218,165,32],gray:[128,128,128],green:[0,128,0],greenyellow:[173,255,47],grey:[128,128,128],honeydew:[240,255,240],hotpink:[255,105,180],indianred:[205,92,92],indigo:[75,0,130],ivory:[255,255,240],khaki:[240,230,140],lavender:[230,230,250],lavenderblush:[255,240,245],lawngreen:[124,252,0],lemonchiffon:[255,250,205],lightblue:[173,216,230],lightcoral:[240,128,128],lightcyan:[224,255,255],lightgoldenrodyellow:[250,250,210],lightgray:[211,211,211],lightgreen:[144,238,144],lightgrey:[211,211,211],lightpink:[255,182,193],lightsalmon:[255,160,122],lightseagreen:[32,178,170],lightskyblue:[135,206,250],lightslategray:[119,136,153],lightslategrey:[119,136,153],lightsteelblue:[176,196,222],lightyellow:[255,255,224],lime:[0,255,0],limegreen:[50,205,50],linen:[250,240,230],magenta:[255,0,255],maroon:[128,0,0],mediumaquamarine:[102,205,170],mediumblue:[0,0,205],mediumorchid:[186,85,211],mediumpurple:[147,112,219],mediumseagreen:[60,179,113],mediumslateblue:[123,104,238],mediumspringgreen:[0,250,154],mediumturquoise:[72,209,204],mediumvioletred:[199,21,133],midnightblue:[25,25,112],mintcream:[245,255,250],mistyrose:[255,228,225],moccasin:[255,228,181],navajowhite:[255,222,173],navy:[0,0,128],oldlace:[253,245,230],olive:[128,128,0],olivedrab:[107,142,35],orange:[255,165,0],orangered:[255,69,0],orchid:[218,112,214],palegoldenrod:[238,232,170],palegreen:[152,251,152],paleturquoise:[175,238,238],palevioletred:[219,112,147],papayawhip:[255,239,213],peachpuff:[255,218,185],peru:[205,133,63],pink:[255,192,203],plum:[221,160,221],powderblue:[176,224,230],purple:[128,0,128],rebeccapurple:[102,51,153],red:[255,0,0],rosybrown:[188,143,143],royalblue:[65,105,225],saddlebrown:[139,69,19],salmon:[250,128,114],sandybrown:[244,164,96],seagreen:[46,139,87],seashell:[255,245,238],sienna:[160,82,45],silver:[192,192,192],skyblue:[135,206,235],slateblue:[106,90,205],slategray:[112,128,144],slategrey:[112,128,144],snow:[255,250,250],springgreen:[0,255,127],steelblue:[70,130,180],tan:[210,180,140],teal:[0,128,128],thistle:[216,191,216],tomato:[255,99,71],turquoise:[64,224,208],violet:[238,130,238],wheat:[245,222,179],white:[255,255,255],whitesmoke:[245,245,245],yellow:[255,255,0],yellowgreen:[154,205,50]},k={};for(var D in v)k[JSON.stringify(v[D])]=D;var w=function(){return new j};for(var T in t){w[T+"Raw"]=function(e){return function(a){return"number"==typeof a&&(a=Array.prototype.slice.call(arguments)),t[e](a)}}(T);var x=/(\w+)2(\w+)/.exec(T),S=x[1],H=x[2];(w[S]=w[S]||{})[H]=w[T]=function(e){return function(a){"number"==typeof a&&(a=Array.prototype.slice.call(arguments));var n=t[e](a);if("string"==typeof n||void 0===n)return n;for(var i=0;i<n.length;i++)n[i]=Math.round(n[i]);return n}}(T)}var j=function(){this.convs={}};j.prototype.routeSpace=function(e,t){var a=t[0];return void 0===a?this.getValues(e):("number"==typeof a&&(a=Array.prototype.slice.call(t)),this.setValues(e,a))},j.prototype.setValues=function(e,t){return this.space=e,this.convs={},this.convs[e]=t,this},j.prototype.getValues=function(e){var t=this.convs[e];if(!t){var a=this.space,n=this.convs[a];t=w[a][e](n),this.convs[e]=t}return t},["rgb","hsl","hsv","cmyk","keyword"].forEach((function(e){j.prototype[e]=function(t){return this.routeSpace(e,arguments)}}));var P=w,O={aliceblue:[240,248,255],antiquewhite:[250,235,215],aqua:[0,255,255],aquamarine:[127,255,212],azure:[240,255,255],beige:[245,245,220],bisque:[255,228,196],black:[0,0,0],blanchedalmond:[255,235,205],blue:[0,0,255],blueviolet:[138,43,226],brown:[165,42,42],burlywood:[222,184,135],cadetblue:[95,158,160],chartreuse:[127,255,0],chocolate:[210,105,30],coral:[255,127,80],cornflowerblue:[100,149,237],cornsilk:[255,248,220],crimson:[220,20,60],cyan:[0,255,255],darkblue:[0,0,139],darkcyan:[0,139,139],darkgoldenrod:[184,134,11],darkgray:[169,169,169],darkgreen:[0,100,0],darkgrey:[169,169,169],darkkhaki:[189,183,107],darkmagenta:[139,0,139],darkolivegreen:[85,107,47],darkorange:[255,140,0],darkorchid:[153,50,204],darkred:[139,0,0],darksalmon:[233,150,122],darkseagreen:[143,188,143],darkslateblue:[72,61,139],darkslategray:[47,79,79],darkslategrey:[47,79,79],darkturquoise:[0,206,209],darkviolet:[148,0,211],deeppink:[255,20,147],deepskyblue:[0,191,255],dimgray:[105,105,105],dimgrey:[105,105,105],dodgerblue:[30,144,255],firebrick:[178,34,34],floralwhite:[255,250,240],forestgreen:[34,139,34],fuchsia:[255,0,255],gainsboro:[220,220,220],ghostwhite:[248,248,255],gold:[255,215,0],goldenrod:[218,165,32],gray:[128,128,128],green:[0,128,0],greenyellow:[173,255,47],grey:[128,128,128],honeydew:[240,255,240],hotpink:[255,105,180],indianred:[205,92,92],indigo:[75,0,130],ivory:[255,255,240],khaki:[240,230,140],lavender:[230,230,250],lavenderblush:[255,240,245],lawngreen:[124,252,0],lemonchiffon:[255,250,205],lightblue:[173,216,230],lightcoral:[240,128,128],lightcyan:[224,255,255],lightgoldenrodyellow:[250,250,210],lightgray:[211,211,211],lightgreen:[144,238,144],lightgrey:[211,211,211],lightpink:[255,182,193],lightsalmon:[255,160,122],lightseagreen:[32,178,170],lightskyblue:[135,206,250],lightslategray:[119,136,153],lightslategrey:[119,136,153],lightsteelblue:[176,196,222],lightyellow:[255,255,224],lime:[0,255,0],limegreen:[50,205,50],linen:[250,240,230],magenta:[255,0,255],maroon:[128,0,0],mediumaquamarine:[102,205,170],mediumblue:[0,0,205],mediumorchid:[186,85,211],mediumpurple:[147,112,219],mediumseagreen:[60,179,113],mediumslateblue:[123,104,238],mediumspringgreen:[0,250,154],mediumturquoise:[72,209,204],mediumvioletred:[199,21,133],midnightblue:[25,25,112],mintcream:[245,255,250],mistyrose:[255,228,225],moccasin:[255,228,181],navajowhite:[255,222,173],navy:[0,0,128],oldlace:[253,245,230],olive:[128,128,0],olivedrab:[107,142,35],orange:[255,165,0],orangered:[255,69,0],orchid:[218,112,214],palegoldenrod:[238,232,170],palegreen:[152,251,152],paleturquoise:[175,238,238],palevioletred:[219,112,147],papayawhip:[255,239,213],peachpuff:[255,218,185],peru:[205,133,63],pink:[255,192,203],plum:[221,160,221],powderblue:[176,224,230],purple:[128,0,128],rebeccapurple:[102,51,153],red:[255,0,0],rosybrown:[188,143,143],royalblue:[65,105,225],saddlebrown:[139,69,19],salmon:[250,128,114],sandybrown:[244,164,96],seagreen:[46,139,87],seashell:[255,245,238],sienna:[160,82,45],silver:[192,192,192],skyblue:[135,206,235],slateblue:[106,90,205],slategray:[112,128,144],slategrey:[112,128,144],snow:[255,250,250],springgreen:[0,255,127],steelblue:[70,130,180],tan:[210,180,140],teal:[0,128,128],thistle:[216,191,216],tomato:[255,99,71],turquoise:[64,224,208],violet:[238,130,238],wheat:[245,222,179],white:[255,255,255],whitesmoke:[245,245,245],yellow:[255,255,0],yellowgreen:[154,205,50]},A={getRgba:F,getHsla:W,getRgb:function(e){var t=F(e);return t&&t.slice(0,3)},getHsl:function(e){var t=W(e);return t&&t.slice(0,3)},getHwb:C,getAlpha:function(e){var t=F(e);return t?t[3]:(t=W(e))?t[3]:(t=C(e))?t[3]:void 0},hexString:function(e,t){return t=void 0!==t&&3===e.length?t:e[3],"#"+N(e[0])+N(e[1])+N(e[2])+(t>=0&&t<1?N(Math.round(255*t)):"")},rgbString:function(e,t){return t<1||e[3]&&e[3]<1?E(e,t):"rgb("+e[0]+", "+e[1]+", "+e[2]+")"},rgbaString:E,percentString:function(e,t){if(t<1||e[3]&&e[3]<1)return I(e,t);var a=Math.round(e[0]/255*100),n=Math.round(e[1]/255*100),i=Math.round(e[2]/255*100);return"rgb("+a+"%, "+n+"%, "+i+"%)"},percentaString:I,hslString:function(e,t){return t<1||e[3]&&e[3]<1?z(e,t):"hsl("+e[0]+", "+e[1]+"%, "+e[2]+"%)"},hslaString:z,hwbString:function(e,t){return void 0===t&&(t=void 0!==e[3]?e[3]:1),"hwb("+e[0]+", "+e[1]+"%, "+e[2]+"%"+(void 0!==t&&1!==t?", "+t:"")+")"},keyword:function(e){return V[e.slice(0,3)]}};function F(e){if(e){var t=[0,0,0],a=1,n=e.match(/^#([a-fA-F0-9]{3,4})$/i),i="";if(n){i=(n=n[1])[3];for(var r=0;r<t.length;r++)t[r]=parseInt(n[r]+n[r],16);i&&(a=Math.round(parseInt(i+i,16)/255*100)/100)}else if(n=e.match(/^#([a-fA-F0-9]{6}([a-fA-F0-9]{2})?)$/i)){for(i=n[2],n=n[1],r=0;r<t.length;r++)t[r]=parseInt(n.slice(2*r,2*r+2),16);i&&(a=Math.round(parseInt(i,16)/255*100)/100)}else if(n=e.match(/^rgba?\(\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/i)){for(r=0;r<t.length;r++)t[r]=parseInt(n[r+1]);a=parseFloat(n[4])}else if(n=e.match(/^rgba?\(\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/i)){for(r=0;r<t.length;r++)t[r]=Math.round(2.55*parseFloat(n[r+1]));a=parseFloat(n[4])}else if(n=e.match(/(\w+)/)){if("transparent"==n[1])return[0,0,0,0];if(!(t=O[n[1]]))return}for(r=0;r<t.length;r++)t[r]=R(t[r],0,255);return a=a||0==a?R(a,0,1):1,t[3]=a,t}}function W(e){if(e){var t=e.match(/^hsla?\(\s*([+-]?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)/);if(t){var a=parseFloat(t[4]);return[R(parseInt(t[1]),0,360),R(parseFloat(t[2]),0,100),R(parseFloat(t[3]),0,100),R(isNaN(a)?1:a,0,1)]}}}function C(e){if(e){var t=e.match(/^hwb\(\s*([+-]?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)/);if(t){var a=parseFloat(t[4]);return[R(parseInt(t[1]),0,360),R(parseFloat(t[2]),0,100),R(parseFloat(t[3]),0,100),R(isNaN(a)?1:a,0,1)]}}}function E(e,t){return void 0===t&&(t=void 0!==e[3]?e[3]:1),"rgba("+e[0]+", "+e[1]+", "+e[2]+", "+t+")"}function I(e,t){return"rgba("+Math.round(e[0]/255*100)+"%, "+Math.round(e[1]/255*100)+"%, "+Math.round(e[2]/255*100)+"%, "+(t||e[3]||1)+")"}function z(e,t){return void 0===t&&(t=void 0!==e[3]?e[3]:1),"hsla("+e[0]+", "+e[1]+"%, "+e[2]+"%, "+t+")"}function R(e,t,a){return Math.min(Math.max(t,e),a)}function N(e){var t=e.toString(16).toUpperCase();return t.length<2?"0"+t:t}var V={};for(var B in O)V[O[B]]=B;var J=function(e){return e instanceof J?e:this instanceof J?(this.valid=!1,this.values={rgb:[0,0,0],hsl:[0,0,0],hsv:[0,0,0],hwb:[0,0,0],cmyk:[0,0,0,0],alpha:1},void("string"===typeof e?(t=A.getRgba(e))?this.setValues("rgb",t):(t=A.getHsla(e))?this.setValues("hsl",t):(t=A.getHwb(e))&&this.setValues("hwb",t):"object"===typeof e&&(void 0!==(t=e).r||void 0!==t.red?this.setValues("rgb",t):void 0!==t.l||void 0!==t.lightness?this.setValues("hsl",t):void 0!==t.v||void 0!==t.value?this.setValues("hsv",t):void 0!==t.w||void 0!==t.whiteness?this.setValues("hwb",t):void 0===t.c&&void 0===t.cyan||this.setValues("cmyk",t)))):new J(e);var t};J.prototype={isValid:function(){return this.valid},rgb:function(){return this.setSpace("rgb",arguments)},hsl:function(){return this.setSpace("hsl",arguments)},hsv:function(){return this.setSpace("hsv",arguments)},hwb:function(){return this.setSpace("hwb",arguments)},cmyk:function(){return this.setSpace("cmyk",arguments)},rgbArray:function(){return this.values.rgb},hslArray:function(){return this.values.hsl},hsvArray:function(){return this.values.hsv},hwbArray:function(){var e=this.values;return 1!==e.alpha?e.hwb.concat([e.alpha]):e.hwb},cmykArray:function(){return this.values.cmyk},rgbaArray:function(){var e=this.values;return e.rgb.concat([e.alpha])},hslaArray:function(){var e=this.values;return e.hsl.concat([e.alpha])},alpha:function(e){return void 0===e?this.values.alpha:(this.setValues("alpha",e),this)},red:function(e){return this.setChannel("rgb",0,e)},green:function(e){return this.setChannel("rgb",1,e)},blue:function(e){return this.setChannel("rgb",2,e)},hue:function(e){return e&&(e=(e%=360)<0?360+e:e),this.setChannel("hsl",0,e)},saturation:function(e){return this.setChannel("hsl",1,e)},lightness:function(e){return this.setChannel("hsl",2,e)},saturationv:function(e){return this.setChannel("hsv",1,e)},whiteness:function(e){return this.setChannel("hwb",1,e)},blackness:function(e){return this.setChannel("hwb",2,e)},value:function(e){return this.setChannel("hsv",2,e)},cyan:function(e){return this.setChannel("cmyk",0,e)},magenta:function(e){return this.setChannel("cmyk",1,e)},yellow:function(e){return this.setChannel("cmyk",2,e)},black:function(e){return this.setChannel("cmyk",3,e)},hexString:function(){return A.hexString(this.values.rgb)},rgbString:function(){return A.rgbString(this.values.rgb,this.values.alpha)},rgbaString:function(){return A.rgbaString(this.values.rgb,this.values.alpha)},percentString:function(){return A.percentString(this.values.rgb,this.values.alpha)},hslString:function(){return A.hslString(this.values.hsl,this.values.alpha)},hslaString:function(){return A.hslaString(this.values.hsl,this.values.alpha)},hwbString:function(){return A.hwbString(this.values.hwb,this.values.alpha)},keyword:function(){return A.keyword(this.values.rgb,this.values.alpha)},rgbNumber:function(){var e=this.values.rgb;return e[0]<<16|e[1]<<8|e[2]},luminosity:function(){for(var e=this.values.rgb,t=[],a=0;a<e.length;a++){var n=e[a]/255;t[a]=n<=.03928?n/12.92:Math.pow((n+.055)/1.055,2.4)}return.2126*t[0]+.7152*t[1]+.0722*t[2]},contrast:function(e){var t=this.luminosity(),a=e.luminosity();return t>a?(t+.05)/(a+.05):(a+.05)/(t+.05)},level:function(e){var t=this.contrast(e);return t>=7.1?"AAA":t>=4.5?"AA":""},dark:function(){var e=this.values.rgb;return(299*e[0]+587*e[1]+114*e[2])/1e3<128},light:function(){return!this.dark()},negate:function(){for(var e=[],t=0;t<3;t++)e[t]=255-this.values.rgb[t];return this.setValues("rgb",e),this},lighten:function(e){var t=this.values.hsl;return t[2]+=t[2]*e,this.setValues("hsl",t),this},darken:function(e){var t=this.values.hsl;return t[2]-=t[2]*e,this.setValues("hsl",t),this},saturate:function(e){var t=this.values.hsl;return t[1]+=t[1]*e,this.setValues("hsl",t),this},desaturate:function(e){var t=this.values.hsl;return t[1]-=t[1]*e,this.setValues("hsl",t),this},whiten:function(e){var t=this.values.hwb;return t[1]+=t[1]*e,this.setValues("hwb",t),this},blacken:function(e){var t=this.values.hwb;return t[2]+=t[2]*e,this.setValues("hwb",t),this},greyscale:function(){var e=this.values.rgb,t=.3*e[0]+.59*e[1]+.11*e[2];return this.setValues("rgb",[t,t,t]),this},clearer:function(e){var t=this.values.alpha;return this.setValues("alpha",t-t*e),this},opaquer:function(e){var t=this.values.alpha;return this.setValues("alpha",t+t*e),this},rotate:function(e){var t=this.values.hsl,a=(t[0]+e)%360;return t[0]=a<0?360+a:a,this.setValues("hsl",t),this},mix:function(e,t){var a=e,n=void 0===t?.5:t,i=2*n-1,r=this.alpha()-a.alpha(),s=((i*r===-1?i:(i+r)/(1+i*r))+1)/2,o=1-s;return this.rgb(s*this.red()+o*a.red(),s*this.green()+o*a.green(),s*this.blue()+o*a.blue()).alpha(this.alpha()*n+a.alpha()*(1-n))},toJSON:function(){return this.rgb()},clone:function(){var e,t,a=new J,n=this.values,i=a.values;for(var r in n)n.hasOwnProperty(r)&&(e=n[r],"[object Array]"===(t={}.toString.call(e))?i[r]=e.slice(0):"[object Number]"===t?i[r]=e:console.error("unexpected color value:",e));return a}},J.prototype.spaces={rgb:["red","green","blue"],hsl:["hue","saturation","lightness"],hsv:["hue","saturation","value"],hwb:["hue","whiteness","blackness"],cmyk:["cyan","magenta","yellow","black"]},J.prototype.maxes={rgb:[255,255,255],hsl:[360,100,100],hsv:[360,100,100],hwb:[360,100,100],cmyk:[100,100,100,100]},J.prototype.getValues=function(e){for(var t=this.values,a={},n=0;n<e.length;n++)a[e.charAt(n)]=t[e][n];return 1!==t.alpha&&(a.a=t.alpha),a},J.prototype.setValues=function(e,t){var a,n,i=this.values,r=this.spaces,s=this.maxes,o=1;if(this.valid=!0,"alpha"===e)o=t;else if(t.length)i[e]=t.slice(0,e.length),o=t[e.length];else if(void 0!==t[e.charAt(0)]){for(a=0;a<e.length;a++)i[e][a]=t[e.charAt(a)];o=t.a}else if(void 0!==t[r[e][0]]){var d=r[e];for(a=0;a<e.length;a++)i[e][a]=t[d[a]];o=t.alpha}if(i.alpha=Math.max(0,Math.min(1,void 0===o?i.alpha:o)),"alpha"===e)return!1;for(a=0;a<e.length;a++)n=Math.max(0,Math.min(s[e][a],i[e][a])),i[e][a]=Math.round(n);for(var l in r)l!==e&&(i[l]=P[e][l](i[e]));return!0},J.prototype.setSpace=function(e,t){var a=t[0];return void 0===a?this.getValues(e):("number"===typeof a&&(a=Array.prototype.slice.call(t)),this.setValues(e,a),this)},J.prototype.setChannel=function(e,t,a){var n=this.values[e];return void 0===a?n[t]:a===n[t]?this:(n[t]=a,this.setValues(e,n),this)},"undefined"!==typeof window&&(window.Color=J);var U=J,G={noop:function(){},uid:function(){var e=0;return function(){return e++}}(),isNullOrUndef:function(e){return null===e||"undefined"===typeof e},isArray:function(e){if(Array.isArray&&Array.isArray(e))return!0;var t=Object.prototype.toString.call(e);return"[object"===t.substr(0,7)&&"Array]"===t.substr(-6)},isObject:function(e){return null!==e&&"[object Object]"===Object.prototype.toString.call(e)},isFinite:function(e){return("number"===typeof e||e instanceof Number)&&isFinite(e)},valueOrDefault:function(e,t){return"undefined"===typeof e?t:e},valueAtIndexOrDefault:function(e,t,a){return G.valueOrDefault(G.isArray(e)?e[t]:e,a)},callback:function(e,t,a){if(e&&"function"===typeof e.call)return e.apply(a,t)},each:function(e,t,a,n){var i,r,s;if(G.isArray(e))if(r=e.length,n)for(i=r-1;i>=0;i--)t.call(a,e[i],i);else for(i=0;i<r;i++)t.call(a,e[i],i);else if(G.isObject(e))for(r=(s=Object.keys(e)).length,i=0;i<r;i++)t.call(a,e[s[i]],s[i])},arrayEquals:function(e,t){var a,n,i,r;if(!e||!t||e.length!==t.length)return!1;for(a=0,n=e.length;a<n;++a)if(i=e[a],r=t[a],i instanceof Array&&r instanceof Array){if(!G.arrayEquals(i,r))return!1}else if(i!==r)return!1;return!0},clone:function(e){if(G.isArray(e))return e.map(G.clone);if(G.isObject(e)){for(var t={},a=Object.keys(e),n=a.length,i=0;i<n;++i)t[a[i]]=G.clone(e[a[i]]);return t}return e},_merger:function(e,t,a,n){var i=t[e],r=a[e];G.isObject(i)&&G.isObject(r)?G.merge(i,r,n):t[e]=G.clone(r)},_mergerIf:function(e,t,a){var n=t[e],i=a[e];G.isObject(n)&&G.isObject(i)?G.mergeIf(n,i):t.hasOwnProperty(e)||(t[e]=G.clone(i))},merge:function(e,t,a){var n,i,r,s,o,d=G.isArray(t)?t:[t],l=d.length;if(!G.isObject(e))return e;for(n=(a=a||{}).merger||G._merger,i=0;i<l;++i)if(t=d[i],G.isObject(t))for(o=0,s=(r=Object.keys(t)).length;o<s;++o)n(r[o],e,t,a);return e},mergeIf:function(e,t){return G.merge(e,t,{merger:G._mergerIf})},extend:function(e){for(var t=function(t,a){e[a]=t},a=1,n=arguments.length;a<n;++a)G.each(arguments[a],t);return e},inherits:function(e){var t=this,a=e&&e.hasOwnProperty("constructor")?e.constructor:function(){return t.apply(this,arguments)},n=function(){this.constructor=a};return n.prototype=t.prototype,a.prototype=new n,a.extend=G.inherits,e&&G.extend(a.prototype,e),a.__super__=t.prototype,a}},q=G;G.callCallback=G.callback,G.indexOf=function(e,t,a){return Array.prototype.indexOf.call(e,t,a)},G.getValueOrDefault=G.valueOrDefault,G.getValueAtIndexOrDefault=G.valueAtIndexOrDefault;var K={linear:function(e){return e},easeInQuad:function(e){return e*e},easeOutQuad:function(e){return-e*(e-2)},easeInOutQuad:function(e){return(e/=.5)<1?.5*e*e:-.5*(--e*(e-2)-1)},easeInCubic:function(e){return e*e*e},easeOutCubic:function(e){return(e-=1)*e*e+1},easeInOutCubic:function(e){return(e/=.5)<1?.5*e*e*e:.5*((e-=2)*e*e+2)},easeInQuart:function(e){return e*e*e*e},easeOutQuart:function(e){return-((e-=1)*e*e*e-1)},easeInOutQuart:function(e){return(e/=.5)<1?.5*e*e*e*e:-.5*((e-=2)*e*e*e-2)},easeInQuint:function(e){return e*e*e*e*e},easeOutQuint:function(e){return(e-=1)*e*e*e*e+1},easeInOutQuint:function(e){return(e/=.5)<1?.5*e*e*e*e*e:.5*((e-=2)*e*e*e*e+2)},easeInSine:function(e){return 1-Math.cos(e*(Math.PI/2))},easeOutSine:function(e){return Math.sin(e*(Math.PI/2))},easeInOutSine:function(e){return-.5*(Math.cos(Math.PI*e)-1)},easeInExpo:function(e){return 0===e?0:Math.pow(2,10*(e-1))},easeOutExpo:function(e){return 1===e?1:1-Math.pow(2,-10*e)},easeInOutExpo:function(e){return 0===e?0:1===e?1:(e/=.5)<1?.5*Math.pow(2,10*(e-1)):.5*(2-Math.pow(2,-10*--e))},easeInCirc:function(e){return e>=1?e:-(Math.sqrt(1-e*e)-1)},easeOutCirc:function(e){return Math.sqrt(1-(e-=1)*e)},easeInOutCirc:function(e){return(e/=.5)<1?-.5*(Math.sqrt(1-e*e)-1):.5*(Math.sqrt(1-(e-=2)*e)+1)},easeInElastic:function(e){var t=1.70158,a=0,n=1;return 0===e?0:1===e?1:(a||(a=.3),n<1?(n=1,t=a/4):t=a/(2*Math.PI)*Math.asin(1/n),-n*Math.pow(2,10*(e-=1))*Math.sin((e-t)*(2*Math.PI)/a))},easeOutElastic:function(e){var t=1.70158,a=0,n=1;return 0===e?0:1===e?1:(a||(a=.3),n<1?(n=1,t=a/4):t=a/(2*Math.PI)*Math.asin(1/n),n*Math.pow(2,-10*e)*Math.sin((e-t)*(2*Math.PI)/a)+1)},easeInOutElastic:function(e){var t=1.70158,a=0,n=1;return 0===e?0:2===(e/=.5)?1:(a||(a=.45),n<1?(n=1,t=a/4):t=a/(2*Math.PI)*Math.asin(1/n),e<1?n*Math.pow(2,10*(e-=1))*Math.sin((e-t)*(2*Math.PI)/a)*-.5:n*Math.pow(2,-10*(e-=1))*Math.sin((e-t)*(2*Math.PI)/a)*.5+1)},easeInBack:function(e){var t=1.70158;return e*e*((t+1)*e-t)},easeOutBack:function(e){var t=1.70158;return(e-=1)*e*((t+1)*e+t)+1},easeInOutBack:function(e){var t=1.70158;return(e/=.5)<1?e*e*((1+(t*=1.525))*e-t)*.5:.5*((e-=2)*e*((1+(t*=1.525))*e+t)+2)},easeInBounce:function(e){return 1-K.easeOutBounce(1-e)},easeOutBounce:function(e){return e<1/2.75?7.5625*e*e:e<2/2.75?7.5625*(e-=1.5/2.75)*e+.75:e<2.5/2.75?7.5625*(e-=2.25/2.75)*e+.9375:7.5625*(e-=2.625/2.75)*e+.984375},easeInOutBounce:function(e){return e<.5?.5*K.easeInBounce(2*e):.5*K.easeOutBounce(2*e-1)+.5}},Z={effects:K};q.easingEffects=K;var $=Math.PI,Q=$/180,X=2*$,ee=$/2,te=$/4,ae=2*$/3,ne={clear:function(e){e.ctx.clearRect(0,0,e.width,e.height)},roundedRect:function(e,t,a,n,i,r){if(r){var s=Math.min(r,i/2,n/2),o=t+s,d=a+s,l=t+n-s,u=a+i-s;e.moveTo(t,d),o<l&&d<u?(e.arc(o,d,s,-$,-ee),e.arc(l,d,s,-ee,0),e.arc(l,u,s,0,ee),e.arc(o,u,s,ee,$)):o<l?(e.moveTo(o,a),e.arc(l,d,s,-ee,ee),e.arc(o,d,s,ee,$+ee)):d<u?(e.arc(o,d,s,-$,0),e.arc(o,u,s,0,$)):e.arc(o,d,s,-$,$),e.closePath(),e.moveTo(t,a)}else e.rect(t,a,n,i)},drawPoint:function(e,t,a,n,i,r){var s,o,d,l,u,_=(r||0)*Q;if(!t||"object"!==typeof t||"[object HTMLImageElement]"!==(s=t.toString())&&"[object HTMLCanvasElement]"!==s){if(!(isNaN(a)||a<=0)){switch(e.beginPath(),t){default:e.arc(n,i,a,0,X),e.closePath();break;case"triangle":e.moveTo(n+Math.sin(_)*a,i-Math.cos(_)*a),_+=ae,e.lineTo(n+Math.sin(_)*a,i-Math.cos(_)*a),_+=ae,e.lineTo(n+Math.sin(_)*a,i-Math.cos(_)*a),e.closePath();break;case"rectRounded":l=a-(u=.516*a),o=Math.cos(_+te)*l,d=Math.sin(_+te)*l,e.arc(n-o,i-d,u,_-$,_-ee),e.arc(n+d,i-o,u,_-ee,_),e.arc(n+o,i+d,u,_,_+ee),e.arc(n-d,i+o,u,_+ee,_+$),e.closePath();break;case"rect":if(!r){l=Math.SQRT1_2*a,e.rect(n-l,i-l,2*l,2*l);break}_+=te;case"rectRot":o=Math.cos(_)*a,d=Math.sin(_)*a,e.moveTo(n-o,i-d),e.lineTo(n+d,i-o),e.lineTo(n+o,i+d),e.lineTo(n-d,i+o),e.closePath();break;case"crossRot":_+=te;case"cross":o=Math.cos(_)*a,d=Math.sin(_)*a,e.moveTo(n-o,i-d),e.lineTo(n+o,i+d),e.moveTo(n+d,i-o),e.lineTo(n-d,i+o);break;case"star":o=Math.cos(_)*a,d=Math.sin(_)*a,e.moveTo(n-o,i-d),e.lineTo(n+o,i+d),e.moveTo(n+d,i-o),e.lineTo(n-d,i+o),_+=te,o=Math.cos(_)*a,d=Math.sin(_)*a,e.moveTo(n-o,i-d),e.lineTo(n+o,i+d),e.moveTo(n+d,i-o),e.lineTo(n-d,i+o);break;case"line":o=Math.cos(_)*a,d=Math.sin(_)*a,e.moveTo(n-o,i-d),e.lineTo(n+o,i+d);break;case"dash":e.moveTo(n,i),e.lineTo(n+Math.cos(_)*a,i+Math.sin(_)*a)}e.fill(),e.stroke()}}else e.drawImage(t,n-t.width/2,i-t.height/2,t.width,t.height)},_isPointInArea:function(e,t){return e.x>t.left-1e-6&&e.x<t.right+1e-6&&e.y>t.top-1e-6&&e.y<t.bottom+1e-6},clipArea:function(e,t){e.save(),e.beginPath(),e.rect(t.left,t.top,t.right-t.left,t.bottom-t.top),e.clip()},unclipArea:function(e){e.restore()},lineTo:function(e,t,a,n){var i=a.steppedLine;if(i){if("middle"===i){var r=(t.x+a.x)/2;e.lineTo(r,n?a.y:t.y),e.lineTo(r,n?t.y:a.y)}else"after"===i&&!n||"after"!==i&&n?e.lineTo(t.x,a.y):e.lineTo(a.x,t.y);e.lineTo(a.x,a.y)}else a.tension?e.bezierCurveTo(n?t.controlPointPreviousX:t.controlPointNextX,n?t.controlPointPreviousY:t.controlPointNextY,n?a.controlPointNextX:a.controlPointPreviousX,n?a.controlPointNextY:a.controlPointPreviousY,a.x,a.y):e.lineTo(a.x,a.y)}},ie=ne;q.clear=ne.clear,q.drawRoundedRectangle=function(e){e.beginPath(),ne.roundedRect.apply(ne,arguments)};var re={_set:function(e,t){return q.merge(this[e]||(this[e]={}),t)}};re._set("global",{defaultColor:"rgba(0,0,0,0.1)",defaultFontColor:"#666",defaultFontFamily:"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",defaultFontSize:12,defaultFontStyle:"normal",defaultLineHeight:1.2,showLines:!0});var se=re,oe=q.valueOrDefault,de={toLineHeight:function(e,t){var a=(""+e).match(/^(normal|(\d+(?:\.\d+)?)(px|em|%)?)$/);if(!a||"normal"===a[1])return 1.2*t;switch(e=+a[2],a[3]){case"px":return e;case"%":e/=100}return t*e},toPadding:function(e){var t,a,n,i;return q.isObject(e)?(t=+e.top||0,a=+e.right||0,n=+e.bottom||0,i=+e.left||0):t=a=n=i=+e||0,{top:t,right:a,bottom:n,left:i,height:t+n,width:i+a}},_parseFont:function(e){var t=se.global,a=oe(e.fontSize,t.defaultFontSize),n={family:oe(e.fontFamily,t.defaultFontFamily),lineHeight:q.options.toLineHeight(oe(e.lineHeight,t.defaultLineHeight),a),size:a,style:oe(e.fontStyle,t.defaultFontStyle),weight:null,string:""};return n.string=function(e){return!e||q.isNullOrUndef(e.size)||q.isNullOrUndef(e.family)?null:(e.style?e.style+" ":"")+(e.weight?e.weight+" ":"")+e.size+"px "+e.family}(n),n},resolve:function(e,t,a){var n,i,r;for(n=0,i=e.length;n<i;++n)if(void 0!==(r=e[n])&&(void 0!==t&&"function"===typeof r&&(r=r(t)),void 0!==a&&q.isArray(r)&&(r=r[a]),void 0!==r))return r}},le=q,ue=Z,_e=ie,me=de;le.easing=ue,le.canvas=_e,le.options=me;var ce=function(e){le.extend(this,e),this.initialize.apply(this,arguments)};le.extend(ce.prototype,{initialize:function(){this.hidden=!1},pivot:function(){var e=this;return e._view||(e._view=le.clone(e._model)),e._start={},e},transition:function(e){var t=this,a=t._model,n=t._start,i=t._view;return a&&1!==e?(i||(i=t._view={}),n||(n=t._start={}),function(e,t,a,n){var i,r,s,o,d,l,u,_,m,c=Object.keys(a);for(i=0,r=c.length;i<r;++i)if(l=a[s=c[i]],t.hasOwnProperty(s)||(t[s]=l),(o=t[s])!==l&&"_"!==s[0]){if(e.hasOwnProperty(s)||(e[s]=o),(u=typeof l)===typeof(d=e[s]))if("string"===u){if((_=U(d)).valid&&(m=U(l)).valid){t[s]=m.mix(_,n).rgbString();continue}}else if(le.isFinite(d)&&le.isFinite(l)){t[s]=d+(l-d)*n;continue}t[s]=l}}(n,i,a,e),t):(t._view=a,t._start=null,t)},tooltipPosition:function(){return{x:this._model.x,y:this._model.y}},hasValue:function(){return le.isNumber(this._model.x)&&le.isNumber(this._model.y)}}),ce.extend=le.inherits;var he=ce,fe=he.extend({chart:null,currentStep:0,numSteps:60,easing:"",render:null,onAnimationProgress:null,onAnimationComplete:null}),Me=fe;Object.defineProperty(fe.prototype,"animationObject",{get:function(){return this}}),Object.defineProperty(fe.prototype,"chartInstance",{get:function(){return this.chart},set:function(e){this.chart=e}}),se._set("global",{animation:{duration:1e3,easing:"easeOutQuart",onProgress:le.noop,onComplete:le.noop}});var pe={animations:[],request:null,addAnimation:function(e,t,a,n){var i,r,s=this.animations;for(t.chart=e,t.startTime=Date.now(),t.duration=a,n||(e.animating=!0),i=0,r=s.length;i<r;++i)if(s[i].chart===e)return void(s[i]=t);s.push(t),1===s.length&&this.requestAnimationFrame()},cancelAnimation:function(e){var t=le.findIndex(this.animations,(function(t){return t.chart===e}));-1!==t&&(this.animations.splice(t,1),e.animating=!1)},requestAnimationFrame:function(){var e=this;null===e.request&&(e.request=le.requestAnimFrame.call(window,(function(){e.request=null,e.startDigest()})))},startDigest:function(){this.advance(),this.animations.length>0&&this.requestAnimationFrame()},advance:function(){for(var e,t,a,n,i=this.animations,r=0;r<i.length;)t=(e=i[r]).chart,a=e.numSteps,n=Math.floor((Date.now()-e.startTime)/e.duration*a)+1,e.currentStep=Math.min(n,a),le.callback(e.render,[t,e],t),le.callback(e.onAnimationProgress,[e],t),e.currentStep>=a?(le.callback(e.onAnimationComplete,[e],t),t.animating=!1,i.splice(r,1)):++r}},ye=le.options.resolve,ge=["push","pop","shift","splice","unshift"];function Le(e,t){var a=e._chartjs;if(a){var n=a.listeners,i=n.indexOf(t);-1!==i&&n.splice(i,1),n.length>0||(ge.forEach((function(t){delete e[t]})),delete e._chartjs)}}var Ye=function(e,t){this.initialize(e,t)};le.extend(Ye.prototype,{datasetElementType:null,dataElementType:null,initialize:function(e,t){this.chart=e,this.index=t,this.linkScales(),this.addElements()},updateIndex:function(e){this.index=e},linkScales:function(){var e=this,t=e.getMeta(),a=e.getDataset();null!==t.xAxisID&&t.xAxisID in e.chart.scales||(t.xAxisID=a.xAxisID||e.chart.options.scales.xAxes[0].id),null!==t.yAxisID&&t.yAxisID in e.chart.scales||(t.yAxisID=a.yAxisID||e.chart.options.scales.yAxes[0].id)},getDataset:function(){return this.chart.data.datasets[this.index]},getMeta:function(){return this.chart.getDatasetMeta(this.index)},getScaleForId:function(e){return this.chart.scales[e]},_getValueScaleId:function(){return this.getMeta().yAxisID},_getIndexScaleId:function(){return this.getMeta().xAxisID},_getValueScale:function(){return this.getScaleForId(this._getValueScaleId())},_getIndexScale:function(){return this.getScaleForId(this._getIndexScaleId())},reset:function(){this.update(!0)},destroy:function(){this._data&&Le(this._data,this)},createMetaDataset:function(){var e=this.datasetElementType;return e&&new e({_chart:this.chart,_datasetIndex:this.index})},createMetaData:function(e){var t=this.dataElementType;return t&&new t({_chart:this.chart,_datasetIndex:this.index,_index:e})},addElements:function(){var e,t,a=this.getMeta(),n=this.getDataset().data||[],i=a.data;for(e=0,t=n.length;e<t;++e)i[e]=i[e]||this.createMetaData(e);a.dataset=a.dataset||this.createMetaDataset()},addElementAndReset:function(e){var t=this.createMetaData(e);this.getMeta().data.splice(e,0,t),this.updateElement(t,e,!0)},buildOrUpdateElements:function(){var e,t,a=this,n=a.getDataset(),i=n.data||(n.data=[]);a._data!==i&&(a._data&&Le(a._data,a),i&&Object.isExtensible(i)&&(t=a,(e=i)._chartjs?e._chartjs.listeners.push(t):(Object.defineProperty(e,"_chartjs",{configurable:!0,enumerable:!1,value:{listeners:[t]}}),ge.forEach((function(t){var a="onData"+t.charAt(0).toUpperCase()+t.slice(1),n=e[t];Object.defineProperty(e,t,{configurable:!0,enumerable:!1,value:function(){var t=Array.prototype.slice.call(arguments),i=n.apply(this,t);return le.each(e._chartjs.listeners,(function(e){"function"===typeof e[a]&&e[a].apply(e,t)})),i}})})))),a._data=i),a.resyncElements()},update:le.noop,transition:function(e){for(var t=this.getMeta(),a=t.data||[],n=a.length,i=0;i<n;++i)a[i].transition(e);t.dataset&&t.dataset.transition(e)},draw:function(){var e=this.getMeta(),t=e.data||[],a=t.length,n=0;for(e.dataset&&e.dataset.draw();n<a;++n)t[n].draw()},removeHoverStyle:function(e){le.merge(e._model,e.$previousStyle||{}),delete e.$previousStyle},setHoverStyle:function(e){var t=this.chart.data.datasets[e._datasetIndex],a=e._index,n=e.custom||{},i=e._model,r=le.getHoverColor;e.$previousStyle={backgroundColor:i.backgroundColor,borderColor:i.borderColor,borderWidth:i.borderWidth},i.backgroundColor=ye([n.hoverBackgroundColor,t.hoverBackgroundColor,r(i.backgroundColor)],void 0,a),i.borderColor=ye([n.hoverBorderColor,t.hoverBorderColor,r(i.borderColor)],void 0,a),i.borderWidth=ye([n.hoverBorderWidth,t.hoverBorderWidth,i.borderWidth],void 0,a)},resyncElements:function(){var e=this.getMeta(),t=this.getDataset().data,a=e.data.length,n=t.length;n<a?e.data.splice(n,a-n):n>a&&this.insertElements(a,n-a)},insertElements:function(e,t){for(var a=0;a<t;++a)this.addElementAndReset(e+a)},onDataPush:function(){var e=arguments.length;this.insertElements(this.getDataset().data.length-e,e)},onDataPop:function(){this.getMeta().data.pop()},onDataShift:function(){this.getMeta().data.shift()},onDataSplice:function(e,t){this.getMeta().data.splice(e,t),this.insertElements(e,arguments.length-2)},onDataUnshift:function(){this.insertElements(0,arguments.length)}}),Ye.extend=le.inherits;var ve=Ye;se._set("global",{elements:{arc:{backgroundColor:se.global.defaultColor,borderColor:"#fff",borderWidth:2,borderAlign:"center"}}});var ke=he.extend({inLabelRange:function(e){var t=this._view;return!!t&&Math.pow(e-t.x,2)<Math.pow(t.radius+t.hoverRadius,2)},inRange:function(e,t){var a=this._view;if(a){for(var n=le.getAngleFromPoint(a,{x:e,y:t}),i=n.angle,r=n.distance,s=a.startAngle,o=a.endAngle;o<s;)o+=2*Math.PI;for(;i>o;)i-=2*Math.PI;for(;i<s;)i+=2*Math.PI;var d=i>=s&&i<=o,l=r>=a.innerRadius&&r<=a.outerRadius;return d&&l}return!1},getCenterPoint:function(){var e=this._view,t=(e.startAngle+e.endAngle)/2,a=(e.innerRadius+e.outerRadius)/2;return{x:e.x+Math.cos(t)*a,y:e.y+Math.sin(t)*a}},getArea:function(){var e=this._view;return Math.PI*((e.endAngle-e.startAngle)/(2*Math.PI))*(Math.pow(e.outerRadius,2)-Math.pow(e.innerRadius,2))},tooltipPosition:function(){var e=this._view,t=e.startAngle+(e.endAngle-e.startAngle)/2,a=(e.outerRadius-e.innerRadius)/2+e.innerRadius;return{x:e.x+Math.cos(t)*a,y:e.y+Math.sin(t)*a}},draw:function(){var e,t=this._chart.ctx,a=this._view,n=a.startAngle,i=a.endAngle,r="inner"===a.borderAlign?.33:0;t.save(),t.beginPath(),t.arc(a.x,a.y,Math.max(a.outerRadius-r,0),n,i),t.arc(a.x,a.y,a.innerRadius,i,n,!0),t.closePath(),t.fillStyle=a.backgroundColor,t.fill(),a.borderWidth&&("inner"===a.borderAlign?(t.beginPath(),e=r/a.outerRadius,t.arc(a.x,a.y,a.outerRadius,n-e,i+e),a.innerRadius>r?(e=r/a.innerRadius,t.arc(a.x,a.y,a.innerRadius-r,i+e,n-e,!0)):t.arc(a.x,a.y,r,i+Math.PI/2,n-Math.PI/2),t.closePath(),t.clip(),t.beginPath(),t.arc(a.x,a.y,a.outerRadius,n,i),t.arc(a.x,a.y,a.innerRadius,i,n,!0),t.closePath(),t.lineWidth=2*a.borderWidth,t.lineJoin="round"):(t.lineWidth=a.borderWidth,t.lineJoin="bevel"),t.strokeStyle=a.borderColor,t.stroke()),t.restore()}}),be=le.valueOrDefault,De=se.global.defaultColor;se._set("global",{elements:{line:{tension:.4,backgroundColor:De,borderWidth:3,borderColor:De,borderCapStyle:"butt",borderDash:[],borderDashOffset:0,borderJoinStyle:"miter",capBezierPoints:!0,fill:!0}}});var we=he.extend({draw:function(){var e,t,a,n,i=this._view,r=this._chart.ctx,s=i.spanGaps,o=this._children.slice(),d=se.global,l=d.elements.line,u=-1;for(this._loop&&o.length&&o.push(o[0]),r.save(),r.lineCap=i.borderCapStyle||l.borderCapStyle,r.setLineDash&&r.setLineDash(i.borderDash||l.borderDash),r.lineDashOffset=be(i.borderDashOffset,l.borderDashOffset),r.lineJoin=i.borderJoinStyle||l.borderJoinStyle,r.lineWidth=be(i.borderWidth,l.borderWidth),r.strokeStyle=i.borderColor||d.defaultColor,r.beginPath(),u=-1,e=0;e<o.length;++e)t=o[e],a=le.previousItem(o,e),n=t._view,0===e?n.skip||(r.moveTo(n.x,n.y),u=e):(a=-1===u?a:o[u],n.skip||(u!==e-1&&!s||-1===u?r.moveTo(n.x,n.y):le.canvas.lineTo(r,a._view,t._view),u=e));r.stroke(),r.restore()}}),Te=le.valueOrDefault,xe=se.global.defaultColor;function Se(e){var t=this._view;return!!t&&Math.abs(e-t.x)<t.radius+t.hitRadius}se._set("global",{elements:{point:{radius:3,pointStyle:"circle",backgroundColor:xe,borderColor:xe,borderWidth:1,hitRadius:1,hoverRadius:4,hoverBorderWidth:1}}});var He=he.extend({inRange:function(e,t){var a=this._view;return!!a&&Math.pow(e-a.x,2)+Math.pow(t-a.y,2)<Math.pow(a.hitRadius+a.radius,2)},inLabelRange:Se,inXRange:Se,inYRange:function(e){var t=this._view;return!!t&&Math.abs(e-t.y)<t.radius+t.hitRadius},getCenterPoint:function(){var e=this._view;return{x:e.x,y:e.y}},getArea:function(){return Math.PI*Math.pow(this._view.radius,2)},tooltipPosition:function(){var e=this._view;return{x:e.x,y:e.y,padding:e.radius+e.borderWidth}},draw:function(e){var t=this._view,a=this._chart.ctx,n=t.pointStyle,i=t.rotation,r=t.radius,s=t.x,o=t.y,d=se.global,l=d.defaultColor;t.skip||(void 0===e||le.canvas._isPointInArea(t,e))&&(a.strokeStyle=t.borderColor||l,a.lineWidth=Te(t.borderWidth,d.elements.point.borderWidth),a.fillStyle=t.backgroundColor||l,le.canvas.drawPoint(a,n,r,s,o,i))}}),je=se.global.defaultColor;function Pe(e){return e&&void 0!==e.width}function Oe(e){var t,a,n,i,r;return Pe(e)?(r=e.width/2,t=e.x-r,a=e.x+r,n=Math.min(e.y,e.base),i=Math.max(e.y,e.base)):(r=e.height/2,t=Math.min(e.x,e.base),a=Math.max(e.x,e.base),n=e.y-r,i=e.y+r),{left:t,top:n,right:a,bottom:i}}function Ae(e,t,a){return e===t?a:e===a?t:e}function Fe(e,t,a){var n,i,r,s,o=e.borderWidth,d=function(e){var t=e.borderSkipped,a={};return t?(e.horizontal?e.base>e.x&&(t=Ae(t,"left","right")):e.base<e.y&&(t=Ae(t,"bottom","top")),a[t]=!0,a):a}(e);return le.isObject(o)?(n=+o.top||0,i=+o.right||0,r=+o.bottom||0,s=+o.left||0):n=i=r=s=+o||0,{t:d.top||n<0?0:n>a?a:n,r:d.right||i<0?0:i>t?t:i,b:d.bottom||r<0?0:r>a?a:r,l:d.left||s<0?0:s>t?t:s}}function We(e,t,a){var n=null===t,i=null===a,r=!(!e||n&&i)&&Oe(e);return r&&(n||t>=r.left&&t<=r.right)&&(i||a>=r.top&&a<=r.bottom)}se._set("global",{elements:{rectangle:{backgroundColor:je,borderColor:je,borderSkipped:"bottom",borderWidth:0}}});var Ce=he.extend({draw:function(){var e=this._chart.ctx,t=this._view,a=function(e){var t=Oe(e),a=t.right-t.left,n=t.bottom-t.top,i=Fe(e,a/2,n/2);return{outer:{x:t.left,y:t.top,w:a,h:n},inner:{x:t.left+i.l,y:t.top+i.t,w:a-i.l-i.r,h:n-i.t-i.b}}}(t),n=a.outer,i=a.inner;e.fillStyle=t.backgroundColor,e.fillRect(n.x,n.y,n.w,n.h),n.w===i.w&&n.h===i.h||(e.save(),e.beginPath(),e.rect(n.x,n.y,n.w,n.h),e.clip(),e.fillStyle=t.borderColor,e.rect(i.x,i.y,i.w,i.h),e.fill("evenodd"),e.restore())},height:function(){var e=this._view;return e.base-e.y},inRange:function(e,t){return We(this._view,e,t)},inLabelRange:function(e,t){var a=this._view;return Pe(a)?We(a,e,null):We(a,null,t)},inXRange:function(e){return We(this._view,e,null)},inYRange:function(e){return We(this._view,null,e)},getCenterPoint:function(){var e,t,a=this._view;return Pe(a)?(e=a.x,t=(a.y+a.base)/2):(e=(a.x+a.base)/2,t=a.y),{x:e,y:t}},getArea:function(){var e=this._view;return Pe(e)?e.width*Math.abs(e.y-e.base):e.height*Math.abs(e.x-e.base)},tooltipPosition:function(){var e=this._view;return{x:e.x,y:e.y}}}),Ee={},Ie=ke,ze=we,Re=He,Ne=Ce;Ee.Arc=Ie,Ee.Line=ze,Ee.Point=Re,Ee.Rectangle=Ne;var Ve=le.options.resolve;se._set("bar",{hover:{mode:"label"},scales:{xAxes:[{type:"category",categoryPercentage:.8,barPercentage:.9,offset:!0,gridLines:{offsetGridLines:!0}}],yAxes:[{type:"linear"}]}});var Be=ve.extend({dataElementType:Ee.Rectangle,initialize:function(){var e,t=this;ve.prototype.initialize.apply(t,arguments),(e=t.getMeta()).stack=t.getDataset().stack,e.bar=!0},update:function(e){var t,a,n=this.getMeta().data;for(this._ruler=this.getRuler(),t=0,a=n.length;t<a;++t)this.updateElement(n[t],t,e)},updateElement:function(e,t,a){var n=this,i=n.getMeta(),r=n.getDataset(),s=n._resolveElementOptions(e,t);e._xScale=n.getScaleForId(i.xAxisID),e._yScale=n.getScaleForId(i.yAxisID),e._datasetIndex=n.index,e._index=t,e._model={backgroundColor:s.backgroundColor,borderColor:s.borderColor,borderSkipped:s.borderSkipped,borderWidth:s.borderWidth,datasetLabel:r.label,label:n.chart.data.labels[t]},n._updateElementGeometry(e,t,a),e.pivot()},_updateElementGeometry:function(e,t,a){var n=this,i=e._model,r=n._getValueScale(),s=r.getBasePixel(),o=r.isHorizontal(),d=n._ruler||n.getRuler(),l=n.calculateBarValuePixels(n.index,t),u=n.calculateBarIndexPixels(n.index,t,d);i.horizontal=o,i.base=a?s:l.base,i.x=o?a?s:l.head:u.center,i.y=o?u.center:a?s:l.head,i.height=o?u.size:void 0,i.width=o?void 0:u.size},_getStacks:function(e){var t,a,n=this.chart,i=this._getIndexScale().options.stacked,r=void 0===e?n.data.datasets.length:e+1,s=[];for(t=0;t<r;++t)(a=n.getDatasetMeta(t)).bar&&n.isDatasetVisible(t)&&(!1===i||!0===i&&-1===s.indexOf(a.stack)||void 0===i&&(void 0===a.stack||-1===s.indexOf(a.stack)))&&s.push(a.stack);return s},getStackCount:function(){return this._getStacks().length},getStackIndex:function(e,t){var a=this._getStacks(e),n=void 0!==t?a.indexOf(t):-1;return-1===n?a.length-1:n},getRuler:function(){var e,t,a=this._getIndexScale(),n=this.getStackCount(),i=this.index,r=a.isHorizontal(),s=r?a.left:a.top,o=s+(r?a.width:a.height),d=[];for(e=0,t=this.getMeta().data.length;e<t;++e)d.push(a.getPixelForValue(null,e,i));return{min:le.isNullOrUndef(a.options.barThickness)?function(e,t){var a,n,i,r,s=e.isHorizontal()?e.width:e.height,o=e.getTicks();for(i=1,r=t.length;i<r;++i)s=Math.min(s,Math.abs(t[i]-t[i-1]));for(i=0,r=o.length;i<r;++i)n=e.getPixelForTick(i),s=i>0?Math.min(s,n-a):s,a=n;return s}(a,d):-1,pixels:d,start:s,end:o,stackCount:n,scale:a}},calculateBarValuePixels:function(e,t){var a,n,i,r,s,o,d=this.chart,l=this.getMeta(),u=this._getValueScale(),_=u.isHorizontal(),m=d.data.datasets,c=+u.getRightValue(m[e].data[t]),h=u.options.minBarLength,f=u.options.stacked,M=l.stack,p=0;if(f||void 0===f&&void 0!==M)for(a=0;a<e;++a)(n=d.getDatasetMeta(a)).bar&&n.stack===M&&n.controller._getValueScaleId()===u.id&&d.isDatasetVisible(a)&&(i=+u.getRightValue(m[a].data[t]),(c<0&&i<0||c>=0&&i>0)&&(p+=i));return r=u.getPixelForValue(p),o=(s=u.getPixelForValue(p+c))-r,void 0!==h&&Math.abs(o)<h&&(o=h,s=c>=0&&!_||c<0&&_?r-h:r+h),{size:o,base:r,head:s,center:s+o/2}},calculateBarIndexPixels:function(e,t,a){var n=a.scale.options,i="flex"===n.barThickness?function(e,t,a){var n,i=t.pixels,r=i[e],s=e>0?i[e-1]:null,o=e<i.length-1?i[e+1]:null,d=a.categoryPercentage;return null===s&&(s=r-(null===o?t.end-t.start:o-r)),null===o&&(o=r+r-s),n=r-(r-Math.min(s,o))/2*d,{chunk:Math.abs(o-s)/2*d/t.stackCount,ratio:a.barPercentage,start:n}}(t,a,n):function(e,t,a){var n,i,r=a.barThickness,s=t.stackCount,o=t.pixels[e];return le.isNullOrUndef(r)?(n=t.min*a.categoryPercentage,i=a.barPercentage):(n=r*s,i=1),{chunk:n/s,ratio:i,start:o-n/2}}(t,a,n),r=this.getStackIndex(e,this.getMeta().stack),s=i.start+i.chunk*r+i.chunk/2,o=Math.min(le.valueOrDefault(n.maxBarThickness,1/0),i.chunk*i.ratio);return{base:s-o/2,head:s+o/2,center:s,size:o}},draw:function(){var e=this.chart,t=this._getValueScale(),a=this.getMeta().data,n=this.getDataset(),i=a.length,r=0;for(le.canvas.clipArea(e.ctx,e.chartArea);r<i;++r)isNaN(t.getRightValue(n.data[r]))||a[r].draw();le.canvas.unclipArea(e.ctx)},_resolveElementOptions:function(e,t){var a,n,i,r=this.chart,s=r.data.datasets[this.index],o=e.custom||{},d=r.options.elements.rectangle,l={},u={chart:r,dataIndex:t,dataset:s,datasetIndex:this.index},_=["backgroundColor","borderColor","borderSkipped","borderWidth"];for(a=0,n=_.length;a<n;++a)l[i=_[a]]=Ve([o[i],s[i],d[i]],u,t);return l}}),Je=le.valueOrDefault,Ue=le.options.resolve;se._set("bubble",{hover:{mode:"single"},scales:{xAxes:[{type:"linear",position:"bottom",id:"x-axis-0"}],yAxes:[{type:"linear",position:"left",id:"y-axis-0"}]},tooltips:{callbacks:{title:function(){return""},label:function(e,t){var a=t.datasets[e.datasetIndex].label||"",n=t.datasets[e.datasetIndex].data[e.index];return a+": ("+e.xLabel+", "+e.yLabel+", "+n.r+")"}}}});var Ge=ve.extend({dataElementType:Ee.Point,update:function(e){var t=this,a=t.getMeta().data;le.each(a,(function(a,n){t.updateElement(a,n,e)}))},updateElement:function(e,t,a){var n=this,i=n.getMeta(),r=e.custom||{},s=n.getScaleForId(i.xAxisID),o=n.getScaleForId(i.yAxisID),d=n._resolveElementOptions(e,t),l=n.getDataset().data[t],u=n.index,_=a?s.getPixelForDecimal(.5):s.getPixelForValue("object"===typeof l?l:NaN,t,u),m=a?o.getBasePixel():o.getPixelForValue(l,t,u);e._xScale=s,e._yScale=o,e._options=d,e._datasetIndex=u,e._index=t,e._model={backgroundColor:d.backgroundColor,borderColor:d.borderColor,borderWidth:d.borderWidth,hitRadius:d.hitRadius,pointStyle:d.pointStyle,rotation:d.rotation,radius:a?0:d.radius,skip:r.skip||isNaN(_)||isNaN(m),x:_,y:m},e.pivot()},setHoverStyle:function(e){var t=e._model,a=e._options,n=le.getHoverColor;e.$previousStyle={backgroundColor:t.backgroundColor,borderColor:t.borderColor,borderWidth:t.borderWidth,radius:t.radius},t.backgroundColor=Je(a.hoverBackgroundColor,n(a.backgroundColor)),t.borderColor=Je(a.hoverBorderColor,n(a.borderColor)),t.borderWidth=Je(a.hoverBorderWidth,a.borderWidth),t.radius=a.radius+a.hoverRadius},_resolveElementOptions:function(e,t){var a,n,i,r=this.chart,s=r.data.datasets[this.index],o=e.custom||{},d=r.options.elements.point,l=s.data[t],u={},_={chart:r,dataIndex:t,dataset:s,datasetIndex:this.index},m=["backgroundColor","borderColor","borderWidth","hoverBackgroundColor","hoverBorderColor","hoverBorderWidth","hoverRadius","hitRadius","pointStyle","rotation"];for(a=0,n=m.length;a<n;++a)u[i=m[a]]=Ue([o[i],s[i],d[i]],_,t);return u.radius=Ue([o.radius,l?l.r:void 0,s.radius,d.radius],_,t),u}}),qe=le.options.resolve,Ke=le.valueOrDefault;se._set("doughnut",{animation:{animateRotate:!0,animateScale:!1},hover:{mode:"single"},legendCallback:function(e){var t=[];t.push('<ul class="'+e.id+'-legend">');var a=e.data,n=a.datasets,i=a.labels;if(n.length)for(var r=0;r<n[0].data.length;++r)t.push('<li><span style="background-color:'+n[0].backgroundColor[r]+'"></span>'),i[r]&&t.push(i[r]),t.push("</li>");return t.push("</ul>"),t.join("")},legend:{labels:{generateLabels:function(e){var t=e.data;return t.labels.length&&t.datasets.length?t.labels.map((function(a,n){var i=e.getDatasetMeta(0),r=t.datasets[0],s=i.data[n],o=s&&s.custom||{},d=e.options.elements.arc;return{text:a,fillStyle:qe([o.backgroundColor,r.backgroundColor,d.backgroundColor],void 0,n),strokeStyle:qe([o.borderColor,r.borderColor,d.borderColor],void 0,n),lineWidth:qe([o.borderWidth,r.borderWidth,d.borderWidth],void 0,n),hidden:isNaN(r.data[n])||i.data[n].hidden,index:n}})):[]}},onClick:function(e,t){var a,n,i,r=t.index,s=this.chart;for(a=0,n=(s.data.datasets||[]).length;a<n;++a)(i=s.getDatasetMeta(a)).data[r]&&(i.data[r].hidden=!i.data[r].hidden);s.update()}},cutoutPercentage:50,rotation:-.5*Math.PI,circumference:2*Math.PI,tooltips:{callbacks:{title:function(){return""},label:function(e,t){var a=t.labels[e.index],n=": "+t.datasets[e.datasetIndex].data[e.index];return le.isArray(a)?(a=a.slice())[0]+=n:a+=n,a}}}});var Ze=ve.extend({dataElementType:Ee.Arc,linkScales:le.noop,getRingIndex:function(e){for(var t=0,a=0;a<e;++a)this.chart.isDatasetVisible(a)&&++t;return t},update:function(e){var t,a,n=this,i=n.chart,r=i.chartArea,s=i.options,o=r.right-r.left,d=r.bottom-r.top,l=Math.min(o,d),u={x:0,y:0},_=n.getMeta(),m=_.data,c=s.cutoutPercentage,h=s.circumference,f=n._getRingWeight(n.index);if(h<2*Math.PI){var M=s.rotation%(2*Math.PI),p=(M+=2*Math.PI*(M>=Math.PI?-1:M<-Math.PI?1:0))+h,y={x:Math.cos(M),y:Math.sin(M)},g={x:Math.cos(p),y:Math.sin(p)},L=M<=0&&p>=0||M<=2*Math.PI&&2*Math.PI<=p,Y=M<=.5*Math.PI&&.5*Math.PI<=p||M<=2.5*Math.PI&&2.5*Math.PI<=p,v=M<=-Math.PI&&-Math.PI<=p||M<=Math.PI&&Math.PI<=p,k=M<=.5*-Math.PI&&.5*-Math.PI<=p||M<=1.5*Math.PI&&1.5*Math.PI<=p,b=c/100,D={x:v?-1:Math.min(y.x*(y.x<0?1:b),g.x*(g.x<0?1:b)),y:k?-1:Math.min(y.y*(y.y<0?1:b),g.y*(g.y<0?1:b))},w={x:L?1:Math.max(y.x*(y.x>0?1:b),g.x*(g.x>0?1:b)),y:Y?1:Math.max(y.y*(y.y>0?1:b),g.y*(g.y>0?1:b))},T={width:.5*(w.x-D.x),height:.5*(w.y-D.y)};l=Math.min(o/T.width,d/T.height),u={x:-.5*(w.x+D.x),y:-.5*(w.y+D.y)}}for(t=0,a=m.length;t<a;++t)m[t]._options=n._resolveElementOptions(m[t],t);for(i.borderWidth=n.getMaxBorderWidth(),i.outerRadius=Math.max((l-i.borderWidth)/2,0),i.innerRadius=Math.max(c?i.outerRadius/100*c:0,0),i.radiusLength=(i.outerRadius-i.innerRadius)/(n._getVisibleDatasetWeightTotal()||1),i.offsetX=u.x*i.outerRadius,i.offsetY=u.y*i.outerRadius,_.total=n.calculateTotal(),n.outerRadius=i.outerRadius-i.radiusLength*n._getRingWeightOffset(n.index),n.innerRadius=Math.max(n.outerRadius-i.radiusLength*f,0),t=0,a=m.length;t<a;++t)n.updateElement(m[t],t,e)},updateElement:function(e,t,a){var n=this,i=n.chart,r=i.chartArea,s=i.options,o=s.animation,d=(r.left+r.right)/2,l=(r.top+r.bottom)/2,u=s.rotation,_=s.rotation,m=n.getDataset(),c=a&&o.animateRotate?0:e.hidden?0:n.calculateCircumference(m.data[t])*(s.circumference/(2*Math.PI)),h=a&&o.animateScale?0:n.innerRadius,f=a&&o.animateScale?0:n.outerRadius,M=e._options||{};le.extend(e,{_datasetIndex:n.index,_index:t,_model:{backgroundColor:M.backgroundColor,borderColor:M.borderColor,borderWidth:M.borderWidth,borderAlign:M.borderAlign,x:d+i.offsetX,y:l+i.offsetY,startAngle:u,endAngle:_,circumference:c,outerRadius:f,innerRadius:h,label:le.valueAtIndexOrDefault(m.label,t,i.data.labels[t])}});var p=e._model;a&&o.animateRotate||(p.startAngle=0===t?s.rotation:n.getMeta().data[t-1]._model.endAngle,p.endAngle=p.startAngle+p.circumference),e.pivot()},calculateTotal:function(){var e,t=this.getDataset(),a=this.getMeta(),n=0;return le.each(a.data,(function(a,i){e=t.data[i],isNaN(e)||a.hidden||(n+=Math.abs(e))})),n},calculateCircumference:function(e){var t=this.getMeta().total;return t>0&&!isNaN(e)?2*Math.PI*(Math.abs(e)/t):0},getMaxBorderWidth:function(e){var t,a,n,i,r,s,o,d,l=0,u=this.chart;if(!e)for(t=0,a=u.data.datasets.length;t<a;++t)if(u.isDatasetVisible(t)){e=(n=u.getDatasetMeta(t)).data,t!==this.index&&(r=n.controller);break}if(!e)return 0;for(t=0,a=e.length;t<a;++t)i=e[t],"inner"!==(s=r?r._resolveElementOptions(i,t):i._options).borderAlign&&(o=s.borderWidth,l=(d=s.hoverBorderWidth)>(l=o>l?o:l)?d:l);return l},setHoverStyle:function(e){var t=e._model,a=e._options,n=le.getHoverColor;e.$previousStyle={backgroundColor:t.backgroundColor,borderColor:t.borderColor,borderWidth:t.borderWidth},t.backgroundColor=Ke(a.hoverBackgroundColor,n(a.backgroundColor)),t.borderColor=Ke(a.hoverBorderColor,n(a.borderColor)),t.borderWidth=Ke(a.hoverBorderWidth,a.borderWidth)},_resolveElementOptions:function(e,t){var a,n,i,r=this.chart,s=this.getDataset(),o=e.custom||{},d=r.options.elements.arc,l={},u={chart:r,dataIndex:t,dataset:s,datasetIndex:this.index},_=["backgroundColor","borderColor","borderWidth","borderAlign","hoverBackgroundColor","hoverBorderColor","hoverBorderWidth"];for(a=0,n=_.length;a<n;++a)l[i=_[a]]=qe([o[i],s[i],d[i]],u,t);return l},_getRingWeightOffset:function(e){for(var t=0,a=0;a<e;++a)this.chart.isDatasetVisible(a)&&(t+=this._getRingWeight(a));return t},_getRingWeight:function(e){return Math.max(Ke(this.chart.data.datasets[e].weight,1),0)},_getVisibleDatasetWeightTotal:function(){return this._getRingWeightOffset(this.chart.data.datasets.length)}});se._set("horizontalBar",{hover:{mode:"index",axis:"y"},scales:{xAxes:[{type:"linear",position:"bottom"}],yAxes:[{type:"category",position:"left",categoryPercentage:.8,barPercentage:.9,offset:!0,gridLines:{offsetGridLines:!0}}]},elements:{rectangle:{borderSkipped:"left"}},tooltips:{mode:"index",axis:"y"}});var $e=Be.extend({_getValueScaleId:function(){return this.getMeta().xAxisID},_getIndexScaleId:function(){return this.getMeta().yAxisID}}),Qe=le.valueOrDefault,Xe=le.options.resolve,et=le.canvas._isPointInArea;function tt(e,t){return Qe(e.showLine,t.showLines)}se._set("line",{showLines:!0,spanGaps:!1,hover:{mode:"label"},scales:{xAxes:[{type:"category",id:"x-axis-0"}],yAxes:[{type:"linear",id:"y-axis-0"}]}});var at=ve.extend({datasetElementType:Ee.Line,dataElementType:Ee.Point,update:function(e){var t,a,n=this,i=n.getMeta(),r=i.dataset,s=i.data||[],o=n.getScaleForId(i.yAxisID),d=n.getDataset(),l=tt(d,n.chart.options);for(l&&(void 0!==d.tension&&void 0===d.lineTension&&(d.lineTension=d.tension),r._scale=o,r._datasetIndex=n.index,r._children=s,r._model=n._resolveLineOptions(r),r.pivot()),t=0,a=s.length;t<a;++t)n.updateElement(s[t],t,e);for(l&&0!==r._model.tension&&n.updateBezierControlPoints(),t=0,a=s.length;t<a;++t)s[t].pivot()},updateElement:function(e,t,a){var n,i,r=this,s=r.getMeta(),o=e.custom||{},d=r.getDataset(),l=r.index,u=d.data[t],_=r.getScaleForId(s.yAxisID),m=r.getScaleForId(s.xAxisID),c=s.dataset._model,h=r._resolvePointOptions(e,t);n=m.getPixelForValue("object"===typeof u?u:NaN,t,l),i=a?_.getBasePixel():r.calculatePointY(u,t,l),e._xScale=m,e._yScale=_,e._options=h,e._datasetIndex=l,e._index=t,e._model={x:n,y:i,skip:o.skip||isNaN(n)||isNaN(i),radius:h.radius,pointStyle:h.pointStyle,rotation:h.rotation,backgroundColor:h.backgroundColor,borderColor:h.borderColor,borderWidth:h.borderWidth,tension:Qe(o.tension,c?c.tension:0),steppedLine:!!c&&c.steppedLine,hitRadius:h.hitRadius}},_resolvePointOptions:function(e,t){var a,n,i,r=this.chart,s=r.data.datasets[this.index],o=e.custom||{},d=r.options.elements.point,l={},u={chart:r,dataIndex:t,dataset:s,datasetIndex:this.index},_={backgroundColor:"pointBackgroundColor",borderColor:"pointBorderColor",borderWidth:"pointBorderWidth",hitRadius:"pointHitRadius",hoverBackgroundColor:"pointHoverBackgroundColor",hoverBorderColor:"pointHoverBorderColor",hoverBorderWidth:"pointHoverBorderWidth",hoverRadius:"pointHoverRadius",pointStyle:"pointStyle",radius:"pointRadius",rotation:"pointRotation"},m=Object.keys(_);for(a=0,n=m.length;a<n;++a)l[i=m[a]]=Xe([o[i],s[_[i]],s[i],d[i]],u,t);return l},_resolveLineOptions:function(e){var t,a,n,i=this.chart,r=i.data.datasets[this.index],s=e.custom||{},o=i.options,d=o.elements.line,l={},u=["backgroundColor","borderWidth","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","fill","cubicInterpolationMode"];for(t=0,a=u.length;t<a;++t)l[n=u[t]]=Xe([s[n],r[n],d[n]]);return l.spanGaps=Qe(r.spanGaps,o.spanGaps),l.tension=Qe(r.lineTension,d.tension),l.steppedLine=Xe([s.steppedLine,r.steppedLine,d.stepped]),l},calculatePointY:function(e,t,a){var n,i,r,s=this.chart,o=this.getMeta(),d=this.getScaleForId(o.yAxisID),l=0,u=0;if(d.options.stacked){for(n=0;n<a;n++)if(i=s.data.datasets[n],"line"===(r=s.getDatasetMeta(n)).type&&r.yAxisID===d.id&&s.isDatasetVisible(n)){var _=Number(d.getRightValue(i.data[t]));_<0?u+=_||0:l+=_||0}var m=Number(d.getRightValue(e));return m<0?d.getPixelForValue(u+m):d.getPixelForValue(l+m)}return d.getPixelForValue(e)},updateBezierControlPoints:function(){var e,t,a,n,i=this.chart,r=this.getMeta(),s=r.dataset._model,o=i.chartArea,d=r.data||[];function l(e,t,a){return Math.max(Math.min(e,a),t)}if(s.spanGaps&&(d=d.filter((function(e){return!e._model.skip}))),"monotone"===s.cubicInterpolationMode)le.splineCurveMonotone(d);else for(e=0,t=d.length;e<t;++e)a=d[e]._model,n=le.splineCurve(le.previousItem(d,e)._model,a,le.nextItem(d,e)._model,s.tension),a.controlPointPreviousX=n.previous.x,a.controlPointPreviousY=n.previous.y,a.controlPointNextX=n.next.x,a.controlPointNextY=n.next.y;if(i.options.elements.line.capBezierPoints)for(e=0,t=d.length;e<t;++e)a=d[e]._model,et(a,o)&&(e>0&&et(d[e-1]._model,o)&&(a.controlPointPreviousX=l(a.controlPointPreviousX,o.left,o.right),a.controlPointPreviousY=l(a.controlPointPreviousY,o.top,o.bottom)),e<d.length-1&&et(d[e+1]._model,o)&&(a.controlPointNextX=l(a.controlPointNextX,o.left,o.right),a.controlPointNextY=l(a.controlPointNextY,o.top,o.bottom)))},draw:function(){var e,t=this.chart,a=this.getMeta(),n=a.data||[],i=t.chartArea,r=n.length,s=0;for(tt(this.getDataset(),t.options)&&(e=(a.dataset._model.borderWidth||0)/2,le.canvas.clipArea(t.ctx,{left:i.left,right:i.right,top:i.top-e,bottom:i.bottom+e}),a.dataset.draw(),le.canvas.unclipArea(t.ctx));s<r;++s)n[s].draw(i)},setHoverStyle:function(e){var t=e._model,a=e._options,n=le.getHoverColor;e.$previousStyle={backgroundColor:t.backgroundColor,borderColor:t.borderColor,borderWidth:t.borderWidth,radius:t.radius},t.backgroundColor=Qe(a.hoverBackgroundColor,n(a.backgroundColor)),t.borderColor=Qe(a.hoverBorderColor,n(a.borderColor)),t.borderWidth=Qe(a.hoverBorderWidth,a.borderWidth),t.radius=Qe(a.hoverRadius,a.radius)}}),nt=le.options.resolve;se._set("polarArea",{scale:{type:"radialLinear",angleLines:{display:!1},gridLines:{circular:!0},pointLabels:{display:!1},ticks:{beginAtZero:!0}},animation:{animateRotate:!0,animateScale:!0},startAngle:-.5*Math.PI,legendCallback:function(e){var t=[];t.push('<ul class="'+e.id+'-legend">');var a=e.data,n=a.datasets,i=a.labels;if(n.length)for(var r=0;r<n[0].data.length;++r)t.push('<li><span style="background-color:'+n[0].backgroundColor[r]+'"></span>'),i[r]&&t.push(i[r]),t.push("</li>");return t.push("</ul>"),t.join("")},legend:{labels:{generateLabels:function(e){var t=e.data;return t.labels.length&&t.datasets.length?t.labels.map((function(a,n){var i=e.getDatasetMeta(0),r=t.datasets[0],s=i.data[n].custom||{},o=e.options.elements.arc;return{text:a,fillStyle:nt([s.backgroundColor,r.backgroundColor,o.backgroundColor],void 0,n),strokeStyle:nt([s.borderColor,r.borderColor,o.borderColor],void 0,n),lineWidth:nt([s.borderWidth,r.borderWidth,o.borderWidth],void 0,n),hidden:isNaN(r.data[n])||i.data[n].hidden,index:n}})):[]}},onClick:function(e,t){var a,n,i,r=t.index,s=this.chart;for(a=0,n=(s.data.datasets||[]).length;a<n;++a)(i=s.getDatasetMeta(a)).data[r].hidden=!i.data[r].hidden;s.update()}},tooltips:{callbacks:{title:function(){return""},label:function(e,t){return t.labels[e.index]+": "+e.yLabel}}}});var it=ve.extend({dataElementType:Ee.Arc,linkScales:le.noop,update:function(e){var t,a,n,i=this,r=i.getDataset(),s=i.getMeta(),o=i.chart.options.startAngle||0,d=i._starts=[],l=i._angles=[],u=s.data;for(i._updateRadius(),s.count=i.countVisibleElements(),t=0,a=r.data.length;t<a;t++)d[t]=o,n=i._computeAngle(t),l[t]=n,o+=n;for(t=0,a=u.length;t<a;++t)u[t]._options=i._resolveElementOptions(u[t],t),i.updateElement(u[t],t,e)},_updateRadius:function(){var e=this,t=e.chart,a=t.chartArea,n=t.options,i=Math.min(a.right-a.left,a.bottom-a.top);t.outerRadius=Math.max(i/2,0),t.innerRadius=Math.max(n.cutoutPercentage?t.outerRadius/100*n.cutoutPercentage:1,0),t.radiusLength=(t.outerRadius-t.innerRadius)/t.getVisibleDatasetCount(),e.outerRadius=t.outerRadius-t.radiusLength*e.index,e.innerRadius=e.outerRadius-t.radiusLength},updateElement:function(e,t,a){var n=this,i=n.chart,r=n.getDataset(),s=i.options,o=s.animation,d=i.scale,l=i.data.labels,u=d.xCenter,_=d.yCenter,m=s.startAngle,c=e.hidden?0:d.getDistanceFromCenterForValue(r.data[t]),h=n._starts[t],f=h+(e.hidden?0:n._angles[t]),M=o.animateScale?0:d.getDistanceFromCenterForValue(r.data[t]),p=e._options||{};le.extend(e,{_datasetIndex:n.index,_index:t,_scale:d,_model:{backgroundColor:p.backgroundColor,borderColor:p.borderColor,borderWidth:p.borderWidth,borderAlign:p.borderAlign,x:u,y:_,innerRadius:0,outerRadius:a?M:c,startAngle:a&&o.animateRotate?m:h,endAngle:a&&o.animateRotate?m:f,label:le.valueAtIndexOrDefault(l,t,l[t])}}),e.pivot()},countVisibleElements:function(){var e=this.getDataset(),t=this.getMeta(),a=0;return le.each(t.data,(function(t,n){isNaN(e.data[n])||t.hidden||a++})),a},setHoverStyle:function(e){var t=e._model,a=e._options,n=le.getHoverColor,i=le.valueOrDefault;e.$previousStyle={backgroundColor:t.backgroundColor,borderColor:t.borderColor,borderWidth:t.borderWidth},t.backgroundColor=i(a.hoverBackgroundColor,n(a.backgroundColor)),t.borderColor=i(a.hoverBorderColor,n(a.borderColor)),t.borderWidth=i(a.hoverBorderWidth,a.borderWidth)},_resolveElementOptions:function(e,t){var a,n,i,r=this.chart,s=this.getDataset(),o=e.custom||{},d=r.options.elements.arc,l={},u={chart:r,dataIndex:t,dataset:s,datasetIndex:this.index},_=["backgroundColor","borderColor","borderWidth","borderAlign","hoverBackgroundColor","hoverBorderColor","hoverBorderWidth"];for(a=0,n=_.length;a<n;++a)l[i=_[a]]=nt([o[i],s[i],d[i]],u,t);return l},_computeAngle:function(e){var t=this,a=this.getMeta().count,n=t.getDataset(),i=t.getMeta();if(isNaN(n.data[e])||i.data[e].hidden)return 0;var r={chart:t.chart,dataIndex:e,dataset:n,datasetIndex:t.index};return nt([t.chart.options.elements.arc.angle,2*Math.PI/a],r,e)}});se._set("pie",le.clone(se.doughnut)),se._set("pie",{cutoutPercentage:0});var rt=Ze,st=le.valueOrDefault,ot=le.options.resolve;se._set("radar",{scale:{type:"radialLinear"},elements:{line:{tension:0}}});var dt=ve.extend({datasetElementType:Ee.Line,dataElementType:Ee.Point,linkScales:le.noop,update:function(e){var t,a,n=this,i=n.getMeta(),r=i.dataset,s=i.data||[],o=n.chart.scale,d=n.getDataset();for(void 0!==d.tension&&void 0===d.lineTension&&(d.lineTension=d.tension),r._scale=o,r._datasetIndex=n.index,r._children=s,r._loop=!0,r._model=n._resolveLineOptions(r),r.pivot(),t=0,a=s.length;t<a;++t)n.updateElement(s[t],t,e);for(n.updateBezierControlPoints(),t=0,a=s.length;t<a;++t)s[t].pivot()},updateElement:function(e,t,a){var n=this,i=e.custom||{},r=n.getDataset(),s=n.chart.scale,o=s.getPointPositionForValue(t,r.data[t]),d=n._resolvePointOptions(e,t),l=n.getMeta().dataset._model,u=a?s.xCenter:o.x,_=a?s.yCenter:o.y;e._scale=s,e._options=d,e._datasetIndex=n.index,e._index=t,e._model={x:u,y:_,skip:i.skip||isNaN(u)||isNaN(_),radius:d.radius,pointStyle:d.pointStyle,rotation:d.rotation,backgroundColor:d.backgroundColor,borderColor:d.borderColor,borderWidth:d.borderWidth,tension:st(i.tension,l?l.tension:0),hitRadius:d.hitRadius}},_resolvePointOptions:function(e,t){var a,n,i,r=this.chart,s=r.data.datasets[this.index],o=e.custom||{},d=r.options.elements.point,l={},u={chart:r,dataIndex:t,dataset:s,datasetIndex:this.index},_={backgroundColor:"pointBackgroundColor",borderColor:"pointBorderColor",borderWidth:"pointBorderWidth",hitRadius:"pointHitRadius",hoverBackgroundColor:"pointHoverBackgroundColor",hoverBorderColor:"pointHoverBorderColor",hoverBorderWidth:"pointHoverBorderWidth",hoverRadius:"pointHoverRadius",pointStyle:"pointStyle",radius:"pointRadius",rotation:"pointRotation"},m=Object.keys(_);for(a=0,n=m.length;a<n;++a)l[i=m[a]]=ot([o[i],s[_[i]],s[i],d[i]],u,t);return l},_resolveLineOptions:function(e){var t,a,n,i=this.chart,r=i.data.datasets[this.index],s=e.custom||{},o=i.options.elements.line,d={},l=["backgroundColor","borderWidth","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","fill"];for(t=0,a=l.length;t<a;++t)d[n=l[t]]=ot([s[n],r[n],o[n]]);return d.tension=st(r.lineTension,o.tension),d},updateBezierControlPoints:function(){var e,t,a,n,i=this.getMeta(),r=this.chart.chartArea,s=i.data||[];function o(e,t,a){return Math.max(Math.min(e,a),t)}for(e=0,t=s.length;e<t;++e)a=s[e]._model,n=le.splineCurve(le.previousItem(s,e,!0)._model,a,le.nextItem(s,e,!0)._model,a.tension),a.controlPointPreviousX=o(n.previous.x,r.left,r.right),a.controlPointPreviousY=o(n.previous.y,r.top,r.bottom),a.controlPointNextX=o(n.next.x,r.left,r.right),a.controlPointNextY=o(n.next.y,r.top,r.bottom)},setHoverStyle:function(e){var t=e._model,a=e._options,n=le.getHoverColor;e.$previousStyle={backgroundColor:t.backgroundColor,borderColor:t.borderColor,borderWidth:t.borderWidth,radius:t.radius},t.backgroundColor=st(a.hoverBackgroundColor,n(a.backgroundColor)),t.borderColor=st(a.hoverBorderColor,n(a.borderColor)),t.borderWidth=st(a.hoverBorderWidth,a.borderWidth),t.radius=st(a.hoverRadius,a.radius)}});se._set("scatter",{hover:{mode:"single"},scales:{xAxes:[{id:"x-axis-1",type:"linear",position:"bottom"}],yAxes:[{id:"y-axis-1",type:"linear",position:"left"}]},showLines:!1,tooltips:{callbacks:{title:function(){return""},label:function(e){return"("+e.xLabel+", "+e.yLabel+")"}}}});var lt={bar:Be,bubble:Ge,doughnut:Ze,horizontalBar:$e,line:at,polarArea:it,pie:rt,radar:dt,scatter:at};function ut(e,t){return e.native?{x:e.x,y:e.y}:le.getRelativePosition(e,t)}function _t(e,t){var a,n,i,r,s;for(n=0,r=e.data.datasets.length;n<r;++n)if(e.isDatasetVisible(n))for(i=0,s=(a=e.getDatasetMeta(n)).data.length;i<s;++i){var o=a.data[i];o._view.skip||t(o)}}function mt(e,t){var a=[];return _t(e,(function(e){e.inRange(t.x,t.y)&&a.push(e)})),a}function ct(e,t,a,n){var i=Number.POSITIVE_INFINITY,r=[];return _t(e,(function(e){if(!a||e.inRange(t.x,t.y)){var s=e.getCenterPoint(),o=n(t,s);o<i?(r=[e],i=o):o===i&&r.push(e)}})),r}function ht(e){var t=-1!==e.indexOf("x"),a=-1!==e.indexOf("y");return function(e,n){var i=t?Math.abs(e.x-n.x):0,r=a?Math.abs(e.y-n.y):0;return Math.sqrt(Math.pow(i,2)+Math.pow(r,2))}}function ft(e,t,a){var n=ut(t,e);a.axis=a.axis||"x";var i=ht(a.axis),r=a.intersect?mt(e,n):ct(e,n,!1,i),s=[];return r.length?(e.data.datasets.forEach((function(t,a){if(e.isDatasetVisible(a)){var n=e.getDatasetMeta(a).data[r[0]._index];n&&!n._view.skip&&s.push(n)}})),s):[]}var Mt={modes:{single:function(e,t){var a=ut(t,e),n=[];return _t(e,(function(e){if(e.inRange(a.x,a.y))return n.push(e),n})),n.slice(0,1)},label:ft,index:ft,dataset:function(e,t,a){var n=ut(t,e);a.axis=a.axis||"xy";var i=ht(a.axis),r=a.intersect?mt(e,n):ct(e,n,!1,i);return r.length>0&&(r=e.getDatasetMeta(r[0]._datasetIndex).data),r},"x-axis":function(e,t){return ft(e,t,{intersect:!1})},point:function(e,t){return mt(e,ut(t,e))},nearest:function(e,t,a){var n=ut(t,e);a.axis=a.axis||"xy";var i=ht(a.axis);return ct(e,n,a.intersect,i)},x:function(e,t,a){var n=ut(t,e),i=[],r=!1;return _t(e,(function(e){e.inXRange(n.x)&&i.push(e),e.inRange(n.x,n.y)&&(r=!0)})),a.intersect&&!r&&(i=[]),i},y:function(e,t,a){var n=ut(t,e),i=[],r=!1;return _t(e,(function(e){e.inYRange(n.y)&&i.push(e),e.inRange(n.x,n.y)&&(r=!0)})),a.intersect&&!r&&(i=[]),i}}};function pt(e,t){return le.where(e,(function(e){return e.position===t}))}function yt(e,t){e.forEach((function(e,t){return e._tmpIndex_=t,e})),e.sort((function(e,a){var n=t?a:e,i=t?e:a;return n.weight===i.weight?n._tmpIndex_-i._tmpIndex_:n.weight-i.weight})),e.forEach((function(e){delete e._tmpIndex_}))}function gt(e,t){le.each(e,(function(e){t[e.position]+=e.isHorizontal()?e.height:e.width}))}se._set("global",{layout:{padding:{top:0,right:0,bottom:0,left:0}}});var Lt,Yt={defaults:{},addBox:function(e,t){e.boxes||(e.boxes=[]),t.fullWidth=t.fullWidth||!1,t.position=t.position||"top",t.weight=t.weight||0,e.boxes.push(t)},removeBox:function(e,t){var a=e.boxes?e.boxes.indexOf(t):-1;-1!==a&&e.boxes.splice(a,1)},configure:function(e,t,a){for(var n,i=["fullWidth","position","weight"],r=i.length,s=0;s<r;++s)n=i[s],a.hasOwnProperty(n)&&(t[n]=a[n])},update:function(e,t,a){if(e){var n=e.options.layout||{},i=le.options.toPadding(n.padding),r=i.left,s=i.right,o=i.top,d=i.bottom,l=pt(e.boxes,"left"),u=pt(e.boxes,"right"),_=pt(e.boxes,"top"),m=pt(e.boxes,"bottom"),c=pt(e.boxes,"chartArea");yt(l,!0),yt(u,!1),yt(_,!0),yt(m,!1);var h,f=l.concat(u),M=_.concat(m),p=f.concat(M),y=t-r-s,g=a-o-d,L=(t-y/2)/f.length,Y=y,v=g,k={top:o,left:r,bottom:d,right:s},b=[];le.each(p,(function(e){var t,a=e.isHorizontal();a?(t=e.update(e.fullWidth?y:Y,g/2),v-=t.height):(t=e.update(L,v),Y-=t.width),b.push({horizontal:a,width:t.width,box:e})})),h=function(e){var t=0,a=0,n=0,i=0;return le.each(e,(function(e){if(e.getPadding){var r=e.getPadding();t=Math.max(t,r.top),a=Math.max(a,r.left),n=Math.max(n,r.bottom),i=Math.max(i,r.right)}})),{top:t,left:a,bottom:n,right:i}}(p),le.each(f,j),gt(f,k),le.each(M,j),gt(M,k),le.each(f,(function(e){var t=le.findNextWhere(b,(function(t){return t.box===e})),a={left:0,right:0,top:k.top,bottom:k.bottom};t&&e.update(t.width,v,a)})),gt(p,k={top:o,left:r,bottom:d,right:s});var D=Math.max(h.left-k.left,0);k.left+=D,k.right+=Math.max(h.right-k.right,0);var w=Math.max(h.top-k.top,0);k.top+=w,k.bottom+=Math.max(h.bottom-k.bottom,0);var T=a-k.top-k.bottom,x=t-k.left-k.right;x===Y&&T===v||(le.each(f,(function(e){e.height=T})),le.each(M,(function(e){e.fullWidth||(e.width=x)})),v=T,Y=x);var S=r+D,H=o+w;le.each(l.concat(_),P),S+=Y,H+=v,le.each(u,P),le.each(m,P),e.chartArea={left:k.left,top:k.top,right:k.left+Y,bottom:k.top+v},le.each(c,(function(t){t.left=e.chartArea.left,t.top=e.chartArea.top,t.right=e.chartArea.right,t.bottom=e.chartArea.bottom,t.update(Y,v)}))}function j(e){var t=le.findNextWhere(b,(function(t){return t.box===e}));if(t)if(t.horizontal){var a={left:Math.max(k.left,h.left),right:Math.max(k.right,h.right),top:0,bottom:0};e.update(e.fullWidth?y:Y,g/2,a)}else e.update(t.width,v)}function P(e){e.isHorizontal()?(e.left=e.fullWidth?r:k.left,e.right=e.fullWidth?t-s:k.left+Y,e.top=H,e.bottom=H+e.height,H=e.bottom):(e.left=S,e.right=S+e.width,e.top=k.top,e.bottom=k.top+v,S=e.right)}}},vt=(Lt=Object.freeze({default:"/*\n * DOM element rendering detection\n * https://davidwalsh.name/detect-node-insertion\n */\n@keyframes chartjs-render-animation {\n\tfrom { opacity: 0.99; }\n\tto { opacity: 1; }\n}\n\n.chartjs-render-monitor {\n\tanimation: chartjs-render-animation 0.001s;\n}\n\n/*\n * DOM element resizing detection\n * https://github.com/marcj/css-element-queries\n */\n.chartjs-size-monitor,\n.chartjs-size-monitor-expand,\n.chartjs-size-monitor-shrink {\n\tposition: absolute;\n\tdirection: ltr;\n\tleft: 0;\n\ttop: 0;\n\tright: 0;\n\tbottom: 0;\n\toverflow: hidden;\n\tpointer-events: none;\n\tvisibility: hidden;\n\tz-index: -1;\n}\n\n.chartjs-size-monitor-expand > div {\n\tposition: absolute;\n\twidth: 1000000px;\n\theight: 1000000px;\n\tleft: 0;\n\ttop: 0;\n}\n\n.chartjs-size-monitor-shrink > div {\n\tposition: absolute;\n\twidth: 200%;\n\theight: 200%;\n\tleft: 0;\n\ttop: 0;\n}\n"}))&&Lt.default||Lt,kt="$chartjs",bt="chartjs-size-monitor",Dt="chartjs-render-monitor",wt="chartjs-render-animation",Tt=["animationstart","webkitAnimationStart"],xt={touchstart:"mousedown",touchmove:"mousemove",touchend:"mouseup",pointerenter:"mouseenter",pointerdown:"mousedown",pointermove:"mousemove",pointerup:"mouseup",pointerleave:"mouseout",pointerout:"mouseout"};function St(e,t){var a=le.getStyle(e,t),n=a&&a.match(/^(\d+)(\.\d+)?px$/);return n?Number(n[1]):void 0}var Ht=!!function(){var e=!1;try{var t=Object.defineProperty({},"passive",{get:function(){e=!0}});window.addEventListener("e",null,t)}catch(e){}return e}()&&{passive:!0};function jt(e,t,a){e.addEventListener(t,a,Ht)}function Pt(e,t,a){e.removeEventListener(t,a,Ht)}function Ot(e,t,a,n,i){return{type:e,chart:t,native:i||null,x:void 0!==a?a:null,y:void 0!==n?n:null}}function At(e){var t=document.createElement("div");return t.className=e||"",t}function Ft(e,t,a){var n=e[kt]||(e[kt]={}),i=n.resizer=function(e){var t=At(bt),a=At(bt+"-expand"),n=At(bt+"-shrink");a.appendChild(At()),n.appendChild(At()),t.appendChild(a),t.appendChild(n),t._reset=function(){a.scrollLeft=1e6,a.scrollTop=1e6,n.scrollLeft=1e6,n.scrollTop=1e6};var i=function(){t._reset(),e()};return jt(a,"scroll",i.bind(a,"expand")),jt(n,"scroll",i.bind(n,"shrink")),t}(function(e,t){var a=!1,n=[];return function(){n=Array.prototype.slice.call(arguments),t=t||this,a||(a=!0,le.requestAnimFrame.call(window,(function(){a=!1,e.apply(t,n)})))}}((function(){if(n.resizer){var i=a.options.maintainAspectRatio&&e.parentNode,r=i?i.clientWidth:0;t(Ot("resize",a)),i&&i.clientWidth<r&&a.canvas&&t(Ot("resize",a))}})));!function(e,t){var a=e[kt]||(e[kt]={}),n=a.renderProxy=function(e){e.animationName===wt&&t()};le.each(Tt,(function(t){jt(e,t,n)})),a.reflow=!!e.offsetParent,e.classList.add(Dt)}(e,(function(){if(n.resizer){var t=e.parentNode;t&&t!==i.parentNode&&t.insertBefore(i,t.firstChild),i._reset()}}))}function Wt(e){var t=e[kt]||{},a=t.resizer;delete t.resizer,function(e){var t=e[kt]||{},a=t.renderProxy;a&&(le.each(Tt,(function(t){Pt(e,t,a)})),delete t.renderProxy),e.classList.remove(Dt)}(e),a&&a.parentNode&&a.parentNode.removeChild(a)}var Ct={disableCSSInjection:!1,_enabled:"undefined"!==typeof window&&"undefined"!==typeof document,_ensureLoaded:function(){this._loaded||(this._loaded=!0,this.disableCSSInjection||function(e,t){var a=e._style||document.createElement("style");e._style||(e._style=a,t="/* Chart.js */\n"+t,a.setAttribute("type","text/css"),document.getElementsByTagName("head")[0].appendChild(a)),a.appendChild(document.createTextNode(t))}(this,vt))},acquireContext:function(e,t){"string"===typeof e?e=document.getElementById(e):e.length&&(e=e[0]),e&&e.canvas&&(e=e.canvas);var a=e&&e.getContext&&e.getContext("2d");return this._ensureLoaded(),a&&a.canvas===e?(function(e,t){var a=e.style,n=e.getAttribute("height"),i=e.getAttribute("width");if(e[kt]={initial:{height:n,width:i,style:{display:a.display,height:a.height,width:a.width}}},a.display=a.display||"block",null===i||""===i){var r=St(e,"width");void 0!==r&&(e.width=r)}if(null===n||""===n)if(""===e.style.height)e.height=e.width/(t.options.aspectRatio||2);else{var s=St(e,"height");void 0!==r&&(e.height=s)}}(e,t),a):null},releaseContext:function(e){var t=e.canvas;if(t[kt]){var a=t[kt].initial;["height","width"].forEach((function(e){var n=a[e];le.isNullOrUndef(n)?t.removeAttribute(e):t.setAttribute(e,n)})),le.each(a.style||{},(function(e,a){t.style[a]=e})),t.width=t.width,delete t[kt]}},addEventListener:function(e,t,a){var n=e.canvas;if("resize"!==t){var i=a[kt]||(a[kt]={});jt(n,t,(i.proxies||(i.proxies={}))[e.id+"_"+t]=function(t){a(function(e,t){var a=xt[e.type]||e.type,n=le.getRelativePosition(e,t);return Ot(a,t,n.x,n.y,e)}(t,e))})}else Ft(n,a,e)},removeEventListener:function(e,t,a){var n=e.canvas;if("resize"!==t){var i=((a[kt]||{}).proxies||{})[e.id+"_"+t];i&&Pt(n,t,i)}else Wt(n)}};le.addEvent=jt,le.removeEvent=Pt;var Et=Ct._enabled?Ct:{acquireContext:function(e){return e&&e.canvas&&(e=e.canvas),e&&e.getContext("2d")||null}},It=le.extend({initialize:function(){},acquireContext:function(){},releaseContext:function(){},addEventListener:function(){},removeEventListener:function(){}},Et);se._set("global",{plugins:{}});var zt={_plugins:[],_cacheId:0,register:function(e){var t=this._plugins;[].concat(e).forEach((function(e){-1===t.indexOf(e)&&t.push(e)})),this._cacheId++},unregister:function(e){var t=this._plugins;[].concat(e).forEach((function(e){var a=t.indexOf(e);-1!==a&&t.splice(a,1)})),this._cacheId++},clear:function(){this._plugins=[],this._cacheId++},count:function(){return this._plugins.length},getAll:function(){return this._plugins},notify:function(e,t,a){var n,i,r,s,o,d=this.descriptors(e),l=d.length;for(n=0;n<l;++n)if("function"===typeof(o=(r=(i=d[n]).plugin)[t])&&((s=[e].concat(a||[])).push(i.options),!1===o.apply(r,s)))return!1;return!0},descriptors:function(e){var t=e.$plugins||(e.$plugins={});if(t.id===this._cacheId)return t.descriptors;var a=[],n=[],i=e&&e.config||{},r=i.options&&i.options.plugins||{};return this._plugins.concat(i.plugins||[]).forEach((function(e){if(-1===a.indexOf(e)){var t=e.id,i=r[t];!1!==i&&(!0===i&&(i=le.clone(se.global.plugins[t])),a.push(e),n.push({plugin:e,options:i||{}}))}})),t.descriptors=n,t.id=this._cacheId,n},_invalidate:function(e){delete e.$plugins}},Rt={constructors:{},defaults:{},registerScaleType:function(e,t,a){this.constructors[e]=t,this.defaults[e]=le.clone(a)},getScaleConstructor:function(e){return this.constructors.hasOwnProperty(e)?this.constructors[e]:void 0},getScaleDefaults:function(e){return this.defaults.hasOwnProperty(e)?le.merge({},[se.scale,this.defaults[e]]):{}},updateScaleDefaults:function(e,t){this.defaults.hasOwnProperty(e)&&(this.defaults[e]=le.extend(this.defaults[e],t))},addScalesToLayout:function(e){le.each(e.scales,(function(t){t.fullWidth=t.options.fullWidth,t.position=t.options.position,t.weight=t.options.weight,Yt.addBox(e,t)}))}},Nt=le.valueOrDefault;se._set("global",{tooltips:{enabled:!0,custom:null,mode:"nearest",position:"average",intersect:!0,backgroundColor:"rgba(0,0,0,0.8)",titleFontStyle:"bold",titleSpacing:2,titleMarginBottom:6,titleFontColor:"#fff",titleAlign:"left",bodySpacing:2,bodyFontColor:"#fff",bodyAlign:"left",footerFontStyle:"bold",footerSpacing:2,footerMarginTop:6,footerFontColor:"#fff",footerAlign:"left",yPadding:6,xPadding:6,caretPadding:2,caretSize:5,cornerRadius:6,multiKeyBackground:"#fff",displayColors:!0,borderColor:"rgba(0,0,0,0)",borderWidth:0,callbacks:{beforeTitle:le.noop,title:function(e,t){var a="",n=t.labels,i=n?n.length:0;if(e.length>0){var r=e[0];r.label?a=r.label:r.xLabel?a=r.xLabel:i>0&&r.index<i&&(a=n[r.index])}return a},afterTitle:le.noop,beforeBody:le.noop,beforeLabel:le.noop,label:function(e,t){var a=t.datasets[e.datasetIndex].label||"";return a&&(a+=": "),le.isNullOrUndef(e.value)?a+=e.yLabel:a+=e.value,a},labelColor:function(e,t){var a=t.getDatasetMeta(e.datasetIndex).data[e.index]._view;return{borderColor:a.borderColor,backgroundColor:a.backgroundColor}},labelTextColor:function(){return this._options.bodyFontColor},afterLabel:le.noop,afterBody:le.noop,beforeFooter:le.noop,footer:le.noop,afterFooter:le.noop}}});var Vt={average:function(e){if(!e.length)return!1;var t,a,n=0,i=0,r=0;for(t=0,a=e.length;t<a;++t){var s=e[t];if(s&&s.hasValue()){var o=s.tooltipPosition();n+=o.x,i+=o.y,++r}}return{x:n/r,y:i/r}},nearest:function(e,t){var a,n,i,r=t.x,s=t.y,o=Number.POSITIVE_INFINITY;for(a=0,n=e.length;a<n;++a){var d=e[a];if(d&&d.hasValue()){var l=d.getCenterPoint(),u=le.distanceBetweenPoints(t,l);u<o&&(o=u,i=d)}}if(i){var _=i.tooltipPosition();r=_.x,s=_.y}return{x:r,y:s}}};function Bt(e,t){return t&&(le.isArray(t)?Array.prototype.push.apply(e,t):e.push(t)),e}function Jt(e){return("string"===typeof e||e instanceof String)&&e.indexOf("\n")>-1?e.split("\n"):e}function Ut(e){var t=e._xScale,a=e._yScale||e._scale,n=e._index,i=e._datasetIndex,r=e._chart.getDatasetMeta(i).controller,s=r._getIndexScale(),o=r._getValueScale();return{xLabel:t?t.getLabelForIndex(n,i):"",yLabel:a?a.getLabelForIndex(n,i):"",label:s?""+s.getLabelForIndex(n,i):"",value:o?""+o.getLabelForIndex(n,i):"",index:n,datasetIndex:i,x:e._model.x,y:e._model.y}}function Gt(e){var t=se.global;return{xPadding:e.xPadding,yPadding:e.yPadding,xAlign:e.xAlign,yAlign:e.yAlign,bodyFontColor:e.bodyFontColor,_bodyFontFamily:Nt(e.bodyFontFamily,t.defaultFontFamily),_bodyFontStyle:Nt(e.bodyFontStyle,t.defaultFontStyle),_bodyAlign:e.bodyAlign,bodyFontSize:Nt(e.bodyFontSize,t.defaultFontSize),bodySpacing:e.bodySpacing,titleFontColor:e.titleFontColor,_titleFontFamily:Nt(e.titleFontFamily,t.defaultFontFamily),_titleFontStyle:Nt(e.titleFontStyle,t.defaultFontStyle),titleFontSize:Nt(e.titleFontSize,t.defaultFontSize),_titleAlign:e.titleAlign,titleSpacing:e.titleSpacing,titleMarginBottom:e.titleMarginBottom,footerFontColor:e.footerFontColor,_footerFontFamily:Nt(e.footerFontFamily,t.defaultFontFamily),_footerFontStyle:Nt(e.footerFontStyle,t.defaultFontStyle),footerFontSize:Nt(e.footerFontSize,t.defaultFontSize),_footerAlign:e.footerAlign,footerSpacing:e.footerSpacing,footerMarginTop:e.footerMarginTop,caretSize:e.caretSize,cornerRadius:e.cornerRadius,backgroundColor:e.backgroundColor,opacity:0,legendColorBackground:e.multiKeyBackground,displayColors:e.displayColors,borderColor:e.borderColor,borderWidth:e.borderWidth}}function qt(e,t){return"center"===t?e.x+e.width/2:"right"===t?e.x+e.width-e.xPadding:e.x+e.xPadding}function Kt(e){return Bt([],Jt(e))}var Zt=he.extend({initialize:function(){this._model=Gt(this._options),this._lastActive=[]},getTitle:function(){var e=this,t=e._options,a=t.callbacks,n=a.beforeTitle.apply(e,arguments),i=a.title.apply(e,arguments),r=a.afterTitle.apply(e,arguments),s=[];return s=Bt(s,Jt(n)),s=Bt(s,Jt(i)),s=Bt(s,Jt(r))},getBeforeBody:function(){return Kt(this._options.callbacks.beforeBody.apply(this,arguments))},getBody:function(e,t){var a=this,n=a._options.callbacks,i=[];return le.each(e,(function(e){var r={before:[],lines:[],after:[]};Bt(r.before,Jt(n.beforeLabel.call(a,e,t))),Bt(r.lines,n.label.call(a,e,t)),Bt(r.after,Jt(n.afterLabel.call(a,e,t))),i.push(r)})),i},getAfterBody:function(){return Kt(this._options.callbacks.afterBody.apply(this,arguments))},getFooter:function(){var e=this,t=e._options.callbacks,a=t.beforeFooter.apply(e,arguments),n=t.footer.apply(e,arguments),i=t.afterFooter.apply(e,arguments),r=[];return r=Bt(r,Jt(a)),r=Bt(r,Jt(n)),r=Bt(r,Jt(i))},update:function(e){var t,a,n=this,i=n._options,r=n._model,s=n._model=Gt(i),o=n._active,d=n._data,l={xAlign:r.xAlign,yAlign:r.yAlign},u={x:r.x,y:r.y},_={width:r.width,height:r.height},m={x:r.caretX,y:r.caretY};if(o.length){s.opacity=1;var c=[],h=[];m=Vt[i.position].call(n,o,n._eventPosition);var f=[];for(t=0,a=o.length;t<a;++t)f.push(Ut(o[t]));i.filter&&(f=f.filter((function(e){return i.filter(e,d)}))),i.itemSort&&(f=f.sort((function(e,t){return i.itemSort(e,t,d)}))),le.each(f,(function(e){c.push(i.callbacks.labelColor.call(n,e,n._chart)),h.push(i.callbacks.labelTextColor.call(n,e,n._chart))})),s.title=n.getTitle(f,d),s.beforeBody=n.getBeforeBody(f,d),s.body=n.getBody(f,d),s.afterBody=n.getAfterBody(f,d),s.footer=n.getFooter(f,d),s.x=m.x,s.y=m.y,s.caretPadding=i.caretPadding,s.labelColors=c,s.labelTextColors=h,s.dataPoints=f,_=function(e,t){var a=e._chart.ctx,n=2*t.yPadding,i=0,r=t.body,s=r.reduce((function(e,t){return e+t.before.length+t.lines.length+t.after.length}),0);s+=t.beforeBody.length+t.afterBody.length;var o=t.title.length,d=t.footer.length,l=t.titleFontSize,u=t.bodyFontSize,_=t.footerFontSize;n+=o*l,n+=o?(o-1)*t.titleSpacing:0,n+=o?t.titleMarginBottom:0,n+=s*u,n+=s?(s-1)*t.bodySpacing:0,n+=d?t.footerMarginTop:0,n+=d*_,n+=d?(d-1)*t.footerSpacing:0;var m=0,c=function(e){i=Math.max(i,a.measureText(e).width+m)};return a.font=le.fontString(l,t._titleFontStyle,t._titleFontFamily),le.each(t.title,c),a.font=le.fontString(u,t._bodyFontStyle,t._bodyFontFamily),le.each(t.beforeBody.concat(t.afterBody),c),m=t.displayColors?u+2:0,le.each(r,(function(e){le.each(e.before,c),le.each(e.lines,c),le.each(e.after,c)})),m=0,a.font=le.fontString(_,t._footerFontStyle,t._footerFontFamily),le.each(t.footer,c),{width:i+=2*t.xPadding,height:n}}(this,s),u=function(e,t,a,n){var i=e.x,r=e.y,s=e.caretSize,o=e.caretPadding,d=e.cornerRadius,l=a.xAlign,u=a.yAlign,_=s+o,m=d+o;return"right"===l?i-=t.width:"center"===l&&((i-=t.width/2)+t.width>n.width&&(i=n.width-t.width),i<0&&(i=0)),"top"===u?r+=_:r-="bottom"===u?t.height+_:t.height/2,"center"===u?"left"===l?i+=_:"right"===l&&(i-=_):"left"===l?i-=m:"right"===l&&(i+=m),{x:i,y:r}}(s,_,l=function(e,t){var a,n,i,r,s,o=e._model,d=e._chart,l=e._chart.chartArea,u="center",_="center";o.y<t.height?_="top":o.y>d.height-t.height&&(_="bottom");var m=(l.left+l.right)/2,c=(l.top+l.bottom)/2;"center"===_?(a=function(e){return e<=m},n=function(e){return e>m}):(a=function(e){return e<=t.width/2},n=function(e){return e>=d.width-t.width/2}),i=function(e){return e+t.width+o.caretSize+o.caretPadding>d.width},r=function(e){return e-t.width-o.caretSize-o.caretPadding<0},s=function(e){return e<=c?"top":"bottom"},a(o.x)?(u="left",i(o.x)&&(u="center",_=s(o.y))):n(o.x)&&(u="right",r(o.x)&&(u="center",_=s(o.y)));var h=e._options;return{xAlign:h.xAlign?h.xAlign:u,yAlign:h.yAlign?h.yAlign:_}}(this,_),n._chart)}else s.opacity=0;return s.xAlign=l.xAlign,s.yAlign=l.yAlign,s.x=u.x,s.y=u.y,s.width=_.width,s.height=_.height,s.caretX=m.x,s.caretY=m.y,n._model=s,e&&i.custom&&i.custom.call(n,s),n},drawCaret:function(e,t){var a=this._chart.ctx,n=this._view,i=this.getCaretPosition(e,t,n);a.lineTo(i.x1,i.y1),a.lineTo(i.x2,i.y2),a.lineTo(i.x3,i.y3)},getCaretPosition:function(e,t,a){var n,i,r,s,o,d,l=a.caretSize,u=a.cornerRadius,_=a.xAlign,m=a.yAlign,c=e.x,h=e.y,f=t.width,M=t.height;if("center"===m)o=h+M/2,"left"===_?(i=(n=c)-l,r=n,s=o+l,d=o-l):(i=(n=c+f)+l,r=n,s=o-l,d=o+l);else if("left"===_?(n=(i=c+u+l)-l,r=i+l):"right"===_?(n=(i=c+f-u-l)-l,r=i+l):(n=(i=a.caretX)-l,r=i+l),"top"===m)o=(s=h)-l,d=s;else{o=(s=h+M)+l,d=s;var p=r;r=n,n=p}return{x1:n,x2:i,x3:r,y1:s,y2:o,y3:d}},drawTitle:function(e,t,a){var n=t.title;if(n.length){e.x=qt(t,t._titleAlign),a.textAlign=t._titleAlign,a.textBaseline="top";var i,r,s=t.titleFontSize,o=t.titleSpacing;for(a.fillStyle=t.titleFontColor,a.font=le.fontString(s,t._titleFontStyle,t._titleFontFamily),i=0,r=n.length;i<r;++i)a.fillText(n[i],e.x,e.y),e.y+=s+o,i+1===n.length&&(e.y+=t.titleMarginBottom-o)}},drawBody:function(e,t,a){var n,i=t.bodyFontSize,r=t.bodySpacing,s=t._bodyAlign,o=t.body,d=t.displayColors,l=t.labelColors,u=0,_=d?qt(t,"left"):0;a.textAlign=s,a.textBaseline="top",a.font=le.fontString(i,t._bodyFontStyle,t._bodyFontFamily),e.x=qt(t,s);var m=function(t){a.fillText(t,e.x+u,e.y),e.y+=i+r};a.fillStyle=t.bodyFontColor,le.each(t.beforeBody,m),u=d&&"right"!==s?"center"===s?i/2+1:i+2:0,le.each(o,(function(r,s){n=t.labelTextColors[s],a.fillStyle=n,le.each(r.before,m),le.each(r.lines,(function(r){d&&(a.fillStyle=t.legendColorBackground,a.fillRect(_,e.y,i,i),a.lineWidth=1,a.strokeStyle=l[s].borderColor,a.strokeRect(_,e.y,i,i),a.fillStyle=l[s].backgroundColor,a.fillRect(_+1,e.y+1,i-2,i-2),a.fillStyle=n),m(r)})),le.each(r.after,m)})),u=0,le.each(t.afterBody,m),e.y-=r},drawFooter:function(e,t,a){var n=t.footer;n.length&&(e.x=qt(t,t._footerAlign),e.y+=t.footerMarginTop,a.textAlign=t._footerAlign,a.textBaseline="top",a.fillStyle=t.footerFontColor,a.font=le.fontString(t.footerFontSize,t._footerFontStyle,t._footerFontFamily),le.each(n,(function(n){a.fillText(n,e.x,e.y),e.y+=t.footerFontSize+t.footerSpacing})))},drawBackground:function(e,t,a,n){a.fillStyle=t.backgroundColor,a.strokeStyle=t.borderColor,a.lineWidth=t.borderWidth;var i=t.xAlign,r=t.yAlign,s=e.x,o=e.y,d=n.width,l=n.height,u=t.cornerRadius;a.beginPath(),a.moveTo(s+u,o),"top"===r&&this.drawCaret(e,n),a.lineTo(s+d-u,o),a.quadraticCurveTo(s+d,o,s+d,o+u),"center"===r&&"right"===i&&this.drawCaret(e,n),a.lineTo(s+d,o+l-u),a.quadraticCurveTo(s+d,o+l,s+d-u,o+l),"bottom"===r&&this.drawCaret(e,n),a.lineTo(s+u,o+l),a.quadraticCurveTo(s,o+l,s,o+l-u),"center"===r&&"left"===i&&this.drawCaret(e,n),a.lineTo(s,o+u),a.quadraticCurveTo(s,o,s+u,o),a.closePath(),a.fill(),t.borderWidth>0&&a.stroke()},draw:function(){var e=this._chart.ctx,t=this._view;if(0!==t.opacity){var a={width:t.width,height:t.height},n={x:t.x,y:t.y},i=Math.abs(t.opacity<.001)?0:t.opacity,r=t.title.length||t.beforeBody.length||t.body.length||t.afterBody.length||t.footer.length;this._options.enabled&&r&&(e.save(),e.globalAlpha=i,this.drawBackground(n,t,e,a),n.y+=t.yPadding,this.drawTitle(n,t,e),this.drawBody(n,t,e),this.drawFooter(n,t,e),e.restore())}},handleEvent:function(e){var t,a=this,n=a._options;return a._lastActive=a._lastActive||[],"mouseout"===e.type?a._active=[]:a._active=a._chart.getElementsAtEventForMode(e,n.mode,n),(t=!le.arrayEquals(a._active,a._lastActive))&&(a._lastActive=a._active,(n.enabled||n.custom)&&(a._eventPosition={x:e.x,y:e.y},a.update(!0),a.pivot())),t}}),$t=Vt,Qt=Zt;Qt.positioners=$t;var Xt=le.valueOrDefault;function ea(){return le.merge({},[].slice.call(arguments),{merger:function(e,t,a,n){if("xAxes"===e||"yAxes"===e){var i,r,s,o=a[e].length;for(t[e]||(t[e]=[]),i=0;i<o;++i)s=a[e][i],r=Xt(s.type,"xAxes"===e?"category":"linear"),i>=t[e].length&&t[e].push({}),!t[e][i].type||s.type&&s.type!==t[e][i].type?le.merge(t[e][i],[Rt.getScaleDefaults(r),s]):le.merge(t[e][i],s)}else le._merger(e,t,a,n)}})}function ta(){return le.merge({},[].slice.call(arguments),{merger:function(e,t,a,n){var i=t[e]||{},r=a[e];"scales"===e?t[e]=ea(i,r):"scale"===e?t[e]=le.merge(i,[Rt.getScaleDefaults(r.type),r]):le._merger(e,t,a,n)}})}function aa(e){var t=e.options;le.each(e.scales,(function(t){Yt.removeBox(e,t)})),t=ta(se.global,se[e.config.type],t),e.options=e.config.options=t,e.ensureScalesHaveIDs(),e.buildOrUpdateScales(),e.tooltip._options=t.tooltips,e.tooltip.initialize()}function na(e){return"top"===e||"bottom"===e}se._set("global",{elements:{},events:["mousemove","mouseout","click","touchstart","touchmove"],hover:{onHover:null,mode:"nearest",intersect:!0,animationDuration:400},onClick:null,maintainAspectRatio:!0,responsive:!0,responsiveAnimationDuration:0});var ia=function(e,t){return this.construct(e,t),this};le.extend(ia.prototype,{construct:function(e,t){var a=this;t=function(e){var t=(e=e||{}).data=e.data||{};return t.datasets=t.datasets||[],t.labels=t.labels||[],e.options=ta(se.global,se[e.type],e.options||{}),e}(t);var n=It.acquireContext(e,t),i=n&&n.canvas,r=i&&i.height,s=i&&i.width;a.id=le.uid(),a.ctx=n,a.canvas=i,a.config=t,a.width=s,a.height=r,a.aspectRatio=r?s/r:null,a.options=t.options,a._bufferedRender=!1,a.chart=a,a.controller=a,ia.instances[a.id]=a,Object.defineProperty(a,"data",{get:function(){return a.config.data},set:function(e){a.config.data=e}}),n&&i?(a.initialize(),a.update()):console.error("Failed to create chart: can't acquire context from the given item")},initialize:function(){var e=this;return zt.notify(e,"beforeInit"),le.retinaScale(e,e.options.devicePixelRatio),e.bindEvents(),e.options.responsive&&e.resize(!0),e.ensureScalesHaveIDs(),e.buildOrUpdateScales(),e.initToolTip(),zt.notify(e,"afterInit"),e},clear:function(){return le.canvas.clear(this),this},stop:function(){return pe.cancelAnimation(this),this},resize:function(e){var t=this,a=t.options,n=t.canvas,i=a.maintainAspectRatio&&t.aspectRatio||null,r=Math.max(0,Math.floor(le.getMaximumWidth(n))),s=Math.max(0,Math.floor(i?r/i:le.getMaximumHeight(n)));if((t.width!==r||t.height!==s)&&(n.width=t.width=r,n.height=t.height=s,n.style.width=r+"px",n.style.height=s+"px",le.retinaScale(t,a.devicePixelRatio),!e)){var o={width:r,height:s};zt.notify(t,"resize",[o]),a.onResize&&a.onResize(t,o),t.stop(),t.update({duration:a.responsiveAnimationDuration})}},ensureScalesHaveIDs:function(){var e=this.options,t=e.scales||{},a=e.scale;le.each(t.xAxes,(function(e,t){e.id=e.id||"x-axis-"+t})),le.each(t.yAxes,(function(e,t){e.id=e.id||"y-axis-"+t})),a&&(a.id=a.id||"scale")},buildOrUpdateScales:function(){var e=this,t=e.options,a=e.scales||{},n=[],i=Object.keys(a).reduce((function(e,t){return e[t]=!1,e}),{});t.scales&&(n=n.concat((t.scales.xAxes||[]).map((function(e){return{options:e,dtype:"category",dposition:"bottom"}})),(t.scales.yAxes||[]).map((function(e){return{options:e,dtype:"linear",dposition:"left"}})))),t.scale&&n.push({options:t.scale,dtype:"radialLinear",isDefault:!0,dposition:"chartArea"}),le.each(n,(function(t){var n=t.options,r=n.id,s=Xt(n.type,t.dtype);na(n.position)!==na(t.dposition)&&(n.position=t.dposition),i[r]=!0;var o=null;if(r in a&&a[r].type===s)(o=a[r]).options=n,o.ctx=e.ctx,o.chart=e;else{var d=Rt.getScaleConstructor(s);if(!d)return;o=new d({id:r,type:s,options:n,ctx:e.ctx,chart:e}),a[o.id]=o}o.mergeTicksOptions(),t.isDefault&&(e.scale=o)})),le.each(i,(function(e,t){e||delete a[t]})),e.scales=a,Rt.addScalesToLayout(this)},buildOrUpdateControllers:function(){var e=this,t=[];return le.each(e.data.datasets,(function(a,n){var i=e.getDatasetMeta(n),r=a.type||e.config.type;if(i.type&&i.type!==r&&(e.destroyDatasetMeta(n),i=e.getDatasetMeta(n)),i.type=r,i.controller)i.controller.updateIndex(n),i.controller.linkScales();else{var s=lt[i.type];if(void 0===s)throw new Error('"'+i.type+'" is not a chart type.');i.controller=new s(e,n),t.push(i.controller)}}),e),t},resetElements:function(){var e=this;le.each(e.data.datasets,(function(t,a){e.getDatasetMeta(a).controller.reset()}),e)},reset:function(){this.resetElements(),this.tooltip.initialize()},update:function(e){var t=this;if(e&&"object"===typeof e||(e={duration:e,lazy:arguments[1]}),aa(t),zt._invalidate(t),!1!==zt.notify(t,"beforeUpdate")){t.tooltip._data=t.data;var a=t.buildOrUpdateControllers();le.each(t.data.datasets,(function(e,a){t.getDatasetMeta(a).controller.buildOrUpdateElements()}),t),t.updateLayout(),t.options.animation&&t.options.animation.duration&&le.each(a,(function(e){e.reset()})),t.updateDatasets(),t.tooltip.initialize(),t.lastActive=[],zt.notify(t,"afterUpdate"),t._bufferedRender?t._bufferedRequest={duration:e.duration,easing:e.easing,lazy:e.lazy}:t.render(e)}},updateLayout:function(){!1!==zt.notify(this,"beforeLayout")&&(Yt.update(this,this.width,this.height),zt.notify(this,"afterScaleUpdate"),zt.notify(this,"afterLayout"))},updateDatasets:function(){if(!1!==zt.notify(this,"beforeDatasetsUpdate")){for(var e=0,t=this.data.datasets.length;e<t;++e)this.updateDataset(e);zt.notify(this,"afterDatasetsUpdate")}},updateDataset:function(e){var t=this.getDatasetMeta(e),a={meta:t,index:e};!1!==zt.notify(this,"beforeDatasetUpdate",[a])&&(t.controller.update(),zt.notify(this,"afterDatasetUpdate",[a]))},render:function(e){var t=this;e&&"object"===typeof e||(e={duration:e,lazy:arguments[1]});var a=t.options.animation,n=Xt(e.duration,a&&a.duration),i=e.lazy;if(!1!==zt.notify(t,"beforeRender")){var r=function(e){zt.notify(t,"afterRender"),le.callback(a&&a.onComplete,[e],t)};if(a&&n){var s=new Me({numSteps:n/16.66,easing:e.easing||a.easing,render:function(e,t){var a=le.easing.effects[t.easing],n=t.currentStep,i=n/t.numSteps;e.draw(a(i),i,n)},onAnimationProgress:a.onProgress,onAnimationComplete:r});pe.addAnimation(t,s,n,i)}else t.draw(),r(new Me({numSteps:0,chart:t}));return t}},draw:function(e){var t=this;t.clear(),le.isNullOrUndef(e)&&(e=1),t.transition(e),t.width<=0||t.height<=0||!1!==zt.notify(t,"beforeDraw",[e])&&(le.each(t.boxes,(function(e){e.draw(t.chartArea)}),t),t.drawDatasets(e),t._drawTooltip(e),zt.notify(t,"afterDraw",[e]))},transition:function(e){for(var t=0,a=(this.data.datasets||[]).length;t<a;++t)this.isDatasetVisible(t)&&this.getDatasetMeta(t).controller.transition(e);this.tooltip.transition(e)},drawDatasets:function(e){var t=this;if(!1!==zt.notify(t,"beforeDatasetsDraw",[e])){for(var a=(t.data.datasets||[]).length-1;a>=0;--a)t.isDatasetVisible(a)&&t.drawDataset(a,e);zt.notify(t,"afterDatasetsDraw",[e])}},drawDataset:function(e,t){var a=this.getDatasetMeta(e),n={meta:a,index:e,easingValue:t};!1!==zt.notify(this,"beforeDatasetDraw",[n])&&(a.controller.draw(t),zt.notify(this,"afterDatasetDraw",[n]))},_drawTooltip:function(e){var t=this.tooltip,a={tooltip:t,easingValue:e};!1!==zt.notify(this,"beforeTooltipDraw",[a])&&(t.draw(),zt.notify(this,"afterTooltipDraw",[a]))},getElementAtEvent:function(e){return Mt.modes.single(this,e)},getElementsAtEvent:function(e){return Mt.modes.label(this,e,{intersect:!0})},getElementsAtXAxis:function(e){return Mt.modes["x-axis"](this,e,{intersect:!0})},getElementsAtEventForMode:function(e,t,a){var n=Mt.modes[t];return"function"===typeof n?n(this,e,a):[]},getDatasetAtEvent:function(e){return Mt.modes.dataset(this,e,{intersect:!0})},getDatasetMeta:function(e){var t=this.data.datasets[e];t._meta||(t._meta={});var a=t._meta[this.id];return a||(a=t._meta[this.id]={type:null,data:[],dataset:null,controller:null,hidden:null,xAxisID:null,yAxisID:null}),a},getVisibleDatasetCount:function(){for(var e=0,t=0,a=this.data.datasets.length;t<a;++t)this.isDatasetVisible(t)&&e++;return e},isDatasetVisible:function(e){var t=this.getDatasetMeta(e);return"boolean"===typeof t.hidden?!t.hidden:!this.data.datasets[e].hidden},generateLegend:function(){return this.options.legendCallback(this)},destroyDatasetMeta:function(e){var t=this.id,a=this.data.datasets[e],n=a._meta&&a._meta[t];n&&(n.controller.destroy(),delete a._meta[t])},destroy:function(){var e,t,a=this,n=a.canvas;for(a.stop(),e=0,t=a.data.datasets.length;e<t;++e)a.destroyDatasetMeta(e);n&&(a.unbindEvents(),le.canvas.clear(a),It.releaseContext(a.ctx),a.canvas=null,a.ctx=null),zt.notify(a,"destroy"),delete ia.instances[a.id]},toBase64Image:function(){return this.canvas.toDataURL.apply(this.canvas,arguments)},initToolTip:function(){var e=this;e.tooltip=new Qt({_chart:e,_chartInstance:e,_data:e.data,_options:e.options.tooltips},e)},bindEvents:function(){var e=this,t=e._listeners={},a=function(){e.eventHandler.apply(e,arguments)};le.each(e.options.events,(function(n){It.addEventListener(e,n,a),t[n]=a})),e.options.responsive&&(a=function(){e.resize()},It.addEventListener(e,"resize",a),t.resize=a)},unbindEvents:function(){var e=this,t=e._listeners;t&&(delete e._listeners,le.each(t,(function(t,a){It.removeEventListener(e,a,t)})))},updateHoverStyle:function(e,t,a){var n,i,r,s=a?"setHoverStyle":"removeHoverStyle";for(i=0,r=e.length;i<r;++i)(n=e[i])&&this.getDatasetMeta(n._datasetIndex).controller[s](n)},eventHandler:function(e){var t=this,a=t.tooltip;if(!1!==zt.notify(t,"beforeEvent",[e])){t._bufferedRender=!0,t._bufferedRequest=null;var n=t.handleEvent(e);a&&(n=a._start?a.handleEvent(e):n|a.handleEvent(e)),zt.notify(t,"afterEvent",[e]);var i=t._bufferedRequest;return i?t.render(i):n&&!t.animating&&(t.stop(),t.render({duration:t.options.hover.animationDuration,lazy:!0})),t._bufferedRender=!1,t._bufferedRequest=null,t}},handleEvent:function(e){var t,a=this,n=a.options||{},i=n.hover;return a.lastActive=a.lastActive||[],"mouseout"===e.type?a.active=[]:a.active=a.getElementsAtEventForMode(e,i.mode,i),le.callback(n.onHover||n.hover.onHover,[e.native,a.active],a),"mouseup"!==e.type&&"click"!==e.type||n.onClick&&n.onClick.call(a,e.native,a.active),a.lastActive.length&&a.updateHoverStyle(a.lastActive,i.mode,!1),a.active.length&&i.mode&&a.updateHoverStyle(a.active,i.mode,!0),t=!le.arrayEquals(a.active,a.lastActive),a.lastActive=a.active,t}}),ia.instances={};var ra=ia;function sa(){throw new Error("This method is not implemented: either no adapter can be found or an incomplete integration was provided.")}function oa(e){this.options=e||{}}ia.Controller=ia,ia.types={},le.configMerge=ta,le.scaleMerge=ea,le.extend(oa.prototype,{formats:sa,parse:sa,format:sa,add:sa,diff:sa,startOf:sa,endOf:sa,_create:function(e){return e}}),oa.override=function(e){le.extend(oa.prototype,e)};var da={_date:oa},la={formatters:{values:function(e){return le.isArray(e)?e:""+e},linear:function(e,t,a){var n=a.length>3?a[2]-a[1]:a[1]-a[0];Math.abs(n)>1&&e!==Math.floor(e)&&(n=e-Math.floor(e));var i=le.log10(Math.abs(n)),r="";if(0!==e)if(Math.max(Math.abs(a[0]),Math.abs(a[a.length-1]))<1e-4){var s=le.log10(Math.abs(e));r=e.toExponential(Math.floor(s)-Math.floor(i))}else{var o=-1*Math.floor(i);o=Math.max(Math.min(o,20),0),r=e.toFixed(o)}else r="0";return r},logarithmic:function(e,t,a){var n=e/Math.pow(10,Math.floor(le.log10(e)));return 0===e?"0":1===n||2===n||5===n||0===t||t===a.length-1?e.toExponential():""}}},ua=le.valueOrDefault,_a=le.valueAtIndexOrDefault;function ma(e){var t,a,n=[];for(t=0,a=e.length;t<a;++t)n.push(e[t].label);return n}function ca(e,t,a){return le.isArray(t)?le.longestText(e,a,t):e.measureText(t).width}se._set("scale",{display:!0,position:"left",offset:!1,gridLines:{display:!0,color:"rgba(0, 0, 0, 0.1)",lineWidth:1,drawBorder:!0,drawOnChartArea:!0,drawTicks:!0,tickMarkLength:10,zeroLineWidth:1,zeroLineColor:"rgba(0,0,0,0.25)",zeroLineBorderDash:[],zeroLineBorderDashOffset:0,offsetGridLines:!1,borderDash:[],borderDashOffset:0},scaleLabel:{display:!1,labelString:"",padding:{top:4,bottom:4}},ticks:{beginAtZero:!1,minRotation:0,maxRotation:50,mirror:!1,padding:0,reverse:!1,display:!0,autoSkip:!0,autoSkipPadding:0,labelOffset:0,callback:la.formatters.values,minor:{},major:{}}});var ha=he.extend({getPadding:function(){return{left:this.paddingLeft||0,top:this.paddingTop||0,right:this.paddingRight||0,bottom:this.paddingBottom||0}},getTicks:function(){return this._ticks},mergeTicksOptions:function(){var e=this.options.ticks;for(var t in!1===e.minor&&(e.minor={display:!1}),!1===e.major&&(e.major={display:!1}),e)"major"!==t&&"minor"!==t&&("undefined"===typeof e.minor[t]&&(e.minor[t]=e[t]),"undefined"===typeof e.major[t]&&(e.major[t]=e[t]))},beforeUpdate:function(){le.callback(this.options.beforeUpdate,[this])},update:function(e,t,a){var n,i,r,s,o,d,l=this;for(l.beforeUpdate(),l.maxWidth=e,l.maxHeight=t,l.margins=le.extend({left:0,right:0,top:0,bottom:0},a),l._maxLabelLines=0,l.longestLabelWidth=0,l.longestTextCache=l.longestTextCache||{},l.beforeSetDimensions(),l.setDimensions(),l.afterSetDimensions(),l.beforeDataLimits(),l.determineDataLimits(),l.afterDataLimits(),l.beforeBuildTicks(),o=l.buildTicks()||[],o=l.afterBuildTicks(o)||o,l.beforeTickToLabelConversion(),r=l.convertTicksToLabels(o)||l.ticks,l.afterTickToLabelConversion(),l.ticks=r,n=0,i=r.length;n<i;++n)s=r[n],(d=o[n])?d.label=s:o.push(d={label:s,major:!1});return l._ticks=o,l.beforeCalculateTickRotation(),l.calculateTickRotation(),l.afterCalculateTickRotation(),l.beforeFit(),l.fit(),l.afterFit(),l.afterUpdate(),l.minSize},afterUpdate:function(){le.callback(this.options.afterUpdate,[this])},beforeSetDimensions:function(){le.callback(this.options.beforeSetDimensions,[this])},setDimensions:function(){var e=this;e.isHorizontal()?(e.width=e.maxWidth,e.left=0,e.right=e.width):(e.height=e.maxHeight,e.top=0,e.bottom=e.height),e.paddingLeft=0,e.paddingTop=0,e.paddingRight=0,e.paddingBottom=0},afterSetDimensions:function(){le.callback(this.options.afterSetDimensions,[this])},beforeDataLimits:function(){le.callback(this.options.beforeDataLimits,[this])},determineDataLimits:le.noop,afterDataLimits:function(){le.callback(this.options.afterDataLimits,[this])},beforeBuildTicks:function(){le.callback(this.options.beforeBuildTicks,[this])},buildTicks:le.noop,afterBuildTicks:function(e){var t=this;return le.isArray(e)&&e.length?le.callback(t.options.afterBuildTicks,[t,e]):(t.ticks=le.callback(t.options.afterBuildTicks,[t,t.ticks])||t.ticks,e)},beforeTickToLabelConversion:function(){le.callback(this.options.beforeTickToLabelConversion,[this])},convertTicksToLabels:function(){var e=this.options.ticks;this.ticks=this.ticks.map(e.userCallback||e.callback,this)},afterTickToLabelConversion:function(){le.callback(this.options.afterTickToLabelConversion,[this])},beforeCalculateTickRotation:function(){le.callback(this.options.beforeCalculateTickRotation,[this])},calculateTickRotation:function(){var e=this,t=e.ctx,a=e.options.ticks,n=ma(e._ticks),i=le.options._parseFont(a);t.font=i.string;var r=a.minRotation||0;if(n.length&&e.options.display&&e.isHorizontal())for(var s,o=le.longestText(t,i.string,n,e.longestTextCache),d=o,l=e.getPixelForTick(1)-e.getPixelForTick(0)-6;d>l&&r<a.maxRotation;){var u=le.toRadians(r);if(s=Math.cos(u),Math.sin(u)*o>e.maxHeight){r--;break}r++,d=s*o}e.labelRotation=r},afterCalculateTickRotation:function(){le.callback(this.options.afterCalculateTickRotation,[this])},beforeFit:function(){le.callback(this.options.beforeFit,[this])},fit:function(){var e=this,t=e.minSize={width:0,height:0},a=ma(e._ticks),n=e.options,i=n.ticks,r=n.scaleLabel,s=n.gridLines,o=e._isVisible(),d=n.position,l=e.isHorizontal(),u=le.options._parseFont,_=u(i),m=n.gridLines.tickMarkLength;if(t.width=l?e.isFullWidth()?e.maxWidth-e.margins.left-e.margins.right:e.maxWidth:o&&s.drawTicks?m:0,t.height=l?o&&s.drawTicks?m:0:e.maxHeight,r.display&&o){var c=u(r),h=le.options.toPadding(r.padding),f=c.lineHeight+h.height;l?t.height+=f:t.width+=f}if(i.display&&o){var M=le.longestText(e.ctx,_.string,a,e.longestTextCache),p=le.numberOfLabelLines(a),y=.5*_.size,g=e.options.ticks.padding;if(e._maxLabelLines=p,e.longestLabelWidth=M,l){var L=le.toRadians(e.labelRotation),Y=Math.cos(L),v=Math.sin(L)*M+_.lineHeight*p+y;t.height=Math.min(e.maxHeight,t.height+v+g),e.ctx.font=_.string;var k,b,D=ca(e.ctx,a[0],_.string),w=ca(e.ctx,a[a.length-1],_.string),T=e.getPixelForTick(0)-e.left,x=e.right-e.getPixelForTick(a.length-1);0!==e.labelRotation?(k="bottom"===d?Y*D:Y*y,b="bottom"===d?Y*y:Y*w):(k=D/2,b=w/2),e.paddingLeft=Math.max(k-T,0)+3,e.paddingRight=Math.max(b-x,0)+3}else i.mirror?M=0:M+=g+y,t.width=Math.min(e.maxWidth,t.width+M),e.paddingTop=_.size/2,e.paddingBottom=_.size/2}e.handleMargins(),e.width=t.width,e.height=t.height},handleMargins:function(){var e=this;e.margins&&(e.paddingLeft=Math.max(e.paddingLeft-e.margins.left,0),e.paddingTop=Math.max(e.paddingTop-e.margins.top,0),e.paddingRight=Math.max(e.paddingRight-e.margins.right,0),e.paddingBottom=Math.max(e.paddingBottom-e.margins.bottom,0))},afterFit:function(){le.callback(this.options.afterFit,[this])},isHorizontal:function(){return"top"===this.options.position||"bottom"===this.options.position},isFullWidth:function(){return this.options.fullWidth},getRightValue:function(e){if(le.isNullOrUndef(e))return NaN;if(("number"===typeof e||e instanceof Number)&&!isFinite(e))return NaN;if(e)if(this.isHorizontal()){if(void 0!==e.x)return this.getRightValue(e.x)}else if(void 0!==e.y)return this.getRightValue(e.y);return e},getLabelForIndex:le.noop,getPixelForValue:le.noop,getValueForPixel:le.noop,getPixelForTick:function(e){var t=this,a=t.options.offset;if(t.isHorizontal()){var n=(t.width-(t.paddingLeft+t.paddingRight))/Math.max(t._ticks.length-(a?0:1),1),i=n*e+t.paddingLeft;a&&(i+=n/2);var r=t.left+i;return r+=t.isFullWidth()?t.margins.left:0}var s=t.height-(t.paddingTop+t.paddingBottom);return t.top+e*(s/(t._ticks.length-1))},getPixelForDecimal:function(e){var t=this;if(t.isHorizontal()){var a=(t.width-(t.paddingLeft+t.paddingRight))*e+t.paddingLeft,n=t.left+a;return n+=t.isFullWidth()?t.margins.left:0}return t.top+e*t.height},getBasePixel:function(){return this.getPixelForValue(this.getBaseValue())},getBaseValue:function(){var e=this.min,t=this.max;return this.beginAtZero?0:e<0&&t<0?t:e>0&&t>0?e:0},_autoSkip:function(e){var t,a,n=this,i=n.isHorizontal(),r=n.options.ticks.minor,s=e.length,o=!1,d=r.maxTicksLimit,l=n._tickSize()*(s-1),u=i?n.width-(n.paddingLeft+n.paddingRight):n.height-(n.paddingTop+n.PaddingBottom),_=[];for(l>u&&(o=1+Math.floor(l/u)),s>d&&(o=Math.max(o,1+Math.floor(s/d))),t=0;t<s;t++)a=e[t],o>1&&t%o>0&&delete a.label,_.push(a);return _},_tickSize:function(){var e=this,t=e.isHorizontal(),a=e.options.ticks.minor,n=le.toRadians(e.labelRotation),i=Math.abs(Math.cos(n)),r=Math.abs(Math.sin(n)),s=a.autoSkipPadding||0,o=e.longestLabelWidth+s||0,d=le.options._parseFont(a),l=e._maxLabelLines*d.lineHeight+s||0;return t?l*i>o*r?o/i:l/r:l*r<o*i?l/i:o/r},_isVisible:function(){var e,t,a,n=this.chart,i=this.options.display;if("auto"!==i)return!!i;for(e=0,t=n.data.datasets.length;e<t;++e)if(n.isDatasetVisible(e)&&((a=n.getDatasetMeta(e)).xAxisID===this.id||a.yAxisID===this.id))return!0;return!1},draw:function(e){var t=this,a=t.options;if(t._isVisible()){var n,i,r,s=t.chart,o=t.ctx,d=se.global.defaultFontColor,l=a.ticks.minor,u=a.ticks.major||l,_=a.gridLines,m=a.scaleLabel,c=a.position,h=0!==t.labelRotation,f=l.mirror,M=t.isHorizontal(),p=le.options._parseFont,y=l.display&&l.autoSkip?t._autoSkip(t.getTicks()):t.getTicks(),g=ua(l.fontColor,d),L=p(l),Y=L.lineHeight,v=ua(u.fontColor,d),k=p(u),b=l.padding,D=l.labelOffset,w=_.drawTicks?_.tickMarkLength:0,T=ua(m.fontColor,d),x=p(m),S=le.options.toPadding(m.padding),H=le.toRadians(t.labelRotation),j=[],P=_.drawBorder?_a(_.lineWidth,0,0):0,O=le._alignPixel;if("top"===c?(n=O(s,t.bottom,P),i=t.bottom-w,r=n-P/2):"bottom"===c?(n=O(s,t.top,P),i=n+P/2,r=t.top+w):"left"===c?(n=O(s,t.right,P),i=t.right-w,r=n-P/2):(n=O(s,t.left,P),i=n+P/2,r=t.left+w),le.each(y,(function(n,o){if(!le.isNullOrUndef(n.label)){var d,l,u,m,p,y,g,L,v,k,T,x,S,A,F,W,C=n.label;o===t.zeroLineIndex&&a.offset===_.offsetGridLines?(d=_.zeroLineWidth,l=_.zeroLineColor,u=_.zeroLineBorderDash||[],m=_.zeroLineBorderDashOffset||0):(d=_a(_.lineWidth,o),l=_a(_.color,o),u=_.borderDash||[],m=_.borderDashOffset||0);var E=le.isArray(C)?C.length:1,I=function(e,t,a){var n=e.getPixelForTick(t);return a&&(1===e.getTicks().length?n-=e.isHorizontal()?Math.max(n-e.left,e.right-n):Math.max(n-e.top,e.bottom-n):n-=0===t?(e.getPixelForTick(1)-n)/2:(n-e.getPixelForTick(t-1))/2),n}(t,o,_.offsetGridLines);if(M){var z=w+b;I<t.left-1e-7&&(l="rgba(0,0,0,0)"),p=g=v=T=O(s,I,d),y=i,L=r,S=t.getPixelForTick(o)+D,"top"===c?(k=O(s,e.top,P)+P/2,x=e.bottom,F=((h?1:.5)-E)*Y,W=h?"left":"center",A=t.bottom-z):(k=e.top,x=O(s,e.bottom,P)-P/2,F=(h?0:.5)*Y,W=h?"right":"center",A=t.top+z)}else{var R=(f?0:w)+b;I<t.top-1e-7&&(l="rgba(0,0,0,0)"),p=i,g=r,y=L=k=x=O(s,I,d),A=t.getPixelForTick(o)+D,F=(1-E)*Y/2,"left"===c?(v=O(s,e.left,P)+P/2,T=e.right,W=f?"left":"right",S=t.right-R):(v=e.left,T=O(s,e.right,P)-P/2,W=f?"right":"left",S=t.left+R)}j.push({tx1:p,ty1:y,tx2:g,ty2:L,x1:v,y1:k,x2:T,y2:x,labelX:S,labelY:A,glWidth:d,glColor:l,glBorderDash:u,glBorderDashOffset:m,rotation:-1*H,label:C,major:n.major,textOffset:F,textAlign:W})}})),le.each(j,(function(e){var t=e.glWidth,a=e.glColor;if(_.display&&t&&a&&(o.save(),o.lineWidth=t,o.strokeStyle=a,o.setLineDash&&(o.setLineDash(e.glBorderDash),o.lineDashOffset=e.glBorderDashOffset),o.beginPath(),_.drawTicks&&(o.moveTo(e.tx1,e.ty1),o.lineTo(e.tx2,e.ty2)),_.drawOnChartArea&&(o.moveTo(e.x1,e.y1),o.lineTo(e.x2,e.y2)),o.stroke(),o.restore()),l.display){o.save(),o.translate(e.labelX,e.labelY),o.rotate(e.rotation),o.font=e.major?k.string:L.string,o.fillStyle=e.major?v:g,o.textBaseline="middle",o.textAlign=e.textAlign;var n=e.label,i=e.textOffset;if(le.isArray(n))for(var r=0;r<n.length;++r)o.fillText(""+n[r],0,i),i+=Y;else o.fillText(n,0,i);o.restore()}})),m.display){var A,F,W=0,C=x.lineHeight/2;if(M)A=t.left+(t.right-t.left)/2,F="bottom"===c?t.bottom-C-S.bottom:t.top+C+S.top;else{var E="left"===c;A=E?t.left+C+S.top:t.right-C-S.top,F=t.top+(t.bottom-t.top)/2,W=E?-.5*Math.PI:.5*Math.PI}o.save(),o.translate(A,F),o.rotate(W),o.textAlign="center",o.textBaseline="middle",o.fillStyle=T,o.font=x.string,o.fillText(m.labelString,0,0),o.restore()}if(P){var I,z,R,N,V=P,B=_a(_.lineWidth,y.length-1,0);M?(I=O(s,t.left,V)-V/2,z=O(s,t.right,B)+B/2,R=N=n):(R=O(s,t.top,V)-V/2,N=O(s,t.bottom,B)+B/2,I=z=n),o.lineWidth=P,o.strokeStyle=_a(_.color,0),o.beginPath(),o.moveTo(I,R),o.lineTo(z,N),o.stroke()}}}}),fa=ha.extend({getLabels:function(){var e=this.chart.data;return this.options.labels||(this.isHorizontal()?e.xLabels:e.yLabels)||e.labels},determineDataLimits:function(){var e,t=this,a=t.getLabels();t.minIndex=0,t.maxIndex=a.length-1,void 0!==t.options.ticks.min&&(e=a.indexOf(t.options.ticks.min),t.minIndex=-1!==e?e:t.minIndex),void 0!==t.options.ticks.max&&(e=a.indexOf(t.options.ticks.max),t.maxIndex=-1!==e?e:t.maxIndex),t.min=a[t.minIndex],t.max=a[t.maxIndex]},buildTicks:function(){var e=this,t=e.getLabels();e.ticks=0===e.minIndex&&e.maxIndex===t.length-1?t:t.slice(e.minIndex,e.maxIndex+1)},getLabelForIndex:function(e,t){var a=this,n=a.chart;return n.getDatasetMeta(t).controller._getValueScaleId()===a.id?a.getRightValue(n.data.datasets[t].data[e]):a.ticks[e-a.minIndex]},getPixelForValue:function(e,t){var a,n=this,i=n.options.offset,r=Math.max(n.maxIndex+1-n.minIndex-(i?0:1),1);if(void 0!==e&&null!==e&&(a=n.isHorizontal()?e.x:e.y),void 0!==a||void 0!==e&&isNaN(t)){e=a||e;var s=n.getLabels().indexOf(e);t=-1!==s?s:t}if(n.isHorizontal()){var o=n.width/r,d=o*(t-n.minIndex);return i&&(d+=o/2),n.left+d}var l=n.height/r,u=l*(t-n.minIndex);return i&&(u+=l/2),n.top+u},getPixelForTick:function(e){return this.getPixelForValue(this.ticks[e],e+this.minIndex,null)},getValueForPixel:function(e){var t=this,a=t.options.offset,n=Math.max(t._ticks.length-(a?0:1),1),i=t.isHorizontal(),r=(i?t.width:t.height)/n;return e-=i?t.left:t.top,a&&(e-=r/2),(e<=0?0:Math.round(e/r))+t.minIndex},getBasePixel:function(){return this.bottom}}),Ma={position:"bottom"};fa._defaults=Ma;var pa=le.noop,ya=le.isNullOrUndef,ga=ha.extend({getRightValue:function(e){return"string"===typeof e?+e:ha.prototype.getRightValue.call(this,e)},handleTickRangeOptions:function(){var e=this,t=e.options.ticks;if(t.beginAtZero){var a=le.sign(e.min),n=le.sign(e.max);a<0&&n<0?e.max=0:a>0&&n>0&&(e.min=0)}var i=void 0!==t.min||void 0!==t.suggestedMin,r=void 0!==t.max||void 0!==t.suggestedMax;void 0!==t.min?e.min=t.min:void 0!==t.suggestedMin&&(null===e.min?e.min=t.suggestedMin:e.min=Math.min(e.min,t.suggestedMin)),void 0!==t.max?e.max=t.max:void 0!==t.suggestedMax&&(null===e.max?e.max=t.suggestedMax:e.max=Math.max(e.max,t.suggestedMax)),i!==r&&e.min>=e.max&&(i?e.max=e.min+1:e.min=e.max-1),e.min===e.max&&(e.max++,t.beginAtZero||e.min--)},getTickLimit:function(){var e,t=this.options.ticks,a=t.stepSize,n=t.maxTicksLimit;return a?e=Math.ceil(this.max/a)-Math.floor(this.min/a)+1:(e=this._computeTickLimit(),n=n||11),n&&(e=Math.min(n,e)),e},_computeTickLimit:function(){return Number.POSITIVE_INFINITY},handleDirectionalChanges:pa,buildTicks:function(){var e=this,t=e.options.ticks,a=e.getTickLimit(),n={maxTicks:a=Math.max(2,a),min:t.min,max:t.max,precision:t.precision,stepSize:le.valueOrDefault(t.fixedStepSize,t.stepSize)},i=e.ticks=function(e,t){var a,n,i,r,s=[],o=e.stepSize,d=o||1,l=e.maxTicks-1,u=e.min,_=e.max,m=e.precision,c=t.min,h=t.max,f=le.niceNum((h-c)/l/d)*d;if(f<1e-14&&ya(u)&&ya(_))return[c,h];(r=Math.ceil(h/f)-Math.floor(c/f))>l&&(f=le.niceNum(r*f/l/d)*d),o||ya(m)?a=Math.pow(10,le._decimalPlaces(f)):(a=Math.pow(10,m),f=Math.ceil(f*a)/a),n=Math.floor(c/f)*f,i=Math.ceil(h/f)*f,o&&(!ya(u)&&le.almostWhole(u/f,f/1e3)&&(n=u),!ya(_)&&le.almostWhole(_/f,f/1e3)&&(i=_)),r=(i-n)/f,r=le.almostEquals(r,Math.round(r),f/1e3)?Math.round(r):Math.ceil(r),n=Math.round(n*a)/a,i=Math.round(i*a)/a,s.push(ya(u)?n:u);for(var M=1;M<r;++M)s.push(Math.round((n+M*f)*a)/a);return s.push(ya(_)?i:_),s}(n,e);e.handleDirectionalChanges(),e.max=le.max(i),e.min=le.min(i),t.reverse?(i.reverse(),e.start=e.max,e.end=e.min):(e.start=e.min,e.end=e.max)},convertTicksToLabels:function(){var e=this;e.ticksAsNumbers=e.ticks.slice(),e.zeroLineIndex=e.ticks.indexOf(0),ha.prototype.convertTicksToLabels.call(e)}}),La={position:"left",ticks:{callback:la.formatters.linear}},Ya=ga.extend({determineDataLimits:function(){var e=this,t=e.options,a=e.chart,n=a.data.datasets,i=e.isHorizontal();function r(t){return i?t.xAxisID===e.id:t.yAxisID===e.id}e.min=null,e.max=null;var s=t.stacked;if(void 0===s&&le.each(n,(function(e,t){if(!s){var n=a.getDatasetMeta(t);a.isDatasetVisible(t)&&r(n)&&void 0!==n.stack&&(s=!0)}})),t.stacked||s){var o={};le.each(n,(function(n,i){var s=a.getDatasetMeta(i),d=[s.type,void 0===t.stacked&&void 0===s.stack?i:"",s.stack].join(".");void 0===o[d]&&(o[d]={positiveValues:[],negativeValues:[]});var l=o[d].positiveValues,u=o[d].negativeValues;a.isDatasetVisible(i)&&r(s)&&le.each(n.data,(function(a,n){var i=+e.getRightValue(a);isNaN(i)||s.data[n].hidden||(l[n]=l[n]||0,u[n]=u[n]||0,t.relativePoints?l[n]=100:i<0?u[n]+=i:l[n]+=i)}))})),le.each(o,(function(t){var a=t.positiveValues.concat(t.negativeValues),n=le.min(a),i=le.max(a);e.min=null===e.min?n:Math.min(e.min,n),e.max=null===e.max?i:Math.max(e.max,i)}))}else le.each(n,(function(t,n){var i=a.getDatasetMeta(n);a.isDatasetVisible(n)&&r(i)&&le.each(t.data,(function(t,a){var n=+e.getRightValue(t);isNaN(n)||i.data[a].hidden||(null===e.min?e.min=n:n<e.min&&(e.min=n),null===e.max?e.max=n:n>e.max&&(e.max=n))}))}));e.min=isFinite(e.min)&&!isNaN(e.min)?e.min:0,e.max=isFinite(e.max)&&!isNaN(e.max)?e.max:1,this.handleTickRangeOptions()},_computeTickLimit:function(){var e;return this.isHorizontal()?Math.ceil(this.width/40):(e=le.options._parseFont(this.options.ticks),Math.ceil(this.height/e.lineHeight))},handleDirectionalChanges:function(){this.isHorizontal()||this.ticks.reverse()},getLabelForIndex:function(e,t){return+this.getRightValue(this.chart.data.datasets[t].data[e])},getPixelForValue:function(e){var t=this,a=t.start,n=+t.getRightValue(e),i=t.end-a;return t.isHorizontal()?t.left+t.width/i*(n-a):t.bottom-t.height/i*(n-a)},getValueForPixel:function(e){var t=this,a=t.isHorizontal(),n=a?t.width:t.height,i=(a?e-t.left:t.bottom-e)/n;return t.start+(t.end-t.start)*i},getPixelForTick:function(e){return this.getPixelForValue(this.ticksAsNumbers[e])}}),va=La;Ya._defaults=va;var ka=le.valueOrDefault,ba={position:"left",ticks:{callback:la.formatters.logarithmic}};function Da(e,t){return le.isFinite(e)&&e>=0?e:t}var wa=ha.extend({determineDataLimits:function(){var e=this,t=e.options,a=e.chart,n=a.data.datasets,i=e.isHorizontal();function r(t){return i?t.xAxisID===e.id:t.yAxisID===e.id}e.min=null,e.max=null,e.minNotZero=null;var s=t.stacked;if(void 0===s&&le.each(n,(function(e,t){if(!s){var n=a.getDatasetMeta(t);a.isDatasetVisible(t)&&r(n)&&void 0!==n.stack&&(s=!0)}})),t.stacked||s){var o={};le.each(n,(function(n,i){var s=a.getDatasetMeta(i),d=[s.type,void 0===t.stacked&&void 0===s.stack?i:"",s.stack].join(".");a.isDatasetVisible(i)&&r(s)&&(void 0===o[d]&&(o[d]=[]),le.each(n.data,(function(t,a){var n=o[d],i=+e.getRightValue(t);isNaN(i)||s.data[a].hidden||i<0||(n[a]=n[a]||0,n[a]+=i)})))})),le.each(o,(function(t){if(t.length>0){var a=le.min(t),n=le.max(t);e.min=null===e.min?a:Math.min(e.min,a),e.max=null===e.max?n:Math.max(e.max,n)}}))}else le.each(n,(function(t,n){var i=a.getDatasetMeta(n);a.isDatasetVisible(n)&&r(i)&&le.each(t.data,(function(t,a){var n=+e.getRightValue(t);isNaN(n)||i.data[a].hidden||n<0||(null===e.min?e.min=n:n<e.min&&(e.min=n),null===e.max?e.max=n:n>e.max&&(e.max=n),0!==n&&(null===e.minNotZero||n<e.minNotZero)&&(e.minNotZero=n))}))}));this.handleTickRangeOptions()},handleTickRangeOptions:function(){var e=this,t=e.options.ticks;e.min=Da(t.min,e.min),e.max=Da(t.max,e.max),e.min===e.max&&(0!==e.min&&null!==e.min?(e.min=Math.pow(10,Math.floor(le.log10(e.min))-1),e.max=Math.pow(10,Math.floor(le.log10(e.max))+1)):(e.min=1,e.max=10)),null===e.min&&(e.min=Math.pow(10,Math.floor(le.log10(e.max))-1)),null===e.max&&(e.max=0!==e.min?Math.pow(10,Math.floor(le.log10(e.min))+1):10),null===e.minNotZero&&(e.min>0?e.minNotZero=e.min:e.max<1?e.minNotZero=Math.pow(10,Math.floor(le.log10(e.max))):e.minNotZero=1)},buildTicks:function(){var e=this,t=e.options.ticks,a=!e.isHorizontal(),n={min:Da(t.min),max:Da(t.max)},i=e.ticks=function(e,t){var a,n,i=[],r=ka(e.min,Math.pow(10,Math.floor(le.log10(t.min)))),s=Math.floor(le.log10(t.max)),o=Math.ceil(t.max/Math.pow(10,s));0===r?(a=Math.floor(le.log10(t.minNotZero)),n=Math.floor(t.minNotZero/Math.pow(10,a)),i.push(r),r=n*Math.pow(10,a)):(a=Math.floor(le.log10(r)),n=Math.floor(r/Math.pow(10,a)));var d=a<0?Math.pow(10,Math.abs(a)):1;do{i.push(r),10===++n&&(n=1,d=++a>=0?1:d),r=Math.round(n*Math.pow(10,a)*d)/d}while(a<s||a===s&&n<o);var l=ka(e.max,r);return i.push(l),i}(n,e);e.max=le.max(i),e.min=le.min(i),t.reverse?(a=!a,e.start=e.max,e.end=e.min):(e.start=e.min,e.end=e.max),a&&i.reverse()},convertTicksToLabels:function(){this.tickValues=this.ticks.slice(),ha.prototype.convertTicksToLabels.call(this)},getLabelForIndex:function(e,t){return+this.getRightValue(this.chart.data.datasets[t].data[e])},getPixelForTick:function(e){return this.getPixelForValue(this.tickValues[e])},_getFirstTickValue:function(e){var t=Math.floor(le.log10(e));return Math.floor(e/Math.pow(10,t))*Math.pow(10,t)},getPixelForValue:function(e){var t,a,n,i,r,s=this,o=s.options.ticks,d=o.reverse,l=le.log10,u=s._getFirstTickValue(s.minNotZero),_=0;return e=+s.getRightValue(e),d?(n=s.end,i=s.start,r=-1):(n=s.start,i=s.end,r=1),s.isHorizontal()?(t=s.width,a=d?s.right:s.left):(t=s.height,r*=-1,a=d?s.top:s.bottom),e!==n&&(0===n&&(t-=_=ka(o.fontSize,se.global.defaultFontSize),n=u),0!==e&&(_+=t/(l(i)-l(n))*(l(e)-l(n))),a+=r*_),a},getValueForPixel:function(e){var t,a,n,i,r=this,s=r.options.ticks,o=s.reverse,d=le.log10,l=r._getFirstTickValue(r.minNotZero);if(o?(a=r.end,n=r.start):(a=r.start,n=r.end),r.isHorizontal()?(t=r.width,i=o?r.right-e:e-r.left):(t=r.height,i=o?e-r.top:r.bottom-e),i!==a){if(0===a){var u=ka(s.fontSize,se.global.defaultFontSize);i-=u,t-=u,a=l}i*=d(n)-d(a),i/=t,i=Math.pow(10,d(a)+i)}return i}}),Ta=ba;wa._defaults=Ta;var xa=le.valueOrDefault,Sa=le.valueAtIndexOrDefault,Ha=le.options.resolve,ja={display:!0,animate:!0,position:"chartArea",angleLines:{display:!0,color:"rgba(0, 0, 0, 0.1)",lineWidth:1,borderDash:[],borderDashOffset:0},gridLines:{circular:!1},ticks:{showLabelBackdrop:!0,backdropColor:"rgba(255,255,255,0.75)",backdropPaddingY:2,backdropPaddingX:2,callback:la.formatters.linear},pointLabels:{display:!0,fontSize:10,callback:function(e){return e}}};function Pa(e){var t=e.options;return t.angleLines.display||t.pointLabels.display?e.chart.data.labels.length:0}function Oa(e){var t=e.ticks;return t.display&&e.display?xa(t.fontSize,se.global.defaultFontSize)+2*t.backdropPaddingY:0}function Aa(e,t,a,n,i){return e===n||e===i?{start:t-a/2,end:t+a/2}:e<n||e>i?{start:t-a,end:t}:{start:t,end:t+a}}function Fa(e){return 0===e||180===e?"center":e<180?"left":"right"}function Wa(e,t,a,n){var i,r,s=a.y+n/2;if(le.isArray(t))for(i=0,r=t.length;i<r;++i)e.fillText(t[i],a.x,s),s+=n;else e.fillText(t,a.x,s)}function Ca(e,t,a){90===e||270===e?a.y-=t.h/2:(e>270||e<90)&&(a.y-=t.h)}function Ea(e){return le.isNumber(e)?e:0}var Ia=ga.extend({setDimensions:function(){var e=this;e.width=e.maxWidth,e.height=e.maxHeight,e.paddingTop=Oa(e.options)/2,e.xCenter=Math.floor(e.width/2),e.yCenter=Math.floor((e.height-e.paddingTop)/2),e.drawingArea=Math.min(e.height-e.paddingTop,e.width)/2},determineDataLimits:function(){var e=this,t=e.chart,a=Number.POSITIVE_INFINITY,n=Number.NEGATIVE_INFINITY;le.each(t.data.datasets,(function(i,r){if(t.isDatasetVisible(r)){var s=t.getDatasetMeta(r);le.each(i.data,(function(t,i){var r=+e.getRightValue(t);isNaN(r)||s.data[i].hidden||(a=Math.min(r,a),n=Math.max(r,n))}))}})),e.min=a===Number.POSITIVE_INFINITY?0:a,e.max=n===Number.NEGATIVE_INFINITY?0:n,e.handleTickRangeOptions()},_computeTickLimit:function(){return Math.ceil(this.drawingArea/Oa(this.options))},convertTicksToLabels:function(){var e=this;ga.prototype.convertTicksToLabels.call(e),e.pointLabels=e.chart.data.labels.map(e.options.pointLabels.callback,e)},getLabelForIndex:function(e,t){return+this.getRightValue(this.chart.data.datasets[t].data[e])},fit:function(){var e=this.options;e.display&&e.pointLabels.display?function(e){var t,a,n,i=le.options._parseFont(e.options.pointLabels),r={l:0,r:e.width,t:0,b:e.height-e.paddingTop},s={};e.ctx.font=i.string,e._pointLabelSizes=[];var o,d,l,u=Pa(e);for(t=0;t<u;t++){n=e.getPointPosition(t,e.drawingArea+5),o=e.ctx,d=i.lineHeight,l=e.pointLabels[t]||"",a=le.isArray(l)?{w:le.longestText(o,o.font,l),h:l.length*d}:{w:o.measureText(l).width,h:d},e._pointLabelSizes[t]=a;var _=e.getIndexAngle(t),m=le.toDegrees(_)%360,c=Aa(m,n.x,a.w,0,180),h=Aa(m,n.y,a.h,90,270);c.start<r.l&&(r.l=c.start,s.l=_),c.end>r.r&&(r.r=c.end,s.r=_),h.start<r.t&&(r.t=h.start,s.t=_),h.end>r.b&&(r.b=h.end,s.b=_)}e.setReductions(e.drawingArea,r,s)}(this):this.setCenterPoint(0,0,0,0)},setReductions:function(e,t,a){var n=this,i=t.l/Math.sin(a.l),r=Math.max(t.r-n.width,0)/Math.sin(a.r),s=-t.t/Math.cos(a.t),o=-Math.max(t.b-(n.height-n.paddingTop),0)/Math.cos(a.b);i=Ea(i),r=Ea(r),s=Ea(s),o=Ea(o),n.drawingArea=Math.min(Math.floor(e-(i+r)/2),Math.floor(e-(s+o)/2)),n.setCenterPoint(i,r,s,o)},setCenterPoint:function(e,t,a,n){var i=this,r=i.width-t-i.drawingArea,s=e+i.drawingArea,o=a+i.drawingArea,d=i.height-i.paddingTop-n-i.drawingArea;i.xCenter=Math.floor((s+r)/2+i.left),i.yCenter=Math.floor((o+d)/2+i.top+i.paddingTop)},getIndexAngle:function(e){return e*(2*Math.PI/Pa(this))+(this.chart.options&&this.chart.options.startAngle?this.chart.options.startAngle:0)*Math.PI*2/360},getDistanceFromCenterForValue:function(e){var t=this;if(null===e)return 0;var a=t.drawingArea/(t.max-t.min);return t.options.ticks.reverse?(t.max-e)*a:(e-t.min)*a},getPointPosition:function(e,t){var a=this.getIndexAngle(e)-Math.PI/2;return{x:Math.cos(a)*t+this.xCenter,y:Math.sin(a)*t+this.yCenter}},getPointPositionForValue:function(e,t){return this.getPointPosition(e,this.getDistanceFromCenterForValue(t))},getBasePosition:function(){var e=this.min,t=this.max;return this.getPointPositionForValue(0,this.beginAtZero?0:e<0&&t<0?t:e>0&&t>0?e:0)},draw:function(){var e=this,t=e.options,a=t.gridLines,n=t.ticks;if(t.display){var i=e.ctx,r=this.getIndexAngle(0),s=le.options._parseFont(n);(t.angleLines.display||t.pointLabels.display)&&function(e){var t=e.ctx,a=e.options,n=a.angleLines,i=a.gridLines,r=a.pointLabels,s=xa(n.lineWidth,i.lineWidth),o=xa(n.color,i.color),d=Oa(a);t.save(),t.lineWidth=s,t.strokeStyle=o,t.setLineDash&&(t.setLineDash(Ha([n.borderDash,i.borderDash,[]])),t.lineDashOffset=Ha([n.borderDashOffset,i.borderDashOffset,0]));var l=e.getDistanceFromCenterForValue(a.ticks.reverse?e.min:e.max),u=le.options._parseFont(r);t.font=u.string,t.textBaseline="middle";for(var _=Pa(e)-1;_>=0;_--){if(n.display&&s&&o){var m=e.getPointPosition(_,l);t.beginPath(),t.moveTo(e.xCenter,e.yCenter),t.lineTo(m.x,m.y),t.stroke()}if(r.display){var c=0===_?d/2:0,h=e.getPointPosition(_,l+c+5),f=Sa(r.fontColor,_,se.global.defaultFontColor);t.fillStyle=f;var M=e.getIndexAngle(_),p=le.toDegrees(M);t.textAlign=Fa(p),Ca(p,e._pointLabelSizes[_],h),Wa(t,e.pointLabels[_]||"",h,u.lineHeight)}}t.restore()}(e),le.each(e.ticks,(function(t,o){if(o>0||n.reverse){var d=e.getDistanceFromCenterForValue(e.ticksAsNumbers[o]);if(a.display&&0!==o&&function(e,t,a,n){var i,r=e.ctx,s=t.circular,o=Pa(e),d=Sa(t.color,n-1),l=Sa(t.lineWidth,n-1);if((s||o)&&d&&l){if(r.save(),r.strokeStyle=d,r.lineWidth=l,r.setLineDash&&(r.setLineDash(t.borderDash||[]),r.lineDashOffset=t.borderDashOffset||0),r.beginPath(),s)r.arc(e.xCenter,e.yCenter,a,0,2*Math.PI);else{i=e.getPointPosition(0,a),r.moveTo(i.x,i.y);for(var u=1;u<o;u++)i=e.getPointPosition(u,a),r.lineTo(i.x,i.y)}r.closePath(),r.stroke(),r.restore()}}(e,a,d,o),n.display){var l=xa(n.fontColor,se.global.defaultFontColor);if(i.font=s.string,i.save(),i.translate(e.xCenter,e.yCenter),i.rotate(r),n.showLabelBackdrop){var u=i.measureText(t).width;i.fillStyle=n.backdropColor,i.fillRect(-u/2-n.backdropPaddingX,-d-s.size/2-n.backdropPaddingY,u+2*n.backdropPaddingX,s.size+2*n.backdropPaddingY)}i.textAlign="center",i.textBaseline="middle",i.fillStyle=l,i.fillText(t,0,-d),i.restore()}}}))}}}),za=ja;Ia._defaults=za;var Ra=le.valueOrDefault,Na=Number.MIN_SAFE_INTEGER||-9007199254740991,Va=Number.MAX_SAFE_INTEGER||9007199254740991,Ba={millisecond:{common:!0,size:1,steps:[1,2,5,10,20,50,100,250,500]},second:{common:!0,size:1e3,steps:[1,2,5,10,15,30]},minute:{common:!0,size:6e4,steps:[1,2,5,10,15,30]},hour:{common:!0,size:36e5,steps:[1,2,3,6,12]},day:{common:!0,size:864e5,steps:[1,2,5]},week:{common:!1,size:6048e5,steps:[1,2,3,4]},month:{common:!0,size:2628e6,steps:[1,2,3]},quarter:{common:!1,size:7884e6,steps:[1,2,3,4]},year:{common:!0,size:3154e7}},Ja=Object.keys(Ba);function Ua(e,t){return e-t}function Ga(e){var t,a,n,i={},r=[];for(t=0,a=e.length;t<a;++t)i[n=e[t]]||(i[n]=!0,r.push(n));return r}function qa(e,t,a,n){var i=function(e,t,a){for(var n,i,r,s=0,o=e.length-1;s>=0&&s<=o;){if(i=e[(n=s+o>>1)-1]||null,r=e[n],!i)return{lo:null,hi:r};if(r[t]<a)s=n+1;else{if(!(i[t]>a))return{lo:i,hi:r};o=n-1}}return{lo:r,hi:null}}(e,t,a),r=i.lo?i.hi?i.lo:e[e.length-2]:e[0],s=i.lo?i.hi?i.hi:e[e.length-1]:e[1],o=s[t]-r[t],d=o?(a-r[t])/o:0,l=(s[n]-r[n])*d;return r[n]+l}function Ka(e,t){var a=e._adapter,n=e.options.time,i=n.parser,r=i||n.format,s=t;return"function"===typeof i&&(s=i(s)),le.isFinite(s)||(s="string"===typeof r?a.parse(s,r):a.parse(s)),null!==s?+s:(i||"function"!==typeof r||(s=r(t),le.isFinite(s)||(s=a.parse(s))),s)}function Za(e,t){if(le.isNullOrUndef(t))return null;var a=e.options.time,n=Ka(e,e.getRightValue(t));return null===n?n:(a.round&&(n=+e._adapter.startOf(n,a.round)),n)}function $a(e){for(var t=Ja.indexOf(e)+1,a=Ja.length;t<a;++t)if(Ba[Ja[t]].common)return Ja[t]}function Qa(e,t,a,n){var i,r=e._adapter,s=e.options,o=s.time,d=o.unit||function(e,t,a,n){var i,r,s,o=Ja.length;for(i=Ja.indexOf(e);i<o-1;++i)if(s=(r=Ba[Ja[i]]).steps?r.steps[r.steps.length-1]:Va,r.common&&Math.ceil((a-t)/(s*r.size))<=n)return Ja[i];return Ja[o-1]}(o.minUnit,t,a,n),l=$a(d),u=Ra(o.stepSize,o.unitStepSize),_="week"===d&&o.isoWeekday,m=s.ticks.major.enabled,c=Ba[d],h=t,f=a,M=[];for(u||(u=function(e,t,a,n){var i,r,s,o=t-e,d=Ba[a],l=d.size,u=d.steps;if(!u)return Math.ceil(o/(n*l));for(i=0,r=u.length;i<r&&(s=u[i],!(Math.ceil(o/(l*s))<=n));++i);return s}(t,a,d,n)),_&&(h=+r.startOf(h,"isoWeek",_),f=+r.startOf(f,"isoWeek",_)),h=+r.startOf(h,_?"day":d),(f=+r.startOf(f,_?"day":d))<a&&(f=+r.add(f,1,d)),i=h,m&&l&&!_&&!o.round&&(i=+r.startOf(i,l),i=+r.add(i,~~((h-i)/(c.size*u))*u,d));i<f;i=+r.add(i,u,d))M.push(+i);return M.push(+i),M}var Xa=ha.extend({initialize:function(){this.mergeTicksOptions(),ha.prototype.initialize.call(this)},update:function(){var e=this,t=e.options,a=t.time||(t.time={}),n=e._adapter=new da._date(t.adapters.date);return a.format&&console.warn("options.time.format is deprecated and replaced by options.time.parser."),le.mergeIf(a.displayFormats,n.formats()),ha.prototype.update.apply(e,arguments)},getRightValue:function(e){return e&&void 0!==e.t&&(e=e.t),ha.prototype.getRightValue.call(this,e)},determineDataLimits:function(){var e,t,a,n,i,r,s=this,o=s.chart,d=s._adapter,l=s.options.time,u=l.unit||"day",_=Va,m=Na,c=[],h=[],f=[],M=o.data.labels||[];for(e=0,a=M.length;e<a;++e)f.push(Za(s,M[e]));for(e=0,a=(o.data.datasets||[]).length;e<a;++e)if(o.isDatasetVisible(e))if(i=o.data.datasets[e].data,le.isObject(i[0]))for(h[e]=[],t=0,n=i.length;t<n;++t)r=Za(s,i[t]),c.push(r),h[e][t]=r;else{for(t=0,n=f.length;t<n;++t)c.push(f[t]);h[e]=f.slice(0)}else h[e]=[];f.length&&(f=Ga(f).sort(Ua),_=Math.min(_,f[0]),m=Math.max(m,f[f.length-1])),c.length&&(c=Ga(c).sort(Ua),_=Math.min(_,c[0]),m=Math.max(m,c[c.length-1])),_=Za(s,l.min)||_,m=Za(s,l.max)||m,_=_===Va?+d.startOf(Date.now(),u):_,m=m===Na?+d.endOf(Date.now(),u)+1:m,s.min=Math.min(_,m),s.max=Math.max(_+1,m),s._horizontal=s.isHorizontal(),s._table=[],s._timestamps={data:c,datasets:h,labels:f}},buildTicks:function(){var e,t,a,n=this,i=n.min,r=n.max,s=n.options,o=s.time,d=[],l=[];switch(s.ticks.source){case"data":d=n._timestamps.data;break;case"labels":d=n._timestamps.labels;break;case"auto":default:d=Qa(n,i,r,n.getLabelCapacity(i))}for("ticks"===s.bounds&&d.length&&(i=d[0],r=d[d.length-1]),i=Za(n,o.min)||i,r=Za(n,o.max)||r,e=0,t=d.length;e<t;++e)(a=d[e])>=i&&a<=r&&l.push(a);return n.min=i,n.max=r,n._unit=o.unit||function(e,t,a,n,i){var r,s;for(r=Ja.length-1;r>=Ja.indexOf(a);r--)if(s=Ja[r],Ba[s].common&&e._adapter.diff(i,n,s)>=t.length)return s;return Ja[a?Ja.indexOf(a):0]}(n,l,o.minUnit,n.min,n.max),n._majorUnit=$a(n._unit),n._table=function(e,t,a,n){if("linear"===n||!e.length)return[{time:t,pos:0},{time:a,pos:1}];var i,r,s,o,d,l=[],u=[t];for(i=0,r=e.length;i<r;++i)(o=e[i])>t&&o<a&&u.push(o);for(u.push(a),i=0,r=u.length;i<r;++i)d=u[i+1],s=u[i-1],o=u[i],void 0!==s&&void 0!==d&&Math.round((d+s)/2)===o||l.push({time:o,pos:i/(r-1)});return l}(n._timestamps.data,i,r,s.distribution),n._offsets=function(e,t,a,n,i){var r,s,o=0,d=0;return i.offset&&t.length&&(i.time.min||(r=qa(e,"time",t[0],"pos"),o=1===t.length?1-r:(qa(e,"time",t[1],"pos")-r)/2),i.time.max||(s=qa(e,"time",t[t.length-1],"pos"),d=1===t.length?s:(s-qa(e,"time",t[t.length-2],"pos"))/2)),{start:o,end:d}}(n._table,l,0,0,s),s.ticks.reverse&&l.reverse(),function(e,t,a){var n,i,r,s,o=[];for(n=0,i=t.length;n<i;++n)r=t[n],s=!!a&&r===+e._adapter.startOf(r,a),o.push({value:r,major:s});return o}(n,l,n._majorUnit)},getLabelForIndex:function(e,t){var a=this,n=a._adapter,i=a.chart.data,r=a.options.time,s=i.labels&&e<i.labels.length?i.labels[e]:"",o=i.datasets[t].data[e];return le.isObject(o)&&(s=a.getRightValue(o)),r.tooltipFormat?n.format(Ka(a,s),r.tooltipFormat):"string"===typeof s?s:n.format(Ka(a,s),r.displayFormats.datetime)},tickFormatFunction:function(e,t,a,n){var i=this._adapter,r=this.options,s=r.time.displayFormats,o=s[this._unit],d=this._majorUnit,l=s[d],u=+i.startOf(e,d),_=r.ticks.major,m=_.enabled&&d&&l&&e===u,c=i.format(e,n||(m?l:o)),h=m?_:r.ticks.minor,f=Ra(h.callback,h.userCallback);return f?f(c,t,a):c},convertTicksToLabels:function(e){var t,a,n=[];for(t=0,a=e.length;t<a;++t)n.push(this.tickFormatFunction(e[t].value,t,e));return n},getPixelForOffset:function(e){var t=this,a=t.options.ticks.reverse,n=t._horizontal?t.width:t.height,i=t._horizontal?a?t.right:t.left:a?t.bottom:t.top,r=qa(t._table,"time",e,"pos"),s=n*(t._offsets.start+r)/(t._offsets.start+1+t._offsets.end);return a?i-s:i+s},getPixelForValue:function(e,t,a){var n=null;if(void 0!==t&&void 0!==a&&(n=this._timestamps.datasets[a][t]),null===n&&(n=Za(this,e)),null!==n)return this.getPixelForOffset(n)},getPixelForTick:function(e){var t=this.getTicks();return e>=0&&e<t.length?this.getPixelForOffset(t[e].value):null},getValueForPixel:function(e){var t=this,a=t._horizontal?t.width:t.height,n=t._horizontal?t.left:t.top,i=(a?(e-n)/a:0)*(t._offsets.start+1+t._offsets.start)-t._offsets.end,r=qa(t._table,"pos",i,"time");return t._adapter._create(r)},getLabelWidth:function(e){var t=this.options.ticks,a=this.ctx.measureText(e).width,n=le.toRadians(t.maxRotation),i=Math.cos(n),r=Math.sin(n);return a*i+Ra(t.fontSize,se.global.defaultFontSize)*r},getLabelCapacity:function(e){var t=this,a=t.options.time.displayFormats.millisecond,n=t.tickFormatFunction(e,0,[],a),i=t.getLabelWidth(n),r=t.isHorizontal()?t.width:t.height,s=Math.floor(r/i);return s>0?s:1}}),en={position:"bottom",distribution:"linear",bounds:"data",adapters:{},time:{parser:!1,format:!1,unit:!1,round:!1,displayFormat:!1,isoWeekday:!1,minUnit:"millisecond",displayFormats:{}},ticks:{autoSkip:!1,source:"auto",major:{enabled:!1}}};Xa._defaults=en;var tn={category:fa,linear:Ya,logarithmic:wa,radialLinear:Ia,time:Xa},an={datetime:"MMM D, YYYY, h:mm:ss a",millisecond:"h:mm:ss.SSS a",second:"h:mm:ss a",minute:"h:mm a",hour:"hA",day:"MMM D",week:"ll",month:"MMM YYYY",quarter:"[Q]Q - YYYY",year:"YYYY"};da._date.override("function"===typeof e?{_id:"moment",formats:function(){return an},parse:function(t,a){return"string"===typeof t&&"string"===typeof a?t=e(t,a):t instanceof e||(t=e(t)),t.isValid()?t.valueOf():null},format:function(t,a){return e(t).format(a)},add:function(t,a,n){return e(t).add(a,n).valueOf()},diff:function(t,a,n){return e.duration(e(t).diff(e(a))).as(n)},startOf:function(t,a,n){return t=e(t),"isoWeek"===a?t.isoWeekday(n).valueOf():t.startOf(a).valueOf()},endOf:function(t,a){return e(t).endOf(a).valueOf()},_create:function(t){return e(t)}}:{}),se._set("global",{plugins:{filler:{propagate:!0}}});var nn={dataset:function(e){var t=e.fill,a=e.chart,n=a.getDatasetMeta(t),i=n&&a.isDatasetVisible(t)&&n.dataset._children||[],r=i.length||0;return r?function(e,t){return t<r&&i[t]._view||null}:null},boundary:function(e){var t=e.boundary,a=t?t.x:null,n=t?t.y:null;return function(e){return{x:null===a?e.x:a,y:null===n?e.y:n}}}};function rn(e,t,a){var n,i=e._model||{},r=i.fill;if(void 0===r&&(r=!!i.backgroundColor),!1===r||null===r)return!1;if(!0===r)return"origin";if(n=parseFloat(r,10),isFinite(n)&&Math.floor(n)===n)return"-"!==r[0]&&"+"!==r[0]||(n=t+n),!(n===t||n<0||n>=a)&&n;switch(r){case"bottom":return"start";case"top":return"end";case"zero":return"origin";case"origin":case"start":case"end":return r;default:return!1}}function sn(e){var t,a=e.el._model||{},n=e.el._scale||{},i=e.fill,r=null;if(isFinite(i))return null;if("start"===i?r=void 0===a.scaleBottom?n.bottom:a.scaleBottom:"end"===i?r=void 0===a.scaleTop?n.top:a.scaleTop:void 0!==a.scaleZero?r=a.scaleZero:n.getBasePosition?r=n.getBasePosition():n.getBasePixel&&(r=n.getBasePixel()),void 0!==r&&null!==r){if(void 0!==r.x&&void 0!==r.y)return r;if(le.isFinite(r))return{x:(t=n.isHorizontal())?r:null,y:t?null:r}}return null}function on(e,t,a){var n,i=e[t].fill,r=[t];if(!a)return i;for(;!1!==i&&-1===r.indexOf(i);){if(!isFinite(i))return i;if(!(n=e[i]))return!1;if(n.visible)return i;r.push(i),i=n.fill}return!1}function dn(e){var t=e.fill,a="dataset";return!1===t?null:(isFinite(t)||(a="boundary"),nn[a](e))}function ln(e){return e&&!e.skip}function un(e,t,a,n,i){var r;if(n&&i){for(e.moveTo(t[0].x,t[0].y),r=1;r<n;++r)le.canvas.lineTo(e,t[r-1],t[r]);for(e.lineTo(a[i-1].x,a[i-1].y),r=i-1;r>0;--r)le.canvas.lineTo(e,a[r],a[r-1],!0)}}var _n={id:"filler",afterDatasetsUpdate:function(e,t){var a,n,i,r,s=(e.data.datasets||[]).length,o=t.propagate,d=[];for(n=0;n<s;++n)r=null,(i=(a=e.getDatasetMeta(n)).dataset)&&i._model&&i instanceof Ee.Line&&(r={visible:e.isDatasetVisible(n),fill:rn(i,n,s),chart:e,el:i}),a.$filler=r,d.push(r);for(n=0;n<s;++n)(r=d[n])&&(r.fill=on(d,n,o),r.boundary=sn(r),r.mapper=dn(r))},beforeDatasetDraw:function(e,t){var a=t.meta.$filler;if(a){var n=e.ctx,i=a.el,r=i._view,s=i._children||[],o=a.mapper,d=r.backgroundColor||se.global.defaultColor;o&&d&&s.length&&(le.canvas.clipArea(n,e.chartArea),function(e,t,a,n,i,r){var s,o,d,l,u,_,m,c=t.length,h=n.spanGaps,f=[],M=[],p=0,y=0;for(e.beginPath(),s=0,o=c+!!r;s<o;++s)u=a(l=t[d=s%c]._view,d,n),_=ln(l),m=ln(u),_&&m?(p=f.push(l),y=M.push(u)):p&&y&&(h?(_&&f.push(l),m&&M.push(u)):(un(e,f,M,p,y),p=y=0,f=[],M=[]));un(e,f,M,p,y),e.closePath(),e.fillStyle=i,e.fill()}(n,s,o,r,d,i._loop),le.canvas.unclipArea(n))}}},mn=le.noop,cn=le.valueOrDefault;function hn(e,t){return e.usePointStyle&&e.boxWidth>t?t:e.boxWidth}se._set("global",{legend:{display:!0,position:"top",fullWidth:!0,reverse:!1,weight:1e3,onClick:function(e,t){var a=t.datasetIndex,n=this.chart,i=n.getDatasetMeta(a);i.hidden=null===i.hidden?!n.data.datasets[a].hidden:null,n.update()},onHover:null,onLeave:null,labels:{boxWidth:40,padding:10,generateLabels:function(e){var t=e.data;return le.isArray(t.datasets)?t.datasets.map((function(t,a){return{text:t.label,fillStyle:le.isArray(t.backgroundColor)?t.backgroundColor[0]:t.backgroundColor,hidden:!e.isDatasetVisible(a),lineCap:t.borderCapStyle,lineDash:t.borderDash,lineDashOffset:t.borderDashOffset,lineJoin:t.borderJoinStyle,lineWidth:t.borderWidth,strokeStyle:t.borderColor,pointStyle:t.pointStyle,datasetIndex:a}}),this):[]}}},legendCallback:function(e){var t=[];t.push('<ul class="'+e.id+'-legend">');for(var a=0;a<e.data.datasets.length;a++)t.push('<li><span style="background-color:'+e.data.datasets[a].backgroundColor+'"></span>'),e.data.datasets[a].label&&t.push(e.data.datasets[a].label),t.push("</li>");return t.push("</ul>"),t.join("")}});var fn=he.extend({initialize:function(e){le.extend(this,e),this.legendHitBoxes=[],this._hoveredItem=null,this.doughnutMode=!1},beforeUpdate:mn,update:function(e,t,a){var n=this;return n.beforeUpdate(),n.maxWidth=e,n.maxHeight=t,n.margins=a,n.beforeSetDimensions(),n.setDimensions(),n.afterSetDimensions(),n.beforeBuildLabels(),n.buildLabels(),n.afterBuildLabels(),n.beforeFit(),n.fit(),n.afterFit(),n.afterUpdate(),n.minSize},afterUpdate:mn,beforeSetDimensions:mn,setDimensions:function(){var e=this;e.isHorizontal()?(e.width=e.maxWidth,e.left=0,e.right=e.width):(e.height=e.maxHeight,e.top=0,e.bottom=e.height),e.paddingLeft=0,e.paddingTop=0,e.paddingRight=0,e.paddingBottom=0,e.minSize={width:0,height:0}},afterSetDimensions:mn,beforeBuildLabels:mn,buildLabels:function(){var e=this,t=e.options.labels||{},a=le.callback(t.generateLabels,[e.chart],e)||[];t.filter&&(a=a.filter((function(a){return t.filter(a,e.chart.data)}))),e.options.reverse&&a.reverse(),e.legendItems=a},afterBuildLabels:mn,beforeFit:mn,fit:function(){var e=this,t=e.options,a=t.labels,n=t.display,i=e.ctx,r=le.options._parseFont(a),s=r.size,o=e.legendHitBoxes=[],d=e.minSize,l=e.isHorizontal();if(l?(d.width=e.maxWidth,d.height=n?10:0):(d.width=n?10:0,d.height=e.maxHeight),n)if(i.font=r.string,l){var u=e.lineWidths=[0],_=0;i.textAlign="left",i.textBaseline="top",le.each(e.legendItems,(function(e,t){var n=hn(a,s)+s/2+i.measureText(e.text).width;(0===t||u[u.length-1]+n+a.padding>d.width)&&(_+=s+a.padding,u[u.length-(t>0?0:1)]=a.padding),o[t]={left:0,top:0,width:n,height:s},u[u.length-1]+=n+a.padding})),d.height+=_}else{var m=a.padding,c=e.columnWidths=[],h=a.padding,f=0,M=0,p=s+m;le.each(e.legendItems,(function(e,t){var n=hn(a,s)+s/2+i.measureText(e.text).width;t>0&&M+p>d.height-m&&(h+=f+a.padding,c.push(f),f=0,M=0),f=Math.max(f,n),M+=p,o[t]={left:0,top:0,width:n,height:s}})),h+=f,c.push(f),d.width+=h}e.width=d.width,e.height=d.height},afterFit:mn,isHorizontal:function(){return"top"===this.options.position||"bottom"===this.options.position},draw:function(){var e=this,t=e.options,a=t.labels,n=se.global,i=n.defaultColor,r=n.elements.line,s=e.width,o=e.lineWidths;if(t.display){var d,l=e.ctx,u=cn(a.fontColor,n.defaultFontColor),_=le.options._parseFont(a),m=_.size;l.textAlign="left",l.textBaseline="middle",l.lineWidth=.5,l.strokeStyle=u,l.fillStyle=u,l.font=_.string;var c=hn(a,m),h=e.legendHitBoxes,f=e.isHorizontal();d=f?{x:e.left+(s-o[0])/2+a.padding,y:e.top+a.padding,line:0}:{x:e.left+a.padding,y:e.top+a.padding,line:0};var M=m+a.padding;le.each(e.legendItems,(function(n,u){var _=l.measureText(n.text).width,p=c+m/2+_,y=d.x,g=d.y;f?u>0&&y+p+a.padding>e.left+e.minSize.width&&(g=d.y+=M,d.line++,y=d.x=e.left+(s-o[d.line])/2+a.padding):u>0&&g+M>e.top+e.minSize.height&&(y=d.x=y+e.columnWidths[d.line]+a.padding,g=d.y=e.top+a.padding,d.line++),function(e,a,n){if(!(isNaN(c)||c<=0)){l.save();var s=cn(n.lineWidth,r.borderWidth);if(l.fillStyle=cn(n.fillStyle,i),l.lineCap=cn(n.lineCap,r.borderCapStyle),l.lineDashOffset=cn(n.lineDashOffset,r.borderDashOffset),l.lineJoin=cn(n.lineJoin,r.borderJoinStyle),l.lineWidth=s,l.strokeStyle=cn(n.strokeStyle,i),l.setLineDash&&l.setLineDash(cn(n.lineDash,r.borderDash)),t.labels&&t.labels.usePointStyle){var o=c*Math.SQRT2/2,d=e+c/2,u=a+m/2;le.canvas.drawPoint(l,n.pointStyle,o,d,u)}else 0!==s&&l.strokeRect(e,a,c,m),l.fillRect(e,a,c,m);l.restore()}}(y,g,n),h[u].left=y,h[u].top=g,function(e,t,a,n){var i=m/2,r=c+i+e,s=t+i;l.fillText(a.text,r,s),a.hidden&&(l.beginPath(),l.lineWidth=2,l.moveTo(r,s),l.lineTo(r+n,s),l.stroke())}(y,g,n,_),f?d.x+=p+a.padding:d.y+=M}))}},_getLegendItemAt:function(e,t){var a,n,i,r=this;if(e>=r.left&&e<=r.right&&t>=r.top&&t<=r.bottom)for(i=r.legendHitBoxes,a=0;a<i.length;++a)if(e>=(n=i[a]).left&&e<=n.left+n.width&&t>=n.top&&t<=n.top+n.height)return r.legendItems[a];return null},handleEvent:function(e){var t,a=this,n=a.options,i="mouseup"===e.type?"click":e.type;if("mousemove"===i){if(!n.onHover&&!n.onLeave)return}else{if("click"!==i)return;if(!n.onClick)return}t=a._getLegendItemAt(e.x,e.y),"click"===i?t&&n.onClick&&n.onClick.call(a,e.native,t):(n.onLeave&&t!==a._hoveredItem&&(a._hoveredItem&&n.onLeave.call(a,e.native,a._hoveredItem),a._hoveredItem=t),n.onHover&&t&&n.onHover.call(a,e.native,t))}});function Mn(e,t){var a=new fn({ctx:e.ctx,options:t,chart:e});Yt.configure(e,a,t),Yt.addBox(e,a),e.legend=a}var pn={id:"legend",_element:fn,beforeInit:function(e){var t=e.options.legend;t&&Mn(e,t)},beforeUpdate:function(e){var t=e.options.legend,a=e.legend;t?(le.mergeIf(t,se.global.legend),a?(Yt.configure(e,a,t),a.options=t):Mn(e,t)):a&&(Yt.removeBox(e,a),delete e.legend)},afterEvent:function(e,t){var a=e.legend;a&&a.handleEvent(t)}},yn=le.noop;se._set("global",{title:{display:!1,fontStyle:"bold",fullWidth:!0,padding:10,position:"top",text:"",weight:2e3}});var gn=he.extend({initialize:function(e){le.extend(this,e),this.legendHitBoxes=[]},beforeUpdate:yn,update:function(e,t,a){var n=this;return n.beforeUpdate(),n.maxWidth=e,n.maxHeight=t,n.margins=a,n.beforeSetDimensions(),n.setDimensions(),n.afterSetDimensions(),n.beforeBuildLabels(),n.buildLabels(),n.afterBuildLabels(),n.beforeFit(),n.fit(),n.afterFit(),n.afterUpdate(),n.minSize},afterUpdate:yn,beforeSetDimensions:yn,setDimensions:function(){var e=this;e.isHorizontal()?(e.width=e.maxWidth,e.left=0,e.right=e.width):(e.height=e.maxHeight,e.top=0,e.bottom=e.height),e.paddingLeft=0,e.paddingTop=0,e.paddingRight=0,e.paddingBottom=0,e.minSize={width:0,height:0}},afterSetDimensions:yn,beforeBuildLabels:yn,buildLabels:yn,afterBuildLabels:yn,beforeFit:yn,fit:function(){var e=this,t=e.options,a=t.display,n=e.minSize,i=le.isArray(t.text)?t.text.length:1,r=le.options._parseFont(t),s=a?i*r.lineHeight+2*t.padding:0;e.isHorizontal()?(n.width=e.maxWidth,n.height=s):(n.width=s,n.height=e.maxHeight),e.width=n.width,e.height=n.height},afterFit:yn,isHorizontal:function(){var e=this.options.position;return"top"===e||"bottom"===e},draw:function(){var e=this,t=e.ctx,a=e.options;if(a.display){var n,i,r,s=le.options._parseFont(a),o=s.lineHeight,d=o/2+a.padding,l=0,u=e.top,_=e.left,m=e.bottom,c=e.right;t.fillStyle=le.valueOrDefault(a.fontColor,se.global.defaultFontColor),t.font=s.string,e.isHorizontal()?(i=_+(c-_)/2,r=u+d,n=c-_):(i="left"===a.position?_+d:c-d,r=u+(m-u)/2,n=m-u,l=Math.PI*("left"===a.position?-.5:.5)),t.save(),t.translate(i,r),t.rotate(l),t.textAlign="center",t.textBaseline="middle";var h=a.text;if(le.isArray(h))for(var f=0,M=0;M<h.length;++M)t.fillText(h[M],0,f,n),f+=o;else t.fillText(h,0,0,n);t.restore()}}});function Ln(e,t){var a=new gn({ctx:e.ctx,options:t,chart:e});Yt.configure(e,a,t),Yt.addBox(e,a),e.titleBlock=a}var Yn={},vn=_n,kn=pn,bn={id:"title",_element:gn,beforeInit:function(e){var t=e.options.title;t&&Ln(e,t)},beforeUpdate:function(e){var t=e.options.title,a=e.titleBlock;t?(le.mergeIf(t,se.global.title),a?(Yt.configure(e,a,t),a.options=t):Ln(e,t)):a&&(Yt.removeBox(e,a),delete e.titleBlock)}};for(var Dn in Yn.filler=vn,Yn.legend=kn,Yn.title=bn,ra.helpers=le,function(){function e(e,t,a){var n;return"string"===typeof e?(n=parseInt(e,10),-1!==e.indexOf("%")&&(n=n/100*t.parentNode[a])):n=e,n}function t(e){return void 0!==e&&null!==e&&"none"!==e}function a(a,n,i){var r=document.defaultView,s=le._getParentNode(a),o=r.getComputedStyle(a)[n],d=r.getComputedStyle(s)[n],l=t(o),u=t(d),_=Number.POSITIVE_INFINITY;return l||u?Math.min(l?e(o,a,i):_,u?e(d,s,i):_):"none"}le.where=function(e,t){if(le.isArray(e)&&Array.prototype.filter)return e.filter(t);var a=[];return le.each(e,(function(e){t(e)&&a.push(e)})),a},le.findIndex=Array.prototype.findIndex?function(e,t,a){return e.findIndex(t,a)}:function(e,t,a){a=void 0===a?e:a;for(var n=0,i=e.length;n<i;++n)if(t.call(a,e[n],n,e))return n;return-1},le.findNextWhere=function(e,t,a){le.isNullOrUndef(a)&&(a=-1);for(var n=a+1;n<e.length;n++){var i=e[n];if(t(i))return i}},le.findPreviousWhere=function(e,t,a){le.isNullOrUndef(a)&&(a=e.length);for(var n=a-1;n>=0;n--){var i=e[n];if(t(i))return i}},le.isNumber=function(e){return!isNaN(parseFloat(e))&&isFinite(e)},le.almostEquals=function(e,t,a){return Math.abs(e-t)<a},le.almostWhole=function(e,t){var a=Math.round(e);return a-t<e&&a+t>e},le.max=function(e){return e.reduce((function(e,t){return isNaN(t)?e:Math.max(e,t)}),Number.NEGATIVE_INFINITY)},le.min=function(e){return e.reduce((function(e,t){return isNaN(t)?e:Math.min(e,t)}),Number.POSITIVE_INFINITY)},le.sign=Math.sign?function(e){return Math.sign(e)}:function(e){return 0===(e=+e)||isNaN(e)?e:e>0?1:-1},le.log10=Math.log10?function(e){return Math.log10(e)}:function(e){var t=Math.log(e)*Math.LOG10E,a=Math.round(t);return e===Math.pow(10,a)?a:t},le.toRadians=function(e){return e*(Math.PI/180)},le.toDegrees=function(e){return e*(180/Math.PI)},le._decimalPlaces=function(e){if(le.isFinite(e)){for(var t=1,a=0;Math.round(e*t)/t!==e;)t*=10,a++;return a}},le.getAngleFromPoint=function(e,t){var a=t.x-e.x,n=t.y-e.y,i=Math.sqrt(a*a+n*n),r=Math.atan2(n,a);return r<-.5*Math.PI&&(r+=2*Math.PI),{angle:r,distance:i}},le.distanceBetweenPoints=function(e,t){return Math.sqrt(Math.pow(t.x-e.x,2)+Math.pow(t.y-e.y,2))},le.aliasPixel=function(e){return e%2===0?0:.5},le._alignPixel=function(e,t,a){var n=e.currentDevicePixelRatio,i=a/2;return Math.round((t-i)*n)/n+i},le.splineCurve=function(e,t,a,n){var i=e.skip?t:e,r=t,s=a.skip?t:a,o=Math.sqrt(Math.pow(r.x-i.x,2)+Math.pow(r.y-i.y,2)),d=Math.sqrt(Math.pow(s.x-r.x,2)+Math.pow(s.y-r.y,2)),l=o/(o+d),u=d/(o+d),_=n*(l=isNaN(l)?0:l),m=n*(u=isNaN(u)?0:u);return{previous:{x:r.x-_*(s.x-i.x),y:r.y-_*(s.y-i.y)},next:{x:r.x+m*(s.x-i.x),y:r.y+m*(s.y-i.y)}}},le.EPSILON=Number.EPSILON||1e-14,le.splineCurveMonotone=function(e){var t,a,n,i,r,s,o,d,l,u=(e||[]).map((function(e){return{model:e._model,deltaK:0,mK:0}})),_=u.length;for(t=0;t<_;++t)if(!(n=u[t]).model.skip){if(a=t>0?u[t-1]:null,(i=t<_-1?u[t+1]:null)&&!i.model.skip){var m=i.model.x-n.model.x;n.deltaK=0!==m?(i.model.y-n.model.y)/m:0}!a||a.model.skip?n.mK=n.deltaK:!i||i.model.skip?n.mK=a.deltaK:this.sign(a.deltaK)!==this.sign(n.deltaK)?n.mK=0:n.mK=(a.deltaK+n.deltaK)/2}for(t=0;t<_-1;++t)n=u[t],i=u[t+1],n.model.skip||i.model.skip||(le.almostEquals(n.deltaK,0,this.EPSILON)?n.mK=i.mK=0:(r=n.mK/n.deltaK,s=i.mK/n.deltaK,(d=Math.pow(r,2)+Math.pow(s,2))<=9||(o=3/Math.sqrt(d),n.mK=r*o*n.deltaK,i.mK=s*o*n.deltaK)));for(t=0;t<_;++t)(n=u[t]).model.skip||(a=t>0?u[t-1]:null,i=t<_-1?u[t+1]:null,a&&!a.model.skip&&(l=(n.model.x-a.model.x)/3,n.model.controlPointPreviousX=n.model.x-l,n.model.controlPointPreviousY=n.model.y-l*n.mK),i&&!i.model.skip&&(l=(i.model.x-n.model.x)/3,n.model.controlPointNextX=n.model.x+l,n.model.controlPointNextY=n.model.y+l*n.mK))},le.nextItem=function(e,t,a){return a?t>=e.length-1?e[0]:e[t+1]:t>=e.length-1?e[e.length-1]:e[t+1]},le.previousItem=function(e,t,a){return a?t<=0?e[e.length-1]:e[t-1]:t<=0?e[0]:e[t-1]},le.niceNum=function(e,t){var a=Math.floor(le.log10(e)),n=e/Math.pow(10,a);return(t?n<1.5?1:n<3?2:n<7?5:10:n<=1?1:n<=2?2:n<=5?5:10)*Math.pow(10,a)},le.requestAnimFrame="undefined"===typeof window?function(e){e()}:window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.oRequestAnimationFrame||window.msRequestAnimationFrame||function(e){return window.setTimeout(e,1e3/60)},le.getRelativePosition=function(e,t){var a,n,i=e.originalEvent||e,r=e.target||e.srcElement,s=r.getBoundingClientRect(),o=i.touches;o&&o.length>0?(a=o[0].clientX,n=o[0].clientY):(a=i.clientX,n=i.clientY);var d=parseFloat(le.getStyle(r,"padding-left")),l=parseFloat(le.getStyle(r,"padding-top")),u=parseFloat(le.getStyle(r,"padding-right")),_=parseFloat(le.getStyle(r,"padding-bottom")),m=s.right-s.left-d-u,c=s.bottom-s.top-l-_;return{x:a=Math.round((a-s.left-d)/m*r.width/t.currentDevicePixelRatio),y:n=Math.round((n-s.top-l)/c*r.height/t.currentDevicePixelRatio)}},le.getConstraintWidth=function(e){return a(e,"max-width","clientWidth")},le.getConstraintHeight=function(e){return a(e,"max-height","clientHeight")},le._calculatePadding=function(e,t,a){return(t=le.getStyle(e,t)).indexOf("%")>-1?a*parseInt(t,10)/100:parseInt(t,10)},le._getParentNode=function(e){var t=e.parentNode;return t&&"[object ShadowRoot]"===t.toString()&&(t=t.host),t},le.getMaximumWidth=function(e){var t=le._getParentNode(e);if(!t)return e.clientWidth;var a=t.clientWidth,n=a-le._calculatePadding(t,"padding-left",a)-le._calculatePadding(t,"padding-right",a),i=le.getConstraintWidth(e);return isNaN(i)?n:Math.min(n,i)},le.getMaximumHeight=function(e){var t=le._getParentNode(e);if(!t)return e.clientHeight;var a=t.clientHeight,n=a-le._calculatePadding(t,"padding-top",a)-le._calculatePadding(t,"padding-bottom",a),i=le.getConstraintHeight(e);return isNaN(i)?n:Math.min(n,i)},le.getStyle=function(e,t){return e.currentStyle?e.currentStyle[t]:document.defaultView.getComputedStyle(e,null).getPropertyValue(t)},le.retinaScale=function(e,t){var a=e.currentDevicePixelRatio=t||"undefined"!==typeof window&&window.devicePixelRatio||1;if(1!==a){var n=e.canvas,i=e.height,r=e.width;n.height=i*a,n.width=r*a,e.ctx.scale(a,a),n.style.height||n.style.width||(n.style.height=i+"px",n.style.width=r+"px")}},le.fontString=function(e,t,a){return t+" "+e+"px "+a},le.longestText=function(e,t,a,n){var i=(n=n||{}).data=n.data||{},r=n.garbageCollect=n.garbageCollect||[];n.font!==t&&(i=n.data={},r=n.garbageCollect=[],n.font=t),e.font=t;var s=0;le.each(a,(function(t){void 0!==t&&null!==t&&!0!==le.isArray(t)?s=le.measureText(e,i,r,s,t):le.isArray(t)&&le.each(t,(function(t){void 0===t||null===t||le.isArray(t)||(s=le.measureText(e,i,r,s,t))}))}));var o=r.length/2;if(o>a.length){for(var d=0;d<o;d++)delete i[r[d]];r.splice(0,o)}return s},le.measureText=function(e,t,a,n,i){var r=t[i];return r||(r=t[i]=e.measureText(i).width,a.push(i)),r>n&&(n=r),n},le.numberOfLabelLines=function(e){var t=1;return le.each(e,(function(e){le.isArray(e)&&e.length>t&&(t=e.length)})),t},le.color=U?function(e){return e instanceof CanvasGradient&&(e=se.global.defaultColor),U(e)}:function(e){return console.error("Color.js not found!"),e},le.getHoverColor=function(e){return e instanceof CanvasPattern||e instanceof CanvasGradient?e:le.color(e).saturate(.5).darken(.1).rgbString()}}(),ra._adapters=da,ra.Animation=Me,ra.animationService=pe,ra.controllers=lt,ra.DatasetController=ve,ra.defaults=se,ra.Element=he,ra.elements=Ee,ra.Interaction=Mt,ra.layouts=Yt,ra.platform=It,ra.plugins=zt,ra.Scale=ha,ra.scaleService=Rt,ra.Ticks=la,ra.Tooltip=Qt,ra.helpers.each(tn,(function(e,t){ra.scaleService.registerScaleType(t,e,e._defaults)})),Yn)Yn.hasOwnProperty(Dn)&&ra.plugins.register(Yn[Dn]);ra.platform.initialize();var wn=ra;return"undefined"!==typeof window&&(window.Chart=ra),ra.Chart=ra,ra.Legend=Yn.legend._element,ra.Title=Yn.title._element,ra.pluginService=ra.plugins,ra.PluginBase=ra.Element.extend({}),ra.canvasHelpers=ra.helpers.canvas,ra.layoutService=ra.layouts,ra.LinearScaleBase=ga,ra.helpers.each(["Bar","Bubble","Doughnut","Line","PolarArea","Radar","Scatter"],(function(e){ra[e]=function(t,a){return new ra(t,ra.helpers.merge(a||{},{type:e.charAt(0).toLowerCase()+e.slice(1)}))}})),wn}(function(){try{return a(0)}catch(e){}}())},,,,,,,,,,,,,function(e,t,a){var n=a(9),i=a(19).f,r=Function.prototype,s=r.toString,o=/^\s*function ([^ (]*)/;!n||"name"in r||i(r,"name",{configurable:!0,get:function(){try{return s.call(this).match(o)[1]}catch(e){return""}}})},,function(e,t,a){var n=a(9),i=a(51),r=a(18),s=a(44).f,o=function(e){return function(t){for(var a,o=r(t),d=i(o),l=d.length,u=0,_=[];l>u;)a=d[u++],n&&!s.call(o,a)||_.push(e?[a,o[a]]:o[a]);return _}};e.exports={entries:o(!0),values:o(!1)}},,,,function(e,t,a){"use strict";var n=a(12),i=a(90);n({target:"Array",proto:!0,forced:[].forEach!=i},{forEach:i})},function(e,t,a){var n=a(2),i=a(119),r=a(90),s=a(10);for(var o in i){var d=n[o],l=d&&d.prototype;if(l&&l.forEach!==r)try{s(l,"forEach",r)}catch(e){l.forEach=r}}},function(e,t){e.exports={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0}},,,,,,,,,,,,,,,,,,,,,,,,,,,,function(e,t,a){!function(e){"use strict";e.defineLocale("af",{months:"Januarie_Februarie_Maart_April_Mei_Junie_Julie_Augustus_September_Oktober_November_Desember".split("_"),monthsShort:"Jan_Feb_Mrt_Apr_Mei_Jun_Jul_Aug_Sep_Okt_Nov_Des".split("_"),weekdays:"Sondag_Maandag_Dinsdag_Woensdag_Donderdag_Vrydag_Saterdag".split("_"),weekdaysShort:"Son_Maa_Din_Woe_Don_Vry_Sat".split("_"),weekdaysMin:"So_Ma_Di_Wo_Do_Vr_Sa".split("_"),meridiemParse:/vm|nm/i,isPM:function(e){return/^nm$/i.test(e)},meridiem:function(e,t,a){return e<12?a?"vm":"VM":a?"nm":"NM"},longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Vandag om] LT",nextDay:"[Môre om] LT",nextWeek:"dddd [om] LT",lastDay:"[Gister om] LT",lastWeek:"[Laas] dddd [om] LT",sameElse:"L"},relativeTime:{future:"oor %s",past:"%s gelede",s:"'n paar sekondes",ss:"%d sekondes",m:"'n minuut",mm:"%d minute",h:"'n uur",hh:"%d ure",d:"'n dag",dd:"%d dae",M:"'n maand",MM:"%d maande",y:"'n jaar",yy:"%d jaar"},dayOfMonthOrdinalParse:/\d{1,2}(ste|de)/,ordinal:function(e){return e+(1===e||8===e||e>=20?"ste":"de")},week:{dow:1,doy:4}})}(a(0))},function(e,t,a){!function(e){"use strict";var t={1:"١",2:"٢",3:"٣",4:"٤",5:"٥",6:"٦",7:"٧",8:"٨",9:"٩",0:"٠"},a={"١":"1","٢":"2","٣":"3","٤":"4","٥":"5","٦":"6","٧":"7","٨":"8","٩":"9","٠":"0"},n=function(e){return 0===e?0:1===e?1:2===e?2:e%100>=3&&e%100<=10?3:e%100>=11?4:5},i={s:["أقل من ثانية","ثانية واحدة",["ثانيتان","ثانيتين"],"%d ثوان","%d ثانية","%d ثانية"],m:["أقل من دقيقة","دقيقة واحدة",["دقيقتان","دقيقتين"],"%d دقائق","%d دقيقة","%d دقيقة"],h:["أقل من ساعة","ساعة واحدة",["ساعتان","ساعتين"],"%d ساعات","%d ساعة","%d ساعة"],d:["أقل من يوم","يوم واحد",["يومان","يومين"],"%d أيام","%d يومًا","%d يوم"],M:["أقل من شهر","شهر واحد",["شهران","شهرين"],"%d أشهر","%d شهرا","%d شهر"],y:["أقل من عام","عام واحد",["عامان","عامين"],"%d أعوام","%d عامًا","%d عام"]},r=function(e){return function(t,a,r,s){var o=n(t),d=i[e][n(t)];return 2===o&&(d=d[a?0:1]),d.replace(/%d/i,t)}},s=["يناير","فبراير","مارس","أبريل","مايو","يونيو","يوليو","أغسطس","سبتمبر","أكتوبر","نوفمبر","ديسمبر"];e.defineLocale("ar",{months:s,monthsShort:s,weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"D/‏M/‏YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/ص|م/,isPM:function(e){return"م"===e},meridiem:function(e,t,a){return e<12?"ص":"م"},calendar:{sameDay:"[اليوم عند الساعة] LT",nextDay:"[غدًا عند الساعة] LT",nextWeek:"dddd [عند الساعة] LT",lastDay:"[أمس عند الساعة] LT",lastWeek:"dddd [عند الساعة] LT",sameElse:"L"},relativeTime:{future:"بعد %s",past:"منذ %s",s:r("s"),ss:r("s"),m:r("m"),mm:r("m"),h:r("h"),hh:r("h"),d:r("d"),dd:r("d"),M:r("M"),MM:r("M"),y:r("y"),yy:r("y")},preparse:function(e){return e.replace(/[١٢٣٤٥٦٧٨٩٠]/g,(function(e){return a[e]})).replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]})).replace(/,/g,"،")},week:{dow:6,doy:12}})}(a(0))},function(e,t,a){!function(e){"use strict";e.defineLocale("ar-dz",{months:"جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),monthsShort:"جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"احد_اثنين_ثلاثاء_اربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"أح_إث_ثلا_أر_خم_جم_سب".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",ss:"%d ثانية",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},week:{dow:0,doy:4}})}(a(0))},function(e,t,a){!function(e){"use strict";e.defineLocale("ar-kw",{months:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),monthsShort:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),weekdays:"الأحد_الإتنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"احد_اتنين_ثلاثاء_اربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",ss:"%d ثانية",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},week:{dow:0,doy:12}})}(a(0))},function(e,t,a){!function(e){"use strict";var t={1:"1",2:"2",3:"3",4:"4",5:"5",6:"6",7:"7",8:"8",9:"9",0:"0"},a=function(e){return 0===e?0:1===e?1:2===e?2:e%100>=3&&e%100<=10?3:e%100>=11?4:5},n={s:["أقل من ثانية","ثانية واحدة",["ثانيتان","ثانيتين"],"%d ثوان","%d ثانية","%d ثانية"],m:["أقل من دقيقة","دقيقة واحدة",["دقيقتان","دقيقتين"],"%d دقائق","%d دقيقة","%d دقيقة"],h:["أقل من ساعة","ساعة واحدة",["ساعتان","ساعتين"],"%d ساعات","%d ساعة","%d ساعة"],d:["أقل من يوم","يوم واحد",["يومان","يومين"],"%d أيام","%d يومًا","%d يوم"],M:["أقل من شهر","شهر واحد",["شهران","شهرين"],"%d أشهر","%d شهرا","%d شهر"],y:["أقل من عام","عام واحد",["عامان","عامين"],"%d أعوام","%d عامًا","%d عام"]},i=function(e){return function(t,i,r,s){var o=a(t),d=n[e][a(t)];return 2===o&&(d=d[i?0:1]),d.replace(/%d/i,t)}},r=["يناير","فبراير","مارس","أبريل","مايو","يونيو","يوليو","أغسطس","سبتمبر","أكتوبر","نوفمبر","ديسمبر"];e.defineLocale("ar-ly",{months:r,monthsShort:r,weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"D/‏M/‏YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/ص|م/,isPM:function(e){return"م"===e},meridiem:function(e,t,a){return e<12?"ص":"م"},calendar:{sameDay:"[اليوم عند الساعة] LT",nextDay:"[غدًا عند الساعة] LT",nextWeek:"dddd [عند الساعة] LT",lastDay:"[أمس عند الساعة] LT",lastWeek:"dddd [عند الساعة] LT",sameElse:"L"},relativeTime:{future:"بعد %s",past:"منذ %s",s:i("s"),ss:i("s"),m:i("m"),mm:i("m"),h:i("h"),hh:i("h"),d:i("d"),dd:i("d"),M:i("M"),MM:i("M"),y:i("y"),yy:i("y")},preparse:function(e){return e.replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]})).replace(/,/g,"،")},week:{dow:6,doy:12}})}(a(0))},function(e,t,a){!function(e){"use strict";e.defineLocale("ar-ma",{months:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),monthsShort:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),weekdays:"الأحد_الإتنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"احد_اتنين_ثلاثاء_اربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",ss:"%d ثانية",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},week:{dow:6,doy:12}})}(a(0))},function(e,t,a){!function(e){"use strict";var t={1:"١",2:"٢",3:"٣",4:"٤",5:"٥",6:"٦",7:"٧",8:"٨",9:"٩",0:"٠"},a={"١":"1","٢":"2","٣":"3","٤":"4","٥":"5","٦":"6","٧":"7","٨":"8","٩":"9","٠":"0"};e.defineLocale("ar-sa",{months:"يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),monthsShort:"يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/ص|م/,isPM:function(e){return"م"===e},meridiem:function(e,t,a){return e<12?"ص":"م"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",ss:"%d ثانية",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},preparse:function(e){return e.replace(/[١٢٣٤٥٦٧٨٩٠]/g,(function(e){return a[e]})).replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]})).replace(/,/g,"،")},week:{dow:0,doy:6}})}(a(0))},function(e,t,a){!function(e){"use strict";e.defineLocale("ar-tn",{months:"جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),monthsShort:"جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",ss:"%d ثانية",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},week:{dow:1,doy:4}})}(a(0))},function(e,t,a){!function(e){"use strict";var t={1:"-inci",5:"-inci",8:"-inci",70:"-inci",80:"-inci",2:"-nci",7:"-nci",20:"-nci",50:"-nci",3:"-üncü",4:"-üncü",100:"-üncü",6:"-ncı",9:"-uncu",10:"-uncu",30:"-uncu",60:"-ıncı",90:"-ıncı"};e.defineLocale("az",{months:"yanvar_fevral_mart_aprel_may_iyun_iyul_avqust_sentyabr_oktyabr_noyabr_dekabr".split("_"),monthsShort:"yan_fev_mar_apr_may_iyn_iyl_avq_sen_okt_noy_dek".split("_"),weekdays:"Bazar_Bazar ertəsi_Çərşənbə axşamı_Çərşənbə_Cümə axşamı_Cümə_Şənbə".split("_"),weekdaysShort:"Baz_BzE_ÇAx_Çər_CAx_Cüm_Şən".split("_"),weekdaysMin:"Bz_BE_ÇA_Çə_CA_Cü_Şə".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[bugün saat] LT",nextDay:"[sabah saat] LT",nextWeek:"[gələn həftə] dddd [saat] LT",lastDay:"[dünən] LT",lastWeek:"[keçən həftə] dddd [saat] LT",sameElse:"L"},relativeTime:{future:"%s sonra",past:"%s əvvəl",s:"birneçə saniyə",ss:"%d saniyə",m:"bir dəqiqə",mm:"%d dəqiqə",h:"bir saat",hh:"%d saat",d:"bir gün",dd:"%d gün",M:"bir ay",MM:"%d ay",y:"bir il",yy:"%d il"},meridiemParse:/gecə|səhər|gündüz|axşam/,isPM:function(e){return/^(gündüz|axşam)$/.test(e)},meridiem:function(e,t,a){return e<4?"gecə":e<12?"səhər":e<17?"gündüz":"axşam"},dayOfMonthOrdinalParse:/\d{1,2}-(ıncı|inci|nci|üncü|ncı|uncu)/,ordinal:function(e){if(0===e)return e+"-ıncı";var a=e%10;return e+(t[a]||t[e%100-a]||t[e>=100?100:null])},week:{dow:1,doy:7}})}(a(0))},function(e,t,a){!function(e){"use strict";function t(e,t,a){return"m"===a?t?"хвіліна":"хвіліну":"h"===a?t?"гадзіна":"гадзіну":e+" "+function(e,t){var a=e.split("_");return t%10===1&&t%100!==11?a[0]:t%10>=2&&t%10<=4&&(t%100<10||t%100>=20)?a[1]:a[2]}({ss:t?"секунда_секунды_секунд":"секунду_секунды_секунд",mm:t?"хвіліна_хвіліны_хвілін":"хвіліну_хвіліны_хвілін",hh:t?"гадзіна_гадзіны_гадзін":"гадзіну_гадзіны_гадзін",dd:"дзень_дні_дзён",MM:"месяц_месяцы_месяцаў",yy:"год_гады_гадоў"}[a],+e)}e.defineLocale("be",{months:{format:"студзеня_лютага_сакавіка_красавіка_траўня_чэрвеня_ліпеня_жніўня_верасня_кастрычніка_лістапада_снежня".split("_"),standalone:"студзень_люты_сакавік_красавік_травень_чэрвень_ліпень_жнівень_верасень_кастрычнік_лістапад_снежань".split("_")},monthsShort:"студ_лют_сак_крас_трав_чэрв_ліп_жнів_вер_каст_ліст_снеж".split("_"),weekdays:{format:"нядзелю_панядзелак_аўторак_сераду_чацвер_пятніцу_суботу".split("_"),standalone:"нядзеля_панядзелак_аўторак_серада_чацвер_пятніца_субота".split("_"),isFormat:/\[ ?[Ууў] ?(?:мінулую|наступную)? ?\] ?dddd/},weekdaysShort:"нд_пн_ат_ср_чц_пт_сб".split("_"),weekdaysMin:"нд_пн_ат_ср_чц_пт_сб".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY г.",LLL:"D MMMM YYYY г., HH:mm",LLLL:"dddd, D MMMM YYYY г., HH:mm"},calendar:{sameDay:"[Сёння ў] LT",nextDay:"[Заўтра ў] LT",lastDay:"[Учора ў] LT",nextWeek:function(){return"[У] dddd [ў] LT"},lastWeek:function(){switch(this.day()){case 0:case 3:case 5:case 6:return"[У мінулую] dddd [ў] LT";case 1:case 2:case 4:return"[У мінулы] dddd [ў] LT"}},sameElse:"L"},relativeTime:{future:"праз %s",past:"%s таму",s:"некалькі секунд",m:t,mm:t,h:t,hh:t,d:"дзень",dd:t,M:"месяц",MM:t,y:"год",yy:t},meridiemParse:/ночы|раніцы|дня|вечара/,isPM:function(e){return/^(дня|вечара)$/.test(e)},meridiem:function(e,t,a){return e<4?"ночы":e<12?"раніцы":e<17?"дня":"вечара"},dayOfMonthOrdinalParse:/\d{1,2}-(і|ы|га)/,ordinal:function(e,t){switch(t){case"M":case"d":case"DDD":case"w":case"W":return e%10!==2&&e%10!==3||e%100===12||e%100===13?e+"-ы":e+"-і";case"D":return e+"-га";default:return e}},week:{dow:1,doy:7}})}(a(0))},function(e,t,a){!function(e){"use strict";e.defineLocale("bg",{months:"януари_февруари_март_април_май_юни_юли_август_септември_октомври_ноември_декември".split("_"),monthsShort:"янр_фев_мар_апр_май_юни_юли_авг_сеп_окт_ное_дек".split("_"),weekdays:"неделя_понеделник_вторник_сряда_четвъртък_петък_събота".split("_"),weekdaysShort:"нед_пон_вто_сря_чет_пет_съб".split("_"),weekdaysMin:"нд_пн_вт_ср_чт_пт_сб".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"D.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY H:mm",LLLL:"dddd, D MMMM YYYY H:mm"},calendar:{sameDay:"[Днес в] LT",nextDay:"[Утре в] LT",nextWeek:"dddd [в] LT",lastDay:"[Вчера в] LT",lastWeek:function(){switch(this.day()){case 0:case 3:case 6:return"[В изминалата] dddd [в] LT";case 1:case 2:case 4:case 5:return"[В изминалия] dddd [в] LT"}},sameElse:"L"},relativeTime:{future:"след %s",past:"преди %s",s:"няколко секунди",ss:"%d секунди",m:"минута",mm:"%d минути",h:"час",hh:"%d часа",d:"ден",dd:"%d дни",M:"месец",MM:"%d месеца",y:"година",yy:"%d години"},dayOfMonthOrdinalParse:/\d{1,2}-(ев|ен|ти|ви|ри|ми)/,ordinal:function(e){var t=e%10,a=e%100;return 0===e?e+"-ев":0===a?e+"-ен":a>10&&a<20?e+"-ти":1===t?e+"-ви":2===t?e+"-ри":7===t||8===t?e+"-ми":e+"-ти"},week:{dow:1,doy:7}})}(a(0))},function(e,t,a){!function(e){"use strict";e.defineLocale("bm",{months:"Zanwuyekalo_Fewuruyekalo_Marisikalo_Awirilikalo_Mɛkalo_Zuwɛnkalo_Zuluyekalo_Utikalo_Sɛtanburukalo_ɔkutɔburukalo_Nowanburukalo_Desanburukalo".split("_"),monthsShort:"Zan_Few_Mar_Awi_Mɛ_Zuw_Zul_Uti_Sɛt_ɔku_Now_Des".split("_"),weekdays:"Kari_Ntɛnɛn_Tarata_Araba_Alamisa_Juma_Sibiri".split("_"),weekdaysShort:"Kar_Ntɛ_Tar_Ara_Ala_Jum_Sib".split("_"),weekdaysMin:"Ka_Nt_Ta_Ar_Al_Ju_Si".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"MMMM [tile] D [san] YYYY",LLL:"MMMM [tile] D [san] YYYY [lɛrɛ] HH:mm",LLLL:"dddd MMMM [tile] D [san] YYYY [lɛrɛ] HH:mm"},calendar:{sameDay:"[Bi lɛrɛ] LT",nextDay:"[Sini lɛrɛ] LT",nextWeek:"dddd [don lɛrɛ] LT",lastDay:"[Kunu lɛrɛ] LT",lastWeek:"dddd [tɛmɛnen lɛrɛ] LT",sameElse:"L"},relativeTime:{future:"%s kɔnɔ",past:"a bɛ %s bɔ",s:"sanga dama dama",ss:"sekondi %d",m:"miniti kelen",mm:"miniti %d",h:"lɛrɛ kelen",hh:"lɛrɛ %d",d:"tile kelen",dd:"tile %d",M:"kalo kelen",MM:"kalo %d",y:"san kelen",yy:"san %d"},week:{dow:1,doy:4}})}(a(0))},function(e,t,a){!function(e){"use strict";var t={1:"১",2:"২",3:"৩",4:"৪",5:"৫",6:"৬",7:"৭",8:"৮",9:"৯",0:"০"},a={"১":"1","২":"2","৩":"3","৪":"4","৫":"5","৬":"6","৭":"7","৮":"8","৯":"9","০":"0"};e.defineLocale("bn",{months:"জানুয়ারী_ফেব্রুয়ারি_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্টেম্বর_অক্টোবর_নভেম্বর_ডিসেম্বর".split("_"),monthsShort:"জানু_ফেব_মার্চ_এপ্র_মে_জুন_জুল_আগ_সেপ্ট_অক্টো_নভে_ডিসে".split("_"),weekdays:"রবিবার_সোমবার_মঙ্গলবার_বুধবার_বৃহস্পতিবার_শুক্রবার_শনিবার".split("_"),weekdaysShort:"রবি_সোম_মঙ্গল_বুধ_বৃহস্পতি_শুক্র_শনি".split("_"),weekdaysMin:"রবি_সোম_মঙ্গ_বুধ_বৃহঃ_শুক্র_শনি".split("_"),longDateFormat:{LT:"A h:mm সময়",LTS:"A h:mm:ss সময়",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm সময়",LLLL:"dddd, D MMMM YYYY, A h:mm সময়"},calendar:{sameDay:"[আজ] LT",nextDay:"[আগামীকাল] LT",nextWeek:"dddd, LT",lastDay:"[গতকাল] LT",lastWeek:"[গত] dddd, LT",sameElse:"L"},relativeTime:{future:"%s পরে",past:"%s আগে",s:"কয়েক সেকেন্ড",ss:"%d সেকেন্ড",m:"এক মিনিট",mm:"%d মিনিট",h:"এক ঘন্টা",hh:"%d ঘন্টা",d:"এক দিন",dd:"%d দিন",M:"এক মাস",MM:"%d মাস",y:"এক বছর",yy:"%d বছর"},preparse:function(e){return e.replace(/[১২৩৪৫৬৭৮৯০]/g,(function(e){return a[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/রাত|সকাল|দুপুর|বিকাল|রাত/,meridiemHour:function(e,t){return 12===e&&(e=0),"রাত"===t&&e>=4||"দুপুর"===t&&e<5||"বিকাল"===t?e+12:e},meridiem:function(e,t,a){return e<4?"রাত":e<10?"সকাল":e<17?"দুপুর":e<20?"বিকাল":"রাত"},week:{dow:0,doy:6}})}(a(0))},function(e,t,a){!function(e){"use strict";var t={1:"༡",2:"༢",3:"༣",4:"༤",5:"༥",6:"༦",7:"༧",8:"༨",9:"༩",0:"༠"},a={"༡":"1","༢":"2","༣":"3","༤":"4","༥":"5","༦":"6","༧":"7","༨":"8","༩":"9","༠":"0"};e.defineLocale("bo",{months:"ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ".split("_"),monthsShort:"ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ".split("_"),weekdays:"གཟའ་ཉི་མ་_གཟའ་ཟླ་བ་_གཟའ་མིག་དམར་_གཟའ་ལྷག་པ་_གཟའ་ཕུར་བུ_གཟའ་པ་སངས་_གཟའ་སྤེན་པ་".split("_"),weekdaysShort:"ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་".split("_"),weekdaysMin:"ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་".split("_"),longDateFormat:{LT:"A h:mm",LTS:"A h:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm",LLLL:"dddd, D MMMM YYYY, A h:mm"},calendar:{sameDay:"[དི་རིང] LT",nextDay:"[སང་ཉིན] LT",nextWeek:"[བདུན་ཕྲག་རྗེས་མ], LT",lastDay:"[ཁ་སང] LT",lastWeek:"[བདུན་ཕྲག་མཐའ་མ] dddd, LT",sameElse:"L"},relativeTime:{future:"%s ལ་",past:"%s སྔན་ལ",s:"ལམ་སང",ss:"%d སྐར་ཆ།",m:"སྐར་མ་གཅིག",mm:"%d སྐར་མ",h:"ཆུ་ཚོད་གཅིག",hh:"%d ཆུ་ཚོད",d:"ཉིན་གཅིག",dd:"%d ཉིན་",M:"ཟླ་བ་གཅིག",MM:"%d ཟླ་བ",y:"ལོ་གཅིག",yy:"%d ལོ"},preparse:function(e){return e.replace(/[༡༢༣༤༥༦༧༨༩༠]/g,(function(e){return a[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/མཚན་མོ|ཞོགས་ཀས|ཉིན་གུང|དགོང་དག|མཚན་མོ/,meridiemHour:function(e,t){return 12===e&&(e=0),"མཚན་མོ"===t&&e>=4||"ཉིན་གུང"===t&&e<5||"དགོང་དག"===t?e+12:e},meridiem:function(e,t,a){return e<4?"མཚན་མོ":e<10?"ཞོགས་ཀས":e<17?"ཉིན་གུང":e<20?"དགོང་དག":"མཚན་མོ"},week:{dow:0,doy:6}})}(a(0))},function(e,t,a){!function(e){"use strict";function t(e,t,a){return e+" "+function(e,t){return 2===t?function(e){var t={m:"v",b:"v",d:"z"};return void 0===t[e.charAt(0)]?e:t[e.charAt(0)]+e.substring(1)}(e):e}({mm:"munutenn",MM:"miz",dd:"devezh"}[a],e)}e.defineLocale("br",{months:"Genver_C'hwevrer_Meurzh_Ebrel_Mae_Mezheven_Gouere_Eost_Gwengolo_Here_Du_Kerzu".split("_"),monthsShort:"Gen_C'hwe_Meu_Ebr_Mae_Eve_Gou_Eos_Gwe_Her_Du_Ker".split("_"),weekdays:"Sul_Lun_Meurzh_Merc'her_Yaou_Gwener_Sadorn".split("_"),weekdaysShort:"Sul_Lun_Meu_Mer_Yao_Gwe_Sad".split("_"),weekdaysMin:"Su_Lu_Me_Mer_Ya_Gw_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"h[e]mm A",LTS:"h[e]mm:ss A",L:"DD/MM/YYYY",LL:"D [a viz] MMMM YYYY",LLL:"D [a viz] MMMM YYYY h[e]mm A",LLLL:"dddd, D [a viz] MMMM YYYY h[e]mm A"},calendar:{sameDay:"[Hiziv da] LT",nextDay:"[Warc'hoazh da] LT",nextWeek:"dddd [da] LT",lastDay:"[Dec'h da] LT",lastWeek:"dddd [paset da] LT",sameElse:"L"},relativeTime:{future:"a-benn %s",past:"%s 'zo",s:"un nebeud segondennoù",ss:"%d eilenn",m:"ur vunutenn",mm:t,h:"un eur",hh:"%d eur",d:"un devezh",dd:t,M:"ur miz",MM:t,y:"ur bloaz",yy:function(e){switch(function e(t){return t>9?e(t%10):t}(e)){case 1:case 3:case 4:case 5:case 9:return e+" bloaz";default:return e+" vloaz"}}},dayOfMonthOrdinalParse:/\d{1,2}(añ|vet)/,ordinal:function(e){return e+(1===e?"añ":"vet")},week:{dow:1,doy:4}})}(a(0))},function(e,t,a){!function(e){"use strict";function t(e,t,a){var n=e+" ";switch(a){case"ss":return n+=1===e?"sekunda":2===e||3===e||4===e?"sekunde":"sekundi";case"m":return t?"jedna minuta":"jedne minute";case"mm":return n+=1===e?"minuta":2===e||3===e||4===e?"minute":"minuta";case"h":return t?"jedan sat":"jednog sata";case"hh":return n+=1===e?"sat":2===e||3===e||4===e?"sata":"sati";case"dd":return n+=1===e?"dan":"dana";case"MM":return n+=1===e?"mjesec":2===e||3===e||4===e?"mjeseca":"mjeseci";case"yy":return n+=1===e?"godina":2===e||3===e||4===e?"godine":"godina"}}e.defineLocale("bs",{months:"januar_februar_mart_april_maj_juni_juli_august_septembar_oktobar_novembar_decembar".split("_"),monthsShort:"jan._feb._mar._apr._maj._jun._jul._aug._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sri._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedjelju] [u] LT";case 3:return"[u] [srijedu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[jučer u] LT",lastWeek:function(){switch(this.day()){case 0:case 3:return"[prošlu] dddd [u] LT";case 6:return"[prošle] [subote] [u] LT";case 1:case 2:case 4:case 5:return"[prošli] dddd [u] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"prije %s",s:"par sekundi",ss:t,m:t,mm:t,h:t,hh:t,d:"dan",dd:t,M:"mjesec",MM:t,y:"godinu",yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(a(0))},function(e,t,a){!function(e){"use strict";e.defineLocale("ca",{months:{standalone:"gener_febrer_març_abril_maig_juny_juliol_agost_setembre_octubre_novembre_desembre".split("_"),format:"de gener_de febrer_de març_d'abril_de maig_de juny_de juliol_d'agost_de setembre_d'octubre_de novembre_de desembre".split("_"),isFormat:/D[oD]?(\s)+MMMM/},monthsShort:"gen._febr._març_abr._maig_juny_jul._ag._set._oct._nov._des.".split("_"),monthsParseExact:!0,weekdays:"diumenge_dilluns_dimarts_dimecres_dijous_divendres_dissabte".split("_"),weekdaysShort:"dg._dl._dt._dc._dj._dv._ds.".split("_"),weekdaysMin:"dg_dl_dt_dc_dj_dv_ds".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM [de] YYYY",ll:"D MMM YYYY",LLL:"D MMMM [de] YYYY [a les] H:mm",lll:"D MMM YYYY, H:mm",LLLL:"dddd D MMMM [de] YYYY [a les] H:mm",llll:"ddd D MMM YYYY, H:mm"},calendar:{sameDay:function(){return"[avui a "+(1!==this.hours()?"les":"la")+"] LT"},nextDay:function(){return"[demà a "+(1!==this.hours()?"les":"la")+"] LT"},nextWeek:function(){return"dddd [a "+(1!==this.hours()?"les":"la")+"] LT"},lastDay:function(){return"[ahir a "+(1!==this.hours()?"les":"la")+"] LT"},lastWeek:function(){return"[el] dddd [passat a "+(1!==this.hours()?"les":"la")+"] LT"},sameElse:"L"},relativeTime:{future:"d'aquí %s",past:"fa %s",s:"uns segons",ss:"%d segons",m:"un minut",mm:"%d minuts",h:"una hora",hh:"%d hores",d:"un dia",dd:"%d dies",M:"un mes",MM:"%d mesos",y:"un any",yy:"%d anys"},dayOfMonthOrdinalParse:/\d{1,2}(r|n|t|è|a)/,ordinal:function(e,t){var a=1===e?"r":2===e?"n":3===e?"r":4===e?"t":"è";return"w"!==t&&"W"!==t||(a="a"),e+a},week:{dow:1,doy:4}})}(a(0))},function(e,t,a){!function(e){"use strict";var t="leden_únor_březen_duben_květen_červen_červenec_srpen_září_říjen_listopad_prosinec".split("_"),a="led_úno_bře_dub_kvě_čvn_čvc_srp_zář_říj_lis_pro".split("_"),n=[/^led/i,/^úno/i,/^bře/i,/^dub/i,/^kvě/i,/^(čvn|červen$|června)/i,/^(čvc|červenec|července)/i,/^srp/i,/^zář/i,/^říj/i,/^lis/i,/^pro/i],i=/^(leden|únor|březen|duben|květen|červenec|července|červen|června|srpen|září|říjen|listopad|prosinec|led|úno|bře|dub|kvě|čvn|čvc|srp|zář|říj|lis|pro)/i;function r(e){return e>1&&e<5&&1!==~~(e/10)}function s(e,t,a,n){var i=e+" ";switch(a){case"s":return t||n?"pár sekund":"pár sekundami";case"ss":return t||n?i+(r(e)?"sekundy":"sekund"):i+"sekundami";case"m":return t?"minuta":n?"minutu":"minutou";case"mm":return t||n?i+(r(e)?"minuty":"minut"):i+"minutami";case"h":return t?"hodina":n?"hodinu":"hodinou";case"hh":return t||n?i+(r(e)?"hodiny":"hodin"):i+"hodinami";case"d":return t||n?"den":"dnem";case"dd":return t||n?i+(r(e)?"dny":"dní"):i+"dny";case"M":return t||n?"měsíc":"měsícem";case"MM":return t||n?i+(r(e)?"měsíce":"měsíců"):i+"měsíci";case"y":return t||n?"rok":"rokem";case"yy":return t||n?i+(r(e)?"roky":"let"):i+"lety"}}e.defineLocale("cs",{months:t,monthsShort:a,monthsRegex:i,monthsShortRegex:i,monthsStrictRegex:/^(leden|ledna|února|únor|březen|března|duben|dubna|květen|května|červenec|července|červen|června|srpen|srpna|září|říjen|října|listopadu|listopad|prosinec|prosince)/i,monthsShortStrictRegex:/^(led|úno|bře|dub|kvě|čvn|čvc|srp|zář|říj|lis|pro)/i,monthsParse:n,longMonthsParse:n,shortMonthsParse:n,weekdays:"neděle_pondělí_úterý_středa_čtvrtek_pátek_sobota".split("_"),weekdaysShort:"ne_po_út_st_čt_pá_so".split("_"),weekdaysMin:"ne_po_út_st_čt_pá_so".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd D. MMMM YYYY H:mm",l:"D. M. YYYY"},calendar:{sameDay:"[dnes v] LT",nextDay:"[zítra v] LT",nextWeek:function(){switch(this.day()){case 0:return"[v neděli v] LT";case 1:case 2:return"[v] dddd [v] LT";case 3:return"[ve středu v] LT";case 4:return"[ve čtvrtek v] LT";case 5:return"[v pátek v] LT";case 6:return"[v sobotu v] LT"}},lastDay:"[včera v] LT",lastWeek:function(){switch(this.day()){case 0:return"[minulou neděli v] LT";case 1:case 2:return"[minulé] dddd [v] LT";case 3:return"[minulou středu v] LT";case 4:case 5:return"[minulý] dddd [v] LT";case 6:return"[minulou sobotu v] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"před %s",s:s,ss:s,m:s,mm:s,h:s,hh:s,d:s,dd:s,M:s,MM:s,y:s,yy:s},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(a(0))},function(e,t,a){!function(e){"use strict";e.defineLocale("cv",{months:"кӑрлач_нарӑс_пуш_ака_май_ҫӗртме_утӑ_ҫурла_авӑн_юпа_чӳк_раштав".split("_"),monthsShort:"кӑр_нар_пуш_ака_май_ҫӗр_утӑ_ҫур_авн_юпа_чӳк_раш".split("_"),weekdays:"вырсарникун_тунтикун_ытларикун_юнкун_кӗҫнерникун_эрнекун_шӑматкун".split("_"),weekdaysShort:"выр_тун_ытл_юн_кӗҫ_эрн_шӑм".split("_"),weekdaysMin:"вр_тн_ыт_юн_кҫ_эр_шм".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD-MM-YYYY",LL:"YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ]",LLL:"YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm",LLLL:"dddd, YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm"},calendar:{sameDay:"[Паян] LT [сехетре]",nextDay:"[Ыран] LT [сехетре]",lastDay:"[Ӗнер] LT [сехетре]",nextWeek:"[Ҫитес] dddd LT [сехетре]",lastWeek:"[Иртнӗ] dddd LT [сехетре]",sameElse:"L"},relativeTime:{future:function(e){return e+(/сехет$/i.exec(e)?"рен":/ҫул$/i.exec(e)?"тан":"ран")},past:"%s каялла",s:"пӗр-ик ҫеккунт",ss:"%d ҫеккунт",m:"пӗр минут",mm:"%d минут",h:"пӗр сехет",hh:"%d сехет",d:"пӗр кун",dd:"%d кун",M:"пӗр уйӑх",MM:"%d уйӑх",y:"пӗр ҫул",yy:"%d ҫул"},dayOfMonthOrdinalParse:/\d{1,2}-мӗш/,ordinal:"%d-мӗш",week:{dow:1,doy:7}})}(a(0))},function(e,t,a){!function(e){"use strict";e.defineLocale("cy",{months:"Ionawr_Chwefror_Mawrth_Ebrill_Mai_Mehefin_Gorffennaf_Awst_Medi_Hydref_Tachwedd_Rhagfyr".split("_"),monthsShort:"Ion_Chwe_Maw_Ebr_Mai_Meh_Gor_Aws_Med_Hyd_Tach_Rhag".split("_"),weekdays:"Dydd Sul_Dydd Llun_Dydd Mawrth_Dydd Mercher_Dydd Iau_Dydd Gwener_Dydd Sadwrn".split("_"),weekdaysShort:"Sul_Llun_Maw_Mer_Iau_Gwe_Sad".split("_"),weekdaysMin:"Su_Ll_Ma_Me_Ia_Gw_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Heddiw am] LT",nextDay:"[Yfory am] LT",nextWeek:"dddd [am] LT",lastDay:"[Ddoe am] LT",lastWeek:"dddd [diwethaf am] LT",sameElse:"L"},relativeTime:{future:"mewn %s",past:"%s yn ôl",s:"ychydig eiliadau",ss:"%d eiliad",m:"munud",mm:"%d munud",h:"awr",hh:"%d awr",d:"diwrnod",dd:"%d diwrnod",M:"mis",MM:"%d mis",y:"blwyddyn",yy:"%d flynedd"},dayOfMonthOrdinalParse:/\d{1,2}(fed|ain|af|il|ydd|ed|eg)/,ordinal:function(e){var t="";return e>20?t=40===e||50===e||60===e||80===e||100===e?"fed":"ain":e>0&&(t=["","af","il","ydd","ydd","ed","ed","ed","fed","fed","fed","eg","fed","eg","eg","fed","eg","eg","fed","eg","fed"][e]),e+t},week:{dow:1,doy:4}})}(a(0))},function(e,t,a){!function(e){"use strict";e.defineLocale("da",{months:"januar_februar_marts_april_maj_juni_juli_august_september_oktober_november_december".split("_"),monthsShort:"jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec".split("_"),weekdays:"søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag".split("_"),weekdaysShort:"søn_man_tir_ons_tor_fre_lør".split("_"),weekdaysMin:"sø_ma_ti_on_to_fr_lø".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd [d.] D. MMMM YYYY [kl.] HH:mm"},calendar:{sameDay:"[i dag kl.] LT",nextDay:"[i morgen kl.] LT",nextWeek:"på dddd [kl.] LT",lastDay:"[i går kl.] LT",lastWeek:"[i] dddd[s kl.] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"%s siden",s:"få sekunder",ss:"%d sekunder",m:"et minut",mm:"%d minutter",h:"en time",hh:"%d timer",d:"en dag",dd:"%d dage",M:"en måned",MM:"%d måneder",y:"et år",yy:"%d år"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(a(0))},function(e,t,a){!function(e){"use strict";function t(e,t,a,n){var i={m:["eine Minute","einer Minute"],h:["eine Stunde","einer Stunde"],d:["ein Tag","einem Tag"],dd:[e+" Tage",e+" Tagen"],M:["ein Monat","einem Monat"],MM:[e+" Monate",e+" Monaten"],y:["ein Jahr","einem Jahr"],yy:[e+" Jahre",e+" Jahren"]};return t?i[a][0]:i[a][1]}e.defineLocale("de",{months:"Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jan._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),weekdaysShort:"So._Mo._Di._Mi._Do._Fr._Sa.".split("_"),weekdaysMin:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd, D. MMMM YYYY HH:mm"},calendar:{sameDay:"[heute um] LT [Uhr]",sameElse:"L",nextDay:"[morgen um] LT [Uhr]",nextWeek:"dddd [um] LT [Uhr]",lastDay:"[gestern um] LT [Uhr]",lastWeek:"[letzten] dddd [um] LT [Uhr]"},relativeTime:{future:"in %s",past:"vor %s",s:"ein paar Sekunden",ss:"%d Sekunden",m:t,mm:"%d Minuten",h:t,hh:"%d Stunden",d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(a(0))},function(e,t,a){!function(e){"use strict";function t(e,t,a,n){var i={m:["eine Minute","einer Minute"],h:["eine Stunde","einer Stunde"],d:["ein Tag","einem Tag"],dd:[e+" Tage",e+" Tagen"],M:["ein Monat","einem Monat"],MM:[e+" Monate",e+" Monaten"],y:["ein Jahr","einem Jahr"],yy:[e+" Jahre",e+" Jahren"]};return t?i[a][0]:i[a][1]}e.defineLocale("de-at",{months:"Jänner_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jän._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),weekdaysShort:"So._Mo._Di._Mi._Do._Fr._Sa.".split("_"),weekdaysMin:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd, D. MMMM YYYY HH:mm"},calendar:{sameDay:"[heute um] LT [Uhr]",sameElse:"L",nextDay:"[morgen um] LT [Uhr]",nextWeek:"dddd [um] LT [Uhr]",lastDay:"[gestern um] LT [Uhr]",lastWeek:"[letzten] dddd [um] LT [Uhr]"},relativeTime:{future:"in %s",past:"vor %s",s:"ein paar Sekunden",ss:"%d Sekunden",m:t,mm:"%d Minuten",h:t,hh:"%d Stunden",d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(a(0))},function(e,t,a){!function(e){"use strict";function t(e,t,a,n){var i={m:["eine Minute","einer Minute"],h:["eine Stunde","einer Stunde"],d:["ein Tag","einem Tag"],dd:[e+" Tage",e+" Tagen"],M:["ein Monat","einem Monat"],MM:[e+" Monate",e+" Monaten"],y:["ein Jahr","einem Jahr"],yy:[e+" Jahre",e+" Jahren"]};return t?i[a][0]:i[a][1]}e.defineLocale("de-ch",{months:"Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jan._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),weekdaysShort:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),weekdaysMin:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd, D. MMMM YYYY HH:mm"},calendar:{sameDay:"[heute um] LT [Uhr]",sameElse:"L",nextDay:"[morgen um] LT [Uhr]",nextWeek:"dddd [um] LT [Uhr]",lastDay:"[gestern um] LT [Uhr]",lastWeek:"[letzten] dddd [um] LT [Uhr]"},relativeTime:{future:"in %s",past:"vor %s",s:"ein paar Sekunden",ss:"%d Sekunden",m:t,mm:"%d Minuten",h:t,hh:"%d Stunden",d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(a(0))},function(e,t,a){!function(e){"use strict";var t=["ޖެނުއަރީ","ފެބްރުއަރީ","މާރިޗު","އޭޕްރީލު","މޭ","ޖޫން","ޖުލައި","އޯގަސްޓު","ސެޕްޓެމްބަރު","އޮކްޓޯބަރު","ނޮވެމްބަރު","ޑިސެމްބަރު"],a=["އާދިއްތަ","ހޯމަ","އަންގާރަ","ބުދަ","ބުރާސްފަތި","ހުކުރު","ހޮނިހިރު"];e.defineLocale("dv",{months:t,monthsShort:t,weekdays:a,weekdaysShort:a,weekdaysMin:"އާދި_ހޯމަ_އަން_ބުދަ_ބުރާ_ހުކު_ހޮނި".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"D/M/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/މކ|މފ/,isPM:function(e){return"މފ"===e},meridiem:function(e,t,a){return e<12?"މކ":"މފ"},calendar:{sameDay:"[މިއަދު] LT",nextDay:"[މާދަމާ] LT",nextWeek:"dddd LT",lastDay:"[އިއްޔެ] LT",lastWeek:"[ފާއިތުވި] dddd LT",sameElse:"L"},relativeTime:{future:"ތެރޭގައި %s",past:"ކުރިން %s",s:"ސިކުންތުކޮޅެއް",ss:"d% ސިކުންތު",m:"މިނިޓެއް",mm:"މިނިޓު %d",h:"ގަޑިއިރެއް",hh:"ގަޑިއިރު %d",d:"ދުވަހެއް",dd:"ދުވަސް %d",M:"މަހެއް",MM:"މަސް %d",y:"އަހަރެއް",yy:"އަހަރު %d"},preparse:function(e){return e.replace(/،/g,",")},postformat:function(e){return e.replace(/,/g,"،")},week:{dow:7,doy:12}})}(a(0))},function(e,t,a){!function(e){"use strict";e.defineLocale("el",{monthsNominativeEl:"Ιανουάριος_Φεβρουάριος_Μάρτιος_Απρίλιος_Μάιος_Ιούνιος_Ιούλιος_Αύγουστος_Σεπτέμβριος_Οκτώβριος_Νοέμβριος_Δεκέμβριος".split("_"),monthsGenitiveEl:"Ιανουαρίου_Φεβρουαρίου_Μαρτίου_Απριλίου_Μαΐου_Ιουνίου_Ιουλίου_Αυγούστου_Σεπτεμβρίου_Οκτωβρίου_Νοεμβρίου_Δεκεμβρίου".split("_"),months:function(e,t){return e?"string"===typeof t&&/D/.test(t.substring(0,t.indexOf("MMMM")))?this._monthsGenitiveEl[e.month()]:this._monthsNominativeEl[e.month()]:this._monthsNominativeEl},monthsShort:"Ιαν_Φεβ_Μαρ_Απρ_Μαϊ_Ιουν_Ιουλ_Αυγ_Σεπ_Οκτ_Νοε_Δεκ".split("_"),weekdays:"Κυριακή_Δευτέρα_Τρίτη_Τετάρτη_Πέμπτη_Παρασκευή_Σάββατο".split("_"),weekdaysShort:"Κυρ_Δευ_Τρι_Τετ_Πεμ_Παρ_Σαβ".split("_"),weekdaysMin:"Κυ_Δε_Τρ_Τε_Πε_Πα_Σα".split("_"),meridiem:function(e,t,a){return e>11?a?"μμ":"ΜΜ":a?"πμ":"ΠΜ"},isPM:function(e){return"μ"===(e+"").toLowerCase()[0]},meridiemParse:/[ΠΜ]\.?Μ?\.?/i,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendarEl:{sameDay:"[Σήμερα {}] LT",nextDay:"[Αύριο {}] LT",nextWeek:"dddd [{}] LT",lastDay:"[Χθες {}] LT",lastWeek:function(){switch(this.day()){case 6:return"[το προηγούμενο] dddd [{}] LT";default:return"[την προηγούμενη] dddd [{}] LT"}},sameElse:"L"},calendar:function(e,t){var a,n=this._calendarEl[e],i=t&&t.hours();return((a=n)instanceof Function||"[object Function]"===Object.prototype.toString.call(a))&&(n=n.apply(t)),n.replace("{}",i%12===1?"στη":"στις")},relativeTime:{future:"σε %s",past:"%s πριν",s:"λίγα δευτερόλεπτα",ss:"%d δευτερόλεπτα",m:"ένα λεπτό",mm:"%d λεπτά",h:"μία ώρα",hh:"%d ώρες",d:"μία μέρα",dd:"%d μέρες",M:"ένας μήνας",MM:"%d μήνες",y:"ένας χρόνος",yy:"%d χρόνια"},dayOfMonthOrdinalParse:/\d{1,2}η/,ordinal:"%dη",week:{dow:1,doy:4}})}(a(0))},function(e,t,a){!function(e){"use strict";e.defineLocale("en-SG",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1===~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}})}(a(0))},function(e,t,a){!function(e){"use strict";e.defineLocale("en-au",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1===~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}})}(a(0))},function(e,t,a){!function(e){"use strict";e.defineLocale("en-ca",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"YYYY-MM-DD",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1===~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")}})}(a(0))},function(e,t,a){!function(e){"use strict";e.defineLocale("en-gb",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1===~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}})}(a(0))},function(e,t,a){!function(e){"use strict";e.defineLocale("en-ie",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1===~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}})}(a(0))},function(e,t,a){!function(e){"use strict";e.defineLocale("en-il",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1===~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")}})}(a(0))},function(e,t,a){!function(e){"use strict";e.defineLocale("en-nz",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1===~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}})}(a(0))},function(e,t,a){!function(e){"use strict";e.defineLocale("eo",{months:"januaro_februaro_marto_aprilo_majo_junio_julio_aŭgusto_septembro_oktobro_novembro_decembro".split("_"),monthsShort:"jan_feb_mar_apr_maj_jun_jul_aŭg_sep_okt_nov_dec".split("_"),weekdays:"dimanĉo_lundo_mardo_merkredo_ĵaŭdo_vendredo_sabato".split("_"),weekdaysShort:"dim_lun_mard_merk_ĵaŭ_ven_sab".split("_"),weekdaysMin:"di_lu_ma_me_ĵa_ve_sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"D[-a de] MMMM, YYYY",LLL:"D[-a de] MMMM, YYYY HH:mm",LLLL:"dddd, [la] D[-a de] MMMM, YYYY HH:mm"},meridiemParse:/[ap]\.t\.m/i,isPM:function(e){return"p"===e.charAt(0).toLowerCase()},meridiem:function(e,t,a){return e>11?a?"p.t.m.":"P.T.M.":a?"a.t.m.":"A.T.M."},calendar:{sameDay:"[Hodiaŭ je] LT",nextDay:"[Morgaŭ je] LT",nextWeek:"dddd [je] LT",lastDay:"[Hieraŭ je] LT",lastWeek:"[pasinta] dddd [je] LT",sameElse:"L"},relativeTime:{future:"post %s",past:"antaŭ %s",s:"sekundoj",ss:"%d sekundoj",m:"minuto",mm:"%d minutoj",h:"horo",hh:"%d horoj",d:"tago",dd:"%d tagoj",M:"monato",MM:"%d monatoj",y:"jaro",yy:"%d jaroj"},dayOfMonthOrdinalParse:/\d{1,2}a/,ordinal:"%da",week:{dow:1,doy:7}})}(a(0))},function(e,t,a){!function(e){"use strict";var t="ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"),a="ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"),n=[/^ene/i,/^feb/i,/^mar/i,/^abr/i,/^may/i,/^jun/i,/^jul/i,/^ago/i,/^sep/i,/^oct/i,/^nov/i,/^dic/i],i=/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;e.defineLocale("es",{months:"enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),monthsShort:function(e,n){return e?/-MMM-/.test(n)?a[e.month()]:t[e.month()]:t},monthsRegex:i,monthsShortRegex:i,monthsStrictRegex:/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,monthsShortStrictRegex:/^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,monthsParse:n,longMonthsParse:n,shortMonthsParse:n,weekdays:"domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),weekdaysShort:"dom._lun._mar._mié._jue._vie._sáb.".split("_"),weekdaysMin:"do_lu_ma_mi_ju_vi_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY H:mm",LLLL:"dddd, D [de] MMMM [de] YYYY H:mm"},calendar:{sameDay:function(){return"[hoy a la"+(1!==this.hours()?"s":"")+"] LT"},nextDay:function(){return"[mañana a la"+(1!==this.hours()?"s":"")+"] LT"},nextWeek:function(){return"dddd [a la"+(1!==this.hours()?"s":"")+"] LT"},lastDay:function(){return"[ayer a la"+(1!==this.hours()?"s":"")+"] LT"},lastWeek:function(){return"[el] dddd [pasado a la"+(1!==this.hours()?"s":"")+"] LT"},sameElse:"L"},relativeTime:{future:"en %s",past:"hace %s",s:"unos segundos",ss:"%d segundos",m:"un minuto",mm:"%d minutos",h:"una hora",hh:"%d horas",d:"un día",dd:"%d días",M:"un mes",MM:"%d meses",y:"un año",yy:"%d años"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(a(0))},function(e,t,a){!function(e){"use strict";var t="ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"),a="ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"),n=[/^ene/i,/^feb/i,/^mar/i,/^abr/i,/^may/i,/^jun/i,/^jul/i,/^ago/i,/^sep/i,/^oct/i,/^nov/i,/^dic/i],i=/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;e.defineLocale("es-do",{months:"enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),monthsShort:function(e,n){return e?/-MMM-/.test(n)?a[e.month()]:t[e.month()]:t},monthsRegex:i,monthsShortRegex:i,monthsStrictRegex:/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,monthsShortStrictRegex:/^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,monthsParse:n,longMonthsParse:n,shortMonthsParse:n,weekdays:"domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),weekdaysShort:"dom._lun._mar._mié._jue._vie._sáb.".split("_"),weekdaysMin:"do_lu_ma_mi_ju_vi_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY h:mm A",LLLL:"dddd, D [de] MMMM [de] YYYY h:mm A"},calendar:{sameDay:function(){return"[hoy a la"+(1!==this.hours()?"s":"")+"] LT"},nextDay:function(){return"[mañana a la"+(1!==this.hours()?"s":"")+"] LT"},nextWeek:function(){return"dddd [a la"+(1!==this.hours()?"s":"")+"] LT"},lastDay:function(){return"[ayer a la"+(1!==this.hours()?"s":"")+"] LT"},lastWeek:function(){return"[el] dddd [pasado a la"+(1!==this.hours()?"s":"")+"] LT"},sameElse:"L"},relativeTime:{future:"en %s",past:"hace %s",s:"unos segundos",ss:"%d segundos",m:"un minuto",mm:"%d minutos",h:"una hora",hh:"%d horas",d:"un día",dd:"%d días",M:"un mes",MM:"%d meses",y:"un año",yy:"%d años"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(a(0))},function(e,t,a){!function(e){"use strict";var t="ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"),a="ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"),n=[/^ene/i,/^feb/i,/^mar/i,/^abr/i,/^may/i,/^jun/i,/^jul/i,/^ago/i,/^sep/i,/^oct/i,/^nov/i,/^dic/i],i=/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;e.defineLocale("es-us",{months:"enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),monthsShort:function(e,n){return e?/-MMM-/.test(n)?a[e.month()]:t[e.month()]:t},monthsRegex:i,monthsShortRegex:i,monthsStrictRegex:/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,monthsShortStrictRegex:/^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,monthsParse:n,longMonthsParse:n,shortMonthsParse:n,weekdays:"domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),weekdaysShort:"dom._lun._mar._mié._jue._vie._sáb.".split("_"),weekdaysMin:"do_lu_ma_mi_ju_vi_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"MM/DD/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY h:mm A",LLLL:"dddd, D [de] MMMM [de] YYYY h:mm A"},calendar:{sameDay:function(){return"[hoy a la"+(1!==this.hours()?"s":"")+"] LT"},nextDay:function(){return"[mañana a la"+(1!==this.hours()?"s":"")+"] LT"},nextWeek:function(){return"dddd [a la"+(1!==this.hours()?"s":"")+"] LT"},lastDay:function(){return"[ayer a la"+(1!==this.hours()?"s":"")+"] LT"},lastWeek:function(){return"[el] dddd [pasado a la"+(1!==this.hours()?"s":"")+"] LT"},sameElse:"L"},relativeTime:{future:"en %s",past:"hace %s",s:"unos segundos",ss:"%d segundos",m:"un minuto",mm:"%d minutos",h:"una hora",hh:"%d horas",d:"un día",dd:"%d días",M:"un mes",MM:"%d meses",y:"un año",yy:"%d años"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:0,doy:6}})}(a(0))},function(e,t,a){!function(e){"use strict";function t(e,t,a,n){var i={s:["mõne sekundi","mõni sekund","paar sekundit"],ss:[e+"sekundi",e+"sekundit"],m:["ühe minuti","üks minut"],mm:[e+" minuti",e+" minutit"],h:["ühe tunni","tund aega","üks tund"],hh:[e+" tunni",e+" tundi"],d:["ühe päeva","üks päev"],M:["kuu aja","kuu aega","üks kuu"],MM:[e+" kuu",e+" kuud"],y:["ühe aasta","aasta","üks aasta"],yy:[e+" aasta",e+" aastat"]};return t?i[a][2]?i[a][2]:i[a][1]:n?i[a][0]:i[a][1]}e.defineLocale("et",{months:"jaanuar_veebruar_märts_aprill_mai_juuni_juuli_august_september_oktoober_november_detsember".split("_"),monthsShort:"jaan_veebr_märts_apr_mai_juuni_juuli_aug_sept_okt_nov_dets".split("_"),weekdays:"pühapäev_esmaspäev_teisipäev_kolmapäev_neljapäev_reede_laupäev".split("_"),weekdaysShort:"P_E_T_K_N_R_L".split("_"),weekdaysMin:"P_E_T_K_N_R_L".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[Täna,] LT",nextDay:"[Homme,] LT",nextWeek:"[Järgmine] dddd LT",lastDay:"[Eile,] LT",lastWeek:"[Eelmine] dddd LT",sameElse:"L"},relativeTime:{future:"%s pärast",past:"%s tagasi",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:"%d päeva",M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(a(0))},function(e,t,a){!function(e){"use strict";e.defineLocale("eu",{months:"urtarrila_otsaila_martxoa_apirila_maiatza_ekaina_uztaila_abuztua_iraila_urria_azaroa_abendua".split("_"),monthsShort:"urt._ots._mar._api._mai._eka._uzt._abu._ira._urr._aza._abe.".split("_"),monthsParseExact:!0,weekdays:"igandea_astelehena_asteartea_asteazkena_osteguna_ostirala_larunbata".split("_"),weekdaysShort:"ig._al._ar._az._og._ol._lr.".split("_"),weekdaysMin:"ig_al_ar_az_og_ol_lr".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"YYYY[ko] MMMM[ren] D[a]",LLL:"YYYY[ko] MMMM[ren] D[a] HH:mm",LLLL:"dddd, YYYY[ko] MMMM[ren] D[a] HH:mm",l:"YYYY-M-D",ll:"YYYY[ko] MMM D[a]",lll:"YYYY[ko] MMM D[a] HH:mm",llll:"ddd, YYYY[ko] MMM D[a] HH:mm"},calendar:{sameDay:"[gaur] LT[etan]",nextDay:"[bihar] LT[etan]",nextWeek:"dddd LT[etan]",lastDay:"[atzo] LT[etan]",lastWeek:"[aurreko] dddd LT[etan]",sameElse:"L"},relativeTime:{future:"%s barru",past:"duela %s",s:"segundo batzuk",ss:"%d segundo",m:"minutu bat",mm:"%d minutu",h:"ordu bat",hh:"%d ordu",d:"egun bat",dd:"%d egun",M:"hilabete bat",MM:"%d hilabete",y:"urte bat",yy:"%d urte"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(a(0))},function(e,t,a){!function(e){"use strict";var t={1:"۱",2:"۲",3:"۳",4:"۴",5:"۵",6:"۶",7:"۷",8:"۸",9:"۹",0:"۰"},a={"۱":"1","۲":"2","۳":"3","۴":"4","۵":"5","۶":"6","۷":"7","۸":"8","۹":"9","۰":"0"};e.defineLocale("fa",{months:"ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر".split("_"),monthsShort:"ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر".split("_"),weekdays:"یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_جمعه_شنبه".split("_"),weekdaysShort:"یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_جمعه_شنبه".split("_"),weekdaysMin:"ی_د_س_چ_پ_ج_ش".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},meridiemParse:/قبل از ظهر|بعد از ظهر/,isPM:function(e){return/بعد از ظهر/.test(e)},meridiem:function(e,t,a){return e<12?"قبل از ظهر":"بعد از ظهر"},calendar:{sameDay:"[امروز ساعت] LT",nextDay:"[فردا ساعت] LT",nextWeek:"dddd [ساعت] LT",lastDay:"[دیروز ساعت] LT",lastWeek:"dddd [پیش] [ساعت] LT",sameElse:"L"},relativeTime:{future:"در %s",past:"%s پیش",s:"چند ثانیه",ss:"ثانیه d%",m:"یک دقیقه",mm:"%d دقیقه",h:"یک ساعت",hh:"%d ساعت",d:"یک روز",dd:"%d روز",M:"یک ماه",MM:"%d ماه",y:"یک سال",yy:"%d سال"},preparse:function(e){return e.replace(/[۰-۹]/g,(function(e){return a[e]})).replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]})).replace(/,/g,"،")},dayOfMonthOrdinalParse:/\d{1,2}م/,ordinal:"%dم",week:{dow:6,doy:12}})}(a(0))},function(e,t,a){!function(e){"use strict";var t="nolla yksi kaksi kolme neljä viisi kuusi seitsemän kahdeksan yhdeksän".split(" "),a=["nolla","yhden","kahden","kolmen","neljän","viiden","kuuden",t[7],t[8],t[9]];function n(e,n,i,r){var s="";switch(i){case"s":return r?"muutaman sekunnin":"muutama sekunti";case"ss":return r?"sekunnin":"sekuntia";case"m":return r?"minuutin":"minuutti";case"mm":s=r?"minuutin":"minuuttia";break;case"h":return r?"tunnin":"tunti";case"hh":s=r?"tunnin":"tuntia";break;case"d":return r?"päivän":"päivä";case"dd":s=r?"päivän":"päivää";break;case"M":return r?"kuukauden":"kuukausi";case"MM":s=r?"kuukauden":"kuukautta";break;case"y":return r?"vuoden":"vuosi";case"yy":s=r?"vuoden":"vuotta"}return s=function(e,n){return e<10?n?a[e]:t[e]:e}(e,r)+" "+s}e.defineLocale("fi",{months:"tammikuu_helmikuu_maaliskuu_huhtikuu_toukokuu_kesäkuu_heinäkuu_elokuu_syyskuu_lokakuu_marraskuu_joulukuu".split("_"),monthsShort:"tammi_helmi_maalis_huhti_touko_kesä_heinä_elo_syys_loka_marras_joulu".split("_"),weekdays:"sunnuntai_maanantai_tiistai_keskiviikko_torstai_perjantai_lauantai".split("_"),weekdaysShort:"su_ma_ti_ke_to_pe_la".split("_"),weekdaysMin:"su_ma_ti_ke_to_pe_la".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD.MM.YYYY",LL:"Do MMMM[ta] YYYY",LLL:"Do MMMM[ta] YYYY, [klo] HH.mm",LLLL:"dddd, Do MMMM[ta] YYYY, [klo] HH.mm",l:"D.M.YYYY",ll:"Do MMM YYYY",lll:"Do MMM YYYY, [klo] HH.mm",llll:"ddd, Do MMM YYYY, [klo] HH.mm"},calendar:{sameDay:"[tänään] [klo] LT",nextDay:"[huomenna] [klo] LT",nextWeek:"dddd [klo] LT",lastDay:"[eilen] [klo] LT",lastWeek:"[viime] dddd[na] [klo] LT",sameElse:"L"},relativeTime:{future:"%s päästä",past:"%s sitten",s:n,ss:n,m:n,mm:n,h:n,hh:n,d:n,dd:n,M:n,MM:n,y:n,yy:n},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(a(0))},function(e,t,a){!function(e){"use strict";e.defineLocale("fo",{months:"januar_februar_mars_apríl_mai_juni_juli_august_september_oktober_november_desember".split("_"),monthsShort:"jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_"),weekdays:"sunnudagur_mánadagur_týsdagur_mikudagur_hósdagur_fríggjadagur_leygardagur".split("_"),weekdaysShort:"sun_mán_týs_mik_hós_frí_ley".split("_"),weekdaysMin:"su_má_tý_mi_hó_fr_le".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D. MMMM, YYYY HH:mm"},calendar:{sameDay:"[Í dag kl.] LT",nextDay:"[Í morgin kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[Í gjár kl.] LT",lastWeek:"[síðstu] dddd [kl] LT",sameElse:"L"},relativeTime:{future:"um %s",past:"%s síðani",s:"fá sekund",ss:"%d sekundir",m:"ein minuttur",mm:"%d minuttir",h:"ein tími",hh:"%d tímar",d:"ein dagur",dd:"%d dagar",M:"ein mánaður",MM:"%d mánaðir",y:"eitt ár",yy:"%d ár"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(a(0))},function(e,t,a){!function(e){"use strict";e.defineLocale("fr",{months:"janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),monthsShort:"janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),monthsParseExact:!0,weekdays:"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),weekdaysShort:"dim._lun._mar._mer._jeu._ven._sam.".split("_"),weekdaysMin:"di_lu_ma_me_je_ve_sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Aujourd’hui à] LT",nextDay:"[Demain à] LT",nextWeek:"dddd [à] LT",lastDay:"[Hier à] LT",lastWeek:"dddd [dernier à] LT",sameElse:"L"},relativeTime:{future:"dans %s",past:"il y a %s",s:"quelques secondes",ss:"%d secondes",m:"une minute",mm:"%d minutes",h:"une heure",hh:"%d heures",d:"un jour",dd:"%d jours",M:"un mois",MM:"%d mois",y:"un an",yy:"%d ans"},dayOfMonthOrdinalParse:/\d{1,2}(er|)/,ordinal:function(e,t){switch(t){case"D":return e+(1===e?"er":"");default:case"M":case"Q":case"DDD":case"d":return e+(1===e?"er":"e");case"w":case"W":return e+(1===e?"re":"e")}},week:{dow:1,doy:4}})}(a(0))},function(e,t,a){!function(e){"use strict";e.defineLocale("fr-ca",{months:"janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),monthsShort:"janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),monthsParseExact:!0,weekdays:"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),weekdaysShort:"dim._lun._mar._mer._jeu._ven._sam.".split("_"),weekdaysMin:"di_lu_ma_me_je_ve_sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Aujourd’hui à] LT",nextDay:"[Demain à] LT",nextWeek:"dddd [à] LT",lastDay:"[Hier à] LT",lastWeek:"dddd [dernier à] LT",sameElse:"L"},relativeTime:{future:"dans %s",past:"il y a %s",s:"quelques secondes",ss:"%d secondes",m:"une minute",mm:"%d minutes",h:"une heure",hh:"%d heures",d:"un jour",dd:"%d jours",M:"un mois",MM:"%d mois",y:"un an",yy:"%d ans"},dayOfMonthOrdinalParse:/\d{1,2}(er|e)/,ordinal:function(e,t){switch(t){default:case"M":case"Q":case"D":case"DDD":case"d":return e+(1===e?"er":"e");case"w":case"W":return e+(1===e?"re":"e")}}})}(a(0))},function(e,t,a){!function(e){"use strict";e.defineLocale("fr-ch",{months:"janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),monthsShort:"janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),monthsParseExact:!0,weekdays:"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),weekdaysShort:"dim._lun._mar._mer._jeu._ven._sam.".split("_"),weekdaysMin:"di_lu_ma_me_je_ve_sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Aujourd’hui à] LT",nextDay:"[Demain à] LT",nextWeek:"dddd [à] LT",lastDay:"[Hier à] LT",lastWeek:"dddd [dernier à] LT",sameElse:"L"},relativeTime:{future:"dans %s",past:"il y a %s",s:"quelques secondes",ss:"%d secondes",m:"une minute",mm:"%d minutes",h:"une heure",hh:"%d heures",d:"un jour",dd:"%d jours",M:"un mois",MM:"%d mois",y:"un an",yy:"%d ans"},dayOfMonthOrdinalParse:/\d{1,2}(er|e)/,ordinal:function(e,t){switch(t){default:case"M":case"Q":case"D":case"DDD":case"d":return e+(1===e?"er":"e");case"w":case"W":return e+(1===e?"re":"e")}},week:{dow:1,doy:4}})}(a(0))},function(e,t,a){!function(e){"use strict";var t="jan._feb._mrt._apr._mai_jun._jul._aug._sep._okt._nov._des.".split("_"),a="jan_feb_mrt_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_");e.defineLocale("fy",{months:"jannewaris_febrewaris_maart_april_maaie_juny_july_augustus_septimber_oktober_novimber_desimber".split("_"),monthsShort:function(e,n){return e?/-MMM-/.test(n)?a[e.month()]:t[e.month()]:t},monthsParseExact:!0,weekdays:"snein_moandei_tiisdei_woansdei_tongersdei_freed_sneon".split("_"),weekdaysShort:"si._mo._ti._wo._to._fr._so.".split("_"),weekdaysMin:"Si_Mo_Ti_Wo_To_Fr_So".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[hjoed om] LT",nextDay:"[moarn om] LT",nextWeek:"dddd [om] LT",lastDay:"[juster om] LT",lastWeek:"[ôfrûne] dddd [om] LT",sameElse:"L"},relativeTime:{future:"oer %s",past:"%s lyn",s:"in pear sekonden",ss:"%d sekonden",m:"ien minút",mm:"%d minuten",h:"ien oere",hh:"%d oeren",d:"ien dei",dd:"%d dagen",M:"ien moanne",MM:"%d moannen",y:"ien jier",yy:"%d jierren"},dayOfMonthOrdinalParse:/\d{1,2}(ste|de)/,ordinal:function(e){return e+(1===e||8===e||e>=20?"ste":"de")},week:{dow:1,doy:4}})}(a(0))},function(e,t,a){!function(e){"use strict";e.defineLocale("ga",{months:["Eanáir","Feabhra","Márta","Aibreán","Bealtaine","Méitheamh","Iúil","Lúnasa","Meán Fómhair","Deaireadh Fómhair","Samhain","Nollaig"],monthsShort:["Eaná","Feab","Márt","Aibr","Beal","Méit","Iúil","Lúna","Meán","Deai","Samh","Noll"],monthsParseExact:!0,weekdays:["Dé Domhnaigh","Dé Luain","Dé Máirt","Dé Céadaoin","Déardaoin","Dé hAoine","Dé Satharn"],weekdaysShort:["Dom","Lua","Mái","Céa","Déa","hAo","Sat"],weekdaysMin:["Do","Lu","Má","Ce","Dé","hA","Sa"],longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Inniu ag] LT",nextDay:"[Amárach ag] LT",nextWeek:"dddd [ag] LT",lastDay:"[Inné aig] LT",lastWeek:"dddd [seo caite] [ag] LT",sameElse:"L"},relativeTime:{future:"i %s",past:"%s ó shin",s:"cúpla soicind",ss:"%d soicind",m:"nóiméad",mm:"%d nóiméad",h:"uair an chloig",hh:"%d uair an chloig",d:"lá",dd:"%d lá",M:"mí",MM:"%d mí",y:"bliain",yy:"%d bliain"},dayOfMonthOrdinalParse:/\d{1,2}(d|na|mh)/,ordinal:function(e){return e+(1===e?"d":e%10===2?"na":"mh")},week:{dow:1,doy:4}})}(a(0))},function(e,t,a){!function(e){"use strict";e.defineLocale("gd",{months:["Am Faoilleach","An Gearran","Am Màrt","An Giblean","An Cèitean","An t-Ògmhios","An t-Iuchar","An Lùnastal","An t-Sultain","An Dàmhair","An t-Samhain","An Dùbhlachd"],monthsShort:["Faoi","Gear","Màrt","Gibl","Cèit","Ògmh","Iuch","Lùn","Sult","Dàmh","Samh","Dùbh"],monthsParseExact:!0,weekdays:["Didòmhnaich","Diluain","Dimàirt","Diciadain","Diardaoin","Dihaoine","Disathairne"],weekdaysShort:["Did","Dil","Dim","Dic","Dia","Dih","Dis"],weekdaysMin:["Dò","Lu","Mà","Ci","Ar","Ha","Sa"],longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[An-diugh aig] LT",nextDay:"[A-màireach aig] LT",nextWeek:"dddd [aig] LT",lastDay:"[An-dè aig] LT",lastWeek:"dddd [seo chaidh] [aig] LT",sameElse:"L"},relativeTime:{future:"ann an %s",past:"bho chionn %s",s:"beagan diogan",ss:"%d diogan",m:"mionaid",mm:"%d mionaidean",h:"uair",hh:"%d uairean",d:"latha",dd:"%d latha",M:"mìos",MM:"%d mìosan",y:"bliadhna",yy:"%d bliadhna"},dayOfMonthOrdinalParse:/\d{1,2}(d|na|mh)/,ordinal:function(e){return e+(1===e?"d":e%10===2?"na":"mh")},week:{dow:1,doy:4}})}(a(0))},function(e,t,a){!function(e){"use strict";e.defineLocale("gl",{months:"xaneiro_febreiro_marzo_abril_maio_xuño_xullo_agosto_setembro_outubro_novembro_decembro".split("_"),monthsShort:"xan._feb._mar._abr._mai._xuñ._xul._ago._set._out._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"domingo_luns_martes_mércores_xoves_venres_sábado".split("_"),weekdaysShort:"dom._lun._mar._mér._xov._ven._sáb.".split("_"),weekdaysMin:"do_lu_ma_mé_xo_ve_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY H:mm",LLLL:"dddd, D [de] MMMM [de] YYYY H:mm"},calendar:{sameDay:function(){return"[hoxe "+(1!==this.hours()?"ás":"á")+"] LT"},nextDay:function(){return"[mañá "+(1!==this.hours()?"ás":"á")+"] LT"},nextWeek:function(){return"dddd ["+(1!==this.hours()?"ás":"a")+"] LT"},lastDay:function(){return"[onte "+(1!==this.hours()?"á":"a")+"] LT"},lastWeek:function(){return"[o] dddd [pasado "+(1!==this.hours()?"ás":"a")+"] LT"},sameElse:"L"},relativeTime:{future:function(e){return 0===e.indexOf("un")?"n"+e:"en "+e},past:"hai %s",s:"uns segundos",ss:"%d segundos",m:"un minuto",mm:"%d minutos",h:"unha hora",hh:"%d horas",d:"un día",dd:"%d días",M:"un mes",MM:"%d meses",y:"un ano",yy:"%d anos"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(a(0))},function(e,t,a){!function(e){"use strict";function t(e,t,a,n){var i={s:["thodde secondanim","thodde second"],ss:[e+" secondanim",e+" second"],m:["eka mintan","ek minute"],mm:[e+" mintanim",e+" mintam"],h:["eka voran","ek vor"],hh:[e+" voranim",e+" voram"],d:["eka disan","ek dis"],dd:[e+" disanim",e+" dis"],M:["eka mhoinean","ek mhoino"],MM:[e+" mhoineanim",e+" mhoine"],y:["eka vorsan","ek voros"],yy:[e+" vorsanim",e+" vorsam"]};return t?i[a][0]:i[a][1]}e.defineLocale("gom-latn",{months:"Janer_Febrer_Mars_Abril_Mai_Jun_Julai_Agost_Setembr_Otubr_Novembr_Dezembr".split("_"),monthsShort:"Jan._Feb._Mars_Abr._Mai_Jun_Jul._Ago._Set._Otu._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Aitar_Somar_Mongllar_Budvar_Brestar_Sukrar_Son'var".split("_"),weekdaysShort:"Ait._Som._Mon._Bud._Bre._Suk._Son.".split("_"),weekdaysMin:"Ai_Sm_Mo_Bu_Br_Su_Sn".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"A h:mm [vazta]",LTS:"A h:mm:ss [vazta]",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY A h:mm [vazta]",LLLL:"dddd, MMMM[achea] Do, YYYY, A h:mm [vazta]",llll:"ddd, D MMM YYYY, A h:mm [vazta]"},calendar:{sameDay:"[Aiz] LT",nextDay:"[Faleam] LT",nextWeek:"[Ieta to] dddd[,] LT",lastDay:"[Kal] LT",lastWeek:"[Fatlo] dddd[,] LT",sameElse:"L"},relativeTime:{future:"%s",past:"%s adim",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}(er)/,ordinal:function(e,t){switch(t){case"D":return e+"er";default:case"M":case"Q":case"DDD":case"d":case"w":case"W":return e}},week:{dow:1,doy:4},meridiemParse:/rati|sokalli|donparam|sanje/,meridiemHour:function(e,t){return 12===e&&(e=0),"rati"===t?e<4?e:e+12:"sokalli"===t?e:"donparam"===t?e>12?e:e+12:"sanje"===t?e+12:void 0},meridiem:function(e,t,a){return e<4?"rati":e<12?"sokalli":e<16?"donparam":e<20?"sanje":"rati"}})}(a(0))},function(e,t,a){!function(e){"use strict";var t={1:"૧",2:"૨",3:"૩",4:"૪",5:"૫",6:"૬",7:"૭",8:"૮",9:"૯",0:"૦"},a={"૧":"1","૨":"2","૩":"3","૪":"4","૫":"5","૬":"6","૭":"7","૮":"8","૯":"9","૦":"0"};e.defineLocale("gu",{months:"જાન્યુઆરી_ફેબ્રુઆરી_માર્ચ_એપ્રિલ_મે_જૂન_જુલાઈ_ઑગસ્ટ_સપ્ટેમ્બર_ઑક્ટ્બર_નવેમ્બર_ડિસેમ્બર".split("_"),monthsShort:"જાન્યુ._ફેબ્રુ._માર્ચ_એપ્રિ._મે_જૂન_જુલા._ઑગ._સપ્ટે._ઑક્ટ્._નવે._ડિસે.".split("_"),monthsParseExact:!0,weekdays:"રવિવાર_સોમવાર_મંગળવાર_બુધ્વાર_ગુરુવાર_શુક્રવાર_શનિવાર".split("_"),weekdaysShort:"રવિ_સોમ_મંગળ_બુધ્_ગુરુ_શુક્ર_શનિ".split("_"),weekdaysMin:"ર_સો_મં_બુ_ગુ_શુ_શ".split("_"),longDateFormat:{LT:"A h:mm વાગ્યે",LTS:"A h:mm:ss વાગ્યે",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm વાગ્યે",LLLL:"dddd, D MMMM YYYY, A h:mm વાગ્યે"},calendar:{sameDay:"[આજ] LT",nextDay:"[કાલે] LT",nextWeek:"dddd, LT",lastDay:"[ગઇકાલે] LT",lastWeek:"[પાછલા] dddd, LT",sameElse:"L"},relativeTime:{future:"%s મા",past:"%s પેહલા",s:"અમુક પળો",ss:"%d સેકંડ",m:"એક મિનિટ",mm:"%d મિનિટ",h:"એક કલાક",hh:"%d કલાક",d:"એક દિવસ",dd:"%d દિવસ",M:"એક મહિનો",MM:"%d મહિનો",y:"એક વર્ષ",yy:"%d વર્ષ"},preparse:function(e){return e.replace(/[૧૨૩૪૫૬૭૮૯૦]/g,(function(e){return a[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/રાત|બપોર|સવાર|સાંજ/,meridiemHour:function(e,t){return 12===e&&(e=0),"રાત"===t?e<4?e:e+12:"સવાર"===t?e:"બપોર"===t?e>=10?e:e+12:"સાંજ"===t?e+12:void 0},meridiem:function(e,t,a){return e<4?"રાત":e<10?"સવાર":e<17?"બપોર":e<20?"સાંજ":"રાત"},week:{dow:0,doy:6}})}(a(0))},function(e,t,a){!function(e){"use strict";e.defineLocale("he",{months:"ינואר_פברואר_מרץ_אפריל_מאי_יוני_יולי_אוגוסט_ספטמבר_אוקטובר_נובמבר_דצמבר".split("_"),monthsShort:"ינו׳_פבר׳_מרץ_אפר׳_מאי_יוני_יולי_אוג׳_ספט׳_אוק׳_נוב׳_דצמ׳".split("_"),weekdays:"ראשון_שני_שלישי_רביעי_חמישי_שישי_שבת".split("_"),weekdaysShort:"א׳_ב׳_ג׳_ד׳_ה׳_ו׳_ש׳".split("_"),weekdaysMin:"א_ב_ג_ד_ה_ו_ש".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D [ב]MMMM YYYY",LLL:"D [ב]MMMM YYYY HH:mm",LLLL:"dddd, D [ב]MMMM YYYY HH:mm",l:"D/M/YYYY",ll:"D MMM YYYY",lll:"D MMM YYYY HH:mm",llll:"ddd, D MMM YYYY HH:mm"},calendar:{sameDay:"[היום ב־]LT",nextDay:"[מחר ב־]LT",nextWeek:"dddd [בשעה] LT",lastDay:"[אתמול ב־]LT",lastWeek:"[ביום] dddd [האחרון בשעה] LT",sameElse:"L"},relativeTime:{future:"בעוד %s",past:"לפני %s",s:"מספר שניות",ss:"%d שניות",m:"דקה",mm:"%d דקות",h:"שעה",hh:function(e){return 2===e?"שעתיים":e+" שעות"},d:"יום",dd:function(e){return 2===e?"יומיים":e+" ימים"},M:"חודש",MM:function(e){return 2===e?"חודשיים":e+" חודשים"},y:"שנה",yy:function(e){return 2===e?"שנתיים":e%10===0&&10!==e?e+" שנה":e+" שנים"}},meridiemParse:/אחה"צ|לפנה"צ|אחרי הצהריים|לפני הצהריים|לפנות בוקר|בבוקר|בערב/i,isPM:function(e){return/^(אחה"צ|אחרי הצהריים|בערב)$/.test(e)},meridiem:function(e,t,a){return e<5?"לפנות בוקר":e<10?"בבוקר":e<12?a?'לפנה"צ':"לפני הצהריים":e<18?a?'אחה"צ':"אחרי הצהריים":"בערב"}})}(a(0))},function(e,t,a){!function(e){"use strict";var t={1:"१",2:"२",3:"३",4:"४",5:"५",6:"६",7:"७",8:"८",9:"९",0:"०"},a={"१":"1","२":"2","३":"3","४":"4","५":"5","६":"6","७":"7","८":"8","९":"9","०":"0"};e.defineLocale("hi",{months:"जनवरी_फ़रवरी_मार्च_अप्रैल_मई_जून_जुलाई_अगस्त_सितम्बर_अक्टूबर_नवम्बर_दिसम्बर".split("_"),monthsShort:"जन._फ़र._मार्च_अप्रै._मई_जून_जुल._अग._सित._अक्टू._नव._दिस.".split("_"),monthsParseExact:!0,weekdays:"रविवार_सोमवार_मंगलवार_बुधवार_गुरूवार_शुक्रवार_शनिवार".split("_"),weekdaysShort:"रवि_सोम_मंगल_बुध_गुरू_शुक्र_शनि".split("_"),weekdaysMin:"र_सो_मं_बु_गु_शु_श".split("_"),longDateFormat:{LT:"A h:mm बजे",LTS:"A h:mm:ss बजे",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm बजे",LLLL:"dddd, D MMMM YYYY, A h:mm बजे"},calendar:{sameDay:"[आज] LT",nextDay:"[कल] LT",nextWeek:"dddd, LT",lastDay:"[कल] LT",lastWeek:"[पिछले] dddd, LT",sameElse:"L"},relativeTime:{future:"%s में",past:"%s पहले",s:"कुछ ही क्षण",ss:"%d सेकंड",m:"एक मिनट",mm:"%d मिनट",h:"एक घंटा",hh:"%d घंटे",d:"एक दिन",dd:"%d दिन",M:"एक महीने",MM:"%d महीने",y:"एक वर्ष",yy:"%d वर्ष"},preparse:function(e){return e.replace(/[१२३४५६७८९०]/g,(function(e){return a[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/रात|सुबह|दोपहर|शाम/,meridiemHour:function(e,t){return 12===e&&(e=0),"रात"===t?e<4?e:e+12:"सुबह"===t?e:"दोपहर"===t?e>=10?e:e+12:"शाम"===t?e+12:void 0},meridiem:function(e,t,a){return e<4?"रात":e<10?"सुबह":e<17?"दोपहर":e<20?"शाम":"रात"},week:{dow:0,doy:6}})}(a(0))},function(e,t,a){!function(e){"use strict";function t(e,t,a){var n=e+" ";switch(a){case"ss":return n+=1===e?"sekunda":2===e||3===e||4===e?"sekunde":"sekundi";case"m":return t?"jedna minuta":"jedne minute";case"mm":return n+=1===e?"minuta":2===e||3===e||4===e?"minute":"minuta";case"h":return t?"jedan sat":"jednog sata";case"hh":return n+=1===e?"sat":2===e||3===e||4===e?"sata":"sati";case"dd":return n+=1===e?"dan":"dana";case"MM":return n+=1===e?"mjesec":2===e||3===e||4===e?"mjeseca":"mjeseci";case"yy":return n+=1===e?"godina":2===e||3===e||4===e?"godine":"godina"}}e.defineLocale("hr",{months:{format:"siječnja_veljače_ožujka_travnja_svibnja_lipnja_srpnja_kolovoza_rujna_listopada_studenoga_prosinca".split("_"),standalone:"siječanj_veljača_ožujak_travanj_svibanj_lipanj_srpanj_kolovoz_rujan_listopad_studeni_prosinac".split("_")},monthsShort:"sij._velj._ožu._tra._svi._lip._srp._kol._ruj._lis._stu._pro.".split("_"),monthsParseExact:!0,weekdays:"nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sri._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedjelju] [u] LT";case 3:return"[u] [srijedu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[jučer u] LT",lastWeek:function(){switch(this.day()){case 0:case 3:return"[prošlu] dddd [u] LT";case 6:return"[prošle] [subote] [u] LT";case 1:case 2:case 4:case 5:return"[prošli] dddd [u] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"prije %s",s:"par sekundi",ss:t,m:t,mm:t,h:t,hh:t,d:"dan",dd:t,M:"mjesec",MM:t,y:"godinu",yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(a(0))},function(e,t,a){!function(e){"use strict";var t="vasárnap hétfőn kedden szerdán csütörtökön pénteken szombaton".split(" ");function a(e,t,a,n){var i=e;switch(a){case"s":return n||t?"néhány másodperc":"néhány másodperce";case"ss":return i+(n||t)?" másodperc":" másodperce";case"m":return"egy"+(n||t?" perc":" perce");case"mm":return i+(n||t?" perc":" perce");case"h":return"egy"+(n||t?" óra":" órája");case"hh":return i+(n||t?" óra":" órája");case"d":return"egy"+(n||t?" nap":" napja");case"dd":return i+(n||t?" nap":" napja");case"M":return"egy"+(n||t?" hónap":" hónapja");case"MM":return i+(n||t?" hónap":" hónapja");case"y":return"egy"+(n||t?" év":" éve");case"yy":return i+(n||t?" év":" éve")}return""}function n(e){return(e?"":"[múlt] ")+"["+t[this.day()]+"] LT[-kor]"}e.defineLocale("hu",{months:"január_február_március_április_május_június_július_augusztus_szeptember_október_november_december".split("_"),monthsShort:"jan_feb_márc_ápr_máj_jún_júl_aug_szept_okt_nov_dec".split("_"),weekdays:"vasárnap_hétfő_kedd_szerda_csütörtök_péntek_szombat".split("_"),weekdaysShort:"vas_hét_kedd_sze_csüt_pén_szo".split("_"),weekdaysMin:"v_h_k_sze_cs_p_szo".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"YYYY.MM.DD.",LL:"YYYY. MMMM D.",LLL:"YYYY. MMMM D. H:mm",LLLL:"YYYY. MMMM D., dddd H:mm"},meridiemParse:/de|du/i,isPM:function(e){return"u"===e.charAt(1).toLowerCase()},meridiem:function(e,t,a){return e<12?!0===a?"de":"DE":!0===a?"du":"DU"},calendar:{sameDay:"[ma] LT[-kor]",nextDay:"[holnap] LT[-kor]",nextWeek:function(){return n.call(this,!0)},lastDay:"[tegnap] LT[-kor]",lastWeek:function(){return n.call(this,!1)},sameElse:"L"},relativeTime:{future:"%s múlva",past:"%s",s:a,ss:a,m:a,mm:a,h:a,hh:a,d:a,dd:a,M:a,MM:a,y:a,yy:a},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(a(0))},function(e,t,a){!function(e){"use strict";e.defineLocale("hy-am",{months:{format:"հունվարի_փետրվարի_մարտի_ապրիլի_մայիսի_հունիսի_հուլիսի_օգոստոսի_սեպտեմբերի_հոկտեմբերի_նոյեմբերի_դեկտեմբերի".split("_"),standalone:"հունվար_փետրվար_մարտ_ապրիլ_մայիս_հունիս_հուլիս_օգոստոս_սեպտեմբեր_հոկտեմբեր_նոյեմբեր_դեկտեմբեր".split("_")},monthsShort:"հնվ_փտր_մրտ_ապր_մյս_հնս_հլս_օգս_սպտ_հկտ_նմբ_դկտ".split("_"),weekdays:"կիրակի_երկուշաբթի_երեքշաբթի_չորեքշաբթի_հինգշաբթի_ուրբաթ_շաբաթ".split("_"),weekdaysShort:"կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ".split("_"),weekdaysMin:"կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY թ.",LLL:"D MMMM YYYY թ., HH:mm",LLLL:"dddd, D MMMM YYYY թ., HH:mm"},calendar:{sameDay:"[այսօր] LT",nextDay:"[վաղը] LT",lastDay:"[երեկ] LT",nextWeek:function(){return"dddd [օրը ժամը] LT"},lastWeek:function(){return"[անցած] dddd [օրը ժամը] LT"},sameElse:"L"},relativeTime:{future:"%s հետո",past:"%s առաջ",s:"մի քանի վայրկյան",ss:"%d վայրկյան",m:"րոպե",mm:"%d րոպե",h:"ժամ",hh:"%d ժամ",d:"օր",dd:"%d օր",M:"ամիս",MM:"%d ամիս",y:"տարի",yy:"%d տարի"},meridiemParse:/գիշերվա|առավոտվա|ցերեկվա|երեկոյան/,isPM:function(e){return/^(ցերեկվա|երեկոյան)$/.test(e)},meridiem:function(e){return e<4?"գիշերվա":e<12?"առավոտվա":e<17?"ցերեկվա":"երեկոյան"},dayOfMonthOrdinalParse:/\d{1,2}|\d{1,2}-(ին|րդ)/,ordinal:function(e,t){switch(t){case"DDD":case"w":case"W":case"DDDo":return 1===e?e+"-ին":e+"-րդ";default:return e}},week:{dow:1,doy:7}})}(a(0))},function(e,t,a){!function(e){"use strict";e.defineLocale("id",{months:"Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_November_Desember".split("_"),monthsShort:"Jan_Feb_Mar_Apr_Mei_Jun_Jul_Agt_Sep_Okt_Nov_Des".split("_"),weekdays:"Minggu_Senin_Selasa_Rabu_Kamis_Jumat_Sabtu".split("_"),weekdaysShort:"Min_Sen_Sel_Rab_Kam_Jum_Sab".split("_"),weekdaysMin:"Mg_Sn_Sl_Rb_Km_Jm_Sb".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/pagi|siang|sore|malam/,meridiemHour:function(e,t){return 12===e&&(e=0),"pagi"===t?e:"siang"===t?e>=11?e:e+12:"sore"===t||"malam"===t?e+12:void 0},meridiem:function(e,t,a){return e<11?"pagi":e<15?"siang":e<19?"sore":"malam"},calendar:{sameDay:"[Hari ini pukul] LT",nextDay:"[Besok pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kemarin pukul] LT",lastWeek:"dddd [lalu pukul] LT",sameElse:"L"},relativeTime:{future:"dalam %s",past:"%s yang lalu",s:"beberapa detik",ss:"%d detik",m:"semenit",mm:"%d menit",h:"sejam",hh:"%d jam",d:"sehari",dd:"%d hari",M:"sebulan",MM:"%d bulan",y:"setahun",yy:"%d tahun"},week:{dow:1,doy:7}})}(a(0))},function(e,t,a){!function(e){"use strict";function t(e){return e%100===11||e%10!==1}function a(e,a,n,i){var r=e+" ";switch(n){case"s":return a||i?"nokkrar sekúndur":"nokkrum sekúndum";case"ss":return t(e)?r+(a||i?"sekúndur":"sekúndum"):r+"sekúnda";case"m":return a?"mínúta":"mínútu";case"mm":return t(e)?r+(a||i?"mínútur":"mínútum"):a?r+"mínúta":r+"mínútu";case"hh":return t(e)?r+(a||i?"klukkustundir":"klukkustundum"):r+"klukkustund";case"d":return a?"dagur":i?"dag":"degi";case"dd":return t(e)?a?r+"dagar":r+(i?"daga":"dögum"):a?r+"dagur":r+(i?"dag":"degi");case"M":return a?"mánuður":i?"mánuð":"mánuði";case"MM":return t(e)?a?r+"mánuðir":r+(i?"mánuði":"mánuðum"):a?r+"mánuður":r+(i?"mánuð":"mánuði");case"y":return a||i?"ár":"ári";case"yy":return t(e)?r+(a||i?"ár":"árum"):r+(a||i?"ár":"ári")}}e.defineLocale("is",{months:"janúar_febrúar_mars_apríl_maí_júní_júlí_ágúst_september_október_nóvember_desember".split("_"),monthsShort:"jan_feb_mar_apr_maí_jún_júl_ágú_sep_okt_nóv_des".split("_"),weekdays:"sunnudagur_mánudagur_þriðjudagur_miðvikudagur_fimmtudagur_föstudagur_laugardagur".split("_"),weekdaysShort:"sun_mán_þri_mið_fim_fös_lau".split("_"),weekdaysMin:"Su_Má_Þr_Mi_Fi_Fö_La".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY [kl.] H:mm",LLLL:"dddd, D. MMMM YYYY [kl.] H:mm"},calendar:{sameDay:"[í dag kl.] LT",nextDay:"[á morgun kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[í gær kl.] LT",lastWeek:"[síðasta] dddd [kl.] LT",sameElse:"L"},relativeTime:{future:"eftir %s",past:"fyrir %s síðan",s:a,ss:a,m:a,mm:a,h:"klukkustund",hh:a,d:a,dd:a,M:a,MM:a,y:a,yy:a},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(a(0))},function(e,t,a){!function(e){"use strict";e.defineLocale("it",{months:"gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre".split("_"),monthsShort:"gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic".split("_"),weekdays:"domenica_lunedì_martedì_mercoledì_giovedì_venerdì_sabato".split("_"),weekdaysShort:"dom_lun_mar_mer_gio_ven_sab".split("_"),weekdaysMin:"do_lu_ma_me_gi_ve_sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Oggi alle] LT",nextDay:"[Domani alle] LT",nextWeek:"dddd [alle] LT",lastDay:"[Ieri alle] LT",lastWeek:function(){switch(this.day()){case 0:return"[la scorsa] dddd [alle] LT";default:return"[lo scorso] dddd [alle] LT"}},sameElse:"L"},relativeTime:{future:function(e){return(/^[0-9].+$/.test(e)?"tra":"in")+" "+e},past:"%s fa",s:"alcuni secondi",ss:"%d secondi",m:"un minuto",mm:"%d minuti",h:"un'ora",hh:"%d ore",d:"un giorno",dd:"%d giorni",M:"un mese",MM:"%d mesi",y:"un anno",yy:"%d anni"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(a(0))},function(e,t,a){!function(e){"use strict";e.defineLocale("it-ch",{months:"gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre".split("_"),monthsShort:"gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic".split("_"),weekdays:"domenica_lunedì_martedì_mercoledì_giovedì_venerdì_sabato".split("_"),weekdaysShort:"dom_lun_mar_mer_gio_ven_sab".split("_"),weekdaysMin:"do_lu_ma_me_gi_ve_sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Oggi alle] LT",nextDay:"[Domani alle] LT",nextWeek:"dddd [alle] LT",lastDay:"[Ieri alle] LT",lastWeek:function(){switch(this.day()){case 0:return"[la scorsa] dddd [alle] LT";default:return"[lo scorso] dddd [alle] LT"}},sameElse:"L"},relativeTime:{future:function(e){return(/^[0-9].+$/.test(e)?"tra":"in")+" "+e},past:"%s fa",s:"alcuni secondi",ss:"%d secondi",m:"un minuto",mm:"%d minuti",h:"un'ora",hh:"%d ore",d:"un giorno",dd:"%d giorni",M:"un mese",MM:"%d mesi",y:"un anno",yy:"%d anni"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(a(0))},function(e,t,a){!function(e){"use strict";e.defineLocale("ja",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"日曜日_月曜日_火曜日_水曜日_木曜日_金曜日_土曜日".split("_"),weekdaysShort:"日_月_火_水_木_金_土".split("_"),weekdaysMin:"日_月_火_水_木_金_土".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY/MM/DD",LL:"YYYY年M月D日",LLL:"YYYY年M月D日 HH:mm",LLLL:"YYYY年M月D日 dddd HH:mm",l:"YYYY/MM/DD",ll:"YYYY年M月D日",lll:"YYYY年M月D日 HH:mm",llll:"YYYY年M月D日(ddd) HH:mm"},meridiemParse:/午前|午後/i,isPM:function(e){return"午後"===e},meridiem:function(e,t,a){return e<12?"午前":"午後"},calendar:{sameDay:"[今日] LT",nextDay:"[明日] LT",nextWeek:function(e){return e.week()<this.week()?"[来週]dddd LT":"dddd LT"},lastDay:"[昨日] LT",lastWeek:function(e){return this.week()<e.week()?"[先週]dddd LT":"dddd LT"},sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}日/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"日";default:return e}},relativeTime:{future:"%s後",past:"%s前",s:"数秒",ss:"%d秒",m:"1分",mm:"%d分",h:"1時間",hh:"%d時間",d:"1日",dd:"%d日",M:"1ヶ月",MM:"%dヶ月",y:"1年",yy:"%d年"}})}(a(0))},function(e,t,a){!function(e){"use strict";e.defineLocale("jv",{months:"Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_Nopember_Desember".split("_"),monthsShort:"Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nop_Des".split("_"),weekdays:"Minggu_Senen_Seloso_Rebu_Kemis_Jemuwah_Septu".split("_"),weekdaysShort:"Min_Sen_Sel_Reb_Kem_Jem_Sep".split("_"),weekdaysMin:"Mg_Sn_Sl_Rb_Km_Jm_Sp".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/enjing|siyang|sonten|ndalu/,meridiemHour:function(e,t){return 12===e&&(e=0),"enjing"===t?e:"siyang"===t?e>=11?e:e+12:"sonten"===t||"ndalu"===t?e+12:void 0},meridiem:function(e,t,a){return e<11?"enjing":e<15?"siyang":e<19?"sonten":"ndalu"},calendar:{sameDay:"[Dinten puniko pukul] LT",nextDay:"[Mbenjang pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kala wingi pukul] LT",lastWeek:"dddd [kepengker pukul] LT",sameElse:"L"},relativeTime:{future:"wonten ing %s",past:"%s ingkang kepengker",s:"sawetawis detik",ss:"%d detik",m:"setunggal menit",mm:"%d menit",h:"setunggal jam",hh:"%d jam",d:"sedinten",dd:"%d dinten",M:"sewulan",MM:"%d wulan",y:"setaun",yy:"%d taun"},week:{dow:1,doy:7}})}(a(0))},function(e,t,a){!function(e){"use strict";e.defineLocale("ka",{months:{standalone:"იანვარი_თებერვალი_მარტი_აპრილი_მაისი_ივნისი_ივლისი_აგვისტო_სექტემბერი_ოქტომბერი_ნოემბერი_დეკემბერი".split("_"),format:"იანვარს_თებერვალს_მარტს_აპრილის_მაისს_ივნისს_ივლისს_აგვისტს_სექტემბერს_ოქტომბერს_ნოემბერს_დეკემბერს".split("_")},monthsShort:"იან_თებ_მარ_აპრ_მაი_ივნ_ივლ_აგვ_სექ_ოქტ_ნოე_დეკ".split("_"),weekdays:{standalone:"კვირა_ორშაბათი_სამშაბათი_ოთხშაბათი_ხუთშაბათი_პარასკევი_შაბათი".split("_"),format:"კვირას_ორშაბათს_სამშაბათს_ოთხშაბათს_ხუთშაბათს_პარასკევს_შაბათს".split("_"),isFormat:/(წინა|შემდეგ)/},weekdaysShort:"კვი_ორშ_სამ_ოთხ_ხუთ_პარ_შაბ".split("_"),weekdaysMin:"კვ_ორ_სა_ოთ_ხუ_პა_შა".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[დღეს] LT[-ზე]",nextDay:"[ხვალ] LT[-ზე]",lastDay:"[გუშინ] LT[-ზე]",nextWeek:"[შემდეგ] dddd LT[-ზე]",lastWeek:"[წინა] dddd LT-ზე",sameElse:"L"},relativeTime:{future:function(e){return/(წამი|წუთი|საათი|წელი)/.test(e)?e.replace(/ი$/,"ში"):e+"ში"},past:function(e){return/(წამი|წუთი|საათი|დღე|თვე)/.test(e)?e.replace(/(ი|ე)$/,"ის წინ"):/წელი/.test(e)?e.replace(/წელი$/,"წლის წინ"):void 0},s:"რამდენიმე წამი",ss:"%d წამი",m:"წუთი",mm:"%d წუთი",h:"საათი",hh:"%d საათი",d:"დღე",dd:"%d დღე",M:"თვე",MM:"%d თვე",y:"წელი",yy:"%d წელი"},dayOfMonthOrdinalParse:/0|1-ლი|მე-\d{1,2}|\d{1,2}-ე/,ordinal:function(e){return 0===e?e:1===e?e+"-ლი":e<20||e<=100&&e%20===0||e%100===0?"მე-"+e:e+"-ე"},week:{dow:1,doy:7}})}(a(0))},function(e,t,a){!function(e){"use strict";var t={0:"-ші",1:"-ші",2:"-ші",3:"-ші",4:"-ші",5:"-ші",6:"-шы",7:"-ші",8:"-ші",9:"-шы",10:"-шы",20:"-шы",30:"-шы",40:"-шы",50:"-ші",60:"-шы",70:"-ші",80:"-ші",90:"-шы",100:"-ші"};e.defineLocale("kk",{months:"қаңтар_ақпан_наурыз_сәуір_мамыр_маусым_шілде_тамыз_қыркүйек_қазан_қараша_желтоқсан".split("_"),monthsShort:"қаң_ақп_нау_сәу_мам_мау_шіл_там_қыр_қаз_қар_жел".split("_"),weekdays:"жексенбі_дүйсенбі_сейсенбі_сәрсенбі_бейсенбі_жұма_сенбі".split("_"),weekdaysShort:"жек_дүй_сей_сәр_бей_жұм_сен".split("_"),weekdaysMin:"жк_дй_сй_ср_бй_жм_сн".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Бүгін сағат] LT",nextDay:"[Ертең сағат] LT",nextWeek:"dddd [сағат] LT",lastDay:"[Кеше сағат] LT",lastWeek:"[Өткен аптаның] dddd [сағат] LT",sameElse:"L"},relativeTime:{future:"%s ішінде",past:"%s бұрын",s:"бірнеше секунд",ss:"%d секунд",m:"бір минут",mm:"%d минут",h:"бір сағат",hh:"%d сағат",d:"бір күн",dd:"%d күн",M:"бір ай",MM:"%d ай",y:"бір жыл",yy:"%d жыл"},dayOfMonthOrdinalParse:/\d{1,2}-(ші|шы)/,ordinal:function(e){return e+(t[e]||t[e%10]||t[e>=100?100:null])},week:{dow:1,doy:7}})}(a(0))},function(e,t,a){!function(e){"use strict";var t={1:"១",2:"២",3:"៣",4:"៤",5:"៥",6:"៦",7:"៧",8:"៨",9:"៩",0:"០"},a={"១":"1","២":"2","៣":"3","៤":"4","៥":"5","៦":"6","៧":"7","៨":"8","៩":"9","០":"0"};e.defineLocale("km",{months:"មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ".split("_"),monthsShort:"មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ".split("_"),weekdays:"អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍".split("_"),weekdaysShort:"អា_ច_អ_ព_ព្រ_សុ_ស".split("_"),weekdaysMin:"អា_ច_អ_ព_ព្រ_សុ_ស".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},meridiemParse:/ព្រឹក|ល្ងាច/,isPM:function(e){return"ល្ងាច"===e},meridiem:function(e,t,a){return e<12?"ព្រឹក":"ល្ងាច"},calendar:{sameDay:"[ថ្ងៃនេះ ម៉ោង] LT",nextDay:"[ស្អែក ម៉ោង] LT",nextWeek:"dddd [ម៉ោង] LT",lastDay:"[ម្សិលមិញ ម៉ោង] LT",lastWeek:"dddd [សប្តាហ៍មុន] [ម៉ោង] LT",sameElse:"L"},relativeTime:{future:"%sទៀត",past:"%sមុន",s:"ប៉ុន្មានវិនាទី",ss:"%d វិនាទី",m:"មួយនាទី",mm:"%d នាទី",h:"មួយម៉ោង",hh:"%d ម៉ោង",d:"មួយថ្ងៃ",dd:"%d ថ្ងៃ",M:"មួយខែ",MM:"%d ខែ",y:"មួយឆ្នាំ",yy:"%d ឆ្នាំ"},dayOfMonthOrdinalParse:/ទី\d{1,2}/,ordinal:"ទី%d",preparse:function(e){return e.replace(/[១២៣៤៥៦៧៨៩០]/g,(function(e){return a[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},week:{dow:1,doy:4}})}(a(0))},function(e,t,a){!function(e){"use strict";var t={1:"೧",2:"೨",3:"೩",4:"೪",5:"೫",6:"೬",7:"೭",8:"೮",9:"೯",0:"೦"},a={"೧":"1","೨":"2","೩":"3","೪":"4","೫":"5","೬":"6","೭":"7","೮":"8","೯":"9","೦":"0"};e.defineLocale("kn",{months:"ಜನವರಿ_ಫೆಬ್ರವರಿ_ಮಾರ್ಚ್_ಏಪ್ರಿಲ್_ಮೇ_ಜೂನ್_ಜುಲೈ_ಆಗಸ್ಟ್_ಸೆಪ್ಟೆಂಬರ್_ಅಕ್ಟೋಬರ್_ನವೆಂಬರ್_ಡಿಸೆಂಬರ್".split("_"),monthsShort:"ಜನ_ಫೆಬ್ರ_ಮಾರ್ಚ್_ಏಪ್ರಿಲ್_ಮೇ_ಜೂನ್_ಜುಲೈ_ಆಗಸ್ಟ್_ಸೆಪ್ಟೆಂ_ಅಕ್ಟೋ_ನವೆಂ_ಡಿಸೆಂ".split("_"),monthsParseExact:!0,weekdays:"ಭಾನುವಾರ_ಸೋಮವಾರ_ಮಂಗಳವಾರ_ಬುಧವಾರ_ಗುರುವಾರ_ಶುಕ್ರವಾರ_ಶನಿವಾರ".split("_"),weekdaysShort:"ಭಾನು_ಸೋಮ_ಮಂಗಳ_ಬುಧ_ಗುರು_ಶುಕ್ರ_ಶನಿ".split("_"),weekdaysMin:"ಭಾ_ಸೋ_ಮಂ_ಬು_ಗು_ಶು_ಶ".split("_"),longDateFormat:{LT:"A h:mm",LTS:"A h:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm",LLLL:"dddd, D MMMM YYYY, A h:mm"},calendar:{sameDay:"[ಇಂದು] LT",nextDay:"[ನಾಳೆ] LT",nextWeek:"dddd, LT",lastDay:"[ನಿನ್ನೆ] LT",lastWeek:"[ಕೊನೆಯ] dddd, LT",sameElse:"L"},relativeTime:{future:"%s ನಂತರ",past:"%s ಹಿಂದೆ",s:"ಕೆಲವು ಕ್ಷಣಗಳು",ss:"%d ಸೆಕೆಂಡುಗಳು",m:"ಒಂದು ನಿಮಿಷ",mm:"%d ನಿಮಿಷ",h:"ಒಂದು ಗಂಟೆ",hh:"%d ಗಂಟೆ",d:"ಒಂದು ದಿನ",dd:"%d ದಿನ",M:"ಒಂದು ತಿಂಗಳು",MM:"%d ತಿಂಗಳು",y:"ಒಂದು ವರ್ಷ",yy:"%d ವರ್ಷ"},preparse:function(e){return e.replace(/[೧೨೩೪೫೬೭೮೯೦]/g,(function(e){return a[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/ರಾತ್ರಿ|ಬೆಳಿಗ್ಗೆ|ಮಧ್ಯಾಹ್ನ|ಸಂಜೆ/,meridiemHour:function(e,t){return 12===e&&(e=0),"ರಾತ್ರಿ"===t?e<4?e:e+12:"ಬೆಳಿಗ್ಗೆ"===t?e:"ಮಧ್ಯಾಹ್ನ"===t?e>=10?e:e+12:"ಸಂಜೆ"===t?e+12:void 0},meridiem:function(e,t,a){return e<4?"ರಾತ್ರಿ":e<10?"ಬೆಳಿಗ್ಗೆ":e<17?"ಮಧ್ಯಾಹ್ನ":e<20?"ಸಂಜೆ":"ರಾತ್ರಿ"},dayOfMonthOrdinalParse:/\d{1,2}(ನೇ)/,ordinal:function(e){return e+"ನೇ"},week:{dow:0,doy:6}})}(a(0))},function(e,t,a){!function(e){"use strict";e.defineLocale("ko",{months:"1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월".split("_"),monthsShort:"1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월".split("_"),weekdays:"일요일_월요일_화요일_수요일_목요일_금요일_토요일".split("_"),weekdaysShort:"일_월_화_수_목_금_토".split("_"),weekdaysMin:"일_월_화_수_목_금_토".split("_"),longDateFormat:{LT:"A h:mm",LTS:"A h:mm:ss",L:"YYYY.MM.DD.",LL:"YYYY년 MMMM D일",LLL:"YYYY년 MMMM D일 A h:mm",LLLL:"YYYY년 MMMM D일 dddd A h:mm",l:"YYYY.MM.DD.",ll:"YYYY년 MMMM D일",lll:"YYYY년 MMMM D일 A h:mm",llll:"YYYY년 MMMM D일 dddd A h:mm"},calendar:{sameDay:"오늘 LT",nextDay:"내일 LT",nextWeek:"dddd LT",lastDay:"어제 LT",lastWeek:"지난주 dddd LT",sameElse:"L"},relativeTime:{future:"%s 후",past:"%s 전",s:"몇 초",ss:"%d초",m:"1분",mm:"%d분",h:"한 시간",hh:"%d시간",d:"하루",dd:"%d일",M:"한 달",MM:"%d달",y:"일 년",yy:"%d년"},dayOfMonthOrdinalParse:/\d{1,2}(일|월|주)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"일";case"M":return e+"월";case"w":case"W":return e+"주";default:return e}},meridiemParse:/오전|오후/,isPM:function(e){return"오후"===e},meridiem:function(e,t,a){return e<12?"오전":"오후"}})}(a(0))},function(e,t,a){!function(e){"use strict";var t={1:"١",2:"٢",3:"٣",4:"٤",5:"٥",6:"٦",7:"٧",8:"٨",9:"٩",0:"٠"},a={"١":"1","٢":"2","٣":"3","٤":"4","٥":"5","٦":"6","٧":"7","٨":"8","٩":"9","٠":"0"},n=["کانونی دووەم","شوبات","ئازار","نیسان","ئایار","حوزەیران","تەمموز","ئاب","ئەیلوول","تشرینی یەكەم","تشرینی دووەم","كانونی یەکەم"];e.defineLocale("ku",{months:n,monthsShort:n,weekdays:"یه‌كشه‌ممه‌_دووشه‌ممه‌_سێشه‌ممه‌_چوارشه‌ممه‌_پێنجشه‌ممه‌_هه‌ینی_شه‌ممه‌".split("_"),weekdaysShort:"یه‌كشه‌م_دووشه‌م_سێشه‌م_چوارشه‌م_پێنجشه‌م_هه‌ینی_شه‌ممه‌".split("_"),weekdaysMin:"ی_د_س_چ_پ_ه_ش".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},meridiemParse:/ئێواره‌|به‌یانی/,isPM:function(e){return/ئێواره‌/.test(e)},meridiem:function(e,t,a){return e<12?"به‌یانی":"ئێواره‌"},calendar:{sameDay:"[ئه‌مرۆ كاتژمێر] LT",nextDay:"[به‌یانی كاتژمێر] LT",nextWeek:"dddd [كاتژمێر] LT",lastDay:"[دوێنێ كاتژمێر] LT",lastWeek:"dddd [كاتژمێر] LT",sameElse:"L"},relativeTime:{future:"له‌ %s",past:"%s",s:"چه‌ند چركه‌یه‌ك",ss:"چركه‌ %d",m:"یه‌ك خوله‌ك",mm:"%d خوله‌ك",h:"یه‌ك كاتژمێر",hh:"%d كاتژمێر",d:"یه‌ك ڕۆژ",dd:"%d ڕۆژ",M:"یه‌ك مانگ",MM:"%d مانگ",y:"یه‌ك ساڵ",yy:"%d ساڵ"},preparse:function(e){return e.replace(/[١٢٣٤٥٦٧٨٩٠]/g,(function(e){return a[e]})).replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]})).replace(/,/g,"،")},week:{dow:6,doy:12}})}(a(0))},function(e,t,a){!function(e){"use strict";var t={0:"-чү",1:"-чи",2:"-чи",3:"-чү",4:"-чү",5:"-чи",6:"-чы",7:"-чи",8:"-чи",9:"-чу",10:"-чу",20:"-чы",30:"-чу",40:"-чы",50:"-чү",60:"-чы",70:"-чи",80:"-чи",90:"-чу",100:"-чү"};e.defineLocale("ky",{months:"январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь".split("_"),monthsShort:"янв_фев_март_апр_май_июнь_июль_авг_сен_окт_ноя_дек".split("_"),weekdays:"Жекшемби_Дүйшөмбү_Шейшемби_Шаршемби_Бейшемби_Жума_Ишемби".split("_"),weekdaysShort:"Жек_Дүй_Шей_Шар_Бей_Жум_Ише".split("_"),weekdaysMin:"Жк_Дй_Шй_Шр_Бй_Жм_Иш".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Бүгүн саат] LT",nextDay:"[Эртең саат] LT",nextWeek:"dddd [саат] LT",lastDay:"[Кечээ саат] LT",lastWeek:"[Өткөн аптанын] dddd [күнү] [саат] LT",sameElse:"L"},relativeTime:{future:"%s ичинде",past:"%s мурун",s:"бирнече секунд",ss:"%d секунд",m:"бир мүнөт",mm:"%d мүнөт",h:"бир саат",hh:"%d саат",d:"бир күн",dd:"%d күн",M:"бир ай",MM:"%d ай",y:"бир жыл",yy:"%d жыл"},dayOfMonthOrdinalParse:/\d{1,2}-(чи|чы|чү|чу)/,ordinal:function(e){return e+(t[e]||t[e%10]||t[e>=100?100:null])},week:{dow:1,doy:7}})}(a(0))},function(e,t,a){!function(e){"use strict";function t(e,t,a,n){var i={m:["eng Minutt","enger Minutt"],h:["eng Stonn","enger Stonn"],d:["een Dag","engem Dag"],M:["ee Mount","engem Mount"],y:["ee Joer","engem Joer"]};return t?i[a][0]:i[a][1]}function a(e){if(e=parseInt(e,10),isNaN(e))return!1;if(e<0)return!0;if(e<10)return 4<=e&&e<=7;if(e<100){var t=e%10;return a(0===t?e/10:t)}if(e<1e4){for(;e>=10;)e/=10;return a(e)}return a(e/=1e3)}e.defineLocale("lb",{months:"Januar_Februar_Mäerz_Abrëll_Mee_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jan._Febr._Mrz._Abr._Mee_Jun._Jul._Aug._Sept._Okt._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Sonndeg_Méindeg_Dënschdeg_Mëttwoch_Donneschdeg_Freideg_Samschdeg".split("_"),weekdaysShort:"So._Mé._Dë._Më._Do._Fr._Sa.".split("_"),weekdaysMin:"So_Mé_Dë_Më_Do_Fr_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm [Auer]",LTS:"H:mm:ss [Auer]",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm [Auer]",LLLL:"dddd, D. MMMM YYYY H:mm [Auer]"},calendar:{sameDay:"[Haut um] LT",sameElse:"L",nextDay:"[Muer um] LT",nextWeek:"dddd [um] LT",lastDay:"[Gëschter um] LT",lastWeek:function(){switch(this.day()){case 2:case 4:return"[Leschten] dddd [um] LT";default:return"[Leschte] dddd [um] LT"}}},relativeTime:{future:function(e){return a(e.substr(0,e.indexOf(" ")))?"a "+e:"an "+e},past:function(e){return a(e.substr(0,e.indexOf(" ")))?"viru "+e:"virun "+e},s:"e puer Sekonnen",ss:"%d Sekonnen",m:t,mm:"%d Minutten",h:t,hh:"%d Stonnen",d:t,dd:"%d Deeg",M:t,MM:"%d Méint",y:t,yy:"%d Joer"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(a(0))},function(e,t,a){!function(e){"use strict";e.defineLocale("lo",{months:"ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ".split("_"),monthsShort:"ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ".split("_"),weekdays:"ອາທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ".split("_"),weekdaysShort:"ທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ".split("_"),weekdaysMin:"ທ_ຈ_ອຄ_ພ_ພຫ_ສກ_ສ".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"ວັນdddd D MMMM YYYY HH:mm"},meridiemParse:/ຕອນເຊົ້າ|ຕອນແລງ/,isPM:function(e){return"ຕອນແລງ"===e},meridiem:function(e,t,a){return e<12?"ຕອນເຊົ້າ":"ຕອນແລງ"},calendar:{sameDay:"[ມື້ນີ້ເວລາ] LT",nextDay:"[ມື້ອື່ນເວລາ] LT",nextWeek:"[ວັນ]dddd[ໜ້າເວລາ] LT",lastDay:"[ມື້ວານນີ້ເວລາ] LT",lastWeek:"[ວັນ]dddd[ແລ້ວນີ້ເວລາ] LT",sameElse:"L"},relativeTime:{future:"ອີກ %s",past:"%sຜ່ານມາ",s:"ບໍ່ເທົ່າໃດວິນາທີ",ss:"%d ວິນາທີ",m:"1 ນາທີ",mm:"%d ນາທີ",h:"1 ຊົ່ວໂມງ",hh:"%d ຊົ່ວໂມງ",d:"1 ມື້",dd:"%d ມື້",M:"1 ເດືອນ",MM:"%d ເດືອນ",y:"1 ປີ",yy:"%d ປີ"},dayOfMonthOrdinalParse:/(ທີ່)\d{1,2}/,ordinal:function(e){return"ທີ່"+e}})}(a(0))},function(e,t,a){!function(e){"use strict";var t={ss:"sekundė_sekundžių_sekundes",m:"minutė_minutės_minutę",mm:"minutės_minučių_minutes",h:"valanda_valandos_valandą",hh:"valandos_valandų_valandas",d:"diena_dienos_dieną",dd:"dienos_dienų_dienas",M:"mėnuo_mėnesio_mėnesį",MM:"mėnesiai_mėnesių_mėnesius",y:"metai_metų_metus",yy:"metai_metų_metus"};function a(e,t,a,n){return t?i(a)[0]:n?i(a)[1]:i(a)[2]}function n(e){return e%10===0||e>10&&e<20}function i(e){return t[e].split("_")}function r(e,t,r,s){var o=e+" ";return 1===e?o+a(0,t,r[0],s):t?o+(n(e)?i(r)[1]:i(r)[0]):s?o+i(r)[1]:o+(n(e)?i(r)[1]:i(r)[2])}e.defineLocale("lt",{months:{format:"sausio_vasario_kovo_balandžio_gegužės_birželio_liepos_rugpjūčio_rugsėjo_spalio_lapkričio_gruodžio".split("_"),standalone:"sausis_vasaris_kovas_balandis_gegužė_birželis_liepa_rugpjūtis_rugsėjis_spalis_lapkritis_gruodis".split("_"),isFormat:/D[oD]?(\[[^\[\]]*\]|\s)+MMMM?|MMMM?(\[[^\[\]]*\]|\s)+D[oD]?/},monthsShort:"sau_vas_kov_bal_geg_bir_lie_rgp_rgs_spa_lap_grd".split("_"),weekdays:{format:"sekmadienį_pirmadienį_antradienį_trečiadienį_ketvirtadienį_penktadienį_šeštadienį".split("_"),standalone:"sekmadienis_pirmadienis_antradienis_trečiadienis_ketvirtadienis_penktadienis_šeštadienis".split("_"),isFormat:/dddd HH:mm/},weekdaysShort:"Sek_Pir_Ant_Tre_Ket_Pen_Šeš".split("_"),weekdaysMin:"S_P_A_T_K_Pn_Š".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"YYYY [m.] MMMM D [d.]",LLL:"YYYY [m.] MMMM D [d.], HH:mm [val.]",LLLL:"YYYY [m.] MMMM D [d.], dddd, HH:mm [val.]",l:"YYYY-MM-DD",ll:"YYYY [m.] MMMM D [d.]",lll:"YYYY [m.] MMMM D [d.], HH:mm [val.]",llll:"YYYY [m.] MMMM D [d.], ddd, HH:mm [val.]"},calendar:{sameDay:"[Šiandien] LT",nextDay:"[Rytoj] LT",nextWeek:"dddd LT",lastDay:"[Vakar] LT",lastWeek:"[Praėjusį] dddd LT",sameElse:"L"},relativeTime:{future:"po %s",past:"prieš %s",s:function(e,t,a,n){return t?"kelios sekundės":n?"kelių sekundžių":"kelias sekundes"},ss:r,m:a,mm:r,h:a,hh:r,d:a,dd:r,M:a,MM:r,y:a,yy:r},dayOfMonthOrdinalParse:/\d{1,2}-oji/,ordinal:function(e){return e+"-oji"},week:{dow:1,doy:4}})}(a(0))},function(e,t,a){!function(e){"use strict";var t={ss:"sekundes_sekundēm_sekunde_sekundes".split("_"),m:"minūtes_minūtēm_minūte_minūtes".split("_"),mm:"minūtes_minūtēm_minūte_minūtes".split("_"),h:"stundas_stundām_stunda_stundas".split("_"),hh:"stundas_stundām_stunda_stundas".split("_"),d:"dienas_dienām_diena_dienas".split("_"),dd:"dienas_dienām_diena_dienas".split("_"),M:"mēneša_mēnešiem_mēnesis_mēneši".split("_"),MM:"mēneša_mēnešiem_mēnesis_mēneši".split("_"),y:"gada_gadiem_gads_gadi".split("_"),yy:"gada_gadiem_gads_gadi".split("_")};function a(e,t,a){return a?t%10===1&&t%100!==11?e[2]:e[3]:t%10===1&&t%100!==11?e[0]:e[1]}function n(e,n,i){return e+" "+a(t[i],e,n)}function i(e,n,i){return a(t[i],e,n)}e.defineLocale("lv",{months:"janvāris_februāris_marts_aprīlis_maijs_jūnijs_jūlijs_augusts_septembris_oktobris_novembris_decembris".split("_"),monthsShort:"jan_feb_mar_apr_mai_jūn_jūl_aug_sep_okt_nov_dec".split("_"),weekdays:"svētdiena_pirmdiena_otrdiena_trešdiena_ceturtdiena_piektdiena_sestdiena".split("_"),weekdaysShort:"Sv_P_O_T_C_Pk_S".split("_"),weekdaysMin:"Sv_P_O_T_C_Pk_S".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY.",LL:"YYYY. [gada] D. MMMM",LLL:"YYYY. [gada] D. MMMM, HH:mm",LLLL:"YYYY. [gada] D. MMMM, dddd, HH:mm"},calendar:{sameDay:"[Šodien pulksten] LT",nextDay:"[Rīt pulksten] LT",nextWeek:"dddd [pulksten] LT",lastDay:"[Vakar pulksten] LT",lastWeek:"[Pagājušā] dddd [pulksten] LT",sameElse:"L"},relativeTime:{future:"pēc %s",past:"pirms %s",s:function(e,t){return t?"dažas sekundes":"dažām sekundēm"},ss:n,m:i,mm:n,h:i,hh:n,d:i,dd:n,M:i,MM:n,y:i,yy:n},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(a(0))},function(e,t,a){!function(e){"use strict";var t={words:{ss:["sekund","sekunda","sekundi"],m:["jedan minut","jednog minuta"],mm:["minut","minuta","minuta"],h:["jedan sat","jednog sata"],hh:["sat","sata","sati"],dd:["dan","dana","dana"],MM:["mjesec","mjeseca","mjeseci"],yy:["godina","godine","godina"]},correctGrammaticalCase:function(e,t){return 1===e?t[0]:e>=2&&e<=4?t[1]:t[2]},translate:function(e,a,n){var i=t.words[n];return 1===n.length?a?i[0]:i[1]:e+" "+t.correctGrammaticalCase(e,i)}};e.defineLocale("me",{months:"januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar".split("_"),monthsShort:"jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sri._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sjutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedjelju] [u] LT";case 3:return"[u] [srijedu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[juče u] LT",lastWeek:function(){return["[prošle] [nedjelje] [u] LT","[prošlog] [ponedjeljka] [u] LT","[prošlog] [utorka] [u] LT","[prošle] [srijede] [u] LT","[prošlog] [četvrtka] [u] LT","[prošlog] [petka] [u] LT","[prošle] [subote] [u] LT"][this.day()]},sameElse:"L"},relativeTime:{future:"za %s",past:"prije %s",s:"nekoliko sekundi",ss:t.translate,m:t.translate,mm:t.translate,h:t.translate,hh:t.translate,d:"dan",dd:t.translate,M:"mjesec",MM:t.translate,y:"godinu",yy:t.translate},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(a(0))},function(e,t,a){!function(e){"use strict";e.defineLocale("mi",{months:"Kohi-tāte_Hui-tanguru_Poutū-te-rangi_Paenga-whāwhā_Haratua_Pipiri_Hōngoingoi_Here-turi-kōkā_Mahuru_Whiringa-ā-nuku_Whiringa-ā-rangi_Hakihea".split("_"),monthsShort:"Kohi_Hui_Pou_Pae_Hara_Pipi_Hōngoi_Here_Mahu_Whi-nu_Whi-ra_Haki".split("_"),monthsRegex:/(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,monthsStrictRegex:/(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,monthsShortRegex:/(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,monthsShortStrictRegex:/(?:['a-z\u0101\u014D\u016B]+\-?){1,2}/i,weekdays:"Rātapu_Mane_Tūrei_Wenerei_Tāite_Paraire_Hātarei".split("_"),weekdaysShort:"Ta_Ma_Tū_We_Tāi_Pa_Hā".split("_"),weekdaysMin:"Ta_Ma_Tū_We_Tāi_Pa_Hā".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [i] HH:mm",LLLL:"dddd, D MMMM YYYY [i] HH:mm"},calendar:{sameDay:"[i teie mahana, i] LT",nextDay:"[apopo i] LT",nextWeek:"dddd [i] LT",lastDay:"[inanahi i] LT",lastWeek:"dddd [whakamutunga i] LT",sameElse:"L"},relativeTime:{future:"i roto i %s",past:"%s i mua",s:"te hēkona ruarua",ss:"%d hēkona",m:"he meneti",mm:"%d meneti",h:"te haora",hh:"%d haora",d:"he ra",dd:"%d ra",M:"he marama",MM:"%d marama",y:"he tau",yy:"%d tau"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(a(0))},function(e,t,a){!function(e){"use strict";e.defineLocale("mk",{months:"јануари_февруари_март_април_мај_јуни_јули_август_септември_октомври_ноември_декември".split("_"),monthsShort:"јан_фев_мар_апр_мај_јун_јул_авг_сеп_окт_ное_дек".split("_"),weekdays:"недела_понеделник_вторник_среда_четврток_петок_сабота".split("_"),weekdaysShort:"нед_пон_вто_сре_чет_пет_саб".split("_"),weekdaysMin:"нe_пo_вт_ср_че_пе_сa".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"D.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY H:mm",LLLL:"dddd, D MMMM YYYY H:mm"},calendar:{sameDay:"[Денес во] LT",nextDay:"[Утре во] LT",nextWeek:"[Во] dddd [во] LT",lastDay:"[Вчера во] LT",lastWeek:function(){switch(this.day()){case 0:case 3:case 6:return"[Изминатата] dddd [во] LT";case 1:case 2:case 4:case 5:return"[Изминатиот] dddd [во] LT"}},sameElse:"L"},relativeTime:{future:"после %s",past:"пред %s",s:"неколку секунди",ss:"%d секунди",m:"минута",mm:"%d минути",h:"час",hh:"%d часа",d:"ден",dd:"%d дена",M:"месец",MM:"%d месеци",y:"година",yy:"%d години"},dayOfMonthOrdinalParse:/\d{1,2}-(ев|ен|ти|ви|ри|ми)/,ordinal:function(e){var t=e%10,a=e%100;return 0===e?e+"-ев":0===a?e+"-ен":a>10&&a<20?e+"-ти":1===t?e+"-ви":2===t?e+"-ри":7===t||8===t?e+"-ми":e+"-ти"},week:{dow:1,doy:7}})}(a(0))},function(e,t,a){!function(e){"use strict";e.defineLocale("ml",{months:"ജനുവരി_ഫെബ്രുവരി_മാർച്ച്_ഏപ്രിൽ_മേയ്_ജൂൺ_ജൂലൈ_ഓഗസ്റ്റ്_സെപ്റ്റംബർ_ഒക്ടോബർ_നവംബർ_ഡിസംബർ".split("_"),monthsShort:"ജനു._ഫെബ്രു._മാർ._ഏപ്രി._മേയ്_ജൂൺ_ജൂലൈ._ഓഗ._സെപ്റ്റ._ഒക്ടോ._നവം._ഡിസം.".split("_"),monthsParseExact:!0,weekdays:"ഞായറാഴ്ച_തിങ്കളാഴ്ച_ചൊവ്വാഴ്ച_ബുധനാഴ്ച_വ്യാഴാഴ്ച_വെള്ളിയാഴ്ച_ശനിയാഴ്ച".split("_"),weekdaysShort:"ഞായർ_തിങ്കൾ_ചൊവ്വ_ബുധൻ_വ്യാഴം_വെള്ളി_ശനി".split("_"),weekdaysMin:"ഞാ_തി_ചൊ_ബു_വ്യാ_വെ_ശ".split("_"),longDateFormat:{LT:"A h:mm -നു",LTS:"A h:mm:ss -നു",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm -നു",LLLL:"dddd, D MMMM YYYY, A h:mm -നു"},calendar:{sameDay:"[ഇന്ന്] LT",nextDay:"[നാളെ] LT",nextWeek:"dddd, LT",lastDay:"[ഇന്നലെ] LT",lastWeek:"[കഴിഞ്ഞ] dddd, LT",sameElse:"L"},relativeTime:{future:"%s കഴിഞ്ഞ്",past:"%s മുൻപ്",s:"അൽപ നിമിഷങ്ങൾ",ss:"%d സെക്കൻഡ്",m:"ഒരു മിനിറ്റ്",mm:"%d മിനിറ്റ്",h:"ഒരു മണിക്കൂർ",hh:"%d മണിക്കൂർ",d:"ഒരു ദിവസം",dd:"%d ദിവസം",M:"ഒരു മാസം",MM:"%d മാസം",y:"ഒരു വർഷം",yy:"%d വർഷം"},meridiemParse:/രാത്രി|രാവിലെ|ഉച്ച കഴിഞ്ഞ്|വൈകുന്നേരം|രാത്രി/i,meridiemHour:function(e,t){return 12===e&&(e=0),"രാത്രി"===t&&e>=4||"ഉച്ച കഴിഞ്ഞ്"===t||"വൈകുന്നേരം"===t?e+12:e},meridiem:function(e,t,a){return e<4?"രാത്രി":e<12?"രാവിലെ":e<17?"ഉച്ച കഴിഞ്ഞ്":e<20?"വൈകുന്നേരം":"രാത്രി"}})}(a(0))},function(e,t,a){!function(e){"use strict";function t(e,t,a,n){switch(a){case"s":return t?"хэдхэн секунд":"хэдхэн секундын";case"ss":return e+(t?" секунд":" секундын");case"m":case"mm":return e+(t?" минут":" минутын");case"h":case"hh":return e+(t?" цаг":" цагийн");case"d":case"dd":return e+(t?" өдөр":" өдрийн");case"M":case"MM":return e+(t?" сар":" сарын");case"y":case"yy":return e+(t?" жил":" жилийн");default:return e}}e.defineLocale("mn",{months:"Нэгдүгээр сар_Хоёрдугаар сар_Гуравдугаар сар_Дөрөвдүгээр сар_Тавдугаар сар_Зургадугаар сар_Долдугаар сар_Наймдугаар сар_Есдүгээр сар_Аравдугаар сар_Арван нэгдүгээр сар_Арван хоёрдугаар сар".split("_"),monthsShort:"1 сар_2 сар_3 сар_4 сар_5 сар_6 сар_7 сар_8 сар_9 сар_10 сар_11 сар_12 сар".split("_"),monthsParseExact:!0,weekdays:"Ням_Даваа_Мягмар_Лхагва_Пүрэв_Баасан_Бямба".split("_"),weekdaysShort:"Ням_Дав_Мяг_Лха_Пүр_Баа_Бям".split("_"),weekdaysMin:"Ня_Да_Мя_Лх_Пү_Ба_Бя".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"YYYY оны MMMMын D",LLL:"YYYY оны MMMMын D HH:mm",LLLL:"dddd, YYYY оны MMMMын D HH:mm"},meridiemParse:/ҮӨ|ҮХ/i,isPM:function(e){return"ҮХ"===e},meridiem:function(e,t,a){return e<12?"ҮӨ":"ҮХ"},calendar:{sameDay:"[Өнөөдөр] LT",nextDay:"[Маргааш] LT",nextWeek:"[Ирэх] dddd LT",lastDay:"[Өчигдөр] LT",lastWeek:"[Өнгөрсөн] dddd LT",sameElse:"L"},relativeTime:{future:"%s дараа",past:"%s өмнө",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2} өдөр/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+" өдөр";default:return e}}})}(a(0))},function(e,t,a){!function(e){"use strict";var t={1:"१",2:"२",3:"३",4:"४",5:"५",6:"६",7:"७",8:"८",9:"९",0:"०"},a={"१":"1","२":"2","३":"3","४":"4","५":"5","६":"6","७":"7","८":"8","९":"9","०":"0"};function n(e,t,a,n){var i="";if(t)switch(a){case"s":i="काही सेकंद";break;case"ss":i="%d सेकंद";break;case"m":i="एक मिनिट";break;case"mm":i="%d मिनिटे";break;case"h":i="एक तास";break;case"hh":i="%d तास";break;case"d":i="एक दिवस";break;case"dd":i="%d दिवस";break;case"M":i="एक महिना";break;case"MM":i="%d महिने";break;case"y":i="एक वर्ष";break;case"yy":i="%d वर्षे"}else switch(a){case"s":i="काही सेकंदां";break;case"ss":i="%d सेकंदां";break;case"m":i="एका मिनिटा";break;case"mm":i="%d मिनिटां";break;case"h":i="एका तासा";break;case"hh":i="%d तासां";break;case"d":i="एका दिवसा";break;case"dd":i="%d दिवसां";break;case"M":i="एका महिन्या";break;case"MM":i="%d महिन्यां";break;case"y":i="एका वर्षा";break;case"yy":i="%d वर्षां"}return i.replace(/%d/i,e)}e.defineLocale("mr",{months:"जानेवारी_फेब्रुवारी_मार्च_एप्रिल_मे_जून_जुलै_ऑगस्ट_सप्टेंबर_ऑक्टोबर_नोव्हेंबर_डिसेंबर".split("_"),monthsShort:"जाने._फेब्रु._मार्च._एप्रि._मे._जून._जुलै._ऑग._सप्टें._ऑक्टो._नोव्हें._डिसें.".split("_"),monthsParseExact:!0,weekdays:"रविवार_सोमवार_मंगळवार_बुधवार_गुरूवार_शुक्रवार_शनिवार".split("_"),weekdaysShort:"रवि_सोम_मंगळ_बुध_गुरू_शुक्र_शनि".split("_"),weekdaysMin:"र_सो_मं_बु_गु_शु_श".split("_"),longDateFormat:{LT:"A h:mm वाजता",LTS:"A h:mm:ss वाजता",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm वाजता",LLLL:"dddd, D MMMM YYYY, A h:mm वाजता"},calendar:{sameDay:"[आज] LT",nextDay:"[उद्या] LT",nextWeek:"dddd, LT",lastDay:"[काल] LT",lastWeek:"[मागील] dddd, LT",sameElse:"L"},relativeTime:{future:"%sमध्ये",past:"%sपूर्वी",s:n,ss:n,m:n,mm:n,h:n,hh:n,d:n,dd:n,M:n,MM:n,y:n,yy:n},preparse:function(e){return e.replace(/[१२३४५६७८९०]/g,(function(e){return a[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/रात्री|सकाळी|दुपारी|सायंकाळी/,meridiemHour:function(e,t){return 12===e&&(e=0),"रात्री"===t?e<4?e:e+12:"सकाळी"===t?e:"दुपारी"===t?e>=10?e:e+12:"सायंकाळी"===t?e+12:void 0},meridiem:function(e,t,a){return e<4?"रात्री":e<10?"सकाळी":e<17?"दुपारी":e<20?"सायंकाळी":"रात्री"},week:{dow:0,doy:6}})}(a(0))},function(e,t,a){!function(e){"use strict";e.defineLocale("ms",{months:"Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember".split("_"),monthsShort:"Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis".split("_"),weekdays:"Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu".split("_"),weekdaysShort:"Ahd_Isn_Sel_Rab_Kha_Jum_Sab".split("_"),weekdaysMin:"Ah_Is_Sl_Rb_Km_Jm_Sb".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/pagi|tengahari|petang|malam/,meridiemHour:function(e,t){return 12===e&&(e=0),"pagi"===t?e:"tengahari"===t?e>=11?e:e+12:"petang"===t||"malam"===t?e+12:void 0},meridiem:function(e,t,a){return e<11?"pagi":e<15?"tengahari":e<19?"petang":"malam"},calendar:{sameDay:"[Hari ini pukul] LT",nextDay:"[Esok pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kelmarin pukul] LT",lastWeek:"dddd [lepas pukul] LT",sameElse:"L"},relativeTime:{future:"dalam %s",past:"%s yang lepas",s:"beberapa saat",ss:"%d saat",m:"seminit",mm:"%d minit",h:"sejam",hh:"%d jam",d:"sehari",dd:"%d hari",M:"sebulan",MM:"%d bulan",y:"setahun",yy:"%d tahun"},week:{dow:1,doy:7}})}(a(0))},function(e,t,a){!function(e){"use strict";e.defineLocale("ms-my",{months:"Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember".split("_"),monthsShort:"Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis".split("_"),weekdays:"Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu".split("_"),weekdaysShort:"Ahd_Isn_Sel_Rab_Kha_Jum_Sab".split("_"),weekdaysMin:"Ah_Is_Sl_Rb_Km_Jm_Sb".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/pagi|tengahari|petang|malam/,meridiemHour:function(e,t){return 12===e&&(e=0),"pagi"===t?e:"tengahari"===t?e>=11?e:e+12:"petang"===t||"malam"===t?e+12:void 0},meridiem:function(e,t,a){return e<11?"pagi":e<15?"tengahari":e<19?"petang":"malam"},calendar:{sameDay:"[Hari ini pukul] LT",nextDay:"[Esok pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kelmarin pukul] LT",lastWeek:"dddd [lepas pukul] LT",sameElse:"L"},relativeTime:{future:"dalam %s",past:"%s yang lepas",s:"beberapa saat",ss:"%d saat",m:"seminit",mm:"%d minit",h:"sejam",hh:"%d jam",d:"sehari",dd:"%d hari",M:"sebulan",MM:"%d bulan",y:"setahun",yy:"%d tahun"},week:{dow:1,doy:7}})}(a(0))},function(e,t,a){!function(e){"use strict";e.defineLocale("mt",{months:"Jannar_Frar_Marzu_April_Mejju_Ġunju_Lulju_Awwissu_Settembru_Ottubru_Novembru_Diċembru".split("_"),monthsShort:"Jan_Fra_Mar_Apr_Mej_Ġun_Lul_Aww_Set_Ott_Nov_Diċ".split("_"),weekdays:"Il-Ħadd_It-Tnejn_It-Tlieta_L-Erbgħa_Il-Ħamis_Il-Ġimgħa_Is-Sibt".split("_"),weekdaysShort:"Ħad_Tne_Tli_Erb_Ħam_Ġim_Sib".split("_"),weekdaysMin:"Ħa_Tn_Tl_Er_Ħa_Ġi_Si".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Illum fil-]LT",nextDay:"[Għada fil-]LT",nextWeek:"dddd [fil-]LT",lastDay:"[Il-bieraħ fil-]LT",lastWeek:"dddd [li għadda] [fil-]LT",sameElse:"L"},relativeTime:{future:"f’ %s",past:"%s ilu",s:"ftit sekondi",ss:"%d sekondi",m:"minuta",mm:"%d minuti",h:"siegħa",hh:"%d siegħat",d:"ġurnata",dd:"%d ġranet",M:"xahar",MM:"%d xhur",y:"sena",yy:"%d sni"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(a(0))},function(e,t,a){!function(e){"use strict";var t={1:"၁",2:"၂",3:"၃",4:"၄",5:"၅",6:"၆",7:"၇",8:"၈",9:"၉",0:"၀"},a={"၁":"1","၂":"2","၃":"3","၄":"4","၅":"5","၆":"6","၇":"7","၈":"8","၉":"9","၀":"0"};e.defineLocale("my",{months:"ဇန်နဝါရီ_ဖေဖော်ဝါရီ_မတ်_ဧပြီ_မေ_ဇွန်_ဇူလိုင်_သြဂုတ်_စက်တင်ဘာ_အောက်တိုဘာ_နိုဝင်ဘာ_ဒီဇင်ဘာ".split("_"),monthsShort:"ဇန်_ဖေ_မတ်_ပြီ_မေ_ဇွန်_လိုင်_သြ_စက်_အောက်_နို_ဒီ".split("_"),weekdays:"တနင်္ဂနွေ_တနင်္လာ_အင်္ဂါ_ဗုဒ္ဓဟူး_ကြာသပတေး_သောကြာ_စနေ".split("_"),weekdaysShort:"နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ".split("_"),weekdaysMin:"နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[ယနေ.] LT [မှာ]",nextDay:"[မနက်ဖြန်] LT [မှာ]",nextWeek:"dddd LT [မှာ]",lastDay:"[မနေ.က] LT [မှာ]",lastWeek:"[ပြီးခဲ့သော] dddd LT [မှာ]",sameElse:"L"},relativeTime:{future:"လာမည့် %s မှာ",past:"လွန်ခဲ့သော %s က",s:"စက္ကန်.အနည်းငယ်",ss:"%d စက္ကန့်",m:"တစ်မိနစ်",mm:"%d မိနစ်",h:"တစ်နာရီ",hh:"%d နာရီ",d:"တစ်ရက်",dd:"%d ရက်",M:"တစ်လ",MM:"%d လ",y:"တစ်နှစ်",yy:"%d နှစ်"},preparse:function(e){return e.replace(/[၁၂၃၄၅၆၇၈၉၀]/g,(function(e){return a[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},week:{dow:1,doy:4}})}(a(0))},function(e,t,a){!function(e){"use strict";e.defineLocale("nb",{months:"januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember".split("_"),monthsShort:"jan._feb._mars_april_mai_juni_juli_aug._sep._okt._nov._des.".split("_"),monthsParseExact:!0,weekdays:"søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag".split("_"),weekdaysShort:"sø._ma._ti._on._to._fr._lø.".split("_"),weekdaysMin:"sø_ma_ti_on_to_fr_lø".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY [kl.] HH:mm",LLLL:"dddd D. MMMM YYYY [kl.] HH:mm"},calendar:{sameDay:"[i dag kl.] LT",nextDay:"[i morgen kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[i går kl.] LT",lastWeek:"[forrige] dddd [kl.] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"%s siden",s:"noen sekunder",ss:"%d sekunder",m:"ett minutt",mm:"%d minutter",h:"en time",hh:"%d timer",d:"en dag",dd:"%d dager",M:"en måned",MM:"%d måneder",y:"ett år",yy:"%d år"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(a(0))},function(e,t,a){!function(e){"use strict";var t={1:"१",2:"२",3:"३",4:"४",5:"५",6:"६",7:"७",8:"८",9:"९",0:"०"},a={"१":"1","२":"2","३":"3","४":"4","५":"5","६":"6","७":"7","८":"8","९":"9","०":"0"};e.defineLocale("ne",{months:"जनवरी_फेब्रुवरी_मार्च_अप्रिल_मई_जुन_जुलाई_अगष्ट_सेप्टेम्बर_अक्टोबर_नोभेम्बर_डिसेम्बर".split("_"),monthsShort:"जन._फेब्रु._मार्च_अप्रि._मई_जुन_जुलाई._अग._सेप्ट._अक्टो._नोभे._डिसे.".split("_"),monthsParseExact:!0,weekdays:"आइतबार_सोमबार_मङ्गलबार_बुधबार_बिहिबार_शुक्रबार_शनिबार".split("_"),weekdaysShort:"आइत._सोम._मङ्गल._बुध._बिहि._शुक्र._शनि.".split("_"),weekdaysMin:"आ._सो._मं._बु._बि._शु._श.".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"Aको h:mm बजे",LTS:"Aको h:mm:ss बजे",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, Aको h:mm बजे",LLLL:"dddd, D MMMM YYYY, Aको h:mm बजे"},preparse:function(e){return e.replace(/[१२३४५६७८९०]/g,(function(e){return a[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/राति|बिहान|दिउँसो|साँझ/,meridiemHour:function(e,t){return 12===e&&(e=0),"राति"===t?e<4?e:e+12:"बिहान"===t?e:"दिउँसो"===t?e>=10?e:e+12:"साँझ"===t?e+12:void 0},meridiem:function(e,t,a){return e<3?"राति":e<12?"बिहान":e<16?"दिउँसो":e<20?"साँझ":"राति"},calendar:{sameDay:"[आज] LT",nextDay:"[भोलि] LT",nextWeek:"[आउँदो] dddd[,] LT",lastDay:"[हिजो] LT",lastWeek:"[गएको] dddd[,] LT",sameElse:"L"},relativeTime:{future:"%sमा",past:"%s अगाडि",s:"केही क्षण",ss:"%d सेकेण्ड",m:"एक मिनेट",mm:"%d मिनेट",h:"एक घण्टा",hh:"%d घण्टा",d:"एक दिन",dd:"%d दिन",M:"एक महिना",MM:"%d महिना",y:"एक बर्ष",yy:"%d बर्ष"},week:{dow:0,doy:6}})}(a(0))},function(e,t,a){!function(e){"use strict";var t="jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.".split("_"),a="jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec".split("_"),n=[/^jan/i,/^feb/i,/^maart|mrt.?$/i,/^apr/i,/^mei$/i,/^jun[i.]?$/i,/^jul[i.]?$/i,/^aug/i,/^sep/i,/^okt/i,/^nov/i,/^dec/i],i=/^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i;e.defineLocale("nl",{months:"januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december".split("_"),monthsShort:function(e,n){return e?/-MMM-/.test(n)?a[e.month()]:t[e.month()]:t},monthsRegex:i,monthsShortRegex:i,monthsStrictRegex:/^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december)/i,monthsShortStrictRegex:/^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,monthsParse:n,longMonthsParse:n,shortMonthsParse:n,weekdays:"zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag".split("_"),weekdaysShort:"zo._ma._di._wo._do._vr._za.".split("_"),weekdaysMin:"zo_ma_di_wo_do_vr_za".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[vandaag om] LT",nextDay:"[morgen om] LT",nextWeek:"dddd [om] LT",lastDay:"[gisteren om] LT",lastWeek:"[afgelopen] dddd [om] LT",sameElse:"L"},relativeTime:{future:"over %s",past:"%s geleden",s:"een paar seconden",ss:"%d seconden",m:"één minuut",mm:"%d minuten",h:"één uur",hh:"%d uur",d:"één dag",dd:"%d dagen",M:"één maand",MM:"%d maanden",y:"één jaar",yy:"%d jaar"},dayOfMonthOrdinalParse:/\d{1,2}(ste|de)/,ordinal:function(e){return e+(1===e||8===e||e>=20?"ste":"de")},week:{dow:1,doy:4}})}(a(0))},function(e,t,a){!function(e){"use strict";var t="jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.".split("_"),a="jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec".split("_"),n=[/^jan/i,/^feb/i,/^maart|mrt.?$/i,/^apr/i,/^mei$/i,/^jun[i.]?$/i,/^jul[i.]?$/i,/^aug/i,/^sep/i,/^okt/i,/^nov/i,/^dec/i],i=/^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i;e.defineLocale("nl-be",{months:"januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december".split("_"),monthsShort:function(e,n){return e?/-MMM-/.test(n)?a[e.month()]:t[e.month()]:t},monthsRegex:i,monthsShortRegex:i,monthsStrictRegex:/^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december)/i,monthsShortStrictRegex:/^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,monthsParse:n,longMonthsParse:n,shortMonthsParse:n,weekdays:"zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag".split("_"),weekdaysShort:"zo._ma._di._wo._do._vr._za.".split("_"),weekdaysMin:"zo_ma_di_wo_do_vr_za".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[vandaag om] LT",nextDay:"[morgen om] LT",nextWeek:"dddd [om] LT",lastDay:"[gisteren om] LT",lastWeek:"[afgelopen] dddd [om] LT",sameElse:"L"},relativeTime:{future:"over %s",past:"%s geleden",s:"een paar seconden",ss:"%d seconden",m:"één minuut",mm:"%d minuten",h:"één uur",hh:"%d uur",d:"één dag",dd:"%d dagen",M:"één maand",MM:"%d maanden",y:"één jaar",yy:"%d jaar"},dayOfMonthOrdinalParse:/\d{1,2}(ste|de)/,ordinal:function(e){return e+(1===e||8===e||e>=20?"ste":"de")},week:{dow:1,doy:4}})}(a(0))},function(e,t,a){!function(e){"use strict";e.defineLocale("nn",{months:"januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember".split("_"),monthsShort:"jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_"),weekdays:"sundag_måndag_tysdag_onsdag_torsdag_fredag_laurdag".split("_"),weekdaysShort:"sun_mån_tys_ons_tor_fre_lau".split("_"),weekdaysMin:"su_må_ty_on_to_fr_lø".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY [kl.] H:mm",LLLL:"dddd D. MMMM YYYY [kl.] HH:mm"},calendar:{sameDay:"[I dag klokka] LT",nextDay:"[I morgon klokka] LT",nextWeek:"dddd [klokka] LT",lastDay:"[I går klokka] LT",lastWeek:"[Føregåande] dddd [klokka] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"%s sidan",s:"nokre sekund",ss:"%d sekund",m:"eit minutt",mm:"%d minutt",h:"ein time",hh:"%d timar",d:"ein dag",dd:"%d dagar",M:"ein månad",MM:"%d månader",y:"eit år",yy:"%d år"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(a(0))},function(e,t,a){!function(e){"use strict";var t={1:"੧",2:"੨",3:"੩",4:"੪",5:"੫",6:"੬",7:"੭",8:"੮",9:"੯",0:"੦"},a={"੧":"1","੨":"2","੩":"3","੪":"4","੫":"5","੬":"6","੭":"7","੮":"8","੯":"9","੦":"0"};e.defineLocale("pa-in",{months:"ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ".split("_"),monthsShort:"ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ".split("_"),weekdays:"ਐਤਵਾਰ_ਸੋਮਵਾਰ_ਮੰਗਲਵਾਰ_ਬੁਧਵਾਰ_ਵੀਰਵਾਰ_ਸ਼ੁੱਕਰਵਾਰ_ਸ਼ਨੀਚਰਵਾਰ".split("_"),weekdaysShort:"ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ".split("_"),weekdaysMin:"ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ".split("_"),longDateFormat:{LT:"A h:mm ਵਜੇ",LTS:"A h:mm:ss ਵਜੇ",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm ਵਜੇ",LLLL:"dddd, D MMMM YYYY, A h:mm ਵਜੇ"},calendar:{sameDay:"[ਅਜ] LT",nextDay:"[ਕਲ] LT",nextWeek:"[ਅਗਲਾ] dddd, LT",lastDay:"[ਕਲ] LT",lastWeek:"[ਪਿਛਲੇ] dddd, LT",sameElse:"L"},relativeTime:{future:"%s ਵਿੱਚ",past:"%s ਪਿਛਲੇ",s:"ਕੁਝ ਸਕਿੰਟ",ss:"%d ਸਕਿੰਟ",m:"ਇਕ ਮਿੰਟ",mm:"%d ਮਿੰਟ",h:"ਇੱਕ ਘੰਟਾ",hh:"%d ਘੰਟੇ",d:"ਇੱਕ ਦਿਨ",dd:"%d ਦਿਨ",M:"ਇੱਕ ਮਹੀਨਾ",MM:"%d ਮਹੀਨੇ",y:"ਇੱਕ ਸਾਲ",yy:"%d ਸਾਲ"},preparse:function(e){return e.replace(/[੧੨੩੪੫੬੭੮੯੦]/g,(function(e){return a[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/ਰਾਤ|ਸਵੇਰ|ਦੁਪਹਿਰ|ਸ਼ਾਮ/,meridiemHour:function(e,t){return 12===e&&(e=0),"ਰਾਤ"===t?e<4?e:e+12:"ਸਵੇਰ"===t?e:"ਦੁਪਹਿਰ"===t?e>=10?e:e+12:"ਸ਼ਾਮ"===t?e+12:void 0},meridiem:function(e,t,a){return e<4?"ਰਾਤ":e<10?"ਸਵੇਰ":e<17?"ਦੁਪਹਿਰ":e<20?"ਸ਼ਾਮ":"ਰਾਤ"},week:{dow:0,doy:6}})}(a(0))},function(e,t,a){!function(e){"use strict";var t="styczeń_luty_marzec_kwiecień_maj_czerwiec_lipiec_sierpień_wrzesień_październik_listopad_grudzień".split("_"),a="stycznia_lutego_marca_kwietnia_maja_czerwca_lipca_sierpnia_września_października_listopada_grudnia".split("_");function n(e){return e%10<5&&e%10>1&&~~(e/10)%10!==1}function i(e,t,a){var i=e+" ";switch(a){case"ss":return i+(n(e)?"sekundy":"sekund");case"m":return t?"minuta":"minutę";case"mm":return i+(n(e)?"minuty":"minut");case"h":return t?"godzina":"godzinę";case"hh":return i+(n(e)?"godziny":"godzin");case"MM":return i+(n(e)?"miesiące":"miesięcy");case"yy":return i+(n(e)?"lata":"lat")}}e.defineLocale("pl",{months:function(e,n){return e?""===n?"("+a[e.month()]+"|"+t[e.month()]+")":/D MMMM/.test(n)?a[e.month()]:t[e.month()]:t},monthsShort:"sty_lut_mar_kwi_maj_cze_lip_sie_wrz_paź_lis_gru".split("_"),weekdays:"niedziela_poniedziałek_wtorek_środa_czwartek_piątek_sobota".split("_"),weekdaysShort:"ndz_pon_wt_śr_czw_pt_sob".split("_"),weekdaysMin:"Nd_Pn_Wt_Śr_Cz_Pt_So".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Dziś o] LT",nextDay:"[Jutro o] LT",nextWeek:function(){switch(this.day()){case 0:return"[W niedzielę o] LT";case 2:return"[We wtorek o] LT";case 3:return"[W środę o] LT";case 6:return"[W sobotę o] LT";default:return"[W] dddd [o] LT"}},lastDay:"[Wczoraj o] LT",lastWeek:function(){switch(this.day()){case 0:return"[W zeszłą niedzielę o] LT";case 3:return"[W zeszłą środę o] LT";case 6:return"[W zeszłą sobotę o] LT";default:return"[W zeszły] dddd [o] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"%s temu",s:"kilka sekund",ss:i,m:i,mm:i,h:i,hh:i,d:"1 dzień",dd:"%d dni",M:"miesiąc",MM:i,y:"rok",yy:i},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(a(0))},function(e,t,a){!function(e){"use strict";e.defineLocale("pt",{months:"Janeiro_Fevereiro_Março_Abril_Maio_Junho_Julho_Agosto_Setembro_Outubro_Novembro_Dezembro".split("_"),monthsShort:"Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez".split("_"),weekdays:"Domingo_Segunda-feira_Terça-feira_Quarta-feira_Quinta-feira_Sexta-feira_Sábado".split("_"),weekdaysShort:"Dom_Seg_Ter_Qua_Qui_Sex_Sáb".split("_"),weekdaysMin:"Do_2ª_3ª_4ª_5ª_6ª_Sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY HH:mm",LLLL:"dddd, D [de] MMMM [de] YYYY HH:mm"},calendar:{sameDay:"[Hoje às] LT",nextDay:"[Amanhã às] LT",nextWeek:"dddd [às] LT",lastDay:"[Ontem às] LT",lastWeek:function(){return 0===this.day()||6===this.day()?"[Último] dddd [às] LT":"[Última] dddd [às] LT"},sameElse:"L"},relativeTime:{future:"em %s",past:"há %s",s:"segundos",ss:"%d segundos",m:"um minuto",mm:"%d minutos",h:"uma hora",hh:"%d horas",d:"um dia",dd:"%d dias",M:"um mês",MM:"%d meses",y:"um ano",yy:"%d anos"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(a(0))},function(e,t,a){!function(e){"use strict";e.defineLocale("pt-br",{months:"Janeiro_Fevereiro_Março_Abril_Maio_Junho_Julho_Agosto_Setembro_Outubro_Novembro_Dezembro".split("_"),monthsShort:"Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez".split("_"),weekdays:"Domingo_Segunda-feira_Terça-feira_Quarta-feira_Quinta-feira_Sexta-feira_Sábado".split("_"),weekdaysShort:"Dom_Seg_Ter_Qua_Qui_Sex_Sáb".split("_"),weekdaysMin:"Do_2ª_3ª_4ª_5ª_6ª_Sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY [às] HH:mm",LLLL:"dddd, D [de] MMMM [de] YYYY [às] HH:mm"},calendar:{sameDay:"[Hoje às] LT",nextDay:"[Amanhã às] LT",nextWeek:"dddd [às] LT",lastDay:"[Ontem às] LT",lastWeek:function(){return 0===this.day()||6===this.day()?"[Último] dddd [às] LT":"[Última] dddd [às] LT"},sameElse:"L"},relativeTime:{future:"em %s",past:"há %s",s:"poucos segundos",ss:"%d segundos",m:"um minuto",mm:"%d minutos",h:"uma hora",hh:"%d horas",d:"um dia",dd:"%d dias",M:"um mês",MM:"%d meses",y:"um ano",yy:"%d anos"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº"})}(a(0))},function(e,t,a){!function(e){"use strict";function t(e,t,a){var n=" ";return(e%100>=20||e>=100&&e%100===0)&&(n=" de "),e+n+{ss:"secunde",mm:"minute",hh:"ore",dd:"zile",MM:"luni",yy:"ani"}[a]}e.defineLocale("ro",{months:"ianuarie_februarie_martie_aprilie_mai_iunie_iulie_august_septembrie_octombrie_noiembrie_decembrie".split("_"),monthsShort:"ian._febr._mart._apr._mai_iun._iul._aug._sept._oct._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"duminică_luni_marți_miercuri_joi_vineri_sâmbătă".split("_"),weekdaysShort:"Dum_Lun_Mar_Mie_Joi_Vin_Sâm".split("_"),weekdaysMin:"Du_Lu_Ma_Mi_Jo_Vi_Sâ".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY H:mm",LLLL:"dddd, D MMMM YYYY H:mm"},calendar:{sameDay:"[azi la] LT",nextDay:"[mâine la] LT",nextWeek:"dddd [la] LT",lastDay:"[ieri la] LT",lastWeek:"[fosta] dddd [la] LT",sameElse:"L"},relativeTime:{future:"peste %s",past:"%s în urmă",s:"câteva secunde",ss:t,m:"un minut",mm:t,h:"o oră",hh:t,d:"o zi",dd:t,M:"o lună",MM:t,y:"un an",yy:t},week:{dow:1,doy:7}})}(a(0))},function(e,t,a){!function(e){"use strict";function t(e,t,a){return"m"===a?t?"минута":"минуту":e+" "+function(e,t){var a=e.split("_");return t%10===1&&t%100!==11?a[0]:t%10>=2&&t%10<=4&&(t%100<10||t%100>=20)?a[1]:a[2]}({ss:t?"секунда_секунды_секунд":"секунду_секунды_секунд",mm:t?"минута_минуты_минут":"минуту_минуты_минут",hh:"час_часа_часов",dd:"день_дня_дней",MM:"месяц_месяца_месяцев",yy:"год_года_лет"}[a],+e)}var a=[/^янв/i,/^фев/i,/^мар/i,/^апр/i,/^ма[йя]/i,/^июн/i,/^июл/i,/^авг/i,/^сен/i,/^окт/i,/^ноя/i,/^дек/i];e.defineLocale("ru",{months:{format:"января_февраля_марта_апреля_мая_июня_июля_августа_сентября_октября_ноября_декабря".split("_"),standalone:"январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь".split("_")},monthsShort:{format:"янв._февр._мар._апр._мая_июня_июля_авг._сент._окт._нояб._дек.".split("_"),standalone:"янв._февр._март_апр._май_июнь_июль_авг._сент._окт._нояб._дек.".split("_")},weekdays:{standalone:"воскресенье_понедельник_вторник_среда_четверг_пятница_суббота".split("_"),format:"воскресенье_понедельник_вторник_среду_четверг_пятницу_субботу".split("_"),isFormat:/\[ ?[Вв] ?(?:прошлую|следующую|эту)? ?\] ?dddd/},weekdaysShort:"вс_пн_вт_ср_чт_пт_сб".split("_"),weekdaysMin:"вс_пн_вт_ср_чт_пт_сб".split("_"),monthsParse:a,longMonthsParse:a,shortMonthsParse:a,monthsRegex:/^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i,monthsShortRegex:/^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i,monthsStrictRegex:/^(январ[яь]|феврал[яь]|марта?|апрел[яь]|ма[яй]|июн[яь]|июл[яь]|августа?|сентябр[яь]|октябр[яь]|ноябр[яь]|декабр[яь])/i,monthsShortStrictRegex:/^(янв\.|февр?\.|мар[т.]|апр\.|ма[яй]|июн[ья.]|июл[ья.]|авг\.|сент?\.|окт\.|нояб?\.|дек\.)/i,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY г.",LLL:"D MMMM YYYY г., H:mm",LLLL:"dddd, D MMMM YYYY г., H:mm"},calendar:{sameDay:"[Сегодня, в] LT",nextDay:"[Завтра, в] LT",lastDay:"[Вчера, в] LT",nextWeek:function(e){if(e.week()===this.week())return 2===this.day()?"[Во] dddd, [в] LT":"[В] dddd, [в] LT";switch(this.day()){case 0:return"[В следующее] dddd, [в] LT";case 1:case 2:case 4:return"[В следующий] dddd, [в] LT";case 3:case 5:case 6:return"[В следующую] dddd, [в] LT"}},lastWeek:function(e){if(e.week()===this.week())return 2===this.day()?"[Во] dddd, [в] LT":"[В] dddd, [в] LT";switch(this.day()){case 0:return"[В прошлое] dddd, [в] LT";case 1:case 2:case 4:return"[В прошлый] dddd, [в] LT";case 3:case 5:case 6:return"[В прошлую] dddd, [в] LT"}},sameElse:"L"},relativeTime:{future:"через %s",past:"%s назад",s:"несколько секунд",ss:t,m:t,mm:t,h:"час",hh:t,d:"день",dd:t,M:"месяц",MM:t,y:"год",yy:t},meridiemParse:/ночи|утра|дня|вечера/i,isPM:function(e){return/^(дня|вечера)$/.test(e)},meridiem:function(e,t,a){return e<4?"ночи":e<12?"утра":e<17?"дня":"вечера"},dayOfMonthOrdinalParse:/\d{1,2}-(й|го|я)/,ordinal:function(e,t){switch(t){case"M":case"d":case"DDD":return e+"-й";case"D":return e+"-го";case"w":case"W":return e+"-я";default:return e}},week:{dow:1,doy:4}})}(a(0))},function(e,t,a){!function(e){"use strict";var t=["جنوري","فيبروري","مارچ","اپريل","مئي","جون","جولاءِ","آگسٽ","سيپٽمبر","آڪٽوبر","نومبر","ڊسمبر"],a=["آچر","سومر","اڱارو","اربع","خميس","جمع","ڇنڇر"];e.defineLocale("sd",{months:t,monthsShort:t,weekdays:a,weekdaysShort:a,weekdaysMin:a,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd، D MMMM YYYY HH:mm"},meridiemParse:/صبح|شام/,isPM:function(e){return"شام"===e},meridiem:function(e,t,a){return e<12?"صبح":"شام"},calendar:{sameDay:"[اڄ] LT",nextDay:"[سڀاڻي] LT",nextWeek:"dddd [اڳين هفتي تي] LT",lastDay:"[ڪالهه] LT",lastWeek:"[گزريل هفتي] dddd [تي] LT",sameElse:"L"},relativeTime:{future:"%s پوء",past:"%s اڳ",s:"چند سيڪنڊ",ss:"%d سيڪنڊ",m:"هڪ منٽ",mm:"%d منٽ",h:"هڪ ڪلاڪ",hh:"%d ڪلاڪ",d:"هڪ ڏينهن",dd:"%d ڏينهن",M:"هڪ مهينو",MM:"%d مهينا",y:"هڪ سال",yy:"%d سال"},preparse:function(e){return e.replace(/،/g,",")},postformat:function(e){return e.replace(/,/g,"،")},week:{dow:1,doy:4}})}(a(0))},function(e,t,a){!function(e){"use strict";e.defineLocale("se",{months:"ođđajagemánnu_guovvamánnu_njukčamánnu_cuoŋománnu_miessemánnu_geassemánnu_suoidnemánnu_borgemánnu_čakčamánnu_golggotmánnu_skábmamánnu_juovlamánnu".split("_"),monthsShort:"ođđj_guov_njuk_cuo_mies_geas_suoi_borg_čakč_golg_skáb_juov".split("_"),weekdays:"sotnabeaivi_vuossárga_maŋŋebárga_gaskavahkku_duorastat_bearjadat_lávvardat".split("_"),weekdaysShort:"sotn_vuos_maŋ_gask_duor_bear_láv".split("_"),weekdaysMin:"s_v_m_g_d_b_L".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"MMMM D. [b.] YYYY",LLL:"MMMM D. [b.] YYYY [ti.] HH:mm",LLLL:"dddd, MMMM D. [b.] YYYY [ti.] HH:mm"},calendar:{sameDay:"[otne ti] LT",nextDay:"[ihttin ti] LT",nextWeek:"dddd [ti] LT",lastDay:"[ikte ti] LT",lastWeek:"[ovddit] dddd [ti] LT",sameElse:"L"},relativeTime:{future:"%s geažes",past:"maŋit %s",s:"moadde sekunddat",ss:"%d sekunddat",m:"okta minuhta",mm:"%d minuhtat",h:"okta diimmu",hh:"%d diimmut",d:"okta beaivi",dd:"%d beaivvit",M:"okta mánnu",MM:"%d mánut",y:"okta jahki",yy:"%d jagit"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(a(0))},function(e,t,a){!function(e){"use strict";e.defineLocale("si",{months:"ජනවාරි_පෙබරවාරි_මාර්තු_අප්‍රේල්_මැයි_ජූනි_ජූලි_අගෝස්තු_සැප්තැම්බර්_ඔක්තෝබර්_නොවැම්බර්_දෙසැම්බර්".split("_"),monthsShort:"ජන_පෙබ_මාර්_අප්_මැයි_ජූනි_ජූලි_අගෝ_සැප්_ඔක්_නොවැ_දෙසැ".split("_"),weekdays:"ඉරිදා_සඳුදා_අඟහරුවාදා_බදාදා_බ්‍රහස්පතින්දා_සිකුරාදා_සෙනසුරාදා".split("_"),weekdaysShort:"ඉරි_සඳු_අඟ_බදා_බ්‍රහ_සිකු_සෙන".split("_"),weekdaysMin:"ඉ_ස_අ_බ_බ්‍ර_සි_සෙ".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"a h:mm",LTS:"a h:mm:ss",L:"YYYY/MM/DD",LL:"YYYY MMMM D",LLL:"YYYY MMMM D, a h:mm",LLLL:"YYYY MMMM D [වැනි] dddd, a h:mm:ss"},calendar:{sameDay:"[අද] LT[ට]",nextDay:"[හෙට] LT[ට]",nextWeek:"dddd LT[ට]",lastDay:"[ඊයේ] LT[ට]",lastWeek:"[පසුගිය] dddd LT[ට]",sameElse:"L"},relativeTime:{future:"%sකින්",past:"%sකට පෙර",s:"තත්පර කිහිපය",ss:"තත්පර %d",m:"මිනිත්තුව",mm:"මිනිත්තු %d",h:"පැය",hh:"පැය %d",d:"දිනය",dd:"දින %d",M:"මාසය",MM:"මාස %d",y:"වසර",yy:"වසර %d"},dayOfMonthOrdinalParse:/\d{1,2} වැනි/,ordinal:function(e){return e+" වැනි"},meridiemParse:/පෙර වරු|පස් වරු|පෙ.ව|ප.ව./,isPM:function(e){return"ප.ව."===e||"පස් වරු"===e},meridiem:function(e,t,a){return e>11?a?"ප.ව.":"පස් වරු":a?"පෙ.ව.":"පෙර වරු"}})}(a(0))},function(e,t,a){!function(e){"use strict";var t="január_február_marec_apríl_máj_jún_júl_august_september_október_november_december".split("_"),a="jan_feb_mar_apr_máj_jún_júl_aug_sep_okt_nov_dec".split("_");function n(e){return e>1&&e<5}function i(e,t,a,i){var r=e+" ";switch(a){case"s":return t||i?"pár sekúnd":"pár sekundami";case"ss":return t||i?r+(n(e)?"sekundy":"sekúnd"):r+"sekundami";case"m":return t?"minúta":i?"minútu":"minútou";case"mm":return t||i?r+(n(e)?"minúty":"minút"):r+"minútami";case"h":return t?"hodina":i?"hodinu":"hodinou";case"hh":return t||i?r+(n(e)?"hodiny":"hodín"):r+"hodinami";case"d":return t||i?"deň":"dňom";case"dd":return t||i?r+(n(e)?"dni":"dní"):r+"dňami";case"M":return t||i?"mesiac":"mesiacom";case"MM":return t||i?r+(n(e)?"mesiace":"mesiacov"):r+"mesiacmi";case"y":return t||i?"rok":"rokom";case"yy":return t||i?r+(n(e)?"roky":"rokov"):r+"rokmi"}}e.defineLocale("sk",{months:t,monthsShort:a,weekdays:"nedeľa_pondelok_utorok_streda_štvrtok_piatok_sobota".split("_"),weekdaysShort:"ne_po_ut_st_št_pi_so".split("_"),weekdaysMin:"ne_po_ut_st_št_pi_so".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd D. MMMM YYYY H:mm"},calendar:{sameDay:"[dnes o] LT",nextDay:"[zajtra o] LT",nextWeek:function(){switch(this.day()){case 0:return"[v nedeľu o] LT";case 1:case 2:return"[v] dddd [o] LT";case 3:return"[v stredu o] LT";case 4:return"[vo štvrtok o] LT";case 5:return"[v piatok o] LT";case 6:return"[v sobotu o] LT"}},lastDay:"[včera o] LT",lastWeek:function(){switch(this.day()){case 0:return"[minulú nedeľu o] LT";case 1:case 2:return"[minulý] dddd [o] LT";case 3:return"[minulú stredu o] LT";case 4:case 5:return"[minulý] dddd [o] LT";case 6:return"[minulú sobotu o] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"pred %s",s:i,ss:i,m:i,mm:i,h:i,hh:i,d:i,dd:i,M:i,MM:i,y:i,yy:i},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(a(0))},function(e,t,a){!function(e){"use strict";function t(e,t,a,n){var i=e+" ";switch(a){case"s":return t||n?"nekaj sekund":"nekaj sekundami";case"ss":return i+=1===e?t?"sekundo":"sekundi":2===e?t||n?"sekundi":"sekundah":e<5?t||n?"sekunde":"sekundah":"sekund";case"m":return t?"ena minuta":"eno minuto";case"mm":return i+=1===e?t?"minuta":"minuto":2===e?t||n?"minuti":"minutama":e<5?t||n?"minute":"minutami":t||n?"minut":"minutami";case"h":return t?"ena ura":"eno uro";case"hh":return i+=1===e?t?"ura":"uro":2===e?t||n?"uri":"urama":e<5?t||n?"ure":"urami":t||n?"ur":"urami";case"d":return t||n?"en dan":"enim dnem";case"dd":return i+=1===e?t||n?"dan":"dnem":2===e?t||n?"dni":"dnevoma":t||n?"dni":"dnevi";case"M":return t||n?"en mesec":"enim mesecem";case"MM":return i+=1===e?t||n?"mesec":"mesecem":2===e?t||n?"meseca":"mesecema":e<5?t||n?"mesece":"meseci":t||n?"mesecev":"meseci";case"y":return t||n?"eno leto":"enim letom";case"yy":return i+=1===e?t||n?"leto":"letom":2===e?t||n?"leti":"letoma":e<5?t||n?"leta":"leti":t||n?"let":"leti"}}e.defineLocale("sl",{months:"januar_februar_marec_april_maj_junij_julij_avgust_september_oktober_november_december".split("_"),monthsShort:"jan._feb._mar._apr._maj._jun._jul._avg._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedelja_ponedeljek_torek_sreda_četrtek_petek_sobota".split("_"),weekdaysShort:"ned._pon._tor._sre._čet._pet._sob.".split("_"),weekdaysMin:"ne_po_to_sr_če_pe_so".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danes ob] LT",nextDay:"[jutri ob] LT",nextWeek:function(){switch(this.day()){case 0:return"[v] [nedeljo] [ob] LT";case 3:return"[v] [sredo] [ob] LT";case 6:return"[v] [soboto] [ob] LT";case 1:case 2:case 4:case 5:return"[v] dddd [ob] LT"}},lastDay:"[včeraj ob] LT",lastWeek:function(){switch(this.day()){case 0:return"[prejšnjo] [nedeljo] [ob] LT";case 3:return"[prejšnjo] [sredo] [ob] LT";case 6:return"[prejšnjo] [soboto] [ob] LT";case 1:case 2:case 4:case 5:return"[prejšnji] dddd [ob] LT"}},sameElse:"L"},relativeTime:{future:"čez %s",past:"pred %s",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(a(0))},function(e,t,a){!function(e){"use strict";e.defineLocale("sq",{months:"Janar_Shkurt_Mars_Prill_Maj_Qershor_Korrik_Gusht_Shtator_Tetor_Nëntor_Dhjetor".split("_"),monthsShort:"Jan_Shk_Mar_Pri_Maj_Qer_Kor_Gus_Sht_Tet_Nën_Dhj".split("_"),weekdays:"E Diel_E Hënë_E Martë_E Mërkurë_E Enjte_E Premte_E Shtunë".split("_"),weekdaysShort:"Die_Hën_Mar_Mër_Enj_Pre_Sht".split("_"),weekdaysMin:"D_H_Ma_Më_E_P_Sh".split("_"),weekdaysParseExact:!0,meridiemParse:/PD|MD/,isPM:function(e){return"M"===e.charAt(0)},meridiem:function(e,t,a){return e<12?"PD":"MD"},longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Sot në] LT",nextDay:"[Nesër në] LT",nextWeek:"dddd [në] LT",lastDay:"[Dje në] LT",lastWeek:"dddd [e kaluar në] LT",sameElse:"L"},relativeTime:{future:"në %s",past:"%s më parë",s:"disa sekonda",ss:"%d sekonda",m:"një minutë",mm:"%d minuta",h:"një orë",hh:"%d orë",d:"një ditë",dd:"%d ditë",M:"një muaj",MM:"%d muaj",y:"një vit",yy:"%d vite"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(a(0))},function(e,t,a){!function(e){"use strict";var t={words:{ss:["sekunda","sekunde","sekundi"],m:["jedan minut","jedne minute"],mm:["minut","minute","minuta"],h:["jedan sat","jednog sata"],hh:["sat","sata","sati"],dd:["dan","dana","dana"],MM:["mesec","meseca","meseci"],yy:["godina","godine","godina"]},correctGrammaticalCase:function(e,t){return 1===e?t[0]:e>=2&&e<=4?t[1]:t[2]},translate:function(e,a,n){var i=t.words[n];return 1===n.length?a?i[0]:i[1]:e+" "+t.correctGrammaticalCase(e,i)}};e.defineLocale("sr",{months:"januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar".split("_"),monthsShort:"jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedelja_ponedeljak_utorak_sreda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sre._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedelju] [u] LT";case 3:return"[u] [sredu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[juče u] LT",lastWeek:function(){return["[prošle] [nedelje] [u] LT","[prošlog] [ponedeljka] [u] LT","[prošlog] [utorka] [u] LT","[prošle] [srede] [u] LT","[prošlog] [četvrtka] [u] LT","[prošlog] [petka] [u] LT","[prošle] [subote] [u] LT"][this.day()]},sameElse:"L"},relativeTime:{future:"za %s",past:"pre %s",s:"nekoliko sekundi",ss:t.translate,m:t.translate,mm:t.translate,h:t.translate,hh:t.translate,d:"dan",dd:t.translate,M:"mesec",MM:t.translate,y:"godinu",yy:t.translate},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(a(0))},function(e,t,a){!function(e){"use strict";var t={words:{ss:["секунда","секунде","секунди"],m:["један минут","једне минуте"],mm:["минут","минуте","минута"],h:["један сат","једног сата"],hh:["сат","сата","сати"],dd:["дан","дана","дана"],MM:["месец","месеца","месеци"],yy:["година","године","година"]},correctGrammaticalCase:function(e,t){return 1===e?t[0]:e>=2&&e<=4?t[1]:t[2]},translate:function(e,a,n){var i=t.words[n];return 1===n.length?a?i[0]:i[1]:e+" "+t.correctGrammaticalCase(e,i)}};e.defineLocale("sr-cyrl",{months:"јануар_фебруар_март_април_мај_јун_јул_август_септембар_октобар_новембар_децембар".split("_"),monthsShort:"јан._феб._мар._апр._мај_јун_јул_авг._сеп._окт._нов._дец.".split("_"),monthsParseExact:!0,weekdays:"недеља_понедељак_уторак_среда_четвртак_петак_субота".split("_"),weekdaysShort:"нед._пон._уто._сре._чет._пет._суб.".split("_"),weekdaysMin:"не_по_ут_ср_че_пе_су".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[данас у] LT",nextDay:"[сутра у] LT",nextWeek:function(){switch(this.day()){case 0:return"[у] [недељу] [у] LT";case 3:return"[у] [среду] [у] LT";case 6:return"[у] [суботу] [у] LT";case 1:case 2:case 4:case 5:return"[у] dddd [у] LT"}},lastDay:"[јуче у] LT",lastWeek:function(){return["[прошле] [недеље] [у] LT","[прошлог] [понедељка] [у] LT","[прошлог] [уторка] [у] LT","[прошле] [среде] [у] LT","[прошлог] [четвртка] [у] LT","[прошлог] [петка] [у] LT","[прошле] [суботе] [у] LT"][this.day()]},sameElse:"L"},relativeTime:{future:"за %s",past:"пре %s",s:"неколико секунди",ss:t.translate,m:t.translate,mm:t.translate,h:t.translate,hh:t.translate,d:"дан",dd:t.translate,M:"месец",MM:t.translate,y:"годину",yy:t.translate},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(a(0))},function(e,t,a){!function(e){"use strict";e.defineLocale("ss",{months:"Bhimbidvwane_Indlovana_Indlov'lenkhulu_Mabasa_Inkhwekhweti_Inhlaba_Kholwane_Ingci_Inyoni_Imphala_Lweti_Ingongoni".split("_"),monthsShort:"Bhi_Ina_Inu_Mab_Ink_Inh_Kho_Igc_Iny_Imp_Lwe_Igo".split("_"),weekdays:"Lisontfo_Umsombuluko_Lesibili_Lesitsatfu_Lesine_Lesihlanu_Umgcibelo".split("_"),weekdaysShort:"Lis_Umb_Lsb_Les_Lsi_Lsh_Umg".split("_"),weekdaysMin:"Li_Us_Lb_Lt_Ls_Lh_Ug".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Namuhla nga] LT",nextDay:"[Kusasa nga] LT",nextWeek:"dddd [nga] LT",lastDay:"[Itolo nga] LT",lastWeek:"dddd [leliphelile] [nga] LT",sameElse:"L"},relativeTime:{future:"nga %s",past:"wenteka nga %s",s:"emizuzwana lomcane",ss:"%d mzuzwana",m:"umzuzu",mm:"%d emizuzu",h:"lihora",hh:"%d emahora",d:"lilanga",dd:"%d emalanga",M:"inyanga",MM:"%d tinyanga",y:"umnyaka",yy:"%d iminyaka"},meridiemParse:/ekuseni|emini|entsambama|ebusuku/,meridiem:function(e,t,a){return e<11?"ekuseni":e<15?"emini":e<19?"entsambama":"ebusuku"},meridiemHour:function(e,t){return 12===e&&(e=0),"ekuseni"===t?e:"emini"===t?e>=11?e:e+12:"entsambama"===t||"ebusuku"===t?0===e?0:e+12:void 0},dayOfMonthOrdinalParse:/\d{1,2}/,ordinal:"%d",week:{dow:1,doy:4}})}(a(0))},function(e,t,a){!function(e){"use strict";e.defineLocale("sv",{months:"januari_februari_mars_april_maj_juni_juli_augusti_september_oktober_november_december".split("_"),monthsShort:"jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec".split("_"),weekdays:"söndag_måndag_tisdag_onsdag_torsdag_fredag_lördag".split("_"),weekdaysShort:"sön_mån_tis_ons_tor_fre_lör".split("_"),weekdaysMin:"sö_må_ti_on_to_fr_lö".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [kl.] HH:mm",LLLL:"dddd D MMMM YYYY [kl.] HH:mm",lll:"D MMM YYYY HH:mm",llll:"ddd D MMM YYYY HH:mm"},calendar:{sameDay:"[Idag] LT",nextDay:"[Imorgon] LT",lastDay:"[Igår] LT",nextWeek:"[På] dddd LT",lastWeek:"[I] dddd[s] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"för %s sedan",s:"några sekunder",ss:"%d sekunder",m:"en minut",mm:"%d minuter",h:"en timme",hh:"%d timmar",d:"en dag",dd:"%d dagar",M:"en månad",MM:"%d månader",y:"ett år",yy:"%d år"},dayOfMonthOrdinalParse:/\d{1,2}(e|a)/,ordinal:function(e){var t=e%10;return e+(1===~~(e%100/10)?"e":1===t?"a":2===t?"a":"e")},week:{dow:1,doy:4}})}(a(0))},function(e,t,a){!function(e){"use strict";e.defineLocale("sw",{months:"Januari_Februari_Machi_Aprili_Mei_Juni_Julai_Agosti_Septemba_Oktoba_Novemba_Desemba".split("_"),monthsShort:"Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ago_Sep_Okt_Nov_Des".split("_"),weekdays:"Jumapili_Jumatatu_Jumanne_Jumatano_Alhamisi_Ijumaa_Jumamosi".split("_"),weekdaysShort:"Jpl_Jtat_Jnne_Jtan_Alh_Ijm_Jmos".split("_"),weekdaysMin:"J2_J3_J4_J5_Al_Ij_J1".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[leo saa] LT",nextDay:"[kesho saa] LT",nextWeek:"[wiki ijayo] dddd [saat] LT",lastDay:"[jana] LT",lastWeek:"[wiki iliyopita] dddd [saat] LT",sameElse:"L"},relativeTime:{future:"%s baadaye",past:"tokea %s",s:"hivi punde",ss:"sekunde %d",m:"dakika moja",mm:"dakika %d",h:"saa limoja",hh:"masaa %d",d:"siku moja",dd:"masiku %d",M:"mwezi mmoja",MM:"miezi %d",y:"mwaka mmoja",yy:"miaka %d"},week:{dow:1,doy:7}})}(a(0))},function(e,t,a){!function(e){"use strict";var t={1:"௧",2:"௨",3:"௩",4:"௪",5:"௫",6:"௬",7:"௭",8:"௮",9:"௯",0:"௦"},a={"௧":"1","௨":"2","௩":"3","௪":"4","௫":"5","௬":"6","௭":"7","௮":"8","௯":"9","௦":"0"};e.defineLocale("ta",{months:"ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்".split("_"),monthsShort:"ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்".split("_"),weekdays:"ஞாயிற்றுக்கிழமை_திங்கட்கிழமை_செவ்வாய்கிழமை_புதன்கிழமை_வியாழக்கிழமை_வெள்ளிக்கிழமை_சனிக்கிழமை".split("_"),weekdaysShort:"ஞாயிறு_திங்கள்_செவ்வாய்_புதன்_வியாழன்_வெள்ளி_சனி".split("_"),weekdaysMin:"ஞா_தி_செ_பு_வி_வெ_ச".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, HH:mm",LLLL:"dddd, D MMMM YYYY, HH:mm"},calendar:{sameDay:"[இன்று] LT",nextDay:"[நாளை] LT",nextWeek:"dddd, LT",lastDay:"[நேற்று] LT",lastWeek:"[கடந்த வாரம்] dddd, LT",sameElse:"L"},relativeTime:{future:"%s இல்",past:"%s முன்",s:"ஒரு சில விநாடிகள்",ss:"%d விநாடிகள்",m:"ஒரு நிமிடம்",mm:"%d நிமிடங்கள்",h:"ஒரு மணி நேரம்",hh:"%d மணி நேரம்",d:"ஒரு நாள்",dd:"%d நாட்கள்",M:"ஒரு மாதம்",MM:"%d மாதங்கள்",y:"ஒரு வருடம்",yy:"%d ஆண்டுகள்"},dayOfMonthOrdinalParse:/\d{1,2}வது/,ordinal:function(e){return e+"வது"},preparse:function(e){return e.replace(/[௧௨௩௪௫௬௭௮௯௦]/g,(function(e){return a[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/யாமம்|வைகறை|காலை|நண்பகல்|எற்பாடு|மாலை/,meridiem:function(e,t,a){return e<2?" யாமம்":e<6?" வைகறை":e<10?" காலை":e<14?" நண்பகல்":e<18?" எற்பாடு":e<22?" மாலை":" யாமம்"},meridiemHour:function(e,t){return 12===e&&(e=0),"யாமம்"===t?e<2?e:e+12:"வைகறை"===t||"காலை"===t?e:"நண்பகல்"===t&&e>=10?e:e+12},week:{dow:0,doy:6}})}(a(0))},function(e,t,a){!function(e){"use strict";e.defineLocale("te",{months:"జనవరి_ఫిబ్రవరి_మార్చి_ఏప్రిల్_మే_జూన్_జులై_ఆగస్టు_సెప్టెంబర్_అక్టోబర్_నవంబర్_డిసెంబర్".split("_"),monthsShort:"జన._ఫిబ్ర._మార్చి_ఏప్రి._మే_జూన్_జులై_ఆగ._సెప్._అక్టో._నవ._డిసె.".split("_"),monthsParseExact:!0,weekdays:"ఆదివారం_సోమవారం_మంగళవారం_బుధవారం_గురువారం_శుక్రవారం_శనివారం".split("_"),weekdaysShort:"ఆది_సోమ_మంగళ_బుధ_గురు_శుక్ర_శని".split("_"),weekdaysMin:"ఆ_సో_మం_బు_గు_శు_శ".split("_"),longDateFormat:{LT:"A h:mm",LTS:"A h:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm",LLLL:"dddd, D MMMM YYYY, A h:mm"},calendar:{sameDay:"[నేడు] LT",nextDay:"[రేపు] LT",nextWeek:"dddd, LT",lastDay:"[నిన్న] LT",lastWeek:"[గత] dddd, LT",sameElse:"L"},relativeTime:{future:"%s లో",past:"%s క్రితం",s:"కొన్ని క్షణాలు",ss:"%d సెకన్లు",m:"ఒక నిమిషం",mm:"%d నిమిషాలు",h:"ఒక గంట",hh:"%d గంటలు",d:"ఒక రోజు",dd:"%d రోజులు",M:"ఒక నెల",MM:"%d నెలలు",y:"ఒక సంవత్సరం",yy:"%d సంవత్సరాలు"},dayOfMonthOrdinalParse:/\d{1,2}వ/,ordinal:"%dవ",meridiemParse:/రాత్రి|ఉదయం|మధ్యాహ్నం|సాయంత్రం/,meridiemHour:function(e,t){return 12===e&&(e=0),"రాత్రి"===t?e<4?e:e+12:"ఉదయం"===t?e:"మధ్యాహ్నం"===t?e>=10?e:e+12:"సాయంత్రం"===t?e+12:void 0},meridiem:function(e,t,a){return e<4?"రాత్రి":e<10?"ఉదయం":e<17?"మధ్యాహ్నం":e<20?"సాయంత్రం":"రాత్రి"},week:{dow:0,doy:6}})}(a(0))},function(e,t,a){!function(e){"use strict";e.defineLocale("tet",{months:"Janeiru_Fevereiru_Marsu_Abril_Maiu_Juñu_Jullu_Agustu_Setembru_Outubru_Novembru_Dezembru".split("_"),monthsShort:"Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez".split("_"),weekdays:"Domingu_Segunda_Tersa_Kuarta_Kinta_Sesta_Sabadu".split("_"),weekdaysShort:"Dom_Seg_Ters_Kua_Kint_Sest_Sab".split("_"),weekdaysMin:"Do_Seg_Te_Ku_Ki_Ses_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Ohin iha] LT",nextDay:"[Aban iha] LT",nextWeek:"dddd [iha] LT",lastDay:"[Horiseik iha] LT",lastWeek:"dddd [semana kotuk] [iha] LT",sameElse:"L"},relativeTime:{future:"iha %s",past:"%s liuba",s:"minutu balun",ss:"minutu %d",m:"minutu ida",mm:"minutu %d",h:"oras ida",hh:"oras %d",d:"loron ida",dd:"loron %d",M:"fulan ida",MM:"fulan %d",y:"tinan ida",yy:"tinan %d"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1===~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}})}(a(0))},function(e,t,a){!function(e){"use strict";var t={0:"-ум",1:"-ум",2:"-юм",3:"-юм",4:"-ум",5:"-ум",6:"-ум",7:"-ум",8:"-ум",9:"-ум",10:"-ум",12:"-ум",13:"-ум",20:"-ум",30:"-юм",40:"-ум",50:"-ум",60:"-ум",70:"-ум",80:"-ум",90:"-ум",100:"-ум"};e.defineLocale("tg",{months:"январ_феврал_март_апрел_май_июн_июл_август_сентябр_октябр_ноябр_декабр".split("_"),monthsShort:"янв_фев_мар_апр_май_июн_июл_авг_сен_окт_ноя_дек".split("_"),weekdays:"якшанбе_душанбе_сешанбе_чоршанбе_панҷшанбе_ҷумъа_шанбе".split("_"),weekdaysShort:"яшб_дшб_сшб_чшб_пшб_ҷум_шнб".split("_"),weekdaysMin:"яш_дш_сш_чш_пш_ҷм_шб".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Имрӯз соати] LT",nextDay:"[Пагоҳ соати] LT",lastDay:"[Дирӯз соати] LT",nextWeek:"dddd[и] [ҳафтаи оянда соати] LT",lastWeek:"dddd[и] [ҳафтаи гузашта соати] LT",sameElse:"L"},relativeTime:{future:"баъди %s",past:"%s пеш",s:"якчанд сония",m:"як дақиқа",mm:"%d дақиқа",h:"як соат",hh:"%d соат",d:"як рӯз",dd:"%d рӯз",M:"як моҳ",MM:"%d моҳ",y:"як сол",yy:"%d сол"},meridiemParse:/шаб|субҳ|рӯз|бегоҳ/,meridiemHour:function(e,t){return 12===e&&(e=0),"шаб"===t?e<4?e:e+12:"субҳ"===t?e:"рӯз"===t?e>=11?e:e+12:"бегоҳ"===t?e+12:void 0},meridiem:function(e,t,a){return e<4?"шаб":e<11?"субҳ":e<16?"рӯз":e<19?"бегоҳ":"шаб"},dayOfMonthOrdinalParse:/\d{1,2}-(ум|юм)/,ordinal:function(e){return e+(t[e]||t[e%10]||t[e>=100?100:null])},week:{dow:1,doy:7}})}(a(0))},function(e,t,a){!function(e){"use strict";e.defineLocale("th",{months:"มกราคม_กุมภาพันธ์_มีนาคม_เมษายน_พฤษภาคม_มิถุนายน_กรกฎาคม_สิงหาคม_กันยายน_ตุลาคม_พฤศจิกายน_ธันวาคม".split("_"),monthsShort:"ม.ค._ก.พ._มี.ค._เม.ย._พ.ค._มิ.ย._ก.ค._ส.ค._ก.ย._ต.ค._พ.ย._ธ.ค.".split("_"),monthsParseExact:!0,weekdays:"อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัสบดี_ศุกร์_เสาร์".split("_"),weekdaysShort:"อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัส_ศุกร์_เสาร์".split("_"),weekdaysMin:"อา._จ._อ._พ._พฤ._ศ._ส.".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY เวลา H:mm",LLLL:"วันddddที่ D MMMM YYYY เวลา H:mm"},meridiemParse:/ก่อนเที่ยง|หลังเที่ยง/,isPM:function(e){return"หลังเที่ยง"===e},meridiem:function(e,t,a){return e<12?"ก่อนเที่ยง":"หลังเที่ยง"},calendar:{sameDay:"[วันนี้ เวลา] LT",nextDay:"[พรุ่งนี้ เวลา] LT",nextWeek:"dddd[หน้า เวลา] LT",lastDay:"[เมื่อวานนี้ เวลา] LT",lastWeek:"[วัน]dddd[ที่แล้ว เวลา] LT",sameElse:"L"},relativeTime:{future:"อีก %s",past:"%sที่แล้ว",s:"ไม่กี่วินาที",ss:"%d วินาที",m:"1 นาที",mm:"%d นาที",h:"1 ชั่วโมง",hh:"%d ชั่วโมง",d:"1 วัน",dd:"%d วัน",M:"1 เดือน",MM:"%d เดือน",y:"1 ปี",yy:"%d ปี"}})}(a(0))},function(e,t,a){!function(e){"use strict";e.defineLocale("tl-ph",{months:"Enero_Pebrero_Marso_Abril_Mayo_Hunyo_Hulyo_Agosto_Setyembre_Oktubre_Nobyembre_Disyembre".split("_"),monthsShort:"Ene_Peb_Mar_Abr_May_Hun_Hul_Ago_Set_Okt_Nob_Dis".split("_"),weekdays:"Linggo_Lunes_Martes_Miyerkules_Huwebes_Biyernes_Sabado".split("_"),weekdaysShort:"Lin_Lun_Mar_Miy_Huw_Biy_Sab".split("_"),weekdaysMin:"Li_Lu_Ma_Mi_Hu_Bi_Sab".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"MM/D/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY HH:mm",LLLL:"dddd, MMMM DD, YYYY HH:mm"},calendar:{sameDay:"LT [ngayong araw]",nextDay:"[Bukas ng] LT",nextWeek:"LT [sa susunod na] dddd",lastDay:"LT [kahapon]",lastWeek:"LT [noong nakaraang] dddd",sameElse:"L"},relativeTime:{future:"sa loob ng %s",past:"%s ang nakalipas",s:"ilang segundo",ss:"%d segundo",m:"isang minuto",mm:"%d minuto",h:"isang oras",hh:"%d oras",d:"isang araw",dd:"%d araw",M:"isang buwan",MM:"%d buwan",y:"isang taon",yy:"%d taon"},dayOfMonthOrdinalParse:/\d{1,2}/,ordinal:function(e){return e},week:{dow:1,doy:4}})}(a(0))},function(e,t,a){!function(e){"use strict";var t="pagh_wa’_cha’_wej_loS_vagh_jav_Soch_chorgh_Hut".split("_");function a(e,a,n,i){var r=function(e){var a=Math.floor(e%1e3/100),n=Math.floor(e%100/10),i=e%10,r="";return a>0&&(r+=t[a]+"vatlh"),n>0&&(r+=(""!==r?" ":"")+t[n]+"maH"),i>0&&(r+=(""!==r?" ":"")+t[i]),""===r?"pagh":r}(e);switch(n){case"ss":return r+" lup";case"mm":return r+" tup";case"hh":return r+" rep";case"dd":return r+" jaj";case"MM":return r+" jar";case"yy":return r+" DIS"}}e.defineLocale("tlh",{months:"tera’ jar wa’_tera’ jar cha’_tera’ jar wej_tera’ jar loS_tera’ jar vagh_tera’ jar jav_tera’ jar Soch_tera’ jar chorgh_tera’ jar Hut_tera’ jar wa’maH_tera’ jar wa’maH wa’_tera’ jar wa’maH cha’".split("_"),monthsShort:"jar wa’_jar cha’_jar wej_jar loS_jar vagh_jar jav_jar Soch_jar chorgh_jar Hut_jar wa’maH_jar wa’maH wa’_jar wa’maH cha’".split("_"),monthsParseExact:!0,weekdays:"lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"),weekdaysShort:"lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"),weekdaysMin:"lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[DaHjaj] LT",nextDay:"[wa’leS] LT",nextWeek:"LLL",lastDay:"[wa’Hu’] LT",lastWeek:"LLL",sameElse:"L"},relativeTime:{future:function(e){var t=e;return t=-1!==e.indexOf("jaj")?t.slice(0,-3)+"leS":-1!==e.indexOf("jar")?t.slice(0,-3)+"waQ":-1!==e.indexOf("DIS")?t.slice(0,-3)+"nem":t+" pIq"},past:function(e){var t=e;return t=-1!==e.indexOf("jaj")?t.slice(0,-3)+"Hu’":-1!==e.indexOf("jar")?t.slice(0,-3)+"wen":-1!==e.indexOf("DIS")?t.slice(0,-3)+"ben":t+" ret"},s:"puS lup",ss:a,m:"wa’ tup",mm:a,h:"wa’ rep",hh:a,d:"wa’ jaj",dd:a,M:"wa’ jar",MM:a,y:"wa’ DIS",yy:a},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(a(0))},function(e,t,a){!function(e){"use strict";var t={1:"'inci",5:"'inci",8:"'inci",70:"'inci",80:"'inci",2:"'nci",7:"'nci",20:"'nci",50:"'nci",3:"'üncü",4:"'üncü",100:"'üncü",6:"'ncı",9:"'uncu",10:"'uncu",30:"'uncu",60:"'ıncı",90:"'ıncı"};e.defineLocale("tr",{months:"Ocak_Şubat_Mart_Nisan_Mayıs_Haziran_Temmuz_Ağustos_Eylül_Ekim_Kasım_Aralık".split("_"),monthsShort:"Oca_Şub_Mar_Nis_May_Haz_Tem_Ağu_Eyl_Eki_Kas_Ara".split("_"),weekdays:"Pazar_Pazartesi_Salı_Çarşamba_Perşembe_Cuma_Cumartesi".split("_"),weekdaysShort:"Paz_Pts_Sal_Çar_Per_Cum_Cts".split("_"),weekdaysMin:"Pz_Pt_Sa_Ça_Pe_Cu_Ct".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[bugün saat] LT",nextDay:"[yarın saat] LT",nextWeek:"[gelecek] dddd [saat] LT",lastDay:"[dün] LT",lastWeek:"[geçen] dddd [saat] LT",sameElse:"L"},relativeTime:{future:"%s sonra",past:"%s önce",s:"birkaç saniye",ss:"%d saniye",m:"bir dakika",mm:"%d dakika",h:"bir saat",hh:"%d saat",d:"bir gün",dd:"%d gün",M:"bir ay",MM:"%d ay",y:"bir yıl",yy:"%d yıl"},ordinal:function(e,a){switch(a){case"d":case"D":case"Do":case"DD":return e;default:if(0===e)return e+"'ıncı";var n=e%10;return e+(t[n]||t[e%100-n]||t[e>=100?100:null])}},week:{dow:1,doy:7}})}(a(0))},function(e,t,a){!function(e){"use strict";function t(e,t,a,n){var i={s:["viensas secunds","'iensas secunds"],ss:[e+" secunds",e+" secunds"],m:["'n míut","'iens míut"],mm:[e+" míuts",e+" míuts"],h:["'n þora","'iensa þora"],hh:[e+" þoras",e+" þoras"],d:["'n ziua","'iensa ziua"],dd:[e+" ziuas",e+" ziuas"],M:["'n mes","'iens mes"],MM:[e+" mesen",e+" mesen"],y:["'n ar","'iens ar"],yy:[e+" ars",e+" ars"]};return n?i[a][0]:t?i[a][0]:i[a][1]}e.defineLocale("tzl",{months:"Januar_Fevraglh_Març_Avrïu_Mai_Gün_Julia_Guscht_Setemvar_Listopäts_Noemvar_Zecemvar".split("_"),monthsShort:"Jan_Fev_Mar_Avr_Mai_Gün_Jul_Gus_Set_Lis_Noe_Zec".split("_"),weekdays:"Súladi_Lúneçi_Maitzi_Márcuri_Xhúadi_Viénerçi_Sáturi".split("_"),weekdaysShort:"Súl_Lún_Mai_Már_Xhú_Vié_Sát".split("_"),weekdaysMin:"Sú_Lú_Ma_Má_Xh_Vi_Sá".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD.MM.YYYY",LL:"D. MMMM [dallas] YYYY",LLL:"D. MMMM [dallas] YYYY HH.mm",LLLL:"dddd, [li] D. MMMM [dallas] YYYY HH.mm"},meridiemParse:/d\'o|d\'a/i,isPM:function(e){return"d'o"===e.toLowerCase()},meridiem:function(e,t,a){return e>11?a?"d'o":"D'O":a?"d'a":"D'A"},calendar:{sameDay:"[oxhi à] LT",nextDay:"[demà à] LT",nextWeek:"dddd [à] LT",lastDay:"[ieiri à] LT",lastWeek:"[sür el] dddd [lasteu à] LT",sameElse:"L"},relativeTime:{future:"osprei %s",past:"ja%s",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(a(0))},function(e,t,a){!function(e){"use strict";e.defineLocale("tzm",{months:"ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ".split("_"),monthsShort:"ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ".split("_"),weekdays:"ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),weekdaysShort:"ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),weekdaysMin:"ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[ⴰⵙⴷⵅ ⴴ] LT",nextDay:"[ⴰⵙⴽⴰ ⴴ] LT",nextWeek:"dddd [ⴴ] LT",lastDay:"[ⴰⵚⴰⵏⵜ ⴴ] LT",lastWeek:"dddd [ⴴ] LT",sameElse:"L"},relativeTime:{future:"ⴷⴰⴷⵅ ⵙ ⵢⴰⵏ %s",past:"ⵢⴰⵏ %s",s:"ⵉⵎⵉⴽ",ss:"%d ⵉⵎⵉⴽ",m:"ⵎⵉⵏⵓⴺ",mm:"%d ⵎⵉⵏⵓⴺ",h:"ⵙⴰⵄⴰ",hh:"%d ⵜⴰⵙⵙⴰⵄⵉⵏ",d:"ⴰⵙⵙ",dd:"%d oⵙⵙⴰⵏ",M:"ⴰⵢoⵓⵔ",MM:"%d ⵉⵢⵢⵉⵔⵏ",y:"ⴰⵙⴳⴰⵙ",yy:"%d ⵉⵙⴳⴰⵙⵏ"},week:{dow:6,doy:12}})}(a(0))},function(e,t,a){!function(e){"use strict";e.defineLocale("tzm-latn",{months:"innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir".split("_"),monthsShort:"innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir".split("_"),weekdays:"asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),weekdaysShort:"asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),weekdaysMin:"asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[asdkh g] LT",nextDay:"[aska g] LT",nextWeek:"dddd [g] LT",lastDay:"[assant g] LT",lastWeek:"dddd [g] LT",sameElse:"L"},relativeTime:{future:"dadkh s yan %s",past:"yan %s",s:"imik",ss:"%d imik",m:"minuḍ",mm:"%d minuḍ",h:"saɛa",hh:"%d tassaɛin",d:"ass",dd:"%d ossan",M:"ayowr",MM:"%d iyyirn",y:"asgas",yy:"%d isgasn"},week:{dow:6,doy:12}})}(a(0))},function(e,t,a){!function(e){"use strict";e.defineLocale("ug-cn",{months:"يانۋار_فېۋرال_مارت_ئاپرېل_ماي_ئىيۇن_ئىيۇل_ئاۋغۇست_سېنتەبىر_ئۆكتەبىر_نويابىر_دېكابىر".split("_"),monthsShort:"يانۋار_فېۋرال_مارت_ئاپرېل_ماي_ئىيۇن_ئىيۇل_ئاۋغۇست_سېنتەبىر_ئۆكتەبىر_نويابىر_دېكابىر".split("_"),weekdays:"يەكشەنبە_دۈشەنبە_سەيشەنبە_چارشەنبە_پەيشەنبە_جۈمە_شەنبە".split("_"),weekdaysShort:"يە_دۈ_سە_چا_پە_جۈ_شە".split("_"),weekdaysMin:"يە_دۈ_سە_چا_پە_جۈ_شە".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"YYYY-يىلىM-ئاينىڭD-كۈنى",LLL:"YYYY-يىلىM-ئاينىڭD-كۈنى، HH:mm",LLLL:"dddd، YYYY-يىلىM-ئاينىڭD-كۈنى، HH:mm"},meridiemParse:/يېرىم كېچە|سەھەر|چۈشتىن بۇرۇن|چۈش|چۈشتىن كېيىن|كەچ/,meridiemHour:function(e,t){return 12===e&&(e=0),"يېرىم كېچە"===t||"سەھەر"===t||"چۈشتىن بۇرۇن"===t?e:"چۈشتىن كېيىن"===t||"كەچ"===t?e+12:e>=11?e:e+12},meridiem:function(e,t,a){var n=100*e+t;return n<600?"يېرىم كېچە":n<900?"سەھەر":n<1130?"چۈشتىن بۇرۇن":n<1230?"چۈش":n<1800?"چۈشتىن كېيىن":"كەچ"},calendar:{sameDay:"[بۈگۈن سائەت] LT",nextDay:"[ئەتە سائەت] LT",nextWeek:"[كېلەركى] dddd [سائەت] LT",lastDay:"[تۆنۈگۈن] LT",lastWeek:"[ئالدىنقى] dddd [سائەت] LT",sameElse:"L"},relativeTime:{future:"%s كېيىن",past:"%s بۇرۇن",s:"نەچچە سېكونت",ss:"%d سېكونت",m:"بىر مىنۇت",mm:"%d مىنۇت",h:"بىر سائەت",hh:"%d سائەت",d:"بىر كۈن",dd:"%d كۈن",M:"بىر ئاي",MM:"%d ئاي",y:"بىر يىل",yy:"%d يىل"},dayOfMonthOrdinalParse:/\d{1,2}(-كۈنى|-ئاي|-ھەپتە)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"-كۈنى";case"w":case"W":return e+"-ھەپتە";default:return e}},preparse:function(e){return e.replace(/،/g,",")},postformat:function(e){return e.replace(/,/g,"،")},week:{dow:1,doy:7}})}(a(0))},function(e,t,a){!function(e){"use strict";function t(e,t,a){return"m"===a?t?"хвилина":"хвилину":"h"===a?t?"година":"годину":e+" "+function(e,t){var a=e.split("_");return t%10===1&&t%100!==11?a[0]:t%10>=2&&t%10<=4&&(t%100<10||t%100>=20)?a[1]:a[2]}({ss:t?"секунда_секунди_секунд":"секунду_секунди_секунд",mm:t?"хвилина_хвилини_хвилин":"хвилину_хвилини_хвилин",hh:t?"година_години_годин":"годину_години_годин",dd:"день_дні_днів",MM:"місяць_місяці_місяців",yy:"рік_роки_років"}[a],+e)}function a(e){return function(){return e+"о"+(11===this.hours()?"б":"")+"] LT"}}e.defineLocale("uk",{months:{format:"січня_лютого_березня_квітня_травня_червня_липня_серпня_вересня_жовтня_листопада_грудня".split("_"),standalone:"січень_лютий_березень_квітень_травень_червень_липень_серпень_вересень_жовтень_листопад_грудень".split("_")},monthsShort:"січ_лют_бер_квіт_трав_черв_лип_серп_вер_жовт_лист_груд".split("_"),weekdays:function(e,t){var a={nominative:"неділя_понеділок_вівторок_середа_четвер_п’ятниця_субота".split("_"),accusative:"неділю_понеділок_вівторок_середу_четвер_п’ятницю_суботу".split("_"),genitive:"неділі_понеділка_вівторка_середи_четверга_п’ятниці_суботи".split("_")};return!0===e?a.nominative.slice(1,7).concat(a.nominative.slice(0,1)):e?a[/(\[[ВвУу]\]) ?dddd/.test(t)?"accusative":/\[?(?:минулої|наступної)? ?\] ?dddd/.test(t)?"genitive":"nominative"][e.day()]:a.nominative},weekdaysShort:"нд_пн_вт_ср_чт_пт_сб".split("_"),weekdaysMin:"нд_пн_вт_ср_чт_пт_сб".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY р.",LLL:"D MMMM YYYY р., HH:mm",LLLL:"dddd, D MMMM YYYY р., HH:mm"},calendar:{sameDay:a("[Сьогодні "),nextDay:a("[Завтра "),lastDay:a("[Вчора "),nextWeek:a("[У] dddd ["),lastWeek:function(){switch(this.day()){case 0:case 3:case 5:case 6:return a("[Минулої] dddd [").call(this);case 1:case 2:case 4:return a("[Минулого] dddd [").call(this)}},sameElse:"L"},relativeTime:{future:"за %s",past:"%s тому",s:"декілька секунд",ss:t,m:t,mm:t,h:"годину",hh:t,d:"день",dd:t,M:"місяць",MM:t,y:"рік",yy:t},meridiemParse:/ночі|ранку|дня|вечора/,isPM:function(e){return/^(дня|вечора)$/.test(e)},meridiem:function(e,t,a){return e<4?"ночі":e<12?"ранку":e<17?"дня":"вечора"},dayOfMonthOrdinalParse:/\d{1,2}-(й|го)/,ordinal:function(e,t){switch(t){case"M":case"d":case"DDD":case"w":case"W":return e+"-й";case"D":return e+"-го";default:return e}},week:{dow:1,doy:7}})}(a(0))},function(e,t,a){!function(e){"use strict";var t=["جنوری","فروری","مارچ","اپریل","مئی","جون","جولائی","اگست","ستمبر","اکتوبر","نومبر","دسمبر"],a=["اتوار","پیر","منگل","بدھ","جمعرات","جمعہ","ہفتہ"];e.defineLocale("ur",{months:t,monthsShort:t,weekdays:a,weekdaysShort:a,weekdaysMin:a,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd، D MMMM YYYY HH:mm"},meridiemParse:/صبح|شام/,isPM:function(e){return"شام"===e},meridiem:function(e,t,a){return e<12?"صبح":"شام"},calendar:{sameDay:"[آج بوقت] LT",nextDay:"[کل بوقت] LT",nextWeek:"dddd [بوقت] LT",lastDay:"[گذشتہ روز بوقت] LT",lastWeek:"[گذشتہ] dddd [بوقت] LT",sameElse:"L"},relativeTime:{future:"%s بعد",past:"%s قبل",s:"چند سیکنڈ",ss:"%d سیکنڈ",m:"ایک منٹ",mm:"%d منٹ",h:"ایک گھنٹہ",hh:"%d گھنٹے",d:"ایک دن",dd:"%d دن",M:"ایک ماہ",MM:"%d ماہ",y:"ایک سال",yy:"%d سال"},preparse:function(e){return e.replace(/،/g,",")},postformat:function(e){return e.replace(/,/g,"،")},week:{dow:1,doy:4}})}(a(0))},function(e,t,a){!function(e){"use strict";e.defineLocale("uz",{months:"январ_феврал_март_апрел_май_июн_июл_август_сентябр_октябр_ноябр_декабр".split("_"),monthsShort:"янв_фев_мар_апр_май_июн_июл_авг_сен_окт_ноя_дек".split("_"),weekdays:"Якшанба_Душанба_Сешанба_Чоршанба_Пайшанба_Жума_Шанба".split("_"),weekdaysShort:"Якш_Душ_Сеш_Чор_Пай_Жум_Шан".split("_"),weekdaysMin:"Як_Ду_Се_Чо_Па_Жу_Ша".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"D MMMM YYYY, dddd HH:mm"},calendar:{sameDay:"[Бугун соат] LT [да]",nextDay:"[Эртага] LT [да]",nextWeek:"dddd [куни соат] LT [да]",lastDay:"[Кеча соат] LT [да]",lastWeek:"[Утган] dddd [куни соат] LT [да]",sameElse:"L"},relativeTime:{future:"Якин %s ичида",past:"Бир неча %s олдин",s:"фурсат",ss:"%d фурсат",m:"бир дакика",mm:"%d дакика",h:"бир соат",hh:"%d соат",d:"бир кун",dd:"%d кун",M:"бир ой",MM:"%d ой",y:"бир йил",yy:"%d йил"},week:{dow:1,doy:7}})}(a(0))},function(e,t,a){!function(e){"use strict";e.defineLocale("uz-latn",{months:"Yanvar_Fevral_Mart_Aprel_May_Iyun_Iyul_Avgust_Sentabr_Oktabr_Noyabr_Dekabr".split("_"),monthsShort:"Yan_Fev_Mar_Apr_May_Iyun_Iyul_Avg_Sen_Okt_Noy_Dek".split("_"),weekdays:"Yakshanba_Dushanba_Seshanba_Chorshanba_Payshanba_Juma_Shanba".split("_"),weekdaysShort:"Yak_Dush_Sesh_Chor_Pay_Jum_Shan".split("_"),weekdaysMin:"Ya_Du_Se_Cho_Pa_Ju_Sha".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"D MMMM YYYY, dddd HH:mm"},calendar:{sameDay:"[Bugun soat] LT [da]",nextDay:"[Ertaga] LT [da]",nextWeek:"dddd [kuni soat] LT [da]",lastDay:"[Kecha soat] LT [da]",lastWeek:"[O'tgan] dddd [kuni soat] LT [da]",sameElse:"L"},relativeTime:{future:"Yaqin %s ichida",past:"Bir necha %s oldin",s:"soniya",ss:"%d soniya",m:"bir daqiqa",mm:"%d daqiqa",h:"bir soat",hh:"%d soat",d:"bir kun",dd:"%d kun",M:"bir oy",MM:"%d oy",y:"bir yil",yy:"%d yil"},week:{dow:1,doy:7}})}(a(0))},function(e,t,a){!function(e){"use strict";e.defineLocale("vi",{months:"tháng 1_tháng 2_tháng 3_tháng 4_tháng 5_tháng 6_tháng 7_tháng 8_tháng 9_tháng 10_tháng 11_tháng 12".split("_"),monthsShort:"Th01_Th02_Th03_Th04_Th05_Th06_Th07_Th08_Th09_Th10_Th11_Th12".split("_"),monthsParseExact:!0,weekdays:"chủ nhật_thứ hai_thứ ba_thứ tư_thứ năm_thứ sáu_thứ bảy".split("_"),weekdaysShort:"CN_T2_T3_T4_T5_T6_T7".split("_"),weekdaysMin:"CN_T2_T3_T4_T5_T6_T7".split("_"),weekdaysParseExact:!0,meridiemParse:/sa|ch/i,isPM:function(e){return/^ch$/i.test(e)},meridiem:function(e,t,a){return e<12?a?"sa":"SA":a?"ch":"CH"},longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM [năm] YYYY",LLL:"D MMMM [năm] YYYY HH:mm",LLLL:"dddd, D MMMM [năm] YYYY HH:mm",l:"DD/M/YYYY",ll:"D MMM YYYY",lll:"D MMM YYYY HH:mm",llll:"ddd, D MMM YYYY HH:mm"},calendar:{sameDay:"[Hôm nay lúc] LT",nextDay:"[Ngày mai lúc] LT",nextWeek:"dddd [tuần tới lúc] LT",lastDay:"[Hôm qua lúc] LT",lastWeek:"dddd [tuần rồi lúc] LT",sameElse:"L"},relativeTime:{future:"%s tới",past:"%s trước",s:"vài giây",ss:"%d giây",m:"một phút",mm:"%d phút",h:"một giờ",hh:"%d giờ",d:"một ngày",dd:"%d ngày",M:"một tháng",MM:"%d tháng",y:"một năm",yy:"%d năm"},dayOfMonthOrdinalParse:/\d{1,2}/,ordinal:function(e){return e},week:{dow:1,doy:4}})}(a(0))},function(e,t,a){!function(e){"use strict";e.defineLocale("x-pseudo",{months:"J~áñúá~rý_F~ébrú~árý_~Márc~h_Áp~ríl_~Máý_~Júñé~_Júl~ý_Áú~gúst~_Sép~témb~ér_Ó~ctób~ér_Ñ~óvém~bér_~Décé~mbér".split("_"),monthsShort:"J~áñ_~Féb_~Már_~Ápr_~Máý_~Júñ_~Júl_~Áúg_~Sép_~Óct_~Ñóv_~Déc".split("_"),monthsParseExact:!0,weekdays:"S~úñdá~ý_Mó~ñdáý~_Túé~sdáý~_Wéd~ñésd~áý_T~húrs~dáý_~Fríd~áý_S~átúr~dáý".split("_"),weekdaysShort:"S~úñ_~Móñ_~Túé_~Wéd_~Thú_~Frí_~Sát".split("_"),weekdaysMin:"S~ú_Mó~_Tú_~Wé_T~h_Fr~_Sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[T~ódá~ý át] LT",nextDay:"[T~ómó~rró~w át] LT",nextWeek:"dddd [át] LT",lastDay:"[Ý~ést~érdá~ý át] LT",lastWeek:"[L~ást] dddd [át] LT",sameElse:"L"},relativeTime:{future:"í~ñ %s",past:"%s á~gó",s:"á ~féw ~sécó~ñds",ss:"%d s~écóñ~ds",m:"á ~míñ~úté",mm:"%d m~íñú~tés",h:"á~ñ hó~úr",hh:"%d h~óúrs",d:"á ~dáý",dd:"%d d~áýs",M:"á ~móñ~th",MM:"%d m~óñt~hs",y:"á ~ýéár",yy:"%d ý~éárs"},dayOfMonthOrdinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(e){var t=e%10;return e+(1===~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}})}(a(0))},function(e,t,a){!function(e){"use strict";e.defineLocale("yo",{months:"Sẹ́rẹ́_Èrèlè_Ẹrẹ̀nà_Ìgbé_Èbibi_Òkùdu_Agẹmo_Ògún_Owewe_Ọ̀wàrà_Bélú_Ọ̀pẹ̀̀".split("_"),monthsShort:"Sẹ́r_Èrl_Ẹrn_Ìgb_Èbi_Òkù_Agẹ_Ògú_Owe_Ọ̀wà_Bél_Ọ̀pẹ̀̀".split("_"),weekdays:"Àìkú_Ajé_Ìsẹ́gun_Ọjọ́rú_Ọjọ́bọ_Ẹtì_Àbámẹ́ta".split("_"),weekdaysShort:"Àìk_Ajé_Ìsẹ́_Ọjr_Ọjb_Ẹtì_Àbá".split("_"),weekdaysMin:"Àì_Aj_Ìs_Ọr_Ọb_Ẹt_Àb".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Ònì ni] LT",nextDay:"[Ọ̀la ni] LT",nextWeek:"dddd [Ọsẹ̀ tón'bọ] [ni] LT",lastDay:"[Àna ni] LT",lastWeek:"dddd [Ọsẹ̀ tólọ́] [ni] LT",sameElse:"L"},relativeTime:{future:"ní %s",past:"%s kọjá",s:"ìsẹjú aayá die",ss:"aayá %d",m:"ìsẹjú kan",mm:"ìsẹjú %d",h:"wákati kan",hh:"wákati %d",d:"ọjọ́ kan",dd:"ọjọ́ %d",M:"osù kan",MM:"osù %d",y:"ọdún kan",yy:"ọdún %d"},dayOfMonthOrdinalParse:/ọjọ́\s\d{1,2}/,ordinal:"ọjọ́ %d",week:{dow:1,doy:4}})}(a(0))},function(e,t,a){!function(e){"use strict";e.defineLocale("zh-cn",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),weekdaysShort:"周日_周一_周二_周三_周四_周五_周六".split("_"),weekdaysMin:"日_一_二_三_四_五_六".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY/MM/DD",LL:"YYYY年M月D日",LLL:"YYYY年M月D日Ah点mm分",LLLL:"YYYY年M月D日ddddAh点mm分",l:"YYYY/M/D",ll:"YYYY年M月D日",lll:"YYYY年M月D日 HH:mm",llll:"YYYY年M月D日dddd HH:mm"},meridiemParse:/凌晨|早上|上午|中午|下午|晚上/,meridiemHour:function(e,t){return 12===e&&(e=0),"凌晨"===t||"早上"===t||"上午"===t?e:"下午"===t||"晚上"===t?e+12:e>=11?e:e+12},meridiem:function(e,t,a){var n=100*e+t;return n<600?"凌晨":n<900?"早上":n<1130?"上午":n<1230?"中午":n<1800?"下午":"晚上"},calendar:{sameDay:"[今天]LT",nextDay:"[明天]LT",nextWeek:"[下]ddddLT",lastDay:"[昨天]LT",lastWeek:"[上]ddddLT",sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}(日|月|周)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"日";case"M":return e+"月";case"w":case"W":return e+"周";default:return e}},relativeTime:{future:"%s内",past:"%s前",s:"几秒",ss:"%d 秒",m:"1 分钟",mm:"%d 分钟",h:"1 小时",hh:"%d 小时",d:"1 天",dd:"%d 天",M:"1 个月",MM:"%d 个月",y:"1 年",yy:"%d 年"},week:{dow:1,doy:4}})}(a(0))},function(e,t,a){!function(e){"use strict";e.defineLocale("zh-hk",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),weekdaysShort:"週日_週一_週二_週三_週四_週五_週六".split("_"),weekdaysMin:"日_一_二_三_四_五_六".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY/MM/DD",LL:"YYYY年M月D日",LLL:"YYYY年M月D日 HH:mm",LLLL:"YYYY年M月D日dddd HH:mm",l:"YYYY/M/D",ll:"YYYY年M月D日",lll:"YYYY年M月D日 HH:mm",llll:"YYYY年M月D日dddd HH:mm"},meridiemParse:/凌晨|早上|上午|中午|下午|晚上/,meridiemHour:function(e,t){return 12===e&&(e=0),"凌晨"===t||"早上"===t||"上午"===t?e:"中午"===t?e>=11?e:e+12:"下午"===t||"晚上"===t?e+12:void 0},meridiem:function(e,t,a){var n=100*e+t;return n<600?"凌晨":n<900?"早上":n<1130?"上午":n<1230?"中午":n<1800?"下午":"晚上"},calendar:{sameDay:"[今天]LT",nextDay:"[明天]LT",nextWeek:"[下]ddddLT",lastDay:"[昨天]LT",lastWeek:"[上]ddddLT",sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}(日|月|週)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"日";case"M":return e+"月";case"w":case"W":return e+"週";default:return e}},relativeTime:{future:"%s內",past:"%s前",s:"幾秒",ss:"%d 秒",m:"1 分鐘",mm:"%d 分鐘",h:"1 小時",hh:"%d 小時",d:"1 天",dd:"%d 天",M:"1 個月",MM:"%d 個月",y:"1 年",yy:"%d 年"}})}(a(0))},function(e,t,a){!function(e){"use strict";e.defineLocale("zh-tw",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),weekdaysShort:"週日_週一_週二_週三_週四_週五_週六".split("_"),weekdaysMin:"日_一_二_三_四_五_六".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY/MM/DD",LL:"YYYY年M月D日",LLL:"YYYY年M月D日 HH:mm",LLLL:"YYYY年M月D日dddd HH:mm",l:"YYYY/M/D",ll:"YYYY年M月D日",lll:"YYYY年M月D日 HH:mm",llll:"YYYY年M月D日dddd HH:mm"},meridiemParse:/凌晨|早上|上午|中午|下午|晚上/,meridiemHour:function(e,t){return 12===e&&(e=0),"凌晨"===t||"早上"===t||"上午"===t?e:"中午"===t?e>=11?e:e+12:"下午"===t||"晚上"===t?e+12:void 0},meridiem:function(e,t,a){var n=100*e+t;return n<600?"凌晨":n<900?"早上":n<1130?"上午":n<1230?"中午":n<1800?"下午":"晚上"},calendar:{sameDay:"[今天] LT",nextDay:"[明天] LT",nextWeek:"[下]dddd LT",lastDay:"[昨天] LT",lastWeek:"[上]dddd LT",sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}(日|月|週)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"日";case"M":return e+"月";case"w":case"W":return e+"週";default:return e}},relativeTime:{future:"%s內",past:"%s前",s:"幾秒",ss:"%d 秒",m:"1 分鐘",mm:"%d 分鐘",h:"1 小時",hh:"%d 小時",d:"1 天",dd:"%d 天",M:"1 個月",MM:"%d 個月",y:"1 年",yy:"%d 年"}})}(a(0))},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(e,t,a){"use strict";a.r(t);a(117),a(111),a(348),a(118);var n=a(98),i=a.n(n),r=a(5);var s=Object.entries(r.epChartData.indices_data),o=[],d=[],l=[];i.a.defaults.global.legend.labels.usePointStyle=!0,s.forEach((function(e){o.push(e[1].name),d.push(e[1].docs),l.push(function(){for(var e="#",t=0;6<t;t++)e+="0123456789ABCDEF"[Math.floor(16*Math.random())];return e}())})),new i.a(document.getElementById("documentChart"),{type:"horizontalBar",data:{labels:o,datasets:[{label:"Documents",backgroundColor:l,data:d}]},options:{legend:{display:!1},title:{display:!0}}}),new i.a(document.getElementById("queriesTotalChart"),{type:"pie",data:{labels:["Indexing operations","Total Query operations"],datasets:[{label:"",backgroundColor:["#5ba9a7","#2e7875","#a980a4"],data:[r.epChartData.index_total,r.epChartData.query_total]}]},options:{responsive:!1,title:{display:!0},legend:{position:"right"},tooltips:{callbacks:{label:function(e,t){var a=t.datasets[e.datasetIndex].data[e.index];return"Operations: ".concat(a)}}}}}),new i.a(document.getElementById("queriesTimeChart"),{type:"pie",data:{labels:["Avg indexing time in ms","Avg query time in ms"],datasets:[{label:"",backgroundColor:["#9ea6c7","#93b3d5"],data:[r.epChartData.index_time_in_millis,r.epChartData.query_time_in_millis]}]},options:{responsive:!1,title:{display:!0},legend:{position:"right"},tooltips:{callbacks:{label:function(e,t){var a=t.datasets[e.datasetIndex].data[e.index];return"".concat(+a," milliseconds")}}}}})},function(e,t,a){var n=a(12),i=a(113).entries;n({target:"Object",stat:!0},{entries:function(e){return i(e)}})},function(e,t,a){var n={"./af":147,"./af.js":147,"./ar":148,"./ar-dz":149,"./ar-dz.js":149,"./ar-kw":150,"./ar-kw.js":150,"./ar-ly":151,"./ar-ly.js":151,"./ar-ma":152,"./ar-ma.js":152,"./ar-sa":153,"./ar-sa.js":153,"./ar-tn":154,"./ar-tn.js":154,"./ar.js":148,"./az":155,"./az.js":155,"./be":156,"./be.js":156,"./bg":157,"./bg.js":157,"./bm":158,"./bm.js":158,"./bn":159,"./bn.js":159,"./bo":160,"./bo.js":160,"./br":161,"./br.js":161,"./bs":162,"./bs.js":162,"./ca":163,"./ca.js":163,"./cs":164,"./cs.js":164,"./cv":165,"./cv.js":165,"./cy":166,"./cy.js":166,"./da":167,"./da.js":167,"./de":168,"./de-at":169,"./de-at.js":169,"./de-ch":170,"./de-ch.js":170,"./de.js":168,"./dv":171,"./dv.js":171,"./el":172,"./el.js":172,"./en-SG":173,"./en-SG.js":173,"./en-au":174,"./en-au.js":174,"./en-ca":175,"./en-ca.js":175,"./en-gb":176,"./en-gb.js":176,"./en-ie":177,"./en-ie.js":177,"./en-il":178,"./en-il.js":178,"./en-nz":179,"./en-nz.js":179,"./eo":180,"./eo.js":180,"./es":181,"./es-do":182,"./es-do.js":182,"./es-us":183,"./es-us.js":183,"./es.js":181,"./et":184,"./et.js":184,"./eu":185,"./eu.js":185,"./fa":186,"./fa.js":186,"./fi":187,"./fi.js":187,"./fo":188,"./fo.js":188,"./fr":189,"./fr-ca":190,"./fr-ca.js":190,"./fr-ch":191,"./fr-ch.js":191,"./fr.js":189,"./fy":192,"./fy.js":192,"./ga":193,"./ga.js":193,"./gd":194,"./gd.js":194,"./gl":195,"./gl.js":195,"./gom-latn":196,"./gom-latn.js":196,"./gu":197,"./gu.js":197,"./he":198,"./he.js":198,"./hi":199,"./hi.js":199,"./hr":200,"./hr.js":200,"./hu":201,"./hu.js":201,"./hy-am":202,"./hy-am.js":202,"./id":203,"./id.js":203,"./is":204,"./is.js":204,"./it":205,"./it-ch":206,"./it-ch.js":206,"./it.js":205,"./ja":207,"./ja.js":207,"./jv":208,"./jv.js":208,"./ka":209,"./ka.js":209,"./kk":210,"./kk.js":210,"./km":211,"./km.js":211,"./kn":212,"./kn.js":212,"./ko":213,"./ko.js":213,"./ku":214,"./ku.js":214,"./ky":215,"./ky.js":215,"./lb":216,"./lb.js":216,"./lo":217,"./lo.js":217,"./lt":218,"./lt.js":218,"./lv":219,"./lv.js":219,"./me":220,"./me.js":220,"./mi":221,"./mi.js":221,"./mk":222,"./mk.js":222,"./ml":223,"./ml.js":223,"./mn":224,"./mn.js":224,"./mr":225,"./mr.js":225,"./ms":226,"./ms-my":227,"./ms-my.js":227,"./ms.js":226,"./mt":228,"./mt.js":228,"./my":229,"./my.js":229,"./nb":230,"./nb.js":230,"./ne":231,"./ne.js":231,"./nl":232,"./nl-be":233,"./nl-be.js":233,"./nl.js":232,"./nn":234,"./nn.js":234,"./pa-in":235,"./pa-in.js":235,"./pl":236,"./pl.js":236,"./pt":237,"./pt-br":238,"./pt-br.js":238,"./pt.js":237,"./ro":239,"./ro.js":239,"./ru":240,"./ru.js":240,"./sd":241,"./sd.js":241,"./se":242,"./se.js":242,"./si":243,"./si.js":243,"./sk":244,"./sk.js":244,"./sl":245,"./sl.js":245,"./sq":246,"./sq.js":246,"./sr":247,"./sr-cyrl":248,"./sr-cyrl.js":248,"./sr.js":247,"./ss":249,"./ss.js":249,"./sv":250,"./sv.js":250,"./sw":251,"./sw.js":251,"./ta":252,"./ta.js":252,"./te":253,"./te.js":253,"./tet":254,"./tet.js":254,"./tg":255,"./tg.js":255,"./th":256,"./th.js":256,"./tl-ph":257,"./tl-ph.js":257,"./tlh":258,"./tlh.js":258,"./tr":259,"./tr.js":259,"./tzl":260,"./tzl.js":260,"./tzm":261,"./tzm-latn":262,"./tzm-latn.js":262,"./tzm.js":261,"./ug-cn":263,"./ug-cn.js":263,"./uk":264,"./uk.js":264,"./ur":265,"./ur.js":265,"./uz":266,"./uz-latn":267,"./uz-latn.js":267,"./uz.js":266,"./vi":268,"./vi.js":268,"./x-pseudo":269,"./x-pseudo.js":269,"./yo":270,"./yo.js":270,"./zh-cn":271,"./zh-cn.js":271,"./zh-hk":272,"./zh-hk.js":272,"./zh-tw":273,"./zh-tw.js":273};function i(e){var t=r(e);return a(t)}function r(e){if(!a.o(n,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return n[e]}i.keys=function(){return Object.keys(n)},i.resolve=r,e.exports=i,i.id=349}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,